// Code generated by entc, DO NOT EDIT.

package adchannel

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ChannelName applies equality check predicate on the "channelName" field. It's identical to ChannelNameEQ.
func ChannelName(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelName), v))
	})
}

// NovelId applies equality check predicate on the "novelId" field. It's identical to NovelIdEQ.
func NovelId(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// Reg applies equality check predicate on the "reg" field. It's identical to RegEQ.
func Reg(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReg), v))
	})
}

// Pay applies equality check predicate on the "pay" field. It's identical to PayEQ.
func Pay(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPay), v))
	})
}

// NovelName applies equality check predicate on the "novelName" field. It's identical to NovelNameEQ.
func NovelName(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelName), v))
	})
}

// ChapterId applies equality check predicate on the "chapterId" field. It's identical to ChapterIdEQ.
func ChapterId(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterId), v))
	})
}

// ChapterNum applies equality check predicate on the "chapterNum" field. It's identical to ChapterNumEQ.
func ChapterNum(v int32) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterNum), v))
	})
}

// AdType applies equality check predicate on the "adType" field. It's identical to AdTypeEQ.
func AdType(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdType), v))
	})
}

// Img applies equality check predicate on the "img" field. It's identical to ImgEQ.
func Img(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImg), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// ChannelNameEQ applies the EQ predicate on the "channelName" field.
func ChannelNameEQ(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelName), v))
	})
}

// ChannelNameNEQ applies the NEQ predicate on the "channelName" field.
func ChannelNameNEQ(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelName), v))
	})
}

// ChannelNameIn applies the In predicate on the "channelName" field.
func ChannelNameIn(vs ...string) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChannelName), v...))
	})
}

// ChannelNameNotIn applies the NotIn predicate on the "channelName" field.
func ChannelNameNotIn(vs ...string) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChannelName), v...))
	})
}

// ChannelNameGT applies the GT predicate on the "channelName" field.
func ChannelNameGT(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannelName), v))
	})
}

// ChannelNameGTE applies the GTE predicate on the "channelName" field.
func ChannelNameGTE(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannelName), v))
	})
}

// ChannelNameLT applies the LT predicate on the "channelName" field.
func ChannelNameLT(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannelName), v))
	})
}

// ChannelNameLTE applies the LTE predicate on the "channelName" field.
func ChannelNameLTE(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannelName), v))
	})
}

// ChannelNameContains applies the Contains predicate on the "channelName" field.
func ChannelNameContains(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChannelName), v))
	})
}

// ChannelNameHasPrefix applies the HasPrefix predicate on the "channelName" field.
func ChannelNameHasPrefix(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChannelName), v))
	})
}

// ChannelNameHasSuffix applies the HasSuffix predicate on the "channelName" field.
func ChannelNameHasSuffix(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChannelName), v))
	})
}

// ChannelNameIsNil applies the IsNil predicate on the "channelName" field.
func ChannelNameIsNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChannelName)))
	})
}

// ChannelNameNotNil applies the NotNil predicate on the "channelName" field.
func ChannelNameNotNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChannelName)))
	})
}

// ChannelNameEqualFold applies the EqualFold predicate on the "channelName" field.
func ChannelNameEqualFold(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChannelName), v))
	})
}

// ChannelNameContainsFold applies the ContainsFold predicate on the "channelName" field.
func ChannelNameContainsFold(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChannelName), v))
	})
}

// NovelIdEQ applies the EQ predicate on the "novelId" field.
func NovelIdEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// NovelIdNEQ applies the NEQ predicate on the "novelId" field.
func NovelIdNEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelId), v))
	})
}

// NovelIdIn applies the In predicate on the "novelId" field.
func NovelIdIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelId), v...))
	})
}

// NovelIdNotIn applies the NotIn predicate on the "novelId" field.
func NovelIdNotIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelId), v...))
	})
}

// NovelIdGT applies the GT predicate on the "novelId" field.
func NovelIdGT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNovelId), v))
	})
}

// NovelIdGTE applies the GTE predicate on the "novelId" field.
func NovelIdGTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNovelId), v))
	})
}

// NovelIdLT applies the LT predicate on the "novelId" field.
func NovelIdLT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNovelId), v))
	})
}

// NovelIdLTE applies the LTE predicate on the "novelId" field.
func NovelIdLTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNovelId), v))
	})
}

// NovelIdIsNil applies the IsNil predicate on the "novelId" field.
func NovelIdIsNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNovelId)))
	})
}

// NovelIdNotNil applies the NotNil predicate on the "novelId" field.
func NovelIdNotNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNovelId)))
	})
}

// RegEQ applies the EQ predicate on the "reg" field.
func RegEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReg), v))
	})
}

// RegNEQ applies the NEQ predicate on the "reg" field.
func RegNEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReg), v))
	})
}

// RegIn applies the In predicate on the "reg" field.
func RegIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReg), v...))
	})
}

// RegNotIn applies the NotIn predicate on the "reg" field.
func RegNotIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReg), v...))
	})
}

// RegGT applies the GT predicate on the "reg" field.
func RegGT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReg), v))
	})
}

// RegGTE applies the GTE predicate on the "reg" field.
func RegGTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReg), v))
	})
}

// RegLT applies the LT predicate on the "reg" field.
func RegLT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReg), v))
	})
}

// RegLTE applies the LTE predicate on the "reg" field.
func RegLTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReg), v))
	})
}

// RegIsNil applies the IsNil predicate on the "reg" field.
func RegIsNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReg)))
	})
}

// RegNotNil applies the NotNil predicate on the "reg" field.
func RegNotNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReg)))
	})
}

// PayEQ applies the EQ predicate on the "pay" field.
func PayEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPay), v))
	})
}

// PayNEQ applies the NEQ predicate on the "pay" field.
func PayNEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPay), v))
	})
}

// PayIn applies the In predicate on the "pay" field.
func PayIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPay), v...))
	})
}

// PayNotIn applies the NotIn predicate on the "pay" field.
func PayNotIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPay), v...))
	})
}

// PayGT applies the GT predicate on the "pay" field.
func PayGT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPay), v))
	})
}

// PayGTE applies the GTE predicate on the "pay" field.
func PayGTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPay), v))
	})
}

// PayLT applies the LT predicate on the "pay" field.
func PayLT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPay), v))
	})
}

// PayLTE applies the LTE predicate on the "pay" field.
func PayLTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPay), v))
	})
}

// PayIsNil applies the IsNil predicate on the "pay" field.
func PayIsNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPay)))
	})
}

// PayNotNil applies the NotNil predicate on the "pay" field.
func PayNotNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPay)))
	})
}

// NovelNameEQ applies the EQ predicate on the "novelName" field.
func NovelNameEQ(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelName), v))
	})
}

// NovelNameNEQ applies the NEQ predicate on the "novelName" field.
func NovelNameNEQ(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelName), v))
	})
}

// NovelNameIn applies the In predicate on the "novelName" field.
func NovelNameIn(vs ...string) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelName), v...))
	})
}

// NovelNameNotIn applies the NotIn predicate on the "novelName" field.
func NovelNameNotIn(vs ...string) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelName), v...))
	})
}

// NovelNameGT applies the GT predicate on the "novelName" field.
func NovelNameGT(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNovelName), v))
	})
}

// NovelNameGTE applies the GTE predicate on the "novelName" field.
func NovelNameGTE(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNovelName), v))
	})
}

// NovelNameLT applies the LT predicate on the "novelName" field.
func NovelNameLT(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNovelName), v))
	})
}

// NovelNameLTE applies the LTE predicate on the "novelName" field.
func NovelNameLTE(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNovelName), v))
	})
}

// NovelNameContains applies the Contains predicate on the "novelName" field.
func NovelNameContains(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNovelName), v))
	})
}

// NovelNameHasPrefix applies the HasPrefix predicate on the "novelName" field.
func NovelNameHasPrefix(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNovelName), v))
	})
}

// NovelNameHasSuffix applies the HasSuffix predicate on the "novelName" field.
func NovelNameHasSuffix(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNovelName), v))
	})
}

// NovelNameIsNil applies the IsNil predicate on the "novelName" field.
func NovelNameIsNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNovelName)))
	})
}

// NovelNameNotNil applies the NotNil predicate on the "novelName" field.
func NovelNameNotNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNovelName)))
	})
}

// NovelNameEqualFold applies the EqualFold predicate on the "novelName" field.
func NovelNameEqualFold(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNovelName), v))
	})
}

// NovelNameContainsFold applies the ContainsFold predicate on the "novelName" field.
func NovelNameContainsFold(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNovelName), v))
	})
}

// ChapterIdEQ applies the EQ predicate on the "chapterId" field.
func ChapterIdEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterId), v))
	})
}

// ChapterIdNEQ applies the NEQ predicate on the "chapterId" field.
func ChapterIdNEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterId), v))
	})
}

// ChapterIdIn applies the In predicate on the "chapterId" field.
func ChapterIdIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterId), v...))
	})
}

// ChapterIdNotIn applies the NotIn predicate on the "chapterId" field.
func ChapterIdNotIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterId), v...))
	})
}

// ChapterIdGT applies the GT predicate on the "chapterId" field.
func ChapterIdGT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterId), v))
	})
}

// ChapterIdGTE applies the GTE predicate on the "chapterId" field.
func ChapterIdGTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterId), v))
	})
}

// ChapterIdLT applies the LT predicate on the "chapterId" field.
func ChapterIdLT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterId), v))
	})
}

// ChapterIdLTE applies the LTE predicate on the "chapterId" field.
func ChapterIdLTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterId), v))
	})
}

// ChapterIdIsNil applies the IsNil predicate on the "chapterId" field.
func ChapterIdIsNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterId)))
	})
}

// ChapterIdNotNil applies the NotNil predicate on the "chapterId" field.
func ChapterIdNotNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterId)))
	})
}

// ChapterNumEQ applies the EQ predicate on the "chapterNum" field.
func ChapterNumEQ(v int32) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterNum), v))
	})
}

// ChapterNumNEQ applies the NEQ predicate on the "chapterNum" field.
func ChapterNumNEQ(v int32) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterNum), v))
	})
}

// ChapterNumIn applies the In predicate on the "chapterNum" field.
func ChapterNumIn(vs ...int32) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterNum), v...))
	})
}

// ChapterNumNotIn applies the NotIn predicate on the "chapterNum" field.
func ChapterNumNotIn(vs ...int32) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterNum), v...))
	})
}

// ChapterNumGT applies the GT predicate on the "chapterNum" field.
func ChapterNumGT(v int32) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterNum), v))
	})
}

// ChapterNumGTE applies the GTE predicate on the "chapterNum" field.
func ChapterNumGTE(v int32) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterNum), v))
	})
}

// ChapterNumLT applies the LT predicate on the "chapterNum" field.
func ChapterNumLT(v int32) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterNum), v))
	})
}

// ChapterNumLTE applies the LTE predicate on the "chapterNum" field.
func ChapterNumLTE(v int32) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterNum), v))
	})
}

// ChapterNumIsNil applies the IsNil predicate on the "chapterNum" field.
func ChapterNumIsNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterNum)))
	})
}

// ChapterNumNotNil applies the NotNil predicate on the "chapterNum" field.
func ChapterNumNotNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterNum)))
	})
}

// AdTypeEQ applies the EQ predicate on the "adType" field.
func AdTypeEQ(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdType), v))
	})
}

// AdTypeNEQ applies the NEQ predicate on the "adType" field.
func AdTypeNEQ(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdType), v))
	})
}

// AdTypeIn applies the In predicate on the "adType" field.
func AdTypeIn(vs ...string) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdType), v...))
	})
}

// AdTypeNotIn applies the NotIn predicate on the "adType" field.
func AdTypeNotIn(vs ...string) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdType), v...))
	})
}

// AdTypeGT applies the GT predicate on the "adType" field.
func AdTypeGT(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdType), v))
	})
}

// AdTypeGTE applies the GTE predicate on the "adType" field.
func AdTypeGTE(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdType), v))
	})
}

// AdTypeLT applies the LT predicate on the "adType" field.
func AdTypeLT(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdType), v))
	})
}

// AdTypeLTE applies the LTE predicate on the "adType" field.
func AdTypeLTE(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdType), v))
	})
}

// AdTypeContains applies the Contains predicate on the "adType" field.
func AdTypeContains(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdType), v))
	})
}

// AdTypeHasPrefix applies the HasPrefix predicate on the "adType" field.
func AdTypeHasPrefix(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdType), v))
	})
}

// AdTypeHasSuffix applies the HasSuffix predicate on the "adType" field.
func AdTypeHasSuffix(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdType), v))
	})
}

// AdTypeIsNil applies the IsNil predicate on the "adType" field.
func AdTypeIsNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdType)))
	})
}

// AdTypeNotNil applies the NotNil predicate on the "adType" field.
func AdTypeNotNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdType)))
	})
}

// AdTypeEqualFold applies the EqualFold predicate on the "adType" field.
func AdTypeEqualFold(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdType), v))
	})
}

// AdTypeContainsFold applies the ContainsFold predicate on the "adType" field.
func AdTypeContainsFold(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdType), v))
	})
}

// ImgEQ applies the EQ predicate on the "img" field.
func ImgEQ(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImg), v))
	})
}

// ImgNEQ applies the NEQ predicate on the "img" field.
func ImgNEQ(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImg), v))
	})
}

// ImgIn applies the In predicate on the "img" field.
func ImgIn(vs ...string) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImg), v...))
	})
}

// ImgNotIn applies the NotIn predicate on the "img" field.
func ImgNotIn(vs ...string) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImg), v...))
	})
}

// ImgGT applies the GT predicate on the "img" field.
func ImgGT(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImg), v))
	})
}

// ImgGTE applies the GTE predicate on the "img" field.
func ImgGTE(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImg), v))
	})
}

// ImgLT applies the LT predicate on the "img" field.
func ImgLT(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImg), v))
	})
}

// ImgLTE applies the LTE predicate on the "img" field.
func ImgLTE(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImg), v))
	})
}

// ImgContains applies the Contains predicate on the "img" field.
func ImgContains(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImg), v))
	})
}

// ImgHasPrefix applies the HasPrefix predicate on the "img" field.
func ImgHasPrefix(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImg), v))
	})
}

// ImgHasSuffix applies the HasSuffix predicate on the "img" field.
func ImgHasSuffix(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImg), v))
	})
}

// ImgIsNil applies the IsNil predicate on the "img" field.
func ImgIsNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImg)))
	})
}

// ImgNotNil applies the NotNil predicate on the "img" field.
func ImgNotNil() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImg)))
	})
}

// ImgEqualFold applies the EqualFold predicate on the "img" field.
func ImgEqualFold(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImg), v))
	})
}

// ImgContainsFold applies the ContainsFold predicate on the "img" field.
func ImgContainsFold(v string) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImg), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.AdChannel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AdChannel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.SocialUser) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.PayOrder) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdChannel) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdChannel) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdChannel) predicate.AdChannel {
	return predicate.AdChannel(func(s *sql.Selector) {
		p(s.Not())
	})
}
