// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysloginlog"
	"hope/apps/admin/internal/data/ent/sysuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysLoginLogUpdate is the builder for updating SysLoginLog entities.
type SysLoginLogUpdate struct {
	config
	hooks    []Hook
	mutation *SysLoginLogMutation
}

// Where appends a list predicates to the SysLoginLogUpdate builder.
func (sllu *SysLoginLogUpdate) Where(ps ...predicate.SysLoginLog) *SysLoginLogUpdate {
	sllu.mutation.Where(ps...)
	return sllu
}

// SetStatus sets the "status" field.
func (sllu *SysLoginLogUpdate) SetStatus(s string) *SysLoginLogUpdate {
	sllu.mutation.SetStatus(s)
	return sllu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableStatus(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetStatus(*s)
	}
	return sllu
}

// ClearStatus clears the value of the "status" field.
func (sllu *SysLoginLogUpdate) ClearStatus() *SysLoginLogUpdate {
	sllu.mutation.ClearStatus()
	return sllu
}

// SetIpaddr sets the "ipaddr" field.
func (sllu *SysLoginLogUpdate) SetIpaddr(s string) *SysLoginLogUpdate {
	sllu.mutation.SetIpaddr(s)
	return sllu
}

// SetNillableIpaddr sets the "ipaddr" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableIpaddr(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetIpaddr(*s)
	}
	return sllu
}

// ClearIpaddr clears the value of the "ipaddr" field.
func (sllu *SysLoginLogUpdate) ClearIpaddr() *SysLoginLogUpdate {
	sllu.mutation.ClearIpaddr()
	return sllu
}

// SetLoginLocation sets the "loginLocation" field.
func (sllu *SysLoginLogUpdate) SetLoginLocation(s string) *SysLoginLogUpdate {
	sllu.mutation.SetLoginLocation(s)
	return sllu
}

// SetNillableLoginLocation sets the "loginLocation" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableLoginLocation(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetLoginLocation(*s)
	}
	return sllu
}

// ClearLoginLocation clears the value of the "loginLocation" field.
func (sllu *SysLoginLogUpdate) ClearLoginLocation() *SysLoginLogUpdate {
	sllu.mutation.ClearLoginLocation()
	return sllu
}

// SetBrowser sets the "browser" field.
func (sllu *SysLoginLogUpdate) SetBrowser(s string) *SysLoginLogUpdate {
	sllu.mutation.SetBrowser(s)
	return sllu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableBrowser(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetBrowser(*s)
	}
	return sllu
}

// ClearBrowser clears the value of the "browser" field.
func (sllu *SysLoginLogUpdate) ClearBrowser() *SysLoginLogUpdate {
	sllu.mutation.ClearBrowser()
	return sllu
}

// SetOs sets the "os" field.
func (sllu *SysLoginLogUpdate) SetOs(s string) *SysLoginLogUpdate {
	sllu.mutation.SetOs(s)
	return sllu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableOs(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetOs(*s)
	}
	return sllu
}

// ClearOs clears the value of the "os" field.
func (sllu *SysLoginLogUpdate) ClearOs() *SysLoginLogUpdate {
	sllu.mutation.ClearOs()
	return sllu
}

// SetPlatform sets the "platform" field.
func (sllu *SysLoginLogUpdate) SetPlatform(s string) *SysLoginLogUpdate {
	sllu.mutation.SetPlatform(s)
	return sllu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillablePlatform(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetPlatform(*s)
	}
	return sllu
}

// ClearPlatform clears the value of the "platform" field.
func (sllu *SysLoginLogUpdate) ClearPlatform() *SysLoginLogUpdate {
	sllu.mutation.ClearPlatform()
	return sllu
}

// SetLoginTime sets the "loginTime" field.
func (sllu *SysLoginLogUpdate) SetLoginTime(t time.Time) *SysLoginLogUpdate {
	sllu.mutation.SetLoginTime(t)
	return sllu
}

// SetNillableLoginTime sets the "loginTime" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableLoginTime(t *time.Time) *SysLoginLogUpdate {
	if t != nil {
		sllu.SetLoginTime(*t)
	}
	return sllu
}

// ClearLoginTime clears the value of the "loginTime" field.
func (sllu *SysLoginLogUpdate) ClearLoginTime() *SysLoginLogUpdate {
	sllu.mutation.ClearLoginTime()
	return sllu
}

// SetRemark sets the "remark" field.
func (sllu *SysLoginLogUpdate) SetRemark(s string) *SysLoginLogUpdate {
	sllu.mutation.SetRemark(s)
	return sllu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableRemark(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetRemark(*s)
	}
	return sllu
}

// ClearRemark clears the value of the "remark" field.
func (sllu *SysLoginLogUpdate) ClearRemark() *SysLoginLogUpdate {
	sllu.mutation.ClearRemark()
	return sllu
}

// SetMsg sets the "msg" field.
func (sllu *SysLoginLogUpdate) SetMsg(s string) *SysLoginLogUpdate {
	sllu.mutation.SetMsg(s)
	return sllu
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableMsg(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetMsg(*s)
	}
	return sllu
}

// ClearMsg clears the value of the "msg" field.
func (sllu *SysLoginLogUpdate) ClearMsg() *SysLoginLogUpdate {
	sllu.mutation.ClearMsg()
	return sllu
}

// SetUpdatedAt sets the "updatedAt" field.
func (sllu *SysLoginLogUpdate) SetUpdatedAt(t time.Time) *SysLoginLogUpdate {
	sllu.mutation.SetUpdatedAt(t)
	return sllu
}

// SetCreateBy sets the "createBy" field.
func (sllu *SysLoginLogUpdate) SetCreateBy(i int64) *SysLoginLogUpdate {
	sllu.mutation.ResetCreateBy()
	sllu.mutation.SetCreateBy(i)
	return sllu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableCreateBy(i *int64) *SysLoginLogUpdate {
	if i != nil {
		sllu.SetCreateBy(*i)
	}
	return sllu
}

// AddCreateBy adds i to the "createBy" field.
func (sllu *SysLoginLogUpdate) AddCreateBy(i int64) *SysLoginLogUpdate {
	sllu.mutation.AddCreateBy(i)
	return sllu
}

// SetUpdateBy sets the "updateBy" field.
func (sllu *SysLoginLogUpdate) SetUpdateBy(i int64) *SysLoginLogUpdate {
	sllu.mutation.ResetUpdateBy()
	sllu.mutation.SetUpdateBy(i)
	return sllu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableUpdateBy(i *int64) *SysLoginLogUpdate {
	if i != nil {
		sllu.SetUpdateBy(*i)
	}
	return sllu
}

// AddUpdateBy adds i to the "updateBy" field.
func (sllu *SysLoginLogUpdate) AddUpdateBy(i int64) *SysLoginLogUpdate {
	sllu.mutation.AddUpdateBy(i)
	return sllu
}

// SetTenantId sets the "tenantId" field.
func (sllu *SysLoginLogUpdate) SetTenantId(i int64) *SysLoginLogUpdate {
	sllu.mutation.ResetTenantId()
	sllu.mutation.SetTenantId(i)
	return sllu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableTenantId(i *int64) *SysLoginLogUpdate {
	if i != nil {
		sllu.SetTenantId(*i)
	}
	return sllu
}

// AddTenantId adds i to the "tenantId" field.
func (sllu *SysLoginLogUpdate) AddTenantId(i int64) *SysLoginLogUpdate {
	sllu.mutation.AddTenantId(i)
	return sllu
}

// SetUserID sets the "user" edge to the SysUser entity by ID.
func (sllu *SysLoginLogUpdate) SetUserID(id int64) *SysLoginLogUpdate {
	sllu.mutation.SetUserID(id)
	return sllu
}

// SetNillableUserID sets the "user" edge to the SysUser entity by ID if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableUserID(id *int64) *SysLoginLogUpdate {
	if id != nil {
		sllu = sllu.SetUserID(*id)
	}
	return sllu
}

// SetUser sets the "user" edge to the SysUser entity.
func (sllu *SysLoginLogUpdate) SetUser(s *SysUser) *SysLoginLogUpdate {
	return sllu.SetUserID(s.ID)
}

// Mutation returns the SysLoginLogMutation object of the builder.
func (sllu *SysLoginLogUpdate) Mutation() *SysLoginLogMutation {
	return sllu.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (sllu *SysLoginLogUpdate) ClearUser() *SysLoginLogUpdate {
	sllu.mutation.ClearUser()
	return sllu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sllu *SysLoginLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sllu.defaults()
	if len(sllu.hooks) == 0 {
		affected, err = sllu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sllu.mutation = mutation
			affected, err = sllu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sllu.hooks) - 1; i >= 0; i-- {
			if sllu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sllu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sllu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sllu *SysLoginLogUpdate) SaveX(ctx context.Context) int {
	affected, err := sllu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sllu *SysLoginLogUpdate) Exec(ctx context.Context) error {
	_, err := sllu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sllu *SysLoginLogUpdate) ExecX(ctx context.Context) {
	if err := sllu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sllu *SysLoginLogUpdate) defaults() {
	if _, ok := sllu.mutation.UpdatedAt(); !ok {
		v := sysloginlog.UpdateDefaultUpdatedAt()
		sllu.mutation.SetUpdatedAt(v)
	}
}

func (sllu *SysLoginLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysloginlog.Table,
			Columns: sysloginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysloginlog.FieldID,
			},
		},
	}
	if ps := sllu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sllu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldStatus,
		})
	}
	if sllu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldStatus,
		})
	}
	if value, ok := sllu.mutation.Ipaddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldIpaddr,
		})
	}
	if sllu.mutation.IpaddrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldIpaddr,
		})
	}
	if value, ok := sllu.mutation.LoginLocation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldLoginLocation,
		})
	}
	if sllu.mutation.LoginLocationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldLoginLocation,
		})
	}
	if value, ok := sllu.mutation.Browser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldBrowser,
		})
	}
	if sllu.mutation.BrowserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldBrowser,
		})
	}
	if value, ok := sllu.mutation.Os(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldOs,
		})
	}
	if sllu.mutation.OsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldOs,
		})
	}
	if value, ok := sllu.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldPlatform,
		})
	}
	if sllu.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldPlatform,
		})
	}
	if value, ok := sllu.mutation.LoginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysloginlog.FieldLoginTime,
		})
	}
	if sllu.mutation.LoginTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysloginlog.FieldLoginTime,
		})
	}
	if value, ok := sllu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldRemark,
		})
	}
	if sllu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldRemark,
		})
	}
	if value, ok := sllu.mutation.Msg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldMsg,
		})
	}
	if sllu.mutation.MsgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldMsg,
		})
	}
	if value, ok := sllu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysloginlog.FieldUpdatedAt,
		})
	}
	if value, ok := sllu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldCreateBy,
		})
	}
	if value, ok := sllu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldCreateBy,
		})
	}
	if value, ok := sllu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldUpdateBy,
		})
	}
	if value, ok := sllu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldUpdateBy,
		})
	}
	if value, ok := sllu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldTenantId,
		})
	}
	if value, ok := sllu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldTenantId,
		})
	}
	if sllu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysloginlog.UserTable,
			Columns: []string{sysloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sllu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysloginlog.UserTable,
			Columns: []string{sysloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sllu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysloginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysLoginLogUpdateOne is the builder for updating a single SysLoginLog entity.
type SysLoginLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysLoginLogMutation
}

// SetStatus sets the "status" field.
func (slluo *SysLoginLogUpdateOne) SetStatus(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetStatus(s)
	return slluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableStatus(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetStatus(*s)
	}
	return slluo
}

// ClearStatus clears the value of the "status" field.
func (slluo *SysLoginLogUpdateOne) ClearStatus() *SysLoginLogUpdateOne {
	slluo.mutation.ClearStatus()
	return slluo
}

// SetIpaddr sets the "ipaddr" field.
func (slluo *SysLoginLogUpdateOne) SetIpaddr(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetIpaddr(s)
	return slluo
}

// SetNillableIpaddr sets the "ipaddr" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableIpaddr(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetIpaddr(*s)
	}
	return slluo
}

// ClearIpaddr clears the value of the "ipaddr" field.
func (slluo *SysLoginLogUpdateOne) ClearIpaddr() *SysLoginLogUpdateOne {
	slluo.mutation.ClearIpaddr()
	return slluo
}

// SetLoginLocation sets the "loginLocation" field.
func (slluo *SysLoginLogUpdateOne) SetLoginLocation(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetLoginLocation(s)
	return slluo
}

// SetNillableLoginLocation sets the "loginLocation" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableLoginLocation(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetLoginLocation(*s)
	}
	return slluo
}

// ClearLoginLocation clears the value of the "loginLocation" field.
func (slluo *SysLoginLogUpdateOne) ClearLoginLocation() *SysLoginLogUpdateOne {
	slluo.mutation.ClearLoginLocation()
	return slluo
}

// SetBrowser sets the "browser" field.
func (slluo *SysLoginLogUpdateOne) SetBrowser(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetBrowser(s)
	return slluo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableBrowser(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetBrowser(*s)
	}
	return slluo
}

// ClearBrowser clears the value of the "browser" field.
func (slluo *SysLoginLogUpdateOne) ClearBrowser() *SysLoginLogUpdateOne {
	slluo.mutation.ClearBrowser()
	return slluo
}

// SetOs sets the "os" field.
func (slluo *SysLoginLogUpdateOne) SetOs(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetOs(s)
	return slluo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableOs(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetOs(*s)
	}
	return slluo
}

// ClearOs clears the value of the "os" field.
func (slluo *SysLoginLogUpdateOne) ClearOs() *SysLoginLogUpdateOne {
	slluo.mutation.ClearOs()
	return slluo
}

// SetPlatform sets the "platform" field.
func (slluo *SysLoginLogUpdateOne) SetPlatform(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetPlatform(s)
	return slluo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillablePlatform(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetPlatform(*s)
	}
	return slluo
}

// ClearPlatform clears the value of the "platform" field.
func (slluo *SysLoginLogUpdateOne) ClearPlatform() *SysLoginLogUpdateOne {
	slluo.mutation.ClearPlatform()
	return slluo
}

// SetLoginTime sets the "loginTime" field.
func (slluo *SysLoginLogUpdateOne) SetLoginTime(t time.Time) *SysLoginLogUpdateOne {
	slluo.mutation.SetLoginTime(t)
	return slluo
}

// SetNillableLoginTime sets the "loginTime" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableLoginTime(t *time.Time) *SysLoginLogUpdateOne {
	if t != nil {
		slluo.SetLoginTime(*t)
	}
	return slluo
}

// ClearLoginTime clears the value of the "loginTime" field.
func (slluo *SysLoginLogUpdateOne) ClearLoginTime() *SysLoginLogUpdateOne {
	slluo.mutation.ClearLoginTime()
	return slluo
}

// SetRemark sets the "remark" field.
func (slluo *SysLoginLogUpdateOne) SetRemark(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetRemark(s)
	return slluo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableRemark(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetRemark(*s)
	}
	return slluo
}

// ClearRemark clears the value of the "remark" field.
func (slluo *SysLoginLogUpdateOne) ClearRemark() *SysLoginLogUpdateOne {
	slluo.mutation.ClearRemark()
	return slluo
}

// SetMsg sets the "msg" field.
func (slluo *SysLoginLogUpdateOne) SetMsg(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetMsg(s)
	return slluo
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableMsg(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetMsg(*s)
	}
	return slluo
}

// ClearMsg clears the value of the "msg" field.
func (slluo *SysLoginLogUpdateOne) ClearMsg() *SysLoginLogUpdateOne {
	slluo.mutation.ClearMsg()
	return slluo
}

// SetUpdatedAt sets the "updatedAt" field.
func (slluo *SysLoginLogUpdateOne) SetUpdatedAt(t time.Time) *SysLoginLogUpdateOne {
	slluo.mutation.SetUpdatedAt(t)
	return slluo
}

// SetCreateBy sets the "createBy" field.
func (slluo *SysLoginLogUpdateOne) SetCreateBy(i int64) *SysLoginLogUpdateOne {
	slluo.mutation.ResetCreateBy()
	slluo.mutation.SetCreateBy(i)
	return slluo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableCreateBy(i *int64) *SysLoginLogUpdateOne {
	if i != nil {
		slluo.SetCreateBy(*i)
	}
	return slluo
}

// AddCreateBy adds i to the "createBy" field.
func (slluo *SysLoginLogUpdateOne) AddCreateBy(i int64) *SysLoginLogUpdateOne {
	slluo.mutation.AddCreateBy(i)
	return slluo
}

// SetUpdateBy sets the "updateBy" field.
func (slluo *SysLoginLogUpdateOne) SetUpdateBy(i int64) *SysLoginLogUpdateOne {
	slluo.mutation.ResetUpdateBy()
	slluo.mutation.SetUpdateBy(i)
	return slluo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableUpdateBy(i *int64) *SysLoginLogUpdateOne {
	if i != nil {
		slluo.SetUpdateBy(*i)
	}
	return slluo
}

// AddUpdateBy adds i to the "updateBy" field.
func (slluo *SysLoginLogUpdateOne) AddUpdateBy(i int64) *SysLoginLogUpdateOne {
	slluo.mutation.AddUpdateBy(i)
	return slluo
}

// SetTenantId sets the "tenantId" field.
func (slluo *SysLoginLogUpdateOne) SetTenantId(i int64) *SysLoginLogUpdateOne {
	slluo.mutation.ResetTenantId()
	slluo.mutation.SetTenantId(i)
	return slluo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableTenantId(i *int64) *SysLoginLogUpdateOne {
	if i != nil {
		slluo.SetTenantId(*i)
	}
	return slluo
}

// AddTenantId adds i to the "tenantId" field.
func (slluo *SysLoginLogUpdateOne) AddTenantId(i int64) *SysLoginLogUpdateOne {
	slluo.mutation.AddTenantId(i)
	return slluo
}

// SetUserID sets the "user" edge to the SysUser entity by ID.
func (slluo *SysLoginLogUpdateOne) SetUserID(id int64) *SysLoginLogUpdateOne {
	slluo.mutation.SetUserID(id)
	return slluo
}

// SetNillableUserID sets the "user" edge to the SysUser entity by ID if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableUserID(id *int64) *SysLoginLogUpdateOne {
	if id != nil {
		slluo = slluo.SetUserID(*id)
	}
	return slluo
}

// SetUser sets the "user" edge to the SysUser entity.
func (slluo *SysLoginLogUpdateOne) SetUser(s *SysUser) *SysLoginLogUpdateOne {
	return slluo.SetUserID(s.ID)
}

// Mutation returns the SysLoginLogMutation object of the builder.
func (slluo *SysLoginLogUpdateOne) Mutation() *SysLoginLogMutation {
	return slluo.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (slluo *SysLoginLogUpdateOne) ClearUser() *SysLoginLogUpdateOne {
	slluo.mutation.ClearUser()
	return slluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (slluo *SysLoginLogUpdateOne) Select(field string, fields ...string) *SysLoginLogUpdateOne {
	slluo.fields = append([]string{field}, fields...)
	return slluo
}

// Save executes the query and returns the updated SysLoginLog entity.
func (slluo *SysLoginLogUpdateOne) Save(ctx context.Context) (*SysLoginLog, error) {
	var (
		err  error
		node *SysLoginLog
	)
	slluo.defaults()
	if len(slluo.hooks) == 0 {
		node, err = slluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			slluo.mutation = mutation
			node, err = slluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(slluo.hooks) - 1; i >= 0; i-- {
			if slluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (slluo *SysLoginLogUpdateOne) SaveX(ctx context.Context) *SysLoginLog {
	node, err := slluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (slluo *SysLoginLogUpdateOne) Exec(ctx context.Context) error {
	_, err := slluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slluo *SysLoginLogUpdateOne) ExecX(ctx context.Context) {
	if err := slluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slluo *SysLoginLogUpdateOne) defaults() {
	if _, ok := slluo.mutation.UpdatedAt(); !ok {
		v := sysloginlog.UpdateDefaultUpdatedAt()
		slluo.mutation.SetUpdatedAt(v)
	}
}

func (slluo *SysLoginLogUpdateOne) sqlSave(ctx context.Context) (_node *SysLoginLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysloginlog.Table,
			Columns: sysloginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysloginlog.FieldID,
			},
		},
	}
	id, ok := slluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysLoginLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := slluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysloginlog.FieldID)
		for _, f := range fields {
			if !sysloginlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysloginlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := slluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldStatus,
		})
	}
	if slluo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldStatus,
		})
	}
	if value, ok := slluo.mutation.Ipaddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldIpaddr,
		})
	}
	if slluo.mutation.IpaddrCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldIpaddr,
		})
	}
	if value, ok := slluo.mutation.LoginLocation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldLoginLocation,
		})
	}
	if slluo.mutation.LoginLocationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldLoginLocation,
		})
	}
	if value, ok := slluo.mutation.Browser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldBrowser,
		})
	}
	if slluo.mutation.BrowserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldBrowser,
		})
	}
	if value, ok := slluo.mutation.Os(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldOs,
		})
	}
	if slluo.mutation.OsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldOs,
		})
	}
	if value, ok := slluo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldPlatform,
		})
	}
	if slluo.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldPlatform,
		})
	}
	if value, ok := slluo.mutation.LoginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysloginlog.FieldLoginTime,
		})
	}
	if slluo.mutation.LoginTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysloginlog.FieldLoginTime,
		})
	}
	if value, ok := slluo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldRemark,
		})
	}
	if slluo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldRemark,
		})
	}
	if value, ok := slluo.mutation.Msg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldMsg,
		})
	}
	if slluo.mutation.MsgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysloginlog.FieldMsg,
		})
	}
	if value, ok := slluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysloginlog.FieldUpdatedAt,
		})
	}
	if value, ok := slluo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldCreateBy,
		})
	}
	if value, ok := slluo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldCreateBy,
		})
	}
	if value, ok := slluo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldUpdateBy,
		})
	}
	if value, ok := slluo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldUpdateBy,
		})
	}
	if value, ok := slluo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldTenantId,
		})
	}
	if value, ok := slluo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldTenantId,
		})
	}
	if slluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysloginlog.UserTable,
			Columns: []string{sysloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysloginlog.UserTable,
			Columns: []string{sysloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysLoginLog{config: slluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, slluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysloginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
