// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/syscolumns"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysColumnsUpdate is the builder for updating SysColumns entities.
type SysColumnsUpdate struct {
	config
	hooks    []Hook
	mutation *SysColumnsMutation
}

// Where appends a list predicates to the SysColumnsUpdate builder.
func (scu *SysColumnsUpdate) Where(ps ...predicate.SysColumns) *SysColumnsUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetColumnId sets the "columnId" field.
func (scu *SysColumnsUpdate) SetColumnId(i int32) *SysColumnsUpdate {
	scu.mutation.ResetColumnId()
	scu.mutation.SetColumnId(i)
	return scu
}

// AddColumnId adds i to the "columnId" field.
func (scu *SysColumnsUpdate) AddColumnId(i int32) *SysColumnsUpdate {
	scu.mutation.AddColumnId(i)
	return scu
}

// SetColumnName sets the "columnName" field.
func (scu *SysColumnsUpdate) SetColumnName(s string) *SysColumnsUpdate {
	scu.mutation.SetColumnName(s)
	return scu
}

// SetNillableColumnName sets the "columnName" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableColumnName(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetColumnName(*s)
	}
	return scu
}

// ClearColumnName clears the value of the "columnName" field.
func (scu *SysColumnsUpdate) ClearColumnName() *SysColumnsUpdate {
	scu.mutation.ClearColumnName()
	return scu
}

// SetColumnComment sets the "columnComment" field.
func (scu *SysColumnsUpdate) SetColumnComment(s string) *SysColumnsUpdate {
	scu.mutation.SetColumnComment(s)
	return scu
}

// SetNillableColumnComment sets the "columnComment" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableColumnComment(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetColumnComment(*s)
	}
	return scu
}

// ClearColumnComment clears the value of the "columnComment" field.
func (scu *SysColumnsUpdate) ClearColumnComment() *SysColumnsUpdate {
	scu.mutation.ClearColumnComment()
	return scu
}

// SetColumnType sets the "columnType" field.
func (scu *SysColumnsUpdate) SetColumnType(s string) *SysColumnsUpdate {
	scu.mutation.SetColumnType(s)
	return scu
}

// SetNillableColumnType sets the "columnType" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableColumnType(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetColumnType(*s)
	}
	return scu
}

// ClearColumnType clears the value of the "columnType" field.
func (scu *SysColumnsUpdate) ClearColumnType() *SysColumnsUpdate {
	scu.mutation.ClearColumnType()
	return scu
}

// SetGoType sets the "goType" field.
func (scu *SysColumnsUpdate) SetGoType(s string) *SysColumnsUpdate {
	scu.mutation.SetGoType(s)
	return scu
}

// SetNillableGoType sets the "goType" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableGoType(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetGoType(*s)
	}
	return scu
}

// ClearGoType clears the value of the "goType" field.
func (scu *SysColumnsUpdate) ClearGoType() *SysColumnsUpdate {
	scu.mutation.ClearGoType()
	return scu
}

// SetGoField sets the "goField" field.
func (scu *SysColumnsUpdate) SetGoField(s string) *SysColumnsUpdate {
	scu.mutation.SetGoField(s)
	return scu
}

// SetNillableGoField sets the "goField" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableGoField(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetGoField(*s)
	}
	return scu
}

// ClearGoField clears the value of the "goField" field.
func (scu *SysColumnsUpdate) ClearGoField() *SysColumnsUpdate {
	scu.mutation.ClearGoField()
	return scu
}

// SetJsonField sets the "jsonField" field.
func (scu *SysColumnsUpdate) SetJsonField(s string) *SysColumnsUpdate {
	scu.mutation.SetJsonField(s)
	return scu
}

// SetNillableJsonField sets the "jsonField" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableJsonField(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetJsonField(*s)
	}
	return scu
}

// ClearJsonField clears the value of the "jsonField" field.
func (scu *SysColumnsUpdate) ClearJsonField() *SysColumnsUpdate {
	scu.mutation.ClearJsonField()
	return scu
}

// SetIsPk sets the "isPk" field.
func (scu *SysColumnsUpdate) SetIsPk(s string) *SysColumnsUpdate {
	scu.mutation.SetIsPk(s)
	return scu
}

// SetNillableIsPk sets the "isPk" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableIsPk(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetIsPk(*s)
	}
	return scu
}

// ClearIsPk clears the value of the "isPk" field.
func (scu *SysColumnsUpdate) ClearIsPk() *SysColumnsUpdate {
	scu.mutation.ClearIsPk()
	return scu
}

// SetIsIncrement sets the "isIncrement" field.
func (scu *SysColumnsUpdate) SetIsIncrement(s string) *SysColumnsUpdate {
	scu.mutation.SetIsIncrement(s)
	return scu
}

// SetNillableIsIncrement sets the "isIncrement" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableIsIncrement(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetIsIncrement(*s)
	}
	return scu
}

// ClearIsIncrement clears the value of the "isIncrement" field.
func (scu *SysColumnsUpdate) ClearIsIncrement() *SysColumnsUpdate {
	scu.mutation.ClearIsIncrement()
	return scu
}

// SetIsRequired sets the "isRequired" field.
func (scu *SysColumnsUpdate) SetIsRequired(s string) *SysColumnsUpdate {
	scu.mutation.SetIsRequired(s)
	return scu
}

// SetNillableIsRequired sets the "isRequired" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableIsRequired(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetIsRequired(*s)
	}
	return scu
}

// ClearIsRequired clears the value of the "isRequired" field.
func (scu *SysColumnsUpdate) ClearIsRequired() *SysColumnsUpdate {
	scu.mutation.ClearIsRequired()
	return scu
}

// SetIsInsert sets the "isInsert" field.
func (scu *SysColumnsUpdate) SetIsInsert(s string) *SysColumnsUpdate {
	scu.mutation.SetIsInsert(s)
	return scu
}

// SetNillableIsInsert sets the "isInsert" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableIsInsert(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetIsInsert(*s)
	}
	return scu
}

// ClearIsInsert clears the value of the "isInsert" field.
func (scu *SysColumnsUpdate) ClearIsInsert() *SysColumnsUpdate {
	scu.mutation.ClearIsInsert()
	return scu
}

// SetIsEdit sets the "isEdit" field.
func (scu *SysColumnsUpdate) SetIsEdit(s string) *SysColumnsUpdate {
	scu.mutation.SetIsEdit(s)
	return scu
}

// SetNillableIsEdit sets the "isEdit" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableIsEdit(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetIsEdit(*s)
	}
	return scu
}

// ClearIsEdit clears the value of the "isEdit" field.
func (scu *SysColumnsUpdate) ClearIsEdit() *SysColumnsUpdate {
	scu.mutation.ClearIsEdit()
	return scu
}

// SetIsList sets the "isList" field.
func (scu *SysColumnsUpdate) SetIsList(s string) *SysColumnsUpdate {
	scu.mutation.SetIsList(s)
	return scu
}

// SetNillableIsList sets the "isList" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableIsList(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetIsList(*s)
	}
	return scu
}

// ClearIsList clears the value of the "isList" field.
func (scu *SysColumnsUpdate) ClearIsList() *SysColumnsUpdate {
	scu.mutation.ClearIsList()
	return scu
}

// SetIsQuery sets the "isQuery" field.
func (scu *SysColumnsUpdate) SetIsQuery(s string) *SysColumnsUpdate {
	scu.mutation.SetIsQuery(s)
	return scu
}

// SetNillableIsQuery sets the "isQuery" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableIsQuery(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetIsQuery(*s)
	}
	return scu
}

// ClearIsQuery clears the value of the "isQuery" field.
func (scu *SysColumnsUpdate) ClearIsQuery() *SysColumnsUpdate {
	scu.mutation.ClearIsQuery()
	return scu
}

// SetQueryType sets the "queryType" field.
func (scu *SysColumnsUpdate) SetQueryType(s string) *SysColumnsUpdate {
	scu.mutation.SetQueryType(s)
	return scu
}

// SetNillableQueryType sets the "queryType" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableQueryType(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetQueryType(*s)
	}
	return scu
}

// ClearQueryType clears the value of the "queryType" field.
func (scu *SysColumnsUpdate) ClearQueryType() *SysColumnsUpdate {
	scu.mutation.ClearQueryType()
	return scu
}

// SetHtmlType sets the "htmlType" field.
func (scu *SysColumnsUpdate) SetHtmlType(s string) *SysColumnsUpdate {
	scu.mutation.SetHtmlType(s)
	return scu
}

// SetNillableHtmlType sets the "htmlType" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableHtmlType(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetHtmlType(*s)
	}
	return scu
}

// ClearHtmlType clears the value of the "htmlType" field.
func (scu *SysColumnsUpdate) ClearHtmlType() *SysColumnsUpdate {
	scu.mutation.ClearHtmlType()
	return scu
}

// SetDictType sets the "dictType" field.
func (scu *SysColumnsUpdate) SetDictType(s string) *SysColumnsUpdate {
	scu.mutation.SetDictType(s)
	return scu
}

// SetNillableDictType sets the "dictType" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableDictType(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetDictType(*s)
	}
	return scu
}

// ClearDictType clears the value of the "dictType" field.
func (scu *SysColumnsUpdate) ClearDictType() *SysColumnsUpdate {
	scu.mutation.ClearDictType()
	return scu
}

// SetSort sets the "sort" field.
func (scu *SysColumnsUpdate) SetSort(i int32) *SysColumnsUpdate {
	scu.mutation.ResetSort()
	scu.mutation.SetSort(i)
	return scu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableSort(i *int32) *SysColumnsUpdate {
	if i != nil {
		scu.SetSort(*i)
	}
	return scu
}

// AddSort adds i to the "sort" field.
func (scu *SysColumnsUpdate) AddSort(i int32) *SysColumnsUpdate {
	scu.mutation.AddSort(i)
	return scu
}

// ClearSort clears the value of the "sort" field.
func (scu *SysColumnsUpdate) ClearSort() *SysColumnsUpdate {
	scu.mutation.ClearSort()
	return scu
}

// SetList sets the "list" field.
func (scu *SysColumnsUpdate) SetList(s string) *SysColumnsUpdate {
	scu.mutation.SetList(s)
	return scu
}

// SetNillableList sets the "list" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableList(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetList(*s)
	}
	return scu
}

// ClearList clears the value of the "list" field.
func (scu *SysColumnsUpdate) ClearList() *SysColumnsUpdate {
	scu.mutation.ClearList()
	return scu
}

// SetPk sets the "pk" field.
func (scu *SysColumnsUpdate) SetPk(b bool) *SysColumnsUpdate {
	scu.mutation.SetPk(b)
	return scu
}

// SetNillablePk sets the "pk" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillablePk(b *bool) *SysColumnsUpdate {
	if b != nil {
		scu.SetPk(*b)
	}
	return scu
}

// ClearPk clears the value of the "pk" field.
func (scu *SysColumnsUpdate) ClearPk() *SysColumnsUpdate {
	scu.mutation.ClearPk()
	return scu
}

// SetRequired sets the "required" field.
func (scu *SysColumnsUpdate) SetRequired(b bool) *SysColumnsUpdate {
	scu.mutation.SetRequired(b)
	return scu
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableRequired(b *bool) *SysColumnsUpdate {
	if b != nil {
		scu.SetRequired(*b)
	}
	return scu
}

// ClearRequired clears the value of the "required" field.
func (scu *SysColumnsUpdate) ClearRequired() *SysColumnsUpdate {
	scu.mutation.ClearRequired()
	return scu
}

// SetSuperColumn sets the "superColumn" field.
func (scu *SysColumnsUpdate) SetSuperColumn(b bool) *SysColumnsUpdate {
	scu.mutation.SetSuperColumn(b)
	return scu
}

// SetNillableSuperColumn sets the "superColumn" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableSuperColumn(b *bool) *SysColumnsUpdate {
	if b != nil {
		scu.SetSuperColumn(*b)
	}
	return scu
}

// ClearSuperColumn clears the value of the "superColumn" field.
func (scu *SysColumnsUpdate) ClearSuperColumn() *SysColumnsUpdate {
	scu.mutation.ClearSuperColumn()
	return scu
}

// SetUsableColumn sets the "usableColumn" field.
func (scu *SysColumnsUpdate) SetUsableColumn(b bool) *SysColumnsUpdate {
	scu.mutation.SetUsableColumn(b)
	return scu
}

// SetNillableUsableColumn sets the "usableColumn" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableUsableColumn(b *bool) *SysColumnsUpdate {
	if b != nil {
		scu.SetUsableColumn(*b)
	}
	return scu
}

// ClearUsableColumn clears the value of the "usableColumn" field.
func (scu *SysColumnsUpdate) ClearUsableColumn() *SysColumnsUpdate {
	scu.mutation.ClearUsableColumn()
	return scu
}

// SetIncrement sets the "increment" field.
func (scu *SysColumnsUpdate) SetIncrement(b bool) *SysColumnsUpdate {
	scu.mutation.SetIncrement(b)
	return scu
}

// SetNillableIncrement sets the "increment" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableIncrement(b *bool) *SysColumnsUpdate {
	if b != nil {
		scu.SetIncrement(*b)
	}
	return scu
}

// ClearIncrement clears the value of the "increment" field.
func (scu *SysColumnsUpdate) ClearIncrement() *SysColumnsUpdate {
	scu.mutation.ClearIncrement()
	return scu
}

// SetInsert sets the "insert" field.
func (scu *SysColumnsUpdate) SetInsert(b bool) *SysColumnsUpdate {
	scu.mutation.SetInsert(b)
	return scu
}

// SetNillableInsert sets the "insert" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableInsert(b *bool) *SysColumnsUpdate {
	if b != nil {
		scu.SetInsert(*b)
	}
	return scu
}

// ClearInsert clears the value of the "insert" field.
func (scu *SysColumnsUpdate) ClearInsert() *SysColumnsUpdate {
	scu.mutation.ClearInsert()
	return scu
}

// SetEdit sets the "edit" field.
func (scu *SysColumnsUpdate) SetEdit(b bool) *SysColumnsUpdate {
	scu.mutation.SetEdit(b)
	return scu
}

// SetNillableEdit sets the "edit" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableEdit(b *bool) *SysColumnsUpdate {
	if b != nil {
		scu.SetEdit(*b)
	}
	return scu
}

// ClearEdit clears the value of the "edit" field.
func (scu *SysColumnsUpdate) ClearEdit() *SysColumnsUpdate {
	scu.mutation.ClearEdit()
	return scu
}

// SetQuery sets the "query" field.
func (scu *SysColumnsUpdate) SetQuery(b bool) *SysColumnsUpdate {
	scu.mutation.SetQuery(b)
	return scu
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableQuery(b *bool) *SysColumnsUpdate {
	if b != nil {
		scu.SetQuery(*b)
	}
	return scu
}

// ClearQuery clears the value of the "query" field.
func (scu *SysColumnsUpdate) ClearQuery() *SysColumnsUpdate {
	scu.mutation.ClearQuery()
	return scu
}

// SetRemark sets the "remark" field.
func (scu *SysColumnsUpdate) SetRemark(s string) *SysColumnsUpdate {
	scu.mutation.SetRemark(s)
	return scu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableRemark(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetRemark(*s)
	}
	return scu
}

// ClearRemark clears the value of the "remark" field.
func (scu *SysColumnsUpdate) ClearRemark() *SysColumnsUpdate {
	scu.mutation.ClearRemark()
	return scu
}

// SetFkLabelName sets the "fkLabelName" field.
func (scu *SysColumnsUpdate) SetFkLabelName(s string) *SysColumnsUpdate {
	scu.mutation.SetFkLabelName(s)
	return scu
}

// SetNillableFkLabelName sets the "fkLabelName" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableFkLabelName(s *string) *SysColumnsUpdate {
	if s != nil {
		scu.SetFkLabelName(*s)
	}
	return scu
}

// ClearFkLabelName clears the value of the "fkLabelName" field.
func (scu *SysColumnsUpdate) ClearFkLabelName() *SysColumnsUpdate {
	scu.mutation.ClearFkLabelName()
	return scu
}

// SetUpdatedAt sets the "updatedAt" field.
func (scu *SysColumnsUpdate) SetUpdatedAt(t time.Time) *SysColumnsUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetCreateBy sets the "createBy" field.
func (scu *SysColumnsUpdate) SetCreateBy(i int64) *SysColumnsUpdate {
	scu.mutation.ResetCreateBy()
	scu.mutation.SetCreateBy(i)
	return scu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableCreateBy(i *int64) *SysColumnsUpdate {
	if i != nil {
		scu.SetCreateBy(*i)
	}
	return scu
}

// AddCreateBy adds i to the "createBy" field.
func (scu *SysColumnsUpdate) AddCreateBy(i int64) *SysColumnsUpdate {
	scu.mutation.AddCreateBy(i)
	return scu
}

// SetUpdateBy sets the "updateBy" field.
func (scu *SysColumnsUpdate) SetUpdateBy(i int64) *SysColumnsUpdate {
	scu.mutation.ResetUpdateBy()
	scu.mutation.SetUpdateBy(i)
	return scu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableUpdateBy(i *int64) *SysColumnsUpdate {
	if i != nil {
		scu.SetUpdateBy(*i)
	}
	return scu
}

// AddUpdateBy adds i to the "updateBy" field.
func (scu *SysColumnsUpdate) AddUpdateBy(i int64) *SysColumnsUpdate {
	scu.mutation.AddUpdateBy(i)
	return scu
}

// SetTenantId sets the "tenantId" field.
func (scu *SysColumnsUpdate) SetTenantId(i int64) *SysColumnsUpdate {
	scu.mutation.ResetTenantId()
	scu.mutation.SetTenantId(i)
	return scu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (scu *SysColumnsUpdate) SetNillableTenantId(i *int64) *SysColumnsUpdate {
	if i != nil {
		scu.SetTenantId(*i)
	}
	return scu
}

// AddTenantId adds i to the "tenantId" field.
func (scu *SysColumnsUpdate) AddTenantId(i int64) *SysColumnsUpdate {
	scu.mutation.AddTenantId(i)
	return scu
}

// Mutation returns the SysColumnsMutation object of the builder.
func (scu *SysColumnsUpdate) Mutation() *SysColumnsMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SysColumnsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	scu.defaults()
	if len(scu.hooks) == 0 {
		affected, err = scu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysColumnsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scu.mutation = mutation
			affected, err = scu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scu.hooks) - 1; i >= 0; i-- {
			if scu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SysColumnsUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SysColumnsUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SysColumnsUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SysColumnsUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := syscolumns.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

func (scu *SysColumnsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   syscolumns.Table,
			Columns: syscolumns.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: syscolumns.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.ColumnId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscolumns.FieldColumnId,
		})
	}
	if value, ok := scu.mutation.AddedColumnId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscolumns.FieldColumnId,
		})
	}
	if value, ok := scu.mutation.ColumnName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldColumnName,
		})
	}
	if scu.mutation.ColumnNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldColumnName,
		})
	}
	if value, ok := scu.mutation.ColumnComment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldColumnComment,
		})
	}
	if scu.mutation.ColumnCommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldColumnComment,
		})
	}
	if value, ok := scu.mutation.ColumnType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldColumnType,
		})
	}
	if scu.mutation.ColumnTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldColumnType,
		})
	}
	if value, ok := scu.mutation.GoType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldGoType,
		})
	}
	if scu.mutation.GoTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldGoType,
		})
	}
	if value, ok := scu.mutation.GoField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldGoField,
		})
	}
	if scu.mutation.GoFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldGoField,
		})
	}
	if value, ok := scu.mutation.JsonField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldJsonField,
		})
	}
	if scu.mutation.JsonFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldJsonField,
		})
	}
	if value, ok := scu.mutation.IsPk(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsPk,
		})
	}
	if scu.mutation.IsPkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsPk,
		})
	}
	if value, ok := scu.mutation.IsIncrement(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsIncrement,
		})
	}
	if scu.mutation.IsIncrementCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsIncrement,
		})
	}
	if value, ok := scu.mutation.IsRequired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsRequired,
		})
	}
	if scu.mutation.IsRequiredCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsRequired,
		})
	}
	if value, ok := scu.mutation.IsInsert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsInsert,
		})
	}
	if scu.mutation.IsInsertCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsInsert,
		})
	}
	if value, ok := scu.mutation.IsEdit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsEdit,
		})
	}
	if scu.mutation.IsEditCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsEdit,
		})
	}
	if value, ok := scu.mutation.IsList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsList,
		})
	}
	if scu.mutation.IsListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsList,
		})
	}
	if value, ok := scu.mutation.IsQuery(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsQuery,
		})
	}
	if scu.mutation.IsQueryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsQuery,
		})
	}
	if value, ok := scu.mutation.QueryType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldQueryType,
		})
	}
	if scu.mutation.QueryTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldQueryType,
		})
	}
	if value, ok := scu.mutation.HtmlType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldHtmlType,
		})
	}
	if scu.mutation.HtmlTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldHtmlType,
		})
	}
	if value, ok := scu.mutation.DictType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldDictType,
		})
	}
	if scu.mutation.DictTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldDictType,
		})
	}
	if value, ok := scu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscolumns.FieldSort,
		})
	}
	if value, ok := scu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscolumns.FieldSort,
		})
	}
	if scu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: syscolumns.FieldSort,
		})
	}
	if value, ok := scu.mutation.List(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldList,
		})
	}
	if scu.mutation.ListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldList,
		})
	}
	if value, ok := scu.mutation.Pk(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldPk,
		})
	}
	if scu.mutation.PkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldPk,
		})
	}
	if value, ok := scu.mutation.Required(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldRequired,
		})
	}
	if scu.mutation.RequiredCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldRequired,
		})
	}
	if value, ok := scu.mutation.SuperColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldSuperColumn,
		})
	}
	if scu.mutation.SuperColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldSuperColumn,
		})
	}
	if value, ok := scu.mutation.UsableColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldUsableColumn,
		})
	}
	if scu.mutation.UsableColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldUsableColumn,
		})
	}
	if value, ok := scu.mutation.Increment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldIncrement,
		})
	}
	if scu.mutation.IncrementCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldIncrement,
		})
	}
	if value, ok := scu.mutation.Insert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldInsert,
		})
	}
	if scu.mutation.InsertCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldInsert,
		})
	}
	if value, ok := scu.mutation.Edit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldEdit,
		})
	}
	if scu.mutation.EditCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldEdit,
		})
	}
	if value, ok := scu.mutation.Query(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldQuery,
		})
	}
	if scu.mutation.QueryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldQuery,
		})
	}
	if value, ok := scu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldRemark,
		})
	}
	if scu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldRemark,
		})
	}
	if value, ok := scu.mutation.FkLabelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldFkLabelName,
		})
	}
	if scu.mutation.FkLabelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldFkLabelName,
		})
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syscolumns.FieldUpdatedAt,
		})
	}
	if value, ok := scu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldCreateBy,
		})
	}
	if value, ok := scu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldCreateBy,
		})
	}
	if value, ok := scu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldUpdateBy,
		})
	}
	if value, ok := scu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldUpdateBy,
		})
	}
	if value, ok := scu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldTenantId,
		})
	}
	if value, ok := scu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syscolumns.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysColumnsUpdateOne is the builder for updating a single SysColumns entity.
type SysColumnsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysColumnsMutation
}

// SetColumnId sets the "columnId" field.
func (scuo *SysColumnsUpdateOne) SetColumnId(i int32) *SysColumnsUpdateOne {
	scuo.mutation.ResetColumnId()
	scuo.mutation.SetColumnId(i)
	return scuo
}

// AddColumnId adds i to the "columnId" field.
func (scuo *SysColumnsUpdateOne) AddColumnId(i int32) *SysColumnsUpdateOne {
	scuo.mutation.AddColumnId(i)
	return scuo
}

// SetColumnName sets the "columnName" field.
func (scuo *SysColumnsUpdateOne) SetColumnName(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetColumnName(s)
	return scuo
}

// SetNillableColumnName sets the "columnName" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableColumnName(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetColumnName(*s)
	}
	return scuo
}

// ClearColumnName clears the value of the "columnName" field.
func (scuo *SysColumnsUpdateOne) ClearColumnName() *SysColumnsUpdateOne {
	scuo.mutation.ClearColumnName()
	return scuo
}

// SetColumnComment sets the "columnComment" field.
func (scuo *SysColumnsUpdateOne) SetColumnComment(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetColumnComment(s)
	return scuo
}

// SetNillableColumnComment sets the "columnComment" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableColumnComment(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetColumnComment(*s)
	}
	return scuo
}

// ClearColumnComment clears the value of the "columnComment" field.
func (scuo *SysColumnsUpdateOne) ClearColumnComment() *SysColumnsUpdateOne {
	scuo.mutation.ClearColumnComment()
	return scuo
}

// SetColumnType sets the "columnType" field.
func (scuo *SysColumnsUpdateOne) SetColumnType(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetColumnType(s)
	return scuo
}

// SetNillableColumnType sets the "columnType" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableColumnType(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetColumnType(*s)
	}
	return scuo
}

// ClearColumnType clears the value of the "columnType" field.
func (scuo *SysColumnsUpdateOne) ClearColumnType() *SysColumnsUpdateOne {
	scuo.mutation.ClearColumnType()
	return scuo
}

// SetGoType sets the "goType" field.
func (scuo *SysColumnsUpdateOne) SetGoType(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetGoType(s)
	return scuo
}

// SetNillableGoType sets the "goType" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableGoType(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetGoType(*s)
	}
	return scuo
}

// ClearGoType clears the value of the "goType" field.
func (scuo *SysColumnsUpdateOne) ClearGoType() *SysColumnsUpdateOne {
	scuo.mutation.ClearGoType()
	return scuo
}

// SetGoField sets the "goField" field.
func (scuo *SysColumnsUpdateOne) SetGoField(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetGoField(s)
	return scuo
}

// SetNillableGoField sets the "goField" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableGoField(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetGoField(*s)
	}
	return scuo
}

// ClearGoField clears the value of the "goField" field.
func (scuo *SysColumnsUpdateOne) ClearGoField() *SysColumnsUpdateOne {
	scuo.mutation.ClearGoField()
	return scuo
}

// SetJsonField sets the "jsonField" field.
func (scuo *SysColumnsUpdateOne) SetJsonField(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetJsonField(s)
	return scuo
}

// SetNillableJsonField sets the "jsonField" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableJsonField(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetJsonField(*s)
	}
	return scuo
}

// ClearJsonField clears the value of the "jsonField" field.
func (scuo *SysColumnsUpdateOne) ClearJsonField() *SysColumnsUpdateOne {
	scuo.mutation.ClearJsonField()
	return scuo
}

// SetIsPk sets the "isPk" field.
func (scuo *SysColumnsUpdateOne) SetIsPk(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetIsPk(s)
	return scuo
}

// SetNillableIsPk sets the "isPk" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableIsPk(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetIsPk(*s)
	}
	return scuo
}

// ClearIsPk clears the value of the "isPk" field.
func (scuo *SysColumnsUpdateOne) ClearIsPk() *SysColumnsUpdateOne {
	scuo.mutation.ClearIsPk()
	return scuo
}

// SetIsIncrement sets the "isIncrement" field.
func (scuo *SysColumnsUpdateOne) SetIsIncrement(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetIsIncrement(s)
	return scuo
}

// SetNillableIsIncrement sets the "isIncrement" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableIsIncrement(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetIsIncrement(*s)
	}
	return scuo
}

// ClearIsIncrement clears the value of the "isIncrement" field.
func (scuo *SysColumnsUpdateOne) ClearIsIncrement() *SysColumnsUpdateOne {
	scuo.mutation.ClearIsIncrement()
	return scuo
}

// SetIsRequired sets the "isRequired" field.
func (scuo *SysColumnsUpdateOne) SetIsRequired(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetIsRequired(s)
	return scuo
}

// SetNillableIsRequired sets the "isRequired" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableIsRequired(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetIsRequired(*s)
	}
	return scuo
}

// ClearIsRequired clears the value of the "isRequired" field.
func (scuo *SysColumnsUpdateOne) ClearIsRequired() *SysColumnsUpdateOne {
	scuo.mutation.ClearIsRequired()
	return scuo
}

// SetIsInsert sets the "isInsert" field.
func (scuo *SysColumnsUpdateOne) SetIsInsert(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetIsInsert(s)
	return scuo
}

// SetNillableIsInsert sets the "isInsert" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableIsInsert(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetIsInsert(*s)
	}
	return scuo
}

// ClearIsInsert clears the value of the "isInsert" field.
func (scuo *SysColumnsUpdateOne) ClearIsInsert() *SysColumnsUpdateOne {
	scuo.mutation.ClearIsInsert()
	return scuo
}

// SetIsEdit sets the "isEdit" field.
func (scuo *SysColumnsUpdateOne) SetIsEdit(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetIsEdit(s)
	return scuo
}

// SetNillableIsEdit sets the "isEdit" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableIsEdit(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetIsEdit(*s)
	}
	return scuo
}

// ClearIsEdit clears the value of the "isEdit" field.
func (scuo *SysColumnsUpdateOne) ClearIsEdit() *SysColumnsUpdateOne {
	scuo.mutation.ClearIsEdit()
	return scuo
}

// SetIsList sets the "isList" field.
func (scuo *SysColumnsUpdateOne) SetIsList(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetIsList(s)
	return scuo
}

// SetNillableIsList sets the "isList" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableIsList(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetIsList(*s)
	}
	return scuo
}

// ClearIsList clears the value of the "isList" field.
func (scuo *SysColumnsUpdateOne) ClearIsList() *SysColumnsUpdateOne {
	scuo.mutation.ClearIsList()
	return scuo
}

// SetIsQuery sets the "isQuery" field.
func (scuo *SysColumnsUpdateOne) SetIsQuery(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetIsQuery(s)
	return scuo
}

// SetNillableIsQuery sets the "isQuery" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableIsQuery(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetIsQuery(*s)
	}
	return scuo
}

// ClearIsQuery clears the value of the "isQuery" field.
func (scuo *SysColumnsUpdateOne) ClearIsQuery() *SysColumnsUpdateOne {
	scuo.mutation.ClearIsQuery()
	return scuo
}

// SetQueryType sets the "queryType" field.
func (scuo *SysColumnsUpdateOne) SetQueryType(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetQueryType(s)
	return scuo
}

// SetNillableQueryType sets the "queryType" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableQueryType(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetQueryType(*s)
	}
	return scuo
}

// ClearQueryType clears the value of the "queryType" field.
func (scuo *SysColumnsUpdateOne) ClearQueryType() *SysColumnsUpdateOne {
	scuo.mutation.ClearQueryType()
	return scuo
}

// SetHtmlType sets the "htmlType" field.
func (scuo *SysColumnsUpdateOne) SetHtmlType(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetHtmlType(s)
	return scuo
}

// SetNillableHtmlType sets the "htmlType" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableHtmlType(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetHtmlType(*s)
	}
	return scuo
}

// ClearHtmlType clears the value of the "htmlType" field.
func (scuo *SysColumnsUpdateOne) ClearHtmlType() *SysColumnsUpdateOne {
	scuo.mutation.ClearHtmlType()
	return scuo
}

// SetDictType sets the "dictType" field.
func (scuo *SysColumnsUpdateOne) SetDictType(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetDictType(s)
	return scuo
}

// SetNillableDictType sets the "dictType" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableDictType(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetDictType(*s)
	}
	return scuo
}

// ClearDictType clears the value of the "dictType" field.
func (scuo *SysColumnsUpdateOne) ClearDictType() *SysColumnsUpdateOne {
	scuo.mutation.ClearDictType()
	return scuo
}

// SetSort sets the "sort" field.
func (scuo *SysColumnsUpdateOne) SetSort(i int32) *SysColumnsUpdateOne {
	scuo.mutation.ResetSort()
	scuo.mutation.SetSort(i)
	return scuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableSort(i *int32) *SysColumnsUpdateOne {
	if i != nil {
		scuo.SetSort(*i)
	}
	return scuo
}

// AddSort adds i to the "sort" field.
func (scuo *SysColumnsUpdateOne) AddSort(i int32) *SysColumnsUpdateOne {
	scuo.mutation.AddSort(i)
	return scuo
}

// ClearSort clears the value of the "sort" field.
func (scuo *SysColumnsUpdateOne) ClearSort() *SysColumnsUpdateOne {
	scuo.mutation.ClearSort()
	return scuo
}

// SetList sets the "list" field.
func (scuo *SysColumnsUpdateOne) SetList(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetList(s)
	return scuo
}

// SetNillableList sets the "list" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableList(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetList(*s)
	}
	return scuo
}

// ClearList clears the value of the "list" field.
func (scuo *SysColumnsUpdateOne) ClearList() *SysColumnsUpdateOne {
	scuo.mutation.ClearList()
	return scuo
}

// SetPk sets the "pk" field.
func (scuo *SysColumnsUpdateOne) SetPk(b bool) *SysColumnsUpdateOne {
	scuo.mutation.SetPk(b)
	return scuo
}

// SetNillablePk sets the "pk" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillablePk(b *bool) *SysColumnsUpdateOne {
	if b != nil {
		scuo.SetPk(*b)
	}
	return scuo
}

// ClearPk clears the value of the "pk" field.
func (scuo *SysColumnsUpdateOne) ClearPk() *SysColumnsUpdateOne {
	scuo.mutation.ClearPk()
	return scuo
}

// SetRequired sets the "required" field.
func (scuo *SysColumnsUpdateOne) SetRequired(b bool) *SysColumnsUpdateOne {
	scuo.mutation.SetRequired(b)
	return scuo
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableRequired(b *bool) *SysColumnsUpdateOne {
	if b != nil {
		scuo.SetRequired(*b)
	}
	return scuo
}

// ClearRequired clears the value of the "required" field.
func (scuo *SysColumnsUpdateOne) ClearRequired() *SysColumnsUpdateOne {
	scuo.mutation.ClearRequired()
	return scuo
}

// SetSuperColumn sets the "superColumn" field.
func (scuo *SysColumnsUpdateOne) SetSuperColumn(b bool) *SysColumnsUpdateOne {
	scuo.mutation.SetSuperColumn(b)
	return scuo
}

// SetNillableSuperColumn sets the "superColumn" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableSuperColumn(b *bool) *SysColumnsUpdateOne {
	if b != nil {
		scuo.SetSuperColumn(*b)
	}
	return scuo
}

// ClearSuperColumn clears the value of the "superColumn" field.
func (scuo *SysColumnsUpdateOne) ClearSuperColumn() *SysColumnsUpdateOne {
	scuo.mutation.ClearSuperColumn()
	return scuo
}

// SetUsableColumn sets the "usableColumn" field.
func (scuo *SysColumnsUpdateOne) SetUsableColumn(b bool) *SysColumnsUpdateOne {
	scuo.mutation.SetUsableColumn(b)
	return scuo
}

// SetNillableUsableColumn sets the "usableColumn" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableUsableColumn(b *bool) *SysColumnsUpdateOne {
	if b != nil {
		scuo.SetUsableColumn(*b)
	}
	return scuo
}

// ClearUsableColumn clears the value of the "usableColumn" field.
func (scuo *SysColumnsUpdateOne) ClearUsableColumn() *SysColumnsUpdateOne {
	scuo.mutation.ClearUsableColumn()
	return scuo
}

// SetIncrement sets the "increment" field.
func (scuo *SysColumnsUpdateOne) SetIncrement(b bool) *SysColumnsUpdateOne {
	scuo.mutation.SetIncrement(b)
	return scuo
}

// SetNillableIncrement sets the "increment" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableIncrement(b *bool) *SysColumnsUpdateOne {
	if b != nil {
		scuo.SetIncrement(*b)
	}
	return scuo
}

// ClearIncrement clears the value of the "increment" field.
func (scuo *SysColumnsUpdateOne) ClearIncrement() *SysColumnsUpdateOne {
	scuo.mutation.ClearIncrement()
	return scuo
}

// SetInsert sets the "insert" field.
func (scuo *SysColumnsUpdateOne) SetInsert(b bool) *SysColumnsUpdateOne {
	scuo.mutation.SetInsert(b)
	return scuo
}

// SetNillableInsert sets the "insert" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableInsert(b *bool) *SysColumnsUpdateOne {
	if b != nil {
		scuo.SetInsert(*b)
	}
	return scuo
}

// ClearInsert clears the value of the "insert" field.
func (scuo *SysColumnsUpdateOne) ClearInsert() *SysColumnsUpdateOne {
	scuo.mutation.ClearInsert()
	return scuo
}

// SetEdit sets the "edit" field.
func (scuo *SysColumnsUpdateOne) SetEdit(b bool) *SysColumnsUpdateOne {
	scuo.mutation.SetEdit(b)
	return scuo
}

// SetNillableEdit sets the "edit" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableEdit(b *bool) *SysColumnsUpdateOne {
	if b != nil {
		scuo.SetEdit(*b)
	}
	return scuo
}

// ClearEdit clears the value of the "edit" field.
func (scuo *SysColumnsUpdateOne) ClearEdit() *SysColumnsUpdateOne {
	scuo.mutation.ClearEdit()
	return scuo
}

// SetQuery sets the "query" field.
func (scuo *SysColumnsUpdateOne) SetQuery(b bool) *SysColumnsUpdateOne {
	scuo.mutation.SetQuery(b)
	return scuo
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableQuery(b *bool) *SysColumnsUpdateOne {
	if b != nil {
		scuo.SetQuery(*b)
	}
	return scuo
}

// ClearQuery clears the value of the "query" field.
func (scuo *SysColumnsUpdateOne) ClearQuery() *SysColumnsUpdateOne {
	scuo.mutation.ClearQuery()
	return scuo
}

// SetRemark sets the "remark" field.
func (scuo *SysColumnsUpdateOne) SetRemark(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetRemark(s)
	return scuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableRemark(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetRemark(*s)
	}
	return scuo
}

// ClearRemark clears the value of the "remark" field.
func (scuo *SysColumnsUpdateOne) ClearRemark() *SysColumnsUpdateOne {
	scuo.mutation.ClearRemark()
	return scuo
}

// SetFkLabelName sets the "fkLabelName" field.
func (scuo *SysColumnsUpdateOne) SetFkLabelName(s string) *SysColumnsUpdateOne {
	scuo.mutation.SetFkLabelName(s)
	return scuo
}

// SetNillableFkLabelName sets the "fkLabelName" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableFkLabelName(s *string) *SysColumnsUpdateOne {
	if s != nil {
		scuo.SetFkLabelName(*s)
	}
	return scuo
}

// ClearFkLabelName clears the value of the "fkLabelName" field.
func (scuo *SysColumnsUpdateOne) ClearFkLabelName() *SysColumnsUpdateOne {
	scuo.mutation.ClearFkLabelName()
	return scuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (scuo *SysColumnsUpdateOne) SetUpdatedAt(t time.Time) *SysColumnsUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetCreateBy sets the "createBy" field.
func (scuo *SysColumnsUpdateOne) SetCreateBy(i int64) *SysColumnsUpdateOne {
	scuo.mutation.ResetCreateBy()
	scuo.mutation.SetCreateBy(i)
	return scuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableCreateBy(i *int64) *SysColumnsUpdateOne {
	if i != nil {
		scuo.SetCreateBy(*i)
	}
	return scuo
}

// AddCreateBy adds i to the "createBy" field.
func (scuo *SysColumnsUpdateOne) AddCreateBy(i int64) *SysColumnsUpdateOne {
	scuo.mutation.AddCreateBy(i)
	return scuo
}

// SetUpdateBy sets the "updateBy" field.
func (scuo *SysColumnsUpdateOne) SetUpdateBy(i int64) *SysColumnsUpdateOne {
	scuo.mutation.ResetUpdateBy()
	scuo.mutation.SetUpdateBy(i)
	return scuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableUpdateBy(i *int64) *SysColumnsUpdateOne {
	if i != nil {
		scuo.SetUpdateBy(*i)
	}
	return scuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (scuo *SysColumnsUpdateOne) AddUpdateBy(i int64) *SysColumnsUpdateOne {
	scuo.mutation.AddUpdateBy(i)
	return scuo
}

// SetTenantId sets the "tenantId" field.
func (scuo *SysColumnsUpdateOne) SetTenantId(i int64) *SysColumnsUpdateOne {
	scuo.mutation.ResetTenantId()
	scuo.mutation.SetTenantId(i)
	return scuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (scuo *SysColumnsUpdateOne) SetNillableTenantId(i *int64) *SysColumnsUpdateOne {
	if i != nil {
		scuo.SetTenantId(*i)
	}
	return scuo
}

// AddTenantId adds i to the "tenantId" field.
func (scuo *SysColumnsUpdateOne) AddTenantId(i int64) *SysColumnsUpdateOne {
	scuo.mutation.AddTenantId(i)
	return scuo
}

// Mutation returns the SysColumnsMutation object of the builder.
func (scuo *SysColumnsUpdateOne) Mutation() *SysColumnsMutation {
	return scuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SysColumnsUpdateOne) Select(field string, fields ...string) *SysColumnsUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SysColumns entity.
func (scuo *SysColumnsUpdateOne) Save(ctx context.Context) (*SysColumns, error) {
	var (
		err  error
		node *SysColumns
	)
	scuo.defaults()
	if len(scuo.hooks) == 0 {
		node, err = scuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysColumnsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scuo.mutation = mutation
			node, err = scuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scuo.hooks) - 1; i >= 0; i-- {
			if scuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SysColumnsUpdateOne) SaveX(ctx context.Context) *SysColumns {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SysColumnsUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SysColumnsUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SysColumnsUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := syscolumns.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

func (scuo *SysColumnsUpdateOne) sqlSave(ctx context.Context) (_node *SysColumns, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   syscolumns.Table,
			Columns: syscolumns.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: syscolumns.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysColumns.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syscolumns.FieldID)
		for _, f := range fields {
			if !syscolumns.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != syscolumns.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.ColumnId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscolumns.FieldColumnId,
		})
	}
	if value, ok := scuo.mutation.AddedColumnId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscolumns.FieldColumnId,
		})
	}
	if value, ok := scuo.mutation.ColumnName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldColumnName,
		})
	}
	if scuo.mutation.ColumnNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldColumnName,
		})
	}
	if value, ok := scuo.mutation.ColumnComment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldColumnComment,
		})
	}
	if scuo.mutation.ColumnCommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldColumnComment,
		})
	}
	if value, ok := scuo.mutation.ColumnType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldColumnType,
		})
	}
	if scuo.mutation.ColumnTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldColumnType,
		})
	}
	if value, ok := scuo.mutation.GoType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldGoType,
		})
	}
	if scuo.mutation.GoTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldGoType,
		})
	}
	if value, ok := scuo.mutation.GoField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldGoField,
		})
	}
	if scuo.mutation.GoFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldGoField,
		})
	}
	if value, ok := scuo.mutation.JsonField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldJsonField,
		})
	}
	if scuo.mutation.JsonFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldJsonField,
		})
	}
	if value, ok := scuo.mutation.IsPk(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsPk,
		})
	}
	if scuo.mutation.IsPkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsPk,
		})
	}
	if value, ok := scuo.mutation.IsIncrement(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsIncrement,
		})
	}
	if scuo.mutation.IsIncrementCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsIncrement,
		})
	}
	if value, ok := scuo.mutation.IsRequired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsRequired,
		})
	}
	if scuo.mutation.IsRequiredCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsRequired,
		})
	}
	if value, ok := scuo.mutation.IsInsert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsInsert,
		})
	}
	if scuo.mutation.IsInsertCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsInsert,
		})
	}
	if value, ok := scuo.mutation.IsEdit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsEdit,
		})
	}
	if scuo.mutation.IsEditCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsEdit,
		})
	}
	if value, ok := scuo.mutation.IsList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsList,
		})
	}
	if scuo.mutation.IsListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsList,
		})
	}
	if value, ok := scuo.mutation.IsQuery(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldIsQuery,
		})
	}
	if scuo.mutation.IsQueryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldIsQuery,
		})
	}
	if value, ok := scuo.mutation.QueryType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldQueryType,
		})
	}
	if scuo.mutation.QueryTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldQueryType,
		})
	}
	if value, ok := scuo.mutation.HtmlType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldHtmlType,
		})
	}
	if scuo.mutation.HtmlTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldHtmlType,
		})
	}
	if value, ok := scuo.mutation.DictType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldDictType,
		})
	}
	if scuo.mutation.DictTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldDictType,
		})
	}
	if value, ok := scuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscolumns.FieldSort,
		})
	}
	if value, ok := scuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: syscolumns.FieldSort,
		})
	}
	if scuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: syscolumns.FieldSort,
		})
	}
	if value, ok := scuo.mutation.List(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldList,
		})
	}
	if scuo.mutation.ListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldList,
		})
	}
	if value, ok := scuo.mutation.Pk(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldPk,
		})
	}
	if scuo.mutation.PkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldPk,
		})
	}
	if value, ok := scuo.mutation.Required(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldRequired,
		})
	}
	if scuo.mutation.RequiredCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldRequired,
		})
	}
	if value, ok := scuo.mutation.SuperColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldSuperColumn,
		})
	}
	if scuo.mutation.SuperColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldSuperColumn,
		})
	}
	if value, ok := scuo.mutation.UsableColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldUsableColumn,
		})
	}
	if scuo.mutation.UsableColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldUsableColumn,
		})
	}
	if value, ok := scuo.mutation.Increment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldIncrement,
		})
	}
	if scuo.mutation.IncrementCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldIncrement,
		})
	}
	if value, ok := scuo.mutation.Insert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldInsert,
		})
	}
	if scuo.mutation.InsertCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldInsert,
		})
	}
	if value, ok := scuo.mutation.Edit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldEdit,
		})
	}
	if scuo.mutation.EditCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldEdit,
		})
	}
	if value, ok := scuo.mutation.Query(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syscolumns.FieldQuery,
		})
	}
	if scuo.mutation.QueryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: syscolumns.FieldQuery,
		})
	}
	if value, ok := scuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldRemark,
		})
	}
	if scuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldRemark,
		})
	}
	if value, ok := scuo.mutation.FkLabelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syscolumns.FieldFkLabelName,
		})
	}
	if scuo.mutation.FkLabelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: syscolumns.FieldFkLabelName,
		})
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syscolumns.FieldUpdatedAt,
		})
	}
	if value, ok := scuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldCreateBy,
		})
	}
	if value, ok := scuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldCreateBy,
		})
	}
	if value, ok := scuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldUpdateBy,
		})
	}
	if value, ok := scuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldUpdateBy,
		})
	}
	if value, ok := scuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldTenantId,
		})
	}
	if value, ok := scuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: syscolumns.FieldTenantId,
		})
	}
	_node = &SysColumns{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syscolumns.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
