// Code generated by entc, DO NOT EDIT.

package sysloginlog

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Ipaddr applies equality check predicate on the "ipaddr" field. It's identical to IpaddrEQ.
func Ipaddr(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpaddr), v))
	})
}

// LoginLocation applies equality check predicate on the "loginLocation" field. It's identical to LoginLocationEQ.
func LoginLocation(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoginLocation), v))
	})
}

// Browser applies equality check predicate on the "browser" field. It's identical to BrowserEQ.
func Browser(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrowser), v))
	})
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// LoginTime applies equality check predicate on the "loginTime" field. It's identical to LoginTimeEQ.
func LoginTime(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoginTime), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// Msg applies equality check predicate on the "msg" field. It's identical to MsgEQ.
func Msg(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsg), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserId)))
	})
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserId)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// IpaddrEQ applies the EQ predicate on the "ipaddr" field.
func IpaddrEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIpaddr), v))
	})
}

// IpaddrNEQ applies the NEQ predicate on the "ipaddr" field.
func IpaddrNEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIpaddr), v))
	})
}

// IpaddrIn applies the In predicate on the "ipaddr" field.
func IpaddrIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIpaddr), v...))
	})
}

// IpaddrNotIn applies the NotIn predicate on the "ipaddr" field.
func IpaddrNotIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIpaddr), v...))
	})
}

// IpaddrGT applies the GT predicate on the "ipaddr" field.
func IpaddrGT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIpaddr), v))
	})
}

// IpaddrGTE applies the GTE predicate on the "ipaddr" field.
func IpaddrGTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIpaddr), v))
	})
}

// IpaddrLT applies the LT predicate on the "ipaddr" field.
func IpaddrLT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIpaddr), v))
	})
}

// IpaddrLTE applies the LTE predicate on the "ipaddr" field.
func IpaddrLTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIpaddr), v))
	})
}

// IpaddrContains applies the Contains predicate on the "ipaddr" field.
func IpaddrContains(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIpaddr), v))
	})
}

// IpaddrHasPrefix applies the HasPrefix predicate on the "ipaddr" field.
func IpaddrHasPrefix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIpaddr), v))
	})
}

// IpaddrHasSuffix applies the HasSuffix predicate on the "ipaddr" field.
func IpaddrHasSuffix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIpaddr), v))
	})
}

// IpaddrIsNil applies the IsNil predicate on the "ipaddr" field.
func IpaddrIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIpaddr)))
	})
}

// IpaddrNotNil applies the NotNil predicate on the "ipaddr" field.
func IpaddrNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIpaddr)))
	})
}

// IpaddrEqualFold applies the EqualFold predicate on the "ipaddr" field.
func IpaddrEqualFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIpaddr), v))
	})
}

// IpaddrContainsFold applies the ContainsFold predicate on the "ipaddr" field.
func IpaddrContainsFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIpaddr), v))
	})
}

// LoginLocationEQ applies the EQ predicate on the "loginLocation" field.
func LoginLocationEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationNEQ applies the NEQ predicate on the "loginLocation" field.
func LoginLocationNEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationIn applies the In predicate on the "loginLocation" field.
func LoginLocationIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLoginLocation), v...))
	})
}

// LoginLocationNotIn applies the NotIn predicate on the "loginLocation" field.
func LoginLocationNotIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLoginLocation), v...))
	})
}

// LoginLocationGT applies the GT predicate on the "loginLocation" field.
func LoginLocationGT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationGTE applies the GTE predicate on the "loginLocation" field.
func LoginLocationGTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationLT applies the LT predicate on the "loginLocation" field.
func LoginLocationLT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationLTE applies the LTE predicate on the "loginLocation" field.
func LoginLocationLTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationContains applies the Contains predicate on the "loginLocation" field.
func LoginLocationContains(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationHasPrefix applies the HasPrefix predicate on the "loginLocation" field.
func LoginLocationHasPrefix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationHasSuffix applies the HasSuffix predicate on the "loginLocation" field.
func LoginLocationHasSuffix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationIsNil applies the IsNil predicate on the "loginLocation" field.
func LoginLocationIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLoginLocation)))
	})
}

// LoginLocationNotNil applies the NotNil predicate on the "loginLocation" field.
func LoginLocationNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLoginLocation)))
	})
}

// LoginLocationEqualFold applies the EqualFold predicate on the "loginLocation" field.
func LoginLocationEqualFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLoginLocation), v))
	})
}

// LoginLocationContainsFold applies the ContainsFold predicate on the "loginLocation" field.
func LoginLocationContainsFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLoginLocation), v))
	})
}

// BrowserEQ applies the EQ predicate on the "browser" field.
func BrowserEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrowser), v))
	})
}

// BrowserNEQ applies the NEQ predicate on the "browser" field.
func BrowserNEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrowser), v))
	})
}

// BrowserIn applies the In predicate on the "browser" field.
func BrowserIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBrowser), v...))
	})
}

// BrowserNotIn applies the NotIn predicate on the "browser" field.
func BrowserNotIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBrowser), v...))
	})
}

// BrowserGT applies the GT predicate on the "browser" field.
func BrowserGT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrowser), v))
	})
}

// BrowserGTE applies the GTE predicate on the "browser" field.
func BrowserGTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrowser), v))
	})
}

// BrowserLT applies the LT predicate on the "browser" field.
func BrowserLT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrowser), v))
	})
}

// BrowserLTE applies the LTE predicate on the "browser" field.
func BrowserLTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrowser), v))
	})
}

// BrowserContains applies the Contains predicate on the "browser" field.
func BrowserContains(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBrowser), v))
	})
}

// BrowserHasPrefix applies the HasPrefix predicate on the "browser" field.
func BrowserHasPrefix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBrowser), v))
	})
}

// BrowserHasSuffix applies the HasSuffix predicate on the "browser" field.
func BrowserHasSuffix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBrowser), v))
	})
}

// BrowserIsNil applies the IsNil predicate on the "browser" field.
func BrowserIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBrowser)))
	})
}

// BrowserNotNil applies the NotNil predicate on the "browser" field.
func BrowserNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBrowser)))
	})
}

// BrowserEqualFold applies the EqualFold predicate on the "browser" field.
func BrowserEqualFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBrowser), v))
	})
}

// BrowserContainsFold applies the ContainsFold predicate on the "browser" field.
func BrowserContainsFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBrowser), v))
	})
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOs), v))
	})
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOs), v...))
	})
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOs), v...))
	})
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOs), v))
	})
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOs), v))
	})
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOs), v))
	})
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOs), v))
	})
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOs), v))
	})
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOs), v))
	})
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOs), v))
	})
}

// OsIsNil applies the IsNil predicate on the "os" field.
func OsIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOs)))
	})
}

// OsNotNil applies the NotNil predicate on the "os" field.
func OsNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOs)))
	})
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOs), v))
	})
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOs), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformIsNil applies the IsNil predicate on the "platform" field.
func PlatformIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatform)))
	})
}

// PlatformNotNil applies the NotNil predicate on the "platform" field.
func PlatformNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatform)))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// LoginTimeEQ applies the EQ predicate on the "loginTime" field.
func LoginTimeEQ(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoginTime), v))
	})
}

// LoginTimeNEQ applies the NEQ predicate on the "loginTime" field.
func LoginTimeNEQ(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoginTime), v))
	})
}

// LoginTimeIn applies the In predicate on the "loginTime" field.
func LoginTimeIn(vs ...time.Time) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLoginTime), v...))
	})
}

// LoginTimeNotIn applies the NotIn predicate on the "loginTime" field.
func LoginTimeNotIn(vs ...time.Time) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLoginTime), v...))
	})
}

// LoginTimeGT applies the GT predicate on the "loginTime" field.
func LoginTimeGT(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoginTime), v))
	})
}

// LoginTimeGTE applies the GTE predicate on the "loginTime" field.
func LoginTimeGTE(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoginTime), v))
	})
}

// LoginTimeLT applies the LT predicate on the "loginTime" field.
func LoginTimeLT(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoginTime), v))
	})
}

// LoginTimeLTE applies the LTE predicate on the "loginTime" field.
func LoginTimeLTE(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoginTime), v))
	})
}

// LoginTimeIsNil applies the IsNil predicate on the "loginTime" field.
func LoginTimeIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLoginTime)))
	})
}

// LoginTimeNotNil applies the NotNil predicate on the "loginTime" field.
func LoginTimeNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLoginTime)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// MsgEQ applies the EQ predicate on the "msg" field.
func MsgEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMsg), v))
	})
}

// MsgNEQ applies the NEQ predicate on the "msg" field.
func MsgNEQ(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMsg), v))
	})
}

// MsgIn applies the In predicate on the "msg" field.
func MsgIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMsg), v...))
	})
}

// MsgNotIn applies the NotIn predicate on the "msg" field.
func MsgNotIn(vs ...string) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMsg), v...))
	})
}

// MsgGT applies the GT predicate on the "msg" field.
func MsgGT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMsg), v))
	})
}

// MsgGTE applies the GTE predicate on the "msg" field.
func MsgGTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMsg), v))
	})
}

// MsgLT applies the LT predicate on the "msg" field.
func MsgLT(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMsg), v))
	})
}

// MsgLTE applies the LTE predicate on the "msg" field.
func MsgLTE(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMsg), v))
	})
}

// MsgContains applies the Contains predicate on the "msg" field.
func MsgContains(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMsg), v))
	})
}

// MsgHasPrefix applies the HasPrefix predicate on the "msg" field.
func MsgHasPrefix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMsg), v))
	})
}

// MsgHasSuffix applies the HasSuffix predicate on the "msg" field.
func MsgHasSuffix(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMsg), v))
	})
}

// MsgIsNil applies the IsNil predicate on the "msg" field.
func MsgIsNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMsg)))
	})
}

// MsgNotNil applies the NotNil predicate on the "msg" field.
func MsgNotNil() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMsg)))
	})
}

// MsgEqualFold applies the EqualFold predicate on the "msg" field.
func MsgEqualFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMsg), v))
	})
}

// MsgContainsFold applies the ContainsFold predicate on the "msg" field.
func MsgContainsFold(v string) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMsg), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysLoginLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysLoginLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.SysUser) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysLoginLog) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysLoginLog) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysLoginLog) predicate.SysLoginLog {
	return predicate.SysLoginLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
