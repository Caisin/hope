// Code generated by entc, DO NOT EDIT.

package customernovelconfig

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GroupCode applies equality check predicate on the "groupCode" field. It's identical to GroupCodeEQ.
func GroupCode(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCode), v))
	})
}

// InnerGroupCode applies equality check predicate on the "innerGroupCode" field. It's identical to InnerGroupCodeEQ.
func InnerGroupCode(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInnerGroupCode), v))
	})
}

// GroupName applies equality check predicate on the "groupName" field. It's identical to GroupNameEQ.
func GroupName(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupName), v))
	})
}

// TypeId applies equality check predicate on the "typeId" field. It's identical to TypeIdEQ.
func TypeId(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeId), v))
	})
}

// TypeCode applies equality check predicate on the "TypeCode" field. It's identical to TypeCodeEQ.
func TypeCode(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeCode), v))
	})
}

// TypeName applies equality check predicate on the "typeName" field. It's identical to TypeNameEQ.
func TypeName(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeName), v))
	})
}

// FieldName applies equality check predicate on the "fieldName" field. It's identical to FieldNameEQ.
func FieldName(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFieldName), v))
	})
}

// DefaultNum applies equality check predicate on the "defaultNum" field. It's identical to DefaultNumEQ.
func DefaultNum(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultNum), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v bool) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// GroupCodeEQ applies the EQ predicate on the "groupCode" field.
func GroupCodeEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCode), v))
	})
}

// GroupCodeNEQ applies the NEQ predicate on the "groupCode" field.
func GroupCodeNEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupCode), v))
	})
}

// GroupCodeIn applies the In predicate on the "groupCode" field.
func GroupCodeIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupCode), v...))
	})
}

// GroupCodeNotIn applies the NotIn predicate on the "groupCode" field.
func GroupCodeNotIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupCode), v...))
	})
}

// GroupCodeGT applies the GT predicate on the "groupCode" field.
func GroupCodeGT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupCode), v))
	})
}

// GroupCodeGTE applies the GTE predicate on the "groupCode" field.
func GroupCodeGTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupCode), v))
	})
}

// GroupCodeLT applies the LT predicate on the "groupCode" field.
func GroupCodeLT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupCode), v))
	})
}

// GroupCodeLTE applies the LTE predicate on the "groupCode" field.
func GroupCodeLTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupCode), v))
	})
}

// GroupCodeContains applies the Contains predicate on the "groupCode" field.
func GroupCodeContains(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupCode), v))
	})
}

// GroupCodeHasPrefix applies the HasPrefix predicate on the "groupCode" field.
func GroupCodeHasPrefix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupCode), v))
	})
}

// GroupCodeHasSuffix applies the HasSuffix predicate on the "groupCode" field.
func GroupCodeHasSuffix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupCode), v))
	})
}

// GroupCodeIsNil applies the IsNil predicate on the "groupCode" field.
func GroupCodeIsNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupCode)))
	})
}

// GroupCodeNotNil applies the NotNil predicate on the "groupCode" field.
func GroupCodeNotNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupCode)))
	})
}

// GroupCodeEqualFold applies the EqualFold predicate on the "groupCode" field.
func GroupCodeEqualFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupCode), v))
	})
}

// GroupCodeContainsFold applies the ContainsFold predicate on the "groupCode" field.
func GroupCodeContainsFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupCode), v))
	})
}

// InnerGroupCodeEQ applies the EQ predicate on the "innerGroupCode" field.
func InnerGroupCodeEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeNEQ applies the NEQ predicate on the "innerGroupCode" field.
func InnerGroupCodeNEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeIn applies the In predicate on the "innerGroupCode" field.
func InnerGroupCodeIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInnerGroupCode), v...))
	})
}

// InnerGroupCodeNotIn applies the NotIn predicate on the "innerGroupCode" field.
func InnerGroupCodeNotIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInnerGroupCode), v...))
	})
}

// InnerGroupCodeGT applies the GT predicate on the "innerGroupCode" field.
func InnerGroupCodeGT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeGTE applies the GTE predicate on the "innerGroupCode" field.
func InnerGroupCodeGTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeLT applies the LT predicate on the "innerGroupCode" field.
func InnerGroupCodeLT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeLTE applies the LTE predicate on the "innerGroupCode" field.
func InnerGroupCodeLTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeContains applies the Contains predicate on the "innerGroupCode" field.
func InnerGroupCodeContains(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeHasPrefix applies the HasPrefix predicate on the "innerGroupCode" field.
func InnerGroupCodeHasPrefix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeHasSuffix applies the HasSuffix predicate on the "innerGroupCode" field.
func InnerGroupCodeHasSuffix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeIsNil applies the IsNil predicate on the "innerGroupCode" field.
func InnerGroupCodeIsNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInnerGroupCode)))
	})
}

// InnerGroupCodeNotNil applies the NotNil predicate on the "innerGroupCode" field.
func InnerGroupCodeNotNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInnerGroupCode)))
	})
}

// InnerGroupCodeEqualFold applies the EqualFold predicate on the "innerGroupCode" field.
func InnerGroupCodeEqualFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInnerGroupCode), v))
	})
}

// InnerGroupCodeContainsFold applies the ContainsFold predicate on the "innerGroupCode" field.
func InnerGroupCodeContainsFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInnerGroupCode), v))
	})
}

// GroupNameEQ applies the EQ predicate on the "groupName" field.
func GroupNameEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupName), v))
	})
}

// GroupNameNEQ applies the NEQ predicate on the "groupName" field.
func GroupNameNEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupName), v))
	})
}

// GroupNameIn applies the In predicate on the "groupName" field.
func GroupNameIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupName), v...))
	})
}

// GroupNameNotIn applies the NotIn predicate on the "groupName" field.
func GroupNameNotIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupName), v...))
	})
}

// GroupNameGT applies the GT predicate on the "groupName" field.
func GroupNameGT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupName), v))
	})
}

// GroupNameGTE applies the GTE predicate on the "groupName" field.
func GroupNameGTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupName), v))
	})
}

// GroupNameLT applies the LT predicate on the "groupName" field.
func GroupNameLT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupName), v))
	})
}

// GroupNameLTE applies the LTE predicate on the "groupName" field.
func GroupNameLTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupName), v))
	})
}

// GroupNameContains applies the Contains predicate on the "groupName" field.
func GroupNameContains(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupName), v))
	})
}

// GroupNameHasPrefix applies the HasPrefix predicate on the "groupName" field.
func GroupNameHasPrefix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupName), v))
	})
}

// GroupNameHasSuffix applies the HasSuffix predicate on the "groupName" field.
func GroupNameHasSuffix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupName), v))
	})
}

// GroupNameIsNil applies the IsNil predicate on the "groupName" field.
func GroupNameIsNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupName)))
	})
}

// GroupNameNotNil applies the NotNil predicate on the "groupName" field.
func GroupNameNotNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupName)))
	})
}

// GroupNameEqualFold applies the EqualFold predicate on the "groupName" field.
func GroupNameEqualFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupName), v))
	})
}

// GroupNameContainsFold applies the ContainsFold predicate on the "groupName" field.
func GroupNameContainsFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupName), v))
	})
}

// TypeIdEQ applies the EQ predicate on the "typeId" field.
func TypeIdEQ(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeId), v))
	})
}

// TypeIdNEQ applies the NEQ predicate on the "typeId" field.
func TypeIdNEQ(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeId), v))
	})
}

// TypeIdIn applies the In predicate on the "typeId" field.
func TypeIdIn(vs ...int32) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeId), v...))
	})
}

// TypeIdNotIn applies the NotIn predicate on the "typeId" field.
func TypeIdNotIn(vs ...int32) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeId), v...))
	})
}

// TypeIdGT applies the GT predicate on the "typeId" field.
func TypeIdGT(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeId), v))
	})
}

// TypeIdGTE applies the GTE predicate on the "typeId" field.
func TypeIdGTE(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeId), v))
	})
}

// TypeIdLT applies the LT predicate on the "typeId" field.
func TypeIdLT(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeId), v))
	})
}

// TypeIdLTE applies the LTE predicate on the "typeId" field.
func TypeIdLTE(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeId), v))
	})
}

// TypeIdIsNil applies the IsNil predicate on the "typeId" field.
func TypeIdIsNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTypeId)))
	})
}

// TypeIdNotNil applies the NotNil predicate on the "typeId" field.
func TypeIdNotNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTypeId)))
	})
}

// TypeCodeEQ applies the EQ predicate on the "TypeCode" field.
func TypeCodeEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeCode), v))
	})
}

// TypeCodeNEQ applies the NEQ predicate on the "TypeCode" field.
func TypeCodeNEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeCode), v))
	})
}

// TypeCodeIn applies the In predicate on the "TypeCode" field.
func TypeCodeIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeCode), v...))
	})
}

// TypeCodeNotIn applies the NotIn predicate on the "TypeCode" field.
func TypeCodeNotIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeCode), v...))
	})
}

// TypeCodeGT applies the GT predicate on the "TypeCode" field.
func TypeCodeGT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeCode), v))
	})
}

// TypeCodeGTE applies the GTE predicate on the "TypeCode" field.
func TypeCodeGTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeCode), v))
	})
}

// TypeCodeLT applies the LT predicate on the "TypeCode" field.
func TypeCodeLT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeCode), v))
	})
}

// TypeCodeLTE applies the LTE predicate on the "TypeCode" field.
func TypeCodeLTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeCode), v))
	})
}

// TypeCodeContains applies the Contains predicate on the "TypeCode" field.
func TypeCodeContains(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTypeCode), v))
	})
}

// TypeCodeHasPrefix applies the HasPrefix predicate on the "TypeCode" field.
func TypeCodeHasPrefix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTypeCode), v))
	})
}

// TypeCodeHasSuffix applies the HasSuffix predicate on the "TypeCode" field.
func TypeCodeHasSuffix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTypeCode), v))
	})
}

// TypeCodeIsNil applies the IsNil predicate on the "TypeCode" field.
func TypeCodeIsNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTypeCode)))
	})
}

// TypeCodeNotNil applies the NotNil predicate on the "TypeCode" field.
func TypeCodeNotNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTypeCode)))
	})
}

// TypeCodeEqualFold applies the EqualFold predicate on the "TypeCode" field.
func TypeCodeEqualFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTypeCode), v))
	})
}

// TypeCodeContainsFold applies the ContainsFold predicate on the "TypeCode" field.
func TypeCodeContainsFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTypeCode), v))
	})
}

// TypeNameEQ applies the EQ predicate on the "typeName" field.
func TypeNameEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeName), v))
	})
}

// TypeNameNEQ applies the NEQ predicate on the "typeName" field.
func TypeNameNEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeName), v))
	})
}

// TypeNameIn applies the In predicate on the "typeName" field.
func TypeNameIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeName), v...))
	})
}

// TypeNameNotIn applies the NotIn predicate on the "typeName" field.
func TypeNameNotIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeName), v...))
	})
}

// TypeNameGT applies the GT predicate on the "typeName" field.
func TypeNameGT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeName), v))
	})
}

// TypeNameGTE applies the GTE predicate on the "typeName" field.
func TypeNameGTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeName), v))
	})
}

// TypeNameLT applies the LT predicate on the "typeName" field.
func TypeNameLT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeName), v))
	})
}

// TypeNameLTE applies the LTE predicate on the "typeName" field.
func TypeNameLTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeName), v))
	})
}

// TypeNameContains applies the Contains predicate on the "typeName" field.
func TypeNameContains(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTypeName), v))
	})
}

// TypeNameHasPrefix applies the HasPrefix predicate on the "typeName" field.
func TypeNameHasPrefix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTypeName), v))
	})
}

// TypeNameHasSuffix applies the HasSuffix predicate on the "typeName" field.
func TypeNameHasSuffix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTypeName), v))
	})
}

// TypeNameIsNil applies the IsNil predicate on the "typeName" field.
func TypeNameIsNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTypeName)))
	})
}

// TypeNameNotNil applies the NotNil predicate on the "typeName" field.
func TypeNameNotNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTypeName)))
	})
}

// TypeNameEqualFold applies the EqualFold predicate on the "typeName" field.
func TypeNameEqualFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTypeName), v))
	})
}

// TypeNameContainsFold applies the ContainsFold predicate on the "typeName" field.
func TypeNameContainsFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTypeName), v))
	})
}

// FieldNameEQ applies the EQ predicate on the "fieldName" field.
func FieldNameEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFieldName), v))
	})
}

// FieldNameNEQ applies the NEQ predicate on the "fieldName" field.
func FieldNameNEQ(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFieldName), v))
	})
}

// FieldNameIn applies the In predicate on the "fieldName" field.
func FieldNameIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFieldName), v...))
	})
}

// FieldNameNotIn applies the NotIn predicate on the "fieldName" field.
func FieldNameNotIn(vs ...string) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFieldName), v...))
	})
}

// FieldNameGT applies the GT predicate on the "fieldName" field.
func FieldNameGT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFieldName), v))
	})
}

// FieldNameGTE applies the GTE predicate on the "fieldName" field.
func FieldNameGTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFieldName), v))
	})
}

// FieldNameLT applies the LT predicate on the "fieldName" field.
func FieldNameLT(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFieldName), v))
	})
}

// FieldNameLTE applies the LTE predicate on the "fieldName" field.
func FieldNameLTE(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFieldName), v))
	})
}

// FieldNameContains applies the Contains predicate on the "fieldName" field.
func FieldNameContains(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFieldName), v))
	})
}

// FieldNameHasPrefix applies the HasPrefix predicate on the "fieldName" field.
func FieldNameHasPrefix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFieldName), v))
	})
}

// FieldNameHasSuffix applies the HasSuffix predicate on the "fieldName" field.
func FieldNameHasSuffix(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFieldName), v))
	})
}

// FieldNameIsNil applies the IsNil predicate on the "fieldName" field.
func FieldNameIsNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFieldName)))
	})
}

// FieldNameNotNil applies the NotNil predicate on the "fieldName" field.
func FieldNameNotNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFieldName)))
	})
}

// FieldNameEqualFold applies the EqualFold predicate on the "fieldName" field.
func FieldNameEqualFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFieldName), v))
	})
}

// FieldNameContainsFold applies the ContainsFold predicate on the "fieldName" field.
func FieldNameContainsFold(v string) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFieldName), v))
	})
}

// DefaultNumEQ applies the EQ predicate on the "defaultNum" field.
func DefaultNumEQ(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultNum), v))
	})
}

// DefaultNumNEQ applies the NEQ predicate on the "defaultNum" field.
func DefaultNumNEQ(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultNum), v))
	})
}

// DefaultNumIn applies the In predicate on the "defaultNum" field.
func DefaultNumIn(vs ...int32) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultNum), v...))
	})
}

// DefaultNumNotIn applies the NotIn predicate on the "defaultNum" field.
func DefaultNumNotIn(vs ...int32) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultNum), v...))
	})
}

// DefaultNumGT applies the GT predicate on the "defaultNum" field.
func DefaultNumGT(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultNum), v))
	})
}

// DefaultNumGTE applies the GTE predicate on the "defaultNum" field.
func DefaultNumGTE(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultNum), v))
	})
}

// DefaultNumLT applies the LT predicate on the "defaultNum" field.
func DefaultNumLT(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultNum), v))
	})
}

// DefaultNumLTE applies the LTE predicate on the "defaultNum" field.
func DefaultNumLTE(v int32) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultNum), v))
	})
}

// DefaultNumIsNil applies the IsNil predicate on the "defaultNum" field.
func DefaultNumIsNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaultNum)))
	})
}

// DefaultNumNotNil applies the NotNil predicate on the "defaultNum" field.
func DefaultNumNotNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaultNum)))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v bool) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v bool) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.CustomerNovelConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomerNovelConfig) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerNovelConfig) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerNovelConfig) predicate.CustomerNovelConfig {
	return predicate.CustomerNovelConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
