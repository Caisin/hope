// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/novelclassify"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// NovelClassify is the model entity for the NovelClassify schema.
type NovelClassify struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Pid holds the value of the "pid" field.
	// 父类ID,默认0,表示无
	Pid int64 `json:"pid,omitempty"`
	// ClassifyName holds the value of the "classifyName" field.
	// 分类名称
	ClassifyName string `json:"classifyName,omitempty"`
	// Status holds the value of the "status" field.
	// 状态 0
	Status int32 `json:"status,omitempty"`
	// OrderNum holds the value of the "orderNum" field.
	// 排序字段
	OrderNum int32 `json:"orderNum,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NovelClassifyQuery when eager-loading is set.
	Edges NovelClassifyEdges `json:"edges"`
}

// NovelClassifyEdges holds the relations/edges for other nodes in the graph.
type NovelClassifyEdges struct {
	// Novels holds the value of the novels edge.
	Novels []*Novel `json:"novels,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NovelsOrErr returns the Novels value or an error if the edge
// was not loaded in eager-loading.
func (e NovelClassifyEdges) NovelsOrErr() ([]*Novel, error) {
	if e.loadedTypes[0] {
		return e.Novels, nil
	}
	return nil, &NotLoadedError{edge: "novels"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NovelClassify) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case novelclassify.FieldID, novelclassify.FieldPid, novelclassify.FieldStatus, novelclassify.FieldOrderNum, novelclassify.FieldCreateBy, novelclassify.FieldUpdateBy, novelclassify.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case novelclassify.FieldClassifyName, novelclassify.FieldRemark:
			values[i] = new(sql.NullString)
		case novelclassify.FieldCreatedAt, novelclassify.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NovelClassify", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NovelClassify fields.
func (nc *NovelClassify) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case novelclassify.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nc.ID = int64(value.Int64)
		case novelclassify.FieldPid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pid", values[i])
			} else if value.Valid {
				nc.Pid = value.Int64
			}
		case novelclassify.FieldClassifyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field classifyName", values[i])
			} else if value.Valid {
				nc.ClassifyName = value.String
			}
		case novelclassify.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				nc.Status = int32(value.Int64)
			}
		case novelclassify.FieldOrderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field orderNum", values[i])
			} else if value.Valid {
				nc.OrderNum = int32(value.Int64)
			}
		case novelclassify.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				nc.Remark = value.String
			}
		case novelclassify.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				nc.CreatedAt = value.Time
			}
		case novelclassify.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				nc.UpdatedAt = value.Time
			}
		case novelclassify.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				nc.CreateBy = value.Int64
			}
		case novelclassify.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				nc.UpdateBy = value.Int64
			}
		case novelclassify.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				nc.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryNovels queries the "novels" edge of the NovelClassify entity.
func (nc *NovelClassify) QueryNovels() *NovelQuery {
	return (&NovelClassifyClient{config: nc.config}).QueryNovels(nc)
}

// Update returns a builder for updating this NovelClassify.
// Note that you need to call NovelClassify.Unwrap() before calling this method if this NovelClassify
// was returned from a transaction, and the transaction was committed or rolled back.
func (nc *NovelClassify) Update() *NovelClassifyUpdateOne {
	return (&NovelClassifyClient{config: nc.config}).UpdateOne(nc)
}

// Unwrap unwraps the NovelClassify entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nc *NovelClassify) Unwrap() *NovelClassify {
	tx, ok := nc.config.driver.(*txDriver)
	if !ok {
		panic("ent: NovelClassify is not a transactional entity")
	}
	nc.config.driver = tx.drv
	return nc
}

// String implements the fmt.Stringer.
func (nc *NovelClassify) String() string {
	var builder strings.Builder
	builder.WriteString("NovelClassify(")
	builder.WriteString(fmt.Sprintf("id=%v", nc.ID))
	builder.WriteString(", pid=")
	builder.WriteString(fmt.Sprintf("%v", nc.Pid))
	builder.WriteString(", classifyName=")
	builder.WriteString(nc.ClassifyName)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", nc.Status))
	builder.WriteString(", orderNum=")
	builder.WriteString(fmt.Sprintf("%v", nc.OrderNum))
	builder.WriteString(", remark=")
	builder.WriteString(nc.Remark)
	builder.WriteString(", createdAt=")
	builder.WriteString(nc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(nc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", nc.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", nc.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", nc.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NovelClassifies is a parsable slice of NovelClassify.
type NovelClassifies []*NovelClassify

func (nc NovelClassifies) config(cfg config) {
	for _i := range nc {
		nc[_i].config = cfg
	}
}
