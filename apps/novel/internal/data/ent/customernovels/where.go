// Code generated by entc, DO NOT EDIT.

package customernovels

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NovelId applies equality check predicate on the "novelId" field. It's identical to NovelIdEQ.
func NovelId(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// TypeId applies equality check predicate on the "typeId" field. It's identical to TypeIdEQ.
func TypeId(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeId), v))
	})
}

// TypeCode applies equality check predicate on the "typeCode" field. It's identical to TypeCodeEQ.
func TypeCode(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeCode), v))
	})
}

// GroupCode applies equality check predicate on the "groupCode" field. It's identical to GroupCodeEQ.
func GroupCode(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCode), v))
	})
}

// FieldName applies equality check predicate on the "fieldName" field. It's identical to FieldNameEQ.
func FieldName(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFieldName), v))
	})
}

// Cover applies equality check predicate on the "cover" field. It's identical to CoverEQ.
func Cover(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCover), v))
	})
}

// OrderNum applies equality check predicate on the "orderNum" field. It's identical to OrderNumEQ.
func OrderNum(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNum), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// EffectTime applies equality check predicate on the "effectTime" field. It's identical to EffectTimeEQ.
func EffectTime(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// ExpiredTime applies equality check predicate on the "expiredTime" field. It's identical to ExpiredTimeEQ.
func ExpiredTime(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// NovelIdEQ applies the EQ predicate on the "novelId" field.
func NovelIdEQ(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// NovelIdNEQ applies the NEQ predicate on the "novelId" field.
func NovelIdNEQ(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelId), v))
	})
}

// NovelIdIn applies the In predicate on the "novelId" field.
func NovelIdIn(vs ...int64) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelId), v...))
	})
}

// NovelIdNotIn applies the NotIn predicate on the "novelId" field.
func NovelIdNotIn(vs ...int64) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelId), v...))
	})
}

// NovelIdGT applies the GT predicate on the "novelId" field.
func NovelIdGT(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNovelId), v))
	})
}

// NovelIdGTE applies the GTE predicate on the "novelId" field.
func NovelIdGTE(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNovelId), v))
	})
}

// NovelIdLT applies the LT predicate on the "novelId" field.
func NovelIdLT(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNovelId), v))
	})
}

// NovelIdLTE applies the LTE predicate on the "novelId" field.
func NovelIdLTE(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNovelId), v))
	})
}

// NovelIdIsNil applies the IsNil predicate on the "novelId" field.
func NovelIdIsNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNovelId)))
	})
}

// NovelIdNotNil applies the NotNil predicate on the "novelId" field.
func NovelIdNotNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNovelId)))
	})
}

// TypeIdEQ applies the EQ predicate on the "typeId" field.
func TypeIdEQ(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeId), v))
	})
}

// TypeIdNEQ applies the NEQ predicate on the "typeId" field.
func TypeIdNEQ(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeId), v))
	})
}

// TypeIdIn applies the In predicate on the "typeId" field.
func TypeIdIn(vs ...int32) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeId), v...))
	})
}

// TypeIdNotIn applies the NotIn predicate on the "typeId" field.
func TypeIdNotIn(vs ...int32) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeId), v...))
	})
}

// TypeIdGT applies the GT predicate on the "typeId" field.
func TypeIdGT(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeId), v))
	})
}

// TypeIdGTE applies the GTE predicate on the "typeId" field.
func TypeIdGTE(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeId), v))
	})
}

// TypeIdLT applies the LT predicate on the "typeId" field.
func TypeIdLT(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeId), v))
	})
}

// TypeIdLTE applies the LTE predicate on the "typeId" field.
func TypeIdLTE(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeId), v))
	})
}

// TypeIdIsNil applies the IsNil predicate on the "typeId" field.
func TypeIdIsNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTypeId)))
	})
}

// TypeIdNotNil applies the NotNil predicate on the "typeId" field.
func TypeIdNotNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTypeId)))
	})
}

// TypeCodeEQ applies the EQ predicate on the "typeCode" field.
func TypeCodeEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeCode), v))
	})
}

// TypeCodeNEQ applies the NEQ predicate on the "typeCode" field.
func TypeCodeNEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeCode), v))
	})
}

// TypeCodeIn applies the In predicate on the "typeCode" field.
func TypeCodeIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeCode), v...))
	})
}

// TypeCodeNotIn applies the NotIn predicate on the "typeCode" field.
func TypeCodeNotIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeCode), v...))
	})
}

// TypeCodeGT applies the GT predicate on the "typeCode" field.
func TypeCodeGT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeCode), v))
	})
}

// TypeCodeGTE applies the GTE predicate on the "typeCode" field.
func TypeCodeGTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeCode), v))
	})
}

// TypeCodeLT applies the LT predicate on the "typeCode" field.
func TypeCodeLT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeCode), v))
	})
}

// TypeCodeLTE applies the LTE predicate on the "typeCode" field.
func TypeCodeLTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeCode), v))
	})
}

// TypeCodeContains applies the Contains predicate on the "typeCode" field.
func TypeCodeContains(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTypeCode), v))
	})
}

// TypeCodeHasPrefix applies the HasPrefix predicate on the "typeCode" field.
func TypeCodeHasPrefix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTypeCode), v))
	})
}

// TypeCodeHasSuffix applies the HasSuffix predicate on the "typeCode" field.
func TypeCodeHasSuffix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTypeCode), v))
	})
}

// TypeCodeIsNil applies the IsNil predicate on the "typeCode" field.
func TypeCodeIsNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTypeCode)))
	})
}

// TypeCodeNotNil applies the NotNil predicate on the "typeCode" field.
func TypeCodeNotNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTypeCode)))
	})
}

// TypeCodeEqualFold applies the EqualFold predicate on the "typeCode" field.
func TypeCodeEqualFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTypeCode), v))
	})
}

// TypeCodeContainsFold applies the ContainsFold predicate on the "typeCode" field.
func TypeCodeContainsFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTypeCode), v))
	})
}

// GroupCodeEQ applies the EQ predicate on the "groupCode" field.
func GroupCodeEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCode), v))
	})
}

// GroupCodeNEQ applies the NEQ predicate on the "groupCode" field.
func GroupCodeNEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupCode), v))
	})
}

// GroupCodeIn applies the In predicate on the "groupCode" field.
func GroupCodeIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupCode), v...))
	})
}

// GroupCodeNotIn applies the NotIn predicate on the "groupCode" field.
func GroupCodeNotIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupCode), v...))
	})
}

// GroupCodeGT applies the GT predicate on the "groupCode" field.
func GroupCodeGT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupCode), v))
	})
}

// GroupCodeGTE applies the GTE predicate on the "groupCode" field.
func GroupCodeGTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupCode), v))
	})
}

// GroupCodeLT applies the LT predicate on the "groupCode" field.
func GroupCodeLT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupCode), v))
	})
}

// GroupCodeLTE applies the LTE predicate on the "groupCode" field.
func GroupCodeLTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupCode), v))
	})
}

// GroupCodeContains applies the Contains predicate on the "groupCode" field.
func GroupCodeContains(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupCode), v))
	})
}

// GroupCodeHasPrefix applies the HasPrefix predicate on the "groupCode" field.
func GroupCodeHasPrefix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupCode), v))
	})
}

// GroupCodeHasSuffix applies the HasSuffix predicate on the "groupCode" field.
func GroupCodeHasSuffix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupCode), v))
	})
}

// GroupCodeIsNil applies the IsNil predicate on the "groupCode" field.
func GroupCodeIsNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupCode)))
	})
}

// GroupCodeNotNil applies the NotNil predicate on the "groupCode" field.
func GroupCodeNotNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupCode)))
	})
}

// GroupCodeEqualFold applies the EqualFold predicate on the "groupCode" field.
func GroupCodeEqualFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupCode), v))
	})
}

// GroupCodeContainsFold applies the ContainsFold predicate on the "groupCode" field.
func GroupCodeContainsFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupCode), v))
	})
}

// FieldNameEQ applies the EQ predicate on the "fieldName" field.
func FieldNameEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFieldName), v))
	})
}

// FieldNameNEQ applies the NEQ predicate on the "fieldName" field.
func FieldNameNEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFieldName), v))
	})
}

// FieldNameIn applies the In predicate on the "fieldName" field.
func FieldNameIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFieldName), v...))
	})
}

// FieldNameNotIn applies the NotIn predicate on the "fieldName" field.
func FieldNameNotIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFieldName), v...))
	})
}

// FieldNameGT applies the GT predicate on the "fieldName" field.
func FieldNameGT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFieldName), v))
	})
}

// FieldNameGTE applies the GTE predicate on the "fieldName" field.
func FieldNameGTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFieldName), v))
	})
}

// FieldNameLT applies the LT predicate on the "fieldName" field.
func FieldNameLT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFieldName), v))
	})
}

// FieldNameLTE applies the LTE predicate on the "fieldName" field.
func FieldNameLTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFieldName), v))
	})
}

// FieldNameContains applies the Contains predicate on the "fieldName" field.
func FieldNameContains(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFieldName), v))
	})
}

// FieldNameHasPrefix applies the HasPrefix predicate on the "fieldName" field.
func FieldNameHasPrefix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFieldName), v))
	})
}

// FieldNameHasSuffix applies the HasSuffix predicate on the "fieldName" field.
func FieldNameHasSuffix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFieldName), v))
	})
}

// FieldNameIsNil applies the IsNil predicate on the "fieldName" field.
func FieldNameIsNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFieldName)))
	})
}

// FieldNameNotNil applies the NotNil predicate on the "fieldName" field.
func FieldNameNotNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFieldName)))
	})
}

// FieldNameEqualFold applies the EqualFold predicate on the "fieldName" field.
func FieldNameEqualFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFieldName), v))
	})
}

// FieldNameContainsFold applies the ContainsFold predicate on the "fieldName" field.
func FieldNameContainsFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFieldName), v))
	})
}

// CoverEQ applies the EQ predicate on the "cover" field.
func CoverEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCover), v))
	})
}

// CoverNEQ applies the NEQ predicate on the "cover" field.
func CoverNEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCover), v))
	})
}

// CoverIn applies the In predicate on the "cover" field.
func CoverIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCover), v...))
	})
}

// CoverNotIn applies the NotIn predicate on the "cover" field.
func CoverNotIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCover), v...))
	})
}

// CoverGT applies the GT predicate on the "cover" field.
func CoverGT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCover), v))
	})
}

// CoverGTE applies the GTE predicate on the "cover" field.
func CoverGTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCover), v))
	})
}

// CoverLT applies the LT predicate on the "cover" field.
func CoverLT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCover), v))
	})
}

// CoverLTE applies the LTE predicate on the "cover" field.
func CoverLTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCover), v))
	})
}

// CoverContains applies the Contains predicate on the "cover" field.
func CoverContains(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCover), v))
	})
}

// CoverHasPrefix applies the HasPrefix predicate on the "cover" field.
func CoverHasPrefix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCover), v))
	})
}

// CoverHasSuffix applies the HasSuffix predicate on the "cover" field.
func CoverHasSuffix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCover), v))
	})
}

// CoverIsNil applies the IsNil predicate on the "cover" field.
func CoverIsNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCover)))
	})
}

// CoverNotNil applies the NotNil predicate on the "cover" field.
func CoverNotNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCover)))
	})
}

// CoverEqualFold applies the EqualFold predicate on the "cover" field.
func CoverEqualFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCover), v))
	})
}

// CoverContainsFold applies the ContainsFold predicate on the "cover" field.
func CoverContainsFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCover), v))
	})
}

// OrderNumEQ applies the EQ predicate on the "orderNum" field.
func OrderNumEQ(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNum), v))
	})
}

// OrderNumNEQ applies the NEQ predicate on the "orderNum" field.
func OrderNumNEQ(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderNum), v))
	})
}

// OrderNumIn applies the In predicate on the "orderNum" field.
func OrderNumIn(vs ...int32) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderNum), v...))
	})
}

// OrderNumNotIn applies the NotIn predicate on the "orderNum" field.
func OrderNumNotIn(vs ...int32) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderNum), v...))
	})
}

// OrderNumGT applies the GT predicate on the "orderNum" field.
func OrderNumGT(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderNum), v))
	})
}

// OrderNumGTE applies the GTE predicate on the "orderNum" field.
func OrderNumGTE(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderNum), v))
	})
}

// OrderNumLT applies the LT predicate on the "orderNum" field.
func OrderNumLT(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderNum), v))
	})
}

// OrderNumLTE applies the LTE predicate on the "orderNum" field.
func OrderNumLTE(v int32) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderNum), v))
	})
}

// OrderNumIsNil applies the IsNil predicate on the "orderNum" field.
func OrderNumIsNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderNum)))
	})
}

// OrderNumNotNil applies the NotNil predicate on the "orderNum" field.
func OrderNumNotNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderNum)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// EffectTimeEQ applies the EQ predicate on the "effectTime" field.
func EffectTimeEQ(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeNEQ applies the NEQ predicate on the "effectTime" field.
func EffectTimeNEQ(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeIn applies the In predicate on the "effectTime" field.
func EffectTimeIn(vs ...time.Time) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeNotIn applies the NotIn predicate on the "effectTime" field.
func EffectTimeNotIn(vs ...time.Time) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeGT applies the GT predicate on the "effectTime" field.
func EffectTimeGT(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeGTE applies the GTE predicate on the "effectTime" field.
func EffectTimeGTE(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLT applies the LT predicate on the "effectTime" field.
func EffectTimeLT(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLTE applies the LTE predicate on the "effectTime" field.
func EffectTimeLTE(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEffectTime), v))
	})
}

// ExpiredTimeEQ applies the EQ predicate on the "expiredTime" field.
func ExpiredTimeEQ(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeNEQ applies the NEQ predicate on the "expiredTime" field.
func ExpiredTimeNEQ(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeIn applies the In predicate on the "expiredTime" field.
func ExpiredTimeIn(vs ...time.Time) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeNotIn applies the NotIn predicate on the "expiredTime" field.
func ExpiredTimeNotIn(vs ...time.Time) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeGT applies the GT predicate on the "expiredTime" field.
func ExpiredTimeGT(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeGTE applies the GTE predicate on the "expiredTime" field.
func ExpiredTimeGTE(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLT applies the LT predicate on the "expiredTime" field.
func ExpiredTimeLT(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLTE applies the LTE predicate on the "expiredTime" field.
func ExpiredTimeLTE(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiredTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.CustomerNovels {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CustomerNovels(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomerNovels) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerNovels) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerNovels) predicate.CustomerNovels {
	return predicate.CustomerNovels(func(s *sql.Selector) {
		p(s.Not())
	})
}
