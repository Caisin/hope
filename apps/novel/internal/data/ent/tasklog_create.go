// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/tasklog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskLogCreate is the builder for creating a TaskLog entity.
type TaskLogCreate struct {
	config
	mutation *TaskLogMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (tlc *TaskLogCreate) SetUserId(i int64) *TaskLogCreate {
	tlc.mutation.SetUserId(i)
	return tlc
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableUserId(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetUserId(*i)
	}
	return tlc
}

// SetTaskGroup sets the "taskGroup" field.
func (tlc *TaskLogCreate) SetTaskGroup(s string) *TaskLogCreate {
	tlc.mutation.SetTaskGroup(s)
	return tlc
}

// SetNillableTaskGroup sets the "taskGroup" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableTaskGroup(s *string) *TaskLogCreate {
	if s != nil {
		tlc.SetTaskGroup(*s)
	}
	return tlc
}

// SetTaskCode sets the "taskCode" field.
func (tlc *TaskLogCreate) SetTaskCode(s string) *TaskLogCreate {
	tlc.mutation.SetTaskCode(s)
	return tlc
}

// SetNillableTaskCode sets the "taskCode" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableTaskCode(s *string) *TaskLogCreate {
	if s != nil {
		tlc.SetTaskCode(*s)
	}
	return tlc
}

// SetTaskId sets the "taskId" field.
func (tlc *TaskLogCreate) SetTaskId(i int64) *TaskLogCreate {
	tlc.mutation.SetTaskId(i)
	return tlc
}

// SetNillableTaskId sets the "taskId" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableTaskId(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetTaskId(*i)
	}
	return tlc
}

// SetTaskName sets the "taskName" field.
func (tlc *TaskLogCreate) SetTaskName(s string) *TaskLogCreate {
	tlc.mutation.SetTaskName(s)
	return tlc
}

// SetNillableTaskName sets the "taskName" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableTaskName(s *string) *TaskLogCreate {
	if s != nil {
		tlc.SetTaskName(*s)
	}
	return tlc
}

// SetAmount sets the "amount" field.
func (tlc *TaskLogCreate) SetAmount(i int64) *TaskLogCreate {
	tlc.mutation.SetAmount(i)
	return tlc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableAmount(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetAmount(*i)
	}
	return tlc
}

// SetReward sets the "reward" field.
func (tlc *TaskLogCreate) SetReward(i int64) *TaskLogCreate {
	tlc.mutation.SetReward(i)
	return tlc
}

// SetNillableReward sets the "reward" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableReward(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetReward(*i)
	}
	return tlc
}

// SetAmountItem sets the "amountItem" field.
func (tlc *TaskLogCreate) SetAmountItem(i int32) *TaskLogCreate {
	tlc.mutation.SetAmountItem(i)
	return tlc
}

// SetNillableAmountItem sets the "amountItem" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableAmountItem(i *int32) *TaskLogCreate {
	if i != nil {
		tlc.SetAmountItem(*i)
	}
	return tlc
}

// SetRewardItem sets the "rewardItem" field.
func (tlc *TaskLogCreate) SetRewardItem(i int32) *TaskLogCreate {
	tlc.mutation.SetRewardItem(i)
	return tlc
}

// SetNillableRewardItem sets the "rewardItem" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableRewardItem(i *int32) *TaskLogCreate {
	if i != nil {
		tlc.SetRewardItem(*i)
	}
	return tlc
}

// SetTargetAmount sets the "targetAmount" field.
func (tlc *TaskLogCreate) SetTargetAmount(i int64) *TaskLogCreate {
	tlc.mutation.SetTargetAmount(i)
	return tlc
}

// SetNillableTargetAmount sets the "targetAmount" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableTargetAmount(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetTargetAmount(*i)
	}
	return tlc
}

// SetDoneAmount sets the "doneAmount" field.
func (tlc *TaskLogCreate) SetDoneAmount(i int64) *TaskLogCreate {
	tlc.mutation.SetDoneAmount(i)
	return tlc
}

// SetNillableDoneAmount sets the "doneAmount" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableDoneAmount(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetDoneAmount(*i)
	}
	return tlc
}

// SetState sets the "state" field.
func (tlc *TaskLogCreate) SetState(i int64) *TaskLogCreate {
	tlc.mutation.SetState(i)
	return tlc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableState(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetState(*i)
	}
	return tlc
}

// SetDoneAt sets the "doneAt" field.
func (tlc *TaskLogCreate) SetDoneAt(t time.Time) *TaskLogCreate {
	tlc.mutation.SetDoneAt(t)
	return tlc
}

// SetNillableDoneAt sets the "doneAt" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableDoneAt(t *time.Time) *TaskLogCreate {
	if t != nil {
		tlc.SetDoneAt(*t)
	}
	return tlc
}

// SetObtainAt sets the "obtainAt" field.
func (tlc *TaskLogCreate) SetObtainAt(t time.Time) *TaskLogCreate {
	tlc.mutation.SetObtainAt(t)
	return tlc
}

// SetNillableObtainAt sets the "obtainAt" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableObtainAt(t *time.Time) *TaskLogCreate {
	if t != nil {
		tlc.SetObtainAt(*t)
	}
	return tlc
}

// SetDoneTimes sets the "doneTimes" field.
func (tlc *TaskLogCreate) SetDoneTimes(i int32) *TaskLogCreate {
	tlc.mutation.SetDoneTimes(i)
	return tlc
}

// SetNillableDoneTimes sets the "doneTimes" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableDoneTimes(i *int32) *TaskLogCreate {
	if i != nil {
		tlc.SetDoneTimes(*i)
	}
	return tlc
}

// SetAllTimes sets the "allTimes" field.
func (tlc *TaskLogCreate) SetAllTimes(i int32) *TaskLogCreate {
	tlc.mutation.SetAllTimes(i)
	return tlc
}

// SetNillableAllTimes sets the "allTimes" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableAllTimes(i *int32) *TaskLogCreate {
	if i != nil {
		tlc.SetAllTimes(*i)
	}
	return tlc
}

// SetEffectTime sets the "effectTime" field.
func (tlc *TaskLogCreate) SetEffectTime(t time.Time) *TaskLogCreate {
	tlc.mutation.SetEffectTime(t)
	return tlc
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableEffectTime(t *time.Time) *TaskLogCreate {
	if t != nil {
		tlc.SetEffectTime(*t)
	}
	return tlc
}

// SetExpiredTime sets the "expiredTime" field.
func (tlc *TaskLogCreate) SetExpiredTime(t time.Time) *TaskLogCreate {
	tlc.mutation.SetExpiredTime(t)
	return tlc
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableExpiredTime(t *time.Time) *TaskLogCreate {
	if t != nil {
		tlc.SetExpiredTime(*t)
	}
	return tlc
}

// SetCreatedAt sets the "createdAt" field.
func (tlc *TaskLogCreate) SetCreatedAt(t time.Time) *TaskLogCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableCreatedAt(t *time.Time) *TaskLogCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// SetUpdatedAt sets the "updatedAt" field.
func (tlc *TaskLogCreate) SetUpdatedAt(t time.Time) *TaskLogCreate {
	tlc.mutation.SetUpdatedAt(t)
	return tlc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableUpdatedAt(t *time.Time) *TaskLogCreate {
	if t != nil {
		tlc.SetUpdatedAt(*t)
	}
	return tlc
}

// SetCreateBy sets the "createBy" field.
func (tlc *TaskLogCreate) SetCreateBy(i int64) *TaskLogCreate {
	tlc.mutation.SetCreateBy(i)
	return tlc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableCreateBy(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetCreateBy(*i)
	}
	return tlc
}

// SetUpdateBy sets the "updateBy" field.
func (tlc *TaskLogCreate) SetUpdateBy(i int64) *TaskLogCreate {
	tlc.mutation.SetUpdateBy(i)
	return tlc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableUpdateBy(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetUpdateBy(*i)
	}
	return tlc
}

// SetTenantId sets the "tenantId" field.
func (tlc *TaskLogCreate) SetTenantId(i int64) *TaskLogCreate {
	tlc.mutation.SetTenantId(i)
	return tlc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableTenantId(i *int64) *TaskLogCreate {
	if i != nil {
		tlc.SetTenantId(*i)
	}
	return tlc
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (tlc *TaskLogCreate) SetUserID(id int64) *TaskLogCreate {
	tlc.mutation.SetUserID(id)
	return tlc
}

// SetNillableUserID sets the "user" edge to the SocialUser entity by ID if the given value is not nil.
func (tlc *TaskLogCreate) SetNillableUserID(id *int64) *TaskLogCreate {
	if id != nil {
		tlc = tlc.SetUserID(*id)
	}
	return tlc
}

// SetUser sets the "user" edge to the SocialUser entity.
func (tlc *TaskLogCreate) SetUser(s *SocialUser) *TaskLogCreate {
	return tlc.SetUserID(s.ID)
}

// Mutation returns the TaskLogMutation object of the builder.
func (tlc *TaskLogCreate) Mutation() *TaskLogMutation {
	return tlc.mutation
}

// Save creates the TaskLog in the database.
func (tlc *TaskLogCreate) Save(ctx context.Context) (*TaskLog, error) {
	var (
		err  error
		node *TaskLog
	)
	tlc.defaults()
	if len(tlc.hooks) == 0 {
		if err = tlc.check(); err != nil {
			return nil, err
		}
		node, err = tlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tlc.check(); err != nil {
				return nil, err
			}
			tlc.mutation = mutation
			if node, err = tlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tlc.hooks) - 1; i >= 0; i-- {
			if tlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TaskLogCreate) SaveX(ctx context.Context) *TaskLog {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TaskLogCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TaskLogCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TaskLogCreate) defaults() {
	if _, ok := tlc.mutation.EffectTime(); !ok {
		v := tasklog.DefaultEffectTime()
		tlc.mutation.SetEffectTime(v)
	}
	if _, ok := tlc.mutation.ExpiredTime(); !ok {
		v := tasklog.DefaultExpiredTime()
		tlc.mutation.SetExpiredTime(v)
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		v := tasklog.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		v := tasklog.DefaultUpdatedAt()
		tlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tlc.mutation.CreateBy(); !ok {
		v := tasklog.DefaultCreateBy
		tlc.mutation.SetCreateBy(v)
	}
	if _, ok := tlc.mutation.UpdateBy(); !ok {
		v := tasklog.DefaultUpdateBy
		tlc.mutation.SetUpdateBy(v)
	}
	if _, ok := tlc.mutation.TenantId(); !ok {
		v := tasklog.DefaultTenantId
		tlc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TaskLogCreate) check() error {
	if _, ok := tlc.mutation.EffectTime(); !ok {
		return &ValidationError{Name: "effectTime", err: errors.New(`ent: missing required field "effectTime"`)}
	}
	if _, ok := tlc.mutation.ExpiredTime(); !ok {
		return &ValidationError{Name: "expiredTime", err: errors.New(`ent: missing required field "expiredTime"`)}
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := tlc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := tlc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := tlc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (tlc *TaskLogCreate) sqlSave(ctx context.Context) (*TaskLog, error) {
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (tlc *TaskLogCreate) createSpec() (*TaskLog, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskLog{config: tlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tasklog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tasklog.FieldID,
			},
		}
	)
	if value, ok := tlc.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldUserId,
		})
		_node.UserId = value
	}
	if value, ok := tlc.mutation.TaskGroup(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklog.FieldTaskGroup,
		})
		_node.TaskGroup = value
	}
	if value, ok := tlc.mutation.TaskCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklog.FieldTaskCode,
		})
		_node.TaskCode = value
	}
	if value, ok := tlc.mutation.TaskId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTaskId,
		})
		_node.TaskId = value
	}
	if value, ok := tlc.mutation.TaskName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklog.FieldTaskName,
		})
		_node.TaskName = value
	}
	if value, ok := tlc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := tlc.mutation.Reward(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldReward,
		})
		_node.Reward = value
	}
	if value, ok := tlc.mutation.AmountItem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAmountItem,
		})
		_node.AmountItem = value
	}
	if value, ok := tlc.mutation.RewardItem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldRewardItem,
		})
		_node.RewardItem = value
	}
	if value, ok := tlc.mutation.TargetAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTargetAmount,
		})
		_node.TargetAmount = value
	}
	if value, ok := tlc.mutation.DoneAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldDoneAmount,
		})
		_node.DoneAmount = value
	}
	if value, ok := tlc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldState,
		})
		_node.State = value
	}
	if value, ok := tlc.mutation.DoneAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldDoneAt,
		})
		_node.DoneAt = value
	}
	if value, ok := tlc.mutation.ObtainAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldObtainAt,
		})
		_node.ObtainAt = value
	}
	if value, ok := tlc.mutation.DoneTimes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldDoneTimes,
		})
		_node.DoneTimes = value
	}
	if value, ok := tlc.mutation.AllTimes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAllTimes,
		})
		_node.AllTimes = value
	}
	if value, ok := tlc.mutation.EffectTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldEffectTime,
		})
		_node.EffectTime = value
	}
	if value, ok := tlc.mutation.ExpiredTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldExpiredTime,
		})
		_node.ExpiredTime = value
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tlc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tlc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := tlc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := tlc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := tlc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.UserTable,
			Columns: []string{tasklog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.social_user_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskLogCreateBulk is the builder for creating many TaskLog entities in bulk.
type TaskLogCreateBulk struct {
	config
	builders []*TaskLogCreate
}

// Save creates the TaskLog entities in the database.
func (tlcb *TaskLogCreateBulk) Save(ctx context.Context) ([]*TaskLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TaskLog, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TaskLogCreateBulk) SaveX(ctx context.Context) []*TaskLog {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TaskLogCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TaskLogCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
