// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/ambalance"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AmBalanceUpdate is the builder for updating AmBalance entities.
type AmBalanceUpdate struct {
	config
	hooks    []Hook
	mutation *AmBalanceMutation
}

// Where appends a list predicates to the AmBalanceUpdate builder.
func (abu *AmBalanceUpdate) Where(ps ...predicate.AmBalance) *AmBalanceUpdate {
	abu.mutation.Where(ps...)
	return abu
}

// SetOrderId sets the "orderId" field.
func (abu *AmBalanceUpdate) SetOrderId(s string) *AmBalanceUpdate {
	abu.mutation.SetOrderId(s)
	return abu
}

// SetNillableOrderId sets the "orderId" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableOrderId(s *string) *AmBalanceUpdate {
	if s != nil {
		abu.SetOrderId(*s)
	}
	return abu
}

// ClearOrderId clears the value of the "orderId" field.
func (abu *AmBalanceUpdate) ClearOrderId() *AmBalanceUpdate {
	abu.mutation.ClearOrderId()
	return abu
}

// SetEventId sets the "eventId" field.
func (abu *AmBalanceUpdate) SetEventId(i int64) *AmBalanceUpdate {
	abu.mutation.ResetEventId()
	abu.mutation.SetEventId(i)
	return abu
}

// SetNillableEventId sets the "eventId" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableEventId(i *int64) *AmBalanceUpdate {
	if i != nil {
		abu.SetEventId(*i)
	}
	return abu
}

// AddEventId adds i to the "eventId" field.
func (abu *AmBalanceUpdate) AddEventId(i int64) *AmBalanceUpdate {
	abu.mutation.AddEventId(i)
	return abu
}

// ClearEventId clears the value of the "eventId" field.
func (abu *AmBalanceUpdate) ClearEventId() *AmBalanceUpdate {
	abu.mutation.ClearEventId()
	return abu
}

// SetCashTag sets the "cashTag" field.
func (abu *AmBalanceUpdate) SetCashTag(i int32) *AmBalanceUpdate {
	abu.mutation.ResetCashTag()
	abu.mutation.SetCashTag(i)
	return abu
}

// SetNillableCashTag sets the "cashTag" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableCashTag(i *int32) *AmBalanceUpdate {
	if i != nil {
		abu.SetCashTag(*i)
	}
	return abu
}

// AddCashTag adds i to the "cashTag" field.
func (abu *AmBalanceUpdate) AddCashTag(i int32) *AmBalanceUpdate {
	abu.mutation.AddCashTag(i)
	return abu
}

// ClearCashTag clears the value of the "cashTag" field.
func (abu *AmBalanceUpdate) ClearCashTag() *AmBalanceUpdate {
	abu.mutation.ClearCashTag()
	return abu
}

// SetAssetItemId sets the "assetItemId" field.
func (abu *AmBalanceUpdate) SetAssetItemId(i int32) *AmBalanceUpdate {
	abu.mutation.ResetAssetItemId()
	abu.mutation.SetAssetItemId(i)
	return abu
}

// SetNillableAssetItemId sets the "assetItemId" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableAssetItemId(i *int32) *AmBalanceUpdate {
	if i != nil {
		abu.SetAssetItemId(*i)
	}
	return abu
}

// AddAssetItemId adds i to the "assetItemId" field.
func (abu *AmBalanceUpdate) AddAssetItemId(i int32) *AmBalanceUpdate {
	abu.mutation.AddAssetItemId(i)
	return abu
}

// ClearAssetItemId clears the value of the "assetItemId" field.
func (abu *AmBalanceUpdate) ClearAssetItemId() *AmBalanceUpdate {
	abu.mutation.ClearAssetItemId()
	return abu
}

// SetAmount sets the "amount" field.
func (abu *AmBalanceUpdate) SetAmount(i int64) *AmBalanceUpdate {
	abu.mutation.ResetAmount()
	abu.mutation.SetAmount(i)
	return abu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableAmount(i *int64) *AmBalanceUpdate {
	if i != nil {
		abu.SetAmount(*i)
	}
	return abu
}

// AddAmount adds i to the "amount" field.
func (abu *AmBalanceUpdate) AddAmount(i int64) *AmBalanceUpdate {
	abu.mutation.AddAmount(i)
	return abu
}

// ClearAmount clears the value of the "amount" field.
func (abu *AmBalanceUpdate) ClearAmount() *AmBalanceUpdate {
	abu.mutation.ClearAmount()
	return abu
}

// SetBalance sets the "balance" field.
func (abu *AmBalanceUpdate) SetBalance(i int64) *AmBalanceUpdate {
	abu.mutation.ResetBalance()
	abu.mutation.SetBalance(i)
	return abu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableBalance(i *int64) *AmBalanceUpdate {
	if i != nil {
		abu.SetBalance(*i)
	}
	return abu
}

// AddBalance adds i to the "balance" field.
func (abu *AmBalanceUpdate) AddBalance(i int64) *AmBalanceUpdate {
	abu.mutation.AddBalance(i)
	return abu
}

// ClearBalance clears the value of the "balance" field.
func (abu *AmBalanceUpdate) ClearBalance() *AmBalanceUpdate {
	abu.mutation.ClearBalance()
	return abu
}

// SetRemark sets the "remark" field.
func (abu *AmBalanceUpdate) SetRemark(s string) *AmBalanceUpdate {
	abu.mutation.SetRemark(s)
	return abu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableRemark(s *string) *AmBalanceUpdate {
	if s != nil {
		abu.SetRemark(*s)
	}
	return abu
}

// ClearRemark clears the value of the "remark" field.
func (abu *AmBalanceUpdate) ClearRemark() *AmBalanceUpdate {
	abu.mutation.ClearRemark()
	return abu
}

// SetEffectTime sets the "effectTime" field.
func (abu *AmBalanceUpdate) SetEffectTime(t time.Time) *AmBalanceUpdate {
	abu.mutation.SetEffectTime(t)
	return abu
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableEffectTime(t *time.Time) *AmBalanceUpdate {
	if t != nil {
		abu.SetEffectTime(*t)
	}
	return abu
}

// SetExpiredTime sets the "expiredTime" field.
func (abu *AmBalanceUpdate) SetExpiredTime(t time.Time) *AmBalanceUpdate {
	abu.mutation.SetExpiredTime(t)
	return abu
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableExpiredTime(t *time.Time) *AmBalanceUpdate {
	if t != nil {
		abu.SetExpiredTime(*t)
	}
	return abu
}

// SetUpdatedAt sets the "updatedAt" field.
func (abu *AmBalanceUpdate) SetUpdatedAt(t time.Time) *AmBalanceUpdate {
	abu.mutation.SetUpdatedAt(t)
	return abu
}

// SetCreateBy sets the "createBy" field.
func (abu *AmBalanceUpdate) SetCreateBy(i int64) *AmBalanceUpdate {
	abu.mutation.ResetCreateBy()
	abu.mutation.SetCreateBy(i)
	return abu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableCreateBy(i *int64) *AmBalanceUpdate {
	if i != nil {
		abu.SetCreateBy(*i)
	}
	return abu
}

// AddCreateBy adds i to the "createBy" field.
func (abu *AmBalanceUpdate) AddCreateBy(i int64) *AmBalanceUpdate {
	abu.mutation.AddCreateBy(i)
	return abu
}

// SetUpdateBy sets the "updateBy" field.
func (abu *AmBalanceUpdate) SetUpdateBy(i int64) *AmBalanceUpdate {
	abu.mutation.ResetUpdateBy()
	abu.mutation.SetUpdateBy(i)
	return abu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableUpdateBy(i *int64) *AmBalanceUpdate {
	if i != nil {
		abu.SetUpdateBy(*i)
	}
	return abu
}

// AddUpdateBy adds i to the "updateBy" field.
func (abu *AmBalanceUpdate) AddUpdateBy(i int64) *AmBalanceUpdate {
	abu.mutation.AddUpdateBy(i)
	return abu
}

// SetTenantId sets the "tenantId" field.
func (abu *AmBalanceUpdate) SetTenantId(i int64) *AmBalanceUpdate {
	abu.mutation.ResetTenantId()
	abu.mutation.SetTenantId(i)
	return abu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableTenantId(i *int64) *AmBalanceUpdate {
	if i != nil {
		abu.SetTenantId(*i)
	}
	return abu
}

// AddTenantId adds i to the "tenantId" field.
func (abu *AmBalanceUpdate) AddTenantId(i int64) *AmBalanceUpdate {
	abu.mutation.AddTenantId(i)
	return abu
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (abu *AmBalanceUpdate) SetUserID(id int64) *AmBalanceUpdate {
	abu.mutation.SetUserID(id)
	return abu
}

// SetNillableUserID sets the "user" edge to the SocialUser entity by ID if the given value is not nil.
func (abu *AmBalanceUpdate) SetNillableUserID(id *int64) *AmBalanceUpdate {
	if id != nil {
		abu = abu.SetUserID(*id)
	}
	return abu
}

// SetUser sets the "user" edge to the SocialUser entity.
func (abu *AmBalanceUpdate) SetUser(s *SocialUser) *AmBalanceUpdate {
	return abu.SetUserID(s.ID)
}

// Mutation returns the AmBalanceMutation object of the builder.
func (abu *AmBalanceUpdate) Mutation() *AmBalanceMutation {
	return abu.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (abu *AmBalanceUpdate) ClearUser() *AmBalanceUpdate {
	abu.mutation.ClearUser()
	return abu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (abu *AmBalanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	abu.defaults()
	if len(abu.hooks) == 0 {
		affected, err = abu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AmBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			abu.mutation = mutation
			affected, err = abu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(abu.hooks) - 1; i >= 0; i-- {
			if abu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = abu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, abu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (abu *AmBalanceUpdate) SaveX(ctx context.Context) int {
	affected, err := abu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (abu *AmBalanceUpdate) Exec(ctx context.Context) error {
	_, err := abu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abu *AmBalanceUpdate) ExecX(ctx context.Context) {
	if err := abu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (abu *AmBalanceUpdate) defaults() {
	if _, ok := abu.mutation.UpdatedAt(); !ok {
		v := ambalance.UpdateDefaultUpdatedAt()
		abu.mutation.SetUpdatedAt(v)
	}
}

func (abu *AmBalanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ambalance.Table,
			Columns: ambalance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ambalance.FieldID,
			},
		},
	}
	if ps := abu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abu.mutation.OrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ambalance.FieldOrderId,
		})
	}
	if abu.mutation.OrderIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ambalance.FieldOrderId,
		})
	}
	if value, ok := abu.mutation.EventId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldEventId,
		})
	}
	if value, ok := abu.mutation.AddedEventId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldEventId,
		})
	}
	if abu.mutation.EventIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: ambalance.FieldEventId,
		})
	}
	if value, ok := abu.mutation.CashTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldCashTag,
		})
	}
	if value, ok := abu.mutation.AddedCashTag(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldCashTag,
		})
	}
	if abu.mutation.CashTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: ambalance.FieldCashTag,
		})
	}
	if value, ok := abu.mutation.AssetItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldAssetItemId,
		})
	}
	if value, ok := abu.mutation.AddedAssetItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldAssetItemId,
		})
	}
	if abu.mutation.AssetItemIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: ambalance.FieldAssetItemId,
		})
	}
	if value, ok := abu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldAmount,
		})
	}
	if value, ok := abu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldAmount,
		})
	}
	if abu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: ambalance.FieldAmount,
		})
	}
	if value, ok := abu.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldBalance,
		})
	}
	if value, ok := abu.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldBalance,
		})
	}
	if abu.mutation.BalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: ambalance.FieldBalance,
		})
	}
	if value, ok := abu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ambalance.FieldRemark,
		})
	}
	if abu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ambalance.FieldRemark,
		})
	}
	if value, ok := abu.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldEffectTime,
		})
	}
	if value, ok := abu.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldExpiredTime,
		})
	}
	if value, ok := abu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldUpdatedAt,
		})
	}
	if value, ok := abu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldCreateBy,
		})
	}
	if value, ok := abu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldCreateBy,
		})
	}
	if value, ok := abu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldUpdateBy,
		})
	}
	if value, ok := abu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldUpdateBy,
		})
	}
	if value, ok := abu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldTenantId,
		})
	}
	if value, ok := abu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldTenantId,
		})
	}
	if abu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ambalance.UserTable,
			Columns: []string{ambalance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ambalance.UserTable,
			Columns: []string{ambalance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, abu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ambalance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AmBalanceUpdateOne is the builder for updating a single AmBalance entity.
type AmBalanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AmBalanceMutation
}

// SetOrderId sets the "orderId" field.
func (abuo *AmBalanceUpdateOne) SetOrderId(s string) *AmBalanceUpdateOne {
	abuo.mutation.SetOrderId(s)
	return abuo
}

// SetNillableOrderId sets the "orderId" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableOrderId(s *string) *AmBalanceUpdateOne {
	if s != nil {
		abuo.SetOrderId(*s)
	}
	return abuo
}

// ClearOrderId clears the value of the "orderId" field.
func (abuo *AmBalanceUpdateOne) ClearOrderId() *AmBalanceUpdateOne {
	abuo.mutation.ClearOrderId()
	return abuo
}

// SetEventId sets the "eventId" field.
func (abuo *AmBalanceUpdateOne) SetEventId(i int64) *AmBalanceUpdateOne {
	abuo.mutation.ResetEventId()
	abuo.mutation.SetEventId(i)
	return abuo
}

// SetNillableEventId sets the "eventId" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableEventId(i *int64) *AmBalanceUpdateOne {
	if i != nil {
		abuo.SetEventId(*i)
	}
	return abuo
}

// AddEventId adds i to the "eventId" field.
func (abuo *AmBalanceUpdateOne) AddEventId(i int64) *AmBalanceUpdateOne {
	abuo.mutation.AddEventId(i)
	return abuo
}

// ClearEventId clears the value of the "eventId" field.
func (abuo *AmBalanceUpdateOne) ClearEventId() *AmBalanceUpdateOne {
	abuo.mutation.ClearEventId()
	return abuo
}

// SetCashTag sets the "cashTag" field.
func (abuo *AmBalanceUpdateOne) SetCashTag(i int32) *AmBalanceUpdateOne {
	abuo.mutation.ResetCashTag()
	abuo.mutation.SetCashTag(i)
	return abuo
}

// SetNillableCashTag sets the "cashTag" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableCashTag(i *int32) *AmBalanceUpdateOne {
	if i != nil {
		abuo.SetCashTag(*i)
	}
	return abuo
}

// AddCashTag adds i to the "cashTag" field.
func (abuo *AmBalanceUpdateOne) AddCashTag(i int32) *AmBalanceUpdateOne {
	abuo.mutation.AddCashTag(i)
	return abuo
}

// ClearCashTag clears the value of the "cashTag" field.
func (abuo *AmBalanceUpdateOne) ClearCashTag() *AmBalanceUpdateOne {
	abuo.mutation.ClearCashTag()
	return abuo
}

// SetAssetItemId sets the "assetItemId" field.
func (abuo *AmBalanceUpdateOne) SetAssetItemId(i int32) *AmBalanceUpdateOne {
	abuo.mutation.ResetAssetItemId()
	abuo.mutation.SetAssetItemId(i)
	return abuo
}

// SetNillableAssetItemId sets the "assetItemId" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableAssetItemId(i *int32) *AmBalanceUpdateOne {
	if i != nil {
		abuo.SetAssetItemId(*i)
	}
	return abuo
}

// AddAssetItemId adds i to the "assetItemId" field.
func (abuo *AmBalanceUpdateOne) AddAssetItemId(i int32) *AmBalanceUpdateOne {
	abuo.mutation.AddAssetItemId(i)
	return abuo
}

// ClearAssetItemId clears the value of the "assetItemId" field.
func (abuo *AmBalanceUpdateOne) ClearAssetItemId() *AmBalanceUpdateOne {
	abuo.mutation.ClearAssetItemId()
	return abuo
}

// SetAmount sets the "amount" field.
func (abuo *AmBalanceUpdateOne) SetAmount(i int64) *AmBalanceUpdateOne {
	abuo.mutation.ResetAmount()
	abuo.mutation.SetAmount(i)
	return abuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableAmount(i *int64) *AmBalanceUpdateOne {
	if i != nil {
		abuo.SetAmount(*i)
	}
	return abuo
}

// AddAmount adds i to the "amount" field.
func (abuo *AmBalanceUpdateOne) AddAmount(i int64) *AmBalanceUpdateOne {
	abuo.mutation.AddAmount(i)
	return abuo
}

// ClearAmount clears the value of the "amount" field.
func (abuo *AmBalanceUpdateOne) ClearAmount() *AmBalanceUpdateOne {
	abuo.mutation.ClearAmount()
	return abuo
}

// SetBalance sets the "balance" field.
func (abuo *AmBalanceUpdateOne) SetBalance(i int64) *AmBalanceUpdateOne {
	abuo.mutation.ResetBalance()
	abuo.mutation.SetBalance(i)
	return abuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableBalance(i *int64) *AmBalanceUpdateOne {
	if i != nil {
		abuo.SetBalance(*i)
	}
	return abuo
}

// AddBalance adds i to the "balance" field.
func (abuo *AmBalanceUpdateOne) AddBalance(i int64) *AmBalanceUpdateOne {
	abuo.mutation.AddBalance(i)
	return abuo
}

// ClearBalance clears the value of the "balance" field.
func (abuo *AmBalanceUpdateOne) ClearBalance() *AmBalanceUpdateOne {
	abuo.mutation.ClearBalance()
	return abuo
}

// SetRemark sets the "remark" field.
func (abuo *AmBalanceUpdateOne) SetRemark(s string) *AmBalanceUpdateOne {
	abuo.mutation.SetRemark(s)
	return abuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableRemark(s *string) *AmBalanceUpdateOne {
	if s != nil {
		abuo.SetRemark(*s)
	}
	return abuo
}

// ClearRemark clears the value of the "remark" field.
func (abuo *AmBalanceUpdateOne) ClearRemark() *AmBalanceUpdateOne {
	abuo.mutation.ClearRemark()
	return abuo
}

// SetEffectTime sets the "effectTime" field.
func (abuo *AmBalanceUpdateOne) SetEffectTime(t time.Time) *AmBalanceUpdateOne {
	abuo.mutation.SetEffectTime(t)
	return abuo
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableEffectTime(t *time.Time) *AmBalanceUpdateOne {
	if t != nil {
		abuo.SetEffectTime(*t)
	}
	return abuo
}

// SetExpiredTime sets the "expiredTime" field.
func (abuo *AmBalanceUpdateOne) SetExpiredTime(t time.Time) *AmBalanceUpdateOne {
	abuo.mutation.SetExpiredTime(t)
	return abuo
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableExpiredTime(t *time.Time) *AmBalanceUpdateOne {
	if t != nil {
		abuo.SetExpiredTime(*t)
	}
	return abuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (abuo *AmBalanceUpdateOne) SetUpdatedAt(t time.Time) *AmBalanceUpdateOne {
	abuo.mutation.SetUpdatedAt(t)
	return abuo
}

// SetCreateBy sets the "createBy" field.
func (abuo *AmBalanceUpdateOne) SetCreateBy(i int64) *AmBalanceUpdateOne {
	abuo.mutation.ResetCreateBy()
	abuo.mutation.SetCreateBy(i)
	return abuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableCreateBy(i *int64) *AmBalanceUpdateOne {
	if i != nil {
		abuo.SetCreateBy(*i)
	}
	return abuo
}

// AddCreateBy adds i to the "createBy" field.
func (abuo *AmBalanceUpdateOne) AddCreateBy(i int64) *AmBalanceUpdateOne {
	abuo.mutation.AddCreateBy(i)
	return abuo
}

// SetUpdateBy sets the "updateBy" field.
func (abuo *AmBalanceUpdateOne) SetUpdateBy(i int64) *AmBalanceUpdateOne {
	abuo.mutation.ResetUpdateBy()
	abuo.mutation.SetUpdateBy(i)
	return abuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableUpdateBy(i *int64) *AmBalanceUpdateOne {
	if i != nil {
		abuo.SetUpdateBy(*i)
	}
	return abuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (abuo *AmBalanceUpdateOne) AddUpdateBy(i int64) *AmBalanceUpdateOne {
	abuo.mutation.AddUpdateBy(i)
	return abuo
}

// SetTenantId sets the "tenantId" field.
func (abuo *AmBalanceUpdateOne) SetTenantId(i int64) *AmBalanceUpdateOne {
	abuo.mutation.ResetTenantId()
	abuo.mutation.SetTenantId(i)
	return abuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableTenantId(i *int64) *AmBalanceUpdateOne {
	if i != nil {
		abuo.SetTenantId(*i)
	}
	return abuo
}

// AddTenantId adds i to the "tenantId" field.
func (abuo *AmBalanceUpdateOne) AddTenantId(i int64) *AmBalanceUpdateOne {
	abuo.mutation.AddTenantId(i)
	return abuo
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (abuo *AmBalanceUpdateOne) SetUserID(id int64) *AmBalanceUpdateOne {
	abuo.mutation.SetUserID(id)
	return abuo
}

// SetNillableUserID sets the "user" edge to the SocialUser entity by ID if the given value is not nil.
func (abuo *AmBalanceUpdateOne) SetNillableUserID(id *int64) *AmBalanceUpdateOne {
	if id != nil {
		abuo = abuo.SetUserID(*id)
	}
	return abuo
}

// SetUser sets the "user" edge to the SocialUser entity.
func (abuo *AmBalanceUpdateOne) SetUser(s *SocialUser) *AmBalanceUpdateOne {
	return abuo.SetUserID(s.ID)
}

// Mutation returns the AmBalanceMutation object of the builder.
func (abuo *AmBalanceUpdateOne) Mutation() *AmBalanceMutation {
	return abuo.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (abuo *AmBalanceUpdateOne) ClearUser() *AmBalanceUpdateOne {
	abuo.mutation.ClearUser()
	return abuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (abuo *AmBalanceUpdateOne) Select(field string, fields ...string) *AmBalanceUpdateOne {
	abuo.fields = append([]string{field}, fields...)
	return abuo
}

// Save executes the query and returns the updated AmBalance entity.
func (abuo *AmBalanceUpdateOne) Save(ctx context.Context) (*AmBalance, error) {
	var (
		err  error
		node *AmBalance
	)
	abuo.defaults()
	if len(abuo.hooks) == 0 {
		node, err = abuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AmBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			abuo.mutation = mutation
			node, err = abuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(abuo.hooks) - 1; i >= 0; i-- {
			if abuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = abuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, abuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (abuo *AmBalanceUpdateOne) SaveX(ctx context.Context) *AmBalance {
	node, err := abuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (abuo *AmBalanceUpdateOne) Exec(ctx context.Context) error {
	_, err := abuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abuo *AmBalanceUpdateOne) ExecX(ctx context.Context) {
	if err := abuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (abuo *AmBalanceUpdateOne) defaults() {
	if _, ok := abuo.mutation.UpdatedAt(); !ok {
		v := ambalance.UpdateDefaultUpdatedAt()
		abuo.mutation.SetUpdatedAt(v)
	}
}

func (abuo *AmBalanceUpdateOne) sqlSave(ctx context.Context) (_node *AmBalance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ambalance.Table,
			Columns: ambalance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ambalance.FieldID,
			},
		},
	}
	id, ok := abuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AmBalance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := abuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ambalance.FieldID)
		for _, f := range fields {
			if !ambalance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ambalance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := abuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abuo.mutation.OrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ambalance.FieldOrderId,
		})
	}
	if abuo.mutation.OrderIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ambalance.FieldOrderId,
		})
	}
	if value, ok := abuo.mutation.EventId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldEventId,
		})
	}
	if value, ok := abuo.mutation.AddedEventId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldEventId,
		})
	}
	if abuo.mutation.EventIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: ambalance.FieldEventId,
		})
	}
	if value, ok := abuo.mutation.CashTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldCashTag,
		})
	}
	if value, ok := abuo.mutation.AddedCashTag(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldCashTag,
		})
	}
	if abuo.mutation.CashTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: ambalance.FieldCashTag,
		})
	}
	if value, ok := abuo.mutation.AssetItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldAssetItemId,
		})
	}
	if value, ok := abuo.mutation.AddedAssetItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldAssetItemId,
		})
	}
	if abuo.mutation.AssetItemIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: ambalance.FieldAssetItemId,
		})
	}
	if value, ok := abuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldAmount,
		})
	}
	if value, ok := abuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldAmount,
		})
	}
	if abuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: ambalance.FieldAmount,
		})
	}
	if value, ok := abuo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldBalance,
		})
	}
	if value, ok := abuo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldBalance,
		})
	}
	if abuo.mutation.BalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: ambalance.FieldBalance,
		})
	}
	if value, ok := abuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ambalance.FieldRemark,
		})
	}
	if abuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ambalance.FieldRemark,
		})
	}
	if value, ok := abuo.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldEffectTime,
		})
	}
	if value, ok := abuo.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldExpiredTime,
		})
	}
	if value, ok := abuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldUpdatedAt,
		})
	}
	if value, ok := abuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldCreateBy,
		})
	}
	if value, ok := abuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldCreateBy,
		})
	}
	if value, ok := abuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldUpdateBy,
		})
	}
	if value, ok := abuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldUpdateBy,
		})
	}
	if value, ok := abuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldTenantId,
		})
	}
	if value, ok := abuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldTenantId,
		})
	}
	if abuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ambalance.UserTable,
			Columns: []string{ambalance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := abuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ambalance.UserTable,
			Columns: []string{ambalance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AmBalance{config: abuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, abuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ambalance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
