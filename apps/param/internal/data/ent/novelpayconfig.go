// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/param/internal/data/ent/novelpayconfig"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// NovelPayConfig is the model entity for the NovelPayConfig schema.
type NovelPayConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ProductId holds the value of the "productId" field.
	// 谷歌商品ID
	ProductId string `json:"productId,omitempty"`
	// PaymentName holds the value of the "paymentName" field.
	// 商品名称
	PaymentName string `json:"paymentName,omitempty"`
	// FirstPayment holds the value of the "firstPayment" field.
	// 首次充值金额
	FirstPayment int64 `json:"firstPayment,omitempty"`
	// Payment holds the value of the "payment" field.
	// 充值金额:分
	Payment int64 `json:"payment,omitempty"`
	// OriginalPrice holds the value of the "originalPrice" field.
	// 原价
	OriginalPrice int64 `json:"originalPrice,omitempty"`
	// CfgType holds the value of the "cfgType" field.
	// 配置类型,activity
	CfgType string `json:"cfgType,omitempty"`
	// Coin holds the value of the "coin" field.
	// 书币
	Coin int64 `json:"coin,omitempty"`
	// Currency holds the value of the "currency" field.
	// 货币类型
	Currency string `json:"currency,omitempty"`
	// Coupon holds the value of the "coupon" field.
	// 书券
	Coupon int64 `json:"coupon,omitempty"`
	// CoinItem holds the value of the "coinItem" field.
	// 现金科目,查看asset_item表cash_flag=1
	CoinItem int32 `json:"coinItem,omitempty"`
	// CouponItem holds the value of the "couponItem" field.
	// 赠送科目,查看asset_item表cash_flag=0
	CouponItem int32 `json:"couponItem,omitempty"`
	// Sort holds the value of the "sort" field.
	// 排序
	Sort int32 `json:"sort,omitempty"`
	// State holds the value of the "state" field.
	// 状态
	State bool `json:"state,omitempty"`
	// IsSend holds the value of the "isSend" field.
	// 巨量引擎是否回传
	IsSend int32 `json:"isSend,omitempty"`
	// PayType holds the value of the "payType" field.
	// 充值类型
	PayType int32 `json:"payType,omitempty"`
	// VipType holds the value of the "vipType" field.
	// vip类型
	VipType int64 `json:"vipType,omitempty"`
	// IsHot holds the value of the "isHot" field.
	// 展示火
	IsHot bool `json:"isHot,omitempty"`
	// CycleDay holds the value of the "cycleDay" field.
	// 扣款周期天数,有这个值就周期扣款
	CycleDay int32 `json:"cycleDay,omitempty"`
	// Summary holds the value of the "summary" field.
	// 描述
	Summary string `json:"summary,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// EffectTime holds the value of the "effectTime" field.
	// 生效时间
	EffectTime time.Time `json:"effectTime,omitempty"`
	// ExpiredTime holds the value of the "expiredTime" field.
	// 失效时间
	ExpiredTime time.Time `json:"expiredTime,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NovelPayConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case novelpayconfig.FieldState, novelpayconfig.FieldIsHot:
			values[i] = new(sql.NullBool)
		case novelpayconfig.FieldID, novelpayconfig.FieldFirstPayment, novelpayconfig.FieldPayment, novelpayconfig.FieldOriginalPrice, novelpayconfig.FieldCoin, novelpayconfig.FieldCoupon, novelpayconfig.FieldCoinItem, novelpayconfig.FieldCouponItem, novelpayconfig.FieldSort, novelpayconfig.FieldIsSend, novelpayconfig.FieldPayType, novelpayconfig.FieldVipType, novelpayconfig.FieldCycleDay, novelpayconfig.FieldCreateBy, novelpayconfig.FieldUpdateBy, novelpayconfig.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case novelpayconfig.FieldProductId, novelpayconfig.FieldPaymentName, novelpayconfig.FieldCfgType, novelpayconfig.FieldCurrency, novelpayconfig.FieldSummary, novelpayconfig.FieldRemark:
			values[i] = new(sql.NullString)
		case novelpayconfig.FieldEffectTime, novelpayconfig.FieldExpiredTime, novelpayconfig.FieldCreatedAt, novelpayconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NovelPayConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NovelPayConfig fields.
func (npc *NovelPayConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case novelpayconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			npc.ID = int64(value.Int64)
		case novelpayconfig.FieldProductId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field productId", values[i])
			} else if value.Valid {
				npc.ProductId = value.String
			}
		case novelpayconfig.FieldPaymentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paymentName", values[i])
			} else if value.Valid {
				npc.PaymentName = value.String
			}
		case novelpayconfig.FieldFirstPayment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field firstPayment", values[i])
			} else if value.Valid {
				npc.FirstPayment = value.Int64
			}
		case novelpayconfig.FieldPayment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment", values[i])
			} else if value.Valid {
				npc.Payment = value.Int64
			}
		case novelpayconfig.FieldOriginalPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field originalPrice", values[i])
			} else if value.Valid {
				npc.OriginalPrice = value.Int64
			}
		case novelpayconfig.FieldCfgType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cfgType", values[i])
			} else if value.Valid {
				npc.CfgType = value.String
			}
		case novelpayconfig.FieldCoin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coin", values[i])
			} else if value.Valid {
				npc.Coin = value.Int64
			}
		case novelpayconfig.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				npc.Currency = value.String
			}
		case novelpayconfig.FieldCoupon:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon", values[i])
			} else if value.Valid {
				npc.Coupon = value.Int64
			}
		case novelpayconfig.FieldCoinItem:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coinItem", values[i])
			} else if value.Valid {
				npc.CoinItem = int32(value.Int64)
			}
		case novelpayconfig.FieldCouponItem:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field couponItem", values[i])
			} else if value.Valid {
				npc.CouponItem = int32(value.Int64)
			}
		case novelpayconfig.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				npc.Sort = int32(value.Int64)
			}
		case novelpayconfig.FieldState:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				npc.State = value.Bool
			}
		case novelpayconfig.FieldIsSend:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field isSend", values[i])
			} else if value.Valid {
				npc.IsSend = int32(value.Int64)
			}
		case novelpayconfig.FieldPayType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payType", values[i])
			} else if value.Valid {
				npc.PayType = int32(value.Int64)
			}
		case novelpayconfig.FieldVipType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vipType", values[i])
			} else if value.Valid {
				npc.VipType = value.Int64
			}
		case novelpayconfig.FieldIsHot:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isHot", values[i])
			} else if value.Valid {
				npc.IsHot = value.Bool
			}
		case novelpayconfig.FieldCycleDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cycleDay", values[i])
			} else if value.Valid {
				npc.CycleDay = int32(value.Int64)
			}
		case novelpayconfig.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				npc.Summary = value.String
			}
		case novelpayconfig.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				npc.Remark = value.String
			}
		case novelpayconfig.FieldEffectTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effectTime", values[i])
			} else if value.Valid {
				npc.EffectTime = value.Time
			}
		case novelpayconfig.FieldExpiredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiredTime", values[i])
			} else if value.Valid {
				npc.ExpiredTime = value.Time
			}
		case novelpayconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				npc.CreatedAt = value.Time
			}
		case novelpayconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				npc.UpdatedAt = value.Time
			}
		case novelpayconfig.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				npc.CreateBy = value.Int64
			}
		case novelpayconfig.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				npc.UpdateBy = value.Int64
			}
		case novelpayconfig.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				npc.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NovelPayConfig.
// Note that you need to call NovelPayConfig.Unwrap() before calling this method if this NovelPayConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (npc *NovelPayConfig) Update() *NovelPayConfigUpdateOne {
	return (&NovelPayConfigClient{config: npc.config}).UpdateOne(npc)
}

// Unwrap unwraps the NovelPayConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (npc *NovelPayConfig) Unwrap() *NovelPayConfig {
	tx, ok := npc.config.driver.(*txDriver)
	if !ok {
		panic("ent: NovelPayConfig is not a transactional entity")
	}
	npc.config.driver = tx.drv
	return npc
}

// String implements the fmt.Stringer.
func (npc *NovelPayConfig) String() string {
	var builder strings.Builder
	builder.WriteString("NovelPayConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", npc.ID))
	builder.WriteString(", productId=")
	builder.WriteString(npc.ProductId)
	builder.WriteString(", paymentName=")
	builder.WriteString(npc.PaymentName)
	builder.WriteString(", firstPayment=")
	builder.WriteString(fmt.Sprintf("%v", npc.FirstPayment))
	builder.WriteString(", payment=")
	builder.WriteString(fmt.Sprintf("%v", npc.Payment))
	builder.WriteString(", originalPrice=")
	builder.WriteString(fmt.Sprintf("%v", npc.OriginalPrice))
	builder.WriteString(", cfgType=")
	builder.WriteString(npc.CfgType)
	builder.WriteString(", coin=")
	builder.WriteString(fmt.Sprintf("%v", npc.Coin))
	builder.WriteString(", currency=")
	builder.WriteString(npc.Currency)
	builder.WriteString(", coupon=")
	builder.WriteString(fmt.Sprintf("%v", npc.Coupon))
	builder.WriteString(", coinItem=")
	builder.WriteString(fmt.Sprintf("%v", npc.CoinItem))
	builder.WriteString(", couponItem=")
	builder.WriteString(fmt.Sprintf("%v", npc.CouponItem))
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", npc.Sort))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", npc.State))
	builder.WriteString(", isSend=")
	builder.WriteString(fmt.Sprintf("%v", npc.IsSend))
	builder.WriteString(", payType=")
	builder.WriteString(fmt.Sprintf("%v", npc.PayType))
	builder.WriteString(", vipType=")
	builder.WriteString(fmt.Sprintf("%v", npc.VipType))
	builder.WriteString(", isHot=")
	builder.WriteString(fmt.Sprintf("%v", npc.IsHot))
	builder.WriteString(", cycleDay=")
	builder.WriteString(fmt.Sprintf("%v", npc.CycleDay))
	builder.WriteString(", summary=")
	builder.WriteString(npc.Summary)
	builder.WriteString(", remark=")
	builder.WriteString(npc.Remark)
	builder.WriteString(", effectTime=")
	builder.WriteString(npc.EffectTime.Format(time.ANSIC))
	builder.WriteString(", expiredTime=")
	builder.WriteString(npc.ExpiredTime.Format(time.ANSIC))
	builder.WriteString(", createdAt=")
	builder.WriteString(npc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(npc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", npc.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", npc.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", npc.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NovelPayConfigs is a parsable slice of NovelPayConfig.
type NovelPayConfigs []*NovelPayConfig

func (npc NovelPayConfigs) config(cfg config) {
	for _i := range npc {
		npc[_i].config = cfg
	}
}
