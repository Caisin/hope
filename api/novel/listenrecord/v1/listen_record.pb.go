// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/listenrecord/v1/listen_record.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type ListenRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//主键编码
	ChapterId int64 `protobuf:"varint,3,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//播放次数
	ListenTimes int64 `protobuf:"varint,5,opt,name=listenTimes,proto3" json:"listenTimes,omitempty"`
	//音频时长
	Duration *durationpb.Duration `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	//总播放时长
	AllDuration *durationpb.Duration `protobuf:"bytes,7,opt,name=allDuration,proto3" json:"allDuration,omitempty"`
	//当天播放时长
	DayDuration *durationpb.Duration `protobuf:"bytes,8,opt,name=dayDuration,proto3" json:"dayDuration,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,11,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,12,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,13,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ListenRecordData) Reset() {
	*x = ListenRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordData) ProtoMessage() {}

func (x *ListenRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordData.ProtoReflect.Descriptor instead.
func (*ListenRecordData) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{0}
}

func (x *ListenRecordData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListenRecordData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListenRecordData) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *ListenRecordData) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *ListenRecordData) GetListenTimes() int64 {
	if x != nil {
		return x.ListenTimes
	}
	return 0
}

func (x *ListenRecordData) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ListenRecordData) GetAllDuration() *durationpb.Duration {
	if x != nil {
		return x.AllDuration
	}
	return nil
}

func (x *ListenRecordData) GetDayDuration() *durationpb.Duration {
	if x != nil {
		return x.DayDuration
	}
	return nil
}

func (x *ListenRecordData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListenRecordData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListenRecordData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ListenRecordData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ListenRecordData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type ListenRecordPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *ListenRecordReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *ListenRecordPageReq) Reset() {
	*x = ListenRecordPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordPageReq) ProtoMessage() {}

func (x *ListenRecordPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordPageReq.ProtoReflect.Descriptor instead.
func (*ListenRecordPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{1}
}

func (x *ListenRecordPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *ListenRecordPageReq) GetParam() *ListenRecordReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type ListenRecordPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*ListenRecordData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListenRecordPageReply) Reset() {
	*x = ListenRecordPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordPageReply) ProtoMessage() {}

func (x *ListenRecordPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordPageReply.ProtoReflect.Descriptor instead.
func (*ListenRecordPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{2}
}

func (x *ListenRecordPageReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListenRecordPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListenRecordPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListenRecordPageReply) GetItems() []*ListenRecordData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type ListenRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//主键编码
	ChapterId int64 `protobuf:"varint,3,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//播放次数
	ListenTimes int64 `protobuf:"varint,5,opt,name=listenTimes,proto3" json:"listenTimes,omitempty"`
	//音频时长
	Duration *durationpb.Duration `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	//总播放时长
	AllDuration *durationpb.Duration `protobuf:"bytes,7,opt,name=allDuration,proto3" json:"allDuration,omitempty"`
	//当天播放时长
	DayDuration *durationpb.Duration `protobuf:"bytes,8,opt,name=dayDuration,proto3" json:"dayDuration,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,11,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,12,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,13,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ListenRecordReq) Reset() {
	*x = ListenRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordReq) ProtoMessage() {}

func (x *ListenRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordReq.ProtoReflect.Descriptor instead.
func (*ListenRecordReq) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{3}
}

func (x *ListenRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListenRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListenRecordReq) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *ListenRecordReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *ListenRecordReq) GetListenTimes() int64 {
	if x != nil {
		return x.ListenTimes
	}
	return 0
}

func (x *ListenRecordReq) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ListenRecordReq) GetAllDuration() *durationpb.Duration {
	if x != nil {
		return x.AllDuration
	}
	return nil
}

func (x *ListenRecordReq) GetDayDuration() *durationpb.Duration {
	if x != nil {
		return x.DayDuration
	}
	return nil
}

func (x *ListenRecordReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListenRecordReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListenRecordReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *ListenRecordReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *ListenRecordReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type ListenRecordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *ListenRecordData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ListenRecordReply) Reset() {
	*x = ListenRecordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordReply) ProtoMessage() {}

func (x *ListenRecordReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordReply.ProtoReflect.Descriptor instead.
func (*ListenRecordReply) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{4}
}

func (x *ListenRecordReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListenRecordReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListenRecordReply) GetResult() *ListenRecordData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建ListenRecord请求
type ListenRecordCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户ID
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	//主键编码
	ChapterId int64 `protobuf:"varint,2,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,3,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//播放次数
	ListenTimes int64 `protobuf:"varint,4,opt,name=listenTimes,proto3" json:"listenTimes,omitempty"`
	//音频时长
	Duration *durationpb.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	//总播放时长
	AllDuration *durationpb.Duration `protobuf:"bytes,6,opt,name=allDuration,proto3" json:"allDuration,omitempty"`
	//当天播放时长
	DayDuration *durationpb.Duration `protobuf:"bytes,7,opt,name=dayDuration,proto3" json:"dayDuration,omitempty"`
}

func (x *ListenRecordCreateReq) Reset() {
	*x = ListenRecordCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordCreateReq) ProtoMessage() {}

func (x *ListenRecordCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordCreateReq.ProtoReflect.Descriptor instead.
func (*ListenRecordCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{5}
}

func (x *ListenRecordCreateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListenRecordCreateReq) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *ListenRecordCreateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *ListenRecordCreateReq) GetListenTimes() int64 {
	if x != nil {
		return x.ListenTimes
	}
	return 0
}

func (x *ListenRecordCreateReq) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ListenRecordCreateReq) GetAllDuration() *durationpb.Duration {
	if x != nil {
		return x.AllDuration
	}
	return nil
}

func (x *ListenRecordCreateReq) GetDayDuration() *durationpb.Duration {
	if x != nil {
		return x.DayDuration
	}
	return nil
}

// 创建ListenRecord返回
type ListenRecordCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *ListenRecordData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ListenRecordCreateReply) Reset() {
	*x = ListenRecordCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordCreateReply) ProtoMessage() {}

func (x *ListenRecordCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordCreateReply.ProtoReflect.Descriptor instead.
func (*ListenRecordCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{6}
}

func (x *ListenRecordCreateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListenRecordCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListenRecordCreateReply) GetResult() *ListenRecordData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新ListenRecord请求
type ListenRecordUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//主键编码
	ChapterId int64 `protobuf:"varint,3,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//播放次数
	ListenTimes int64 `protobuf:"varint,5,opt,name=listenTimes,proto3" json:"listenTimes,omitempty"`
	//音频时长
	Duration *durationpb.Duration `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	//总播放时长
	AllDuration *durationpb.Duration `protobuf:"bytes,7,opt,name=allDuration,proto3" json:"allDuration,omitempty"`
	//当天播放时长
	DayDuration *durationpb.Duration `protobuf:"bytes,8,opt,name=dayDuration,proto3" json:"dayDuration,omitempty"`
}

func (x *ListenRecordUpdateReq) Reset() {
	*x = ListenRecordUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordUpdateReq) ProtoMessage() {}

func (x *ListenRecordUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordUpdateReq.ProtoReflect.Descriptor instead.
func (*ListenRecordUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{7}
}

func (x *ListenRecordUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListenRecordUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListenRecordUpdateReq) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *ListenRecordUpdateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *ListenRecordUpdateReq) GetListenTimes() int64 {
	if x != nil {
		return x.ListenTimes
	}
	return 0
}

func (x *ListenRecordUpdateReq) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ListenRecordUpdateReq) GetAllDuration() *durationpb.Duration {
	if x != nil {
		return x.AllDuration
	}
	return nil
}

func (x *ListenRecordUpdateReq) GetDayDuration() *durationpb.Duration {
	if x != nil {
		return x.DayDuration
	}
	return nil
}

// 更新ListenRecord返回
type ListenRecordUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *ListenRecordData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ListenRecordUpdateReply) Reset() {
	*x = ListenRecordUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordUpdateReply) ProtoMessage() {}

func (x *ListenRecordUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordUpdateReply.ProtoReflect.Descriptor instead.
func (*ListenRecordUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{8}
}

func (x *ListenRecordUpdateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListenRecordUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListenRecordUpdateReply) GetResult() *ListenRecordData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除ListenRecord请求
type ListenRecordDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListenRecordDeleteReq) Reset() {
	*x = ListenRecordDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordDeleteReq) ProtoMessage() {}

func (x *ListenRecordDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordDeleteReq.ProtoReflect.Descriptor instead.
func (*ListenRecordDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{9}
}

func (x *ListenRecordDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除ListenRecord请求
type ListenRecordBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListenRecordBatchDeleteReq) Reset() {
	*x = ListenRecordBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordBatchDeleteReq) ProtoMessage() {}

func (x *ListenRecordBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*ListenRecordBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{10}
}

func (x *ListenRecordBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除ListenRecord返回
type ListenRecordDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ListenRecordDeleteReply) Reset() {
	*x = ListenRecordDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRecordDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRecordDeleteReply) ProtoMessage() {}

func (x *ListenRecordDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRecordDeleteReply.ProtoReflect.Descriptor instead.
func (*ListenRecordDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP(), []int{11}
}

func (x *ListenRecordDeleteReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListenRecordDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListenRecordDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_listenrecord_v1_listen_record_proto protoreflect.FileDescriptor

var file_api_novel_listenrecord_v1_listen_record_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d,
	0x04, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6c,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x61, 0x79,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x76,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x36,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8c, 0x04,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x6c,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xba, 0x02, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61,
	0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x61,
	0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xca, 0x02, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x61,
	0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x27,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xb7, 0x06, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x77, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x20, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x26, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a,
	0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x42, 0x23, 0x5a, 0x21, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_novel_listenrecord_v1_listen_record_proto_rawDescOnce sync.Once
	file_api_novel_listenrecord_v1_listen_record_proto_rawDescData = file_api_novel_listenrecord_v1_listen_record_proto_rawDesc
)

func file_api_novel_listenrecord_v1_listen_record_proto_rawDescGZIP() []byte {
	file_api_novel_listenrecord_v1_listen_record_proto_rawDescOnce.Do(func() {
		file_api_novel_listenrecord_v1_listen_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_listenrecord_v1_listen_record_proto_rawDescData)
	})
	return file_api_novel_listenrecord_v1_listen_record_proto_rawDescData
}

var file_api_novel_listenrecord_v1_listen_record_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_novel_listenrecord_v1_listen_record_proto_goTypes = []interface{}{
	(*ListenRecordData)(nil),           // 0: listenrecord.v1.ListenRecordData
	(*ListenRecordPageReq)(nil),        // 1: listenrecord.v1.ListenRecordPageReq
	(*ListenRecordPageReply)(nil),      // 2: listenrecord.v1.ListenRecordPageReply
	(*ListenRecordReq)(nil),            // 3: listenrecord.v1.ListenRecordReq
	(*ListenRecordReply)(nil),          // 4: listenrecord.v1.ListenRecordReply
	(*ListenRecordCreateReq)(nil),      // 5: listenrecord.v1.ListenRecordCreateReq
	(*ListenRecordCreateReply)(nil),    // 6: listenrecord.v1.ListenRecordCreateReply
	(*ListenRecordUpdateReq)(nil),      // 7: listenrecord.v1.ListenRecordUpdateReq
	(*ListenRecordUpdateReply)(nil),    // 8: listenrecord.v1.ListenRecordUpdateReply
	(*ListenRecordDeleteReq)(nil),      // 9: listenrecord.v1.ListenRecordDeleteReq
	(*ListenRecordBatchDeleteReq)(nil), // 10: listenrecord.v1.ListenRecordBatchDeleteReq
	(*ListenRecordDeleteReply)(nil),    // 11: listenrecord.v1.ListenRecordDeleteReply
	(*durationpb.Duration)(nil),        // 12: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),      // 13: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),           // 14: pagin.Pagination
}
var file_api_novel_listenrecord_v1_listen_record_proto_depIdxs = []int32{
	12, // 0: listenrecord.v1.ListenRecordData.duration:type_name -> google.protobuf.Duration
	12, // 1: listenrecord.v1.ListenRecordData.allDuration:type_name -> google.protobuf.Duration
	12, // 2: listenrecord.v1.ListenRecordData.dayDuration:type_name -> google.protobuf.Duration
	13, // 3: listenrecord.v1.ListenRecordData.createdAt:type_name -> google.protobuf.Timestamp
	13, // 4: listenrecord.v1.ListenRecordData.updatedAt:type_name -> google.protobuf.Timestamp
	14, // 5: listenrecord.v1.ListenRecordPageReq.pagin:type_name -> pagin.Pagination
	3,  // 6: listenrecord.v1.ListenRecordPageReq.param:type_name -> listenrecord.v1.ListenRecordReq
	0,  // 7: listenrecord.v1.ListenRecordPageReply.items:type_name -> listenrecord.v1.ListenRecordData
	12, // 8: listenrecord.v1.ListenRecordReq.duration:type_name -> google.protobuf.Duration
	12, // 9: listenrecord.v1.ListenRecordReq.allDuration:type_name -> google.protobuf.Duration
	12, // 10: listenrecord.v1.ListenRecordReq.dayDuration:type_name -> google.protobuf.Duration
	13, // 11: listenrecord.v1.ListenRecordReq.createdAt:type_name -> google.protobuf.Timestamp
	13, // 12: listenrecord.v1.ListenRecordReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 13: listenrecord.v1.ListenRecordReply.result:type_name -> listenrecord.v1.ListenRecordData
	12, // 14: listenrecord.v1.ListenRecordCreateReq.duration:type_name -> google.protobuf.Duration
	12, // 15: listenrecord.v1.ListenRecordCreateReq.allDuration:type_name -> google.protobuf.Duration
	12, // 16: listenrecord.v1.ListenRecordCreateReq.dayDuration:type_name -> google.protobuf.Duration
	0,  // 17: listenrecord.v1.ListenRecordCreateReply.result:type_name -> listenrecord.v1.ListenRecordData
	12, // 18: listenrecord.v1.ListenRecordUpdateReq.duration:type_name -> google.protobuf.Duration
	12, // 19: listenrecord.v1.ListenRecordUpdateReq.allDuration:type_name -> google.protobuf.Duration
	12, // 20: listenrecord.v1.ListenRecordUpdateReq.dayDuration:type_name -> google.protobuf.Duration
	0,  // 21: listenrecord.v1.ListenRecordUpdateReply.result:type_name -> listenrecord.v1.ListenRecordData
	1,  // 22: listenrecord.v1.ListenRecord.GetListenRecordPage:input_type -> listenrecord.v1.ListenRecordPageReq
	3,  // 23: listenrecord.v1.ListenRecord.GetListenRecord:input_type -> listenrecord.v1.ListenRecordReq
	7,  // 24: listenrecord.v1.ListenRecord.UpdateListenRecord:input_type -> listenrecord.v1.ListenRecordUpdateReq
	5,  // 25: listenrecord.v1.ListenRecord.CreateListenRecord:input_type -> listenrecord.v1.ListenRecordCreateReq
	9,  // 26: listenrecord.v1.ListenRecord.DeleteListenRecord:input_type -> listenrecord.v1.ListenRecordDeleteReq
	10, // 27: listenrecord.v1.ListenRecord.BatchDeleteListenRecord:input_type -> listenrecord.v1.ListenRecordBatchDeleteReq
	2,  // 28: listenrecord.v1.ListenRecord.GetListenRecordPage:output_type -> listenrecord.v1.ListenRecordPageReply
	4,  // 29: listenrecord.v1.ListenRecord.GetListenRecord:output_type -> listenrecord.v1.ListenRecordReply
	8,  // 30: listenrecord.v1.ListenRecord.UpdateListenRecord:output_type -> listenrecord.v1.ListenRecordUpdateReply
	6,  // 31: listenrecord.v1.ListenRecord.CreateListenRecord:output_type -> listenrecord.v1.ListenRecordCreateReply
	11, // 32: listenrecord.v1.ListenRecord.DeleteListenRecord:output_type -> listenrecord.v1.ListenRecordDeleteReply
	11, // 33: listenrecord.v1.ListenRecord.BatchDeleteListenRecord:output_type -> listenrecord.v1.ListenRecordDeleteReply
	28, // [28:34] is the sub-list for method output_type
	22, // [22:28] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_api_novel_listenrecord_v1_listen_record_proto_init() }
func file_api_novel_listenrecord_v1_listen_record_proto_init() {
	if File_api_novel_listenrecord_v1_listen_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_listenrecord_v1_listen_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRecordDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_listenrecord_v1_listen_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_listenrecord_v1_listen_record_proto_goTypes,
		DependencyIndexes: file_api_novel_listenrecord_v1_listen_record_proto_depIdxs,
		MessageInfos:      file_api_novel_listenrecord_v1_listen_record_proto_msgTypes,
	}.Build()
	File_api_novel_listenrecord_v1_listen_record_proto = out.File
	file_api_novel_listenrecord_v1_listen_record_proto_rawDesc = nil
	file_api_novel_listenrecord_v1_listen_record_proto_goTypes = nil
	file_api_novel_listenrecord_v1_listen_record_proto_depIdxs = nil
}
