// Code generated by entc, DO NOT EDIT.

package novelpayconfig

import (
	"hope/apps/param/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProductId applies equality check predicate on the "productId" field. It's identical to ProductIdEQ.
func ProductId(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductId), v))
	})
}

// PaymentName applies equality check predicate on the "paymentName" field. It's identical to PaymentNameEQ.
func PaymentName(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentName), v))
	})
}

// FirstPayment applies equality check predicate on the "firstPayment" field. It's identical to FirstPaymentEQ.
func FirstPayment(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstPayment), v))
	})
}

// Payment applies equality check predicate on the "payment" field. It's identical to PaymentEQ.
func Payment(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayment), v))
	})
}

// OriginalPrice applies equality check predicate on the "originalPrice" field. It's identical to OriginalPriceEQ.
func OriginalPrice(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalPrice), v))
	})
}

// CfgType applies equality check predicate on the "cfgType" field. It's identical to CfgTypeEQ.
func CfgType(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfgType), v))
	})
}

// Coin applies equality check predicate on the "coin" field. It's identical to CoinEQ.
func Coin(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoin), v))
	})
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// Coupon applies equality check predicate on the "coupon" field. It's identical to CouponEQ.
func Coupon(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoupon), v))
	})
}

// CoinItem applies equality check predicate on the "coinItem" field. It's identical to CoinItemEQ.
func CoinItem(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinItem), v))
	})
}

// CouponItem applies equality check predicate on the "couponItem" field. It's identical to CouponItemEQ.
func CouponItem(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponItem), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v bool) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// IsSend applies equality check predicate on the "isSend" field. It's identical to IsSendEQ.
func IsSend(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSend), v))
	})
}

// PayType applies equality check predicate on the "payType" field. It's identical to PayTypeEQ.
func PayType(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayType), v))
	})
}

// VipType applies equality check predicate on the "vipType" field. It's identical to VipTypeEQ.
func VipType(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipType), v))
	})
}

// IsHot applies equality check predicate on the "isHot" field. It's identical to IsHotEQ.
func IsHot(v bool) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHot), v))
	})
}

// CycleDay applies equality check predicate on the "cycleDay" field. It's identical to CycleDayEQ.
func CycleDay(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCycleDay), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// EffectTime applies equality check predicate on the "effectTime" field. It's identical to EffectTimeEQ.
func EffectTime(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// ExpiredTime applies equality check predicate on the "expiredTime" field. It's identical to ExpiredTimeEQ.
func ExpiredTime(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// ProductIdEQ applies the EQ predicate on the "productId" field.
func ProductIdEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductId), v))
	})
}

// ProductIdNEQ applies the NEQ predicate on the "productId" field.
func ProductIdNEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductId), v))
	})
}

// ProductIdIn applies the In predicate on the "productId" field.
func ProductIdIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductId), v...))
	})
}

// ProductIdNotIn applies the NotIn predicate on the "productId" field.
func ProductIdNotIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductId), v...))
	})
}

// ProductIdGT applies the GT predicate on the "productId" field.
func ProductIdGT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductId), v))
	})
}

// ProductIdGTE applies the GTE predicate on the "productId" field.
func ProductIdGTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductId), v))
	})
}

// ProductIdLT applies the LT predicate on the "productId" field.
func ProductIdLT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductId), v))
	})
}

// ProductIdLTE applies the LTE predicate on the "productId" field.
func ProductIdLTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductId), v))
	})
}

// ProductIdContains applies the Contains predicate on the "productId" field.
func ProductIdContains(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProductId), v))
	})
}

// ProductIdHasPrefix applies the HasPrefix predicate on the "productId" field.
func ProductIdHasPrefix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProductId), v))
	})
}

// ProductIdHasSuffix applies the HasSuffix predicate on the "productId" field.
func ProductIdHasSuffix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProductId), v))
	})
}

// ProductIdIsNil applies the IsNil predicate on the "productId" field.
func ProductIdIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProductId)))
	})
}

// ProductIdNotNil applies the NotNil predicate on the "productId" field.
func ProductIdNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProductId)))
	})
}

// ProductIdEqualFold applies the EqualFold predicate on the "productId" field.
func ProductIdEqualFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProductId), v))
	})
}

// ProductIdContainsFold applies the ContainsFold predicate on the "productId" field.
func ProductIdContainsFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProductId), v))
	})
}

// PaymentNameEQ applies the EQ predicate on the "paymentName" field.
func PaymentNameEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentName), v))
	})
}

// PaymentNameNEQ applies the NEQ predicate on the "paymentName" field.
func PaymentNameNEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentName), v))
	})
}

// PaymentNameIn applies the In predicate on the "paymentName" field.
func PaymentNameIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentName), v...))
	})
}

// PaymentNameNotIn applies the NotIn predicate on the "paymentName" field.
func PaymentNameNotIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentName), v...))
	})
}

// PaymentNameGT applies the GT predicate on the "paymentName" field.
func PaymentNameGT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentName), v))
	})
}

// PaymentNameGTE applies the GTE predicate on the "paymentName" field.
func PaymentNameGTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentName), v))
	})
}

// PaymentNameLT applies the LT predicate on the "paymentName" field.
func PaymentNameLT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentName), v))
	})
}

// PaymentNameLTE applies the LTE predicate on the "paymentName" field.
func PaymentNameLTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentName), v))
	})
}

// PaymentNameContains applies the Contains predicate on the "paymentName" field.
func PaymentNameContains(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentName), v))
	})
}

// PaymentNameHasPrefix applies the HasPrefix predicate on the "paymentName" field.
func PaymentNameHasPrefix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentName), v))
	})
}

// PaymentNameHasSuffix applies the HasSuffix predicate on the "paymentName" field.
func PaymentNameHasSuffix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentName), v))
	})
}

// PaymentNameIsNil applies the IsNil predicate on the "paymentName" field.
func PaymentNameIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentName)))
	})
}

// PaymentNameNotNil applies the NotNil predicate on the "paymentName" field.
func PaymentNameNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentName)))
	})
}

// PaymentNameEqualFold applies the EqualFold predicate on the "paymentName" field.
func PaymentNameEqualFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentName), v))
	})
}

// PaymentNameContainsFold applies the ContainsFold predicate on the "paymentName" field.
func PaymentNameContainsFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentName), v))
	})
}

// FirstPaymentEQ applies the EQ predicate on the "firstPayment" field.
func FirstPaymentEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstPayment), v))
	})
}

// FirstPaymentNEQ applies the NEQ predicate on the "firstPayment" field.
func FirstPaymentNEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstPayment), v))
	})
}

// FirstPaymentIn applies the In predicate on the "firstPayment" field.
func FirstPaymentIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstPayment), v...))
	})
}

// FirstPaymentNotIn applies the NotIn predicate on the "firstPayment" field.
func FirstPaymentNotIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstPayment), v...))
	})
}

// FirstPaymentGT applies the GT predicate on the "firstPayment" field.
func FirstPaymentGT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstPayment), v))
	})
}

// FirstPaymentGTE applies the GTE predicate on the "firstPayment" field.
func FirstPaymentGTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstPayment), v))
	})
}

// FirstPaymentLT applies the LT predicate on the "firstPayment" field.
func FirstPaymentLT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstPayment), v))
	})
}

// FirstPaymentLTE applies the LTE predicate on the "firstPayment" field.
func FirstPaymentLTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstPayment), v))
	})
}

// FirstPaymentIsNil applies the IsNil predicate on the "firstPayment" field.
func FirstPaymentIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirstPayment)))
	})
}

// FirstPaymentNotNil applies the NotNil predicate on the "firstPayment" field.
func FirstPaymentNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirstPayment)))
	})
}

// PaymentEQ applies the EQ predicate on the "payment" field.
func PaymentEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayment), v))
	})
}

// PaymentNEQ applies the NEQ predicate on the "payment" field.
func PaymentNEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayment), v))
	})
}

// PaymentIn applies the In predicate on the "payment" field.
func PaymentIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayment), v...))
	})
}

// PaymentNotIn applies the NotIn predicate on the "payment" field.
func PaymentNotIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayment), v...))
	})
}

// PaymentGT applies the GT predicate on the "payment" field.
func PaymentGT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayment), v))
	})
}

// PaymentGTE applies the GTE predicate on the "payment" field.
func PaymentGTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayment), v))
	})
}

// PaymentLT applies the LT predicate on the "payment" field.
func PaymentLT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayment), v))
	})
}

// PaymentLTE applies the LTE predicate on the "payment" field.
func PaymentLTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayment), v))
	})
}

// PaymentIsNil applies the IsNil predicate on the "payment" field.
func PaymentIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayment)))
	})
}

// PaymentNotNil applies the NotNil predicate on the "payment" field.
func PaymentNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayment)))
	})
}

// OriginalPriceEQ applies the EQ predicate on the "originalPrice" field.
func OriginalPriceEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceNEQ applies the NEQ predicate on the "originalPrice" field.
func OriginalPriceNEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceIn applies the In predicate on the "originalPrice" field.
func OriginalPriceIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginalPrice), v...))
	})
}

// OriginalPriceNotIn applies the NotIn predicate on the "originalPrice" field.
func OriginalPriceNotIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginalPrice), v...))
	})
}

// OriginalPriceGT applies the GT predicate on the "originalPrice" field.
func OriginalPriceGT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceGTE applies the GTE predicate on the "originalPrice" field.
func OriginalPriceGTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceLT applies the LT predicate on the "originalPrice" field.
func OriginalPriceLT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceLTE applies the LTE predicate on the "originalPrice" field.
func OriginalPriceLTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceIsNil applies the IsNil predicate on the "originalPrice" field.
func OriginalPriceIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOriginalPrice)))
	})
}

// OriginalPriceNotNil applies the NotNil predicate on the "originalPrice" field.
func OriginalPriceNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOriginalPrice)))
	})
}

// CfgTypeEQ applies the EQ predicate on the "cfgType" field.
func CfgTypeEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCfgType), v))
	})
}

// CfgTypeNEQ applies the NEQ predicate on the "cfgType" field.
func CfgTypeNEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCfgType), v))
	})
}

// CfgTypeIn applies the In predicate on the "cfgType" field.
func CfgTypeIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCfgType), v...))
	})
}

// CfgTypeNotIn applies the NotIn predicate on the "cfgType" field.
func CfgTypeNotIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCfgType), v...))
	})
}

// CfgTypeGT applies the GT predicate on the "cfgType" field.
func CfgTypeGT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCfgType), v))
	})
}

// CfgTypeGTE applies the GTE predicate on the "cfgType" field.
func CfgTypeGTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCfgType), v))
	})
}

// CfgTypeLT applies the LT predicate on the "cfgType" field.
func CfgTypeLT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCfgType), v))
	})
}

// CfgTypeLTE applies the LTE predicate on the "cfgType" field.
func CfgTypeLTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCfgType), v))
	})
}

// CfgTypeContains applies the Contains predicate on the "cfgType" field.
func CfgTypeContains(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCfgType), v))
	})
}

// CfgTypeHasPrefix applies the HasPrefix predicate on the "cfgType" field.
func CfgTypeHasPrefix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCfgType), v))
	})
}

// CfgTypeHasSuffix applies the HasSuffix predicate on the "cfgType" field.
func CfgTypeHasSuffix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCfgType), v))
	})
}

// CfgTypeIsNil applies the IsNil predicate on the "cfgType" field.
func CfgTypeIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCfgType)))
	})
}

// CfgTypeNotNil applies the NotNil predicate on the "cfgType" field.
func CfgTypeNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCfgType)))
	})
}

// CfgTypeEqualFold applies the EqualFold predicate on the "cfgType" field.
func CfgTypeEqualFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCfgType), v))
	})
}

// CfgTypeContainsFold applies the ContainsFold predicate on the "cfgType" field.
func CfgTypeContainsFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCfgType), v))
	})
}

// CoinEQ applies the EQ predicate on the "coin" field.
func CoinEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoin), v))
	})
}

// CoinNEQ applies the NEQ predicate on the "coin" field.
func CoinNEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoin), v))
	})
}

// CoinIn applies the In predicate on the "coin" field.
func CoinIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoin), v...))
	})
}

// CoinNotIn applies the NotIn predicate on the "coin" field.
func CoinNotIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoin), v...))
	})
}

// CoinGT applies the GT predicate on the "coin" field.
func CoinGT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoin), v))
	})
}

// CoinGTE applies the GTE predicate on the "coin" field.
func CoinGTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoin), v))
	})
}

// CoinLT applies the LT predicate on the "coin" field.
func CoinLT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoin), v))
	})
}

// CoinLTE applies the LTE predicate on the "coin" field.
func CoinLTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoin), v))
	})
}

// CoinIsNil applies the IsNil predicate on the "coin" field.
func CoinIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoin)))
	})
}

// CoinNotNil applies the NotNil predicate on the "coin" field.
func CoinNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoin)))
	})
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrency), v))
	})
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrency), v))
	})
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCurrency), v...))
	})
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCurrency), v...))
	})
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrency), v))
	})
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrency), v))
	})
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrency), v))
	})
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrency), v))
	})
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrency), v))
	})
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrency), v))
	})
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrency), v))
	})
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrency)))
	})
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrency)))
	})
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrency), v))
	})
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrency), v))
	})
}

// CouponEQ applies the EQ predicate on the "coupon" field.
func CouponEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoupon), v))
	})
}

// CouponNEQ applies the NEQ predicate on the "coupon" field.
func CouponNEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoupon), v))
	})
}

// CouponIn applies the In predicate on the "coupon" field.
func CouponIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoupon), v...))
	})
}

// CouponNotIn applies the NotIn predicate on the "coupon" field.
func CouponNotIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoupon), v...))
	})
}

// CouponGT applies the GT predicate on the "coupon" field.
func CouponGT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoupon), v))
	})
}

// CouponGTE applies the GTE predicate on the "coupon" field.
func CouponGTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoupon), v))
	})
}

// CouponLT applies the LT predicate on the "coupon" field.
func CouponLT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoupon), v))
	})
}

// CouponLTE applies the LTE predicate on the "coupon" field.
func CouponLTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoupon), v))
	})
}

// CouponIsNil applies the IsNil predicate on the "coupon" field.
func CouponIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoupon)))
	})
}

// CouponNotNil applies the NotNil predicate on the "coupon" field.
func CouponNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoupon)))
	})
}

// CoinItemEQ applies the EQ predicate on the "coinItem" field.
func CoinItemEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinItem), v))
	})
}

// CoinItemNEQ applies the NEQ predicate on the "coinItem" field.
func CoinItemNEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinItem), v))
	})
}

// CoinItemIn applies the In predicate on the "coinItem" field.
func CoinItemIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoinItem), v...))
	})
}

// CoinItemNotIn applies the NotIn predicate on the "coinItem" field.
func CoinItemNotIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoinItem), v...))
	})
}

// CoinItemGT applies the GT predicate on the "coinItem" field.
func CoinItemGT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinItem), v))
	})
}

// CoinItemGTE applies the GTE predicate on the "coinItem" field.
func CoinItemGTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinItem), v))
	})
}

// CoinItemLT applies the LT predicate on the "coinItem" field.
func CoinItemLT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinItem), v))
	})
}

// CoinItemLTE applies the LTE predicate on the "coinItem" field.
func CoinItemLTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinItem), v))
	})
}

// CoinItemIsNil applies the IsNil predicate on the "coinItem" field.
func CoinItemIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoinItem)))
	})
}

// CoinItemNotNil applies the NotNil predicate on the "coinItem" field.
func CoinItemNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoinItem)))
	})
}

// CouponItemEQ applies the EQ predicate on the "couponItem" field.
func CouponItemEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCouponItem), v))
	})
}

// CouponItemNEQ applies the NEQ predicate on the "couponItem" field.
func CouponItemNEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCouponItem), v))
	})
}

// CouponItemIn applies the In predicate on the "couponItem" field.
func CouponItemIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCouponItem), v...))
	})
}

// CouponItemNotIn applies the NotIn predicate on the "couponItem" field.
func CouponItemNotIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCouponItem), v...))
	})
}

// CouponItemGT applies the GT predicate on the "couponItem" field.
func CouponItemGT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCouponItem), v))
	})
}

// CouponItemGTE applies the GTE predicate on the "couponItem" field.
func CouponItemGTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCouponItem), v))
	})
}

// CouponItemLT applies the LT predicate on the "couponItem" field.
func CouponItemLT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCouponItem), v))
	})
}

// CouponItemLTE applies the LTE predicate on the "couponItem" field.
func CouponItemLTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCouponItem), v))
	})
}

// CouponItemIsNil applies the IsNil predicate on the "couponItem" field.
func CouponItemIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCouponItem)))
	})
}

// CouponItemNotNil applies the NotNil predicate on the "couponItem" field.
func CouponItemNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCouponItem)))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// SortIsNil applies the IsNil predicate on the "sort" field.
func SortIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSort)))
	})
}

// SortNotNil applies the NotNil predicate on the "sort" field.
func SortNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSort)))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v bool) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v bool) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// IsSendEQ applies the EQ predicate on the "isSend" field.
func IsSendEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSend), v))
	})
}

// IsSendNEQ applies the NEQ predicate on the "isSend" field.
func IsSendNEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsSend), v))
	})
}

// IsSendIn applies the In predicate on the "isSend" field.
func IsSendIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsSend), v...))
	})
}

// IsSendNotIn applies the NotIn predicate on the "isSend" field.
func IsSendNotIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsSend), v...))
	})
}

// IsSendGT applies the GT predicate on the "isSend" field.
func IsSendGT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsSend), v))
	})
}

// IsSendGTE applies the GTE predicate on the "isSend" field.
func IsSendGTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsSend), v))
	})
}

// IsSendLT applies the LT predicate on the "isSend" field.
func IsSendLT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsSend), v))
	})
}

// IsSendLTE applies the LTE predicate on the "isSend" field.
func IsSendLTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsSend), v))
	})
}

// IsSendIsNil applies the IsNil predicate on the "isSend" field.
func IsSendIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsSend)))
	})
}

// IsSendNotNil applies the NotNil predicate on the "isSend" field.
func IsSendNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsSend)))
	})
}

// PayTypeEQ applies the EQ predicate on the "payType" field.
func PayTypeEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayType), v))
	})
}

// PayTypeNEQ applies the NEQ predicate on the "payType" field.
func PayTypeNEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayType), v))
	})
}

// PayTypeIn applies the In predicate on the "payType" field.
func PayTypeIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayType), v...))
	})
}

// PayTypeNotIn applies the NotIn predicate on the "payType" field.
func PayTypeNotIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayType), v...))
	})
}

// PayTypeGT applies the GT predicate on the "payType" field.
func PayTypeGT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayType), v))
	})
}

// PayTypeGTE applies the GTE predicate on the "payType" field.
func PayTypeGTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayType), v))
	})
}

// PayTypeLT applies the LT predicate on the "payType" field.
func PayTypeLT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayType), v))
	})
}

// PayTypeLTE applies the LTE predicate on the "payType" field.
func PayTypeLTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayType), v))
	})
}

// PayTypeIsNil applies the IsNil predicate on the "payType" field.
func PayTypeIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayType)))
	})
}

// PayTypeNotNil applies the NotNil predicate on the "payType" field.
func PayTypeNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayType)))
	})
}

// VipTypeEQ applies the EQ predicate on the "vipType" field.
func VipTypeEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipType), v))
	})
}

// VipTypeNEQ applies the NEQ predicate on the "vipType" field.
func VipTypeNEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVipType), v))
	})
}

// VipTypeIn applies the In predicate on the "vipType" field.
func VipTypeIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVipType), v...))
	})
}

// VipTypeNotIn applies the NotIn predicate on the "vipType" field.
func VipTypeNotIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVipType), v...))
	})
}

// VipTypeGT applies the GT predicate on the "vipType" field.
func VipTypeGT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVipType), v))
	})
}

// VipTypeGTE applies the GTE predicate on the "vipType" field.
func VipTypeGTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVipType), v))
	})
}

// VipTypeLT applies the LT predicate on the "vipType" field.
func VipTypeLT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVipType), v))
	})
}

// VipTypeLTE applies the LTE predicate on the "vipType" field.
func VipTypeLTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVipType), v))
	})
}

// VipTypeIsNil applies the IsNil predicate on the "vipType" field.
func VipTypeIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVipType)))
	})
}

// VipTypeNotNil applies the NotNil predicate on the "vipType" field.
func VipTypeNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVipType)))
	})
}

// IsHotEQ applies the EQ predicate on the "isHot" field.
func IsHotEQ(v bool) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHot), v))
	})
}

// IsHotNEQ applies the NEQ predicate on the "isHot" field.
func IsHotNEQ(v bool) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsHot), v))
	})
}

// IsHotIsNil applies the IsNil predicate on the "isHot" field.
func IsHotIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsHot)))
	})
}

// IsHotNotNil applies the NotNil predicate on the "isHot" field.
func IsHotNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsHot)))
	})
}

// CycleDayEQ applies the EQ predicate on the "cycleDay" field.
func CycleDayEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCycleDay), v))
	})
}

// CycleDayNEQ applies the NEQ predicate on the "cycleDay" field.
func CycleDayNEQ(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCycleDay), v))
	})
}

// CycleDayIn applies the In predicate on the "cycleDay" field.
func CycleDayIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCycleDay), v...))
	})
}

// CycleDayNotIn applies the NotIn predicate on the "cycleDay" field.
func CycleDayNotIn(vs ...int32) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCycleDay), v...))
	})
}

// CycleDayGT applies the GT predicate on the "cycleDay" field.
func CycleDayGT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCycleDay), v))
	})
}

// CycleDayGTE applies the GTE predicate on the "cycleDay" field.
func CycleDayGTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCycleDay), v))
	})
}

// CycleDayLT applies the LT predicate on the "cycleDay" field.
func CycleDayLT(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCycleDay), v))
	})
}

// CycleDayLTE applies the LTE predicate on the "cycleDay" field.
func CycleDayLTE(v int32) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCycleDay), v))
	})
}

// CycleDayIsNil applies the IsNil predicate on the "cycleDay" field.
func CycleDayIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCycleDay)))
	})
}

// CycleDayNotNil applies the NotNil predicate on the "cycleDay" field.
func CycleDayNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCycleDay)))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSummary)))
	})
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSummary)))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// EffectTimeEQ applies the EQ predicate on the "effectTime" field.
func EffectTimeEQ(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeNEQ applies the NEQ predicate on the "effectTime" field.
func EffectTimeNEQ(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeIn applies the In predicate on the "effectTime" field.
func EffectTimeIn(vs ...time.Time) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeNotIn applies the NotIn predicate on the "effectTime" field.
func EffectTimeNotIn(vs ...time.Time) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeGT applies the GT predicate on the "effectTime" field.
func EffectTimeGT(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeGTE applies the GTE predicate on the "effectTime" field.
func EffectTimeGTE(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLT applies the LT predicate on the "effectTime" field.
func EffectTimeLT(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLTE applies the LTE predicate on the "effectTime" field.
func EffectTimeLTE(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEffectTime), v))
	})
}

// ExpiredTimeEQ applies the EQ predicate on the "expiredTime" field.
func ExpiredTimeEQ(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeNEQ applies the NEQ predicate on the "expiredTime" field.
func ExpiredTimeNEQ(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeIn applies the In predicate on the "expiredTime" field.
func ExpiredTimeIn(vs ...time.Time) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeNotIn applies the NotIn predicate on the "expiredTime" field.
func ExpiredTimeNotIn(vs ...time.Time) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeGT applies the GT predicate on the "expiredTime" field.
func ExpiredTimeGT(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeGTE applies the GTE predicate on the "expiredTime" field.
func ExpiredTimeGTE(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLT applies the LT predicate on the "expiredTime" field.
func ExpiredTimeLT(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLTE applies the LTE predicate on the "expiredTime" field.
func ExpiredTimeLTE(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiredTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.NovelPayConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NovelPayConfig) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NovelPayConfig) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NovelPayConfig) predicate.NovelPayConfig {
	return predicate.NovelPayConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
