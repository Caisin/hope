// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysdept"
	"hope/apps/admin/internal/data/ent/sysloginlog"
	"hope/apps/admin/internal/data/ent/sysoperalog"
	"hope/apps/admin/internal/data/ent/syspost"
	"hope/apps/admin/internal/data/ent/sysrole"
	"hope/apps/admin/internal/data/ent/sysuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysUserUpdate is the builder for updating SysUser entities.
type SysUserUpdate struct {
	config
	hooks    []Hook
	mutation *SysUserMutation
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suu *SysUserUpdate) Where(ps ...predicate.SysUser) *SysUserUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetUsername sets the "username" field.
func (suu *SysUserUpdate) SetUsername(s string) *SysUserUpdate {
	suu.mutation.SetUsername(s)
	return suu
}

// SetPassword sets the "password" field.
func (suu *SysUserUpdate) SetPassword(s string) *SysUserUpdate {
	suu.mutation.SetPassword(s)
	return suu
}

// SetNickName sets the "nickName" field.
func (suu *SysUserUpdate) SetNickName(s string) *SysUserUpdate {
	suu.mutation.SetNickName(s)
	return suu
}

// SetPhone sets the "phone" field.
func (suu *SysUserUpdate) SetPhone(s string) *SysUserUpdate {
	suu.mutation.SetPhone(s)
	return suu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillablePhone(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetPhone(*s)
	}
	return suu
}

// ClearPhone clears the value of the "phone" field.
func (suu *SysUserUpdate) ClearPhone() *SysUserUpdate {
	suu.mutation.ClearPhone()
	return suu
}

// SetDeptId sets the "deptId" field.
func (suu *SysUserUpdate) SetDeptId(i int64) *SysUserUpdate {
	suu.mutation.SetDeptId(i)
	return suu
}

// SetNillableDeptId sets the "deptId" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDeptId(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetDeptId(*i)
	}
	return suu
}

// ClearDeptId clears the value of the "deptId" field.
func (suu *SysUserUpdate) ClearDeptId() *SysUserUpdate {
	suu.mutation.ClearDeptId()
	return suu
}

// SetPostId sets the "postId" field.
func (suu *SysUserUpdate) SetPostId(i int64) *SysUserUpdate {
	suu.mutation.SetPostId(i)
	return suu
}

// SetNillablePostId sets the "postId" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillablePostId(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetPostId(*i)
	}
	return suu
}

// ClearPostId clears the value of the "postId" field.
func (suu *SysUserUpdate) ClearPostId() *SysUserUpdate {
	suu.mutation.ClearPostId()
	return suu
}

// SetRoleId sets the "roleId" field.
func (suu *SysUserUpdate) SetRoleId(i int64) *SysUserUpdate {
	suu.mutation.SetRoleId(i)
	return suu
}

// SetNillableRoleId sets the "roleId" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableRoleId(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetRoleId(*i)
	}
	return suu
}

// ClearRoleId clears the value of the "roleId" field.
func (suu *SysUserUpdate) ClearRoleId() *SysUserUpdate {
	suu.mutation.ClearRoleId()
	return suu
}

// SetAvatar sets the "avatar" field.
func (suu *SysUserUpdate) SetAvatar(s string) *SysUserUpdate {
	suu.mutation.SetAvatar(s)
	return suu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableAvatar(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetAvatar(*s)
	}
	return suu
}

// ClearAvatar clears the value of the "avatar" field.
func (suu *SysUserUpdate) ClearAvatar() *SysUserUpdate {
	suu.mutation.ClearAvatar()
	return suu
}

// SetSex sets the "sex" field.
func (suu *SysUserUpdate) SetSex(i int32) *SysUserUpdate {
	suu.mutation.ResetSex()
	suu.mutation.SetSex(i)
	return suu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableSex(i *int32) *SysUserUpdate {
	if i != nil {
		suu.SetSex(*i)
	}
	return suu
}

// AddSex adds i to the "sex" field.
func (suu *SysUserUpdate) AddSex(i int32) *SysUserUpdate {
	suu.mutation.AddSex(i)
	return suu
}

// ClearSex clears the value of the "sex" field.
func (suu *SysUserUpdate) ClearSex() *SysUserUpdate {
	suu.mutation.ClearSex()
	return suu
}

// SetEmail sets the "email" field.
func (suu *SysUserUpdate) SetEmail(s string) *SysUserUpdate {
	suu.mutation.SetEmail(s)
	return suu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableEmail(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetEmail(*s)
	}
	return suu
}

// ClearEmail clears the value of the "email" field.
func (suu *SysUserUpdate) ClearEmail() *SysUserUpdate {
	suu.mutation.ClearEmail()
	return suu
}

// SetRemark sets the "remark" field.
func (suu *SysUserUpdate) SetRemark(s string) *SysUserUpdate {
	suu.mutation.SetRemark(s)
	return suu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableRemark(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetRemark(*s)
	}
	return suu
}

// ClearRemark clears the value of the "remark" field.
func (suu *SysUserUpdate) ClearRemark() *SysUserUpdate {
	suu.mutation.ClearRemark()
	return suu
}

// SetDesc sets the "desc" field.
func (suu *SysUserUpdate) SetDesc(s string) *SysUserUpdate {
	suu.mutation.SetDesc(s)
	return suu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDesc(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetDesc(*s)
	}
	return suu
}

// ClearDesc clears the value of the "desc" field.
func (suu *SysUserUpdate) ClearDesc() *SysUserUpdate {
	suu.mutation.ClearDesc()
	return suu
}

// SetHomePath sets the "homePath" field.
func (suu *SysUserUpdate) SetHomePath(s string) *SysUserUpdate {
	suu.mutation.SetHomePath(s)
	return suu
}

// SetNillableHomePath sets the "homePath" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableHomePath(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetHomePath(*s)
	}
	return suu
}

// ClearHomePath clears the value of the "homePath" field.
func (suu *SysUserUpdate) ClearHomePath() *SysUserUpdate {
	suu.mutation.ClearHomePath()
	return suu
}

// SetStatus sets the "status" field.
func (suu *SysUserUpdate) SetStatus(s string) *SysUserUpdate {
	suu.mutation.SetStatus(s)
	return suu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableStatus(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetStatus(*s)
	}
	return suu
}

// ClearStatus clears the value of the "status" field.
func (suu *SysUserUpdate) ClearStatus() *SysUserUpdate {
	suu.mutation.ClearStatus()
	return suu
}

// SetUpdatedAt sets the "updatedAt" field.
func (suu *SysUserUpdate) SetUpdatedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetUpdatedAt(t)
	return suu
}

// SetCreateBy sets the "createBy" field.
func (suu *SysUserUpdate) SetCreateBy(i int64) *SysUserUpdate {
	suu.mutation.ResetCreateBy()
	suu.mutation.SetCreateBy(i)
	return suu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableCreateBy(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetCreateBy(*i)
	}
	return suu
}

// AddCreateBy adds i to the "createBy" field.
func (suu *SysUserUpdate) AddCreateBy(i int64) *SysUserUpdate {
	suu.mutation.AddCreateBy(i)
	return suu
}

// SetUpdateBy sets the "updateBy" field.
func (suu *SysUserUpdate) SetUpdateBy(i int64) *SysUserUpdate {
	suu.mutation.ResetUpdateBy()
	suu.mutation.SetUpdateBy(i)
	return suu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUpdateBy(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetUpdateBy(*i)
	}
	return suu
}

// AddUpdateBy adds i to the "updateBy" field.
func (suu *SysUserUpdate) AddUpdateBy(i int64) *SysUserUpdate {
	suu.mutation.AddUpdateBy(i)
	return suu
}

// SetTenantId sets the "tenantId" field.
func (suu *SysUserUpdate) SetTenantId(i int64) *SysUserUpdate {
	suu.mutation.ResetTenantId()
	suu.mutation.SetTenantId(i)
	return suu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableTenantId(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetTenantId(*i)
	}
	return suu
}

// AddTenantId adds i to the "tenantId" field.
func (suu *SysUserUpdate) AddTenantId(i int64) *SysUserUpdate {
	suu.mutation.AddTenantId(i)
	return suu
}

// SetDeptID sets the "dept" edge to the SysDept entity by ID.
func (suu *SysUserUpdate) SetDeptID(id int64) *SysUserUpdate {
	suu.mutation.SetDeptID(id)
	return suu
}

// SetNillableDeptID sets the "dept" edge to the SysDept entity by ID if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDeptID(id *int64) *SysUserUpdate {
	if id != nil {
		suu = suu.SetDeptID(*id)
	}
	return suu
}

// SetDept sets the "dept" edge to the SysDept entity.
func (suu *SysUserUpdate) SetDept(s *SysDept) *SysUserUpdate {
	return suu.SetDeptID(s.ID)
}

// SetPostID sets the "post" edge to the SysPost entity by ID.
func (suu *SysUserUpdate) SetPostID(id int64) *SysUserUpdate {
	suu.mutation.SetPostID(id)
	return suu
}

// SetNillablePostID sets the "post" edge to the SysPost entity by ID if the given value is not nil.
func (suu *SysUserUpdate) SetNillablePostID(id *int64) *SysUserUpdate {
	if id != nil {
		suu = suu.SetPostID(*id)
	}
	return suu
}

// SetPost sets the "post" edge to the SysPost entity.
func (suu *SysUserUpdate) SetPost(s *SysPost) *SysUserUpdate {
	return suu.SetPostID(s.ID)
}

// SetRoleID sets the "role" edge to the SysRole entity by ID.
func (suu *SysUserUpdate) SetRoleID(id int64) *SysUserUpdate {
	suu.mutation.SetRoleID(id)
	return suu
}

// SetNillableRoleID sets the "role" edge to the SysRole entity by ID if the given value is not nil.
func (suu *SysUserUpdate) SetNillableRoleID(id *int64) *SysUserUpdate {
	if id != nil {
		suu = suu.SetRoleID(*id)
	}
	return suu
}

// SetRole sets the "role" edge to the SysRole entity.
func (suu *SysUserUpdate) SetRole(s *SysRole) *SysUserUpdate {
	return suu.SetRoleID(s.ID)
}

// AddLoginLogIDs adds the "loginLogs" edge to the SysLoginLog entity by IDs.
func (suu *SysUserUpdate) AddLoginLogIDs(ids ...int64) *SysUserUpdate {
	suu.mutation.AddLoginLogIDs(ids...)
	return suu
}

// AddLoginLogs adds the "loginLogs" edges to the SysLoginLog entity.
func (suu *SysUserUpdate) AddLoginLogs(s ...*SysLoginLog) *SysUserUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suu.AddLoginLogIDs(ids...)
}

// AddOperaLogIDs adds the "operaLogs" edge to the SysOperaLog entity by IDs.
func (suu *SysUserUpdate) AddOperaLogIDs(ids ...int64) *SysUserUpdate {
	suu.mutation.AddOperaLogIDs(ids...)
	return suu
}

// AddOperaLogs adds the "operaLogs" edges to the SysOperaLog entity.
func (suu *SysUserUpdate) AddOperaLogs(s ...*SysOperaLog) *SysUserUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suu.AddOperaLogIDs(ids...)
}

// Mutation returns the SysUserMutation object of the builder.
func (suu *SysUserUpdate) Mutation() *SysUserMutation {
	return suu.mutation
}

// ClearDept clears the "dept" edge to the SysDept entity.
func (suu *SysUserUpdate) ClearDept() *SysUserUpdate {
	suu.mutation.ClearDept()
	return suu
}

// ClearPost clears the "post" edge to the SysPost entity.
func (suu *SysUserUpdate) ClearPost() *SysUserUpdate {
	suu.mutation.ClearPost()
	return suu
}

// ClearRole clears the "role" edge to the SysRole entity.
func (suu *SysUserUpdate) ClearRole() *SysUserUpdate {
	suu.mutation.ClearRole()
	return suu
}

// ClearLoginLogs clears all "loginLogs" edges to the SysLoginLog entity.
func (suu *SysUserUpdate) ClearLoginLogs() *SysUserUpdate {
	suu.mutation.ClearLoginLogs()
	return suu
}

// RemoveLoginLogIDs removes the "loginLogs" edge to SysLoginLog entities by IDs.
func (suu *SysUserUpdate) RemoveLoginLogIDs(ids ...int64) *SysUserUpdate {
	suu.mutation.RemoveLoginLogIDs(ids...)
	return suu
}

// RemoveLoginLogs removes "loginLogs" edges to SysLoginLog entities.
func (suu *SysUserUpdate) RemoveLoginLogs(s ...*SysLoginLog) *SysUserUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suu.RemoveLoginLogIDs(ids...)
}

// ClearOperaLogs clears all "operaLogs" edges to the SysOperaLog entity.
func (suu *SysUserUpdate) ClearOperaLogs() *SysUserUpdate {
	suu.mutation.ClearOperaLogs()
	return suu
}

// RemoveOperaLogIDs removes the "operaLogs" edge to SysOperaLog entities by IDs.
func (suu *SysUserUpdate) RemoveOperaLogIDs(ids ...int64) *SysUserUpdate {
	suu.mutation.RemoveOperaLogIDs(ids...)
	return suu
}

// RemoveOperaLogs removes "operaLogs" edges to SysOperaLog entities.
func (suu *SysUserUpdate) RemoveOperaLogs(s ...*SysOperaLog) *SysUserUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suu.RemoveOperaLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *SysUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	suu.defaults()
	if len(suu.hooks) == 0 {
		affected, err = suu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suu.mutation = mutation
			affected, err = suu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(suu.hooks) - 1; i >= 0; i-- {
			if suu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (suu *SysUserUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *SysUserUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *SysUserUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suu *SysUserUpdate) defaults() {
	if _, ok := suu.mutation.UpdatedAt(); !ok {
		v := sysuser.UpdateDefaultUpdatedAt()
		suu.mutation.SetUpdatedAt(v)
	}
}

func (suu *SysUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysuser.Table,
			Columns: sysuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysuser.FieldID,
			},
		},
	}
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldUsername,
		})
	}
	if value, ok := suu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldPassword,
		})
	}
	if value, ok := suu.mutation.NickName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldNickName,
		})
	}
	if value, ok := suu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldPhone,
		})
	}
	if suu.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldPhone,
		})
	}
	if value, ok := suu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldAvatar,
		})
	}
	if suu.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldAvatar,
		})
	}
	if value, ok := suu.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysuser.FieldSex,
		})
	}
	if value, ok := suu.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysuser.FieldSex,
		})
	}
	if suu.mutation.SexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysuser.FieldSex,
		})
	}
	if value, ok := suu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldEmail,
		})
	}
	if suu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldEmail,
		})
	}
	if value, ok := suu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldRemark,
		})
	}
	if suu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldRemark,
		})
	}
	if value, ok := suu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldDesc,
		})
	}
	if suu.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldDesc,
		})
	}
	if value, ok := suu.mutation.HomePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldHomePath,
		})
	}
	if suu.mutation.HomePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldHomePath,
		})
	}
	if value, ok := suu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldStatus,
		})
	}
	if suu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldStatus,
		})
	}
	if value, ok := suu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldUpdatedAt,
		})
	}
	if value, ok := suu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldCreateBy,
		})
	}
	if value, ok := suu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldCreateBy,
		})
	}
	if value, ok := suu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldUpdateBy,
		})
	}
	if value, ok := suu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldUpdateBy,
		})
	}
	if value, ok := suu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldTenantId,
		})
	}
	if value, ok := suu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldTenantId,
		})
	}
	if suu.mutation.DeptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.DeptTable,
			Columns: []string{sysuser.DeptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.DeptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.DeptTable,
			Columns: []string{sysuser.DeptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.PostTable,
			Columns: []string{sysuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: syspost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.PostTable,
			Columns: []string{sysuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: syspost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.RoleTable,
			Columns: []string{sysuser.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.RoleTable,
			Columns: []string{sysuser.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.LoginLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.LoginLogsTable,
			Columns: []string{sysuser.LoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysloginlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedLoginLogsIDs(); len(nodes) > 0 && !suu.mutation.LoginLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.LoginLogsTable,
			Columns: []string{sysuser.LoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.LoginLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.LoginLogsTable,
			Columns: []string{sysuser.LoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.OperaLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.OperaLogsTable,
			Columns: []string{sysuser.OperaLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysoperalog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedOperaLogsIDs(); len(nodes) > 0 && !suu.mutation.OperaLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.OperaLogsTable,
			Columns: []string{sysuser.OperaLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysoperalog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.OperaLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.OperaLogsTable,
			Columns: []string{sysuser.OperaLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysoperalog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysUserUpdateOne is the builder for updating a single SysUser entity.
type SysUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysUserMutation
}

// SetUsername sets the "username" field.
func (suuo *SysUserUpdateOne) SetUsername(s string) *SysUserUpdateOne {
	suuo.mutation.SetUsername(s)
	return suuo
}

// SetPassword sets the "password" field.
func (suuo *SysUserUpdateOne) SetPassword(s string) *SysUserUpdateOne {
	suuo.mutation.SetPassword(s)
	return suuo
}

// SetNickName sets the "nickName" field.
func (suuo *SysUserUpdateOne) SetNickName(s string) *SysUserUpdateOne {
	suuo.mutation.SetNickName(s)
	return suuo
}

// SetPhone sets the "phone" field.
func (suuo *SysUserUpdateOne) SetPhone(s string) *SysUserUpdateOne {
	suuo.mutation.SetPhone(s)
	return suuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillablePhone(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetPhone(*s)
	}
	return suuo
}

// ClearPhone clears the value of the "phone" field.
func (suuo *SysUserUpdateOne) ClearPhone() *SysUserUpdateOne {
	suuo.mutation.ClearPhone()
	return suuo
}

// SetDeptId sets the "deptId" field.
func (suuo *SysUserUpdateOne) SetDeptId(i int64) *SysUserUpdateOne {
	suuo.mutation.SetDeptId(i)
	return suuo
}

// SetNillableDeptId sets the "deptId" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDeptId(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetDeptId(*i)
	}
	return suuo
}

// ClearDeptId clears the value of the "deptId" field.
func (suuo *SysUserUpdateOne) ClearDeptId() *SysUserUpdateOne {
	suuo.mutation.ClearDeptId()
	return suuo
}

// SetPostId sets the "postId" field.
func (suuo *SysUserUpdateOne) SetPostId(i int64) *SysUserUpdateOne {
	suuo.mutation.SetPostId(i)
	return suuo
}

// SetNillablePostId sets the "postId" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillablePostId(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetPostId(*i)
	}
	return suuo
}

// ClearPostId clears the value of the "postId" field.
func (suuo *SysUserUpdateOne) ClearPostId() *SysUserUpdateOne {
	suuo.mutation.ClearPostId()
	return suuo
}

// SetRoleId sets the "roleId" field.
func (suuo *SysUserUpdateOne) SetRoleId(i int64) *SysUserUpdateOne {
	suuo.mutation.SetRoleId(i)
	return suuo
}

// SetNillableRoleId sets the "roleId" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableRoleId(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetRoleId(*i)
	}
	return suuo
}

// ClearRoleId clears the value of the "roleId" field.
func (suuo *SysUserUpdateOne) ClearRoleId() *SysUserUpdateOne {
	suuo.mutation.ClearRoleId()
	return suuo
}

// SetAvatar sets the "avatar" field.
func (suuo *SysUserUpdateOne) SetAvatar(s string) *SysUserUpdateOne {
	suuo.mutation.SetAvatar(s)
	return suuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableAvatar(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetAvatar(*s)
	}
	return suuo
}

// ClearAvatar clears the value of the "avatar" field.
func (suuo *SysUserUpdateOne) ClearAvatar() *SysUserUpdateOne {
	suuo.mutation.ClearAvatar()
	return suuo
}

// SetSex sets the "sex" field.
func (suuo *SysUserUpdateOne) SetSex(i int32) *SysUserUpdateOne {
	suuo.mutation.ResetSex()
	suuo.mutation.SetSex(i)
	return suuo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableSex(i *int32) *SysUserUpdateOne {
	if i != nil {
		suuo.SetSex(*i)
	}
	return suuo
}

// AddSex adds i to the "sex" field.
func (suuo *SysUserUpdateOne) AddSex(i int32) *SysUserUpdateOne {
	suuo.mutation.AddSex(i)
	return suuo
}

// ClearSex clears the value of the "sex" field.
func (suuo *SysUserUpdateOne) ClearSex() *SysUserUpdateOne {
	suuo.mutation.ClearSex()
	return suuo
}

// SetEmail sets the "email" field.
func (suuo *SysUserUpdateOne) SetEmail(s string) *SysUserUpdateOne {
	suuo.mutation.SetEmail(s)
	return suuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableEmail(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetEmail(*s)
	}
	return suuo
}

// ClearEmail clears the value of the "email" field.
func (suuo *SysUserUpdateOne) ClearEmail() *SysUserUpdateOne {
	suuo.mutation.ClearEmail()
	return suuo
}

// SetRemark sets the "remark" field.
func (suuo *SysUserUpdateOne) SetRemark(s string) *SysUserUpdateOne {
	suuo.mutation.SetRemark(s)
	return suuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableRemark(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetRemark(*s)
	}
	return suuo
}

// ClearRemark clears the value of the "remark" field.
func (suuo *SysUserUpdateOne) ClearRemark() *SysUserUpdateOne {
	suuo.mutation.ClearRemark()
	return suuo
}

// SetDesc sets the "desc" field.
func (suuo *SysUserUpdateOne) SetDesc(s string) *SysUserUpdateOne {
	suuo.mutation.SetDesc(s)
	return suuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDesc(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetDesc(*s)
	}
	return suuo
}

// ClearDesc clears the value of the "desc" field.
func (suuo *SysUserUpdateOne) ClearDesc() *SysUserUpdateOne {
	suuo.mutation.ClearDesc()
	return suuo
}

// SetHomePath sets the "homePath" field.
func (suuo *SysUserUpdateOne) SetHomePath(s string) *SysUserUpdateOne {
	suuo.mutation.SetHomePath(s)
	return suuo
}

// SetNillableHomePath sets the "homePath" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableHomePath(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetHomePath(*s)
	}
	return suuo
}

// ClearHomePath clears the value of the "homePath" field.
func (suuo *SysUserUpdateOne) ClearHomePath() *SysUserUpdateOne {
	suuo.mutation.ClearHomePath()
	return suuo
}

// SetStatus sets the "status" field.
func (suuo *SysUserUpdateOne) SetStatus(s string) *SysUserUpdateOne {
	suuo.mutation.SetStatus(s)
	return suuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableStatus(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetStatus(*s)
	}
	return suuo
}

// ClearStatus clears the value of the "status" field.
func (suuo *SysUserUpdateOne) ClearStatus() *SysUserUpdateOne {
	suuo.mutation.ClearStatus()
	return suuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (suuo *SysUserUpdateOne) SetUpdatedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetUpdatedAt(t)
	return suuo
}

// SetCreateBy sets the "createBy" field.
func (suuo *SysUserUpdateOne) SetCreateBy(i int64) *SysUserUpdateOne {
	suuo.mutation.ResetCreateBy()
	suuo.mutation.SetCreateBy(i)
	return suuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableCreateBy(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetCreateBy(*i)
	}
	return suuo
}

// AddCreateBy adds i to the "createBy" field.
func (suuo *SysUserUpdateOne) AddCreateBy(i int64) *SysUserUpdateOne {
	suuo.mutation.AddCreateBy(i)
	return suuo
}

// SetUpdateBy sets the "updateBy" field.
func (suuo *SysUserUpdateOne) SetUpdateBy(i int64) *SysUserUpdateOne {
	suuo.mutation.ResetUpdateBy()
	suuo.mutation.SetUpdateBy(i)
	return suuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUpdateBy(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetUpdateBy(*i)
	}
	return suuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (suuo *SysUserUpdateOne) AddUpdateBy(i int64) *SysUserUpdateOne {
	suuo.mutation.AddUpdateBy(i)
	return suuo
}

// SetTenantId sets the "tenantId" field.
func (suuo *SysUserUpdateOne) SetTenantId(i int64) *SysUserUpdateOne {
	suuo.mutation.ResetTenantId()
	suuo.mutation.SetTenantId(i)
	return suuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableTenantId(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetTenantId(*i)
	}
	return suuo
}

// AddTenantId adds i to the "tenantId" field.
func (suuo *SysUserUpdateOne) AddTenantId(i int64) *SysUserUpdateOne {
	suuo.mutation.AddTenantId(i)
	return suuo
}

// SetDeptID sets the "dept" edge to the SysDept entity by ID.
func (suuo *SysUserUpdateOne) SetDeptID(id int64) *SysUserUpdateOne {
	suuo.mutation.SetDeptID(id)
	return suuo
}

// SetNillableDeptID sets the "dept" edge to the SysDept entity by ID if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDeptID(id *int64) *SysUserUpdateOne {
	if id != nil {
		suuo = suuo.SetDeptID(*id)
	}
	return suuo
}

// SetDept sets the "dept" edge to the SysDept entity.
func (suuo *SysUserUpdateOne) SetDept(s *SysDept) *SysUserUpdateOne {
	return suuo.SetDeptID(s.ID)
}

// SetPostID sets the "post" edge to the SysPost entity by ID.
func (suuo *SysUserUpdateOne) SetPostID(id int64) *SysUserUpdateOne {
	suuo.mutation.SetPostID(id)
	return suuo
}

// SetNillablePostID sets the "post" edge to the SysPost entity by ID if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillablePostID(id *int64) *SysUserUpdateOne {
	if id != nil {
		suuo = suuo.SetPostID(*id)
	}
	return suuo
}

// SetPost sets the "post" edge to the SysPost entity.
func (suuo *SysUserUpdateOne) SetPost(s *SysPost) *SysUserUpdateOne {
	return suuo.SetPostID(s.ID)
}

// SetRoleID sets the "role" edge to the SysRole entity by ID.
func (suuo *SysUserUpdateOne) SetRoleID(id int64) *SysUserUpdateOne {
	suuo.mutation.SetRoleID(id)
	return suuo
}

// SetNillableRoleID sets the "role" edge to the SysRole entity by ID if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableRoleID(id *int64) *SysUserUpdateOne {
	if id != nil {
		suuo = suuo.SetRoleID(*id)
	}
	return suuo
}

// SetRole sets the "role" edge to the SysRole entity.
func (suuo *SysUserUpdateOne) SetRole(s *SysRole) *SysUserUpdateOne {
	return suuo.SetRoleID(s.ID)
}

// AddLoginLogIDs adds the "loginLogs" edge to the SysLoginLog entity by IDs.
func (suuo *SysUserUpdateOne) AddLoginLogIDs(ids ...int64) *SysUserUpdateOne {
	suuo.mutation.AddLoginLogIDs(ids...)
	return suuo
}

// AddLoginLogs adds the "loginLogs" edges to the SysLoginLog entity.
func (suuo *SysUserUpdateOne) AddLoginLogs(s ...*SysLoginLog) *SysUserUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suuo.AddLoginLogIDs(ids...)
}

// AddOperaLogIDs adds the "operaLogs" edge to the SysOperaLog entity by IDs.
func (suuo *SysUserUpdateOne) AddOperaLogIDs(ids ...int64) *SysUserUpdateOne {
	suuo.mutation.AddOperaLogIDs(ids...)
	return suuo
}

// AddOperaLogs adds the "operaLogs" edges to the SysOperaLog entity.
func (suuo *SysUserUpdateOne) AddOperaLogs(s ...*SysOperaLog) *SysUserUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suuo.AddOperaLogIDs(ids...)
}

// Mutation returns the SysUserMutation object of the builder.
func (suuo *SysUserUpdateOne) Mutation() *SysUserMutation {
	return suuo.mutation
}

// ClearDept clears the "dept" edge to the SysDept entity.
func (suuo *SysUserUpdateOne) ClearDept() *SysUserUpdateOne {
	suuo.mutation.ClearDept()
	return suuo
}

// ClearPost clears the "post" edge to the SysPost entity.
func (suuo *SysUserUpdateOne) ClearPost() *SysUserUpdateOne {
	suuo.mutation.ClearPost()
	return suuo
}

// ClearRole clears the "role" edge to the SysRole entity.
func (suuo *SysUserUpdateOne) ClearRole() *SysUserUpdateOne {
	suuo.mutation.ClearRole()
	return suuo
}

// ClearLoginLogs clears all "loginLogs" edges to the SysLoginLog entity.
func (suuo *SysUserUpdateOne) ClearLoginLogs() *SysUserUpdateOne {
	suuo.mutation.ClearLoginLogs()
	return suuo
}

// RemoveLoginLogIDs removes the "loginLogs" edge to SysLoginLog entities by IDs.
func (suuo *SysUserUpdateOne) RemoveLoginLogIDs(ids ...int64) *SysUserUpdateOne {
	suuo.mutation.RemoveLoginLogIDs(ids...)
	return suuo
}

// RemoveLoginLogs removes "loginLogs" edges to SysLoginLog entities.
func (suuo *SysUserUpdateOne) RemoveLoginLogs(s ...*SysLoginLog) *SysUserUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suuo.RemoveLoginLogIDs(ids...)
}

// ClearOperaLogs clears all "operaLogs" edges to the SysOperaLog entity.
func (suuo *SysUserUpdateOne) ClearOperaLogs() *SysUserUpdateOne {
	suuo.mutation.ClearOperaLogs()
	return suuo
}

// RemoveOperaLogIDs removes the "operaLogs" edge to SysOperaLog entities by IDs.
func (suuo *SysUserUpdateOne) RemoveOperaLogIDs(ids ...int64) *SysUserUpdateOne {
	suuo.mutation.RemoveOperaLogIDs(ids...)
	return suuo
}

// RemoveOperaLogs removes "operaLogs" edges to SysOperaLog entities.
func (suuo *SysUserUpdateOne) RemoveOperaLogs(s ...*SysOperaLog) *SysUserUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suuo.RemoveOperaLogIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *SysUserUpdateOne) Select(field string, fields ...string) *SysUserUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated SysUser entity.
func (suuo *SysUserUpdateOne) Save(ctx context.Context) (*SysUser, error) {
	var (
		err  error
		node *SysUser
	)
	suuo.defaults()
	if len(suuo.hooks) == 0 {
		node, err = suuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suuo.mutation = mutation
			node, err = suuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suuo.hooks) - 1; i >= 0; i-- {
			if suuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *SysUserUpdateOne) SaveX(ctx context.Context) *SysUser {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *SysUserUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *SysUserUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suuo *SysUserUpdateOne) defaults() {
	if _, ok := suuo.mutation.UpdatedAt(); !ok {
		v := sysuser.UpdateDefaultUpdatedAt()
		suuo.mutation.SetUpdatedAt(v)
	}
}

func (suuo *SysUserUpdateOne) sqlSave(ctx context.Context) (_node *SysUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysuser.Table,
			Columns: sysuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysuser.FieldID,
			},
		},
	}
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysuser.FieldID)
		for _, f := range fields {
			if !sysuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldUsername,
		})
	}
	if value, ok := suuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldPassword,
		})
	}
	if value, ok := suuo.mutation.NickName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldNickName,
		})
	}
	if value, ok := suuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldPhone,
		})
	}
	if suuo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldPhone,
		})
	}
	if value, ok := suuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldAvatar,
		})
	}
	if suuo.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldAvatar,
		})
	}
	if value, ok := suuo.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysuser.FieldSex,
		})
	}
	if value, ok := suuo.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysuser.FieldSex,
		})
	}
	if suuo.mutation.SexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysuser.FieldSex,
		})
	}
	if value, ok := suuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldEmail,
		})
	}
	if suuo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldEmail,
		})
	}
	if value, ok := suuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldRemark,
		})
	}
	if suuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldRemark,
		})
	}
	if value, ok := suuo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldDesc,
		})
	}
	if suuo.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldDesc,
		})
	}
	if value, ok := suuo.mutation.HomePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldHomePath,
		})
	}
	if suuo.mutation.HomePathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldHomePath,
		})
	}
	if value, ok := suuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysuser.FieldStatus,
		})
	}
	if suuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysuser.FieldStatus,
		})
	}
	if value, ok := suuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysuser.FieldUpdatedAt,
		})
	}
	if value, ok := suuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldCreateBy,
		})
	}
	if value, ok := suuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldCreateBy,
		})
	}
	if value, ok := suuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldUpdateBy,
		})
	}
	if value, ok := suuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldUpdateBy,
		})
	}
	if value, ok := suuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldTenantId,
		})
	}
	if value, ok := suuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysuser.FieldTenantId,
		})
	}
	if suuo.mutation.DeptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.DeptTable,
			Columns: []string{sysuser.DeptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.DeptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.DeptTable,
			Columns: []string{sysuser.DeptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.PostTable,
			Columns: []string{sysuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: syspost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.PostTable,
			Columns: []string{sysuser.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: syspost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.RoleTable,
			Columns: []string{sysuser.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysuser.RoleTable,
			Columns: []string{sysuser.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.LoginLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.LoginLogsTable,
			Columns: []string{sysuser.LoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysloginlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedLoginLogsIDs(); len(nodes) > 0 && !suuo.mutation.LoginLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.LoginLogsTable,
			Columns: []string{sysuser.LoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.LoginLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.LoginLogsTable,
			Columns: []string{sysuser.LoginLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysloginlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.OperaLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.OperaLogsTable,
			Columns: []string{sysuser.OperaLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysoperalog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedOperaLogsIDs(); len(nodes) > 0 && !suuo.mutation.OperaLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.OperaLogsTable,
			Columns: []string{sysuser.OperaLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysoperalog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.OperaLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysuser.OperaLogsTable,
			Columns: []string{sysuser.OperaLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysoperalog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysUser{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
