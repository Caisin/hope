// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/param/internal/data/ent/predicate"
	"hope/apps/param/internal/data/ent/resourcestorage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResourceStorageUpdate is the builder for updating ResourceStorage entities.
type ResourceStorageUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceStorageMutation
}

// Where appends a list predicates to the ResourceStorageUpdate builder.
func (rsu *ResourceStorageUpdate) Where(ps ...predicate.ResourceStorage) *ResourceStorageUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetGroupId sets the "groupId" field.
func (rsu *ResourceStorageUpdate) SetGroupId(i int32) *ResourceStorageUpdate {
	rsu.mutation.ResetGroupId()
	rsu.mutation.SetGroupId(i)
	return rsu
}

// SetNillableGroupId sets the "groupId" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableGroupId(i *int32) *ResourceStorageUpdate {
	if i != nil {
		rsu.SetGroupId(*i)
	}
	return rsu
}

// AddGroupId adds i to the "groupId" field.
func (rsu *ResourceStorageUpdate) AddGroupId(i int32) *ResourceStorageUpdate {
	rsu.mutation.AddGroupId(i)
	return rsu
}

// ClearGroupId clears the value of the "groupId" field.
func (rsu *ResourceStorageUpdate) ClearGroupId() *ResourceStorageUpdate {
	rsu.mutation.ClearGroupId()
	return rsu
}

// SetStorageType sets the "storageType" field.
func (rsu *ResourceStorageUpdate) SetStorageType(i int32) *ResourceStorageUpdate {
	rsu.mutation.ResetStorageType()
	rsu.mutation.SetStorageType(i)
	return rsu
}

// SetNillableStorageType sets the "storageType" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableStorageType(i *int32) *ResourceStorageUpdate {
	if i != nil {
		rsu.SetStorageType(*i)
	}
	return rsu
}

// AddStorageType adds i to the "storageType" field.
func (rsu *ResourceStorageUpdate) AddStorageType(i int32) *ResourceStorageUpdate {
	rsu.mutation.AddStorageType(i)
	return rsu
}

// ClearStorageType clears the value of the "storageType" field.
func (rsu *ResourceStorageUpdate) ClearStorageType() *ResourceStorageUpdate {
	rsu.mutation.ClearStorageType()
	return rsu
}

// SetRealName sets the "realName" field.
func (rsu *ResourceStorageUpdate) SetRealName(s string) *ResourceStorageUpdate {
	rsu.mutation.SetRealName(s)
	return rsu
}

// SetNillableRealName sets the "realName" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableRealName(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetRealName(*s)
	}
	return rsu
}

// ClearRealName clears the value of the "realName" field.
func (rsu *ResourceStorageUpdate) ClearRealName() *ResourceStorageUpdate {
	rsu.mutation.ClearRealName()
	return rsu
}

// SetBucket sets the "bucket" field.
func (rsu *ResourceStorageUpdate) SetBucket(s string) *ResourceStorageUpdate {
	rsu.mutation.SetBucket(s)
	return rsu
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableBucket(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetBucket(*s)
	}
	return rsu
}

// ClearBucket clears the value of the "bucket" field.
func (rsu *ResourceStorageUpdate) ClearBucket() *ResourceStorageUpdate {
	rsu.mutation.ClearBucket()
	return rsu
}

// SetName sets the "name" field.
func (rsu *ResourceStorageUpdate) SetName(s string) *ResourceStorageUpdate {
	rsu.mutation.SetName(s)
	return rsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableName(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetName(*s)
	}
	return rsu
}

// ClearName clears the value of the "name" field.
func (rsu *ResourceStorageUpdate) ClearName() *ResourceStorageUpdate {
	rsu.mutation.ClearName()
	return rsu
}

// SetSuffix sets the "suffix" field.
func (rsu *ResourceStorageUpdate) SetSuffix(s string) *ResourceStorageUpdate {
	rsu.mutation.SetSuffix(s)
	return rsu
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableSuffix(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetSuffix(*s)
	}
	return rsu
}

// ClearSuffix clears the value of the "suffix" field.
func (rsu *ResourceStorageUpdate) ClearSuffix() *ResourceStorageUpdate {
	rsu.mutation.ClearSuffix()
	return rsu
}

// SetPath sets the "path" field.
func (rsu *ResourceStorageUpdate) SetPath(s string) *ResourceStorageUpdate {
	rsu.mutation.SetPath(s)
	return rsu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillablePath(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetPath(*s)
	}
	return rsu
}

// ClearPath clears the value of the "path" field.
func (rsu *ResourceStorageUpdate) ClearPath() *ResourceStorageUpdate {
	rsu.mutation.ClearPath()
	return rsu
}

// SetType sets the "type" field.
func (rsu *ResourceStorageUpdate) SetType(s string) *ResourceStorageUpdate {
	rsu.mutation.SetType(s)
	return rsu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableType(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetType(*s)
	}
	return rsu
}

// ClearType clears the value of the "type" field.
func (rsu *ResourceStorageUpdate) ClearType() *ResourceStorageUpdate {
	rsu.mutation.ClearType()
	return rsu
}

// SetSize sets the "size" field.
func (rsu *ResourceStorageUpdate) SetSize(s string) *ResourceStorageUpdate {
	rsu.mutation.SetSize(s)
	return rsu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableSize(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetSize(*s)
	}
	return rsu
}

// ClearSize clears the value of the "size" field.
func (rsu *ResourceStorageUpdate) ClearSize() *ResourceStorageUpdate {
	rsu.mutation.ClearSize()
	return rsu
}

// SetDeleteUrl sets the "deleteUrl" field.
func (rsu *ResourceStorageUpdate) SetDeleteUrl(s string) *ResourceStorageUpdate {
	rsu.mutation.SetDeleteUrl(s)
	return rsu
}

// SetNillableDeleteUrl sets the "deleteUrl" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableDeleteUrl(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetDeleteUrl(*s)
	}
	return rsu
}

// ClearDeleteUrl clears the value of the "deleteUrl" field.
func (rsu *ResourceStorageUpdate) ClearDeleteUrl() *ResourceStorageUpdate {
	rsu.mutation.ClearDeleteUrl()
	return rsu
}

// SetFilename sets the "filename" field.
func (rsu *ResourceStorageUpdate) SetFilename(s string) *ResourceStorageUpdate {
	rsu.mutation.SetFilename(s)
	return rsu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableFilename(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetFilename(*s)
	}
	return rsu
}

// ClearFilename clears the value of the "filename" field.
func (rsu *ResourceStorageUpdate) ClearFilename() *ResourceStorageUpdate {
	rsu.mutation.ClearFilename()
	return rsu
}

// SetKey sets the "key" field.
func (rsu *ResourceStorageUpdate) SetKey(s string) *ResourceStorageUpdate {
	rsu.mutation.SetKey(s)
	return rsu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableKey(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetKey(*s)
	}
	return rsu
}

// ClearKey clears the value of the "key" field.
func (rsu *ResourceStorageUpdate) ClearKey() *ResourceStorageUpdate {
	rsu.mutation.ClearKey()
	return rsu
}

// SetHeight sets the "height" field.
func (rsu *ResourceStorageUpdate) SetHeight(s string) *ResourceStorageUpdate {
	rsu.mutation.SetHeight(s)
	return rsu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableHeight(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetHeight(*s)
	}
	return rsu
}

// ClearHeight clears the value of the "height" field.
func (rsu *ResourceStorageUpdate) ClearHeight() *ResourceStorageUpdate {
	rsu.mutation.ClearHeight()
	return rsu
}

// SetURL sets the "url" field.
func (rsu *ResourceStorageUpdate) SetURL(s string) *ResourceStorageUpdate {
	rsu.mutation.SetURL(s)
	return rsu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableURL(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetURL(*s)
	}
	return rsu
}

// ClearURL clears the value of the "url" field.
func (rsu *ResourceStorageUpdate) ClearURL() *ResourceStorageUpdate {
	rsu.mutation.ClearURL()
	return rsu
}

// SetUsername sets the "username" field.
func (rsu *ResourceStorageUpdate) SetUsername(s string) *ResourceStorageUpdate {
	rsu.mutation.SetUsername(s)
	return rsu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableUsername(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetUsername(*s)
	}
	return rsu
}

// ClearUsername clears the value of the "username" field.
func (rsu *ResourceStorageUpdate) ClearUsername() *ResourceStorageUpdate {
	rsu.mutation.ClearUsername()
	return rsu
}

// SetWidth sets the "width" field.
func (rsu *ResourceStorageUpdate) SetWidth(s string) *ResourceStorageUpdate {
	rsu.mutation.SetWidth(s)
	return rsu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableWidth(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetWidth(*s)
	}
	return rsu
}

// ClearWidth clears the value of the "width" field.
func (rsu *ResourceStorageUpdate) ClearWidth() *ResourceStorageUpdate {
	rsu.mutation.ClearWidth()
	return rsu
}

// SetMd5code sets the "md5code" field.
func (rsu *ResourceStorageUpdate) SetMd5code(s string) *ResourceStorageUpdate {
	rsu.mutation.SetMd5code(s)
	return rsu
}

// SetNillableMd5code sets the "md5code" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableMd5code(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetMd5code(*s)
	}
	return rsu
}

// ClearMd5code clears the value of the "md5code" field.
func (rsu *ResourceStorageUpdate) ClearMd5code() *ResourceStorageUpdate {
	rsu.mutation.ClearMd5code()
	return rsu
}

// SetRemark sets the "remark" field.
func (rsu *ResourceStorageUpdate) SetRemark(s string) *ResourceStorageUpdate {
	rsu.mutation.SetRemark(s)
	return rsu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableRemark(s *string) *ResourceStorageUpdate {
	if s != nil {
		rsu.SetRemark(*s)
	}
	return rsu
}

// ClearRemark clears the value of the "remark" field.
func (rsu *ResourceStorageUpdate) ClearRemark() *ResourceStorageUpdate {
	rsu.mutation.ClearRemark()
	return rsu
}

// SetUpdatedAt sets the "updatedAt" field.
func (rsu *ResourceStorageUpdate) SetUpdatedAt(t time.Time) *ResourceStorageUpdate {
	rsu.mutation.SetUpdatedAt(t)
	return rsu
}

// SetCreateBy sets the "createBy" field.
func (rsu *ResourceStorageUpdate) SetCreateBy(i int64) *ResourceStorageUpdate {
	rsu.mutation.ResetCreateBy()
	rsu.mutation.SetCreateBy(i)
	return rsu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableCreateBy(i *int64) *ResourceStorageUpdate {
	if i != nil {
		rsu.SetCreateBy(*i)
	}
	return rsu
}

// AddCreateBy adds i to the "createBy" field.
func (rsu *ResourceStorageUpdate) AddCreateBy(i int64) *ResourceStorageUpdate {
	rsu.mutation.AddCreateBy(i)
	return rsu
}

// SetUpdateBy sets the "updateBy" field.
func (rsu *ResourceStorageUpdate) SetUpdateBy(i int64) *ResourceStorageUpdate {
	rsu.mutation.ResetUpdateBy()
	rsu.mutation.SetUpdateBy(i)
	return rsu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableUpdateBy(i *int64) *ResourceStorageUpdate {
	if i != nil {
		rsu.SetUpdateBy(*i)
	}
	return rsu
}

// AddUpdateBy adds i to the "updateBy" field.
func (rsu *ResourceStorageUpdate) AddUpdateBy(i int64) *ResourceStorageUpdate {
	rsu.mutation.AddUpdateBy(i)
	return rsu
}

// SetTenantId sets the "tenantId" field.
func (rsu *ResourceStorageUpdate) SetTenantId(i int64) *ResourceStorageUpdate {
	rsu.mutation.ResetTenantId()
	rsu.mutation.SetTenantId(i)
	return rsu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (rsu *ResourceStorageUpdate) SetNillableTenantId(i *int64) *ResourceStorageUpdate {
	if i != nil {
		rsu.SetTenantId(*i)
	}
	return rsu
}

// AddTenantId adds i to the "tenantId" field.
func (rsu *ResourceStorageUpdate) AddTenantId(i int64) *ResourceStorageUpdate {
	rsu.mutation.AddTenantId(i)
	return rsu
}

// Mutation returns the ResourceStorageMutation object of the builder.
func (rsu *ResourceStorageUpdate) Mutation() *ResourceStorageMutation {
	return rsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *ResourceStorageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rsu.defaults()
	if len(rsu.hooks) == 0 {
		affected, err = rsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceStorageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rsu.mutation = mutation
			affected, err = rsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rsu.hooks) - 1; i >= 0; i-- {
			if rsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *ResourceStorageUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *ResourceStorageUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *ResourceStorageUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsu *ResourceStorageUpdate) defaults() {
	if _, ok := rsu.mutation.UpdatedAt(); !ok {
		v := resourcestorage.UpdateDefaultUpdatedAt()
		rsu.mutation.SetUpdatedAt(v)
	}
}

func (rsu *ResourceStorageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcestorage.Table,
			Columns: resourcestorage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: resourcestorage.FieldID,
			},
		},
	}
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.GroupId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldGroupId,
		})
	}
	if value, ok := rsu.mutation.AddedGroupId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldGroupId,
		})
	}
	if rsu.mutation.GroupIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: resourcestorage.FieldGroupId,
		})
	}
	if value, ok := rsu.mutation.StorageType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldStorageType,
		})
	}
	if value, ok := rsu.mutation.AddedStorageType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldStorageType,
		})
	}
	if rsu.mutation.StorageTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: resourcestorage.FieldStorageType,
		})
	}
	if value, ok := rsu.mutation.RealName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldRealName,
		})
	}
	if rsu.mutation.RealNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldRealName,
		})
	}
	if value, ok := rsu.mutation.Bucket(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldBucket,
		})
	}
	if rsu.mutation.BucketCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldBucket,
		})
	}
	if value, ok := rsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldName,
		})
	}
	if rsu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldName,
		})
	}
	if value, ok := rsu.mutation.Suffix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldSuffix,
		})
	}
	if rsu.mutation.SuffixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldSuffix,
		})
	}
	if value, ok := rsu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldPath,
		})
	}
	if rsu.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldPath,
		})
	}
	if value, ok := rsu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldType,
		})
	}
	if rsu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldType,
		})
	}
	if value, ok := rsu.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldSize,
		})
	}
	if rsu.mutation.SizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldSize,
		})
	}
	if value, ok := rsu.mutation.DeleteUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldDeleteUrl,
		})
	}
	if rsu.mutation.DeleteUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldDeleteUrl,
		})
	}
	if value, ok := rsu.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldFilename,
		})
	}
	if rsu.mutation.FilenameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldFilename,
		})
	}
	if value, ok := rsu.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldKey,
		})
	}
	if rsu.mutation.KeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldKey,
		})
	}
	if value, ok := rsu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldHeight,
		})
	}
	if rsu.mutation.HeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldHeight,
		})
	}
	if value, ok := rsu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldURL,
		})
	}
	if rsu.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldURL,
		})
	}
	if value, ok := rsu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldUsername,
		})
	}
	if rsu.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldUsername,
		})
	}
	if value, ok := rsu.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldWidth,
		})
	}
	if rsu.mutation.WidthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldWidth,
		})
	}
	if value, ok := rsu.mutation.Md5code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldMd5code,
		})
	}
	if rsu.mutation.Md5codeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldMd5code,
		})
	}
	if value, ok := rsu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldRemark,
		})
	}
	if rsu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldRemark,
		})
	}
	if value, ok := rsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcestorage.FieldUpdatedAt,
		})
	}
	if value, ok := rsu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldCreateBy,
		})
	}
	if value, ok := rsu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldCreateBy,
		})
	}
	if value, ok := rsu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldUpdateBy,
		})
	}
	if value, ok := rsu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldUpdateBy,
		})
	}
	if value, ok := rsu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldTenantId,
		})
	}
	if value, ok := rsu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcestorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ResourceStorageUpdateOne is the builder for updating a single ResourceStorage entity.
type ResourceStorageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResourceStorageMutation
}

// SetGroupId sets the "groupId" field.
func (rsuo *ResourceStorageUpdateOne) SetGroupId(i int32) *ResourceStorageUpdateOne {
	rsuo.mutation.ResetGroupId()
	rsuo.mutation.SetGroupId(i)
	return rsuo
}

// SetNillableGroupId sets the "groupId" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableGroupId(i *int32) *ResourceStorageUpdateOne {
	if i != nil {
		rsuo.SetGroupId(*i)
	}
	return rsuo
}

// AddGroupId adds i to the "groupId" field.
func (rsuo *ResourceStorageUpdateOne) AddGroupId(i int32) *ResourceStorageUpdateOne {
	rsuo.mutation.AddGroupId(i)
	return rsuo
}

// ClearGroupId clears the value of the "groupId" field.
func (rsuo *ResourceStorageUpdateOne) ClearGroupId() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearGroupId()
	return rsuo
}

// SetStorageType sets the "storageType" field.
func (rsuo *ResourceStorageUpdateOne) SetStorageType(i int32) *ResourceStorageUpdateOne {
	rsuo.mutation.ResetStorageType()
	rsuo.mutation.SetStorageType(i)
	return rsuo
}

// SetNillableStorageType sets the "storageType" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableStorageType(i *int32) *ResourceStorageUpdateOne {
	if i != nil {
		rsuo.SetStorageType(*i)
	}
	return rsuo
}

// AddStorageType adds i to the "storageType" field.
func (rsuo *ResourceStorageUpdateOne) AddStorageType(i int32) *ResourceStorageUpdateOne {
	rsuo.mutation.AddStorageType(i)
	return rsuo
}

// ClearStorageType clears the value of the "storageType" field.
func (rsuo *ResourceStorageUpdateOne) ClearStorageType() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearStorageType()
	return rsuo
}

// SetRealName sets the "realName" field.
func (rsuo *ResourceStorageUpdateOne) SetRealName(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetRealName(s)
	return rsuo
}

// SetNillableRealName sets the "realName" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableRealName(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetRealName(*s)
	}
	return rsuo
}

// ClearRealName clears the value of the "realName" field.
func (rsuo *ResourceStorageUpdateOne) ClearRealName() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearRealName()
	return rsuo
}

// SetBucket sets the "bucket" field.
func (rsuo *ResourceStorageUpdateOne) SetBucket(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetBucket(s)
	return rsuo
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableBucket(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetBucket(*s)
	}
	return rsuo
}

// ClearBucket clears the value of the "bucket" field.
func (rsuo *ResourceStorageUpdateOne) ClearBucket() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearBucket()
	return rsuo
}

// SetName sets the "name" field.
func (rsuo *ResourceStorageUpdateOne) SetName(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetName(s)
	return rsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableName(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetName(*s)
	}
	return rsuo
}

// ClearName clears the value of the "name" field.
func (rsuo *ResourceStorageUpdateOne) ClearName() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearName()
	return rsuo
}

// SetSuffix sets the "suffix" field.
func (rsuo *ResourceStorageUpdateOne) SetSuffix(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetSuffix(s)
	return rsuo
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableSuffix(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetSuffix(*s)
	}
	return rsuo
}

// ClearSuffix clears the value of the "suffix" field.
func (rsuo *ResourceStorageUpdateOne) ClearSuffix() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearSuffix()
	return rsuo
}

// SetPath sets the "path" field.
func (rsuo *ResourceStorageUpdateOne) SetPath(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetPath(s)
	return rsuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillablePath(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetPath(*s)
	}
	return rsuo
}

// ClearPath clears the value of the "path" field.
func (rsuo *ResourceStorageUpdateOne) ClearPath() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearPath()
	return rsuo
}

// SetType sets the "type" field.
func (rsuo *ResourceStorageUpdateOne) SetType(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetType(s)
	return rsuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableType(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetType(*s)
	}
	return rsuo
}

// ClearType clears the value of the "type" field.
func (rsuo *ResourceStorageUpdateOne) ClearType() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearType()
	return rsuo
}

// SetSize sets the "size" field.
func (rsuo *ResourceStorageUpdateOne) SetSize(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetSize(s)
	return rsuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableSize(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetSize(*s)
	}
	return rsuo
}

// ClearSize clears the value of the "size" field.
func (rsuo *ResourceStorageUpdateOne) ClearSize() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearSize()
	return rsuo
}

// SetDeleteUrl sets the "deleteUrl" field.
func (rsuo *ResourceStorageUpdateOne) SetDeleteUrl(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetDeleteUrl(s)
	return rsuo
}

// SetNillableDeleteUrl sets the "deleteUrl" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableDeleteUrl(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetDeleteUrl(*s)
	}
	return rsuo
}

// ClearDeleteUrl clears the value of the "deleteUrl" field.
func (rsuo *ResourceStorageUpdateOne) ClearDeleteUrl() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearDeleteUrl()
	return rsuo
}

// SetFilename sets the "filename" field.
func (rsuo *ResourceStorageUpdateOne) SetFilename(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetFilename(s)
	return rsuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableFilename(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetFilename(*s)
	}
	return rsuo
}

// ClearFilename clears the value of the "filename" field.
func (rsuo *ResourceStorageUpdateOne) ClearFilename() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearFilename()
	return rsuo
}

// SetKey sets the "key" field.
func (rsuo *ResourceStorageUpdateOne) SetKey(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetKey(s)
	return rsuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableKey(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetKey(*s)
	}
	return rsuo
}

// ClearKey clears the value of the "key" field.
func (rsuo *ResourceStorageUpdateOne) ClearKey() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearKey()
	return rsuo
}

// SetHeight sets the "height" field.
func (rsuo *ResourceStorageUpdateOne) SetHeight(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetHeight(s)
	return rsuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableHeight(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetHeight(*s)
	}
	return rsuo
}

// ClearHeight clears the value of the "height" field.
func (rsuo *ResourceStorageUpdateOne) ClearHeight() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearHeight()
	return rsuo
}

// SetURL sets the "url" field.
func (rsuo *ResourceStorageUpdateOne) SetURL(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetURL(s)
	return rsuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableURL(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetURL(*s)
	}
	return rsuo
}

// ClearURL clears the value of the "url" field.
func (rsuo *ResourceStorageUpdateOne) ClearURL() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearURL()
	return rsuo
}

// SetUsername sets the "username" field.
func (rsuo *ResourceStorageUpdateOne) SetUsername(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetUsername(s)
	return rsuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableUsername(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetUsername(*s)
	}
	return rsuo
}

// ClearUsername clears the value of the "username" field.
func (rsuo *ResourceStorageUpdateOne) ClearUsername() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearUsername()
	return rsuo
}

// SetWidth sets the "width" field.
func (rsuo *ResourceStorageUpdateOne) SetWidth(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetWidth(s)
	return rsuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableWidth(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetWidth(*s)
	}
	return rsuo
}

// ClearWidth clears the value of the "width" field.
func (rsuo *ResourceStorageUpdateOne) ClearWidth() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearWidth()
	return rsuo
}

// SetMd5code sets the "md5code" field.
func (rsuo *ResourceStorageUpdateOne) SetMd5code(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetMd5code(s)
	return rsuo
}

// SetNillableMd5code sets the "md5code" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableMd5code(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetMd5code(*s)
	}
	return rsuo
}

// ClearMd5code clears the value of the "md5code" field.
func (rsuo *ResourceStorageUpdateOne) ClearMd5code() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearMd5code()
	return rsuo
}

// SetRemark sets the "remark" field.
func (rsuo *ResourceStorageUpdateOne) SetRemark(s string) *ResourceStorageUpdateOne {
	rsuo.mutation.SetRemark(s)
	return rsuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableRemark(s *string) *ResourceStorageUpdateOne {
	if s != nil {
		rsuo.SetRemark(*s)
	}
	return rsuo
}

// ClearRemark clears the value of the "remark" field.
func (rsuo *ResourceStorageUpdateOne) ClearRemark() *ResourceStorageUpdateOne {
	rsuo.mutation.ClearRemark()
	return rsuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (rsuo *ResourceStorageUpdateOne) SetUpdatedAt(t time.Time) *ResourceStorageUpdateOne {
	rsuo.mutation.SetUpdatedAt(t)
	return rsuo
}

// SetCreateBy sets the "createBy" field.
func (rsuo *ResourceStorageUpdateOne) SetCreateBy(i int64) *ResourceStorageUpdateOne {
	rsuo.mutation.ResetCreateBy()
	rsuo.mutation.SetCreateBy(i)
	return rsuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableCreateBy(i *int64) *ResourceStorageUpdateOne {
	if i != nil {
		rsuo.SetCreateBy(*i)
	}
	return rsuo
}

// AddCreateBy adds i to the "createBy" field.
func (rsuo *ResourceStorageUpdateOne) AddCreateBy(i int64) *ResourceStorageUpdateOne {
	rsuo.mutation.AddCreateBy(i)
	return rsuo
}

// SetUpdateBy sets the "updateBy" field.
func (rsuo *ResourceStorageUpdateOne) SetUpdateBy(i int64) *ResourceStorageUpdateOne {
	rsuo.mutation.ResetUpdateBy()
	rsuo.mutation.SetUpdateBy(i)
	return rsuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableUpdateBy(i *int64) *ResourceStorageUpdateOne {
	if i != nil {
		rsuo.SetUpdateBy(*i)
	}
	return rsuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (rsuo *ResourceStorageUpdateOne) AddUpdateBy(i int64) *ResourceStorageUpdateOne {
	rsuo.mutation.AddUpdateBy(i)
	return rsuo
}

// SetTenantId sets the "tenantId" field.
func (rsuo *ResourceStorageUpdateOne) SetTenantId(i int64) *ResourceStorageUpdateOne {
	rsuo.mutation.ResetTenantId()
	rsuo.mutation.SetTenantId(i)
	return rsuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (rsuo *ResourceStorageUpdateOne) SetNillableTenantId(i *int64) *ResourceStorageUpdateOne {
	if i != nil {
		rsuo.SetTenantId(*i)
	}
	return rsuo
}

// AddTenantId adds i to the "tenantId" field.
func (rsuo *ResourceStorageUpdateOne) AddTenantId(i int64) *ResourceStorageUpdateOne {
	rsuo.mutation.AddTenantId(i)
	return rsuo
}

// Mutation returns the ResourceStorageMutation object of the builder.
func (rsuo *ResourceStorageUpdateOne) Mutation() *ResourceStorageMutation {
	return rsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *ResourceStorageUpdateOne) Select(field string, fields ...string) *ResourceStorageUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated ResourceStorage entity.
func (rsuo *ResourceStorageUpdateOne) Save(ctx context.Context) (*ResourceStorage, error) {
	var (
		err  error
		node *ResourceStorage
	)
	rsuo.defaults()
	if len(rsuo.hooks) == 0 {
		node, err = rsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceStorageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rsuo.mutation = mutation
			node, err = rsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rsuo.hooks) - 1; i >= 0; i-- {
			if rsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *ResourceStorageUpdateOne) SaveX(ctx context.Context) *ResourceStorage {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *ResourceStorageUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *ResourceStorageUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsuo *ResourceStorageUpdateOne) defaults() {
	if _, ok := rsuo.mutation.UpdatedAt(); !ok {
		v := resourcestorage.UpdateDefaultUpdatedAt()
		rsuo.mutation.SetUpdatedAt(v)
	}
}

func (rsuo *ResourceStorageUpdateOne) sqlSave(ctx context.Context) (_node *ResourceStorage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcestorage.Table,
			Columns: resourcestorage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: resourcestorage.FieldID,
			},
		},
	}
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceStorage.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourcestorage.FieldID)
		for _, f := range fields {
			if !resourcestorage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resourcestorage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.GroupId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldGroupId,
		})
	}
	if value, ok := rsuo.mutation.AddedGroupId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldGroupId,
		})
	}
	if rsuo.mutation.GroupIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: resourcestorage.FieldGroupId,
		})
	}
	if value, ok := rsuo.mutation.StorageType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldStorageType,
		})
	}
	if value, ok := rsuo.mutation.AddedStorageType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldStorageType,
		})
	}
	if rsuo.mutation.StorageTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: resourcestorage.FieldStorageType,
		})
	}
	if value, ok := rsuo.mutation.RealName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldRealName,
		})
	}
	if rsuo.mutation.RealNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldRealName,
		})
	}
	if value, ok := rsuo.mutation.Bucket(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldBucket,
		})
	}
	if rsuo.mutation.BucketCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldBucket,
		})
	}
	if value, ok := rsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldName,
		})
	}
	if rsuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldName,
		})
	}
	if value, ok := rsuo.mutation.Suffix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldSuffix,
		})
	}
	if rsuo.mutation.SuffixCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldSuffix,
		})
	}
	if value, ok := rsuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldPath,
		})
	}
	if rsuo.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldPath,
		})
	}
	if value, ok := rsuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldType,
		})
	}
	if rsuo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldType,
		})
	}
	if value, ok := rsuo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldSize,
		})
	}
	if rsuo.mutation.SizeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldSize,
		})
	}
	if value, ok := rsuo.mutation.DeleteUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldDeleteUrl,
		})
	}
	if rsuo.mutation.DeleteUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldDeleteUrl,
		})
	}
	if value, ok := rsuo.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldFilename,
		})
	}
	if rsuo.mutation.FilenameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldFilename,
		})
	}
	if value, ok := rsuo.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldKey,
		})
	}
	if rsuo.mutation.KeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldKey,
		})
	}
	if value, ok := rsuo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldHeight,
		})
	}
	if rsuo.mutation.HeightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldHeight,
		})
	}
	if value, ok := rsuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldURL,
		})
	}
	if rsuo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldURL,
		})
	}
	if value, ok := rsuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldUsername,
		})
	}
	if rsuo.mutation.UsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldUsername,
		})
	}
	if value, ok := rsuo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldWidth,
		})
	}
	if rsuo.mutation.WidthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldWidth,
		})
	}
	if value, ok := rsuo.mutation.Md5code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldMd5code,
		})
	}
	if rsuo.mutation.Md5codeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldMd5code,
		})
	}
	if value, ok := rsuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldRemark,
		})
	}
	if rsuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcestorage.FieldRemark,
		})
	}
	if value, ok := rsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcestorage.FieldUpdatedAt,
		})
	}
	if value, ok := rsuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldCreateBy,
		})
	}
	if value, ok := rsuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldCreateBy,
		})
	}
	if value, ok := rsuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldUpdateBy,
		})
	}
	if value, ok := rsuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldUpdateBy,
		})
	}
	if value, ok := rsuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldTenantId,
		})
	}
	if value, ok := rsuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldTenantId,
		})
	}
	_node = &ResourceStorage{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcestorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
