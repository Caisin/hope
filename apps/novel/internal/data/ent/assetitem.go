// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/assetitem"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AssetItem is the model entity for the AssetItem schema.
type AssetItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// AssetItemId holds the value of the "assetItemId" field.
	// 账本科目
	AssetItemId int32 `json:"assetItemId,omitempty"`
	// AssetName holds the value of the "assetName" field.
	// 账本名称
	AssetName string `json:"assetName,omitempty"`
	// CashTag holds the value of the "cashTag" field.
	// 现金标记,0书券1现金
	CashTag int32 `json:"cashTag,omitempty"`
	// ValidDays holds the value of the "validDays" field.
	// 有效天数
	ValidDays int32 `json:"validDays,omitempty"`
	// EffectTime holds the value of the "effectTime" field.
	// 生效时间
	EffectTime time.Time `json:"effectTime,omitempty"`
	// ExpiredTime holds the value of the "expiredTime" field.
	// 失效时间
	ExpiredTime time.Time `json:"expiredTime,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetitem.FieldID, assetitem.FieldAssetItemId, assetitem.FieldCashTag, assetitem.FieldValidDays, assetitem.FieldCreateBy, assetitem.FieldUpdateBy, assetitem.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case assetitem.FieldAssetName:
			values[i] = new(sql.NullString)
		case assetitem.FieldEffectTime, assetitem.FieldExpiredTime, assetitem.FieldCreatedAt, assetitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AssetItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetItem fields.
func (ai *AssetItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = int64(value.Int64)
		case assetitem.FieldAssetItemId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assetItemId", values[i])
			} else if value.Valid {
				ai.AssetItemId = int32(value.Int64)
			}
		case assetitem.FieldAssetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assetName", values[i])
			} else if value.Valid {
				ai.AssetName = value.String
			}
		case assetitem.FieldCashTag:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cashTag", values[i])
			} else if value.Valid {
				ai.CashTag = int32(value.Int64)
			}
		case assetitem.FieldValidDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field validDays", values[i])
			} else if value.Valid {
				ai.ValidDays = int32(value.Int64)
			}
		case assetitem.FieldEffectTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effectTime", values[i])
			} else if value.Valid {
				ai.EffectTime = value.Time
			}
		case assetitem.FieldExpiredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiredTime", values[i])
			} else if value.Valid {
				ai.ExpiredTime = value.Time
			}
		case assetitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ai.CreatedAt = value.Time
			}
		case assetitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ai.UpdatedAt = value.Time
			}
		case assetitem.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				ai.CreateBy = value.Int64
			}
		case assetitem.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				ai.UpdateBy = value.Int64
			}
		case assetitem.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				ai.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AssetItem.
// Note that you need to call AssetItem.Unwrap() before calling this method if this AssetItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AssetItem) Update() *AssetItemUpdateOne {
	return (&AssetItemClient{config: ai.config}).UpdateOne(ai)
}

// Unwrap unwraps the AssetItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AssetItem) Unwrap() *AssetItem {
	tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetItem is not a transactional entity")
	}
	ai.config.driver = tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AssetItem) String() string {
	var builder strings.Builder
	builder.WriteString("AssetItem(")
	builder.WriteString(fmt.Sprintf("id=%v", ai.ID))
	builder.WriteString(", assetItemId=")
	builder.WriteString(fmt.Sprintf("%v", ai.AssetItemId))
	builder.WriteString(", assetName=")
	builder.WriteString(ai.AssetName)
	builder.WriteString(", cashTag=")
	builder.WriteString(fmt.Sprintf("%v", ai.CashTag))
	builder.WriteString(", validDays=")
	builder.WriteString(fmt.Sprintf("%v", ai.ValidDays))
	builder.WriteString(", effectTime=")
	builder.WriteString(ai.EffectTime.Format(time.ANSIC))
	builder.WriteString(", expiredTime=")
	builder.WriteString(ai.ExpiredTime.Format(time.ANSIC))
	builder.WriteString(", createdAt=")
	builder.WriteString(ai.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(ai.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", ai.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", ai.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", ai.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// AssetItems is a parsable slice of AssetItem.
type AssetItems []*AssetItem

func (ai AssetItems) config(cfg config) {
	for _i := range ai {
		ai[_i].config = cfg
	}
}
