// Code generated by entc, DO NOT EDIT.

package novelchapter

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NovelId applies equality check predicate on the "novelId" field. It's identical to NovelIdEQ.
func NovelId(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// OrderNum applies equality check predicate on the "orderNum" field. It's identical to OrderNumEQ.
func OrderNum(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNum), v))
	})
}

// ChapterName applies equality check predicate on the "chapterName" field. It's identical to ChapterNameEQ.
func ChapterName(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterName), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// MediaKey applies equality check predicate on the "mediaKey" field. It's identical to MediaKeyEQ.
func MediaKey(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaKey), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// PublishTime applies equality check predicate on the "publishTime" field. It's identical to PublishTimeEQ.
func PublishTime(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublishTime), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// IsFree applies equality check predicate on the "isFree" field. It's identical to IsFreeEQ.
func IsFree(v bool) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFree), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// WordNum applies equality check predicate on the "wordNum" field. It's identical to WordNumEQ.
func WordNum(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWordNum), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// NovelIdEQ applies the EQ predicate on the "novelId" field.
func NovelIdEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// NovelIdNEQ applies the NEQ predicate on the "novelId" field.
func NovelIdNEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelId), v))
	})
}

// NovelIdIn applies the In predicate on the "novelId" field.
func NovelIdIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelId), v...))
	})
}

// NovelIdNotIn applies the NotIn predicate on the "novelId" field.
func NovelIdNotIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelId), v...))
	})
}

// OrderNumEQ applies the EQ predicate on the "orderNum" field.
func OrderNumEQ(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNum), v))
	})
}

// OrderNumNEQ applies the NEQ predicate on the "orderNum" field.
func OrderNumNEQ(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderNum), v))
	})
}

// OrderNumIn applies the In predicate on the "orderNum" field.
func OrderNumIn(vs ...int32) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderNum), v...))
	})
}

// OrderNumNotIn applies the NotIn predicate on the "orderNum" field.
func OrderNumNotIn(vs ...int32) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderNum), v...))
	})
}

// OrderNumGT applies the GT predicate on the "orderNum" field.
func OrderNumGT(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderNum), v))
	})
}

// OrderNumGTE applies the GTE predicate on the "orderNum" field.
func OrderNumGTE(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderNum), v))
	})
}

// OrderNumLT applies the LT predicate on the "orderNum" field.
func OrderNumLT(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderNum), v))
	})
}

// OrderNumLTE applies the LTE predicate on the "orderNum" field.
func OrderNumLTE(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderNum), v))
	})
}

// OrderNumIsNil applies the IsNil predicate on the "orderNum" field.
func OrderNumIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderNum)))
	})
}

// OrderNumNotNil applies the NotNil predicate on the "orderNum" field.
func OrderNumNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderNum)))
	})
}

// ChapterNameEQ applies the EQ predicate on the "chapterName" field.
func ChapterNameEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterName), v))
	})
}

// ChapterNameNEQ applies the NEQ predicate on the "chapterName" field.
func ChapterNameNEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterName), v))
	})
}

// ChapterNameIn applies the In predicate on the "chapterName" field.
func ChapterNameIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterName), v...))
	})
}

// ChapterNameNotIn applies the NotIn predicate on the "chapterName" field.
func ChapterNameNotIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterName), v...))
	})
}

// ChapterNameGT applies the GT predicate on the "chapterName" field.
func ChapterNameGT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterName), v))
	})
}

// ChapterNameGTE applies the GTE predicate on the "chapterName" field.
func ChapterNameGTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterName), v))
	})
}

// ChapterNameLT applies the LT predicate on the "chapterName" field.
func ChapterNameLT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterName), v))
	})
}

// ChapterNameLTE applies the LTE predicate on the "chapterName" field.
func ChapterNameLTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterName), v))
	})
}

// ChapterNameContains applies the Contains predicate on the "chapterName" field.
func ChapterNameContains(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChapterName), v))
	})
}

// ChapterNameHasPrefix applies the HasPrefix predicate on the "chapterName" field.
func ChapterNameHasPrefix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChapterName), v))
	})
}

// ChapterNameHasSuffix applies the HasSuffix predicate on the "chapterName" field.
func ChapterNameHasSuffix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChapterName), v))
	})
}

// ChapterNameIsNil applies the IsNil predicate on the "chapterName" field.
func ChapterNameIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterName)))
	})
}

// ChapterNameNotNil applies the NotNil predicate on the "chapterName" field.
func ChapterNameNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterName)))
	})
}

// ChapterNameEqualFold applies the EqualFold predicate on the "chapterName" field.
func ChapterNameEqualFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChapterName), v))
	})
}

// ChapterNameContainsFold applies the ContainsFold predicate on the "chapterName" field.
func ChapterNameContainsFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChapterName), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContent)))
	})
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContent)))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// MediaKeyEQ applies the EQ predicate on the "mediaKey" field.
func MediaKeyEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaKey), v))
	})
}

// MediaKeyNEQ applies the NEQ predicate on the "mediaKey" field.
func MediaKeyNEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediaKey), v))
	})
}

// MediaKeyIn applies the In predicate on the "mediaKey" field.
func MediaKeyIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMediaKey), v...))
	})
}

// MediaKeyNotIn applies the NotIn predicate on the "mediaKey" field.
func MediaKeyNotIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMediaKey), v...))
	})
}

// MediaKeyGT applies the GT predicate on the "mediaKey" field.
func MediaKeyGT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMediaKey), v))
	})
}

// MediaKeyGTE applies the GTE predicate on the "mediaKey" field.
func MediaKeyGTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMediaKey), v))
	})
}

// MediaKeyLT applies the LT predicate on the "mediaKey" field.
func MediaKeyLT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMediaKey), v))
	})
}

// MediaKeyLTE applies the LTE predicate on the "mediaKey" field.
func MediaKeyLTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMediaKey), v))
	})
}

// MediaKeyContains applies the Contains predicate on the "mediaKey" field.
func MediaKeyContains(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMediaKey), v))
	})
}

// MediaKeyHasPrefix applies the HasPrefix predicate on the "mediaKey" field.
func MediaKeyHasPrefix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMediaKey), v))
	})
}

// MediaKeyHasSuffix applies the HasSuffix predicate on the "mediaKey" field.
func MediaKeyHasSuffix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMediaKey), v))
	})
}

// MediaKeyIsNil applies the IsNil predicate on the "mediaKey" field.
func MediaKeyIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaKey)))
	})
}

// MediaKeyNotNil applies the NotNil predicate on the "mediaKey" field.
func MediaKeyNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaKey)))
	})
}

// MediaKeyEqualFold applies the EqualFold predicate on the "mediaKey" field.
func MediaKeyEqualFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMediaKey), v))
	})
}

// MediaKeyContainsFold applies the ContainsFold predicate on the "mediaKey" field.
func MediaKeyContainsFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMediaKey), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// DurationContains applies the Contains predicate on the "duration" field.
func DurationContains(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDuration), v))
	})
}

// DurationHasPrefix applies the HasPrefix predicate on the "duration" field.
func DurationHasPrefix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDuration), v))
	})
}

// DurationHasSuffix applies the HasSuffix predicate on the "duration" field.
func DurationHasSuffix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDuration), v))
	})
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDuration)))
	})
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDuration)))
	})
}

// DurationEqualFold applies the EqualFold predicate on the "duration" field.
func DurationEqualFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDuration), v))
	})
}

// DurationContainsFold applies the ContainsFold predicate on the "duration" field.
func DurationContainsFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDuration), v))
	})
}

// PublishTimeEQ applies the EQ predicate on the "publishTime" field.
func PublishTimeEQ(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublishTime), v))
	})
}

// PublishTimeNEQ applies the NEQ predicate on the "publishTime" field.
func PublishTimeNEQ(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublishTime), v))
	})
}

// PublishTimeIn applies the In predicate on the "publishTime" field.
func PublishTimeIn(vs ...time.Time) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublishTime), v...))
	})
}

// PublishTimeNotIn applies the NotIn predicate on the "publishTime" field.
func PublishTimeNotIn(vs ...time.Time) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublishTime), v...))
	})
}

// PublishTimeGT applies the GT predicate on the "publishTime" field.
func PublishTimeGT(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublishTime), v))
	})
}

// PublishTimeGTE applies the GTE predicate on the "publishTime" field.
func PublishTimeGTE(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublishTime), v))
	})
}

// PublishTimeLT applies the LT predicate on the "publishTime" field.
func PublishTimeLT(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublishTime), v))
	})
}

// PublishTimeLTE applies the LTE predicate on the "publishTime" field.
func PublishTimeLTE(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublishTime), v))
	})
}

// PublishTimeIsNil applies the IsNil predicate on the "publishTime" field.
func PublishTimeIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPublishTime)))
	})
}

// PublishTimeNotNil applies the NotNil predicate on the "publishTime" field.
func PublishTimeNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPublishTime)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// IsFreeEQ applies the EQ predicate on the "isFree" field.
func IsFreeEQ(v bool) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFree), v))
	})
}

// IsFreeNEQ applies the NEQ predicate on the "isFree" field.
func IsFreeNEQ(v bool) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsFree), v))
	})
}

// IsFreeIsNil applies the IsNil predicate on the "isFree" field.
func IsFreeIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsFree)))
	})
}

// IsFreeNotNil applies the NotNil predicate on the "isFree" field.
func IsFreeNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsFree)))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrice)))
	})
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrice)))
	})
}

// WordNumEQ applies the EQ predicate on the "wordNum" field.
func WordNumEQ(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWordNum), v))
	})
}

// WordNumNEQ applies the NEQ predicate on the "wordNum" field.
func WordNumNEQ(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWordNum), v))
	})
}

// WordNumIn applies the In predicate on the "wordNum" field.
func WordNumIn(vs ...int32) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWordNum), v...))
	})
}

// WordNumNotIn applies the NotIn predicate on the "wordNum" field.
func WordNumNotIn(vs ...int32) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWordNum), v...))
	})
}

// WordNumGT applies the GT predicate on the "wordNum" field.
func WordNumGT(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWordNum), v))
	})
}

// WordNumGTE applies the GTE predicate on the "wordNum" field.
func WordNumGTE(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWordNum), v))
	})
}

// WordNumLT applies the LT predicate on the "wordNum" field.
func WordNumLT(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWordNum), v))
	})
}

// WordNumLTE applies the LTE predicate on the "wordNum" field.
func WordNumLTE(v int32) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWordNum), v))
	})
}

// WordNumIsNil applies the IsNil predicate on the "wordNum" field.
func WordNumIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWordNum)))
	})
}

// WordNumNotNil applies the NotNil predicate on the "wordNum" field.
func WordNumNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWordNum)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.NovelChapter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelChapter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasPrev applies the HasEdge predicate on the "prev" edge.
func HasPrev() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrevTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PrevTable, PrevColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrevWith applies the HasEdge predicate on the "prev" edge with a given conditions (other predicates).
func HasPrevWith(preds ...predicate.NovelChapter) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PrevTable, PrevColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNext applies the HasEdge predicate on the "next" edge.
func HasNext() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NextTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, NextTable, NextColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNextWith applies the HasEdge predicate on the "next" edge with a given conditions (other predicates).
func HasNextWith(preds ...predicate.NovelChapter) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, NextTable, NextColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNovel applies the HasEdge predicate on the "novel" edge.
func HasNovel() predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NovelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NovelTable, NovelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNovelWith applies the HasEdge predicate on the "novel" edge with a given conditions (other predicates).
func HasNovelWith(preds ...predicate.Novel) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NovelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NovelTable, NovelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NovelChapter) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NovelChapter) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NovelChapter) predicate.NovelChapter {
	return predicate.NovelChapter(func(s *sql.Selector) {
		p(s.Not())
	})
}
