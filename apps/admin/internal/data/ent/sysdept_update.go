// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysdept"
	"hope/apps/admin/internal/data/ent/sysuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysDeptUpdate is the builder for updating SysDept entities.
type SysDeptUpdate struct {
	config
	hooks    []Hook
	mutation *SysDeptMutation
}

// Where appends a list predicates to the SysDeptUpdate builder.
func (sdu *SysDeptUpdate) Where(ps ...predicate.SysDept) *SysDeptUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetDeptPath sets the "deptPath" field.
func (sdu *SysDeptUpdate) SetDeptPath(s string) *SysDeptUpdate {
	sdu.mutation.SetDeptPath(s)
	return sdu
}

// SetNillableDeptPath sets the "deptPath" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableDeptPath(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetDeptPath(*s)
	}
	return sdu
}

// ClearDeptPath clears the value of the "deptPath" field.
func (sdu *SysDeptUpdate) ClearDeptPath() *SysDeptUpdate {
	sdu.mutation.ClearDeptPath()
	return sdu
}

// SetDeptName sets the "deptName" field.
func (sdu *SysDeptUpdate) SetDeptName(s string) *SysDeptUpdate {
	sdu.mutation.SetDeptName(s)
	return sdu
}

// SetNillableDeptName sets the "deptName" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableDeptName(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetDeptName(*s)
	}
	return sdu
}

// ClearDeptName clears the value of the "deptName" field.
func (sdu *SysDeptUpdate) ClearDeptName() *SysDeptUpdate {
	sdu.mutation.ClearDeptName()
	return sdu
}

// SetSort sets the "sort" field.
func (sdu *SysDeptUpdate) SetSort(i int32) *SysDeptUpdate {
	sdu.mutation.ResetSort()
	sdu.mutation.SetSort(i)
	return sdu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableSort(i *int32) *SysDeptUpdate {
	if i != nil {
		sdu.SetSort(*i)
	}
	return sdu
}

// AddSort adds i to the "sort" field.
func (sdu *SysDeptUpdate) AddSort(i int32) *SysDeptUpdate {
	sdu.mutation.AddSort(i)
	return sdu
}

// ClearSort clears the value of the "sort" field.
func (sdu *SysDeptUpdate) ClearSort() *SysDeptUpdate {
	sdu.mutation.ClearSort()
	return sdu
}

// SetLeader sets the "leader" field.
func (sdu *SysDeptUpdate) SetLeader(s string) *SysDeptUpdate {
	sdu.mutation.SetLeader(s)
	return sdu
}

// SetNillableLeader sets the "leader" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableLeader(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetLeader(*s)
	}
	return sdu
}

// ClearLeader clears the value of the "leader" field.
func (sdu *SysDeptUpdate) ClearLeader() *SysDeptUpdate {
	sdu.mutation.ClearLeader()
	return sdu
}

// SetPhone sets the "phone" field.
func (sdu *SysDeptUpdate) SetPhone(s string) *SysDeptUpdate {
	sdu.mutation.SetPhone(s)
	return sdu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillablePhone(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetPhone(*s)
	}
	return sdu
}

// ClearPhone clears the value of the "phone" field.
func (sdu *SysDeptUpdate) ClearPhone() *SysDeptUpdate {
	sdu.mutation.ClearPhone()
	return sdu
}

// SetEmail sets the "email" field.
func (sdu *SysDeptUpdate) SetEmail(s string) *SysDeptUpdate {
	sdu.mutation.SetEmail(s)
	return sdu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableEmail(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetEmail(*s)
	}
	return sdu
}

// ClearEmail clears the value of the "email" field.
func (sdu *SysDeptUpdate) ClearEmail() *SysDeptUpdate {
	sdu.mutation.ClearEmail()
	return sdu
}

// SetStatus sets the "status" field.
func (sdu *SysDeptUpdate) SetStatus(i int32) *SysDeptUpdate {
	sdu.mutation.ResetStatus()
	sdu.mutation.SetStatus(i)
	return sdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableStatus(i *int32) *SysDeptUpdate {
	if i != nil {
		sdu.SetStatus(*i)
	}
	return sdu
}

// AddStatus adds i to the "status" field.
func (sdu *SysDeptUpdate) AddStatus(i int32) *SysDeptUpdate {
	sdu.mutation.AddStatus(i)
	return sdu
}

// ClearStatus clears the value of the "status" field.
func (sdu *SysDeptUpdate) ClearStatus() *SysDeptUpdate {
	sdu.mutation.ClearStatus()
	return sdu
}

// SetUpdatedAt sets the "updatedAt" field.
func (sdu *SysDeptUpdate) SetUpdatedAt(t time.Time) *SysDeptUpdate {
	sdu.mutation.SetUpdatedAt(t)
	return sdu
}

// SetCreateBy sets the "createBy" field.
func (sdu *SysDeptUpdate) SetCreateBy(i int64) *SysDeptUpdate {
	sdu.mutation.ResetCreateBy()
	sdu.mutation.SetCreateBy(i)
	return sdu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableCreateBy(i *int64) *SysDeptUpdate {
	if i != nil {
		sdu.SetCreateBy(*i)
	}
	return sdu
}

// AddCreateBy adds i to the "createBy" field.
func (sdu *SysDeptUpdate) AddCreateBy(i int64) *SysDeptUpdate {
	sdu.mutation.AddCreateBy(i)
	return sdu
}

// SetUpdateBy sets the "updateBy" field.
func (sdu *SysDeptUpdate) SetUpdateBy(i int64) *SysDeptUpdate {
	sdu.mutation.ResetUpdateBy()
	sdu.mutation.SetUpdateBy(i)
	return sdu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableUpdateBy(i *int64) *SysDeptUpdate {
	if i != nil {
		sdu.SetUpdateBy(*i)
	}
	return sdu
}

// AddUpdateBy adds i to the "updateBy" field.
func (sdu *SysDeptUpdate) AddUpdateBy(i int64) *SysDeptUpdate {
	sdu.mutation.AddUpdateBy(i)
	return sdu
}

// SetTenantId sets the "tenantId" field.
func (sdu *SysDeptUpdate) SetTenantId(i int64) *SysDeptUpdate {
	sdu.mutation.ResetTenantId()
	sdu.mutation.SetTenantId(i)
	return sdu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableTenantId(i *int64) *SysDeptUpdate {
	if i != nil {
		sdu.SetTenantId(*i)
	}
	return sdu
}

// AddTenantId adds i to the "tenantId" field.
func (sdu *SysDeptUpdate) AddTenantId(i int64) *SysDeptUpdate {
	sdu.mutation.AddTenantId(i)
	return sdu
}

// SetParentID sets the "parent" edge to the SysDept entity by ID.
func (sdu *SysDeptUpdate) SetParentID(id int64) *SysDeptUpdate {
	sdu.mutation.SetParentID(id)
	return sdu
}

// SetNillableParentID sets the "parent" edge to the SysDept entity by ID if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableParentID(id *int64) *SysDeptUpdate {
	if id != nil {
		sdu = sdu.SetParentID(*id)
	}
	return sdu
}

// SetParent sets the "parent" edge to the SysDept entity.
func (sdu *SysDeptUpdate) SetParent(s *SysDept) *SysDeptUpdate {
	return sdu.SetParentID(s.ID)
}

// AddChildeIDs adds the "childes" edge to the SysDept entity by IDs.
func (sdu *SysDeptUpdate) AddChildeIDs(ids ...int64) *SysDeptUpdate {
	sdu.mutation.AddChildeIDs(ids...)
	return sdu
}

// AddChildes adds the "childes" edges to the SysDept entity.
func (sdu *SysDeptUpdate) AddChildes(s ...*SysDept) *SysDeptUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.AddChildeIDs(ids...)
}

// AddUserIDs adds the "users" edge to the SysUser entity by IDs.
func (sdu *SysDeptUpdate) AddUserIDs(ids ...int64) *SysDeptUpdate {
	sdu.mutation.AddUserIDs(ids...)
	return sdu
}

// AddUsers adds the "users" edges to the SysUser entity.
func (sdu *SysDeptUpdate) AddUsers(s ...*SysUser) *SysDeptUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.AddUserIDs(ids...)
}

// Mutation returns the SysDeptMutation object of the builder.
func (sdu *SysDeptUpdate) Mutation() *SysDeptMutation {
	return sdu.mutation
}

// ClearParent clears the "parent" edge to the SysDept entity.
func (sdu *SysDeptUpdate) ClearParent() *SysDeptUpdate {
	sdu.mutation.ClearParent()
	return sdu
}

// ClearChildes clears all "childes" edges to the SysDept entity.
func (sdu *SysDeptUpdate) ClearChildes() *SysDeptUpdate {
	sdu.mutation.ClearChildes()
	return sdu
}

// RemoveChildeIDs removes the "childes" edge to SysDept entities by IDs.
func (sdu *SysDeptUpdate) RemoveChildeIDs(ids ...int64) *SysDeptUpdate {
	sdu.mutation.RemoveChildeIDs(ids...)
	return sdu
}

// RemoveChildes removes "childes" edges to SysDept entities.
func (sdu *SysDeptUpdate) RemoveChildes(s ...*SysDept) *SysDeptUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.RemoveChildeIDs(ids...)
}

// ClearUsers clears all "users" edges to the SysUser entity.
func (sdu *SysDeptUpdate) ClearUsers() *SysDeptUpdate {
	sdu.mutation.ClearUsers()
	return sdu
}

// RemoveUserIDs removes the "users" edge to SysUser entities by IDs.
func (sdu *SysDeptUpdate) RemoveUserIDs(ids ...int64) *SysDeptUpdate {
	sdu.mutation.RemoveUserIDs(ids...)
	return sdu
}

// RemoveUsers removes "users" edges to SysUser entities.
func (sdu *SysDeptUpdate) RemoveUsers(s ...*SysUser) *SysDeptUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SysDeptUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sdu.defaults()
	if len(sdu.hooks) == 0 {
		affected, err = sdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysDeptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sdu.mutation = mutation
			affected, err = sdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sdu.hooks) - 1; i >= 0; i-- {
			if sdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SysDeptUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SysDeptUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SysDeptUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *SysDeptUpdate) defaults() {
	if _, ok := sdu.mutation.UpdatedAt(); !ok {
		v := sysdept.UpdateDefaultUpdatedAt()
		sdu.mutation.SetUpdatedAt(v)
	}
}

func (sdu *SysDeptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysdept.Table,
			Columns: sysdept.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysdept.FieldID,
			},
		},
	}
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.DeptPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldDeptPath,
		})
	}
	if sdu.mutation.DeptPathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldDeptPath,
		})
	}
	if value, ok := sdu.mutation.DeptName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldDeptName,
		})
	}
	if sdu.mutation.DeptNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldDeptName,
		})
	}
	if value, ok := sdu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldSort,
		})
	}
	if value, ok := sdu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldSort,
		})
	}
	if sdu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysdept.FieldSort,
		})
	}
	if value, ok := sdu.mutation.Leader(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldLeader,
		})
	}
	if sdu.mutation.LeaderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldLeader,
		})
	}
	if value, ok := sdu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldPhone,
		})
	}
	if sdu.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldPhone,
		})
	}
	if value, ok := sdu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldEmail,
		})
	}
	if sdu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldEmail,
		})
	}
	if value, ok := sdu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldStatus,
		})
	}
	if value, ok := sdu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldStatus,
		})
	}
	if sdu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysdept.FieldStatus,
		})
	}
	if value, ok := sdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysdept.FieldUpdatedAt,
		})
	}
	if value, ok := sdu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldCreateBy,
		})
	}
	if value, ok := sdu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldCreateBy,
		})
	}
	if value, ok := sdu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldUpdateBy,
		})
	}
	if value, ok := sdu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldUpdateBy,
		})
	}
	if value, ok := sdu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldTenantId,
		})
	}
	if value, ok := sdu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldTenantId,
		})
	}
	if sdu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdept.ParentTable,
			Columns: []string{sysdept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdept.ParentTable,
			Columns: []string{sysdept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sdu.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.ChildesTable,
			Columns: []string{sysdept.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.RemovedChildesIDs(); len(nodes) > 0 && !sdu.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.ChildesTable,
			Columns: []string{sysdept.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.ChildesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.ChildesTable,
			Columns: []string{sysdept.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sdu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.UsersTable,
			Columns: []string{sysdept.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !sdu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.UsersTable,
			Columns: []string{sysdept.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.UsersTable,
			Columns: []string{sysdept.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdept.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysDeptUpdateOne is the builder for updating a single SysDept entity.
type SysDeptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysDeptMutation
}

// SetDeptPath sets the "deptPath" field.
func (sduo *SysDeptUpdateOne) SetDeptPath(s string) *SysDeptUpdateOne {
	sduo.mutation.SetDeptPath(s)
	return sduo
}

// SetNillableDeptPath sets the "deptPath" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableDeptPath(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetDeptPath(*s)
	}
	return sduo
}

// ClearDeptPath clears the value of the "deptPath" field.
func (sduo *SysDeptUpdateOne) ClearDeptPath() *SysDeptUpdateOne {
	sduo.mutation.ClearDeptPath()
	return sduo
}

// SetDeptName sets the "deptName" field.
func (sduo *SysDeptUpdateOne) SetDeptName(s string) *SysDeptUpdateOne {
	sduo.mutation.SetDeptName(s)
	return sduo
}

// SetNillableDeptName sets the "deptName" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableDeptName(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetDeptName(*s)
	}
	return sduo
}

// ClearDeptName clears the value of the "deptName" field.
func (sduo *SysDeptUpdateOne) ClearDeptName() *SysDeptUpdateOne {
	sduo.mutation.ClearDeptName()
	return sduo
}

// SetSort sets the "sort" field.
func (sduo *SysDeptUpdateOne) SetSort(i int32) *SysDeptUpdateOne {
	sduo.mutation.ResetSort()
	sduo.mutation.SetSort(i)
	return sduo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableSort(i *int32) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetSort(*i)
	}
	return sduo
}

// AddSort adds i to the "sort" field.
func (sduo *SysDeptUpdateOne) AddSort(i int32) *SysDeptUpdateOne {
	sduo.mutation.AddSort(i)
	return sduo
}

// ClearSort clears the value of the "sort" field.
func (sduo *SysDeptUpdateOne) ClearSort() *SysDeptUpdateOne {
	sduo.mutation.ClearSort()
	return sduo
}

// SetLeader sets the "leader" field.
func (sduo *SysDeptUpdateOne) SetLeader(s string) *SysDeptUpdateOne {
	sduo.mutation.SetLeader(s)
	return sduo
}

// SetNillableLeader sets the "leader" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableLeader(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetLeader(*s)
	}
	return sduo
}

// ClearLeader clears the value of the "leader" field.
func (sduo *SysDeptUpdateOne) ClearLeader() *SysDeptUpdateOne {
	sduo.mutation.ClearLeader()
	return sduo
}

// SetPhone sets the "phone" field.
func (sduo *SysDeptUpdateOne) SetPhone(s string) *SysDeptUpdateOne {
	sduo.mutation.SetPhone(s)
	return sduo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillablePhone(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetPhone(*s)
	}
	return sduo
}

// ClearPhone clears the value of the "phone" field.
func (sduo *SysDeptUpdateOne) ClearPhone() *SysDeptUpdateOne {
	sduo.mutation.ClearPhone()
	return sduo
}

// SetEmail sets the "email" field.
func (sduo *SysDeptUpdateOne) SetEmail(s string) *SysDeptUpdateOne {
	sduo.mutation.SetEmail(s)
	return sduo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableEmail(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetEmail(*s)
	}
	return sduo
}

// ClearEmail clears the value of the "email" field.
func (sduo *SysDeptUpdateOne) ClearEmail() *SysDeptUpdateOne {
	sduo.mutation.ClearEmail()
	return sduo
}

// SetStatus sets the "status" field.
func (sduo *SysDeptUpdateOne) SetStatus(i int32) *SysDeptUpdateOne {
	sduo.mutation.ResetStatus()
	sduo.mutation.SetStatus(i)
	return sduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableStatus(i *int32) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetStatus(*i)
	}
	return sduo
}

// AddStatus adds i to the "status" field.
func (sduo *SysDeptUpdateOne) AddStatus(i int32) *SysDeptUpdateOne {
	sduo.mutation.AddStatus(i)
	return sduo
}

// ClearStatus clears the value of the "status" field.
func (sduo *SysDeptUpdateOne) ClearStatus() *SysDeptUpdateOne {
	sduo.mutation.ClearStatus()
	return sduo
}

// SetUpdatedAt sets the "updatedAt" field.
func (sduo *SysDeptUpdateOne) SetUpdatedAt(t time.Time) *SysDeptUpdateOne {
	sduo.mutation.SetUpdatedAt(t)
	return sduo
}

// SetCreateBy sets the "createBy" field.
func (sduo *SysDeptUpdateOne) SetCreateBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.ResetCreateBy()
	sduo.mutation.SetCreateBy(i)
	return sduo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableCreateBy(i *int64) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetCreateBy(*i)
	}
	return sduo
}

// AddCreateBy adds i to the "createBy" field.
func (sduo *SysDeptUpdateOne) AddCreateBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.AddCreateBy(i)
	return sduo
}

// SetUpdateBy sets the "updateBy" field.
func (sduo *SysDeptUpdateOne) SetUpdateBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.ResetUpdateBy()
	sduo.mutation.SetUpdateBy(i)
	return sduo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableUpdateBy(i *int64) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetUpdateBy(*i)
	}
	return sduo
}

// AddUpdateBy adds i to the "updateBy" field.
func (sduo *SysDeptUpdateOne) AddUpdateBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.AddUpdateBy(i)
	return sduo
}

// SetTenantId sets the "tenantId" field.
func (sduo *SysDeptUpdateOne) SetTenantId(i int64) *SysDeptUpdateOne {
	sduo.mutation.ResetTenantId()
	sduo.mutation.SetTenantId(i)
	return sduo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableTenantId(i *int64) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetTenantId(*i)
	}
	return sduo
}

// AddTenantId adds i to the "tenantId" field.
func (sduo *SysDeptUpdateOne) AddTenantId(i int64) *SysDeptUpdateOne {
	sduo.mutation.AddTenantId(i)
	return sduo
}

// SetParentID sets the "parent" edge to the SysDept entity by ID.
func (sduo *SysDeptUpdateOne) SetParentID(id int64) *SysDeptUpdateOne {
	sduo.mutation.SetParentID(id)
	return sduo
}

// SetNillableParentID sets the "parent" edge to the SysDept entity by ID if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableParentID(id *int64) *SysDeptUpdateOne {
	if id != nil {
		sduo = sduo.SetParentID(*id)
	}
	return sduo
}

// SetParent sets the "parent" edge to the SysDept entity.
func (sduo *SysDeptUpdateOne) SetParent(s *SysDept) *SysDeptUpdateOne {
	return sduo.SetParentID(s.ID)
}

// AddChildeIDs adds the "childes" edge to the SysDept entity by IDs.
func (sduo *SysDeptUpdateOne) AddChildeIDs(ids ...int64) *SysDeptUpdateOne {
	sduo.mutation.AddChildeIDs(ids...)
	return sduo
}

// AddChildes adds the "childes" edges to the SysDept entity.
func (sduo *SysDeptUpdateOne) AddChildes(s ...*SysDept) *SysDeptUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.AddChildeIDs(ids...)
}

// AddUserIDs adds the "users" edge to the SysUser entity by IDs.
func (sduo *SysDeptUpdateOne) AddUserIDs(ids ...int64) *SysDeptUpdateOne {
	sduo.mutation.AddUserIDs(ids...)
	return sduo
}

// AddUsers adds the "users" edges to the SysUser entity.
func (sduo *SysDeptUpdateOne) AddUsers(s ...*SysUser) *SysDeptUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.AddUserIDs(ids...)
}

// Mutation returns the SysDeptMutation object of the builder.
func (sduo *SysDeptUpdateOne) Mutation() *SysDeptMutation {
	return sduo.mutation
}

// ClearParent clears the "parent" edge to the SysDept entity.
func (sduo *SysDeptUpdateOne) ClearParent() *SysDeptUpdateOne {
	sduo.mutation.ClearParent()
	return sduo
}

// ClearChildes clears all "childes" edges to the SysDept entity.
func (sduo *SysDeptUpdateOne) ClearChildes() *SysDeptUpdateOne {
	sduo.mutation.ClearChildes()
	return sduo
}

// RemoveChildeIDs removes the "childes" edge to SysDept entities by IDs.
func (sduo *SysDeptUpdateOne) RemoveChildeIDs(ids ...int64) *SysDeptUpdateOne {
	sduo.mutation.RemoveChildeIDs(ids...)
	return sduo
}

// RemoveChildes removes "childes" edges to SysDept entities.
func (sduo *SysDeptUpdateOne) RemoveChildes(s ...*SysDept) *SysDeptUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.RemoveChildeIDs(ids...)
}

// ClearUsers clears all "users" edges to the SysUser entity.
func (sduo *SysDeptUpdateOne) ClearUsers() *SysDeptUpdateOne {
	sduo.mutation.ClearUsers()
	return sduo
}

// RemoveUserIDs removes the "users" edge to SysUser entities by IDs.
func (sduo *SysDeptUpdateOne) RemoveUserIDs(ids ...int64) *SysDeptUpdateOne {
	sduo.mutation.RemoveUserIDs(ids...)
	return sduo
}

// RemoveUsers removes "users" edges to SysUser entities.
func (sduo *SysDeptUpdateOne) RemoveUsers(s ...*SysUser) *SysDeptUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SysDeptUpdateOne) Select(field string, fields ...string) *SysDeptUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SysDept entity.
func (sduo *SysDeptUpdateOne) Save(ctx context.Context) (*SysDept, error) {
	var (
		err  error
		node *SysDept
	)
	sduo.defaults()
	if len(sduo.hooks) == 0 {
		node, err = sduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysDeptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sduo.mutation = mutation
			node, err = sduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sduo.hooks) - 1; i >= 0; i-- {
			if sduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SysDeptUpdateOne) SaveX(ctx context.Context) *SysDept {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SysDeptUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SysDeptUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *SysDeptUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdatedAt(); !ok {
		v := sysdept.UpdateDefaultUpdatedAt()
		sduo.mutation.SetUpdatedAt(v)
	}
}

func (sduo *SysDeptUpdateOne) sqlSave(ctx context.Context) (_node *SysDept, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysdept.Table,
			Columns: sysdept.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysdept.FieldID,
			},
		},
	}
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysDept.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdept.FieldID)
		for _, f := range fields {
			if !sysdept.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysdept.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.DeptPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldDeptPath,
		})
	}
	if sduo.mutation.DeptPathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldDeptPath,
		})
	}
	if value, ok := sduo.mutation.DeptName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldDeptName,
		})
	}
	if sduo.mutation.DeptNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldDeptName,
		})
	}
	if value, ok := sduo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldSort,
		})
	}
	if value, ok := sduo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldSort,
		})
	}
	if sduo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysdept.FieldSort,
		})
	}
	if value, ok := sduo.mutation.Leader(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldLeader,
		})
	}
	if sduo.mutation.LeaderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldLeader,
		})
	}
	if value, ok := sduo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldPhone,
		})
	}
	if sduo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldPhone,
		})
	}
	if value, ok := sduo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldEmail,
		})
	}
	if sduo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysdept.FieldEmail,
		})
	}
	if value, ok := sduo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldStatus,
		})
	}
	if value, ok := sduo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldStatus,
		})
	}
	if sduo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysdept.FieldStatus,
		})
	}
	if value, ok := sduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysdept.FieldUpdatedAt,
		})
	}
	if value, ok := sduo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldCreateBy,
		})
	}
	if value, ok := sduo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldCreateBy,
		})
	}
	if value, ok := sduo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldUpdateBy,
		})
	}
	if value, ok := sduo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldUpdateBy,
		})
	}
	if value, ok := sduo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldTenantId,
		})
	}
	if value, ok := sduo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldTenantId,
		})
	}
	if sduo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdept.ParentTable,
			Columns: []string{sysdept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdept.ParentTable,
			Columns: []string{sysdept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sduo.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.ChildesTable,
			Columns: []string{sysdept.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.RemovedChildesIDs(); len(nodes) > 0 && !sduo.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.ChildesTable,
			Columns: []string{sysdept.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.ChildesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.ChildesTable,
			Columns: []string{sysdept.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sduo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.UsersTable,
			Columns: []string{sysdept.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !sduo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.UsersTable,
			Columns: []string{sysdept.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.UsersTable,
			Columns: []string{sysdept.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysDept{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdept.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
