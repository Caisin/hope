// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/sysconfig"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysConfigCreate is the builder for creating a SysConfig entity.
type SysConfigCreate struct {
	config
	mutation *SysConfigMutation
	hooks    []Hook
}

// SetConfigName sets the "configName" field.
func (scc *SysConfigCreate) SetConfigName(s string) *SysConfigCreate {
	scc.mutation.SetConfigName(s)
	return scc
}

// SetNillableConfigName sets the "configName" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableConfigName(s *string) *SysConfigCreate {
	if s != nil {
		scc.SetConfigName(*s)
	}
	return scc
}

// SetConfigKey sets the "configKey" field.
func (scc *SysConfigCreate) SetConfigKey(s string) *SysConfigCreate {
	scc.mutation.SetConfigKey(s)
	return scc
}

// SetNillableConfigKey sets the "configKey" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableConfigKey(s *string) *SysConfigCreate {
	if s != nil {
		scc.SetConfigKey(*s)
	}
	return scc
}

// SetConfigValue sets the "configValue" field.
func (scc *SysConfigCreate) SetConfigValue(s string) *SysConfigCreate {
	scc.mutation.SetConfigValue(s)
	return scc
}

// SetNillableConfigValue sets the "configValue" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableConfigValue(s *string) *SysConfigCreate {
	if s != nil {
		scc.SetConfigValue(*s)
	}
	return scc
}

// SetConfigType sets the "configType" field.
func (scc *SysConfigCreate) SetConfigType(s string) *SysConfigCreate {
	scc.mutation.SetConfigType(s)
	return scc
}

// SetNillableConfigType sets the "configType" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableConfigType(s *string) *SysConfigCreate {
	if s != nil {
		scc.SetConfigType(*s)
	}
	return scc
}

// SetIsFrontend sets the "isFrontend" field.
func (scc *SysConfigCreate) SetIsFrontend(i int32) *SysConfigCreate {
	scc.mutation.SetIsFrontend(i)
	return scc
}

// SetNillableIsFrontend sets the "isFrontend" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableIsFrontend(i *int32) *SysConfigCreate {
	if i != nil {
		scc.SetIsFrontend(*i)
	}
	return scc
}

// SetState sets the "state" field.
func (scc *SysConfigCreate) SetState(s sysconfig.State) *SysConfigCreate {
	scc.mutation.SetState(s)
	return scc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableState(s *sysconfig.State) *SysConfigCreate {
	if s != nil {
		scc.SetState(*s)
	}
	return scc
}

// SetRemark sets the "remark" field.
func (scc *SysConfigCreate) SetRemark(s string) *SysConfigCreate {
	scc.mutation.SetRemark(s)
	return scc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableRemark(s *string) *SysConfigCreate {
	if s != nil {
		scc.SetRemark(*s)
	}
	return scc
}

// SetCreatedAt sets the "createdAt" field.
func (scc *SysConfigCreate) SetCreatedAt(t time.Time) *SysConfigCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableCreatedAt(t *time.Time) *SysConfigCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdatedAt sets the "updatedAt" field.
func (scc *SysConfigCreate) SetUpdatedAt(t time.Time) *SysConfigCreate {
	scc.mutation.SetUpdatedAt(t)
	return scc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableUpdatedAt(t *time.Time) *SysConfigCreate {
	if t != nil {
		scc.SetUpdatedAt(*t)
	}
	return scc
}

// SetCreateBy sets the "createBy" field.
func (scc *SysConfigCreate) SetCreateBy(i int64) *SysConfigCreate {
	scc.mutation.SetCreateBy(i)
	return scc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableCreateBy(i *int64) *SysConfigCreate {
	if i != nil {
		scc.SetCreateBy(*i)
	}
	return scc
}

// SetUpdateBy sets the "updateBy" field.
func (scc *SysConfigCreate) SetUpdateBy(i int64) *SysConfigCreate {
	scc.mutation.SetUpdateBy(i)
	return scc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableUpdateBy(i *int64) *SysConfigCreate {
	if i != nil {
		scc.SetUpdateBy(*i)
	}
	return scc
}

// SetTenantId sets the "tenantId" field.
func (scc *SysConfigCreate) SetTenantId(i int64) *SysConfigCreate {
	scc.mutation.SetTenantId(i)
	return scc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (scc *SysConfigCreate) SetNillableTenantId(i *int64) *SysConfigCreate {
	if i != nil {
		scc.SetTenantId(*i)
	}
	return scc
}

// Mutation returns the SysConfigMutation object of the builder.
func (scc *SysConfigCreate) Mutation() *SysConfigMutation {
	return scc.mutation
}

// Save creates the SysConfig in the database.
func (scc *SysConfigCreate) Save(ctx context.Context) (*SysConfig, error) {
	var (
		err  error
		node *SysConfig
	)
	scc.defaults()
	if len(scc.hooks) == 0 {
		if err = scc.check(); err != nil {
			return nil, err
		}
		node, err = scc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scc.check(); err != nil {
				return nil, err
			}
			scc.mutation = mutation
			if node, err = scc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(scc.hooks) - 1; i >= 0; i-- {
			if scc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SysConfigCreate) SaveX(ctx context.Context) *SysConfig {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SysConfigCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SysConfigCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *SysConfigCreate) defaults() {
	if _, ok := scc.mutation.State(); !ok {
		v := sysconfig.DefaultState
		scc.mutation.SetState(v)
	}
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := sysconfig.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		v := sysconfig.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scc.mutation.CreateBy(); !ok {
		v := sysconfig.DefaultCreateBy
		scc.mutation.SetCreateBy(v)
	}
	if _, ok := scc.mutation.UpdateBy(); !ok {
		v := sysconfig.DefaultUpdateBy
		scc.mutation.SetUpdateBy(v)
	}
	if _, ok := scc.mutation.TenantId(); !ok {
		v := sysconfig.DefaultTenantId
		scc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *SysConfigCreate) check() error {
	if _, ok := scc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "SysConfig.state"`)}
	}
	if v, ok := scc.mutation.State(); ok {
		if err := sysconfig.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "SysConfig.state": %w`, err)}
		}
	}
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "SysConfig.createdAt"`)}
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "SysConfig.updatedAt"`)}
	}
	if _, ok := scc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "SysConfig.createBy"`)}
	}
	if _, ok := scc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "SysConfig.updateBy"`)}
	}
	if _, ok := scc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "SysConfig.tenantId"`)}
	}
	return nil
}

func (scc *SysConfigCreate) sqlSave(ctx context.Context) (*SysConfig, error) {
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (scc *SysConfigCreate) createSpec() (*SysConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &SysConfig{config: scc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysconfig.FieldID,
			},
		}
	)
	if value, ok := scc.mutation.ConfigName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigName,
		})
		_node.ConfigName = value
	}
	if value, ok := scc.mutation.ConfigKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigKey,
		})
		_node.ConfigKey = value
	}
	if value, ok := scc.mutation.ConfigValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigValue,
		})
		_node.ConfigValue = value
	}
	if value, ok := scc.mutation.ConfigType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigType,
		})
		_node.ConfigType = value
	}
	if value, ok := scc.mutation.IsFrontend(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysconfig.FieldIsFrontend,
		})
		_node.IsFrontend = value
	}
	if value, ok := scc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sysconfig.FieldState,
		})
		_node.State = value
	}
	if value, ok := scc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysconfig.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysconfig.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := scc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := scc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := scc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// SysConfigCreateBulk is the builder for creating many SysConfig entities in bulk.
type SysConfigCreateBulk struct {
	config
	builders []*SysConfigCreate
}

// Save creates the SysConfig entities in the database.
func (sccb *SysConfigCreateBulk) Save(ctx context.Context) ([]*SysConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SysConfig, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SysConfigCreateBulk) SaveX(ctx context.Context) []*SysConfig {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SysConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SysConfigCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
