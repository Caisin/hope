// Code generated by entc, DO NOT EDIT.

package sysoperalog

import (
	"time"
)

const (
	// Label holds the string label denoting the sysoperalog type in the database.
	Label = "sys_opera_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldRequestId holds the string denoting the requestid field in the database.
	FieldRequestId = "request_id"
	// FieldBusinessType holds the string denoting the businesstype field in the database.
	FieldBusinessType = "business_type"
	// FieldBusinessTypes holds the string denoting the businesstypes field in the database.
	FieldBusinessTypes = "business_types"
	// FieldMethod holds the string denoting the method field in the database.
	FieldMethod = "method"
	// FieldRequestMethod holds the string denoting the requestmethod field in the database.
	FieldRequestMethod = "request_method"
	// FieldOperatorType holds the string denoting the operatortype field in the database.
	FieldOperatorType = "operator_type"
	// FieldOperName holds the string denoting the opername field in the database.
	FieldOperName = "oper_name"
	// FieldDeptName holds the string denoting the deptname field in the database.
	FieldDeptName = "dept_name"
	// FieldOperUrl holds the string denoting the operurl field in the database.
	FieldOperUrl = "oper_url"
	// FieldOperIp holds the string denoting the operip field in the database.
	FieldOperIp = "oper_ip"
	// FieldBrowser holds the string denoting the browser field in the database.
	FieldBrowser = "browser"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldOperLocation holds the string denoting the operlocation field in the database.
	FieldOperLocation = "oper_location"
	// FieldOperParam holds the string denoting the operparam field in the database.
	FieldOperParam = "oper_param"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOperTime holds the string denoting the opertime field in the database.
	FieldOperTime = "oper_time"
	// FieldJsonResult holds the string denoting the jsonresult field in the database.
	FieldJsonResult = "json_result"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldLatencyTime holds the string denoting the latencytime field in the database.
	FieldLatencyTime = "latency_time"
	// FieldUserAgent holds the string denoting the useragent field in the database.
	FieldUserAgent = "user_agent"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the sysoperalog in the database.
	Table = "sys_opera_logs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "sys_opera_logs"
	// UserInverseTable is the table name for the SysUser entity.
	// It exists in this package in order to avoid circular dependency with the "sysuser" package.
	UserInverseTable = "sys_users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "sys_user_opera_logs"
)

// Columns holds all SQL columns for sysoperalog fields.
var Columns = []string{
	FieldID,
	FieldUserId,
	FieldTitle,
	FieldRequestId,
	FieldBusinessType,
	FieldBusinessTypes,
	FieldMethod,
	FieldRequestMethod,
	FieldOperatorType,
	FieldOperName,
	FieldDeptName,
	FieldOperUrl,
	FieldOperIp,
	FieldBrowser,
	FieldOs,
	FieldPlatform,
	FieldOperLocation,
	FieldOperParam,
	FieldStatus,
	FieldOperTime,
	FieldJsonResult,
	FieldRemark,
	FieldLatencyTime,
	FieldUserAgent,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreateBy,
	FieldUpdateBy,
	FieldTenantId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sys_opera_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sys_user_opera_logs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateBy holds the default value on creation for the "createBy" field.
	DefaultCreateBy int64
	// DefaultUpdateBy holds the default value on creation for the "updateBy" field.
	DefaultUpdateBy int64
	// DefaultTenantId holds the default value on creation for the "tenantId" field.
	DefaultTenantId int64
)
