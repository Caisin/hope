// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/activity"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
}

// SetActivityCode sets the "activityCode" field.
func (ac *ActivityCreate) SetActivityCode(s string) *ActivityCreate {
	ac.mutation.SetActivityCode(s)
	return ac
}

// SetNillableActivityCode sets the "activityCode" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableActivityCode(s *string) *ActivityCreate {
	if s != nil {
		ac.SetActivityCode(*s)
	}
	return ac
}

// SetActivityName sets the "activityName" field.
func (ac *ActivityCreate) SetActivityName(s string) *ActivityCreate {
	ac.mutation.SetActivityName(s)
	return ac
}

// SetNillableActivityName sets the "activityName" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableActivityName(s *string) *ActivityCreate {
	if s != nil {
		ac.SetActivityName(*s)
	}
	return ac
}

// SetSummary sets the "summary" field.
func (ac *ActivityCreate) SetSummary(s string) *ActivityCreate {
	ac.mutation.SetSummary(s)
	return ac
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableSummary(s *string) *ActivityCreate {
	if s != nil {
		ac.SetSummary(*s)
	}
	return ac
}

// SetRuleImgSc sets the "ruleImgSc" field.
func (ac *ActivityCreate) SetRuleImgSc(s string) *ActivityCreate {
	ac.mutation.SetRuleImgSc(s)
	return ac
}

// SetNillableRuleImgSc sets the "ruleImgSc" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableRuleImgSc(s *string) *ActivityCreate {
	if s != nil {
		ac.SetRuleImgSc(*s)
	}
	return ac
}

// SetRuleImgTc sets the "ruleImgTc" field.
func (ac *ActivityCreate) SetRuleImgTc(s string) *ActivityCreate {
	ac.mutation.SetRuleImgTc(s)
	return ac
}

// SetNillableRuleImgTc sets the "ruleImgTc" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableRuleImgTc(s *string) *ActivityCreate {
	if s != nil {
		ac.SetRuleImgTc(*s)
	}
	return ac
}

// SetPopupImg sets the "popupImg" field.
func (ac *ActivityCreate) SetPopupImg(s string) *ActivityCreate {
	ac.mutation.SetPopupImg(s)
	return ac
}

// SetNillablePopupImg sets the "popupImg" field if the given value is not nil.
func (ac *ActivityCreate) SetNillablePopupImg(s *string) *ActivityCreate {
	if s != nil {
		ac.SetPopupImg(*s)
	}
	return ac
}

// SetRegDays sets the "regDays" field.
func (ac *ActivityCreate) SetRegDays(i int32) *ActivityCreate {
	ac.mutation.SetRegDays(i)
	return ac
}

// SetNillableRegDays sets the "regDays" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableRegDays(i *int32) *ActivityCreate {
	if i != nil {
		ac.SetRegDays(*i)
	}
	return ac
}

// SetCycleType sets the "cycleType" field.
func (ac *ActivityCreate) SetCycleType(s string) *ActivityCreate {
	ac.mutation.SetCycleType(s)
	return ac
}

// SetNillableCycleType sets the "cycleType" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCycleType(s *string) *ActivityCreate {
	if s != nil {
		ac.SetCycleType(*s)
	}
	return ac
}

// SetEffectTime sets the "effectTime" field.
func (ac *ActivityCreate) SetEffectTime(t time.Time) *ActivityCreate {
	ac.mutation.SetEffectTime(t)
	return ac
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableEffectTime(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetEffectTime(*t)
	}
	return ac
}

// SetExpiredTime sets the "expiredTime" field.
func (ac *ActivityCreate) SetExpiredTime(t time.Time) *ActivityCreate {
	ac.mutation.SetExpiredTime(t)
	return ac
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableExpiredTime(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetExpiredTime(*t)
	}
	return ac
}

// SetCreatedAt sets the "createdAt" field.
func (ac *ActivityCreate) SetCreatedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCreatedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updatedAt" field.
func (ac *ActivityCreate) SetUpdatedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableUpdatedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetCreateBy sets the "createBy" field.
func (ac *ActivityCreate) SetCreateBy(i int64) *ActivityCreate {
	ac.mutation.SetCreateBy(i)
	return ac
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCreateBy(i *int64) *ActivityCreate {
	if i != nil {
		ac.SetCreateBy(*i)
	}
	return ac
}

// SetUpdateBy sets the "updateBy" field.
func (ac *ActivityCreate) SetUpdateBy(i int64) *ActivityCreate {
	ac.mutation.SetUpdateBy(i)
	return ac
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableUpdateBy(i *int64) *ActivityCreate {
	if i != nil {
		ac.SetUpdateBy(*i)
	}
	return ac
}

// SetTenantId sets the "tenantId" field.
func (ac *ActivityCreate) SetTenantId(i int64) *ActivityCreate {
	ac.mutation.SetTenantId(i)
	return ac
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableTenantId(i *int64) *ActivityCreate {
	if i != nil {
		ac.SetTenantId(*i)
	}
	return ac
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	var (
		err  error
		node *Activity
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActivityCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActivityCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ActivityCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := activity.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := activity.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.CreateBy(); !ok {
		v := activity.DefaultCreateBy
		ac.mutation.SetCreateBy(v)
	}
	if _, ok := ac.mutation.UpdateBy(); !ok {
		v := activity.DefaultUpdateBy
		ac.mutation.SetUpdateBy(v)
	}
	if _, ok := ac.mutation.TenantId(); !ok {
		v := activity.DefaultTenantId
		ac.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivityCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Activity.createdAt"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Activity.updatedAt"`)}
	}
	if _, ok := ac.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "Activity.createBy"`)}
	}
	if _, ok := ac.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "Activity.updateBy"`)}
	}
	if _, ok := ac.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "Activity.tenantId"`)}
	}
	return nil
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		_node = &Activity{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: activity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: activity.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.ActivityCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldActivityCode,
		})
		_node.ActivityCode = value
	}
	if value, ok := ac.mutation.ActivityName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldActivityName,
		})
		_node.ActivityName = value
	}
	if value, ok := ac.mutation.Summary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldSummary,
		})
		_node.Summary = value
	}
	if value, ok := ac.mutation.RuleImgSc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldRuleImgSc,
		})
		_node.RuleImgSc = value
	}
	if value, ok := ac.mutation.RuleImgTc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldRuleImgTc,
		})
		_node.RuleImgTc = value
	}
	if value, ok := ac.mutation.PopupImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldPopupImg,
		})
		_node.PopupImg = value
	}
	if value, ok := ac.mutation.RegDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activity.FieldRegDays,
		})
		_node.RegDays = value
	}
	if value, ok := ac.mutation.CycleType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldCycleType,
		})
		_node.CycleType = value
	}
	if value, ok := ac.mutation.EffectTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldEffectTime,
		})
		_node.EffectTime = value
	}
	if value, ok := ac.mutation.ExpiredTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldExpiredTime,
		})
		_node.ExpiredTime = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := ac.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := ac.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// ActivityCreateBulk is the builder for creating many Activity entities in bulk.
type ActivityCreateBulk struct {
	config
	builders []*ActivityCreate
}

// Save creates the Activity entities in the database.
func (acb *ActivityCreateBulk) Save(ctx context.Context) ([]*Activity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activity, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActivityCreateBulk) SaveX(ctx context.Context) []*Activity {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActivityCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
