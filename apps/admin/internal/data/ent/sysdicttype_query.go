// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysdictdata"
	"hope/apps/admin/internal/data/ent/sysdicttype"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysDictTypeQuery is the builder for querying SysDictType entities.
type SysDictTypeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SysDictType
	// eager-loading edges.
	withDataList *SysDictDataQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SysDictTypeQuery builder.
func (sdtq *SysDictTypeQuery) Where(ps ...predicate.SysDictType) *SysDictTypeQuery {
	sdtq.predicates = append(sdtq.predicates, ps...)
	return sdtq
}

// Limit adds a limit step to the query.
func (sdtq *SysDictTypeQuery) Limit(limit int) *SysDictTypeQuery {
	sdtq.limit = &limit
	return sdtq
}

// Offset adds an offset step to the query.
func (sdtq *SysDictTypeQuery) Offset(offset int) *SysDictTypeQuery {
	sdtq.offset = &offset
	return sdtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sdtq *SysDictTypeQuery) Unique(unique bool) *SysDictTypeQuery {
	sdtq.unique = &unique
	return sdtq
}

// Order adds an order step to the query.
func (sdtq *SysDictTypeQuery) Order(o ...OrderFunc) *SysDictTypeQuery {
	sdtq.order = append(sdtq.order, o...)
	return sdtq
}

// QueryDataList chains the current query on the "dataList" edge.
func (sdtq *SysDictTypeQuery) QueryDataList() *SysDictDataQuery {
	query := &SysDictDataQuery{config: sdtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sdtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sdtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdicttype.Table, sysdicttype.FieldID, selector),
			sqlgraph.To(sysdictdata.Table, sysdictdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysdicttype.DataListTable, sysdicttype.DataListColumn),
		)
		fromU = sqlgraph.SetNeighbors(sdtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SysDictType entity from the query.
// Returns a *NotFoundError when no SysDictType was found.
func (sdtq *SysDictTypeQuery) First(ctx context.Context) (*SysDictType, error) {
	nodes, err := sdtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sysdicttype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sdtq *SysDictTypeQuery) FirstX(ctx context.Context) *SysDictType {
	node, err := sdtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SysDictType ID from the query.
// Returns a *NotFoundError when no SysDictType ID was found.
func (sdtq *SysDictTypeQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sdtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sysdicttype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sdtq *SysDictTypeQuery) FirstIDX(ctx context.Context) int64 {
	id, err := sdtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SysDictType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SysDictType entity is not found.
// Returns a *NotFoundError when no SysDictType entities are found.
func (sdtq *SysDictTypeQuery) Only(ctx context.Context) (*SysDictType, error) {
	nodes, err := sdtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sysdicttype.Label}
	default:
		return nil, &NotSingularError{sysdicttype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sdtq *SysDictTypeQuery) OnlyX(ctx context.Context) *SysDictType {
	node, err := sdtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SysDictType ID in the query.
// Returns a *NotSingularError when exactly one SysDictType ID is not found.
// Returns a *NotFoundError when no entities are found.
func (sdtq *SysDictTypeQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sdtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sysdicttype.Label}
	default:
		err = &NotSingularError{sysdicttype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sdtq *SysDictTypeQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := sdtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SysDictTypes.
func (sdtq *SysDictTypeQuery) All(ctx context.Context) ([]*SysDictType, error) {
	if err := sdtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sdtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sdtq *SysDictTypeQuery) AllX(ctx context.Context) []*SysDictType {
	nodes, err := sdtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SysDictType IDs.
func (sdtq *SysDictTypeQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := sdtq.Select(sysdicttype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sdtq *SysDictTypeQuery) IDsX(ctx context.Context) []int64 {
	ids, err := sdtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sdtq *SysDictTypeQuery) Count(ctx context.Context) (int, error) {
	if err := sdtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sdtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sdtq *SysDictTypeQuery) CountX(ctx context.Context) int {
	count, err := sdtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sdtq *SysDictTypeQuery) Exist(ctx context.Context) (bool, error) {
	if err := sdtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sdtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sdtq *SysDictTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := sdtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SysDictTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sdtq *SysDictTypeQuery) Clone() *SysDictTypeQuery {
	if sdtq == nil {
		return nil
	}
	return &SysDictTypeQuery{
		config:       sdtq.config,
		limit:        sdtq.limit,
		offset:       sdtq.offset,
		order:        append([]OrderFunc{}, sdtq.order...),
		predicates:   append([]predicate.SysDictType{}, sdtq.predicates...),
		withDataList: sdtq.withDataList.Clone(),
		// clone intermediate query.
		sql:  sdtq.sql.Clone(),
		path: sdtq.path,
	}
}

// WithDataList tells the query-builder to eager-load the nodes that are connected to
// the "dataList" edge. The optional arguments are used to configure the query builder of the edge.
func (sdtq *SysDictTypeQuery) WithDataList(opts ...func(*SysDictDataQuery)) *SysDictTypeQuery {
	query := &SysDictDataQuery{config: sdtq.config}
	for _, opt := range opts {
		opt(query)
	}
	sdtq.withDataList = query
	return sdtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DictName string `json:"dictName,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SysDictType.Query().
//		GroupBy(sysdicttype.FieldDictName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sdtq *SysDictTypeQuery) GroupBy(field string, fields ...string) *SysDictTypeGroupBy {
	group := &SysDictTypeGroupBy{config: sdtq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sdtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sdtq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DictName string `json:"dictName,omitempty"`
//	}
//
//	client.SysDictType.Query().
//		Select(sysdicttype.FieldDictName).
//		Scan(ctx, &v)
//
func (sdtq *SysDictTypeQuery) Select(fields ...string) *SysDictTypeSelect {
	sdtq.fields = append(sdtq.fields, fields...)
	return &SysDictTypeSelect{SysDictTypeQuery: sdtq}
}

func (sdtq *SysDictTypeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sdtq.fields {
		if !sysdicttype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sdtq.path != nil {
		prev, err := sdtq.path(ctx)
		if err != nil {
			return err
		}
		sdtq.sql = prev
	}
	return nil
}

func (sdtq *SysDictTypeQuery) sqlAll(ctx context.Context) ([]*SysDictType, error) {
	var (
		nodes       = []*SysDictType{}
		_spec       = sdtq.querySpec()
		loadedTypes = [1]bool{
			sdtq.withDataList != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SysDictType{config: sdtq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, sdtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := sdtq.withDataList; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SysDictType)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.DataList = []*SysDictData{}
		}
		query.Where(predicate.SysDictData(func(s *sql.Selector) {
			s.Where(sql.InValues(sysdicttype.DataListColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TypeId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "typeId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.DataList = append(node.Edges.DataList, n)
		}
	}

	return nodes, nil
}

func (sdtq *SysDictTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sdtq.querySpec()
	_spec.Node.Columns = sdtq.fields
	if len(sdtq.fields) > 0 {
		_spec.Unique = sdtq.unique != nil && *sdtq.unique
	}
	return sqlgraph.CountNodes(ctx, sdtq.driver, _spec)
}

func (sdtq *SysDictTypeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sdtq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sdtq *SysDictTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysdicttype.Table,
			Columns: sysdicttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysdicttype.FieldID,
			},
		},
		From:   sdtq.sql,
		Unique: true,
	}
	if unique := sdtq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sdtq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdicttype.FieldID)
		for i := range fields {
			if fields[i] != sysdicttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sdtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sdtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sdtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sdtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sdtq *SysDictTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sdtq.driver.Dialect())
	t1 := builder.Table(sysdicttype.Table)
	columns := sdtq.fields
	if len(columns) == 0 {
		columns = sysdicttype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sdtq.sql != nil {
		selector = sdtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sdtq.unique != nil && *sdtq.unique {
		selector.Distinct()
	}
	for _, p := range sdtq.predicates {
		p(selector)
	}
	for _, p := range sdtq.order {
		p(selector)
	}
	if offset := sdtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sdtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SysDictTypeGroupBy is the group-by builder for SysDictType entities.
type SysDictTypeGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sdtgb *SysDictTypeGroupBy) Aggregate(fns ...AggregateFunc) *SysDictTypeGroupBy {
	sdtgb.fns = append(sdtgb.fns, fns...)
	return sdtgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sdtgb *SysDictTypeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sdtgb.path(ctx)
	if err != nil {
		return err
	}
	sdtgb.sql = query
	return sdtgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sdtgb *SysDictTypeGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sdtgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sdtgb *SysDictTypeGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sdtgb.fields) > 1 {
		return nil, errors.New("ent: SysDictTypeGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sdtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sdtgb *SysDictTypeGroupBy) StringsX(ctx context.Context) []string {
	v, err := sdtgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sdtgb *SysDictTypeGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sdtgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdicttype.Label}
	default:
		err = fmt.Errorf("ent: SysDictTypeGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sdtgb *SysDictTypeGroupBy) StringX(ctx context.Context) string {
	v, err := sdtgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sdtgb *SysDictTypeGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sdtgb.fields) > 1 {
		return nil, errors.New("ent: SysDictTypeGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sdtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sdtgb *SysDictTypeGroupBy) IntsX(ctx context.Context) []int {
	v, err := sdtgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sdtgb *SysDictTypeGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sdtgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdicttype.Label}
	default:
		err = fmt.Errorf("ent: SysDictTypeGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sdtgb *SysDictTypeGroupBy) IntX(ctx context.Context) int {
	v, err := sdtgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sdtgb *SysDictTypeGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sdtgb.fields) > 1 {
		return nil, errors.New("ent: SysDictTypeGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sdtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sdtgb *SysDictTypeGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sdtgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sdtgb *SysDictTypeGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sdtgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdicttype.Label}
	default:
		err = fmt.Errorf("ent: SysDictTypeGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sdtgb *SysDictTypeGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sdtgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sdtgb *SysDictTypeGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sdtgb.fields) > 1 {
		return nil, errors.New("ent: SysDictTypeGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sdtgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sdtgb *SysDictTypeGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sdtgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sdtgb *SysDictTypeGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sdtgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdicttype.Label}
	default:
		err = fmt.Errorf("ent: SysDictTypeGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sdtgb *SysDictTypeGroupBy) BoolX(ctx context.Context) bool {
	v, err := sdtgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sdtgb *SysDictTypeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sdtgb.fields {
		if !sysdicttype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sdtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sdtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sdtgb *SysDictTypeGroupBy) sqlQuery() *sql.Selector {
	selector := sdtgb.sql.Select()
	aggregation := make([]string, 0, len(sdtgb.fns))
	for _, fn := range sdtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sdtgb.fields)+len(sdtgb.fns))
		for _, f := range sdtgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sdtgb.fields...)...)
}

// SysDictTypeSelect is the builder for selecting fields of SysDictType entities.
type SysDictTypeSelect struct {
	*SysDictTypeQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sdts *SysDictTypeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sdts.prepareQuery(ctx); err != nil {
		return err
	}
	sdts.sql = sdts.SysDictTypeQuery.sqlQuery(ctx)
	return sdts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sdts *SysDictTypeSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sdts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sdts *SysDictTypeSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sdts.fields) > 1 {
		return nil, errors.New("ent: SysDictTypeSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sdts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sdts *SysDictTypeSelect) StringsX(ctx context.Context) []string {
	v, err := sdts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sdts *SysDictTypeSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sdts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdicttype.Label}
	default:
		err = fmt.Errorf("ent: SysDictTypeSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sdts *SysDictTypeSelect) StringX(ctx context.Context) string {
	v, err := sdts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sdts *SysDictTypeSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sdts.fields) > 1 {
		return nil, errors.New("ent: SysDictTypeSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sdts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sdts *SysDictTypeSelect) IntsX(ctx context.Context) []int {
	v, err := sdts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sdts *SysDictTypeSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sdts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdicttype.Label}
	default:
		err = fmt.Errorf("ent: SysDictTypeSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sdts *SysDictTypeSelect) IntX(ctx context.Context) int {
	v, err := sdts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sdts *SysDictTypeSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sdts.fields) > 1 {
		return nil, errors.New("ent: SysDictTypeSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sdts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sdts *SysDictTypeSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sdts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sdts *SysDictTypeSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sdts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdicttype.Label}
	default:
		err = fmt.Errorf("ent: SysDictTypeSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sdts *SysDictTypeSelect) Float64X(ctx context.Context) float64 {
	v, err := sdts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sdts *SysDictTypeSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sdts.fields) > 1 {
		return nil, errors.New("ent: SysDictTypeSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sdts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sdts *SysDictTypeSelect) BoolsX(ctx context.Context) []bool {
	v, err := sdts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sdts *SysDictTypeSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sdts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysdicttype.Label}
	default:
		err = fmt.Errorf("ent: SysDictTypeSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sdts *SysDictTypeSelect) BoolX(ctx context.Context) bool {
	v, err := sdts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sdts *SysDictTypeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sdts.sql.Query()
	if err := sdts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
