// Code generated by entc, DO NOT EDIT.

package activitycomponent

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ActivityCode applies equality check predicate on the "activityCode" field. It's identical to ActivityCodeEQ.
func ActivityCode(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityCode), v))
	})
}

// ComponentType applies equality check predicate on the "componentType" field. It's identical to ComponentTypeEQ.
func ComponentType(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponentType), v))
	})
}

// VipDays applies equality check predicate on the "vipDays" field. It's identical to VipDaysEQ.
func VipDays(v bool) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipDays), v))
	})
}

// MinConsume applies equality check predicate on the "minConsume" field. It's identical to MinConsumeEQ.
func MinConsume(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinConsume), v))
	})
}

// MaxConsume applies equality check predicate on the "maxConsume" field. It's identical to MaxConsumeEQ.
func MaxConsume(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxConsume), v))
	})
}

// MinPayNum applies equality check predicate on the "minPayNum" field. It's identical to MinPayNumEQ.
func MinPayNum(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinPayNum), v))
	})
}

// PayTimes applies equality check predicate on the "payTimes" field. It's identical to PayTimesEQ.
func PayTimes(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayTimes), v))
	})
}

// PayAmount applies equality check predicate on the "payAmount" field. It's identical to PayAmountEQ.
func PayAmount(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayAmount), v))
	})
}

// RegDays applies equality check predicate on the "regDays" field. It's identical to RegDaysEQ.
func RegDays(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegDays), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// AssetItemId applies equality check predicate on the "assetItemId" field. It's identical to AssetItemIdEQ.
func AssetItemId(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssetItemId), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// ResId applies equality check predicate on the "resId" field. It's identical to ResIdEQ.
func ResId(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResId), v))
	})
}

// ResDays applies equality check predicate on the "resDays" field. It's identical to ResDaysEQ.
func ResDays(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResDays), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// ActivityCodeEQ applies the EQ predicate on the "activityCode" field.
func ActivityCodeEQ(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeNEQ applies the NEQ predicate on the "activityCode" field.
func ActivityCodeNEQ(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeIn applies the In predicate on the "activityCode" field.
func ActivityCodeIn(vs ...string) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivityCode), v...))
	})
}

// ActivityCodeNotIn applies the NotIn predicate on the "activityCode" field.
func ActivityCodeNotIn(vs ...string) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivityCode), v...))
	})
}

// ActivityCodeGT applies the GT predicate on the "activityCode" field.
func ActivityCodeGT(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeGTE applies the GTE predicate on the "activityCode" field.
func ActivityCodeGTE(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeLT applies the LT predicate on the "activityCode" field.
func ActivityCodeLT(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeLTE applies the LTE predicate on the "activityCode" field.
func ActivityCodeLTE(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeContains applies the Contains predicate on the "activityCode" field.
func ActivityCodeContains(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeHasPrefix applies the HasPrefix predicate on the "activityCode" field.
func ActivityCodeHasPrefix(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeHasSuffix applies the HasSuffix predicate on the "activityCode" field.
func ActivityCodeHasSuffix(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeIsNil applies the IsNil predicate on the "activityCode" field.
func ActivityCodeIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActivityCode)))
	})
}

// ActivityCodeNotNil applies the NotNil predicate on the "activityCode" field.
func ActivityCodeNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActivityCode)))
	})
}

// ActivityCodeEqualFold applies the EqualFold predicate on the "activityCode" field.
func ActivityCodeEqualFold(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeContainsFold applies the ContainsFold predicate on the "activityCode" field.
func ActivityCodeContainsFold(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActivityCode), v))
	})
}

// ComponentTypeEQ applies the EQ predicate on the "componentType" field.
func ComponentTypeEQ(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponentType), v))
	})
}

// ComponentTypeNEQ applies the NEQ predicate on the "componentType" field.
func ComponentTypeNEQ(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComponentType), v))
	})
}

// ComponentTypeIn applies the In predicate on the "componentType" field.
func ComponentTypeIn(vs ...string) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComponentType), v...))
	})
}

// ComponentTypeNotIn applies the NotIn predicate on the "componentType" field.
func ComponentTypeNotIn(vs ...string) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComponentType), v...))
	})
}

// ComponentTypeGT applies the GT predicate on the "componentType" field.
func ComponentTypeGT(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComponentType), v))
	})
}

// ComponentTypeGTE applies the GTE predicate on the "componentType" field.
func ComponentTypeGTE(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComponentType), v))
	})
}

// ComponentTypeLT applies the LT predicate on the "componentType" field.
func ComponentTypeLT(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComponentType), v))
	})
}

// ComponentTypeLTE applies the LTE predicate on the "componentType" field.
func ComponentTypeLTE(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComponentType), v))
	})
}

// ComponentTypeContains applies the Contains predicate on the "componentType" field.
func ComponentTypeContains(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComponentType), v))
	})
}

// ComponentTypeHasPrefix applies the HasPrefix predicate on the "componentType" field.
func ComponentTypeHasPrefix(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComponentType), v))
	})
}

// ComponentTypeHasSuffix applies the HasSuffix predicate on the "componentType" field.
func ComponentTypeHasSuffix(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComponentType), v))
	})
}

// ComponentTypeIsNil applies the IsNil predicate on the "componentType" field.
func ComponentTypeIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComponentType)))
	})
}

// ComponentTypeNotNil applies the NotNil predicate on the "componentType" field.
func ComponentTypeNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComponentType)))
	})
}

// ComponentTypeEqualFold applies the EqualFold predicate on the "componentType" field.
func ComponentTypeEqualFold(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComponentType), v))
	})
}

// ComponentTypeContainsFold applies the ContainsFold predicate on the "componentType" field.
func ComponentTypeContainsFold(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComponentType), v))
	})
}

// PolicyEQ applies the EQ predicate on the "policy" field.
func PolicyEQ(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPolicy), v))
	})
}

// PolicyNEQ applies the NEQ predicate on the "policy" field.
func PolicyNEQ(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPolicy), v))
	})
}

// PolicyIn applies the In predicate on the "policy" field.
func PolicyIn(vs ...string) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPolicy), v...))
	})
}

// PolicyNotIn applies the NotIn predicate on the "policy" field.
func PolicyNotIn(vs ...string) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPolicy), v...))
	})
}

// PolicyGT applies the GT predicate on the "policy" field.
func PolicyGT(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPolicy), v))
	})
}

// PolicyGTE applies the GTE predicate on the "policy" field.
func PolicyGTE(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPolicy), v))
	})
}

// PolicyLT applies the LT predicate on the "policy" field.
func PolicyLT(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPolicy), v))
	})
}

// PolicyLTE applies the LTE predicate on the "policy" field.
func PolicyLTE(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPolicy), v))
	})
}

// PolicyContains applies the Contains predicate on the "policy" field.
func PolicyContains(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPolicy), v))
	})
}

// PolicyHasPrefix applies the HasPrefix predicate on the "policy" field.
func PolicyHasPrefix(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPolicy), v))
	})
}

// PolicyHasSuffix applies the HasSuffix predicate on the "policy" field.
func PolicyHasSuffix(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPolicy), v))
	})
}

// PolicyIsNil applies the IsNil predicate on the "policy" field.
func PolicyIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPolicy)))
	})
}

// PolicyNotNil applies the NotNil predicate on the "policy" field.
func PolicyNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPolicy)))
	})
}

// PolicyEqualFold applies the EqualFold predicate on the "policy" field.
func PolicyEqualFold(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPolicy), v))
	})
}

// PolicyContainsFold applies the ContainsFold predicate on the "policy" field.
func PolicyContainsFold(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPolicy), v))
	})
}

// VipDaysEQ applies the EQ predicate on the "vipDays" field.
func VipDaysEQ(v bool) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipDays), v))
	})
}

// VipDaysNEQ applies the NEQ predicate on the "vipDays" field.
func VipDaysNEQ(v bool) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVipDays), v))
	})
}

// VipDaysIsNil applies the IsNil predicate on the "vipDays" field.
func VipDaysIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVipDays)))
	})
}

// VipDaysNotNil applies the NotNil predicate on the "vipDays" field.
func VipDaysNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVipDays)))
	})
}

// MinConsumeEQ applies the EQ predicate on the "minConsume" field.
func MinConsumeEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinConsume), v))
	})
}

// MinConsumeNEQ applies the NEQ predicate on the "minConsume" field.
func MinConsumeNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinConsume), v))
	})
}

// MinConsumeIn applies the In predicate on the "minConsume" field.
func MinConsumeIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMinConsume), v...))
	})
}

// MinConsumeNotIn applies the NotIn predicate on the "minConsume" field.
func MinConsumeNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMinConsume), v...))
	})
}

// MinConsumeGT applies the GT predicate on the "minConsume" field.
func MinConsumeGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinConsume), v))
	})
}

// MinConsumeGTE applies the GTE predicate on the "minConsume" field.
func MinConsumeGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinConsume), v))
	})
}

// MinConsumeLT applies the LT predicate on the "minConsume" field.
func MinConsumeLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinConsume), v))
	})
}

// MinConsumeLTE applies the LTE predicate on the "minConsume" field.
func MinConsumeLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinConsume), v))
	})
}

// MinConsumeIsNil applies the IsNil predicate on the "minConsume" field.
func MinConsumeIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMinConsume)))
	})
}

// MinConsumeNotNil applies the NotNil predicate on the "minConsume" field.
func MinConsumeNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMinConsume)))
	})
}

// MaxConsumeEQ applies the EQ predicate on the "maxConsume" field.
func MaxConsumeEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxConsume), v))
	})
}

// MaxConsumeNEQ applies the NEQ predicate on the "maxConsume" field.
func MaxConsumeNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxConsume), v))
	})
}

// MaxConsumeIn applies the In predicate on the "maxConsume" field.
func MaxConsumeIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxConsume), v...))
	})
}

// MaxConsumeNotIn applies the NotIn predicate on the "maxConsume" field.
func MaxConsumeNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxConsume), v...))
	})
}

// MaxConsumeGT applies the GT predicate on the "maxConsume" field.
func MaxConsumeGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxConsume), v))
	})
}

// MaxConsumeGTE applies the GTE predicate on the "maxConsume" field.
func MaxConsumeGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxConsume), v))
	})
}

// MaxConsumeLT applies the LT predicate on the "maxConsume" field.
func MaxConsumeLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxConsume), v))
	})
}

// MaxConsumeLTE applies the LTE predicate on the "maxConsume" field.
func MaxConsumeLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxConsume), v))
	})
}

// MaxConsumeIsNil applies the IsNil predicate on the "maxConsume" field.
func MaxConsumeIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaxConsume)))
	})
}

// MaxConsumeNotNil applies the NotNil predicate on the "maxConsume" field.
func MaxConsumeNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaxConsume)))
	})
}

// MinPayNumEQ applies the EQ predicate on the "minPayNum" field.
func MinPayNumEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinPayNum), v))
	})
}

// MinPayNumNEQ applies the NEQ predicate on the "minPayNum" field.
func MinPayNumNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinPayNum), v))
	})
}

// MinPayNumIn applies the In predicate on the "minPayNum" field.
func MinPayNumIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMinPayNum), v...))
	})
}

// MinPayNumNotIn applies the NotIn predicate on the "minPayNum" field.
func MinPayNumNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMinPayNum), v...))
	})
}

// MinPayNumGT applies the GT predicate on the "minPayNum" field.
func MinPayNumGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinPayNum), v))
	})
}

// MinPayNumGTE applies the GTE predicate on the "minPayNum" field.
func MinPayNumGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinPayNum), v))
	})
}

// MinPayNumLT applies the LT predicate on the "minPayNum" field.
func MinPayNumLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinPayNum), v))
	})
}

// MinPayNumLTE applies the LTE predicate on the "minPayNum" field.
func MinPayNumLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinPayNum), v))
	})
}

// MinPayNumIsNil applies the IsNil predicate on the "minPayNum" field.
func MinPayNumIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMinPayNum)))
	})
}

// MinPayNumNotNil applies the NotNil predicate on the "minPayNum" field.
func MinPayNumNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMinPayNum)))
	})
}

// PayTimesEQ applies the EQ predicate on the "payTimes" field.
func PayTimesEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayTimes), v))
	})
}

// PayTimesNEQ applies the NEQ predicate on the "payTimes" field.
func PayTimesNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayTimes), v))
	})
}

// PayTimesIn applies the In predicate on the "payTimes" field.
func PayTimesIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayTimes), v...))
	})
}

// PayTimesNotIn applies the NotIn predicate on the "payTimes" field.
func PayTimesNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayTimes), v...))
	})
}

// PayTimesGT applies the GT predicate on the "payTimes" field.
func PayTimesGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayTimes), v))
	})
}

// PayTimesGTE applies the GTE predicate on the "payTimes" field.
func PayTimesGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayTimes), v))
	})
}

// PayTimesLT applies the LT predicate on the "payTimes" field.
func PayTimesLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayTimes), v))
	})
}

// PayTimesLTE applies the LTE predicate on the "payTimes" field.
func PayTimesLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayTimes), v))
	})
}

// PayTimesIsNil applies the IsNil predicate on the "payTimes" field.
func PayTimesIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayTimes)))
	})
}

// PayTimesNotNil applies the NotNil predicate on the "payTimes" field.
func PayTimesNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayTimes)))
	})
}

// PayAmountEQ applies the EQ predicate on the "payAmount" field.
func PayAmountEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayAmount), v))
	})
}

// PayAmountNEQ applies the NEQ predicate on the "payAmount" field.
func PayAmountNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayAmount), v))
	})
}

// PayAmountIn applies the In predicate on the "payAmount" field.
func PayAmountIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayAmount), v...))
	})
}

// PayAmountNotIn applies the NotIn predicate on the "payAmount" field.
func PayAmountNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayAmount), v...))
	})
}

// PayAmountGT applies the GT predicate on the "payAmount" field.
func PayAmountGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayAmount), v))
	})
}

// PayAmountGTE applies the GTE predicate on the "payAmount" field.
func PayAmountGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayAmount), v))
	})
}

// PayAmountLT applies the LT predicate on the "payAmount" field.
func PayAmountLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayAmount), v))
	})
}

// PayAmountLTE applies the LTE predicate on the "payAmount" field.
func PayAmountLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayAmount), v))
	})
}

// PayAmountIsNil applies the IsNil predicate on the "payAmount" field.
func PayAmountIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayAmount)))
	})
}

// PayAmountNotNil applies the NotNil predicate on the "payAmount" field.
func PayAmountNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayAmount)))
	})
}

// RegDaysEQ applies the EQ predicate on the "regDays" field.
func RegDaysEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegDays), v))
	})
}

// RegDaysNEQ applies the NEQ predicate on the "regDays" field.
func RegDaysNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegDays), v))
	})
}

// RegDaysIn applies the In predicate on the "regDays" field.
func RegDaysIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegDays), v...))
	})
}

// RegDaysNotIn applies the NotIn predicate on the "regDays" field.
func RegDaysNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegDays), v...))
	})
}

// RegDaysGT applies the GT predicate on the "regDays" field.
func RegDaysGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegDays), v))
	})
}

// RegDaysGTE applies the GTE predicate on the "regDays" field.
func RegDaysGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegDays), v))
	})
}

// RegDaysLT applies the LT predicate on the "regDays" field.
func RegDaysLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegDays), v))
	})
}

// RegDaysLTE applies the LTE predicate on the "regDays" field.
func RegDaysLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegDays), v))
	})
}

// RegDaysIsNil applies the IsNil predicate on the "regDays" field.
func RegDaysIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRegDays)))
	})
}

// RegDaysNotNil applies the NotNil predicate on the "regDays" field.
func RegDaysNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRegDays)))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSummary)))
	})
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSummary)))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// AssetItemIdEQ applies the EQ predicate on the "assetItemId" field.
func AssetItemIdEQ(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdNEQ applies the NEQ predicate on the "assetItemId" field.
func AssetItemIdNEQ(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdIn applies the In predicate on the "assetItemId" field.
func AssetItemIdIn(vs ...int32) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAssetItemId), v...))
	})
}

// AssetItemIdNotIn applies the NotIn predicate on the "assetItemId" field.
func AssetItemIdNotIn(vs ...int32) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAssetItemId), v...))
	})
}

// AssetItemIdGT applies the GT predicate on the "assetItemId" field.
func AssetItemIdGT(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdGTE applies the GTE predicate on the "assetItemId" field.
func AssetItemIdGTE(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdLT applies the LT predicate on the "assetItemId" field.
func AssetItemIdLT(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdLTE applies the LTE predicate on the "assetItemId" field.
func AssetItemIdLTE(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdIsNil applies the IsNil predicate on the "assetItemId" field.
func AssetItemIdIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAssetItemId)))
	})
}

// AssetItemIdNotNil applies the NotNil predicate on the "assetItemId" field.
func AssetItemIdNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAssetItemId)))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// ResIdEQ applies the EQ predicate on the "resId" field.
func ResIdEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResId), v))
	})
}

// ResIdNEQ applies the NEQ predicate on the "resId" field.
func ResIdNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResId), v))
	})
}

// ResIdIn applies the In predicate on the "resId" field.
func ResIdIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResId), v...))
	})
}

// ResIdNotIn applies the NotIn predicate on the "resId" field.
func ResIdNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResId), v...))
	})
}

// ResIdGT applies the GT predicate on the "resId" field.
func ResIdGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResId), v))
	})
}

// ResIdGTE applies the GTE predicate on the "resId" field.
func ResIdGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResId), v))
	})
}

// ResIdLT applies the LT predicate on the "resId" field.
func ResIdLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResId), v))
	})
}

// ResIdLTE applies the LTE predicate on the "resId" field.
func ResIdLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResId), v))
	})
}

// ResIdIsNil applies the IsNil predicate on the "resId" field.
func ResIdIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResId)))
	})
}

// ResIdNotNil applies the NotNil predicate on the "resId" field.
func ResIdNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResId)))
	})
}

// ResDaysEQ applies the EQ predicate on the "resDays" field.
func ResDaysEQ(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResDays), v))
	})
}

// ResDaysNEQ applies the NEQ predicate on the "resDays" field.
func ResDaysNEQ(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResDays), v))
	})
}

// ResDaysIn applies the In predicate on the "resDays" field.
func ResDaysIn(vs ...int32) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResDays), v...))
	})
}

// ResDaysNotIn applies the NotIn predicate on the "resDays" field.
func ResDaysNotIn(vs ...int32) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResDays), v...))
	})
}

// ResDaysGT applies the GT predicate on the "resDays" field.
func ResDaysGT(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResDays), v))
	})
}

// ResDaysGTE applies the GTE predicate on the "resDays" field.
func ResDaysGTE(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResDays), v))
	})
}

// ResDaysLT applies the LT predicate on the "resDays" field.
func ResDaysLT(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResDays), v))
	})
}

// ResDaysLTE applies the LTE predicate on the "resDays" field.
func ResDaysLTE(v int32) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResDays), v))
	})
}

// ResDaysIsNil applies the IsNil predicate on the "resDays" field.
func ResDaysIsNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResDays)))
	})
}

// ResDaysNotNil applies the NotNil predicate on the "resDays" field.
func ResDaysNotNil() predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResDays)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.ActivityComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ActivityComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ActivityComponent) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ActivityComponent) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ActivityComponent) predicate.ActivityComponent {
	return predicate.ActivityComponent(func(s *sql.Selector) {
		p(s.Not())
	})
}
