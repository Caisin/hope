// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UserConsumeHTTPServer interface {
	BatchDeleteUserConsume(context.Context, *UserConsumeBatchDeleteReq) (*UserConsumeDeleteReply, error)
	CreateUserConsume(context.Context, *UserConsumeCreateReq) (*UserConsumeCreateReply, error)
	DeleteUserConsume(context.Context, *UserConsumeDeleteReq) (*UserConsumeDeleteReply, error)
	GetPageUserConsume(context.Context, *UserConsumePageReq) (*UserConsumePageReply, error)
	GetUserConsume(context.Context, *UserConsumeReq) (*UserConsumeReply, error)
	UpdateUserConsume(context.Context, *UserConsumeUpdateReq) (*UserConsumeUpdateReply, error)
}

func RegisterUserConsumeHTTPServer(s *http.Server, srv UserConsumeHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/user/consume/page", _UserConsume_GetPageUserConsume0_HTTP_Handler(srv))
	r.GET("/v1/user/consume/{id}", _UserConsume_GetUserConsume0_HTTP_Handler(srv))
	r.PUT("/v1/user/consume/{id}", _UserConsume_UpdateUserConsume0_HTTP_Handler(srv))
	r.POST("/v1/user/consume", _UserConsume_CreateUserConsume0_HTTP_Handler(srv))
	r.DELETE("/v1/user/consume/{id}", _UserConsume_DeleteUserConsume0_HTTP_Handler(srv))
	r.DELETE("/v1/user/consume", _UserConsume_BatchDeleteUserConsume0_HTTP_Handler(srv))
}

func _UserConsume_GetPageUserConsume0_HTTP_Handler(srv UserConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserConsumePageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/userconsume.v1.UserConsume/GetPageUserConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageUserConsume(ctx, req.(*UserConsumePageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserConsumePageReply)
		return ctx.Result(200, reply)
	}
}

func _UserConsume_GetUserConsume0_HTTP_Handler(srv UserConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserConsumeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/userconsume.v1.UserConsume/GetUserConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserConsume(ctx, req.(*UserConsumeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserConsumeReply)
		return ctx.Result(200, reply)
	}
}

func _UserConsume_UpdateUserConsume0_HTTP_Handler(srv UserConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserConsumeUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/userconsume.v1.UserConsume/UpdateUserConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserConsume(ctx, req.(*UserConsumeUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserConsumeUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _UserConsume_CreateUserConsume0_HTTP_Handler(srv UserConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserConsumeCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/userconsume.v1.UserConsume/CreateUserConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserConsume(ctx, req.(*UserConsumeCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserConsumeCreateReply)
		return ctx.Result(200, reply)
	}
}

func _UserConsume_DeleteUserConsume0_HTTP_Handler(srv UserConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserConsumeDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/userconsume.v1.UserConsume/DeleteUserConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserConsume(ctx, req.(*UserConsumeDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserConsumeDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _UserConsume_BatchDeleteUserConsume0_HTTP_Handler(srv UserConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserConsumeBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/userconsume.v1.UserConsume/BatchDeleteUserConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteUserConsume(ctx, req.(*UserConsumeBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserConsumeDeleteReply)
		return ctx.Result(200, reply)
	}
}

type UserConsumeHTTPClient interface {
	BatchDeleteUserConsume(ctx context.Context, req *UserConsumeBatchDeleteReq, opts ...http.CallOption) (rsp *UserConsumeDeleteReply, err error)
	CreateUserConsume(ctx context.Context, req *UserConsumeCreateReq, opts ...http.CallOption) (rsp *UserConsumeCreateReply, err error)
	DeleteUserConsume(ctx context.Context, req *UserConsumeDeleteReq, opts ...http.CallOption) (rsp *UserConsumeDeleteReply, err error)
	GetPageUserConsume(ctx context.Context, req *UserConsumePageReq, opts ...http.CallOption) (rsp *UserConsumePageReply, err error)
	GetUserConsume(ctx context.Context, req *UserConsumeReq, opts ...http.CallOption) (rsp *UserConsumeReply, err error)
	UpdateUserConsume(ctx context.Context, req *UserConsumeUpdateReq, opts ...http.CallOption) (rsp *UserConsumeUpdateReply, err error)
}

type UserConsumeHTTPClientImpl struct {
	cc *http.Client
}

func NewUserConsumeHTTPClient(client *http.Client) UserConsumeHTTPClient {
	return &UserConsumeHTTPClientImpl{client}
}

func (c *UserConsumeHTTPClientImpl) BatchDeleteUserConsume(ctx context.Context, in *UserConsumeBatchDeleteReq, opts ...http.CallOption) (*UserConsumeDeleteReply, error) {
	var out UserConsumeDeleteReply
	pattern := "/v1/user/consume"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/userconsume.v1.UserConsume/BatchDeleteUserConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserConsumeHTTPClientImpl) CreateUserConsume(ctx context.Context, in *UserConsumeCreateReq, opts ...http.CallOption) (*UserConsumeCreateReply, error) {
	var out UserConsumeCreateReply
	pattern := "/v1/user/consume"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/userconsume.v1.UserConsume/CreateUserConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserConsumeHTTPClientImpl) DeleteUserConsume(ctx context.Context, in *UserConsumeDeleteReq, opts ...http.CallOption) (*UserConsumeDeleteReply, error) {
	var out UserConsumeDeleteReply
	pattern := "/v1/user/consume/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/userconsume.v1.UserConsume/DeleteUserConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserConsumeHTTPClientImpl) GetPageUserConsume(ctx context.Context, in *UserConsumePageReq, opts ...http.CallOption) (*UserConsumePageReply, error) {
	var out UserConsumePageReply
	pattern := "/v1/user/consume/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/userconsume.v1.UserConsume/GetPageUserConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserConsumeHTTPClientImpl) GetUserConsume(ctx context.Context, in *UserConsumeReq, opts ...http.CallOption) (*UserConsumeReply, error) {
	var out UserConsumeReply
	pattern := "/v1/user/consume/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/userconsume.v1.UserConsume/GetUserConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserConsumeHTTPClientImpl) UpdateUserConsume(ctx context.Context, in *UserConsumeUpdateReq, opts ...http.CallOption) (*UserConsumeUpdateReply, error) {
	var out UserConsumeUpdateReply
	pattern := "/v1/user/consume/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/userconsume.v1.UserConsume/UpdateUserConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
