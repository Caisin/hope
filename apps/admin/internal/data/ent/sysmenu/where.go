// Code generated by entc, DO NOT EDIT.

package sysmenu

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ParentId applies equality check predicate on the "parentId" field. It's identical to ParentIdEQ.
func ParentId(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentId), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Redirect applies equality check predicate on the "redirect" field. It's identical to RedirectEQ.
func Redirect(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirect), v))
	})
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Paths applies equality check predicate on the "paths" field. It's identical to PathsEQ.
func Paths(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaths), v))
	})
}

// MenuType applies equality check predicate on the "menuType" field. It's identical to MenuTypeEQ.
func MenuType(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuType), v))
	})
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAction), v))
	})
}

// Permission applies equality check predicate on the "permission" field. It's identical to PermissionEQ.
func Permission(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermission), v))
	})
}

// IgnoreKeepAlive applies equality check predicate on the "ignoreKeepAlive" field. It's identical to IgnoreKeepAliveEQ.
func IgnoreKeepAlive(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIgnoreKeepAlive), v))
	})
}

// HideBreadcrumb applies equality check predicate on the "hideBreadcrumb" field. It's identical to HideBreadcrumbEQ.
func HideBreadcrumb(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideBreadcrumb), v))
	})
}

// HideChildrenInMenu applies equality check predicate on the "hideChildrenInMenu" field. It's identical to HideChildrenInMenuEQ.
func HideChildrenInMenu(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideChildrenInMenu), v))
	})
}

// Component applies equality check predicate on the "component" field. It's identical to ComponentEQ.
func Component(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponent), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int32) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// HideMenu applies equality check predicate on the "hideMenu" field. It's identical to HideMenuEQ.
func HideMenu(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideMenu), v))
	})
}

// FrameSrc applies equality check predicate on the "frameSrc" field. It's identical to FrameSrcEQ.
func FrameSrc(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrameSrc), v))
	})
}

// CheckPermission applies equality check predicate on the "checkPermission" field. It's identical to CheckPermissionEQ.
func CheckPermission(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckPermission), v))
	})
}

// Operation applies equality check predicate on the "operation" field. It's identical to OperationEQ.
func Operation(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperation), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// ParentIdEQ applies the EQ predicate on the "parentId" field.
func ParentIdEQ(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentId), v))
	})
}

// ParentIdNEQ applies the NEQ predicate on the "parentId" field.
func ParentIdNEQ(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentId), v))
	})
}

// ParentIdIn applies the In predicate on the "parentId" field.
func ParentIdIn(vs ...int64) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentId), v...))
	})
}

// ParentIdNotIn applies the NotIn predicate on the "parentId" field.
func ParentIdNotIn(vs ...int64) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentId), v...))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// RedirectEQ applies the EQ predicate on the "redirect" field.
func RedirectEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirect), v))
	})
}

// RedirectNEQ applies the NEQ predicate on the "redirect" field.
func RedirectNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRedirect), v))
	})
}

// RedirectIn applies the In predicate on the "redirect" field.
func RedirectIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRedirect), v...))
	})
}

// RedirectNotIn applies the NotIn predicate on the "redirect" field.
func RedirectNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRedirect), v...))
	})
}

// RedirectGT applies the GT predicate on the "redirect" field.
func RedirectGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRedirect), v))
	})
}

// RedirectGTE applies the GTE predicate on the "redirect" field.
func RedirectGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRedirect), v))
	})
}

// RedirectLT applies the LT predicate on the "redirect" field.
func RedirectLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRedirect), v))
	})
}

// RedirectLTE applies the LTE predicate on the "redirect" field.
func RedirectLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRedirect), v))
	})
}

// RedirectContains applies the Contains predicate on the "redirect" field.
func RedirectContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRedirect), v))
	})
}

// RedirectHasPrefix applies the HasPrefix predicate on the "redirect" field.
func RedirectHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRedirect), v))
	})
}

// RedirectHasSuffix applies the HasSuffix predicate on the "redirect" field.
func RedirectHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRedirect), v))
	})
}

// RedirectIsNil applies the IsNil predicate on the "redirect" field.
func RedirectIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRedirect)))
	})
}

// RedirectNotNil applies the NotNil predicate on the "redirect" field.
func RedirectNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRedirect)))
	})
}

// RedirectEqualFold applies the EqualFold predicate on the "redirect" field.
func RedirectEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRedirect), v))
	})
}

// RedirectContainsFold applies the ContainsFold predicate on the "redirect" field.
func RedirectContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRedirect), v))
	})
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcon), v))
	})
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcon), v...))
	})
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcon), v...))
	})
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcon), v))
	})
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcon), v))
	})
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcon), v))
	})
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcon), v))
	})
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcon), v))
	})
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcon), v))
	})
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcon), v))
	})
}

// IconIsNil applies the IsNil predicate on the "icon" field.
func IconIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIcon)))
	})
}

// IconNotNil applies the NotNil predicate on the "icon" field.
func IconNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIcon)))
	})
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcon), v))
	})
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcon), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPath)))
	})
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPath)))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// PathsEQ applies the EQ predicate on the "paths" field.
func PathsEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaths), v))
	})
}

// PathsNEQ applies the NEQ predicate on the "paths" field.
func PathsNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaths), v))
	})
}

// PathsIn applies the In predicate on the "paths" field.
func PathsIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaths), v...))
	})
}

// PathsNotIn applies the NotIn predicate on the "paths" field.
func PathsNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaths), v...))
	})
}

// PathsGT applies the GT predicate on the "paths" field.
func PathsGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaths), v))
	})
}

// PathsGTE applies the GTE predicate on the "paths" field.
func PathsGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaths), v))
	})
}

// PathsLT applies the LT predicate on the "paths" field.
func PathsLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaths), v))
	})
}

// PathsLTE applies the LTE predicate on the "paths" field.
func PathsLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaths), v))
	})
}

// PathsContains applies the Contains predicate on the "paths" field.
func PathsContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaths), v))
	})
}

// PathsHasPrefix applies the HasPrefix predicate on the "paths" field.
func PathsHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaths), v))
	})
}

// PathsHasSuffix applies the HasSuffix predicate on the "paths" field.
func PathsHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaths), v))
	})
}

// PathsIsNil applies the IsNil predicate on the "paths" field.
func PathsIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaths)))
	})
}

// PathsNotNil applies the NotNil predicate on the "paths" field.
func PathsNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaths)))
	})
}

// PathsEqualFold applies the EqualFold predicate on the "paths" field.
func PathsEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaths), v))
	})
}

// PathsContainsFold applies the ContainsFold predicate on the "paths" field.
func PathsContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaths), v))
	})
}

// MenuTypeEQ applies the EQ predicate on the "menuType" field.
func MenuTypeEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuType), v))
	})
}

// MenuTypeNEQ applies the NEQ predicate on the "menuType" field.
func MenuTypeNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMenuType), v))
	})
}

// MenuTypeIn applies the In predicate on the "menuType" field.
func MenuTypeIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMenuType), v...))
	})
}

// MenuTypeNotIn applies the NotIn predicate on the "menuType" field.
func MenuTypeNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMenuType), v...))
	})
}

// MenuTypeGT applies the GT predicate on the "menuType" field.
func MenuTypeGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMenuType), v))
	})
}

// MenuTypeGTE applies the GTE predicate on the "menuType" field.
func MenuTypeGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMenuType), v))
	})
}

// MenuTypeLT applies the LT predicate on the "menuType" field.
func MenuTypeLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMenuType), v))
	})
}

// MenuTypeLTE applies the LTE predicate on the "menuType" field.
func MenuTypeLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMenuType), v))
	})
}

// MenuTypeContains applies the Contains predicate on the "menuType" field.
func MenuTypeContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMenuType), v))
	})
}

// MenuTypeHasPrefix applies the HasPrefix predicate on the "menuType" field.
func MenuTypeHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMenuType), v))
	})
}

// MenuTypeHasSuffix applies the HasSuffix predicate on the "menuType" field.
func MenuTypeHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMenuType), v))
	})
}

// MenuTypeIsNil applies the IsNil predicate on the "menuType" field.
func MenuTypeIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMenuType)))
	})
}

// MenuTypeNotNil applies the NotNil predicate on the "menuType" field.
func MenuTypeNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMenuType)))
	})
}

// MenuTypeEqualFold applies the EqualFold predicate on the "menuType" field.
func MenuTypeEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMenuType), v))
	})
}

// MenuTypeContainsFold applies the ContainsFold predicate on the "menuType" field.
func MenuTypeContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMenuType), v))
	})
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAction), v))
	})
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAction), v))
	})
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAction), v...))
	})
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAction), v...))
	})
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAction), v))
	})
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAction), v))
	})
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAction), v))
	})
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAction), v))
	})
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAction), v))
	})
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAction), v))
	})
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAction), v))
	})
}

// ActionIsNil applies the IsNil predicate on the "action" field.
func ActionIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAction)))
	})
}

// ActionNotNil applies the NotNil predicate on the "action" field.
func ActionNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAction)))
	})
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAction), v))
	})
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAction), v))
	})
}

// PermissionEQ applies the EQ predicate on the "permission" field.
func PermissionEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermission), v))
	})
}

// PermissionNEQ applies the NEQ predicate on the "permission" field.
func PermissionNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPermission), v))
	})
}

// PermissionIn applies the In predicate on the "permission" field.
func PermissionIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPermission), v...))
	})
}

// PermissionNotIn applies the NotIn predicate on the "permission" field.
func PermissionNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPermission), v...))
	})
}

// PermissionGT applies the GT predicate on the "permission" field.
func PermissionGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPermission), v))
	})
}

// PermissionGTE applies the GTE predicate on the "permission" field.
func PermissionGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPermission), v))
	})
}

// PermissionLT applies the LT predicate on the "permission" field.
func PermissionLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPermission), v))
	})
}

// PermissionLTE applies the LTE predicate on the "permission" field.
func PermissionLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPermission), v))
	})
}

// PermissionContains applies the Contains predicate on the "permission" field.
func PermissionContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPermission), v))
	})
}

// PermissionHasPrefix applies the HasPrefix predicate on the "permission" field.
func PermissionHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPermission), v))
	})
}

// PermissionHasSuffix applies the HasSuffix predicate on the "permission" field.
func PermissionHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPermission), v))
	})
}

// PermissionIsNil applies the IsNil predicate on the "permission" field.
func PermissionIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPermission)))
	})
}

// PermissionNotNil applies the NotNil predicate on the "permission" field.
func PermissionNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPermission)))
	})
}

// PermissionEqualFold applies the EqualFold predicate on the "permission" field.
func PermissionEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPermission), v))
	})
}

// PermissionContainsFold applies the ContainsFold predicate on the "permission" field.
func PermissionContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPermission), v))
	})
}

// IgnoreKeepAliveEQ applies the EQ predicate on the "ignoreKeepAlive" field.
func IgnoreKeepAliveEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIgnoreKeepAlive), v))
	})
}

// IgnoreKeepAliveNEQ applies the NEQ predicate on the "ignoreKeepAlive" field.
func IgnoreKeepAliveNEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIgnoreKeepAlive), v))
	})
}

// IgnoreKeepAliveIsNil applies the IsNil predicate on the "ignoreKeepAlive" field.
func IgnoreKeepAliveIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIgnoreKeepAlive)))
	})
}

// IgnoreKeepAliveNotNil applies the NotNil predicate on the "ignoreKeepAlive" field.
func IgnoreKeepAliveNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIgnoreKeepAlive)))
	})
}

// HideBreadcrumbEQ applies the EQ predicate on the "hideBreadcrumb" field.
func HideBreadcrumbEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideBreadcrumb), v))
	})
}

// HideBreadcrumbNEQ applies the NEQ predicate on the "hideBreadcrumb" field.
func HideBreadcrumbNEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHideBreadcrumb), v))
	})
}

// HideBreadcrumbIsNil applies the IsNil predicate on the "hideBreadcrumb" field.
func HideBreadcrumbIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHideBreadcrumb)))
	})
}

// HideBreadcrumbNotNil applies the NotNil predicate on the "hideBreadcrumb" field.
func HideBreadcrumbNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHideBreadcrumb)))
	})
}

// HideChildrenInMenuEQ applies the EQ predicate on the "hideChildrenInMenu" field.
func HideChildrenInMenuEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideChildrenInMenu), v))
	})
}

// HideChildrenInMenuNEQ applies the NEQ predicate on the "hideChildrenInMenu" field.
func HideChildrenInMenuNEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHideChildrenInMenu), v))
	})
}

// HideChildrenInMenuIsNil applies the IsNil predicate on the "hideChildrenInMenu" field.
func HideChildrenInMenuIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHideChildrenInMenu)))
	})
}

// HideChildrenInMenuNotNil applies the NotNil predicate on the "hideChildrenInMenu" field.
func HideChildrenInMenuNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHideChildrenInMenu)))
	})
}

// ComponentEQ applies the EQ predicate on the "component" field.
func ComponentEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponent), v))
	})
}

// ComponentNEQ applies the NEQ predicate on the "component" field.
func ComponentNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComponent), v))
	})
}

// ComponentIn applies the In predicate on the "component" field.
func ComponentIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComponent), v...))
	})
}

// ComponentNotIn applies the NotIn predicate on the "component" field.
func ComponentNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComponent), v...))
	})
}

// ComponentGT applies the GT predicate on the "component" field.
func ComponentGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComponent), v))
	})
}

// ComponentGTE applies the GTE predicate on the "component" field.
func ComponentGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComponent), v))
	})
}

// ComponentLT applies the LT predicate on the "component" field.
func ComponentLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComponent), v))
	})
}

// ComponentLTE applies the LTE predicate on the "component" field.
func ComponentLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComponent), v))
	})
}

// ComponentContains applies the Contains predicate on the "component" field.
func ComponentContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComponent), v))
	})
}

// ComponentHasPrefix applies the HasPrefix predicate on the "component" field.
func ComponentHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComponent), v))
	})
}

// ComponentHasSuffix applies the HasSuffix predicate on the "component" field.
func ComponentHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComponent), v))
	})
}

// ComponentIsNil applies the IsNil predicate on the "component" field.
func ComponentIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComponent)))
	})
}

// ComponentNotNil applies the NotNil predicate on the "component" field.
func ComponentNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComponent)))
	})
}

// ComponentEqualFold applies the EqualFold predicate on the "component" field.
func ComponentEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComponent), v))
	})
}

// ComponentContainsFold applies the ContainsFold predicate on the "component" field.
func ComponentContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComponent), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int32) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int32) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int32) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int32) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int32) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int32) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int32) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int32) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// SortIsNil applies the IsNil predicate on the "sort" field.
func SortIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSort)))
	})
}

// SortNotNil applies the NotNil predicate on the "sort" field.
func SortNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSort)))
	})
}

// HideMenuEQ applies the EQ predicate on the "hideMenu" field.
func HideMenuEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideMenu), v))
	})
}

// HideMenuNEQ applies the NEQ predicate on the "hideMenu" field.
func HideMenuNEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHideMenu), v))
	})
}

// HideMenuIsNil applies the IsNil predicate on the "hideMenu" field.
func HideMenuIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHideMenu)))
	})
}

// HideMenuNotNil applies the NotNil predicate on the "hideMenu" field.
func HideMenuNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHideMenu)))
	})
}

// FrameSrcEQ applies the EQ predicate on the "frameSrc" field.
func FrameSrcEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcNEQ applies the NEQ predicate on the "frameSrc" field.
func FrameSrcNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcIn applies the In predicate on the "frameSrc" field.
func FrameSrcIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFrameSrc), v...))
	})
}

// FrameSrcNotIn applies the NotIn predicate on the "frameSrc" field.
func FrameSrcNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFrameSrc), v...))
	})
}

// FrameSrcGT applies the GT predicate on the "frameSrc" field.
func FrameSrcGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcGTE applies the GTE predicate on the "frameSrc" field.
func FrameSrcGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcLT applies the LT predicate on the "frameSrc" field.
func FrameSrcLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcLTE applies the LTE predicate on the "frameSrc" field.
func FrameSrcLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcContains applies the Contains predicate on the "frameSrc" field.
func FrameSrcContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcHasPrefix applies the HasPrefix predicate on the "frameSrc" field.
func FrameSrcHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcHasSuffix applies the HasSuffix predicate on the "frameSrc" field.
func FrameSrcHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcIsNil applies the IsNil predicate on the "frameSrc" field.
func FrameSrcIsNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFrameSrc)))
	})
}

// FrameSrcNotNil applies the NotNil predicate on the "frameSrc" field.
func FrameSrcNotNil() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFrameSrc)))
	})
}

// FrameSrcEqualFold applies the EqualFold predicate on the "frameSrc" field.
func FrameSrcEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcContainsFold applies the ContainsFold predicate on the "frameSrc" field.
func FrameSrcContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFrameSrc), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// CheckPermissionEQ applies the EQ predicate on the "checkPermission" field.
func CheckPermissionEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckPermission), v))
	})
}

// CheckPermissionNEQ applies the NEQ predicate on the "checkPermission" field.
func CheckPermissionNEQ(v bool) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckPermission), v))
	})
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperation), v))
	})
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperation), v))
	})
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperation), v...))
	})
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...string) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperation), v...))
	})
}

// OperationGT applies the GT predicate on the "operation" field.
func OperationGT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperation), v))
	})
}

// OperationGTE applies the GTE predicate on the "operation" field.
func OperationGTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperation), v))
	})
}

// OperationLT applies the LT predicate on the "operation" field.
func OperationLT(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperation), v))
	})
}

// OperationLTE applies the LTE predicate on the "operation" field.
func OperationLTE(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperation), v))
	})
}

// OperationContains applies the Contains predicate on the "operation" field.
func OperationContains(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperation), v))
	})
}

// OperationHasPrefix applies the HasPrefix predicate on the "operation" field.
func OperationHasPrefix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperation), v))
	})
}

// OperationHasSuffix applies the HasSuffix predicate on the "operation" field.
func OperationHasSuffix(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperation), v))
	})
}

// OperationEqualFold applies the EqualFold predicate on the "operation" field.
func OperationEqualFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperation), v))
	})
}

// OperationContainsFold applies the ContainsFold predicate on the "operation" field.
func OperationContainsFold(v string) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperation), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RoleTable, RolePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.SysRole) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RoleTable, RolePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.SysMenu) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.SysMenu) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysMenu) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysMenu) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysMenu) predicate.SysMenu {
	return predicate.SysMenu(func(s *sql.Selector) {
		p(s.Not())
	})
}
