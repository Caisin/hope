// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysOperaLogHTTPServer interface {
	BatchDeleteSysOperaLog(context.Context, *SysOperaLogBatchDeleteReq) (*SysOperaLogDeleteReply, error)
	CreateSysOperaLog(context.Context, *SysOperaLogCreateReq) (*SysOperaLogCreateReply, error)
	DeleteSysOperaLog(context.Context, *SysOperaLogDeleteReq) (*SysOperaLogDeleteReply, error)
	GetPageSysOperaLog(context.Context, *SysOperaLogPageReq) (*SysOperaLogPageReply, error)
	GetSysOperaLog(context.Context, *SysOperaLogReq) (*SysOperaLogReply, error)
	UpdateSysOperaLog(context.Context, *SysOperaLogUpdateReq) (*SysOperaLogUpdateReply, error)
}

func RegisterSysOperaLogHTTPServer(s *http.Server, srv SysOperaLogHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sys/opera/log/page", _SysOperaLog_GetPageSysOperaLog0_HTTP_Handler(srv))
	r.GET("/v1/sys/opera/log/{id}", _SysOperaLog_GetSysOperaLog0_HTTP_Handler(srv))
	r.PUT("/v1/sys/opera/log/{id}", _SysOperaLog_UpdateSysOperaLog0_HTTP_Handler(srv))
	r.POST("/v1/sys/opera/log", _SysOperaLog_CreateSysOperaLog0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/opera/log/{id}", _SysOperaLog_DeleteSysOperaLog0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/opera/log", _SysOperaLog_BatchDeleteSysOperaLog0_HTTP_Handler(srv))
}

func _SysOperaLog_GetPageSysOperaLog0_HTTP_Handler(srv SysOperaLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOperaLogPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysoperalog.v1.SysOperaLog/GetPageSysOperaLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageSysOperaLog(ctx, req.(*SysOperaLogPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOperaLogPageReply)
		return ctx.Result(200, reply)
	}
}

func _SysOperaLog_GetSysOperaLog0_HTTP_Handler(srv SysOperaLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOperaLogReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysoperalog.v1.SysOperaLog/GetSysOperaLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysOperaLog(ctx, req.(*SysOperaLogReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOperaLogReply)
		return ctx.Result(200, reply)
	}
}

func _SysOperaLog_UpdateSysOperaLog0_HTTP_Handler(srv SysOperaLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOperaLogUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysoperalog.v1.SysOperaLog/UpdateSysOperaLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysOperaLog(ctx, req.(*SysOperaLogUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOperaLogUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysOperaLog_CreateSysOperaLog0_HTTP_Handler(srv SysOperaLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOperaLogCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysoperalog.v1.SysOperaLog/CreateSysOperaLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysOperaLog(ctx, req.(*SysOperaLogCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOperaLogCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysOperaLog_DeleteSysOperaLog0_HTTP_Handler(srv SysOperaLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOperaLogDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysoperalog.v1.SysOperaLog/DeleteSysOperaLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysOperaLog(ctx, req.(*SysOperaLogDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOperaLogDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysOperaLog_BatchDeleteSysOperaLog0_HTTP_Handler(srv SysOperaLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysOperaLogBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysoperalog.v1.SysOperaLog/BatchDeleteSysOperaLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysOperaLog(ctx, req.(*SysOperaLogBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysOperaLogDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysOperaLogHTTPClient interface {
	BatchDeleteSysOperaLog(ctx context.Context, req *SysOperaLogBatchDeleteReq, opts ...http.CallOption) (rsp *SysOperaLogDeleteReply, err error)
	CreateSysOperaLog(ctx context.Context, req *SysOperaLogCreateReq, opts ...http.CallOption) (rsp *SysOperaLogCreateReply, err error)
	DeleteSysOperaLog(ctx context.Context, req *SysOperaLogDeleteReq, opts ...http.CallOption) (rsp *SysOperaLogDeleteReply, err error)
	GetPageSysOperaLog(ctx context.Context, req *SysOperaLogPageReq, opts ...http.CallOption) (rsp *SysOperaLogPageReply, err error)
	GetSysOperaLog(ctx context.Context, req *SysOperaLogReq, opts ...http.CallOption) (rsp *SysOperaLogReply, err error)
	UpdateSysOperaLog(ctx context.Context, req *SysOperaLogUpdateReq, opts ...http.CallOption) (rsp *SysOperaLogUpdateReply, err error)
}

type SysOperaLogHTTPClientImpl struct {
	cc *http.Client
}

func NewSysOperaLogHTTPClient(client *http.Client) SysOperaLogHTTPClient {
	return &SysOperaLogHTTPClientImpl{client}
}

func (c *SysOperaLogHTTPClientImpl) BatchDeleteSysOperaLog(ctx context.Context, in *SysOperaLogBatchDeleteReq, opts ...http.CallOption) (*SysOperaLogDeleteReply, error) {
	var out SysOperaLogDeleteReply
	pattern := "/v1/sys/opera/log"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysoperalog.v1.SysOperaLog/BatchDeleteSysOperaLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysOperaLogHTTPClientImpl) CreateSysOperaLog(ctx context.Context, in *SysOperaLogCreateReq, opts ...http.CallOption) (*SysOperaLogCreateReply, error) {
	var out SysOperaLogCreateReply
	pattern := "/v1/sys/opera/log"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysoperalog.v1.SysOperaLog/CreateSysOperaLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysOperaLogHTTPClientImpl) DeleteSysOperaLog(ctx context.Context, in *SysOperaLogDeleteReq, opts ...http.CallOption) (*SysOperaLogDeleteReply, error) {
	var out SysOperaLogDeleteReply
	pattern := "/v1/sys/opera/log/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysoperalog.v1.SysOperaLog/DeleteSysOperaLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysOperaLogHTTPClientImpl) GetPageSysOperaLog(ctx context.Context, in *SysOperaLogPageReq, opts ...http.CallOption) (*SysOperaLogPageReply, error) {
	var out SysOperaLogPageReply
	pattern := "/v1/sys/opera/log/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysoperalog.v1.SysOperaLog/GetPageSysOperaLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysOperaLogHTTPClientImpl) GetSysOperaLog(ctx context.Context, in *SysOperaLogReq, opts ...http.CallOption) (*SysOperaLogReply, error) {
	var out SysOperaLogReply
	pattern := "/v1/sys/opera/log/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysoperalog.v1.SysOperaLog/GetSysOperaLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysOperaLogHTTPClientImpl) UpdateSysOperaLog(ctx context.Context, in *SysOperaLogUpdateReq, opts ...http.CallOption) (*SysOperaLogUpdateReply, error) {
	var out SysOperaLogUpdateReply
	pattern := "/v1/sys/opera/log/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysoperalog.v1.SysOperaLog/UpdateSysOperaLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
