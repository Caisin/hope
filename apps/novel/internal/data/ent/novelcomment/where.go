// Code generated by entc, DO NOT EDIT.

package novelcomment

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NovelId applies equality check predicate on the "novelId" field. It's identical to NovelIdEQ.
func NovelId(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// RepUserId applies equality check predicate on the "repUserId" field. It's identical to RepUserIdEQ.
func RepUserId(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepUserId), v))
	})
}

// RepUserName applies equality check predicate on the "repUserName" field. It's identical to RepUserNameEQ.
func RepUserName(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepUserName), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int32) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// PId applies equality check predicate on the "pId" field. It's identical to PIdEQ.
func PId(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPId), v))
	})
}

// IsTop applies equality check predicate on the "isTop" field. It's identical to IsTopEQ.
func IsTop(v bool) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTop), v))
	})
}

// IsHighlight applies equality check predicate on the "isHighlight" field. It's identical to IsHighlightEQ.
func IsHighlight(v bool) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHighlight), v))
	})
}

// IsHot applies equality check predicate on the "isHot" field. It's identical to IsHotEQ.
func IsHot(v bool) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHot), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// NovelIdEQ applies the EQ predicate on the "novelId" field.
func NovelIdEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// NovelIdNEQ applies the NEQ predicate on the "novelId" field.
func NovelIdNEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelId), v))
	})
}

// NovelIdIn applies the In predicate on the "novelId" field.
func NovelIdIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelId), v...))
	})
}

// NovelIdNotIn applies the NotIn predicate on the "novelId" field.
func NovelIdNotIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelId), v...))
	})
}

// NovelIdGT applies the GT predicate on the "novelId" field.
func NovelIdGT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNovelId), v))
	})
}

// NovelIdGTE applies the GTE predicate on the "novelId" field.
func NovelIdGTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNovelId), v))
	})
}

// NovelIdLT applies the LT predicate on the "novelId" field.
func NovelIdLT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNovelId), v))
	})
}

// NovelIdLTE applies the LTE predicate on the "novelId" field.
func NovelIdLTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNovelId), v))
	})
}

// NovelIdIsNil applies the IsNil predicate on the "novelId" field.
func NovelIdIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNovelId)))
	})
}

// NovelIdNotNil applies the NotNil predicate on the "novelId" field.
func NovelIdNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNovelId)))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserId)))
	})
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserId)))
	})
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatar), v))
	})
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvatar), v...))
	})
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvatar), v...))
	})
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatar), v))
	})
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatar), v))
	})
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatar), v))
	})
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatar), v))
	})
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatar), v))
	})
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatar), v))
	})
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatar), v))
	})
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvatar)))
	})
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvatar)))
	})
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatar), v))
	})
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatar), v))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameIsNil applies the IsNil predicate on the "userName" field.
func UserNameIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserName)))
	})
}

// UserNameNotNil applies the NotNil predicate on the "userName" field.
func UserNameNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserName)))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// RepUserIdEQ applies the EQ predicate on the "repUserId" field.
func RepUserIdEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepUserId), v))
	})
}

// RepUserIdNEQ applies the NEQ predicate on the "repUserId" field.
func RepUserIdNEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepUserId), v))
	})
}

// RepUserIdIn applies the In predicate on the "repUserId" field.
func RepUserIdIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepUserId), v...))
	})
}

// RepUserIdNotIn applies the NotIn predicate on the "repUserId" field.
func RepUserIdNotIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepUserId), v...))
	})
}

// RepUserIdGT applies the GT predicate on the "repUserId" field.
func RepUserIdGT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepUserId), v))
	})
}

// RepUserIdGTE applies the GTE predicate on the "repUserId" field.
func RepUserIdGTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepUserId), v))
	})
}

// RepUserIdLT applies the LT predicate on the "repUserId" field.
func RepUserIdLT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepUserId), v))
	})
}

// RepUserIdLTE applies the LTE predicate on the "repUserId" field.
func RepUserIdLTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepUserId), v))
	})
}

// RepUserIdIsNil applies the IsNil predicate on the "repUserId" field.
func RepUserIdIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRepUserId)))
	})
}

// RepUserIdNotNil applies the NotNil predicate on the "repUserId" field.
func RepUserIdNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRepUserId)))
	})
}

// RepUserNameEQ applies the EQ predicate on the "repUserName" field.
func RepUserNameEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepUserName), v))
	})
}

// RepUserNameNEQ applies the NEQ predicate on the "repUserName" field.
func RepUserNameNEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepUserName), v))
	})
}

// RepUserNameIn applies the In predicate on the "repUserName" field.
func RepUserNameIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepUserName), v...))
	})
}

// RepUserNameNotIn applies the NotIn predicate on the "repUserName" field.
func RepUserNameNotIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepUserName), v...))
	})
}

// RepUserNameGT applies the GT predicate on the "repUserName" field.
func RepUserNameGT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepUserName), v))
	})
}

// RepUserNameGTE applies the GTE predicate on the "repUserName" field.
func RepUserNameGTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepUserName), v))
	})
}

// RepUserNameLT applies the LT predicate on the "repUserName" field.
func RepUserNameLT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepUserName), v))
	})
}

// RepUserNameLTE applies the LTE predicate on the "repUserName" field.
func RepUserNameLTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepUserName), v))
	})
}

// RepUserNameContains applies the Contains predicate on the "repUserName" field.
func RepUserNameContains(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRepUserName), v))
	})
}

// RepUserNameHasPrefix applies the HasPrefix predicate on the "repUserName" field.
func RepUserNameHasPrefix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRepUserName), v))
	})
}

// RepUserNameHasSuffix applies the HasSuffix predicate on the "repUserName" field.
func RepUserNameHasSuffix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRepUserName), v))
	})
}

// RepUserNameIsNil applies the IsNil predicate on the "repUserName" field.
func RepUserNameIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRepUserName)))
	})
}

// RepUserNameNotNil applies the NotNil predicate on the "repUserName" field.
func RepUserNameNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRepUserName)))
	})
}

// RepUserNameEqualFold applies the EqualFold predicate on the "repUserName" field.
func RepUserNameEqualFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRepUserName), v))
	})
}

// RepUserNameContainsFold applies the ContainsFold predicate on the "repUserName" field.
func RepUserNameContainsFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRepUserName), v))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContent)))
	})
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContent)))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int32) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int32) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScore), v))
	})
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int32) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScore), v...))
	})
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int32) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScore), v...))
	})
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int32) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScore), v))
	})
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int32) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScore), v))
	})
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int32) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScore), v))
	})
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int32) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScore), v))
	})
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldScore)))
	})
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldScore)))
	})
}

// PIdEQ applies the EQ predicate on the "pId" field.
func PIdEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPId), v))
	})
}

// PIdNEQ applies the NEQ predicate on the "pId" field.
func PIdNEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPId), v))
	})
}

// PIdIn applies the In predicate on the "pId" field.
func PIdIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPId), v...))
	})
}

// PIdNotIn applies the NotIn predicate on the "pId" field.
func PIdNotIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPId), v...))
	})
}

// PIdGT applies the GT predicate on the "pId" field.
func PIdGT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPId), v))
	})
}

// PIdGTE applies the GTE predicate on the "pId" field.
func PIdGTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPId), v))
	})
}

// PIdLT applies the LT predicate on the "pId" field.
func PIdLT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPId), v))
	})
}

// PIdLTE applies the LTE predicate on the "pId" field.
func PIdLTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPId), v))
	})
}

// PIdIsNil applies the IsNil predicate on the "pId" field.
func PIdIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPId)))
	})
}

// PIdNotNil applies the NotNil predicate on the "pId" field.
func PIdNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPId)))
	})
}

// IsTopEQ applies the EQ predicate on the "isTop" field.
func IsTopEQ(v bool) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsTop), v))
	})
}

// IsTopNEQ applies the NEQ predicate on the "isTop" field.
func IsTopNEQ(v bool) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsTop), v))
	})
}

// IsTopIsNil applies the IsNil predicate on the "isTop" field.
func IsTopIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsTop)))
	})
}

// IsTopNotNil applies the NotNil predicate on the "isTop" field.
func IsTopNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsTop)))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// IsHighlightEQ applies the EQ predicate on the "isHighlight" field.
func IsHighlightEQ(v bool) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHighlight), v))
	})
}

// IsHighlightNEQ applies the NEQ predicate on the "isHighlight" field.
func IsHighlightNEQ(v bool) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsHighlight), v))
	})
}

// IsHighlightIsNil applies the IsNil predicate on the "isHighlight" field.
func IsHighlightIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsHighlight)))
	})
}

// IsHighlightNotNil applies the NotNil predicate on the "isHighlight" field.
func IsHighlightNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsHighlight)))
	})
}

// IsHotEQ applies the EQ predicate on the "isHot" field.
func IsHotEQ(v bool) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHot), v))
	})
}

// IsHotNEQ applies the NEQ predicate on the "isHot" field.
func IsHotNEQ(v bool) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsHot), v))
	})
}

// IsHotIsNil applies the IsNil predicate on the "isHot" field.
func IsHotIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsHot)))
	})
}

// IsHotNotNil applies the NotNil predicate on the "isHot" field.
func IsHotNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsHot)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.NovelComment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelComment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.NovelComment) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildes applies the HasEdge predicate on the "childes" edge.
func HasChildes() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildesTable, ChildesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildesWith applies the HasEdge predicate on the "childes" edge with a given conditions (other predicates).
func HasChildesWith(preds ...predicate.NovelComment) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildesTable, ChildesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.SocialUser) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NovelComment) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NovelComment) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NovelComment) predicate.NovelComment {
	return predicate.NovelComment(func(s *sql.Selector) {
		p(s.Not())
	})
}
