// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/param/internal/data/ent/qiniuconfig"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// QiniuConfig is the model entity for the QiniuConfig schema.
type QiniuConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// AccessKey holds the value of the "accessKey" field.
	// accessKey
	AccessKey string `json:"accessKey,omitempty"`
	// Bucket holds the value of the "bucket" field.
	// Bucket 识别符
	Bucket string `json:"bucket,omitempty"`
	// Host holds the value of the "host" field.
	// 外链域名
	Host string `json:"host,omitempty"`
	// SecretKey holds the value of the "secretKey" field.
	// secretKey
	SecretKey string `json:"secretKey,omitempty"`
	// Type holds the value of the "type" field.
	// 空间类型
	Type string `json:"type,omitempty"`
	// Zone holds the value of the "zone" field.
	// 机房
	Zone string `json:"zone,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QiniuConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case qiniuconfig.FieldID, qiniuconfig.FieldCreateBy, qiniuconfig.FieldUpdateBy, qiniuconfig.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case qiniuconfig.FieldAccessKey, qiniuconfig.FieldBucket, qiniuconfig.FieldHost, qiniuconfig.FieldSecretKey, qiniuconfig.FieldType, qiniuconfig.FieldZone:
			values[i] = new(sql.NullString)
		case qiniuconfig.FieldCreatedAt, qiniuconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type QiniuConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QiniuConfig fields.
func (qc *QiniuConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case qiniuconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qc.ID = int64(value.Int64)
		case qiniuconfig.FieldAccessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accessKey", values[i])
			} else if value.Valid {
				qc.AccessKey = value.String
			}
		case qiniuconfig.FieldBucket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket", values[i])
			} else if value.Valid {
				qc.Bucket = value.String
			}
		case qiniuconfig.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				qc.Host = value.String
			}
		case qiniuconfig.FieldSecretKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secretKey", values[i])
			} else if value.Valid {
				qc.SecretKey = value.String
			}
		case qiniuconfig.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				qc.Type = value.String
			}
		case qiniuconfig.FieldZone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zone", values[i])
			} else if value.Valid {
				qc.Zone = value.String
			}
		case qiniuconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				qc.CreatedAt = value.Time
			}
		case qiniuconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				qc.UpdatedAt = value.Time
			}
		case qiniuconfig.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				qc.CreateBy = value.Int64
			}
		case qiniuconfig.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				qc.UpdateBy = value.Int64
			}
		case qiniuconfig.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				qc.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this QiniuConfig.
// Note that you need to call QiniuConfig.Unwrap() before calling this method if this QiniuConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (qc *QiniuConfig) Update() *QiniuConfigUpdateOne {
	return (&QiniuConfigClient{config: qc.config}).UpdateOne(qc)
}

// Unwrap unwraps the QiniuConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qc *QiniuConfig) Unwrap() *QiniuConfig {
	tx, ok := qc.config.driver.(*txDriver)
	if !ok {
		panic("ent: QiniuConfig is not a transactional entity")
	}
	qc.config.driver = tx.drv
	return qc
}

// String implements the fmt.Stringer.
func (qc *QiniuConfig) String() string {
	var builder strings.Builder
	builder.WriteString("QiniuConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", qc.ID))
	builder.WriteString(", accessKey=")
	builder.WriteString(qc.AccessKey)
	builder.WriteString(", bucket=")
	builder.WriteString(qc.Bucket)
	builder.WriteString(", host=")
	builder.WriteString(qc.Host)
	builder.WriteString(", secretKey=")
	builder.WriteString(qc.SecretKey)
	builder.WriteString(", type=")
	builder.WriteString(qc.Type)
	builder.WriteString(", zone=")
	builder.WriteString(qc.Zone)
	builder.WriteString(", createdAt=")
	builder.WriteString(qc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(qc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", qc.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", qc.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", qc.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// QiniuConfigs is a parsable slice of QiniuConfig.
type QiniuConfigs []*QiniuConfig

func (qc QiniuConfigs) config(cfg config) {
	for _i := range qc {
		qc[_i].config = cfg
	}
}
