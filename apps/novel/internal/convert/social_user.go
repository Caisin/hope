// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/social_user.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/socialuser/v1"
	"hope/apps/novel/internal/data/ent"
)

func SocialUserUpdateReq2Data(v *v1.SocialUserUpdateReq) *ent.SocialUser {
	if v == nil {
		return nil
	}
	return &ent.SocialUser{
		ID:            v.Id,
		ChId:          v.ChId,
		Unionid:       v.Unionid,
		Token:         v.Token,
		Openid:        v.Openid,
		RoutineOpenid: v.RoutineOpenid,
		UserName:      v.UserName,
		NickName:      v.NickName,
		Birthday:      v.Birthday.AsTime(),
		Phone:         v.Phone,
		Email:         v.Email,
		Password:      v.Password,
		Avatar:        v.Avatar,
		Sex:           v.Sex,
		Region:        v.Region,
		City:          v.City,
		Language:      v.Language,
		Province:      v.Province,
		Country:       v.Country,
		Signature:     v.Signature,
		Remark:        v.Remark,
		Groupid:       v.Groupid,
		TagidList:     v.TagidList,
		Subscribe:     v.Subscribe,
		SubscribeTime: v.SubscribeTime,
		SessionKey:    v.SessionKey,
	}
}

func SocialUserData2UpdateReq(v *ent.SocialUser) *v1.SocialUserUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.SocialUserUpdateReq{
		Id:            v.ID,
		ChId:          v.ChId,
		Unionid:       v.Unionid,
		Token:         v.Token,
		Openid:        v.Openid,
		RoutineOpenid: v.RoutineOpenid,
		UserName:      v.UserName,
		NickName:      v.NickName,
		Birthday:      timestamppb.New(v.Birthday),
		Phone:         v.Phone,
		Email:         v.Email,
		Password:      v.Password,
		Avatar:        v.Avatar,
		Sex:           v.Sex,
		Region:        v.Region,
		City:          v.City,
		Language:      v.Language,
		Province:      v.Province,
		Country:       v.Country,
		Signature:     v.Signature,
		Remark:        v.Remark,
		Groupid:       v.Groupid,
		TagidList:     v.TagidList,
		Subscribe:     v.Subscribe,
		SubscribeTime: v.SubscribeTime,
		SessionKey:    v.SessionKey,
	}
}

func SocialUserCreateReq2Data(v *v1.SocialUserCreateReq) *ent.SocialUser {
	if v == nil {
		return nil
	}
	return &ent.SocialUser{
		ChId:          v.ChId,
		Unionid:       v.Unionid,
		Token:         v.Token,
		Openid:        v.Openid,
		RoutineOpenid: v.RoutineOpenid,
		UserName:      v.UserName,
		NickName:      v.NickName,
		Birthday:      v.Birthday.AsTime(),
		Phone:         v.Phone,
		Email:         v.Email,
		Password:      v.Password,
		Avatar:        v.Avatar,
		Sex:           v.Sex,
		Region:        v.Region,
		City:          v.City,
		Language:      v.Language,
		Province:      v.Province,
		Country:       v.Country,
		Signature:     v.Signature,
		Remark:        v.Remark,
		Groupid:       v.Groupid,
		TagidList:     v.TagidList,
		Subscribe:     v.Subscribe,
		SubscribeTime: v.SubscribeTime,
		SessionKey:    v.SessionKey,
	}
}

func SocialUserData2CreateReq(v *ent.SocialUser) *v1.SocialUserCreateReq {
	if v == nil {
		return nil
	}
	return &v1.SocialUserCreateReq{
		ChId:          v.ChId,
		Unionid:       v.Unionid,
		Token:         v.Token,
		Openid:        v.Openid,
		RoutineOpenid: v.RoutineOpenid,
		UserName:      v.UserName,
		NickName:      v.NickName,
		Birthday:      timestamppb.New(v.Birthday),
		Phone:         v.Phone,
		Email:         v.Email,
		Password:      v.Password,
		Avatar:        v.Avatar,
		Sex:           v.Sex,
		Region:        v.Region,
		City:          v.City,
		Language:      v.Language,
		Province:      v.Province,
		Country:       v.Country,
		Signature:     v.Signature,
		Remark:        v.Remark,
		Groupid:       v.Groupid,
		TagidList:     v.TagidList,
		Subscribe:     v.Subscribe,
		SubscribeTime: v.SubscribeTime,
		SessionKey:    v.SessionKey,
	}
}

func SocialUserReq2Data(v *v1.SocialUserReq) *ent.SocialUser {
	if v == nil {
		return nil
	}
	return &ent.SocialUser{
		ChId:          v.ChId,
		Unionid:       v.Unionid,
		Token:         v.Token,
		Openid:        v.Openid,
		RoutineOpenid: v.RoutineOpenid,
		UserName:      v.UserName,
		NickName:      v.NickName,
		Birthday:      v.Birthday.AsTime(),
		Phone:         v.Phone,
		Email:         v.Email,
		Password:      v.Password,
		Avatar:        v.Avatar,
		Sex:           v.Sex,
		Region:        v.Region,
		City:          v.City,
		Language:      v.Language,
		Province:      v.Province,
		Country:       v.Country,
		Signature:     v.Signature,
		Remark:        v.Remark,
		Groupid:       v.Groupid,
		TagidList:     v.TagidList,
		Subscribe:     v.Subscribe,
		SubscribeTime: v.SubscribeTime,
		SessionKey:    v.SessionKey,
	}
}

func SocialUserData2Req(v *ent.SocialUser) *v1.SocialUserReq {
	if v == nil {
		return nil
	}
	return &v1.SocialUserReq{
		ChId:          v.ChId,
		Unionid:       v.Unionid,
		Token:         v.Token,
		Openid:        v.Openid,
		RoutineOpenid: v.RoutineOpenid,
		UserName:      v.UserName,
		NickName:      v.NickName,
		Birthday:      timestamppb.New(v.Birthday),
		Phone:         v.Phone,
		Email:         v.Email,
		Password:      v.Password,
		Avatar:        v.Avatar,
		Sex:           v.Sex,
		Region:        v.Region,
		City:          v.City,
		Language:      v.Language,
		Province:      v.Province,
		Country:       v.Country,
		Signature:     v.Signature,
		Remark:        v.Remark,
		Groupid:       v.Groupid,
		TagidList:     v.TagidList,
		Subscribe:     v.Subscribe,
		SubscribeTime: v.SubscribeTime,
		SessionKey:    v.SessionKey,
	}
}

func SocialUserData2Reply(v *ent.SocialUser) *v1.SocialUserData {
	if v == nil {
		return nil
	}
	return &v1.SocialUserData{
		Id:            v.ID,
		ChId:          v.ChId,
		Unionid:       v.Unionid,
		Token:         v.Token,
		Openid:        v.Openid,
		RoutineOpenid: v.RoutineOpenid,
		UserName:      v.UserName,
		NickName:      v.NickName,
		Birthday:      timestamppb.New(v.Birthday),
		Phone:         v.Phone,
		Email:         v.Email,
		Password:      v.Password,
		Avatar:        v.Avatar,
		Sex:           v.Sex,
		Region:        v.Region,
		City:          v.City,
		Language:      v.Language,
		Province:      v.Province,
		Country:       v.Country,
		Signature:     v.Signature,
		Remark:        v.Remark,
		Groupid:       v.Groupid,
		TagidList:     v.TagidList,
		Subscribe:     v.Subscribe,
		SubscribeTime: v.SubscribeTime,
		SessionKey:    v.SessionKey,
		UserType:      v.UserType,
		CreatedAt:     timestamppb.New(v.CreatedAt),
		UpdatedAt:     timestamppb.New(v.UpdatedAt),
		CreateBy:      v.CreateBy,
		UpdateBy:      v.UpdateBy,
		TenantId:      v.TenantId,
	}
}
