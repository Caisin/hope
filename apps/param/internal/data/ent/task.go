// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/param/internal/data/ent/task"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// TaskName holds the value of the "taskName" field.
	// 任务名称
	TaskName string `json:"taskName,omitempty"`
	// TaskGroup holds the value of the "taskGroup" field.
	// 任务分组
	TaskGroup string `json:"taskGroup,omitempty"`
	// Unit holds the value of the "unit" field.
	// 单位
	Unit string `json:"unit,omitempty"`
	// Topic holds the value of the "topic" field.
	// 订阅主题
	Topic string `json:"topic,omitempty"`
	// Function holds the value of the "function" field.
	// 处理方法
	Function string `json:"function,omitempty"`
	// TaskCode holds the value of the "taskCode" field.
	// 任务类型
	TaskCode string `json:"taskCode,omitempty"`
	// PreTask holds the value of the "preTask" field.
	// 前置任务ID
	PreTask int64 `json:"preTask,omitempty"`
	// NovelId holds the value of the "novelId" field.
	// 点击跳转书号
	NovelId int64 `json:"novelId,omitempty"`
	// CycleType holds the value of the "cycleType" field.
	// 循环类型,once
	CycleType string `json:"cycleType,omitempty"`
	// Remark holds the value of the "remark" field.
	// 描述信息
	Remark string `json:"remark,omitempty"`
	// Amount holds the value of the "amount" field.
	// 奖励金额
	Amount int64 `json:"amount,omitempty"`
	// Reward holds the value of the "reward" field.
	// 额外奖励
	Reward int64 `json:"reward,omitempty"`
	// AmountItem holds the value of the "amountItem" field.
	// 奖励资金科目
	AmountItem int32 `json:"amountItem,omitempty"`
	// RewardItem holds the value of the "rewardItem" field.
	// 额外奖励资金科目
	RewardItem int32 `json:"rewardItem,omitempty"`
	// TargetNames holds the value of the "targetNames" field.
	// 目标任务名,当任务为一天多次时,逗号分割
	TargetNames string `json:"targetNames,omitempty"`
	// TargetAmounts holds the value of the "targetAmounts" field.
	// 目标值,当任务为一天多次时,逗号分割
	TargetAmounts string `json:"targetAmounts,omitempty"`
	// Status holds the value of the "status" field.
	// 是否启用
	Status bool `json:"status,omitempty"`
	// SortNum holds the value of the "sortNum" field.
	// 排序字段
	SortNum int64 `json:"sortNum,omitempty"`
	// ActionType holds the value of the "actionType" field.
	// 跳转动作,pay
	ActionType string `json:"actionType,omitempty"`
	// EffectTime holds the value of the "effectTime" field.
	// 生效时间
	EffectTime time.Time `json:"effectTime,omitempty"`
	// ExpiredTime holds the value of the "expiredTime" field.
	// 失效时间
	ExpiredTime time.Time `json:"expiredTime,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldStatus:
			values[i] = new(sql.NullBool)
		case task.FieldID, task.FieldPreTask, task.FieldNovelId, task.FieldAmount, task.FieldReward, task.FieldAmountItem, task.FieldRewardItem, task.FieldSortNum, task.FieldCreateBy, task.FieldUpdateBy, task.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case task.FieldTaskName, task.FieldTaskGroup, task.FieldUnit, task.FieldTopic, task.FieldFunction, task.FieldTaskCode, task.FieldCycleType, task.FieldRemark, task.FieldTargetNames, task.FieldTargetAmounts, task.FieldActionType:
			values[i] = new(sql.NullString)
		case task.FieldEffectTime, task.FieldExpiredTime, task.FieldCreatedAt, task.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Task", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case task.FieldTaskName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field taskName", values[i])
			} else if value.Valid {
				t.TaskName = value.String
			}
		case task.FieldTaskGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field taskGroup", values[i])
			} else if value.Valid {
				t.TaskGroup = value.String
			}
		case task.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				t.Unit = value.String
			}
		case task.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				t.Topic = value.String
			}
		case task.FieldFunction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field function", values[i])
			} else if value.Valid {
				t.Function = value.String
			}
		case task.FieldTaskCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field taskCode", values[i])
			} else if value.Valid {
				t.TaskCode = value.String
			}
		case task.FieldPreTask:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field preTask", values[i])
			} else if value.Valid {
				t.PreTask = value.Int64
			}
		case task.FieldNovelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field novelId", values[i])
			} else if value.Valid {
				t.NovelId = value.Int64
			}
		case task.FieldCycleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cycleType", values[i])
			} else if value.Valid {
				t.CycleType = value.String
			}
		case task.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				t.Remark = value.String
			}
		case task.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = value.Int64
			}
		case task.FieldReward:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reward", values[i])
			} else if value.Valid {
				t.Reward = value.Int64
			}
		case task.FieldAmountItem:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amountItem", values[i])
			} else if value.Valid {
				t.AmountItem = int32(value.Int64)
			}
		case task.FieldRewardItem:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rewardItem", values[i])
			} else if value.Valid {
				t.RewardItem = int32(value.Int64)
			}
		case task.FieldTargetNames:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field targetNames", values[i])
			} else if value.Valid {
				t.TargetNames = value.String
			}
		case task.FieldTargetAmounts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field targetAmounts", values[i])
			} else if value.Valid {
				t.TargetAmounts = value.String
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.Bool
			}
		case task.FieldSortNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sortNum", values[i])
			} else if value.Valid {
				t.SortNum = value.Int64
			}
		case task.FieldActionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field actionType", values[i])
			} else if value.Valid {
				t.ActionType = value.String
			}
		case task.FieldEffectTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effectTime", values[i])
			} else if value.Valid {
				t.EffectTime = value.Time
			}
		case task.FieldExpiredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiredTime", values[i])
			} else if value.Valid {
				t.ExpiredTime = value.Time
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case task.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case task.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				t.CreateBy = value.Int64
			}
		case task.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				t.UpdateBy = value.Int64
			}
		case task.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				t.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return (&TaskClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", taskName=")
	builder.WriteString(t.TaskName)
	builder.WriteString(", taskGroup=")
	builder.WriteString(t.TaskGroup)
	builder.WriteString(", unit=")
	builder.WriteString(t.Unit)
	builder.WriteString(", topic=")
	builder.WriteString(t.Topic)
	builder.WriteString(", function=")
	builder.WriteString(t.Function)
	builder.WriteString(", taskCode=")
	builder.WriteString(t.TaskCode)
	builder.WriteString(", preTask=")
	builder.WriteString(fmt.Sprintf("%v", t.PreTask))
	builder.WriteString(", novelId=")
	builder.WriteString(fmt.Sprintf("%v", t.NovelId))
	builder.WriteString(", cycleType=")
	builder.WriteString(t.CycleType)
	builder.WriteString(", remark=")
	builder.WriteString(t.Remark)
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", reward=")
	builder.WriteString(fmt.Sprintf("%v", t.Reward))
	builder.WriteString(", amountItem=")
	builder.WriteString(fmt.Sprintf("%v", t.AmountItem))
	builder.WriteString(", rewardItem=")
	builder.WriteString(fmt.Sprintf("%v", t.RewardItem))
	builder.WriteString(", targetNames=")
	builder.WriteString(t.TargetNames)
	builder.WriteString(", targetAmounts=")
	builder.WriteString(t.TargetAmounts)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", sortNum=")
	builder.WriteString(fmt.Sprintf("%v", t.SortNum))
	builder.WriteString(", actionType=")
	builder.WriteString(t.ActionType)
	builder.WriteString(", effectTime=")
	builder.WriteString(t.EffectTime.Format(time.ANSIC))
	builder.WriteString(", expiredTime=")
	builder.WriteString(t.ExpiredTime.Format(time.ANSIC))
	builder.WriteString(", createdAt=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", t.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", t.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", t.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task

func (t Tasks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
