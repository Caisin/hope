// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/clienterror/v1/client_error.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientErrorClient is the client API for ClientError service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientErrorClient interface {
	// 分页查询ClientError
	GetPageClientError(ctx context.Context, in *ClientErrorPageReq, opts ...grpc.CallOption) (*ClientErrorPageReply, error)
	// 获取ClientError
	GetClientError(ctx context.Context, in *ClientErrorReq, opts ...grpc.CallOption) (*ClientErrorReply, error)
	// 更新ClientError
	UpdateClientError(ctx context.Context, in *ClientErrorUpdateReq, opts ...grpc.CallOption) (*ClientErrorUpdateReply, error)
	// 创建ClientError
	CreateClientError(ctx context.Context, in *ClientErrorCreateReq, opts ...grpc.CallOption) (*ClientErrorCreateReply, error)
	// 删除ClientError
	DeleteClientError(ctx context.Context, in *ClientErrorDeleteReq, opts ...grpc.CallOption) (*ClientErrorDeleteReply, error)
	// 批量删除ClientError
	BatchDeleteClientError(ctx context.Context, in *ClientErrorBatchDeleteReq, opts ...grpc.CallOption) (*ClientErrorDeleteReply, error)
}

type clientErrorClient struct {
	cc grpc.ClientConnInterface
}

func NewClientErrorClient(cc grpc.ClientConnInterface) ClientErrorClient {
	return &clientErrorClient{cc}
}

func (c *clientErrorClient) GetPageClientError(ctx context.Context, in *ClientErrorPageReq, opts ...grpc.CallOption) (*ClientErrorPageReply, error) {
	out := new(ClientErrorPageReply)
	err := c.cc.Invoke(ctx, "/clienterror.v1.ClientError/GetPageClientError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientErrorClient) GetClientError(ctx context.Context, in *ClientErrorReq, opts ...grpc.CallOption) (*ClientErrorReply, error) {
	out := new(ClientErrorReply)
	err := c.cc.Invoke(ctx, "/clienterror.v1.ClientError/GetClientError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientErrorClient) UpdateClientError(ctx context.Context, in *ClientErrorUpdateReq, opts ...grpc.CallOption) (*ClientErrorUpdateReply, error) {
	out := new(ClientErrorUpdateReply)
	err := c.cc.Invoke(ctx, "/clienterror.v1.ClientError/UpdateClientError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientErrorClient) CreateClientError(ctx context.Context, in *ClientErrorCreateReq, opts ...grpc.CallOption) (*ClientErrorCreateReply, error) {
	out := new(ClientErrorCreateReply)
	err := c.cc.Invoke(ctx, "/clienterror.v1.ClientError/CreateClientError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientErrorClient) DeleteClientError(ctx context.Context, in *ClientErrorDeleteReq, opts ...grpc.CallOption) (*ClientErrorDeleteReply, error) {
	out := new(ClientErrorDeleteReply)
	err := c.cc.Invoke(ctx, "/clienterror.v1.ClientError/DeleteClientError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientErrorClient) BatchDeleteClientError(ctx context.Context, in *ClientErrorBatchDeleteReq, opts ...grpc.CallOption) (*ClientErrorDeleteReply, error) {
	out := new(ClientErrorDeleteReply)
	err := c.cc.Invoke(ctx, "/clienterror.v1.ClientError/BatchDeleteClientError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientErrorServer is the server API for ClientError service.
// All implementations must embed UnimplementedClientErrorServer
// for forward compatibility
type ClientErrorServer interface {
	// 分页查询ClientError
	GetPageClientError(context.Context, *ClientErrorPageReq) (*ClientErrorPageReply, error)
	// 获取ClientError
	GetClientError(context.Context, *ClientErrorReq) (*ClientErrorReply, error)
	// 更新ClientError
	UpdateClientError(context.Context, *ClientErrorUpdateReq) (*ClientErrorUpdateReply, error)
	// 创建ClientError
	CreateClientError(context.Context, *ClientErrorCreateReq) (*ClientErrorCreateReply, error)
	// 删除ClientError
	DeleteClientError(context.Context, *ClientErrorDeleteReq) (*ClientErrorDeleteReply, error)
	// 批量删除ClientError
	BatchDeleteClientError(context.Context, *ClientErrorBatchDeleteReq) (*ClientErrorDeleteReply, error)
	mustEmbedUnimplementedClientErrorServer()
}

// UnimplementedClientErrorServer must be embedded to have forward compatible implementations.
type UnimplementedClientErrorServer struct {
}

func (UnimplementedClientErrorServer) GetPageClientError(context.Context, *ClientErrorPageReq) (*ClientErrorPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageClientError not implemented")
}
func (UnimplementedClientErrorServer) GetClientError(context.Context, *ClientErrorReq) (*ClientErrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientError not implemented")
}
func (UnimplementedClientErrorServer) UpdateClientError(context.Context, *ClientErrorUpdateReq) (*ClientErrorUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientError not implemented")
}
func (UnimplementedClientErrorServer) CreateClientError(context.Context, *ClientErrorCreateReq) (*ClientErrorCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClientError not implemented")
}
func (UnimplementedClientErrorServer) DeleteClientError(context.Context, *ClientErrorDeleteReq) (*ClientErrorDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClientError not implemented")
}
func (UnimplementedClientErrorServer) BatchDeleteClientError(context.Context, *ClientErrorBatchDeleteReq) (*ClientErrorDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteClientError not implemented")
}
func (UnimplementedClientErrorServer) mustEmbedUnimplementedClientErrorServer() {}

// UnsafeClientErrorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientErrorServer will
// result in compilation errors.
type UnsafeClientErrorServer interface {
	mustEmbedUnimplementedClientErrorServer()
}

func RegisterClientErrorServer(s grpc.ServiceRegistrar, srv ClientErrorServer) {
	s.RegisterService(&ClientError_ServiceDesc, srv)
}

func _ClientError_GetPageClientError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientErrorPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientErrorServer).GetPageClientError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clienterror.v1.ClientError/GetPageClientError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientErrorServer).GetPageClientError(ctx, req.(*ClientErrorPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientError_GetClientError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientErrorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientErrorServer).GetClientError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clienterror.v1.ClientError/GetClientError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientErrorServer).GetClientError(ctx, req.(*ClientErrorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientError_UpdateClientError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientErrorUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientErrorServer).UpdateClientError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clienterror.v1.ClientError/UpdateClientError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientErrorServer).UpdateClientError(ctx, req.(*ClientErrorUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientError_CreateClientError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientErrorCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientErrorServer).CreateClientError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clienterror.v1.ClientError/CreateClientError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientErrorServer).CreateClientError(ctx, req.(*ClientErrorCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientError_DeleteClientError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientErrorDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientErrorServer).DeleteClientError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clienterror.v1.ClientError/DeleteClientError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientErrorServer).DeleteClientError(ctx, req.(*ClientErrorDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientError_BatchDeleteClientError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientErrorBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientErrorServer).BatchDeleteClientError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clienterror.v1.ClientError/BatchDeleteClientError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientErrorServer).BatchDeleteClientError(ctx, req.(*ClientErrorBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientError_ServiceDesc is the grpc.ServiceDesc for ClientError service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientError_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clienterror.v1.ClientError",
	HandlerType: (*ClientErrorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageClientError",
			Handler:    _ClientError_GetPageClientError_Handler,
		},
		{
			MethodName: "GetClientError",
			Handler:    _ClientError_GetClientError_Handler,
		},
		{
			MethodName: "UpdateClientError",
			Handler:    _ClientError_UpdateClientError_Handler,
		},
		{
			MethodName: "CreateClientError",
			Handler:    _ClientError_CreateClientError_Handler,
		},
		{
			MethodName: "DeleteClientError",
			Handler:    _ClientError_DeleteClientError_Handler,
		},
		{
			MethodName: "BatchDeleteClientError",
			Handler:    _ClientError_BatchDeleteClientError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/clienterror/v1/client_error.proto",
}
