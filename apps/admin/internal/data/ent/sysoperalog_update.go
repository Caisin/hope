// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysoperalog"
	"hope/apps/admin/internal/data/ent/sysuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysOperaLogUpdate is the builder for updating SysOperaLog entities.
type SysOperaLogUpdate struct {
	config
	hooks    []Hook
	mutation *SysOperaLogMutation
}

// Where appends a list predicates to the SysOperaLogUpdate builder.
func (solu *SysOperaLogUpdate) Where(ps ...predicate.SysOperaLog) *SysOperaLogUpdate {
	solu.mutation.Where(ps...)
	return solu
}

// SetUserId sets the "userId" field.
func (solu *SysOperaLogUpdate) SetUserId(i int64) *SysOperaLogUpdate {
	solu.mutation.SetUserId(i)
	return solu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableUserId(i *int64) *SysOperaLogUpdate {
	if i != nil {
		solu.SetUserId(*i)
	}
	return solu
}

// ClearUserId clears the value of the "userId" field.
func (solu *SysOperaLogUpdate) ClearUserId() *SysOperaLogUpdate {
	solu.mutation.ClearUserId()
	return solu
}

// SetTitle sets the "title" field.
func (solu *SysOperaLogUpdate) SetTitle(s string) *SysOperaLogUpdate {
	solu.mutation.SetTitle(s)
	return solu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableTitle(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetTitle(*s)
	}
	return solu
}

// ClearTitle clears the value of the "title" field.
func (solu *SysOperaLogUpdate) ClearTitle() *SysOperaLogUpdate {
	solu.mutation.ClearTitle()
	return solu
}

// SetRequestId sets the "requestId" field.
func (solu *SysOperaLogUpdate) SetRequestId(s string) *SysOperaLogUpdate {
	solu.mutation.SetRequestId(s)
	return solu
}

// SetNillableRequestId sets the "requestId" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableRequestId(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetRequestId(*s)
	}
	return solu
}

// ClearRequestId clears the value of the "requestId" field.
func (solu *SysOperaLogUpdate) ClearRequestId() *SysOperaLogUpdate {
	solu.mutation.ClearRequestId()
	return solu
}

// SetBusinessType sets the "businessType" field.
func (solu *SysOperaLogUpdate) SetBusinessType(s string) *SysOperaLogUpdate {
	solu.mutation.SetBusinessType(s)
	return solu
}

// SetNillableBusinessType sets the "businessType" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableBusinessType(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetBusinessType(*s)
	}
	return solu
}

// ClearBusinessType clears the value of the "businessType" field.
func (solu *SysOperaLogUpdate) ClearBusinessType() *SysOperaLogUpdate {
	solu.mutation.ClearBusinessType()
	return solu
}

// SetBusinessTypes sets the "businessTypes" field.
func (solu *SysOperaLogUpdate) SetBusinessTypes(s string) *SysOperaLogUpdate {
	solu.mutation.SetBusinessTypes(s)
	return solu
}

// SetNillableBusinessTypes sets the "businessTypes" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableBusinessTypes(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetBusinessTypes(*s)
	}
	return solu
}

// ClearBusinessTypes clears the value of the "businessTypes" field.
func (solu *SysOperaLogUpdate) ClearBusinessTypes() *SysOperaLogUpdate {
	solu.mutation.ClearBusinessTypes()
	return solu
}

// SetMethod sets the "method" field.
func (solu *SysOperaLogUpdate) SetMethod(s string) *SysOperaLogUpdate {
	solu.mutation.SetMethod(s)
	return solu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableMethod(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetMethod(*s)
	}
	return solu
}

// ClearMethod clears the value of the "method" field.
func (solu *SysOperaLogUpdate) ClearMethod() *SysOperaLogUpdate {
	solu.mutation.ClearMethod()
	return solu
}

// SetRequestMethod sets the "requestMethod" field.
func (solu *SysOperaLogUpdate) SetRequestMethod(s string) *SysOperaLogUpdate {
	solu.mutation.SetRequestMethod(s)
	return solu
}

// SetNillableRequestMethod sets the "requestMethod" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableRequestMethod(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetRequestMethod(*s)
	}
	return solu
}

// ClearRequestMethod clears the value of the "requestMethod" field.
func (solu *SysOperaLogUpdate) ClearRequestMethod() *SysOperaLogUpdate {
	solu.mutation.ClearRequestMethod()
	return solu
}

// SetOperatorType sets the "operatorType" field.
func (solu *SysOperaLogUpdate) SetOperatorType(s string) *SysOperaLogUpdate {
	solu.mutation.SetOperatorType(s)
	return solu
}

// SetNillableOperatorType sets the "operatorType" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableOperatorType(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetOperatorType(*s)
	}
	return solu
}

// ClearOperatorType clears the value of the "operatorType" field.
func (solu *SysOperaLogUpdate) ClearOperatorType() *SysOperaLogUpdate {
	solu.mutation.ClearOperatorType()
	return solu
}

// SetOperName sets the "operName" field.
func (solu *SysOperaLogUpdate) SetOperName(s string) *SysOperaLogUpdate {
	solu.mutation.SetOperName(s)
	return solu
}

// SetNillableOperName sets the "operName" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableOperName(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetOperName(*s)
	}
	return solu
}

// ClearOperName clears the value of the "operName" field.
func (solu *SysOperaLogUpdate) ClearOperName() *SysOperaLogUpdate {
	solu.mutation.ClearOperName()
	return solu
}

// SetDeptName sets the "deptName" field.
func (solu *SysOperaLogUpdate) SetDeptName(s string) *SysOperaLogUpdate {
	solu.mutation.SetDeptName(s)
	return solu
}

// SetNillableDeptName sets the "deptName" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableDeptName(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetDeptName(*s)
	}
	return solu
}

// ClearDeptName clears the value of the "deptName" field.
func (solu *SysOperaLogUpdate) ClearDeptName() *SysOperaLogUpdate {
	solu.mutation.ClearDeptName()
	return solu
}

// SetOperUrl sets the "operUrl" field.
func (solu *SysOperaLogUpdate) SetOperUrl(s string) *SysOperaLogUpdate {
	solu.mutation.SetOperUrl(s)
	return solu
}

// SetNillableOperUrl sets the "operUrl" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableOperUrl(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetOperUrl(*s)
	}
	return solu
}

// ClearOperUrl clears the value of the "operUrl" field.
func (solu *SysOperaLogUpdate) ClearOperUrl() *SysOperaLogUpdate {
	solu.mutation.ClearOperUrl()
	return solu
}

// SetOperIp sets the "operIp" field.
func (solu *SysOperaLogUpdate) SetOperIp(s string) *SysOperaLogUpdate {
	solu.mutation.SetOperIp(s)
	return solu
}

// SetNillableOperIp sets the "operIp" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableOperIp(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetOperIp(*s)
	}
	return solu
}

// ClearOperIp clears the value of the "operIp" field.
func (solu *SysOperaLogUpdate) ClearOperIp() *SysOperaLogUpdate {
	solu.mutation.ClearOperIp()
	return solu
}

// SetBrowser sets the "browser" field.
func (solu *SysOperaLogUpdate) SetBrowser(s string) *SysOperaLogUpdate {
	solu.mutation.SetBrowser(s)
	return solu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableBrowser(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetBrowser(*s)
	}
	return solu
}

// ClearBrowser clears the value of the "browser" field.
func (solu *SysOperaLogUpdate) ClearBrowser() *SysOperaLogUpdate {
	solu.mutation.ClearBrowser()
	return solu
}

// SetOs sets the "os" field.
func (solu *SysOperaLogUpdate) SetOs(s string) *SysOperaLogUpdate {
	solu.mutation.SetOs(s)
	return solu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableOs(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetOs(*s)
	}
	return solu
}

// ClearOs clears the value of the "os" field.
func (solu *SysOperaLogUpdate) ClearOs() *SysOperaLogUpdate {
	solu.mutation.ClearOs()
	return solu
}

// SetPlatform sets the "platform" field.
func (solu *SysOperaLogUpdate) SetPlatform(s string) *SysOperaLogUpdate {
	solu.mutation.SetPlatform(s)
	return solu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillablePlatform(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetPlatform(*s)
	}
	return solu
}

// ClearPlatform clears the value of the "platform" field.
func (solu *SysOperaLogUpdate) ClearPlatform() *SysOperaLogUpdate {
	solu.mutation.ClearPlatform()
	return solu
}

// SetOperLocation sets the "operLocation" field.
func (solu *SysOperaLogUpdate) SetOperLocation(s string) *SysOperaLogUpdate {
	solu.mutation.SetOperLocation(s)
	return solu
}

// SetNillableOperLocation sets the "operLocation" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableOperLocation(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetOperLocation(*s)
	}
	return solu
}

// ClearOperLocation clears the value of the "operLocation" field.
func (solu *SysOperaLogUpdate) ClearOperLocation() *SysOperaLogUpdate {
	solu.mutation.ClearOperLocation()
	return solu
}

// SetOperParam sets the "operParam" field.
func (solu *SysOperaLogUpdate) SetOperParam(s string) *SysOperaLogUpdate {
	solu.mutation.SetOperParam(s)
	return solu
}

// SetNillableOperParam sets the "operParam" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableOperParam(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetOperParam(*s)
	}
	return solu
}

// ClearOperParam clears the value of the "operParam" field.
func (solu *SysOperaLogUpdate) ClearOperParam() *SysOperaLogUpdate {
	solu.mutation.ClearOperParam()
	return solu
}

// SetStatus sets the "status" field.
func (solu *SysOperaLogUpdate) SetStatus(s string) *SysOperaLogUpdate {
	solu.mutation.SetStatus(s)
	return solu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableStatus(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetStatus(*s)
	}
	return solu
}

// ClearStatus clears the value of the "status" field.
func (solu *SysOperaLogUpdate) ClearStatus() *SysOperaLogUpdate {
	solu.mutation.ClearStatus()
	return solu
}

// SetOperTime sets the "operTime" field.
func (solu *SysOperaLogUpdate) SetOperTime(t time.Time) *SysOperaLogUpdate {
	solu.mutation.SetOperTime(t)
	return solu
}

// SetNillableOperTime sets the "operTime" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableOperTime(t *time.Time) *SysOperaLogUpdate {
	if t != nil {
		solu.SetOperTime(*t)
	}
	return solu
}

// ClearOperTime clears the value of the "operTime" field.
func (solu *SysOperaLogUpdate) ClearOperTime() *SysOperaLogUpdate {
	solu.mutation.ClearOperTime()
	return solu
}

// SetJsonResult sets the "jsonResult" field.
func (solu *SysOperaLogUpdate) SetJsonResult(s string) *SysOperaLogUpdate {
	solu.mutation.SetJsonResult(s)
	return solu
}

// SetNillableJsonResult sets the "jsonResult" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableJsonResult(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetJsonResult(*s)
	}
	return solu
}

// ClearJsonResult clears the value of the "jsonResult" field.
func (solu *SysOperaLogUpdate) ClearJsonResult() *SysOperaLogUpdate {
	solu.mutation.ClearJsonResult()
	return solu
}

// SetRemark sets the "remark" field.
func (solu *SysOperaLogUpdate) SetRemark(s string) *SysOperaLogUpdate {
	solu.mutation.SetRemark(s)
	return solu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableRemark(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetRemark(*s)
	}
	return solu
}

// ClearRemark clears the value of the "remark" field.
func (solu *SysOperaLogUpdate) ClearRemark() *SysOperaLogUpdate {
	solu.mutation.ClearRemark()
	return solu
}

// SetLatencyTime sets the "latencyTime" field.
func (solu *SysOperaLogUpdate) SetLatencyTime(s string) *SysOperaLogUpdate {
	solu.mutation.SetLatencyTime(s)
	return solu
}

// SetNillableLatencyTime sets the "latencyTime" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableLatencyTime(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetLatencyTime(*s)
	}
	return solu
}

// ClearLatencyTime clears the value of the "latencyTime" field.
func (solu *SysOperaLogUpdate) ClearLatencyTime() *SysOperaLogUpdate {
	solu.mutation.ClearLatencyTime()
	return solu
}

// SetUserAgent sets the "userAgent" field.
func (solu *SysOperaLogUpdate) SetUserAgent(s string) *SysOperaLogUpdate {
	solu.mutation.SetUserAgent(s)
	return solu
}

// SetNillableUserAgent sets the "userAgent" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableUserAgent(s *string) *SysOperaLogUpdate {
	if s != nil {
		solu.SetUserAgent(*s)
	}
	return solu
}

// ClearUserAgent clears the value of the "userAgent" field.
func (solu *SysOperaLogUpdate) ClearUserAgent() *SysOperaLogUpdate {
	solu.mutation.ClearUserAgent()
	return solu
}

// SetUpdatedAt sets the "updatedAt" field.
func (solu *SysOperaLogUpdate) SetUpdatedAt(t time.Time) *SysOperaLogUpdate {
	solu.mutation.SetUpdatedAt(t)
	return solu
}

// SetCreateBy sets the "createBy" field.
func (solu *SysOperaLogUpdate) SetCreateBy(i int64) *SysOperaLogUpdate {
	solu.mutation.ResetCreateBy()
	solu.mutation.SetCreateBy(i)
	return solu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableCreateBy(i *int64) *SysOperaLogUpdate {
	if i != nil {
		solu.SetCreateBy(*i)
	}
	return solu
}

// AddCreateBy adds i to the "createBy" field.
func (solu *SysOperaLogUpdate) AddCreateBy(i int64) *SysOperaLogUpdate {
	solu.mutation.AddCreateBy(i)
	return solu
}

// SetUpdateBy sets the "updateBy" field.
func (solu *SysOperaLogUpdate) SetUpdateBy(i int64) *SysOperaLogUpdate {
	solu.mutation.ResetUpdateBy()
	solu.mutation.SetUpdateBy(i)
	return solu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableUpdateBy(i *int64) *SysOperaLogUpdate {
	if i != nil {
		solu.SetUpdateBy(*i)
	}
	return solu
}

// AddUpdateBy adds i to the "updateBy" field.
func (solu *SysOperaLogUpdate) AddUpdateBy(i int64) *SysOperaLogUpdate {
	solu.mutation.AddUpdateBy(i)
	return solu
}

// SetTenantId sets the "tenantId" field.
func (solu *SysOperaLogUpdate) SetTenantId(i int64) *SysOperaLogUpdate {
	solu.mutation.ResetTenantId()
	solu.mutation.SetTenantId(i)
	return solu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableTenantId(i *int64) *SysOperaLogUpdate {
	if i != nil {
		solu.SetTenantId(*i)
	}
	return solu
}

// AddTenantId adds i to the "tenantId" field.
func (solu *SysOperaLogUpdate) AddTenantId(i int64) *SysOperaLogUpdate {
	solu.mutation.AddTenantId(i)
	return solu
}

// SetUserID sets the "user" edge to the SysUser entity by ID.
func (solu *SysOperaLogUpdate) SetUserID(id int64) *SysOperaLogUpdate {
	solu.mutation.SetUserID(id)
	return solu
}

// SetNillableUserID sets the "user" edge to the SysUser entity by ID if the given value is not nil.
func (solu *SysOperaLogUpdate) SetNillableUserID(id *int64) *SysOperaLogUpdate {
	if id != nil {
		solu = solu.SetUserID(*id)
	}
	return solu
}

// SetUser sets the "user" edge to the SysUser entity.
func (solu *SysOperaLogUpdate) SetUser(s *SysUser) *SysOperaLogUpdate {
	return solu.SetUserID(s.ID)
}

// Mutation returns the SysOperaLogMutation object of the builder.
func (solu *SysOperaLogUpdate) Mutation() *SysOperaLogMutation {
	return solu.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (solu *SysOperaLogUpdate) ClearUser() *SysOperaLogUpdate {
	solu.mutation.ClearUser()
	return solu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (solu *SysOperaLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	solu.defaults()
	if len(solu.hooks) == 0 {
		affected, err = solu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysOperaLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			solu.mutation = mutation
			affected, err = solu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(solu.hooks) - 1; i >= 0; i-- {
			if solu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = solu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, solu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (solu *SysOperaLogUpdate) SaveX(ctx context.Context) int {
	affected, err := solu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (solu *SysOperaLogUpdate) Exec(ctx context.Context) error {
	_, err := solu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (solu *SysOperaLogUpdate) ExecX(ctx context.Context) {
	if err := solu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (solu *SysOperaLogUpdate) defaults() {
	if _, ok := solu.mutation.UpdatedAt(); !ok {
		v := sysoperalog.UpdateDefaultUpdatedAt()
		solu.mutation.SetUpdatedAt(v)
	}
}

func (solu *SysOperaLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysoperalog.Table,
			Columns: sysoperalog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysoperalog.FieldID,
			},
		},
	}
	if ps := solu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := solu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldTitle,
		})
	}
	if solu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldTitle,
		})
	}
	if value, ok := solu.mutation.RequestId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldRequestId,
		})
	}
	if solu.mutation.RequestIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldRequestId,
		})
	}
	if value, ok := solu.mutation.BusinessType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldBusinessType,
		})
	}
	if solu.mutation.BusinessTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldBusinessType,
		})
	}
	if value, ok := solu.mutation.BusinessTypes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldBusinessTypes,
		})
	}
	if solu.mutation.BusinessTypesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldBusinessTypes,
		})
	}
	if value, ok := solu.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldMethod,
		})
	}
	if solu.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldMethod,
		})
	}
	if value, ok := solu.mutation.RequestMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldRequestMethod,
		})
	}
	if solu.mutation.RequestMethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldRequestMethod,
		})
	}
	if value, ok := solu.mutation.OperatorType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperatorType,
		})
	}
	if solu.mutation.OperatorTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperatorType,
		})
	}
	if value, ok := solu.mutation.OperName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperName,
		})
	}
	if solu.mutation.OperNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperName,
		})
	}
	if value, ok := solu.mutation.DeptName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldDeptName,
		})
	}
	if solu.mutation.DeptNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldDeptName,
		})
	}
	if value, ok := solu.mutation.OperUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperUrl,
		})
	}
	if solu.mutation.OperUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperUrl,
		})
	}
	if value, ok := solu.mutation.OperIp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperIp,
		})
	}
	if solu.mutation.OperIpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperIp,
		})
	}
	if value, ok := solu.mutation.Browser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldBrowser,
		})
	}
	if solu.mutation.BrowserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldBrowser,
		})
	}
	if value, ok := solu.mutation.Os(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOs,
		})
	}
	if solu.mutation.OsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOs,
		})
	}
	if value, ok := solu.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldPlatform,
		})
	}
	if solu.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldPlatform,
		})
	}
	if value, ok := solu.mutation.OperLocation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperLocation,
		})
	}
	if solu.mutation.OperLocationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperLocation,
		})
	}
	if value, ok := solu.mutation.OperParam(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperParam,
		})
	}
	if solu.mutation.OperParamCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperParam,
		})
	}
	if value, ok := solu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldStatus,
		})
	}
	if solu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldStatus,
		})
	}
	if value, ok := solu.mutation.OperTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoperalog.FieldOperTime,
		})
	}
	if solu.mutation.OperTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysoperalog.FieldOperTime,
		})
	}
	if value, ok := solu.mutation.JsonResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldJsonResult,
		})
	}
	if solu.mutation.JsonResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldJsonResult,
		})
	}
	if value, ok := solu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldRemark,
		})
	}
	if solu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldRemark,
		})
	}
	if value, ok := solu.mutation.LatencyTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldLatencyTime,
		})
	}
	if solu.mutation.LatencyTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldLatencyTime,
		})
	}
	if value, ok := solu.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldUserAgent,
		})
	}
	if solu.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldUserAgent,
		})
	}
	if value, ok := solu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoperalog.FieldUpdatedAt,
		})
	}
	if value, ok := solu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldCreateBy,
		})
	}
	if value, ok := solu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldCreateBy,
		})
	}
	if value, ok := solu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldUpdateBy,
		})
	}
	if value, ok := solu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldUpdateBy,
		})
	}
	if value, ok := solu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldTenantId,
		})
	}
	if value, ok := solu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldTenantId,
		})
	}
	if solu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysoperalog.UserTable,
			Columns: []string{sysoperalog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := solu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysoperalog.UserTable,
			Columns: []string{sysoperalog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, solu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysoperalog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysOperaLogUpdateOne is the builder for updating a single SysOperaLog entity.
type SysOperaLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysOperaLogMutation
}

// SetUserId sets the "userId" field.
func (soluo *SysOperaLogUpdateOne) SetUserId(i int64) *SysOperaLogUpdateOne {
	soluo.mutation.SetUserId(i)
	return soluo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableUserId(i *int64) *SysOperaLogUpdateOne {
	if i != nil {
		soluo.SetUserId(*i)
	}
	return soluo
}

// ClearUserId clears the value of the "userId" field.
func (soluo *SysOperaLogUpdateOne) ClearUserId() *SysOperaLogUpdateOne {
	soluo.mutation.ClearUserId()
	return soluo
}

// SetTitle sets the "title" field.
func (soluo *SysOperaLogUpdateOne) SetTitle(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetTitle(s)
	return soluo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableTitle(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetTitle(*s)
	}
	return soluo
}

// ClearTitle clears the value of the "title" field.
func (soluo *SysOperaLogUpdateOne) ClearTitle() *SysOperaLogUpdateOne {
	soluo.mutation.ClearTitle()
	return soluo
}

// SetRequestId sets the "requestId" field.
func (soluo *SysOperaLogUpdateOne) SetRequestId(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetRequestId(s)
	return soluo
}

// SetNillableRequestId sets the "requestId" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableRequestId(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetRequestId(*s)
	}
	return soluo
}

// ClearRequestId clears the value of the "requestId" field.
func (soluo *SysOperaLogUpdateOne) ClearRequestId() *SysOperaLogUpdateOne {
	soluo.mutation.ClearRequestId()
	return soluo
}

// SetBusinessType sets the "businessType" field.
func (soluo *SysOperaLogUpdateOne) SetBusinessType(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetBusinessType(s)
	return soluo
}

// SetNillableBusinessType sets the "businessType" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableBusinessType(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetBusinessType(*s)
	}
	return soluo
}

// ClearBusinessType clears the value of the "businessType" field.
func (soluo *SysOperaLogUpdateOne) ClearBusinessType() *SysOperaLogUpdateOne {
	soluo.mutation.ClearBusinessType()
	return soluo
}

// SetBusinessTypes sets the "businessTypes" field.
func (soluo *SysOperaLogUpdateOne) SetBusinessTypes(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetBusinessTypes(s)
	return soluo
}

// SetNillableBusinessTypes sets the "businessTypes" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableBusinessTypes(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetBusinessTypes(*s)
	}
	return soluo
}

// ClearBusinessTypes clears the value of the "businessTypes" field.
func (soluo *SysOperaLogUpdateOne) ClearBusinessTypes() *SysOperaLogUpdateOne {
	soluo.mutation.ClearBusinessTypes()
	return soluo
}

// SetMethod sets the "method" field.
func (soluo *SysOperaLogUpdateOne) SetMethod(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetMethod(s)
	return soluo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableMethod(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetMethod(*s)
	}
	return soluo
}

// ClearMethod clears the value of the "method" field.
func (soluo *SysOperaLogUpdateOne) ClearMethod() *SysOperaLogUpdateOne {
	soluo.mutation.ClearMethod()
	return soluo
}

// SetRequestMethod sets the "requestMethod" field.
func (soluo *SysOperaLogUpdateOne) SetRequestMethod(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetRequestMethod(s)
	return soluo
}

// SetNillableRequestMethod sets the "requestMethod" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableRequestMethod(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetRequestMethod(*s)
	}
	return soluo
}

// ClearRequestMethod clears the value of the "requestMethod" field.
func (soluo *SysOperaLogUpdateOne) ClearRequestMethod() *SysOperaLogUpdateOne {
	soluo.mutation.ClearRequestMethod()
	return soluo
}

// SetOperatorType sets the "operatorType" field.
func (soluo *SysOperaLogUpdateOne) SetOperatorType(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetOperatorType(s)
	return soluo
}

// SetNillableOperatorType sets the "operatorType" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableOperatorType(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetOperatorType(*s)
	}
	return soluo
}

// ClearOperatorType clears the value of the "operatorType" field.
func (soluo *SysOperaLogUpdateOne) ClearOperatorType() *SysOperaLogUpdateOne {
	soluo.mutation.ClearOperatorType()
	return soluo
}

// SetOperName sets the "operName" field.
func (soluo *SysOperaLogUpdateOne) SetOperName(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetOperName(s)
	return soluo
}

// SetNillableOperName sets the "operName" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableOperName(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetOperName(*s)
	}
	return soluo
}

// ClearOperName clears the value of the "operName" field.
func (soluo *SysOperaLogUpdateOne) ClearOperName() *SysOperaLogUpdateOne {
	soluo.mutation.ClearOperName()
	return soluo
}

// SetDeptName sets the "deptName" field.
func (soluo *SysOperaLogUpdateOne) SetDeptName(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetDeptName(s)
	return soluo
}

// SetNillableDeptName sets the "deptName" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableDeptName(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetDeptName(*s)
	}
	return soluo
}

// ClearDeptName clears the value of the "deptName" field.
func (soluo *SysOperaLogUpdateOne) ClearDeptName() *SysOperaLogUpdateOne {
	soluo.mutation.ClearDeptName()
	return soluo
}

// SetOperUrl sets the "operUrl" field.
func (soluo *SysOperaLogUpdateOne) SetOperUrl(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetOperUrl(s)
	return soluo
}

// SetNillableOperUrl sets the "operUrl" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableOperUrl(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetOperUrl(*s)
	}
	return soluo
}

// ClearOperUrl clears the value of the "operUrl" field.
func (soluo *SysOperaLogUpdateOne) ClearOperUrl() *SysOperaLogUpdateOne {
	soluo.mutation.ClearOperUrl()
	return soluo
}

// SetOperIp sets the "operIp" field.
func (soluo *SysOperaLogUpdateOne) SetOperIp(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetOperIp(s)
	return soluo
}

// SetNillableOperIp sets the "operIp" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableOperIp(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetOperIp(*s)
	}
	return soluo
}

// ClearOperIp clears the value of the "operIp" field.
func (soluo *SysOperaLogUpdateOne) ClearOperIp() *SysOperaLogUpdateOne {
	soluo.mutation.ClearOperIp()
	return soluo
}

// SetBrowser sets the "browser" field.
func (soluo *SysOperaLogUpdateOne) SetBrowser(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetBrowser(s)
	return soluo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableBrowser(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetBrowser(*s)
	}
	return soluo
}

// ClearBrowser clears the value of the "browser" field.
func (soluo *SysOperaLogUpdateOne) ClearBrowser() *SysOperaLogUpdateOne {
	soluo.mutation.ClearBrowser()
	return soluo
}

// SetOs sets the "os" field.
func (soluo *SysOperaLogUpdateOne) SetOs(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetOs(s)
	return soluo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableOs(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetOs(*s)
	}
	return soluo
}

// ClearOs clears the value of the "os" field.
func (soluo *SysOperaLogUpdateOne) ClearOs() *SysOperaLogUpdateOne {
	soluo.mutation.ClearOs()
	return soluo
}

// SetPlatform sets the "platform" field.
func (soluo *SysOperaLogUpdateOne) SetPlatform(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetPlatform(s)
	return soluo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillablePlatform(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetPlatform(*s)
	}
	return soluo
}

// ClearPlatform clears the value of the "platform" field.
func (soluo *SysOperaLogUpdateOne) ClearPlatform() *SysOperaLogUpdateOne {
	soluo.mutation.ClearPlatform()
	return soluo
}

// SetOperLocation sets the "operLocation" field.
func (soluo *SysOperaLogUpdateOne) SetOperLocation(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetOperLocation(s)
	return soluo
}

// SetNillableOperLocation sets the "operLocation" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableOperLocation(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetOperLocation(*s)
	}
	return soluo
}

// ClearOperLocation clears the value of the "operLocation" field.
func (soluo *SysOperaLogUpdateOne) ClearOperLocation() *SysOperaLogUpdateOne {
	soluo.mutation.ClearOperLocation()
	return soluo
}

// SetOperParam sets the "operParam" field.
func (soluo *SysOperaLogUpdateOne) SetOperParam(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetOperParam(s)
	return soluo
}

// SetNillableOperParam sets the "operParam" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableOperParam(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetOperParam(*s)
	}
	return soluo
}

// ClearOperParam clears the value of the "operParam" field.
func (soluo *SysOperaLogUpdateOne) ClearOperParam() *SysOperaLogUpdateOne {
	soluo.mutation.ClearOperParam()
	return soluo
}

// SetStatus sets the "status" field.
func (soluo *SysOperaLogUpdateOne) SetStatus(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetStatus(s)
	return soluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableStatus(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetStatus(*s)
	}
	return soluo
}

// ClearStatus clears the value of the "status" field.
func (soluo *SysOperaLogUpdateOne) ClearStatus() *SysOperaLogUpdateOne {
	soluo.mutation.ClearStatus()
	return soluo
}

// SetOperTime sets the "operTime" field.
func (soluo *SysOperaLogUpdateOne) SetOperTime(t time.Time) *SysOperaLogUpdateOne {
	soluo.mutation.SetOperTime(t)
	return soluo
}

// SetNillableOperTime sets the "operTime" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableOperTime(t *time.Time) *SysOperaLogUpdateOne {
	if t != nil {
		soluo.SetOperTime(*t)
	}
	return soluo
}

// ClearOperTime clears the value of the "operTime" field.
func (soluo *SysOperaLogUpdateOne) ClearOperTime() *SysOperaLogUpdateOne {
	soluo.mutation.ClearOperTime()
	return soluo
}

// SetJsonResult sets the "jsonResult" field.
func (soluo *SysOperaLogUpdateOne) SetJsonResult(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetJsonResult(s)
	return soluo
}

// SetNillableJsonResult sets the "jsonResult" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableJsonResult(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetJsonResult(*s)
	}
	return soluo
}

// ClearJsonResult clears the value of the "jsonResult" field.
func (soluo *SysOperaLogUpdateOne) ClearJsonResult() *SysOperaLogUpdateOne {
	soluo.mutation.ClearJsonResult()
	return soluo
}

// SetRemark sets the "remark" field.
func (soluo *SysOperaLogUpdateOne) SetRemark(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetRemark(s)
	return soluo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableRemark(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetRemark(*s)
	}
	return soluo
}

// ClearRemark clears the value of the "remark" field.
func (soluo *SysOperaLogUpdateOne) ClearRemark() *SysOperaLogUpdateOne {
	soluo.mutation.ClearRemark()
	return soluo
}

// SetLatencyTime sets the "latencyTime" field.
func (soluo *SysOperaLogUpdateOne) SetLatencyTime(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetLatencyTime(s)
	return soluo
}

// SetNillableLatencyTime sets the "latencyTime" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableLatencyTime(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetLatencyTime(*s)
	}
	return soluo
}

// ClearLatencyTime clears the value of the "latencyTime" field.
func (soluo *SysOperaLogUpdateOne) ClearLatencyTime() *SysOperaLogUpdateOne {
	soluo.mutation.ClearLatencyTime()
	return soluo
}

// SetUserAgent sets the "userAgent" field.
func (soluo *SysOperaLogUpdateOne) SetUserAgent(s string) *SysOperaLogUpdateOne {
	soluo.mutation.SetUserAgent(s)
	return soluo
}

// SetNillableUserAgent sets the "userAgent" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableUserAgent(s *string) *SysOperaLogUpdateOne {
	if s != nil {
		soluo.SetUserAgent(*s)
	}
	return soluo
}

// ClearUserAgent clears the value of the "userAgent" field.
func (soluo *SysOperaLogUpdateOne) ClearUserAgent() *SysOperaLogUpdateOne {
	soluo.mutation.ClearUserAgent()
	return soluo
}

// SetUpdatedAt sets the "updatedAt" field.
func (soluo *SysOperaLogUpdateOne) SetUpdatedAt(t time.Time) *SysOperaLogUpdateOne {
	soluo.mutation.SetUpdatedAt(t)
	return soluo
}

// SetCreateBy sets the "createBy" field.
func (soluo *SysOperaLogUpdateOne) SetCreateBy(i int64) *SysOperaLogUpdateOne {
	soluo.mutation.ResetCreateBy()
	soluo.mutation.SetCreateBy(i)
	return soluo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableCreateBy(i *int64) *SysOperaLogUpdateOne {
	if i != nil {
		soluo.SetCreateBy(*i)
	}
	return soluo
}

// AddCreateBy adds i to the "createBy" field.
func (soluo *SysOperaLogUpdateOne) AddCreateBy(i int64) *SysOperaLogUpdateOne {
	soluo.mutation.AddCreateBy(i)
	return soluo
}

// SetUpdateBy sets the "updateBy" field.
func (soluo *SysOperaLogUpdateOne) SetUpdateBy(i int64) *SysOperaLogUpdateOne {
	soluo.mutation.ResetUpdateBy()
	soluo.mutation.SetUpdateBy(i)
	return soluo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableUpdateBy(i *int64) *SysOperaLogUpdateOne {
	if i != nil {
		soluo.SetUpdateBy(*i)
	}
	return soluo
}

// AddUpdateBy adds i to the "updateBy" field.
func (soluo *SysOperaLogUpdateOne) AddUpdateBy(i int64) *SysOperaLogUpdateOne {
	soluo.mutation.AddUpdateBy(i)
	return soluo
}

// SetTenantId sets the "tenantId" field.
func (soluo *SysOperaLogUpdateOne) SetTenantId(i int64) *SysOperaLogUpdateOne {
	soluo.mutation.ResetTenantId()
	soluo.mutation.SetTenantId(i)
	return soluo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableTenantId(i *int64) *SysOperaLogUpdateOne {
	if i != nil {
		soluo.SetTenantId(*i)
	}
	return soluo
}

// AddTenantId adds i to the "tenantId" field.
func (soluo *SysOperaLogUpdateOne) AddTenantId(i int64) *SysOperaLogUpdateOne {
	soluo.mutation.AddTenantId(i)
	return soluo
}

// SetUserID sets the "user" edge to the SysUser entity by ID.
func (soluo *SysOperaLogUpdateOne) SetUserID(id int64) *SysOperaLogUpdateOne {
	soluo.mutation.SetUserID(id)
	return soluo
}

// SetNillableUserID sets the "user" edge to the SysUser entity by ID if the given value is not nil.
func (soluo *SysOperaLogUpdateOne) SetNillableUserID(id *int64) *SysOperaLogUpdateOne {
	if id != nil {
		soluo = soluo.SetUserID(*id)
	}
	return soluo
}

// SetUser sets the "user" edge to the SysUser entity.
func (soluo *SysOperaLogUpdateOne) SetUser(s *SysUser) *SysOperaLogUpdateOne {
	return soluo.SetUserID(s.ID)
}

// Mutation returns the SysOperaLogMutation object of the builder.
func (soluo *SysOperaLogUpdateOne) Mutation() *SysOperaLogMutation {
	return soluo.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (soluo *SysOperaLogUpdateOne) ClearUser() *SysOperaLogUpdateOne {
	soluo.mutation.ClearUser()
	return soluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (soluo *SysOperaLogUpdateOne) Select(field string, fields ...string) *SysOperaLogUpdateOne {
	soluo.fields = append([]string{field}, fields...)
	return soluo
}

// Save executes the query and returns the updated SysOperaLog entity.
func (soluo *SysOperaLogUpdateOne) Save(ctx context.Context) (*SysOperaLog, error) {
	var (
		err  error
		node *SysOperaLog
	)
	soluo.defaults()
	if len(soluo.hooks) == 0 {
		node, err = soluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysOperaLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			soluo.mutation = mutation
			node, err = soluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(soluo.hooks) - 1; i >= 0; i-- {
			if soluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = soluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, soluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (soluo *SysOperaLogUpdateOne) SaveX(ctx context.Context) *SysOperaLog {
	node, err := soluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (soluo *SysOperaLogUpdateOne) Exec(ctx context.Context) error {
	_, err := soluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (soluo *SysOperaLogUpdateOne) ExecX(ctx context.Context) {
	if err := soluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (soluo *SysOperaLogUpdateOne) defaults() {
	if _, ok := soluo.mutation.UpdatedAt(); !ok {
		v := sysoperalog.UpdateDefaultUpdatedAt()
		soluo.mutation.SetUpdatedAt(v)
	}
}

func (soluo *SysOperaLogUpdateOne) sqlSave(ctx context.Context) (_node *SysOperaLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysoperalog.Table,
			Columns: sysoperalog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysoperalog.FieldID,
			},
		},
	}
	id, ok := soluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysOperaLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := soluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysoperalog.FieldID)
		for _, f := range fields {
			if !sysoperalog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysoperalog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := soluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := soluo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldTitle,
		})
	}
	if soluo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldTitle,
		})
	}
	if value, ok := soluo.mutation.RequestId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldRequestId,
		})
	}
	if soluo.mutation.RequestIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldRequestId,
		})
	}
	if value, ok := soluo.mutation.BusinessType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldBusinessType,
		})
	}
	if soluo.mutation.BusinessTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldBusinessType,
		})
	}
	if value, ok := soluo.mutation.BusinessTypes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldBusinessTypes,
		})
	}
	if soluo.mutation.BusinessTypesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldBusinessTypes,
		})
	}
	if value, ok := soluo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldMethod,
		})
	}
	if soluo.mutation.MethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldMethod,
		})
	}
	if value, ok := soluo.mutation.RequestMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldRequestMethod,
		})
	}
	if soluo.mutation.RequestMethodCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldRequestMethod,
		})
	}
	if value, ok := soluo.mutation.OperatorType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperatorType,
		})
	}
	if soluo.mutation.OperatorTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperatorType,
		})
	}
	if value, ok := soluo.mutation.OperName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperName,
		})
	}
	if soluo.mutation.OperNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperName,
		})
	}
	if value, ok := soluo.mutation.DeptName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldDeptName,
		})
	}
	if soluo.mutation.DeptNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldDeptName,
		})
	}
	if value, ok := soluo.mutation.OperUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperUrl,
		})
	}
	if soluo.mutation.OperUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperUrl,
		})
	}
	if value, ok := soluo.mutation.OperIp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperIp,
		})
	}
	if soluo.mutation.OperIpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperIp,
		})
	}
	if value, ok := soluo.mutation.Browser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldBrowser,
		})
	}
	if soluo.mutation.BrowserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldBrowser,
		})
	}
	if value, ok := soluo.mutation.Os(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOs,
		})
	}
	if soluo.mutation.OsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOs,
		})
	}
	if value, ok := soluo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldPlatform,
		})
	}
	if soluo.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldPlatform,
		})
	}
	if value, ok := soluo.mutation.OperLocation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperLocation,
		})
	}
	if soluo.mutation.OperLocationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperLocation,
		})
	}
	if value, ok := soluo.mutation.OperParam(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperParam,
		})
	}
	if soluo.mutation.OperParamCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldOperParam,
		})
	}
	if value, ok := soluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldStatus,
		})
	}
	if soluo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldStatus,
		})
	}
	if value, ok := soluo.mutation.OperTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoperalog.FieldOperTime,
		})
	}
	if soluo.mutation.OperTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysoperalog.FieldOperTime,
		})
	}
	if value, ok := soluo.mutation.JsonResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldJsonResult,
		})
	}
	if soluo.mutation.JsonResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldJsonResult,
		})
	}
	if value, ok := soluo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldRemark,
		})
	}
	if soluo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldRemark,
		})
	}
	if value, ok := soluo.mutation.LatencyTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldLatencyTime,
		})
	}
	if soluo.mutation.LatencyTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldLatencyTime,
		})
	}
	if value, ok := soluo.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldUserAgent,
		})
	}
	if soluo.mutation.UserAgentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysoperalog.FieldUserAgent,
		})
	}
	if value, ok := soluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoperalog.FieldUpdatedAt,
		})
	}
	if value, ok := soluo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldCreateBy,
		})
	}
	if value, ok := soluo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldCreateBy,
		})
	}
	if value, ok := soluo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldUpdateBy,
		})
	}
	if value, ok := soluo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldUpdateBy,
		})
	}
	if value, ok := soluo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldTenantId,
		})
	}
	if value, ok := soluo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldTenantId,
		})
	}
	if soluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysoperalog.UserTable,
			Columns: []string{sysoperalog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := soluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysoperalog.UserTable,
			Columns: []string{sysoperalog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysOperaLog{config: soluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, soluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysoperalog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
