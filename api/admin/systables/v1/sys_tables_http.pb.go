// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysTablesHTTPServer interface {
	BatchDeleteSysTables(context.Context, *SysTablesBatchDeleteReq) (*SysTablesDeleteReply, error)
	CreateSysTables(context.Context, *SysTablesCreateReq) (*SysTablesCreateReply, error)
	DeleteSysTables(context.Context, *SysTablesDeleteReq) (*SysTablesDeleteReply, error)
	GetPageSysTables(context.Context, *SysTablesPageReq) (*SysTablesPageReply, error)
	GetSysTables(context.Context, *SysTablesReq) (*SysTablesReply, error)
	UpdateSysTables(context.Context, *SysTablesUpdateReq) (*SysTablesUpdateReply, error)
}

func RegisterSysTablesHTTPServer(s *http.Server, srv SysTablesHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/systables/page", _SysTables_GetPageSysTables0_HTTP_Handler(srv))
	r.GET("/v1/systables/{id}", _SysTables_GetSysTables0_HTTP_Handler(srv))
	r.PUT("/v1/systables/{id}", _SysTables_UpdateSysTables0_HTTP_Handler(srv))
	r.POST("/v1/systables", _SysTables_CreateSysTables0_HTTP_Handler(srv))
	r.DELETE("/v1/systables/{id}", _SysTables_DeleteSysTables0_HTTP_Handler(srv))
	r.DELETE("/v1/systables", _SysTables_BatchDeleteSysTables0_HTTP_Handler(srv))
}

func _SysTables_GetPageSysTables0_HTTP_Handler(srv SysTablesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysTablesPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/systables.v1.SysTables/GetPageSysTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageSysTables(ctx, req.(*SysTablesPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysTablesPageReply)
		return ctx.Result(200, reply)
	}
}

func _SysTables_GetSysTables0_HTTP_Handler(srv SysTablesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysTablesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/systables.v1.SysTables/GetSysTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysTables(ctx, req.(*SysTablesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysTablesReply)
		return ctx.Result(200, reply)
	}
}

func _SysTables_UpdateSysTables0_HTTP_Handler(srv SysTablesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysTablesUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/systables.v1.SysTables/UpdateSysTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysTables(ctx, req.(*SysTablesUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysTablesUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysTables_CreateSysTables0_HTTP_Handler(srv SysTablesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysTablesCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/systables.v1.SysTables/CreateSysTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysTables(ctx, req.(*SysTablesCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysTablesCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysTables_DeleteSysTables0_HTTP_Handler(srv SysTablesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysTablesDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/systables.v1.SysTables/DeleteSysTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysTables(ctx, req.(*SysTablesDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysTablesDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysTables_BatchDeleteSysTables0_HTTP_Handler(srv SysTablesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysTablesBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/systables.v1.SysTables/BatchDeleteSysTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysTables(ctx, req.(*SysTablesBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysTablesDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysTablesHTTPClient interface {
	BatchDeleteSysTables(ctx context.Context, req *SysTablesBatchDeleteReq, opts ...http.CallOption) (rsp *SysTablesDeleteReply, err error)
	CreateSysTables(ctx context.Context, req *SysTablesCreateReq, opts ...http.CallOption) (rsp *SysTablesCreateReply, err error)
	DeleteSysTables(ctx context.Context, req *SysTablesDeleteReq, opts ...http.CallOption) (rsp *SysTablesDeleteReply, err error)
	GetPageSysTables(ctx context.Context, req *SysTablesPageReq, opts ...http.CallOption) (rsp *SysTablesPageReply, err error)
	GetSysTables(ctx context.Context, req *SysTablesReq, opts ...http.CallOption) (rsp *SysTablesReply, err error)
	UpdateSysTables(ctx context.Context, req *SysTablesUpdateReq, opts ...http.CallOption) (rsp *SysTablesUpdateReply, err error)
}

type SysTablesHTTPClientImpl struct {
	cc *http.Client
}

func NewSysTablesHTTPClient(client *http.Client) SysTablesHTTPClient {
	return &SysTablesHTTPClientImpl{client}
}

func (c *SysTablesHTTPClientImpl) BatchDeleteSysTables(ctx context.Context, in *SysTablesBatchDeleteReq, opts ...http.CallOption) (*SysTablesDeleteReply, error) {
	var out SysTablesDeleteReply
	pattern := "/v1/systables"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/systables.v1.SysTables/BatchDeleteSysTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysTablesHTTPClientImpl) CreateSysTables(ctx context.Context, in *SysTablesCreateReq, opts ...http.CallOption) (*SysTablesCreateReply, error) {
	var out SysTablesCreateReply
	pattern := "/v1/systables"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/systables.v1.SysTables/CreateSysTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysTablesHTTPClientImpl) DeleteSysTables(ctx context.Context, in *SysTablesDeleteReq, opts ...http.CallOption) (*SysTablesDeleteReply, error) {
	var out SysTablesDeleteReply
	pattern := "/v1/systables/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/systables.v1.SysTables/DeleteSysTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysTablesHTTPClientImpl) GetPageSysTables(ctx context.Context, in *SysTablesPageReq, opts ...http.CallOption) (*SysTablesPageReply, error) {
	var out SysTablesPageReply
	pattern := "/v1/systables/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/systables.v1.SysTables/GetPageSysTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysTablesHTTPClientImpl) GetSysTables(ctx context.Context, in *SysTablesReq, opts ...http.CallOption) (*SysTablesReply, error) {
	var out SysTablesReply
	pattern := "/v1/systables/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/systables.v1.SysTables/GetSysTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysTablesHTTPClientImpl) UpdateSysTables(ctx context.Context, in *SysTablesUpdateReq, opts ...http.CallOption) (*SysTablesUpdateReply, error) {
	var out SysTablesUpdateReply
	pattern := "/v1/systables/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/systables.v1.SysTables/UpdateSysTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
