// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/novelpayconfig"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelPayConfigCreate is the builder for creating a NovelPayConfig entity.
type NovelPayConfigCreate struct {
	config
	mutation *NovelPayConfigMutation
	hooks    []Hook
}

// SetProductId sets the "productId" field.
func (npcc *NovelPayConfigCreate) SetProductId(s string) *NovelPayConfigCreate {
	npcc.mutation.SetProductId(s)
	return npcc
}

// SetNillableProductId sets the "productId" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableProductId(s *string) *NovelPayConfigCreate {
	if s != nil {
		npcc.SetProductId(*s)
	}
	return npcc
}

// SetPaymentName sets the "paymentName" field.
func (npcc *NovelPayConfigCreate) SetPaymentName(s string) *NovelPayConfigCreate {
	npcc.mutation.SetPaymentName(s)
	return npcc
}

// SetNillablePaymentName sets the "paymentName" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillablePaymentName(s *string) *NovelPayConfigCreate {
	if s != nil {
		npcc.SetPaymentName(*s)
	}
	return npcc
}

// SetFirstPayment sets the "firstPayment" field.
func (npcc *NovelPayConfigCreate) SetFirstPayment(i int64) *NovelPayConfigCreate {
	npcc.mutation.SetFirstPayment(i)
	return npcc
}

// SetNillableFirstPayment sets the "firstPayment" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableFirstPayment(i *int64) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetFirstPayment(*i)
	}
	return npcc
}

// SetPayment sets the "payment" field.
func (npcc *NovelPayConfigCreate) SetPayment(i int64) *NovelPayConfigCreate {
	npcc.mutation.SetPayment(i)
	return npcc
}

// SetNillablePayment sets the "payment" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillablePayment(i *int64) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetPayment(*i)
	}
	return npcc
}

// SetOriginalPrice sets the "originalPrice" field.
func (npcc *NovelPayConfigCreate) SetOriginalPrice(i int64) *NovelPayConfigCreate {
	npcc.mutation.SetOriginalPrice(i)
	return npcc
}

// SetNillableOriginalPrice sets the "originalPrice" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableOriginalPrice(i *int64) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetOriginalPrice(*i)
	}
	return npcc
}

// SetCfgType sets the "cfgType" field.
func (npcc *NovelPayConfigCreate) SetCfgType(s string) *NovelPayConfigCreate {
	npcc.mutation.SetCfgType(s)
	return npcc
}

// SetNillableCfgType sets the "cfgType" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableCfgType(s *string) *NovelPayConfigCreate {
	if s != nil {
		npcc.SetCfgType(*s)
	}
	return npcc
}

// SetCoin sets the "coin" field.
func (npcc *NovelPayConfigCreate) SetCoin(i int64) *NovelPayConfigCreate {
	npcc.mutation.SetCoin(i)
	return npcc
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableCoin(i *int64) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetCoin(*i)
	}
	return npcc
}

// SetCurrency sets the "currency" field.
func (npcc *NovelPayConfigCreate) SetCurrency(s string) *NovelPayConfigCreate {
	npcc.mutation.SetCurrency(s)
	return npcc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableCurrency(s *string) *NovelPayConfigCreate {
	if s != nil {
		npcc.SetCurrency(*s)
	}
	return npcc
}

// SetCoupon sets the "coupon" field.
func (npcc *NovelPayConfigCreate) SetCoupon(i int64) *NovelPayConfigCreate {
	npcc.mutation.SetCoupon(i)
	return npcc
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableCoupon(i *int64) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetCoupon(*i)
	}
	return npcc
}

// SetCoinItem sets the "coinItem" field.
func (npcc *NovelPayConfigCreate) SetCoinItem(i int32) *NovelPayConfigCreate {
	npcc.mutation.SetCoinItem(i)
	return npcc
}

// SetNillableCoinItem sets the "coinItem" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableCoinItem(i *int32) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetCoinItem(*i)
	}
	return npcc
}

// SetCouponItem sets the "couponItem" field.
func (npcc *NovelPayConfigCreate) SetCouponItem(i int32) *NovelPayConfigCreate {
	npcc.mutation.SetCouponItem(i)
	return npcc
}

// SetNillableCouponItem sets the "couponItem" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableCouponItem(i *int32) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetCouponItem(*i)
	}
	return npcc
}

// SetSort sets the "sort" field.
func (npcc *NovelPayConfigCreate) SetSort(i int32) *NovelPayConfigCreate {
	npcc.mutation.SetSort(i)
	return npcc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableSort(i *int32) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetSort(*i)
	}
	return npcc
}

// SetState sets the "state" field.
func (npcc *NovelPayConfigCreate) SetState(b bool) *NovelPayConfigCreate {
	npcc.mutation.SetState(b)
	return npcc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableState(b *bool) *NovelPayConfigCreate {
	if b != nil {
		npcc.SetState(*b)
	}
	return npcc
}

// SetIsSend sets the "isSend" field.
func (npcc *NovelPayConfigCreate) SetIsSend(i int32) *NovelPayConfigCreate {
	npcc.mutation.SetIsSend(i)
	return npcc
}

// SetNillableIsSend sets the "isSend" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableIsSend(i *int32) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetIsSend(*i)
	}
	return npcc
}

// SetPayType sets the "payType" field.
func (npcc *NovelPayConfigCreate) SetPayType(i int32) *NovelPayConfigCreate {
	npcc.mutation.SetPayType(i)
	return npcc
}

// SetNillablePayType sets the "payType" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillablePayType(i *int32) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetPayType(*i)
	}
	return npcc
}

// SetVipType sets the "vipType" field.
func (npcc *NovelPayConfigCreate) SetVipType(i int64) *NovelPayConfigCreate {
	npcc.mutation.SetVipType(i)
	return npcc
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableVipType(i *int64) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetVipType(*i)
	}
	return npcc
}

// SetIsHot sets the "isHot" field.
func (npcc *NovelPayConfigCreate) SetIsHot(b bool) *NovelPayConfigCreate {
	npcc.mutation.SetIsHot(b)
	return npcc
}

// SetNillableIsHot sets the "isHot" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableIsHot(b *bool) *NovelPayConfigCreate {
	if b != nil {
		npcc.SetIsHot(*b)
	}
	return npcc
}

// SetCycleDay sets the "cycleDay" field.
func (npcc *NovelPayConfigCreate) SetCycleDay(i int32) *NovelPayConfigCreate {
	npcc.mutation.SetCycleDay(i)
	return npcc
}

// SetNillableCycleDay sets the "cycleDay" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableCycleDay(i *int32) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetCycleDay(*i)
	}
	return npcc
}

// SetSummary sets the "summary" field.
func (npcc *NovelPayConfigCreate) SetSummary(s string) *NovelPayConfigCreate {
	npcc.mutation.SetSummary(s)
	return npcc
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableSummary(s *string) *NovelPayConfigCreate {
	if s != nil {
		npcc.SetSummary(*s)
	}
	return npcc
}

// SetRemark sets the "remark" field.
func (npcc *NovelPayConfigCreate) SetRemark(s string) *NovelPayConfigCreate {
	npcc.mutation.SetRemark(s)
	return npcc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableRemark(s *string) *NovelPayConfigCreate {
	if s != nil {
		npcc.SetRemark(*s)
	}
	return npcc
}

// SetEffectTime sets the "effectTime" field.
func (npcc *NovelPayConfigCreate) SetEffectTime(t time.Time) *NovelPayConfigCreate {
	npcc.mutation.SetEffectTime(t)
	return npcc
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableEffectTime(t *time.Time) *NovelPayConfigCreate {
	if t != nil {
		npcc.SetEffectTime(*t)
	}
	return npcc
}

// SetExpiredTime sets the "expiredTime" field.
func (npcc *NovelPayConfigCreate) SetExpiredTime(t time.Time) *NovelPayConfigCreate {
	npcc.mutation.SetExpiredTime(t)
	return npcc
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableExpiredTime(t *time.Time) *NovelPayConfigCreate {
	if t != nil {
		npcc.SetExpiredTime(*t)
	}
	return npcc
}

// SetCreatedAt sets the "createdAt" field.
func (npcc *NovelPayConfigCreate) SetCreatedAt(t time.Time) *NovelPayConfigCreate {
	npcc.mutation.SetCreatedAt(t)
	return npcc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableCreatedAt(t *time.Time) *NovelPayConfigCreate {
	if t != nil {
		npcc.SetCreatedAt(*t)
	}
	return npcc
}

// SetUpdatedAt sets the "updatedAt" field.
func (npcc *NovelPayConfigCreate) SetUpdatedAt(t time.Time) *NovelPayConfigCreate {
	npcc.mutation.SetUpdatedAt(t)
	return npcc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableUpdatedAt(t *time.Time) *NovelPayConfigCreate {
	if t != nil {
		npcc.SetUpdatedAt(*t)
	}
	return npcc
}

// SetCreateBy sets the "createBy" field.
func (npcc *NovelPayConfigCreate) SetCreateBy(i int64) *NovelPayConfigCreate {
	npcc.mutation.SetCreateBy(i)
	return npcc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableCreateBy(i *int64) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetCreateBy(*i)
	}
	return npcc
}

// SetUpdateBy sets the "updateBy" field.
func (npcc *NovelPayConfigCreate) SetUpdateBy(i int64) *NovelPayConfigCreate {
	npcc.mutation.SetUpdateBy(i)
	return npcc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableUpdateBy(i *int64) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetUpdateBy(*i)
	}
	return npcc
}

// SetTenantId sets the "tenantId" field.
func (npcc *NovelPayConfigCreate) SetTenantId(i int64) *NovelPayConfigCreate {
	npcc.mutation.SetTenantId(i)
	return npcc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (npcc *NovelPayConfigCreate) SetNillableTenantId(i *int64) *NovelPayConfigCreate {
	if i != nil {
		npcc.SetTenantId(*i)
	}
	return npcc
}

// Mutation returns the NovelPayConfigMutation object of the builder.
func (npcc *NovelPayConfigCreate) Mutation() *NovelPayConfigMutation {
	return npcc.mutation
}

// Save creates the NovelPayConfig in the database.
func (npcc *NovelPayConfigCreate) Save(ctx context.Context) (*NovelPayConfig, error) {
	var (
		err  error
		node *NovelPayConfig
	)
	npcc.defaults()
	if len(npcc.hooks) == 0 {
		if err = npcc.check(); err != nil {
			return nil, err
		}
		node, err = npcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelPayConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = npcc.check(); err != nil {
				return nil, err
			}
			npcc.mutation = mutation
			if node, err = npcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(npcc.hooks) - 1; i >= 0; i-- {
			if npcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = npcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (npcc *NovelPayConfigCreate) SaveX(ctx context.Context) *NovelPayConfig {
	v, err := npcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npcc *NovelPayConfigCreate) Exec(ctx context.Context) error {
	_, err := npcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npcc *NovelPayConfigCreate) ExecX(ctx context.Context) {
	if err := npcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npcc *NovelPayConfigCreate) defaults() {
	if _, ok := npcc.mutation.EffectTime(); !ok {
		v := novelpayconfig.DefaultEffectTime()
		npcc.mutation.SetEffectTime(v)
	}
	if _, ok := npcc.mutation.ExpiredTime(); !ok {
		v := novelpayconfig.DefaultExpiredTime()
		npcc.mutation.SetExpiredTime(v)
	}
	if _, ok := npcc.mutation.CreatedAt(); !ok {
		v := novelpayconfig.DefaultCreatedAt()
		npcc.mutation.SetCreatedAt(v)
	}
	if _, ok := npcc.mutation.UpdatedAt(); !ok {
		v := novelpayconfig.DefaultUpdatedAt()
		npcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := npcc.mutation.CreateBy(); !ok {
		v := novelpayconfig.DefaultCreateBy
		npcc.mutation.SetCreateBy(v)
	}
	if _, ok := npcc.mutation.UpdateBy(); !ok {
		v := novelpayconfig.DefaultUpdateBy
		npcc.mutation.SetUpdateBy(v)
	}
	if _, ok := npcc.mutation.TenantId(); !ok {
		v := novelpayconfig.DefaultTenantId
		npcc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (npcc *NovelPayConfigCreate) check() error {
	if _, ok := npcc.mutation.EffectTime(); !ok {
		return &ValidationError{Name: "effectTime", err: errors.New(`ent: missing required field "effectTime"`)}
	}
	if _, ok := npcc.mutation.ExpiredTime(); !ok {
		return &ValidationError{Name: "expiredTime", err: errors.New(`ent: missing required field "expiredTime"`)}
	}
	if _, ok := npcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := npcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := npcc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := npcc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := npcc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (npcc *NovelPayConfigCreate) sqlSave(ctx context.Context) (*NovelPayConfig, error) {
	_node, _spec := npcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, npcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (npcc *NovelPayConfigCreate) createSpec() (*NovelPayConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &NovelPayConfig{config: npcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: novelpayconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelpayconfig.FieldID,
			},
		}
	)
	if value, ok := npcc.mutation.ProductId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldProductId,
		})
		_node.ProductId = value
	}
	if value, ok := npcc.mutation.PaymentName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldPaymentName,
		})
		_node.PaymentName = value
	}
	if value, ok := npcc.mutation.FirstPayment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldFirstPayment,
		})
		_node.FirstPayment = value
	}
	if value, ok := npcc.mutation.Payment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldPayment,
		})
		_node.Payment = value
	}
	if value, ok := npcc.mutation.OriginalPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldOriginalPrice,
		})
		_node.OriginalPrice = value
	}
	if value, ok := npcc.mutation.CfgType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldCfgType,
		})
		_node.CfgType = value
	}
	if value, ok := npcc.mutation.Coin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoin,
		})
		_node.Coin = value
	}
	if value, ok := npcc.mutation.Currency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldCurrency,
		})
		_node.Currency = value
	}
	if value, ok := npcc.mutation.Coupon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoupon,
		})
		_node.Coupon = value
	}
	if value, ok := npcc.mutation.CoinItem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCoinItem,
		})
		_node.CoinItem = value
	}
	if value, ok := npcc.mutation.CouponItem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCouponItem,
		})
		_node.CouponItem = value
	}
	if value, ok := npcc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := npcc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelpayconfig.FieldState,
		})
		_node.State = value
	}
	if value, ok := npcc.mutation.IsSend(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldIsSend,
		})
		_node.IsSend = value
	}
	if value, ok := npcc.mutation.PayType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldPayType,
		})
		_node.PayType = value
	}
	if value, ok := npcc.mutation.VipType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldVipType,
		})
		_node.VipType = value
	}
	if value, ok := npcc.mutation.IsHot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelpayconfig.FieldIsHot,
		})
		_node.IsHot = value
	}
	if value, ok := npcc.mutation.CycleDay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCycleDay,
		})
		_node.CycleDay = value
	}
	if value, ok := npcc.mutation.Summary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldSummary,
		})
		_node.Summary = value
	}
	if value, ok := npcc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := npcc.mutation.EffectTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldEffectTime,
		})
		_node.EffectTime = value
	}
	if value, ok := npcc.mutation.ExpiredTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldExpiredTime,
		})
		_node.ExpiredTime = value
	}
	if value, ok := npcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := npcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := npcc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := npcc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := npcc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// NovelPayConfigCreateBulk is the builder for creating many NovelPayConfig entities in bulk.
type NovelPayConfigCreateBulk struct {
	config
	builders []*NovelPayConfigCreate
}

// Save creates the NovelPayConfig entities in the database.
func (npccb *NovelPayConfigCreateBulk) Save(ctx context.Context) ([]*NovelPayConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(npccb.builders))
	nodes := make([]*NovelPayConfig, len(npccb.builders))
	mutators := make([]Mutator, len(npccb.builders))
	for i := range npccb.builders {
		func(i int, root context.Context) {
			builder := npccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NovelPayConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, npccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, npccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, npccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (npccb *NovelPayConfigCreateBulk) SaveX(ctx context.Context) []*NovelPayConfig {
	v, err := npccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npccb *NovelPayConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := npccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npccb *NovelPayConfigCreateBulk) ExecX(ctx context.Context) {
	if err := npccb.Exec(ctx); err != nil {
		panic(err)
	}
}
