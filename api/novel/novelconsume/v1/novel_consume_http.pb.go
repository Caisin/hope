// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type NovelConsumeHTTPServer interface {
	BatchDeleteNovelConsume(context.Context, *NovelConsumeBatchDeleteReq) (*NovelConsumeDeleteReply, error)
	CreateNovelConsume(context.Context, *NovelConsumeCreateReq) (*NovelConsumeCreateReply, error)
	DeleteNovelConsume(context.Context, *NovelConsumeDeleteReq) (*NovelConsumeDeleteReply, error)
	GetNovelConsume(context.Context, *NovelConsumeReq) (*NovelConsumeReply, error)
	GetNovelConsumePage(context.Context, *NovelConsumePageReq) (*NovelConsumePageReply, error)
	UpdateNovelConsume(context.Context, *NovelConsumeUpdateReq) (*NovelConsumeUpdateReply, error)
}

func RegisterNovelConsumeHTTPServer(s *http.Server, srv NovelConsumeHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/novel/consume/page", _NovelConsume_GetNovelConsumePage0_HTTP_Handler(srv))
	r.GET("/v1/novel/consume/{id}", _NovelConsume_GetNovelConsume0_HTTP_Handler(srv))
	r.PUT("/v1/novel/consume/{id}", _NovelConsume_UpdateNovelConsume0_HTTP_Handler(srv))
	r.POST("/v1/novel/consume", _NovelConsume_CreateNovelConsume0_HTTP_Handler(srv))
	r.DELETE("/v1/novel/consume/{id}", _NovelConsume_DeleteNovelConsume0_HTTP_Handler(srv))
	r.DELETE("/v1/novel/consume", _NovelConsume_BatchDeleteNovelConsume0_HTTP_Handler(srv))
}

func _NovelConsume_GetNovelConsumePage0_HTTP_Handler(srv NovelConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelConsumePageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelconsume.v1.NovelConsume/GetNovelConsumePage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNovelConsumePage(ctx, req.(*NovelConsumePageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelConsumePageReply)
		return ctx.Result(200, reply)
	}
}

func _NovelConsume_GetNovelConsume0_HTTP_Handler(srv NovelConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelConsumeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelconsume.v1.NovelConsume/GetNovelConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNovelConsume(ctx, req.(*NovelConsumeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelConsumeReply)
		return ctx.Result(200, reply)
	}
}

func _NovelConsume_UpdateNovelConsume0_HTTP_Handler(srv NovelConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelConsumeUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelconsume.v1.NovelConsume/UpdateNovelConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNovelConsume(ctx, req.(*NovelConsumeUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelConsumeUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _NovelConsume_CreateNovelConsume0_HTTP_Handler(srv NovelConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelConsumeCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelconsume.v1.NovelConsume/CreateNovelConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNovelConsume(ctx, req.(*NovelConsumeCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelConsumeCreateReply)
		return ctx.Result(200, reply)
	}
}

func _NovelConsume_DeleteNovelConsume0_HTTP_Handler(srv NovelConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelConsumeDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelconsume.v1.NovelConsume/DeleteNovelConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNovelConsume(ctx, req.(*NovelConsumeDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelConsumeDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _NovelConsume_BatchDeleteNovelConsume0_HTTP_Handler(srv NovelConsumeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelConsumeBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelconsume.v1.NovelConsume/BatchDeleteNovelConsume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteNovelConsume(ctx, req.(*NovelConsumeBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelConsumeDeleteReply)
		return ctx.Result(200, reply)
	}
}

type NovelConsumeHTTPClient interface {
	BatchDeleteNovelConsume(ctx context.Context, req *NovelConsumeBatchDeleteReq, opts ...http.CallOption) (rsp *NovelConsumeDeleteReply, err error)
	CreateNovelConsume(ctx context.Context, req *NovelConsumeCreateReq, opts ...http.CallOption) (rsp *NovelConsumeCreateReply, err error)
	DeleteNovelConsume(ctx context.Context, req *NovelConsumeDeleteReq, opts ...http.CallOption) (rsp *NovelConsumeDeleteReply, err error)
	GetNovelConsume(ctx context.Context, req *NovelConsumeReq, opts ...http.CallOption) (rsp *NovelConsumeReply, err error)
	GetNovelConsumePage(ctx context.Context, req *NovelConsumePageReq, opts ...http.CallOption) (rsp *NovelConsumePageReply, err error)
	UpdateNovelConsume(ctx context.Context, req *NovelConsumeUpdateReq, opts ...http.CallOption) (rsp *NovelConsumeUpdateReply, err error)
}

type NovelConsumeHTTPClientImpl struct {
	cc *http.Client
}

func NewNovelConsumeHTTPClient(client *http.Client) NovelConsumeHTTPClient {
	return &NovelConsumeHTTPClientImpl{client}
}

func (c *NovelConsumeHTTPClientImpl) BatchDeleteNovelConsume(ctx context.Context, in *NovelConsumeBatchDeleteReq, opts ...http.CallOption) (*NovelConsumeDeleteReply, error) {
	var out NovelConsumeDeleteReply
	pattern := "/v1/novel/consume"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelconsume.v1.NovelConsume/BatchDeleteNovelConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelConsumeHTTPClientImpl) CreateNovelConsume(ctx context.Context, in *NovelConsumeCreateReq, opts ...http.CallOption) (*NovelConsumeCreateReply, error) {
	var out NovelConsumeCreateReply
	pattern := "/v1/novel/consume"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/novelconsume.v1.NovelConsume/CreateNovelConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelConsumeHTTPClientImpl) DeleteNovelConsume(ctx context.Context, in *NovelConsumeDeleteReq, opts ...http.CallOption) (*NovelConsumeDeleteReply, error) {
	var out NovelConsumeDeleteReply
	pattern := "/v1/novel/consume/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelconsume.v1.NovelConsume/DeleteNovelConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelConsumeHTTPClientImpl) GetNovelConsume(ctx context.Context, in *NovelConsumeReq, opts ...http.CallOption) (*NovelConsumeReply, error) {
	var out NovelConsumeReply
	pattern := "/v1/novel/consume/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelconsume.v1.NovelConsume/GetNovelConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelConsumeHTTPClientImpl) GetNovelConsumePage(ctx context.Context, in *NovelConsumePageReq, opts ...http.CallOption) (*NovelConsumePageReply, error) {
	var out NovelConsumePageReply
	pattern := "/v1/novel/consume/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelconsume.v1.NovelConsume/GetNovelConsumePage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelConsumeHTTPClientImpl) UpdateNovelConsume(ctx context.Context, in *NovelConsumeUpdateReq, opts ...http.CallOption) (*NovelConsumeUpdateReply, error) {
	var out NovelConsumeUpdateReply
	pattern := "/v1/novel/consume/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/novelconsume.v1.NovelConsume/UpdateNovelConsume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
