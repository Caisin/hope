// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"hope/apps/novel/internal/data/ent/migrate"

	"hope/apps/novel/internal/data/ent/activity"
	"hope/apps/novel/internal/data/ent/activitycomponent"
	"hope/apps/novel/internal/data/ent/adchangelog"
	"hope/apps/novel/internal/data/ent/adchannel"
	"hope/apps/novel/internal/data/ent/agreementlog"
	"hope/apps/novel/internal/data/ent/ambalance"
	"hope/apps/novel/internal/data/ent/appversion"
	"hope/apps/novel/internal/data/ent/assetchangelog"
	"hope/apps/novel/internal/data/ent/assetitem"
	"hope/apps/novel/internal/data/ent/bookpackage"
	"hope/apps/novel/internal/data/ent/clienterror"
	"hope/apps/novel/internal/data/ent/customernovelconfig"
	"hope/apps/novel/internal/data/ent/customernovels"
	"hope/apps/novel/internal/data/ent/datasource"
	"hope/apps/novel/internal/data/ent/listenrecord"
	"hope/apps/novel/internal/data/ent/novel"
	"hope/apps/novel/internal/data/ent/novelautobuy"
	"hope/apps/novel/internal/data/ent/novelbookshelf"
	"hope/apps/novel/internal/data/ent/novelbuychapterrecord"
	"hope/apps/novel/internal/data/ent/novelbuyrecord"
	"hope/apps/novel/internal/data/ent/novelchapter"
	"hope/apps/novel/internal/data/ent/novelclassify"
	"hope/apps/novel/internal/data/ent/novelcomment"
	"hope/apps/novel/internal/data/ent/novelconsume"
	"hope/apps/novel/internal/data/ent/novelmsg"
	"hope/apps/novel/internal/data/ent/payorder"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/tasklog"
	"hope/apps/novel/internal/data/ent/userevent"
	"hope/apps/novel/internal/data/ent/usermsg"
	"hope/apps/novel/internal/data/ent/vipuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// ActivityComponent is the client for interacting with the ActivityComponent builders.
	ActivityComponent *ActivityComponentClient
	// AdChangeLog is the client for interacting with the AdChangeLog builders.
	AdChangeLog *AdChangeLogClient
	// AdChannel is the client for interacting with the AdChannel builders.
	AdChannel *AdChannelClient
	// AgreementLog is the client for interacting with the AgreementLog builders.
	AgreementLog *AgreementLogClient
	// AmBalance is the client for interacting with the AmBalance builders.
	AmBalance *AmBalanceClient
	// AppVersion is the client for interacting with the AppVersion builders.
	AppVersion *AppVersionClient
	// AssetChangeLog is the client for interacting with the AssetChangeLog builders.
	AssetChangeLog *AssetChangeLogClient
	// AssetItem is the client for interacting with the AssetItem builders.
	AssetItem *AssetItemClient
	// BookPackage is the client for interacting with the BookPackage builders.
	BookPackage *BookPackageClient
	// ClientError is the client for interacting with the ClientError builders.
	ClientError *ClientErrorClient
	// CustomerNovelConfig is the client for interacting with the CustomerNovelConfig builders.
	CustomerNovelConfig *CustomerNovelConfigClient
	// CustomerNovels is the client for interacting with the CustomerNovels builders.
	CustomerNovels *CustomerNovelsClient
	// DataSource is the client for interacting with the DataSource builders.
	DataSource *DataSourceClient
	// ListenRecord is the client for interacting with the ListenRecord builders.
	ListenRecord *ListenRecordClient
	// Novel is the client for interacting with the Novel builders.
	Novel *NovelClient
	// NovelAutoBuy is the client for interacting with the NovelAutoBuy builders.
	NovelAutoBuy *NovelAutoBuyClient
	// NovelBookshelf is the client for interacting with the NovelBookshelf builders.
	NovelBookshelf *NovelBookshelfClient
	// NovelBuyChapterRecord is the client for interacting with the NovelBuyChapterRecord builders.
	NovelBuyChapterRecord *NovelBuyChapterRecordClient
	// NovelBuyRecord is the client for interacting with the NovelBuyRecord builders.
	NovelBuyRecord *NovelBuyRecordClient
	// NovelChapter is the client for interacting with the NovelChapter builders.
	NovelChapter *NovelChapterClient
	// NovelClassify is the client for interacting with the NovelClassify builders.
	NovelClassify *NovelClassifyClient
	// NovelComment is the client for interacting with the NovelComment builders.
	NovelComment *NovelCommentClient
	// NovelConsume is the client for interacting with the NovelConsume builders.
	NovelConsume *NovelConsumeClient
	// NovelMsg is the client for interacting with the NovelMsg builders.
	NovelMsg *NovelMsgClient
	// PayOrder is the client for interacting with the PayOrder builders.
	PayOrder *PayOrderClient
	// SocialUser is the client for interacting with the SocialUser builders.
	SocialUser *SocialUserClient
	// TaskLog is the client for interacting with the TaskLog builders.
	TaskLog *TaskLogClient
	// UserEvent is the client for interacting with the UserEvent builders.
	UserEvent *UserEventClient
	// UserMsg is the client for interacting with the UserMsg builders.
	UserMsg *UserMsgClient
	// VipUser is the client for interacting with the VipUser builders.
	VipUser *VipUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.ActivityComponent = NewActivityComponentClient(c.config)
	c.AdChangeLog = NewAdChangeLogClient(c.config)
	c.AdChannel = NewAdChannelClient(c.config)
	c.AgreementLog = NewAgreementLogClient(c.config)
	c.AmBalance = NewAmBalanceClient(c.config)
	c.AppVersion = NewAppVersionClient(c.config)
	c.AssetChangeLog = NewAssetChangeLogClient(c.config)
	c.AssetItem = NewAssetItemClient(c.config)
	c.BookPackage = NewBookPackageClient(c.config)
	c.ClientError = NewClientErrorClient(c.config)
	c.CustomerNovelConfig = NewCustomerNovelConfigClient(c.config)
	c.CustomerNovels = NewCustomerNovelsClient(c.config)
	c.DataSource = NewDataSourceClient(c.config)
	c.ListenRecord = NewListenRecordClient(c.config)
	c.Novel = NewNovelClient(c.config)
	c.NovelAutoBuy = NewNovelAutoBuyClient(c.config)
	c.NovelBookshelf = NewNovelBookshelfClient(c.config)
	c.NovelBuyChapterRecord = NewNovelBuyChapterRecordClient(c.config)
	c.NovelBuyRecord = NewNovelBuyRecordClient(c.config)
	c.NovelChapter = NewNovelChapterClient(c.config)
	c.NovelClassify = NewNovelClassifyClient(c.config)
	c.NovelComment = NewNovelCommentClient(c.config)
	c.NovelConsume = NewNovelConsumeClient(c.config)
	c.NovelMsg = NewNovelMsgClient(c.config)
	c.PayOrder = NewPayOrderClient(c.config)
	c.SocialUser = NewSocialUserClient(c.config)
	c.TaskLog = NewTaskLogClient(c.config)
	c.UserEvent = NewUserEventClient(c.config)
	c.UserMsg = NewUserMsgClient(c.config)
	c.VipUser = NewVipUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Activity:              NewActivityClient(cfg),
		ActivityComponent:     NewActivityComponentClient(cfg),
		AdChangeLog:           NewAdChangeLogClient(cfg),
		AdChannel:             NewAdChannelClient(cfg),
		AgreementLog:          NewAgreementLogClient(cfg),
		AmBalance:             NewAmBalanceClient(cfg),
		AppVersion:            NewAppVersionClient(cfg),
		AssetChangeLog:        NewAssetChangeLogClient(cfg),
		AssetItem:             NewAssetItemClient(cfg),
		BookPackage:           NewBookPackageClient(cfg),
		ClientError:           NewClientErrorClient(cfg),
		CustomerNovelConfig:   NewCustomerNovelConfigClient(cfg),
		CustomerNovels:        NewCustomerNovelsClient(cfg),
		DataSource:            NewDataSourceClient(cfg),
		ListenRecord:          NewListenRecordClient(cfg),
		Novel:                 NewNovelClient(cfg),
		NovelAutoBuy:          NewNovelAutoBuyClient(cfg),
		NovelBookshelf:        NewNovelBookshelfClient(cfg),
		NovelBuyChapterRecord: NewNovelBuyChapterRecordClient(cfg),
		NovelBuyRecord:        NewNovelBuyRecordClient(cfg),
		NovelChapter:          NewNovelChapterClient(cfg),
		NovelClassify:         NewNovelClassifyClient(cfg),
		NovelComment:          NewNovelCommentClient(cfg),
		NovelConsume:          NewNovelConsumeClient(cfg),
		NovelMsg:              NewNovelMsgClient(cfg),
		PayOrder:              NewPayOrderClient(cfg),
		SocialUser:            NewSocialUserClient(cfg),
		TaskLog:               NewTaskLogClient(cfg),
		UserEvent:             NewUserEventClient(cfg),
		UserMsg:               NewUserMsgClient(cfg),
		VipUser:               NewVipUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                cfg,
		Activity:              NewActivityClient(cfg),
		ActivityComponent:     NewActivityComponentClient(cfg),
		AdChangeLog:           NewAdChangeLogClient(cfg),
		AdChannel:             NewAdChannelClient(cfg),
		AgreementLog:          NewAgreementLogClient(cfg),
		AmBalance:             NewAmBalanceClient(cfg),
		AppVersion:            NewAppVersionClient(cfg),
		AssetChangeLog:        NewAssetChangeLogClient(cfg),
		AssetItem:             NewAssetItemClient(cfg),
		BookPackage:           NewBookPackageClient(cfg),
		ClientError:           NewClientErrorClient(cfg),
		CustomerNovelConfig:   NewCustomerNovelConfigClient(cfg),
		CustomerNovels:        NewCustomerNovelsClient(cfg),
		DataSource:            NewDataSourceClient(cfg),
		ListenRecord:          NewListenRecordClient(cfg),
		Novel:                 NewNovelClient(cfg),
		NovelAutoBuy:          NewNovelAutoBuyClient(cfg),
		NovelBookshelf:        NewNovelBookshelfClient(cfg),
		NovelBuyChapterRecord: NewNovelBuyChapterRecordClient(cfg),
		NovelBuyRecord:        NewNovelBuyRecordClient(cfg),
		NovelChapter:          NewNovelChapterClient(cfg),
		NovelClassify:         NewNovelClassifyClient(cfg),
		NovelComment:          NewNovelCommentClient(cfg),
		NovelConsume:          NewNovelConsumeClient(cfg),
		NovelMsg:              NewNovelMsgClient(cfg),
		PayOrder:              NewPayOrderClient(cfg),
		SocialUser:            NewSocialUserClient(cfg),
		TaskLog:               NewTaskLogClient(cfg),
		UserEvent:             NewUserEventClient(cfg),
		UserMsg:               NewUserMsgClient(cfg),
		VipUser:               NewVipUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Activity.Use(hooks...)
	c.ActivityComponent.Use(hooks...)
	c.AdChangeLog.Use(hooks...)
	c.AdChannel.Use(hooks...)
	c.AgreementLog.Use(hooks...)
	c.AmBalance.Use(hooks...)
	c.AppVersion.Use(hooks...)
	c.AssetChangeLog.Use(hooks...)
	c.AssetItem.Use(hooks...)
	c.BookPackage.Use(hooks...)
	c.ClientError.Use(hooks...)
	c.CustomerNovelConfig.Use(hooks...)
	c.CustomerNovels.Use(hooks...)
	c.DataSource.Use(hooks...)
	c.ListenRecord.Use(hooks...)
	c.Novel.Use(hooks...)
	c.NovelAutoBuy.Use(hooks...)
	c.NovelBookshelf.Use(hooks...)
	c.NovelBuyChapterRecord.Use(hooks...)
	c.NovelBuyRecord.Use(hooks...)
	c.NovelChapter.Use(hooks...)
	c.NovelClassify.Use(hooks...)
	c.NovelComment.Use(hooks...)
	c.NovelConsume.Use(hooks...)
	c.NovelMsg.Use(hooks...)
	c.PayOrder.Use(hooks...)
	c.SocialUser.Use(hooks...)
	c.TaskLog.Use(hooks...)
	c.UserEvent.Use(hooks...)
	c.UserMsg.Use(hooks...)
	c.VipUser.Use(hooks...)
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Create returns a create builder for Activity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id int64) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityClient) DeleteOneID(id int64) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{
		config: c.config,
	}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id int64) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id int64) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	return c.hooks.Activity
}

// ActivityComponentClient is a client for the ActivityComponent schema.
type ActivityComponentClient struct {
	config
}

// NewActivityComponentClient returns a client for the ActivityComponent from the given config.
func NewActivityComponentClient(c config) *ActivityComponentClient {
	return &ActivityComponentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activitycomponent.Hooks(f(g(h())))`.
func (c *ActivityComponentClient) Use(hooks ...Hook) {
	c.hooks.ActivityComponent = append(c.hooks.ActivityComponent, hooks...)
}

// Create returns a create builder for ActivityComponent.
func (c *ActivityComponentClient) Create() *ActivityComponentCreate {
	mutation := newActivityComponentMutation(c.config, OpCreate)
	return &ActivityComponentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActivityComponent entities.
func (c *ActivityComponentClient) CreateBulk(builders ...*ActivityComponentCreate) *ActivityComponentCreateBulk {
	return &ActivityComponentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActivityComponent.
func (c *ActivityComponentClient) Update() *ActivityComponentUpdate {
	mutation := newActivityComponentMutation(c.config, OpUpdate)
	return &ActivityComponentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityComponentClient) UpdateOne(ac *ActivityComponent) *ActivityComponentUpdateOne {
	mutation := newActivityComponentMutation(c.config, OpUpdateOne, withActivityComponent(ac))
	return &ActivityComponentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityComponentClient) UpdateOneID(id int64) *ActivityComponentUpdateOne {
	mutation := newActivityComponentMutation(c.config, OpUpdateOne, withActivityComponentID(id))
	return &ActivityComponentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActivityComponent.
func (c *ActivityComponentClient) Delete() *ActivityComponentDelete {
	mutation := newActivityComponentMutation(c.config, OpDelete)
	return &ActivityComponentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityComponentClient) DeleteOne(ac *ActivityComponent) *ActivityComponentDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityComponentClient) DeleteOneID(id int64) *ActivityComponentDeleteOne {
	builder := c.Delete().Where(activitycomponent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityComponentDeleteOne{builder}
}

// Query returns a query builder for ActivityComponent.
func (c *ActivityComponentClient) Query() *ActivityComponentQuery {
	return &ActivityComponentQuery{
		config: c.config,
	}
}

// Get returns a ActivityComponent entity by its id.
func (c *ActivityComponentClient) Get(ctx context.Context, id int64) (*ActivityComponent, error) {
	return c.Query().Where(activitycomponent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityComponentClient) GetX(ctx context.Context, id int64) *ActivityComponent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ActivityComponentClient) Hooks() []Hook {
	return c.hooks.ActivityComponent
}

// AdChangeLogClient is a client for the AdChangeLog schema.
type AdChangeLogClient struct {
	config
}

// NewAdChangeLogClient returns a client for the AdChangeLog from the given config.
func NewAdChangeLogClient(c config) *AdChangeLogClient {
	return &AdChangeLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adchangelog.Hooks(f(g(h())))`.
func (c *AdChangeLogClient) Use(hooks ...Hook) {
	c.hooks.AdChangeLog = append(c.hooks.AdChangeLog, hooks...)
}

// Create returns a create builder for AdChangeLog.
func (c *AdChangeLogClient) Create() *AdChangeLogCreate {
	mutation := newAdChangeLogMutation(c.config, OpCreate)
	return &AdChangeLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdChangeLog entities.
func (c *AdChangeLogClient) CreateBulk(builders ...*AdChangeLogCreate) *AdChangeLogCreateBulk {
	return &AdChangeLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdChangeLog.
func (c *AdChangeLogClient) Update() *AdChangeLogUpdate {
	mutation := newAdChangeLogMutation(c.config, OpUpdate)
	return &AdChangeLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdChangeLogClient) UpdateOne(acl *AdChangeLog) *AdChangeLogUpdateOne {
	mutation := newAdChangeLogMutation(c.config, OpUpdateOne, withAdChangeLog(acl))
	return &AdChangeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdChangeLogClient) UpdateOneID(id int64) *AdChangeLogUpdateOne {
	mutation := newAdChangeLogMutation(c.config, OpUpdateOne, withAdChangeLogID(id))
	return &AdChangeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdChangeLog.
func (c *AdChangeLogClient) Delete() *AdChangeLogDelete {
	mutation := newAdChangeLogMutation(c.config, OpDelete)
	return &AdChangeLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdChangeLogClient) DeleteOne(acl *AdChangeLog) *AdChangeLogDeleteOne {
	return c.DeleteOneID(acl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdChangeLogClient) DeleteOneID(id int64) *AdChangeLogDeleteOne {
	builder := c.Delete().Where(adchangelog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdChangeLogDeleteOne{builder}
}

// Query returns a query builder for AdChangeLog.
func (c *AdChangeLogClient) Query() *AdChangeLogQuery {
	return &AdChangeLogQuery{
		config: c.config,
	}
}

// Get returns a AdChangeLog entity by its id.
func (c *AdChangeLogClient) Get(ctx context.Context, id int64) (*AdChangeLog, error) {
	return c.Query().Where(adchangelog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdChangeLogClient) GetX(ctx context.Context, id int64) *AdChangeLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AdChangeLog.
func (c *AdChangeLogClient) QueryUser(acl *AdChangeLog) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := acl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adchangelog.Table, adchangelog.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adchangelog.UserTable, adchangelog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(acl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdChangeLogClient) Hooks() []Hook {
	return c.hooks.AdChangeLog
}

// AdChannelClient is a client for the AdChannel schema.
type AdChannelClient struct {
	config
}

// NewAdChannelClient returns a client for the AdChannel from the given config.
func NewAdChannelClient(c config) *AdChannelClient {
	return &AdChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adchannel.Hooks(f(g(h())))`.
func (c *AdChannelClient) Use(hooks ...Hook) {
	c.hooks.AdChannel = append(c.hooks.AdChannel, hooks...)
}

// Create returns a create builder for AdChannel.
func (c *AdChannelClient) Create() *AdChannelCreate {
	mutation := newAdChannelMutation(c.config, OpCreate)
	return &AdChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdChannel entities.
func (c *AdChannelClient) CreateBulk(builders ...*AdChannelCreate) *AdChannelCreateBulk {
	return &AdChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdChannel.
func (c *AdChannelClient) Update() *AdChannelUpdate {
	mutation := newAdChannelMutation(c.config, OpUpdate)
	return &AdChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdChannelClient) UpdateOne(ac *AdChannel) *AdChannelUpdateOne {
	mutation := newAdChannelMutation(c.config, OpUpdateOne, withAdChannel(ac))
	return &AdChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdChannelClient) UpdateOneID(id int64) *AdChannelUpdateOne {
	mutation := newAdChannelMutation(c.config, OpUpdateOne, withAdChannelID(id))
	return &AdChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdChannel.
func (c *AdChannelClient) Delete() *AdChannelDelete {
	mutation := newAdChannelMutation(c.config, OpDelete)
	return &AdChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdChannelClient) DeleteOne(ac *AdChannel) *AdChannelDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdChannelClient) DeleteOneID(id int64) *AdChannelDeleteOne {
	builder := c.Delete().Where(adchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdChannelDeleteOne{builder}
}

// Query returns a query builder for AdChannel.
func (c *AdChannelClient) Query() *AdChannelQuery {
	return &AdChannelQuery{
		config: c.config,
	}
}

// Get returns a AdChannel entity by its id.
func (c *AdChannelClient) Get(ctx context.Context, id int64) (*AdChannel, error) {
	return c.Query().Where(adchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdChannelClient) GetX(ctx context.Context, id int64) *AdChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a AdChannel.
func (c *AdChannelClient) QueryUsers(ac *AdChannel) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adchannel.Table, adchannel.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adchannel.UsersTable, adchannel.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a AdChannel.
func (c *AdChannelClient) QueryOrders(ac *AdChannel) *PayOrderQuery {
	query := &PayOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adchannel.Table, adchannel.FieldID, id),
			sqlgraph.To(payorder.Table, payorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, adchannel.OrdersTable, adchannel.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdChannelClient) Hooks() []Hook {
	return c.hooks.AdChannel
}

// AgreementLogClient is a client for the AgreementLog schema.
type AgreementLogClient struct {
	config
}

// NewAgreementLogClient returns a client for the AgreementLog from the given config.
func NewAgreementLogClient(c config) *AgreementLogClient {
	return &AgreementLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agreementlog.Hooks(f(g(h())))`.
func (c *AgreementLogClient) Use(hooks ...Hook) {
	c.hooks.AgreementLog = append(c.hooks.AgreementLog, hooks...)
}

// Create returns a create builder for AgreementLog.
func (c *AgreementLogClient) Create() *AgreementLogCreate {
	mutation := newAgreementLogMutation(c.config, OpCreate)
	return &AgreementLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AgreementLog entities.
func (c *AgreementLogClient) CreateBulk(builders ...*AgreementLogCreate) *AgreementLogCreateBulk {
	return &AgreementLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AgreementLog.
func (c *AgreementLogClient) Update() *AgreementLogUpdate {
	mutation := newAgreementLogMutation(c.config, OpUpdate)
	return &AgreementLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgreementLogClient) UpdateOne(al *AgreementLog) *AgreementLogUpdateOne {
	mutation := newAgreementLogMutation(c.config, OpUpdateOne, withAgreementLog(al))
	return &AgreementLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgreementLogClient) UpdateOneID(id int64) *AgreementLogUpdateOne {
	mutation := newAgreementLogMutation(c.config, OpUpdateOne, withAgreementLogID(id))
	return &AgreementLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AgreementLog.
func (c *AgreementLogClient) Delete() *AgreementLogDelete {
	mutation := newAgreementLogMutation(c.config, OpDelete)
	return &AgreementLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AgreementLogClient) DeleteOne(al *AgreementLog) *AgreementLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AgreementLogClient) DeleteOneID(id int64) *AgreementLogDeleteOne {
	builder := c.Delete().Where(agreementlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgreementLogDeleteOne{builder}
}

// Query returns a query builder for AgreementLog.
func (c *AgreementLogClient) Query() *AgreementLogQuery {
	return &AgreementLogQuery{
		config: c.config,
	}
}

// Get returns a AgreementLog entity by its id.
func (c *AgreementLogClient) Get(ctx context.Context, id int64) (*AgreementLog, error) {
	return c.Query().Where(agreementlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgreementLogClient) GetX(ctx context.Context, id int64) *AgreementLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrders queries the orders edge of a AgreementLog.
func (c *AgreementLogClient) QueryOrders(al *AgreementLog) *PayOrderQuery {
	query := &PayOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agreementlog.Table, agreementlog.FieldID, id),
			sqlgraph.To(payorder.Table, payorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agreementlog.OrdersTable, agreementlog.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AgreementLogClient) Hooks() []Hook {
	return c.hooks.AgreementLog
}

// AmBalanceClient is a client for the AmBalance schema.
type AmBalanceClient struct {
	config
}

// NewAmBalanceClient returns a client for the AmBalance from the given config.
func NewAmBalanceClient(c config) *AmBalanceClient {
	return &AmBalanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ambalance.Hooks(f(g(h())))`.
func (c *AmBalanceClient) Use(hooks ...Hook) {
	c.hooks.AmBalance = append(c.hooks.AmBalance, hooks...)
}

// Create returns a create builder for AmBalance.
func (c *AmBalanceClient) Create() *AmBalanceCreate {
	mutation := newAmBalanceMutation(c.config, OpCreate)
	return &AmBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AmBalance entities.
func (c *AmBalanceClient) CreateBulk(builders ...*AmBalanceCreate) *AmBalanceCreateBulk {
	return &AmBalanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AmBalance.
func (c *AmBalanceClient) Update() *AmBalanceUpdate {
	mutation := newAmBalanceMutation(c.config, OpUpdate)
	return &AmBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AmBalanceClient) UpdateOne(ab *AmBalance) *AmBalanceUpdateOne {
	mutation := newAmBalanceMutation(c.config, OpUpdateOne, withAmBalance(ab))
	return &AmBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AmBalanceClient) UpdateOneID(id int64) *AmBalanceUpdateOne {
	mutation := newAmBalanceMutation(c.config, OpUpdateOne, withAmBalanceID(id))
	return &AmBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AmBalance.
func (c *AmBalanceClient) Delete() *AmBalanceDelete {
	mutation := newAmBalanceMutation(c.config, OpDelete)
	return &AmBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AmBalanceClient) DeleteOne(ab *AmBalance) *AmBalanceDeleteOne {
	return c.DeleteOneID(ab.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AmBalanceClient) DeleteOneID(id int64) *AmBalanceDeleteOne {
	builder := c.Delete().Where(ambalance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AmBalanceDeleteOne{builder}
}

// Query returns a query builder for AmBalance.
func (c *AmBalanceClient) Query() *AmBalanceQuery {
	return &AmBalanceQuery{
		config: c.config,
	}
}

// Get returns a AmBalance entity by its id.
func (c *AmBalanceClient) Get(ctx context.Context, id int64) (*AmBalance, error) {
	return c.Query().Where(ambalance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AmBalanceClient) GetX(ctx context.Context, id int64) *AmBalance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AmBalance.
func (c *AmBalanceClient) QueryUser(ab *AmBalance) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ambalance.Table, ambalance.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ambalance.UserTable, ambalance.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AmBalanceClient) Hooks() []Hook {
	return c.hooks.AmBalance
}

// AppVersionClient is a client for the AppVersion schema.
type AppVersionClient struct {
	config
}

// NewAppVersionClient returns a client for the AppVersion from the given config.
func NewAppVersionClient(c config) *AppVersionClient {
	return &AppVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appversion.Hooks(f(g(h())))`.
func (c *AppVersionClient) Use(hooks ...Hook) {
	c.hooks.AppVersion = append(c.hooks.AppVersion, hooks...)
}

// Create returns a create builder for AppVersion.
func (c *AppVersionClient) Create() *AppVersionCreate {
	mutation := newAppVersionMutation(c.config, OpCreate)
	return &AppVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppVersion entities.
func (c *AppVersionClient) CreateBulk(builders ...*AppVersionCreate) *AppVersionCreateBulk {
	return &AppVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppVersion.
func (c *AppVersionClient) Update() *AppVersionUpdate {
	mutation := newAppVersionMutation(c.config, OpUpdate)
	return &AppVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppVersionClient) UpdateOne(av *AppVersion) *AppVersionUpdateOne {
	mutation := newAppVersionMutation(c.config, OpUpdateOne, withAppVersion(av))
	return &AppVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppVersionClient) UpdateOneID(id int64) *AppVersionUpdateOne {
	mutation := newAppVersionMutation(c.config, OpUpdateOne, withAppVersionID(id))
	return &AppVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppVersion.
func (c *AppVersionClient) Delete() *AppVersionDelete {
	mutation := newAppVersionMutation(c.config, OpDelete)
	return &AppVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppVersionClient) DeleteOne(av *AppVersion) *AppVersionDeleteOne {
	return c.DeleteOneID(av.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppVersionClient) DeleteOneID(id int64) *AppVersionDeleteOne {
	builder := c.Delete().Where(appversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppVersionDeleteOne{builder}
}

// Query returns a query builder for AppVersion.
func (c *AppVersionClient) Query() *AppVersionQuery {
	return &AppVersionQuery{
		config: c.config,
	}
}

// Get returns a AppVersion entity by its id.
func (c *AppVersionClient) Get(ctx context.Context, id int64) (*AppVersion, error) {
	return c.Query().Where(appversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppVersionClient) GetX(ctx context.Context, id int64) *AppVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppVersionClient) Hooks() []Hook {
	return c.hooks.AppVersion
}

// AssetChangeLogClient is a client for the AssetChangeLog schema.
type AssetChangeLogClient struct {
	config
}

// NewAssetChangeLogClient returns a client for the AssetChangeLog from the given config.
func NewAssetChangeLogClient(c config) *AssetChangeLogClient {
	return &AssetChangeLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetchangelog.Hooks(f(g(h())))`.
func (c *AssetChangeLogClient) Use(hooks ...Hook) {
	c.hooks.AssetChangeLog = append(c.hooks.AssetChangeLog, hooks...)
}

// Create returns a create builder for AssetChangeLog.
func (c *AssetChangeLogClient) Create() *AssetChangeLogCreate {
	mutation := newAssetChangeLogMutation(c.config, OpCreate)
	return &AssetChangeLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetChangeLog entities.
func (c *AssetChangeLogClient) CreateBulk(builders ...*AssetChangeLogCreate) *AssetChangeLogCreateBulk {
	return &AssetChangeLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetChangeLog.
func (c *AssetChangeLogClient) Update() *AssetChangeLogUpdate {
	mutation := newAssetChangeLogMutation(c.config, OpUpdate)
	return &AssetChangeLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetChangeLogClient) UpdateOne(acl *AssetChangeLog) *AssetChangeLogUpdateOne {
	mutation := newAssetChangeLogMutation(c.config, OpUpdateOne, withAssetChangeLog(acl))
	return &AssetChangeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetChangeLogClient) UpdateOneID(id int64) *AssetChangeLogUpdateOne {
	mutation := newAssetChangeLogMutation(c.config, OpUpdateOne, withAssetChangeLogID(id))
	return &AssetChangeLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetChangeLog.
func (c *AssetChangeLogClient) Delete() *AssetChangeLogDelete {
	mutation := newAssetChangeLogMutation(c.config, OpDelete)
	return &AssetChangeLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AssetChangeLogClient) DeleteOne(acl *AssetChangeLog) *AssetChangeLogDeleteOne {
	return c.DeleteOneID(acl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AssetChangeLogClient) DeleteOneID(id int64) *AssetChangeLogDeleteOne {
	builder := c.Delete().Where(assetchangelog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetChangeLogDeleteOne{builder}
}

// Query returns a query builder for AssetChangeLog.
func (c *AssetChangeLogClient) Query() *AssetChangeLogQuery {
	return &AssetChangeLogQuery{
		config: c.config,
	}
}

// Get returns a AssetChangeLog entity by its id.
func (c *AssetChangeLogClient) Get(ctx context.Context, id int64) (*AssetChangeLog, error) {
	return c.Query().Where(assetchangelog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetChangeLogClient) GetX(ctx context.Context, id int64) *AssetChangeLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AssetChangeLog.
func (c *AssetChangeLogClient) QueryUser(acl *AssetChangeLog) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := acl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetchangelog.Table, assetchangelog.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetchangelog.UserTable, assetchangelog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(acl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetChangeLogClient) Hooks() []Hook {
	return c.hooks.AssetChangeLog
}

// AssetItemClient is a client for the AssetItem schema.
type AssetItemClient struct {
	config
}

// NewAssetItemClient returns a client for the AssetItem from the given config.
func NewAssetItemClient(c config) *AssetItemClient {
	return &AssetItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetitem.Hooks(f(g(h())))`.
func (c *AssetItemClient) Use(hooks ...Hook) {
	c.hooks.AssetItem = append(c.hooks.AssetItem, hooks...)
}

// Create returns a create builder for AssetItem.
func (c *AssetItemClient) Create() *AssetItemCreate {
	mutation := newAssetItemMutation(c.config, OpCreate)
	return &AssetItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetItem entities.
func (c *AssetItemClient) CreateBulk(builders ...*AssetItemCreate) *AssetItemCreateBulk {
	return &AssetItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetItem.
func (c *AssetItemClient) Update() *AssetItemUpdate {
	mutation := newAssetItemMutation(c.config, OpUpdate)
	return &AssetItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetItemClient) UpdateOne(ai *AssetItem) *AssetItemUpdateOne {
	mutation := newAssetItemMutation(c.config, OpUpdateOne, withAssetItem(ai))
	return &AssetItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetItemClient) UpdateOneID(id int64) *AssetItemUpdateOne {
	mutation := newAssetItemMutation(c.config, OpUpdateOne, withAssetItemID(id))
	return &AssetItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetItem.
func (c *AssetItemClient) Delete() *AssetItemDelete {
	mutation := newAssetItemMutation(c.config, OpDelete)
	return &AssetItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AssetItemClient) DeleteOne(ai *AssetItem) *AssetItemDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AssetItemClient) DeleteOneID(id int64) *AssetItemDeleteOne {
	builder := c.Delete().Where(assetitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetItemDeleteOne{builder}
}

// Query returns a query builder for AssetItem.
func (c *AssetItemClient) Query() *AssetItemQuery {
	return &AssetItemQuery{
		config: c.config,
	}
}

// Get returns a AssetItem entity by its id.
func (c *AssetItemClient) Get(ctx context.Context, id int64) (*AssetItem, error) {
	return c.Query().Where(assetitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetItemClient) GetX(ctx context.Context, id int64) *AssetItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AssetItemClient) Hooks() []Hook {
	return c.hooks.AssetItem
}

// BookPackageClient is a client for the BookPackage schema.
type BookPackageClient struct {
	config
}

// NewBookPackageClient returns a client for the BookPackage from the given config.
func NewBookPackageClient(c config) *BookPackageClient {
	return &BookPackageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bookpackage.Hooks(f(g(h())))`.
func (c *BookPackageClient) Use(hooks ...Hook) {
	c.hooks.BookPackage = append(c.hooks.BookPackage, hooks...)
}

// Create returns a create builder for BookPackage.
func (c *BookPackageClient) Create() *BookPackageCreate {
	mutation := newBookPackageMutation(c.config, OpCreate)
	return &BookPackageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BookPackage entities.
func (c *BookPackageClient) CreateBulk(builders ...*BookPackageCreate) *BookPackageCreateBulk {
	return &BookPackageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BookPackage.
func (c *BookPackageClient) Update() *BookPackageUpdate {
	mutation := newBookPackageMutation(c.config, OpUpdate)
	return &BookPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookPackageClient) UpdateOne(bp *BookPackage) *BookPackageUpdateOne {
	mutation := newBookPackageMutation(c.config, OpUpdateOne, withBookPackage(bp))
	return &BookPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookPackageClient) UpdateOneID(id int64) *BookPackageUpdateOne {
	mutation := newBookPackageMutation(c.config, OpUpdateOne, withBookPackageID(id))
	return &BookPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BookPackage.
func (c *BookPackageClient) Delete() *BookPackageDelete {
	mutation := newBookPackageMutation(c.config, OpDelete)
	return &BookPackageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BookPackageClient) DeleteOne(bp *BookPackage) *BookPackageDeleteOne {
	return c.DeleteOneID(bp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BookPackageClient) DeleteOneID(id int64) *BookPackageDeleteOne {
	builder := c.Delete().Where(bookpackage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookPackageDeleteOne{builder}
}

// Query returns a query builder for BookPackage.
func (c *BookPackageClient) Query() *BookPackageQuery {
	return &BookPackageQuery{
		config: c.config,
	}
}

// Get returns a BookPackage entity by its id.
func (c *BookPackageClient) Get(ctx context.Context, id int64) (*BookPackage, error) {
	return c.Query().Where(bookpackage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookPackageClient) GetX(ctx context.Context, id int64) *BookPackage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBooks queries the books edge of a BookPackage.
func (c *BookPackageClient) QueryBooks(bp *BookPackage) *NovelQuery {
	query := &NovelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bookpackage.Table, bookpackage.FieldID, id),
			sqlgraph.To(novel.Table, novel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, bookpackage.BooksTable, bookpackage.BooksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookPackageClient) Hooks() []Hook {
	return c.hooks.BookPackage
}

// ClientErrorClient is a client for the ClientError schema.
type ClientErrorClient struct {
	config
}

// NewClientErrorClient returns a client for the ClientError from the given config.
func NewClientErrorClient(c config) *ClientErrorClient {
	return &ClientErrorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clienterror.Hooks(f(g(h())))`.
func (c *ClientErrorClient) Use(hooks ...Hook) {
	c.hooks.ClientError = append(c.hooks.ClientError, hooks...)
}

// Create returns a create builder for ClientError.
func (c *ClientErrorClient) Create() *ClientErrorCreate {
	mutation := newClientErrorMutation(c.config, OpCreate)
	return &ClientErrorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ClientError entities.
func (c *ClientErrorClient) CreateBulk(builders ...*ClientErrorCreate) *ClientErrorCreateBulk {
	return &ClientErrorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ClientError.
func (c *ClientErrorClient) Update() *ClientErrorUpdate {
	mutation := newClientErrorMutation(c.config, OpUpdate)
	return &ClientErrorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClientErrorClient) UpdateOne(ce *ClientError) *ClientErrorUpdateOne {
	mutation := newClientErrorMutation(c.config, OpUpdateOne, withClientError(ce))
	return &ClientErrorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClientErrorClient) UpdateOneID(id int64) *ClientErrorUpdateOne {
	mutation := newClientErrorMutation(c.config, OpUpdateOne, withClientErrorID(id))
	return &ClientErrorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClientError.
func (c *ClientErrorClient) Delete() *ClientErrorDelete {
	mutation := newClientErrorMutation(c.config, OpDelete)
	return &ClientErrorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClientErrorClient) DeleteOne(ce *ClientError) *ClientErrorDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClientErrorClient) DeleteOneID(id int64) *ClientErrorDeleteOne {
	builder := c.Delete().Where(clienterror.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClientErrorDeleteOne{builder}
}

// Query returns a query builder for ClientError.
func (c *ClientErrorClient) Query() *ClientErrorQuery {
	return &ClientErrorQuery{
		config: c.config,
	}
}

// Get returns a ClientError entity by its id.
func (c *ClientErrorClient) Get(ctx context.Context, id int64) (*ClientError, error) {
	return c.Query().Where(clienterror.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClientErrorClient) GetX(ctx context.Context, id int64) *ClientError {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ClientErrorClient) Hooks() []Hook {
	return c.hooks.ClientError
}

// CustomerNovelConfigClient is a client for the CustomerNovelConfig schema.
type CustomerNovelConfigClient struct {
	config
}

// NewCustomerNovelConfigClient returns a client for the CustomerNovelConfig from the given config.
func NewCustomerNovelConfigClient(c config) *CustomerNovelConfigClient {
	return &CustomerNovelConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customernovelconfig.Hooks(f(g(h())))`.
func (c *CustomerNovelConfigClient) Use(hooks ...Hook) {
	c.hooks.CustomerNovelConfig = append(c.hooks.CustomerNovelConfig, hooks...)
}

// Create returns a create builder for CustomerNovelConfig.
func (c *CustomerNovelConfigClient) Create() *CustomerNovelConfigCreate {
	mutation := newCustomerNovelConfigMutation(c.config, OpCreate)
	return &CustomerNovelConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomerNovelConfig entities.
func (c *CustomerNovelConfigClient) CreateBulk(builders ...*CustomerNovelConfigCreate) *CustomerNovelConfigCreateBulk {
	return &CustomerNovelConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomerNovelConfig.
func (c *CustomerNovelConfigClient) Update() *CustomerNovelConfigUpdate {
	mutation := newCustomerNovelConfigMutation(c.config, OpUpdate)
	return &CustomerNovelConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerNovelConfigClient) UpdateOne(cnc *CustomerNovelConfig) *CustomerNovelConfigUpdateOne {
	mutation := newCustomerNovelConfigMutation(c.config, OpUpdateOne, withCustomerNovelConfig(cnc))
	return &CustomerNovelConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerNovelConfigClient) UpdateOneID(id int64) *CustomerNovelConfigUpdateOne {
	mutation := newCustomerNovelConfigMutation(c.config, OpUpdateOne, withCustomerNovelConfigID(id))
	return &CustomerNovelConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomerNovelConfig.
func (c *CustomerNovelConfigClient) Delete() *CustomerNovelConfigDelete {
	mutation := newCustomerNovelConfigMutation(c.config, OpDelete)
	return &CustomerNovelConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerNovelConfigClient) DeleteOne(cnc *CustomerNovelConfig) *CustomerNovelConfigDeleteOne {
	return c.DeleteOneID(cnc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerNovelConfigClient) DeleteOneID(id int64) *CustomerNovelConfigDeleteOne {
	builder := c.Delete().Where(customernovelconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerNovelConfigDeleteOne{builder}
}

// Query returns a query builder for CustomerNovelConfig.
func (c *CustomerNovelConfigClient) Query() *CustomerNovelConfigQuery {
	return &CustomerNovelConfigQuery{
		config: c.config,
	}
}

// Get returns a CustomerNovelConfig entity by its id.
func (c *CustomerNovelConfigClient) Get(ctx context.Context, id int64) (*CustomerNovelConfig, error) {
	return c.Query().Where(customernovelconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerNovelConfigClient) GetX(ctx context.Context, id int64) *CustomerNovelConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CustomerNovelConfigClient) Hooks() []Hook {
	return c.hooks.CustomerNovelConfig
}

// CustomerNovelsClient is a client for the CustomerNovels schema.
type CustomerNovelsClient struct {
	config
}

// NewCustomerNovelsClient returns a client for the CustomerNovels from the given config.
func NewCustomerNovelsClient(c config) *CustomerNovelsClient {
	return &CustomerNovelsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customernovels.Hooks(f(g(h())))`.
func (c *CustomerNovelsClient) Use(hooks ...Hook) {
	c.hooks.CustomerNovels = append(c.hooks.CustomerNovels, hooks...)
}

// Create returns a create builder for CustomerNovels.
func (c *CustomerNovelsClient) Create() *CustomerNovelsCreate {
	mutation := newCustomerNovelsMutation(c.config, OpCreate)
	return &CustomerNovelsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomerNovels entities.
func (c *CustomerNovelsClient) CreateBulk(builders ...*CustomerNovelsCreate) *CustomerNovelsCreateBulk {
	return &CustomerNovelsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomerNovels.
func (c *CustomerNovelsClient) Update() *CustomerNovelsUpdate {
	mutation := newCustomerNovelsMutation(c.config, OpUpdate)
	return &CustomerNovelsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerNovelsClient) UpdateOne(cn *CustomerNovels) *CustomerNovelsUpdateOne {
	mutation := newCustomerNovelsMutation(c.config, OpUpdateOne, withCustomerNovels(cn))
	return &CustomerNovelsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerNovelsClient) UpdateOneID(id int64) *CustomerNovelsUpdateOne {
	mutation := newCustomerNovelsMutation(c.config, OpUpdateOne, withCustomerNovelsID(id))
	return &CustomerNovelsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomerNovels.
func (c *CustomerNovelsClient) Delete() *CustomerNovelsDelete {
	mutation := newCustomerNovelsMutation(c.config, OpDelete)
	return &CustomerNovelsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerNovelsClient) DeleteOne(cn *CustomerNovels) *CustomerNovelsDeleteOne {
	return c.DeleteOneID(cn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerNovelsClient) DeleteOneID(id int64) *CustomerNovelsDeleteOne {
	builder := c.Delete().Where(customernovels.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerNovelsDeleteOne{builder}
}

// Query returns a query builder for CustomerNovels.
func (c *CustomerNovelsClient) Query() *CustomerNovelsQuery {
	return &CustomerNovelsQuery{
		config: c.config,
	}
}

// Get returns a CustomerNovels entity by its id.
func (c *CustomerNovelsClient) Get(ctx context.Context, id int64) (*CustomerNovels, error) {
	return c.Query().Where(customernovels.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerNovelsClient) GetX(ctx context.Context, id int64) *CustomerNovels {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CustomerNovelsClient) Hooks() []Hook {
	return c.hooks.CustomerNovels
}

// DataSourceClient is a client for the DataSource schema.
type DataSourceClient struct {
	config
}

// NewDataSourceClient returns a client for the DataSource from the given config.
func NewDataSourceClient(c config) *DataSourceClient {
	return &DataSourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `datasource.Hooks(f(g(h())))`.
func (c *DataSourceClient) Use(hooks ...Hook) {
	c.hooks.DataSource = append(c.hooks.DataSource, hooks...)
}

// Create returns a create builder for DataSource.
func (c *DataSourceClient) Create() *DataSourceCreate {
	mutation := newDataSourceMutation(c.config, OpCreate)
	return &DataSourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DataSource entities.
func (c *DataSourceClient) CreateBulk(builders ...*DataSourceCreate) *DataSourceCreateBulk {
	return &DataSourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DataSource.
func (c *DataSourceClient) Update() *DataSourceUpdate {
	mutation := newDataSourceMutation(c.config, OpUpdate)
	return &DataSourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DataSourceClient) UpdateOne(ds *DataSource) *DataSourceUpdateOne {
	mutation := newDataSourceMutation(c.config, OpUpdateOne, withDataSource(ds))
	return &DataSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DataSourceClient) UpdateOneID(id int64) *DataSourceUpdateOne {
	mutation := newDataSourceMutation(c.config, OpUpdateOne, withDataSourceID(id))
	return &DataSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DataSource.
func (c *DataSourceClient) Delete() *DataSourceDelete {
	mutation := newDataSourceMutation(c.config, OpDelete)
	return &DataSourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DataSourceClient) DeleteOne(ds *DataSource) *DataSourceDeleteOne {
	return c.DeleteOneID(ds.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DataSourceClient) DeleteOneID(id int64) *DataSourceDeleteOne {
	builder := c.Delete().Where(datasource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DataSourceDeleteOne{builder}
}

// Query returns a query builder for DataSource.
func (c *DataSourceClient) Query() *DataSourceQuery {
	return &DataSourceQuery{
		config: c.config,
	}
}

// Get returns a DataSource entity by its id.
func (c *DataSourceClient) Get(ctx context.Context, id int64) (*DataSource, error) {
	return c.Query().Where(datasource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DataSourceClient) GetX(ctx context.Context, id int64) *DataSource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DataSourceClient) Hooks() []Hook {
	return c.hooks.DataSource
}

// ListenRecordClient is a client for the ListenRecord schema.
type ListenRecordClient struct {
	config
}

// NewListenRecordClient returns a client for the ListenRecord from the given config.
func NewListenRecordClient(c config) *ListenRecordClient {
	return &ListenRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `listenrecord.Hooks(f(g(h())))`.
func (c *ListenRecordClient) Use(hooks ...Hook) {
	c.hooks.ListenRecord = append(c.hooks.ListenRecord, hooks...)
}

// Create returns a create builder for ListenRecord.
func (c *ListenRecordClient) Create() *ListenRecordCreate {
	mutation := newListenRecordMutation(c.config, OpCreate)
	return &ListenRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ListenRecord entities.
func (c *ListenRecordClient) CreateBulk(builders ...*ListenRecordCreate) *ListenRecordCreateBulk {
	return &ListenRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ListenRecord.
func (c *ListenRecordClient) Update() *ListenRecordUpdate {
	mutation := newListenRecordMutation(c.config, OpUpdate)
	return &ListenRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ListenRecordClient) UpdateOne(lr *ListenRecord) *ListenRecordUpdateOne {
	mutation := newListenRecordMutation(c.config, OpUpdateOne, withListenRecord(lr))
	return &ListenRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ListenRecordClient) UpdateOneID(id int64) *ListenRecordUpdateOne {
	mutation := newListenRecordMutation(c.config, OpUpdateOne, withListenRecordID(id))
	return &ListenRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ListenRecord.
func (c *ListenRecordClient) Delete() *ListenRecordDelete {
	mutation := newListenRecordMutation(c.config, OpDelete)
	return &ListenRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ListenRecordClient) DeleteOne(lr *ListenRecord) *ListenRecordDeleteOne {
	return c.DeleteOneID(lr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ListenRecordClient) DeleteOneID(id int64) *ListenRecordDeleteOne {
	builder := c.Delete().Where(listenrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ListenRecordDeleteOne{builder}
}

// Query returns a query builder for ListenRecord.
func (c *ListenRecordClient) Query() *ListenRecordQuery {
	return &ListenRecordQuery{
		config: c.config,
	}
}

// Get returns a ListenRecord entity by its id.
func (c *ListenRecordClient) Get(ctx context.Context, id int64) (*ListenRecord, error) {
	return c.Query().Where(listenrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ListenRecordClient) GetX(ctx context.Context, id int64) *ListenRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ListenRecord.
func (c *ListenRecordClient) QueryUser(lr *ListenRecord) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(listenrecord.Table, listenrecord.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, listenrecord.UserTable, listenrecord.UserColumn),
		)
		fromV = sqlgraph.Neighbors(lr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ListenRecordClient) Hooks() []Hook {
	return c.hooks.ListenRecord
}

// NovelClient is a client for the Novel schema.
type NovelClient struct {
	config
}

// NewNovelClient returns a client for the Novel from the given config.
func NewNovelClient(c config) *NovelClient {
	return &NovelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novel.Hooks(f(g(h())))`.
func (c *NovelClient) Use(hooks ...Hook) {
	c.hooks.Novel = append(c.hooks.Novel, hooks...)
}

// Create returns a create builder for Novel.
func (c *NovelClient) Create() *NovelCreate {
	mutation := newNovelMutation(c.config, OpCreate)
	return &NovelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Novel entities.
func (c *NovelClient) CreateBulk(builders ...*NovelCreate) *NovelCreateBulk {
	return &NovelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Novel.
func (c *NovelClient) Update() *NovelUpdate {
	mutation := newNovelMutation(c.config, OpUpdate)
	return &NovelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelClient) UpdateOne(n *Novel) *NovelUpdateOne {
	mutation := newNovelMutation(c.config, OpUpdateOne, withNovel(n))
	return &NovelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelClient) UpdateOneID(id int64) *NovelUpdateOne {
	mutation := newNovelMutation(c.config, OpUpdateOne, withNovelID(id))
	return &NovelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Novel.
func (c *NovelClient) Delete() *NovelDelete {
	mutation := newNovelMutation(c.config, OpDelete)
	return &NovelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelClient) DeleteOne(n *Novel) *NovelDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelClient) DeleteOneID(id int64) *NovelDeleteOne {
	builder := c.Delete().Where(novel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelDeleteOne{builder}
}

// Query returns a query builder for Novel.
func (c *NovelClient) Query() *NovelQuery {
	return &NovelQuery{
		config: c.config,
	}
}

// Get returns a Novel entity by its id.
func (c *NovelClient) Get(ctx context.Context, id int64) (*Novel, error) {
	return c.Query().Where(novel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelClient) GetX(ctx context.Context, id int64) *Novel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChapters queries the chapters edge of a Novel.
func (c *NovelClient) QueryChapters(n *Novel) *NovelChapterQuery {
	query := &NovelChapterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novel.Table, novel.FieldID, id),
			sqlgraph.To(novelchapter.Table, novelchapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, novel.ChaptersTable, novel.ChaptersColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPkgs queries the pkgs edge of a Novel.
func (c *NovelClient) QueryPkgs(n *Novel) *BookPackageQuery {
	query := &BookPackageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novel.Table, novel.FieldID, id),
			sqlgraph.To(bookpackage.Table, bookpackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, novel.PkgsTable, novel.PkgsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClassify queries the classify edge of a Novel.
func (c *NovelClient) QueryClassify(n *Novel) *NovelClassifyQuery {
	query := &NovelClassifyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novel.Table, novel.FieldID, id),
			sqlgraph.To(novelclassify.Table, novelclassify.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, novel.ClassifyTable, novel.ClassifyColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelClient) Hooks() []Hook {
	return c.hooks.Novel
}

// NovelAutoBuyClient is a client for the NovelAutoBuy schema.
type NovelAutoBuyClient struct {
	config
}

// NewNovelAutoBuyClient returns a client for the NovelAutoBuy from the given config.
func NewNovelAutoBuyClient(c config) *NovelAutoBuyClient {
	return &NovelAutoBuyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelautobuy.Hooks(f(g(h())))`.
func (c *NovelAutoBuyClient) Use(hooks ...Hook) {
	c.hooks.NovelAutoBuy = append(c.hooks.NovelAutoBuy, hooks...)
}

// Create returns a create builder for NovelAutoBuy.
func (c *NovelAutoBuyClient) Create() *NovelAutoBuyCreate {
	mutation := newNovelAutoBuyMutation(c.config, OpCreate)
	return &NovelAutoBuyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelAutoBuy entities.
func (c *NovelAutoBuyClient) CreateBulk(builders ...*NovelAutoBuyCreate) *NovelAutoBuyCreateBulk {
	return &NovelAutoBuyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelAutoBuy.
func (c *NovelAutoBuyClient) Update() *NovelAutoBuyUpdate {
	mutation := newNovelAutoBuyMutation(c.config, OpUpdate)
	return &NovelAutoBuyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelAutoBuyClient) UpdateOne(nab *NovelAutoBuy) *NovelAutoBuyUpdateOne {
	mutation := newNovelAutoBuyMutation(c.config, OpUpdateOne, withNovelAutoBuy(nab))
	return &NovelAutoBuyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelAutoBuyClient) UpdateOneID(id int64) *NovelAutoBuyUpdateOne {
	mutation := newNovelAutoBuyMutation(c.config, OpUpdateOne, withNovelAutoBuyID(id))
	return &NovelAutoBuyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelAutoBuy.
func (c *NovelAutoBuyClient) Delete() *NovelAutoBuyDelete {
	mutation := newNovelAutoBuyMutation(c.config, OpDelete)
	return &NovelAutoBuyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelAutoBuyClient) DeleteOne(nab *NovelAutoBuy) *NovelAutoBuyDeleteOne {
	return c.DeleteOneID(nab.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelAutoBuyClient) DeleteOneID(id int64) *NovelAutoBuyDeleteOne {
	builder := c.Delete().Where(novelautobuy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelAutoBuyDeleteOne{builder}
}

// Query returns a query builder for NovelAutoBuy.
func (c *NovelAutoBuyClient) Query() *NovelAutoBuyQuery {
	return &NovelAutoBuyQuery{
		config: c.config,
	}
}

// Get returns a NovelAutoBuy entity by its id.
func (c *NovelAutoBuyClient) Get(ctx context.Context, id int64) (*NovelAutoBuy, error) {
	return c.Query().Where(novelautobuy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelAutoBuyClient) GetX(ctx context.Context, id int64) *NovelAutoBuy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a NovelAutoBuy.
func (c *NovelAutoBuyClient) QueryUser(nab *NovelAutoBuy) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nab.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelautobuy.Table, novelautobuy.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, novelautobuy.UserTable, novelautobuy.UserColumn),
		)
		fromV = sqlgraph.Neighbors(nab.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelAutoBuyClient) Hooks() []Hook {
	return c.hooks.NovelAutoBuy
}

// NovelBookshelfClient is a client for the NovelBookshelf schema.
type NovelBookshelfClient struct {
	config
}

// NewNovelBookshelfClient returns a client for the NovelBookshelf from the given config.
func NewNovelBookshelfClient(c config) *NovelBookshelfClient {
	return &NovelBookshelfClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelbookshelf.Hooks(f(g(h())))`.
func (c *NovelBookshelfClient) Use(hooks ...Hook) {
	c.hooks.NovelBookshelf = append(c.hooks.NovelBookshelf, hooks...)
}

// Create returns a create builder for NovelBookshelf.
func (c *NovelBookshelfClient) Create() *NovelBookshelfCreate {
	mutation := newNovelBookshelfMutation(c.config, OpCreate)
	return &NovelBookshelfCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelBookshelf entities.
func (c *NovelBookshelfClient) CreateBulk(builders ...*NovelBookshelfCreate) *NovelBookshelfCreateBulk {
	return &NovelBookshelfCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelBookshelf.
func (c *NovelBookshelfClient) Update() *NovelBookshelfUpdate {
	mutation := newNovelBookshelfMutation(c.config, OpUpdate)
	return &NovelBookshelfUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelBookshelfClient) UpdateOne(nb *NovelBookshelf) *NovelBookshelfUpdateOne {
	mutation := newNovelBookshelfMutation(c.config, OpUpdateOne, withNovelBookshelf(nb))
	return &NovelBookshelfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelBookshelfClient) UpdateOneID(id int64) *NovelBookshelfUpdateOne {
	mutation := newNovelBookshelfMutation(c.config, OpUpdateOne, withNovelBookshelfID(id))
	return &NovelBookshelfUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelBookshelf.
func (c *NovelBookshelfClient) Delete() *NovelBookshelfDelete {
	mutation := newNovelBookshelfMutation(c.config, OpDelete)
	return &NovelBookshelfDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelBookshelfClient) DeleteOne(nb *NovelBookshelf) *NovelBookshelfDeleteOne {
	return c.DeleteOneID(nb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelBookshelfClient) DeleteOneID(id int64) *NovelBookshelfDeleteOne {
	builder := c.Delete().Where(novelbookshelf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelBookshelfDeleteOne{builder}
}

// Query returns a query builder for NovelBookshelf.
func (c *NovelBookshelfClient) Query() *NovelBookshelfQuery {
	return &NovelBookshelfQuery{
		config: c.config,
	}
}

// Get returns a NovelBookshelf entity by its id.
func (c *NovelBookshelfClient) Get(ctx context.Context, id int64) (*NovelBookshelf, error) {
	return c.Query().Where(novelbookshelf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelBookshelfClient) GetX(ctx context.Context, id int64) *NovelBookshelf {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a NovelBookshelf.
func (c *NovelBookshelfClient) QueryUser(nb *NovelBookshelf) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelbookshelf.Table, novelbookshelf.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, novelbookshelf.UserTable, novelbookshelf.UserColumn),
		)
		fromV = sqlgraph.Neighbors(nb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelBookshelfClient) Hooks() []Hook {
	return c.hooks.NovelBookshelf
}

// NovelBuyChapterRecordClient is a client for the NovelBuyChapterRecord schema.
type NovelBuyChapterRecordClient struct {
	config
}

// NewNovelBuyChapterRecordClient returns a client for the NovelBuyChapterRecord from the given config.
func NewNovelBuyChapterRecordClient(c config) *NovelBuyChapterRecordClient {
	return &NovelBuyChapterRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelbuychapterrecord.Hooks(f(g(h())))`.
func (c *NovelBuyChapterRecordClient) Use(hooks ...Hook) {
	c.hooks.NovelBuyChapterRecord = append(c.hooks.NovelBuyChapterRecord, hooks...)
}

// Create returns a create builder for NovelBuyChapterRecord.
func (c *NovelBuyChapterRecordClient) Create() *NovelBuyChapterRecordCreate {
	mutation := newNovelBuyChapterRecordMutation(c.config, OpCreate)
	return &NovelBuyChapterRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelBuyChapterRecord entities.
func (c *NovelBuyChapterRecordClient) CreateBulk(builders ...*NovelBuyChapterRecordCreate) *NovelBuyChapterRecordCreateBulk {
	return &NovelBuyChapterRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelBuyChapterRecord.
func (c *NovelBuyChapterRecordClient) Update() *NovelBuyChapterRecordUpdate {
	mutation := newNovelBuyChapterRecordMutation(c.config, OpUpdate)
	return &NovelBuyChapterRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelBuyChapterRecordClient) UpdateOne(nbcr *NovelBuyChapterRecord) *NovelBuyChapterRecordUpdateOne {
	mutation := newNovelBuyChapterRecordMutation(c.config, OpUpdateOne, withNovelBuyChapterRecord(nbcr))
	return &NovelBuyChapterRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelBuyChapterRecordClient) UpdateOneID(id int64) *NovelBuyChapterRecordUpdateOne {
	mutation := newNovelBuyChapterRecordMutation(c.config, OpUpdateOne, withNovelBuyChapterRecordID(id))
	return &NovelBuyChapterRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelBuyChapterRecord.
func (c *NovelBuyChapterRecordClient) Delete() *NovelBuyChapterRecordDelete {
	mutation := newNovelBuyChapterRecordMutation(c.config, OpDelete)
	return &NovelBuyChapterRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelBuyChapterRecordClient) DeleteOne(nbcr *NovelBuyChapterRecord) *NovelBuyChapterRecordDeleteOne {
	return c.DeleteOneID(nbcr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelBuyChapterRecordClient) DeleteOneID(id int64) *NovelBuyChapterRecordDeleteOne {
	builder := c.Delete().Where(novelbuychapterrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelBuyChapterRecordDeleteOne{builder}
}

// Query returns a query builder for NovelBuyChapterRecord.
func (c *NovelBuyChapterRecordClient) Query() *NovelBuyChapterRecordQuery {
	return &NovelBuyChapterRecordQuery{
		config: c.config,
	}
}

// Get returns a NovelBuyChapterRecord entity by its id.
func (c *NovelBuyChapterRecordClient) Get(ctx context.Context, id int64) (*NovelBuyChapterRecord, error) {
	return c.Query().Where(novelbuychapterrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelBuyChapterRecordClient) GetX(ctx context.Context, id int64) *NovelBuyChapterRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a NovelBuyChapterRecord.
func (c *NovelBuyChapterRecordClient) QueryUser(nbcr *NovelBuyChapterRecord) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nbcr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelbuychapterrecord.Table, novelbuychapterrecord.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, novelbuychapterrecord.UserTable, novelbuychapterrecord.UserColumn),
		)
		fromV = sqlgraph.Neighbors(nbcr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelBuyChapterRecordClient) Hooks() []Hook {
	return c.hooks.NovelBuyChapterRecord
}

// NovelBuyRecordClient is a client for the NovelBuyRecord schema.
type NovelBuyRecordClient struct {
	config
}

// NewNovelBuyRecordClient returns a client for the NovelBuyRecord from the given config.
func NewNovelBuyRecordClient(c config) *NovelBuyRecordClient {
	return &NovelBuyRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelbuyrecord.Hooks(f(g(h())))`.
func (c *NovelBuyRecordClient) Use(hooks ...Hook) {
	c.hooks.NovelBuyRecord = append(c.hooks.NovelBuyRecord, hooks...)
}

// Create returns a create builder for NovelBuyRecord.
func (c *NovelBuyRecordClient) Create() *NovelBuyRecordCreate {
	mutation := newNovelBuyRecordMutation(c.config, OpCreate)
	return &NovelBuyRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelBuyRecord entities.
func (c *NovelBuyRecordClient) CreateBulk(builders ...*NovelBuyRecordCreate) *NovelBuyRecordCreateBulk {
	return &NovelBuyRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelBuyRecord.
func (c *NovelBuyRecordClient) Update() *NovelBuyRecordUpdate {
	mutation := newNovelBuyRecordMutation(c.config, OpUpdate)
	return &NovelBuyRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelBuyRecordClient) UpdateOne(nbr *NovelBuyRecord) *NovelBuyRecordUpdateOne {
	mutation := newNovelBuyRecordMutation(c.config, OpUpdateOne, withNovelBuyRecord(nbr))
	return &NovelBuyRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelBuyRecordClient) UpdateOneID(id int64) *NovelBuyRecordUpdateOne {
	mutation := newNovelBuyRecordMutation(c.config, OpUpdateOne, withNovelBuyRecordID(id))
	return &NovelBuyRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelBuyRecord.
func (c *NovelBuyRecordClient) Delete() *NovelBuyRecordDelete {
	mutation := newNovelBuyRecordMutation(c.config, OpDelete)
	return &NovelBuyRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelBuyRecordClient) DeleteOne(nbr *NovelBuyRecord) *NovelBuyRecordDeleteOne {
	return c.DeleteOneID(nbr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelBuyRecordClient) DeleteOneID(id int64) *NovelBuyRecordDeleteOne {
	builder := c.Delete().Where(novelbuyrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelBuyRecordDeleteOne{builder}
}

// Query returns a query builder for NovelBuyRecord.
func (c *NovelBuyRecordClient) Query() *NovelBuyRecordQuery {
	return &NovelBuyRecordQuery{
		config: c.config,
	}
}

// Get returns a NovelBuyRecord entity by its id.
func (c *NovelBuyRecordClient) Get(ctx context.Context, id int64) (*NovelBuyRecord, error) {
	return c.Query().Where(novelbuyrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelBuyRecordClient) GetX(ctx context.Context, id int64) *NovelBuyRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a NovelBuyRecord.
func (c *NovelBuyRecordClient) QueryUser(nbr *NovelBuyRecord) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nbr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelbuyrecord.Table, novelbuyrecord.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, novelbuyrecord.UserTable, novelbuyrecord.UserColumn),
		)
		fromV = sqlgraph.Neighbors(nbr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelBuyRecordClient) Hooks() []Hook {
	return c.hooks.NovelBuyRecord
}

// NovelChapterClient is a client for the NovelChapter schema.
type NovelChapterClient struct {
	config
}

// NewNovelChapterClient returns a client for the NovelChapter from the given config.
func NewNovelChapterClient(c config) *NovelChapterClient {
	return &NovelChapterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelchapter.Hooks(f(g(h())))`.
func (c *NovelChapterClient) Use(hooks ...Hook) {
	c.hooks.NovelChapter = append(c.hooks.NovelChapter, hooks...)
}

// Create returns a create builder for NovelChapter.
func (c *NovelChapterClient) Create() *NovelChapterCreate {
	mutation := newNovelChapterMutation(c.config, OpCreate)
	return &NovelChapterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelChapter entities.
func (c *NovelChapterClient) CreateBulk(builders ...*NovelChapterCreate) *NovelChapterCreateBulk {
	return &NovelChapterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelChapter.
func (c *NovelChapterClient) Update() *NovelChapterUpdate {
	mutation := newNovelChapterMutation(c.config, OpUpdate)
	return &NovelChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelChapterClient) UpdateOne(nc *NovelChapter) *NovelChapterUpdateOne {
	mutation := newNovelChapterMutation(c.config, OpUpdateOne, withNovelChapter(nc))
	return &NovelChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelChapterClient) UpdateOneID(id int64) *NovelChapterUpdateOne {
	mutation := newNovelChapterMutation(c.config, OpUpdateOne, withNovelChapterID(id))
	return &NovelChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelChapter.
func (c *NovelChapterClient) Delete() *NovelChapterDelete {
	mutation := newNovelChapterMutation(c.config, OpDelete)
	return &NovelChapterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelChapterClient) DeleteOne(nc *NovelChapter) *NovelChapterDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelChapterClient) DeleteOneID(id int64) *NovelChapterDeleteOne {
	builder := c.Delete().Where(novelchapter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelChapterDeleteOne{builder}
}

// Query returns a query builder for NovelChapter.
func (c *NovelChapterClient) Query() *NovelChapterQuery {
	return &NovelChapterQuery{
		config: c.config,
	}
}

// Get returns a NovelChapter entity by its id.
func (c *NovelChapterClient) Get(ctx context.Context, id int64) (*NovelChapter, error) {
	return c.Query().Where(novelchapter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelChapterClient) GetX(ctx context.Context, id int64) *NovelChapter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrev queries the prev edge of a NovelChapter.
func (c *NovelChapterClient) QueryPrev(nc *NovelChapter) *NovelChapterQuery {
	query := &NovelChapterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelchapter.Table, novelchapter.FieldID, id),
			sqlgraph.To(novelchapter.Table, novelchapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, novelchapter.PrevTable, novelchapter.PrevColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNext queries the next edge of a NovelChapter.
func (c *NovelChapterClient) QueryNext(nc *NovelChapter) *NovelChapterQuery {
	query := &NovelChapterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelchapter.Table, novelchapter.FieldID, id),
			sqlgraph.To(novelchapter.Table, novelchapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, novelchapter.NextTable, novelchapter.NextColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNovel queries the novel edge of a NovelChapter.
func (c *NovelChapterClient) QueryNovel(nc *NovelChapter) *NovelQuery {
	query := &NovelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelchapter.Table, novelchapter.FieldID, id),
			sqlgraph.To(novel.Table, novel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, novelchapter.NovelTable, novelchapter.NovelColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelChapterClient) Hooks() []Hook {
	return c.hooks.NovelChapter
}

// NovelClassifyClient is a client for the NovelClassify schema.
type NovelClassifyClient struct {
	config
}

// NewNovelClassifyClient returns a client for the NovelClassify from the given config.
func NewNovelClassifyClient(c config) *NovelClassifyClient {
	return &NovelClassifyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelclassify.Hooks(f(g(h())))`.
func (c *NovelClassifyClient) Use(hooks ...Hook) {
	c.hooks.NovelClassify = append(c.hooks.NovelClassify, hooks...)
}

// Create returns a create builder for NovelClassify.
func (c *NovelClassifyClient) Create() *NovelClassifyCreate {
	mutation := newNovelClassifyMutation(c.config, OpCreate)
	return &NovelClassifyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelClassify entities.
func (c *NovelClassifyClient) CreateBulk(builders ...*NovelClassifyCreate) *NovelClassifyCreateBulk {
	return &NovelClassifyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelClassify.
func (c *NovelClassifyClient) Update() *NovelClassifyUpdate {
	mutation := newNovelClassifyMutation(c.config, OpUpdate)
	return &NovelClassifyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelClassifyClient) UpdateOne(nc *NovelClassify) *NovelClassifyUpdateOne {
	mutation := newNovelClassifyMutation(c.config, OpUpdateOne, withNovelClassify(nc))
	return &NovelClassifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelClassifyClient) UpdateOneID(id int64) *NovelClassifyUpdateOne {
	mutation := newNovelClassifyMutation(c.config, OpUpdateOne, withNovelClassifyID(id))
	return &NovelClassifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelClassify.
func (c *NovelClassifyClient) Delete() *NovelClassifyDelete {
	mutation := newNovelClassifyMutation(c.config, OpDelete)
	return &NovelClassifyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelClassifyClient) DeleteOne(nc *NovelClassify) *NovelClassifyDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelClassifyClient) DeleteOneID(id int64) *NovelClassifyDeleteOne {
	builder := c.Delete().Where(novelclassify.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelClassifyDeleteOne{builder}
}

// Query returns a query builder for NovelClassify.
func (c *NovelClassifyClient) Query() *NovelClassifyQuery {
	return &NovelClassifyQuery{
		config: c.config,
	}
}

// Get returns a NovelClassify entity by its id.
func (c *NovelClassifyClient) Get(ctx context.Context, id int64) (*NovelClassify, error) {
	return c.Query().Where(novelclassify.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelClassifyClient) GetX(ctx context.Context, id int64) *NovelClassify {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNovels queries the novels edge of a NovelClassify.
func (c *NovelClassifyClient) QueryNovels(nc *NovelClassify) *NovelQuery {
	query := &NovelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelclassify.Table, novelclassify.FieldID, id),
			sqlgraph.To(novel.Table, novel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, novelclassify.NovelsTable, novelclassify.NovelsColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelClassifyClient) Hooks() []Hook {
	return c.hooks.NovelClassify
}

// NovelCommentClient is a client for the NovelComment schema.
type NovelCommentClient struct {
	config
}

// NewNovelCommentClient returns a client for the NovelComment from the given config.
func NewNovelCommentClient(c config) *NovelCommentClient {
	return &NovelCommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelcomment.Hooks(f(g(h())))`.
func (c *NovelCommentClient) Use(hooks ...Hook) {
	c.hooks.NovelComment = append(c.hooks.NovelComment, hooks...)
}

// Create returns a create builder for NovelComment.
func (c *NovelCommentClient) Create() *NovelCommentCreate {
	mutation := newNovelCommentMutation(c.config, OpCreate)
	return &NovelCommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelComment entities.
func (c *NovelCommentClient) CreateBulk(builders ...*NovelCommentCreate) *NovelCommentCreateBulk {
	return &NovelCommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelComment.
func (c *NovelCommentClient) Update() *NovelCommentUpdate {
	mutation := newNovelCommentMutation(c.config, OpUpdate)
	return &NovelCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelCommentClient) UpdateOne(nc *NovelComment) *NovelCommentUpdateOne {
	mutation := newNovelCommentMutation(c.config, OpUpdateOne, withNovelComment(nc))
	return &NovelCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelCommentClient) UpdateOneID(id int64) *NovelCommentUpdateOne {
	mutation := newNovelCommentMutation(c.config, OpUpdateOne, withNovelCommentID(id))
	return &NovelCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelComment.
func (c *NovelCommentClient) Delete() *NovelCommentDelete {
	mutation := newNovelCommentMutation(c.config, OpDelete)
	return &NovelCommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelCommentClient) DeleteOne(nc *NovelComment) *NovelCommentDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelCommentClient) DeleteOneID(id int64) *NovelCommentDeleteOne {
	builder := c.Delete().Where(novelcomment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelCommentDeleteOne{builder}
}

// Query returns a query builder for NovelComment.
func (c *NovelCommentClient) Query() *NovelCommentQuery {
	return &NovelCommentQuery{
		config: c.config,
	}
}

// Get returns a NovelComment entity by its id.
func (c *NovelCommentClient) Get(ctx context.Context, id int64) (*NovelComment, error) {
	return c.Query().Where(novelcomment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelCommentClient) GetX(ctx context.Context, id int64) *NovelComment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a NovelComment.
func (c *NovelCommentClient) QueryParent(nc *NovelComment) *NovelCommentQuery {
	query := &NovelCommentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelcomment.Table, novelcomment.FieldID, id),
			sqlgraph.To(novelcomment.Table, novelcomment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, novelcomment.ParentTable, novelcomment.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildes queries the childes edge of a NovelComment.
func (c *NovelCommentClient) QueryChildes(nc *NovelComment) *NovelCommentQuery {
	query := &NovelCommentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelcomment.Table, novelcomment.FieldID, id),
			sqlgraph.To(novelcomment.Table, novelcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, novelcomment.ChildesTable, novelcomment.ChildesColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a NovelComment.
func (c *NovelCommentClient) QueryUser(nc *NovelComment) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(novelcomment.Table, novelcomment.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, novelcomment.UserTable, novelcomment.UserColumn),
		)
		fromV = sqlgraph.Neighbors(nc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NovelCommentClient) Hooks() []Hook {
	return c.hooks.NovelComment
}

// NovelConsumeClient is a client for the NovelConsume schema.
type NovelConsumeClient struct {
	config
}

// NewNovelConsumeClient returns a client for the NovelConsume from the given config.
func NewNovelConsumeClient(c config) *NovelConsumeClient {
	return &NovelConsumeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelconsume.Hooks(f(g(h())))`.
func (c *NovelConsumeClient) Use(hooks ...Hook) {
	c.hooks.NovelConsume = append(c.hooks.NovelConsume, hooks...)
}

// Create returns a create builder for NovelConsume.
func (c *NovelConsumeClient) Create() *NovelConsumeCreate {
	mutation := newNovelConsumeMutation(c.config, OpCreate)
	return &NovelConsumeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelConsume entities.
func (c *NovelConsumeClient) CreateBulk(builders ...*NovelConsumeCreate) *NovelConsumeCreateBulk {
	return &NovelConsumeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelConsume.
func (c *NovelConsumeClient) Update() *NovelConsumeUpdate {
	mutation := newNovelConsumeMutation(c.config, OpUpdate)
	return &NovelConsumeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelConsumeClient) UpdateOne(nc *NovelConsume) *NovelConsumeUpdateOne {
	mutation := newNovelConsumeMutation(c.config, OpUpdateOne, withNovelConsume(nc))
	return &NovelConsumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelConsumeClient) UpdateOneID(id int64) *NovelConsumeUpdateOne {
	mutation := newNovelConsumeMutation(c.config, OpUpdateOne, withNovelConsumeID(id))
	return &NovelConsumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelConsume.
func (c *NovelConsumeClient) Delete() *NovelConsumeDelete {
	mutation := newNovelConsumeMutation(c.config, OpDelete)
	return &NovelConsumeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelConsumeClient) DeleteOne(nc *NovelConsume) *NovelConsumeDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelConsumeClient) DeleteOneID(id int64) *NovelConsumeDeleteOne {
	builder := c.Delete().Where(novelconsume.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelConsumeDeleteOne{builder}
}

// Query returns a query builder for NovelConsume.
func (c *NovelConsumeClient) Query() *NovelConsumeQuery {
	return &NovelConsumeQuery{
		config: c.config,
	}
}

// Get returns a NovelConsume entity by its id.
func (c *NovelConsumeClient) Get(ctx context.Context, id int64) (*NovelConsume, error) {
	return c.Query().Where(novelconsume.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelConsumeClient) GetX(ctx context.Context, id int64) *NovelConsume {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NovelConsumeClient) Hooks() []Hook {
	return c.hooks.NovelConsume
}

// NovelMsgClient is a client for the NovelMsg schema.
type NovelMsgClient struct {
	config
}

// NewNovelMsgClient returns a client for the NovelMsg from the given config.
func NewNovelMsgClient(c config) *NovelMsgClient {
	return &NovelMsgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelmsg.Hooks(f(g(h())))`.
func (c *NovelMsgClient) Use(hooks ...Hook) {
	c.hooks.NovelMsg = append(c.hooks.NovelMsg, hooks...)
}

// Create returns a create builder for NovelMsg.
func (c *NovelMsgClient) Create() *NovelMsgCreate {
	mutation := newNovelMsgMutation(c.config, OpCreate)
	return &NovelMsgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelMsg entities.
func (c *NovelMsgClient) CreateBulk(builders ...*NovelMsgCreate) *NovelMsgCreateBulk {
	return &NovelMsgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelMsg.
func (c *NovelMsgClient) Update() *NovelMsgUpdate {
	mutation := newNovelMsgMutation(c.config, OpUpdate)
	return &NovelMsgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelMsgClient) UpdateOne(nm *NovelMsg) *NovelMsgUpdateOne {
	mutation := newNovelMsgMutation(c.config, OpUpdateOne, withNovelMsg(nm))
	return &NovelMsgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelMsgClient) UpdateOneID(id int64) *NovelMsgUpdateOne {
	mutation := newNovelMsgMutation(c.config, OpUpdateOne, withNovelMsgID(id))
	return &NovelMsgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelMsg.
func (c *NovelMsgClient) Delete() *NovelMsgDelete {
	mutation := newNovelMsgMutation(c.config, OpDelete)
	return &NovelMsgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelMsgClient) DeleteOne(nm *NovelMsg) *NovelMsgDeleteOne {
	return c.DeleteOneID(nm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelMsgClient) DeleteOneID(id int64) *NovelMsgDeleteOne {
	builder := c.Delete().Where(novelmsg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelMsgDeleteOne{builder}
}

// Query returns a query builder for NovelMsg.
func (c *NovelMsgClient) Query() *NovelMsgQuery {
	return &NovelMsgQuery{
		config: c.config,
	}
}

// Get returns a NovelMsg entity by its id.
func (c *NovelMsgClient) Get(ctx context.Context, id int64) (*NovelMsg, error) {
	return c.Query().Where(novelmsg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelMsgClient) GetX(ctx context.Context, id int64) *NovelMsg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NovelMsgClient) Hooks() []Hook {
	return c.hooks.NovelMsg
}

// PayOrderClient is a client for the PayOrder schema.
type PayOrderClient struct {
	config
}

// NewPayOrderClient returns a client for the PayOrder from the given config.
func NewPayOrderClient(c config) *PayOrderClient {
	return &PayOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payorder.Hooks(f(g(h())))`.
func (c *PayOrderClient) Use(hooks ...Hook) {
	c.hooks.PayOrder = append(c.hooks.PayOrder, hooks...)
}

// Create returns a create builder for PayOrder.
func (c *PayOrderClient) Create() *PayOrderCreate {
	mutation := newPayOrderMutation(c.config, OpCreate)
	return &PayOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PayOrder entities.
func (c *PayOrderClient) CreateBulk(builders ...*PayOrderCreate) *PayOrderCreateBulk {
	return &PayOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PayOrder.
func (c *PayOrderClient) Update() *PayOrderUpdate {
	mutation := newPayOrderMutation(c.config, OpUpdate)
	return &PayOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PayOrderClient) UpdateOne(po *PayOrder) *PayOrderUpdateOne {
	mutation := newPayOrderMutation(c.config, OpUpdateOne, withPayOrder(po))
	return &PayOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PayOrderClient) UpdateOneID(id int64) *PayOrderUpdateOne {
	mutation := newPayOrderMutation(c.config, OpUpdateOne, withPayOrderID(id))
	return &PayOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PayOrder.
func (c *PayOrderClient) Delete() *PayOrderDelete {
	mutation := newPayOrderMutation(c.config, OpDelete)
	return &PayOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PayOrderClient) DeleteOne(po *PayOrder) *PayOrderDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PayOrderClient) DeleteOneID(id int64) *PayOrderDeleteOne {
	builder := c.Delete().Where(payorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PayOrderDeleteOne{builder}
}

// Query returns a query builder for PayOrder.
func (c *PayOrderClient) Query() *PayOrderQuery {
	return &PayOrderQuery{
		config: c.config,
	}
}

// Get returns a PayOrder entity by its id.
func (c *PayOrderClient) Get(ctx context.Context, id int64) (*PayOrder, error) {
	return c.Query().Where(payorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PayOrderClient) GetX(ctx context.Context, id int64) *PayOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PayOrder.
func (c *PayOrderClient) QueryUser(po *PayOrder) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payorder.Table, payorder.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payorder.UserTable, payorder.UserColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a PayOrder.
func (c *PayOrderClient) QueryChannel(po *PayOrder) *AdChannelQuery {
	query := &AdChannelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payorder.Table, payorder.FieldID, id),
			sqlgraph.To(adchannel.Table, adchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payorder.ChannelTable, payorder.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgreement queries the agreement edge of a PayOrder.
func (c *PayOrderClient) QueryAgreement(po *PayOrder) *AgreementLogQuery {
	query := &AgreementLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payorder.Table, payorder.FieldID, id),
			sqlgraph.To(agreementlog.Table, agreementlog.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payorder.AgreementTable, payorder.AgreementColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PayOrderClient) Hooks() []Hook {
	return c.hooks.PayOrder
}

// SocialUserClient is a client for the SocialUser schema.
type SocialUserClient struct {
	config
}

// NewSocialUserClient returns a client for the SocialUser from the given config.
func NewSocialUserClient(c config) *SocialUserClient {
	return &SocialUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `socialuser.Hooks(f(g(h())))`.
func (c *SocialUserClient) Use(hooks ...Hook) {
	c.hooks.SocialUser = append(c.hooks.SocialUser, hooks...)
}

// Create returns a create builder for SocialUser.
func (c *SocialUserClient) Create() *SocialUserCreate {
	mutation := newSocialUserMutation(c.config, OpCreate)
	return &SocialUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SocialUser entities.
func (c *SocialUserClient) CreateBulk(builders ...*SocialUserCreate) *SocialUserCreateBulk {
	return &SocialUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SocialUser.
func (c *SocialUserClient) Update() *SocialUserUpdate {
	mutation := newSocialUserMutation(c.config, OpUpdate)
	return &SocialUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SocialUserClient) UpdateOne(su *SocialUser) *SocialUserUpdateOne {
	mutation := newSocialUserMutation(c.config, OpUpdateOne, withSocialUser(su))
	return &SocialUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SocialUserClient) UpdateOneID(id int64) *SocialUserUpdateOne {
	mutation := newSocialUserMutation(c.config, OpUpdateOne, withSocialUserID(id))
	return &SocialUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SocialUser.
func (c *SocialUserClient) Delete() *SocialUserDelete {
	mutation := newSocialUserMutation(c.config, OpDelete)
	return &SocialUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SocialUserClient) DeleteOne(su *SocialUser) *SocialUserDeleteOne {
	return c.DeleteOneID(su.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SocialUserClient) DeleteOneID(id int64) *SocialUserDeleteOne {
	builder := c.Delete().Where(socialuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SocialUserDeleteOne{builder}
}

// Query returns a query builder for SocialUser.
func (c *SocialUserClient) Query() *SocialUserQuery {
	return &SocialUserQuery{
		config: c.config,
	}
}

// Get returns a SocialUser entity by its id.
func (c *SocialUserClient) Get(ctx context.Context, id int64) (*SocialUser, error) {
	return c.Query().Where(socialuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SocialUserClient) GetX(ctx context.Context, id int64) *SocialUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTasks queries the tasks edge of a SocialUser.
func (c *SocialUserClient) QueryTasks(su *SocialUser) *TaskLogQuery {
	query := &TaskLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(tasklog.Table, tasklog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.TasksTable, socialuser.TasksColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEvents queries the events edge of a SocialUser.
func (c *SocialUserClient) QueryEvents(su *SocialUser) *UserEventQuery {
	query := &UserEventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(userevent.Table, userevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.EventsTable, socialuser.EventsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryListenRecords queries the listenRecords edge of a SocialUser.
func (c *SocialUserClient) QueryListenRecords(su *SocialUser) *ListenRecordQuery {
	query := &ListenRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(listenrecord.Table, listenrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.ListenRecordsTable, socialuser.ListenRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAds queries the ads edge of a SocialUser.
func (c *SocialUserClient) QueryAds(su *SocialUser) *AdChangeLogQuery {
	query := &AdChangeLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(adchangelog.Table, adchangelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.AdsTable, socialuser.AdsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBookshelves queries the bookshelves edge of a SocialUser.
func (c *SocialUserClient) QueryBookshelves(su *SocialUser) *NovelBookshelfQuery {
	query := &NovelBookshelfQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(novelbookshelf.Table, novelbookshelf.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.BookshelvesTable, socialuser.BookshelvesColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAutoBuyNovels queries the autoBuyNovels edge of a SocialUser.
func (c *SocialUserClient) QueryAutoBuyNovels(su *SocialUser) *NovelAutoBuyQuery {
	query := &NovelAutoBuyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(novelautobuy.Table, novelautobuy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.AutoBuyNovelsTable, socialuser.AutoBuyNovelsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComments queries the comments edge of a SocialUser.
func (c *SocialUserClient) QueryComments(su *SocialUser) *NovelCommentQuery {
	query := &NovelCommentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(novelcomment.Table, novelcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.CommentsTable, socialuser.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMsgs queries the msgs edge of a SocialUser.
func (c *SocialUserClient) QueryMsgs(su *SocialUser) *UserMsgQuery {
	query := &UserMsgQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(usermsg.Table, usermsg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.MsgsTable, socialuser.MsgsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a SocialUser.
func (c *SocialUserClient) QueryOrders(su *SocialUser) *PayOrderQuery {
	query := &PayOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(payorder.Table, payorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.OrdersTable, socialuser.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVips queries the vips edge of a SocialUser.
func (c *SocialUserClient) QueryVips(su *SocialUser) *VipUserQuery {
	query := &VipUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(vipuser.Table, vipuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.VipsTable, socialuser.VipsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBalances queries the balances edge of a SocialUser.
func (c *SocialUserClient) QueryBalances(su *SocialUser) *AmBalanceQuery {
	query := &AmBalanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(ambalance.Table, ambalance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.BalancesTable, socialuser.BalancesColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssetLogs queries the assetLogs edge of a SocialUser.
func (c *SocialUserClient) QueryAssetLogs(su *SocialUser) *AssetChangeLogQuery {
	query := &AssetChangeLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(assetchangelog.Table, assetchangelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.AssetLogsTable, socialuser.AssetLogsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBuyChapterRecords queries the buyChapterRecords edge of a SocialUser.
func (c *SocialUserClient) QueryBuyChapterRecords(su *SocialUser) *NovelBuyChapterRecordQuery {
	query := &NovelBuyChapterRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(novelbuychapterrecord.Table, novelbuychapterrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.BuyChapterRecordsTable, socialuser.BuyChapterRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBuyNovelRecords queries the buyNovelRecords edge of a SocialUser.
func (c *SocialUserClient) QueryBuyNovelRecords(su *SocialUser) *NovelBuyRecordQuery {
	query := &NovelBuyRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(novelbuyrecord.Table, novelbuyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.BuyNovelRecordsTable, socialuser.BuyNovelRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a SocialUser.
func (c *SocialUserClient) QueryChannel(su *SocialUser) *AdChannelQuery {
	query := &AdChannelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, id),
			sqlgraph.To(adchannel.Table, adchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, socialuser.ChannelTable, socialuser.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SocialUserClient) Hooks() []Hook {
	return c.hooks.SocialUser
}

// TaskLogClient is a client for the TaskLog schema.
type TaskLogClient struct {
	config
}

// NewTaskLogClient returns a client for the TaskLog from the given config.
func NewTaskLogClient(c config) *TaskLogClient {
	return &TaskLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tasklog.Hooks(f(g(h())))`.
func (c *TaskLogClient) Use(hooks ...Hook) {
	c.hooks.TaskLog = append(c.hooks.TaskLog, hooks...)
}

// Create returns a create builder for TaskLog.
func (c *TaskLogClient) Create() *TaskLogCreate {
	mutation := newTaskLogMutation(c.config, OpCreate)
	return &TaskLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskLog entities.
func (c *TaskLogClient) CreateBulk(builders ...*TaskLogCreate) *TaskLogCreateBulk {
	return &TaskLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskLog.
func (c *TaskLogClient) Update() *TaskLogUpdate {
	mutation := newTaskLogMutation(c.config, OpUpdate)
	return &TaskLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskLogClient) UpdateOne(tl *TaskLog) *TaskLogUpdateOne {
	mutation := newTaskLogMutation(c.config, OpUpdateOne, withTaskLog(tl))
	return &TaskLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskLogClient) UpdateOneID(id int64) *TaskLogUpdateOne {
	mutation := newTaskLogMutation(c.config, OpUpdateOne, withTaskLogID(id))
	return &TaskLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskLog.
func (c *TaskLogClient) Delete() *TaskLogDelete {
	mutation := newTaskLogMutation(c.config, OpDelete)
	return &TaskLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskLogClient) DeleteOne(tl *TaskLog) *TaskLogDeleteOne {
	return c.DeleteOneID(tl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskLogClient) DeleteOneID(id int64) *TaskLogDeleteOne {
	builder := c.Delete().Where(tasklog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskLogDeleteOne{builder}
}

// Query returns a query builder for TaskLog.
func (c *TaskLogClient) Query() *TaskLogQuery {
	return &TaskLogQuery{
		config: c.config,
	}
}

// Get returns a TaskLog entity by its id.
func (c *TaskLogClient) Get(ctx context.Context, id int64) (*TaskLog, error) {
	return c.Query().Where(tasklog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskLogClient) GetX(ctx context.Context, id int64) *TaskLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a TaskLog.
func (c *TaskLogClient) QueryUser(tl *TaskLog) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tasklog.Table, tasklog.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tasklog.UserTable, tasklog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskLogClient) Hooks() []Hook {
	return c.hooks.TaskLog
}

// UserEventClient is a client for the UserEvent schema.
type UserEventClient struct {
	config
}

// NewUserEventClient returns a client for the UserEvent from the given config.
func NewUserEventClient(c config) *UserEventClient {
	return &UserEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userevent.Hooks(f(g(h())))`.
func (c *UserEventClient) Use(hooks ...Hook) {
	c.hooks.UserEvent = append(c.hooks.UserEvent, hooks...)
}

// Create returns a create builder for UserEvent.
func (c *UserEventClient) Create() *UserEventCreate {
	mutation := newUserEventMutation(c.config, OpCreate)
	return &UserEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserEvent entities.
func (c *UserEventClient) CreateBulk(builders ...*UserEventCreate) *UserEventCreateBulk {
	return &UserEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserEvent.
func (c *UserEventClient) Update() *UserEventUpdate {
	mutation := newUserEventMutation(c.config, OpUpdate)
	return &UserEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserEventClient) UpdateOne(ue *UserEvent) *UserEventUpdateOne {
	mutation := newUserEventMutation(c.config, OpUpdateOne, withUserEvent(ue))
	return &UserEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserEventClient) UpdateOneID(id int64) *UserEventUpdateOne {
	mutation := newUserEventMutation(c.config, OpUpdateOne, withUserEventID(id))
	return &UserEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserEvent.
func (c *UserEventClient) Delete() *UserEventDelete {
	mutation := newUserEventMutation(c.config, OpDelete)
	return &UserEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserEventClient) DeleteOne(ue *UserEvent) *UserEventDeleteOne {
	return c.DeleteOneID(ue.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserEventClient) DeleteOneID(id int64) *UserEventDeleteOne {
	builder := c.Delete().Where(userevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserEventDeleteOne{builder}
}

// Query returns a query builder for UserEvent.
func (c *UserEventClient) Query() *UserEventQuery {
	return &UserEventQuery{
		config: c.config,
	}
}

// Get returns a UserEvent entity by its id.
func (c *UserEventClient) Get(ctx context.Context, id int64) (*UserEvent, error) {
	return c.Query().Where(userevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserEventClient) GetX(ctx context.Context, id int64) *UserEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserEvent.
func (c *UserEventClient) QueryUser(ue *UserEvent) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ue.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userevent.Table, userevent.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userevent.UserTable, userevent.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ue.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserEventClient) Hooks() []Hook {
	return c.hooks.UserEvent
}

// UserMsgClient is a client for the UserMsg schema.
type UserMsgClient struct {
	config
}

// NewUserMsgClient returns a client for the UserMsg from the given config.
func NewUserMsgClient(c config) *UserMsgClient {
	return &UserMsgClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermsg.Hooks(f(g(h())))`.
func (c *UserMsgClient) Use(hooks ...Hook) {
	c.hooks.UserMsg = append(c.hooks.UserMsg, hooks...)
}

// Create returns a create builder for UserMsg.
func (c *UserMsgClient) Create() *UserMsgCreate {
	mutation := newUserMsgMutation(c.config, OpCreate)
	return &UserMsgCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserMsg entities.
func (c *UserMsgClient) CreateBulk(builders ...*UserMsgCreate) *UserMsgCreateBulk {
	return &UserMsgCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserMsg.
func (c *UserMsgClient) Update() *UserMsgUpdate {
	mutation := newUserMsgMutation(c.config, OpUpdate)
	return &UserMsgUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserMsgClient) UpdateOne(um *UserMsg) *UserMsgUpdateOne {
	mutation := newUserMsgMutation(c.config, OpUpdateOne, withUserMsg(um))
	return &UserMsgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserMsgClient) UpdateOneID(id int64) *UserMsgUpdateOne {
	mutation := newUserMsgMutation(c.config, OpUpdateOne, withUserMsgID(id))
	return &UserMsgUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserMsg.
func (c *UserMsgClient) Delete() *UserMsgDelete {
	mutation := newUserMsgMutation(c.config, OpDelete)
	return &UserMsgDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserMsgClient) DeleteOne(um *UserMsg) *UserMsgDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserMsgClient) DeleteOneID(id int64) *UserMsgDeleteOne {
	builder := c.Delete().Where(usermsg.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserMsgDeleteOne{builder}
}

// Query returns a query builder for UserMsg.
func (c *UserMsgClient) Query() *UserMsgQuery {
	return &UserMsgQuery{
		config: c.config,
	}
}

// Get returns a UserMsg entity by its id.
func (c *UserMsgClient) Get(ctx context.Context, id int64) (*UserMsg, error) {
	return c.Query().Where(usermsg.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserMsgClient) GetX(ctx context.Context, id int64) *UserMsg {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserMsg.
func (c *UserMsgClient) QueryUser(um *UserMsg) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermsg.Table, usermsg.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermsg.UserTable, usermsg.UserColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserMsgClient) Hooks() []Hook {
	return c.hooks.UserMsg
}

// VipUserClient is a client for the VipUser schema.
type VipUserClient struct {
	config
}

// NewVipUserClient returns a client for the VipUser from the given config.
func NewVipUserClient(c config) *VipUserClient {
	return &VipUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vipuser.Hooks(f(g(h())))`.
func (c *VipUserClient) Use(hooks ...Hook) {
	c.hooks.VipUser = append(c.hooks.VipUser, hooks...)
}

// Create returns a create builder for VipUser.
func (c *VipUserClient) Create() *VipUserCreate {
	mutation := newVipUserMutation(c.config, OpCreate)
	return &VipUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VipUser entities.
func (c *VipUserClient) CreateBulk(builders ...*VipUserCreate) *VipUserCreateBulk {
	return &VipUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VipUser.
func (c *VipUserClient) Update() *VipUserUpdate {
	mutation := newVipUserMutation(c.config, OpUpdate)
	return &VipUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VipUserClient) UpdateOne(vu *VipUser) *VipUserUpdateOne {
	mutation := newVipUserMutation(c.config, OpUpdateOne, withVipUser(vu))
	return &VipUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VipUserClient) UpdateOneID(id int64) *VipUserUpdateOne {
	mutation := newVipUserMutation(c.config, OpUpdateOne, withVipUserID(id))
	return &VipUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VipUser.
func (c *VipUserClient) Delete() *VipUserDelete {
	mutation := newVipUserMutation(c.config, OpDelete)
	return &VipUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VipUserClient) DeleteOne(vu *VipUser) *VipUserDeleteOne {
	return c.DeleteOneID(vu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VipUserClient) DeleteOneID(id int64) *VipUserDeleteOne {
	builder := c.Delete().Where(vipuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VipUserDeleteOne{builder}
}

// Query returns a query builder for VipUser.
func (c *VipUserClient) Query() *VipUserQuery {
	return &VipUserQuery{
		config: c.config,
	}
}

// Get returns a VipUser entity by its id.
func (c *VipUserClient) Get(ctx context.Context, id int64) (*VipUser, error) {
	return c.Query().Where(vipuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VipUserClient) GetX(ctx context.Context, id int64) *VipUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a VipUser.
func (c *VipUserClient) QueryUser(vu *VipUser) *SocialUserQuery {
	query := &SocialUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vipuser.Table, vipuser.FieldID, id),
			sqlgraph.To(socialuser.Table, socialuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vipuser.UserTable, vipuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(vu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VipUserClient) Hooks() []Hook {
	return c.hooks.VipUser
}
