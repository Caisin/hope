// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/activitycomponent"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityComponentUpdate is the builder for updating ActivityComponent entities.
type ActivityComponentUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityComponentMutation
}

// Where appends a list predicates to the ActivityComponentUpdate builder.
func (acu *ActivityComponentUpdate) Where(ps ...predicate.ActivityComponent) *ActivityComponentUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetActivityCode sets the "activityCode" field.
func (acu *ActivityComponentUpdate) SetActivityCode(s string) *ActivityComponentUpdate {
	acu.mutation.SetActivityCode(s)
	return acu
}

// SetNillableActivityCode sets the "activityCode" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableActivityCode(s *string) *ActivityComponentUpdate {
	if s != nil {
		acu.SetActivityCode(*s)
	}
	return acu
}

// ClearActivityCode clears the value of the "activityCode" field.
func (acu *ActivityComponentUpdate) ClearActivityCode() *ActivityComponentUpdate {
	acu.mutation.ClearActivityCode()
	return acu
}

// SetComponentType sets the "componentType" field.
func (acu *ActivityComponentUpdate) SetComponentType(s string) *ActivityComponentUpdate {
	acu.mutation.SetComponentType(s)
	return acu
}

// SetNillableComponentType sets the "componentType" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableComponentType(s *string) *ActivityComponentUpdate {
	if s != nil {
		acu.SetComponentType(*s)
	}
	return acu
}

// ClearComponentType clears the value of the "componentType" field.
func (acu *ActivityComponentUpdate) ClearComponentType() *ActivityComponentUpdate {
	acu.mutation.ClearComponentType()
	return acu
}

// SetPolicy sets the "policy" field.
func (acu *ActivityComponentUpdate) SetPolicy(s string) *ActivityComponentUpdate {
	acu.mutation.SetPolicy(s)
	return acu
}

// SetNillablePolicy sets the "policy" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillablePolicy(s *string) *ActivityComponentUpdate {
	if s != nil {
		acu.SetPolicy(*s)
	}
	return acu
}

// ClearPolicy clears the value of the "policy" field.
func (acu *ActivityComponentUpdate) ClearPolicy() *ActivityComponentUpdate {
	acu.mutation.ClearPolicy()
	return acu
}

// SetVipDays sets the "vipDays" field.
func (acu *ActivityComponentUpdate) SetVipDays(b bool) *ActivityComponentUpdate {
	acu.mutation.SetVipDays(b)
	return acu
}

// SetNillableVipDays sets the "vipDays" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableVipDays(b *bool) *ActivityComponentUpdate {
	if b != nil {
		acu.SetVipDays(*b)
	}
	return acu
}

// ClearVipDays clears the value of the "vipDays" field.
func (acu *ActivityComponentUpdate) ClearVipDays() *ActivityComponentUpdate {
	acu.mutation.ClearVipDays()
	return acu
}

// SetMinConsume sets the "minConsume" field.
func (acu *ActivityComponentUpdate) SetMinConsume(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetMinConsume()
	acu.mutation.SetMinConsume(i)
	return acu
}

// SetNillableMinConsume sets the "minConsume" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableMinConsume(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetMinConsume(*i)
	}
	return acu
}

// AddMinConsume adds i to the "minConsume" field.
func (acu *ActivityComponentUpdate) AddMinConsume(i int64) *ActivityComponentUpdate {
	acu.mutation.AddMinConsume(i)
	return acu
}

// ClearMinConsume clears the value of the "minConsume" field.
func (acu *ActivityComponentUpdate) ClearMinConsume() *ActivityComponentUpdate {
	acu.mutation.ClearMinConsume()
	return acu
}

// SetMaxConsume sets the "maxConsume" field.
func (acu *ActivityComponentUpdate) SetMaxConsume(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetMaxConsume()
	acu.mutation.SetMaxConsume(i)
	return acu
}

// SetNillableMaxConsume sets the "maxConsume" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableMaxConsume(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetMaxConsume(*i)
	}
	return acu
}

// AddMaxConsume adds i to the "maxConsume" field.
func (acu *ActivityComponentUpdate) AddMaxConsume(i int64) *ActivityComponentUpdate {
	acu.mutation.AddMaxConsume(i)
	return acu
}

// ClearMaxConsume clears the value of the "maxConsume" field.
func (acu *ActivityComponentUpdate) ClearMaxConsume() *ActivityComponentUpdate {
	acu.mutation.ClearMaxConsume()
	return acu
}

// SetMinPayNum sets the "minPayNum" field.
func (acu *ActivityComponentUpdate) SetMinPayNum(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetMinPayNum()
	acu.mutation.SetMinPayNum(i)
	return acu
}

// SetNillableMinPayNum sets the "minPayNum" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableMinPayNum(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetMinPayNum(*i)
	}
	return acu
}

// AddMinPayNum adds i to the "minPayNum" field.
func (acu *ActivityComponentUpdate) AddMinPayNum(i int64) *ActivityComponentUpdate {
	acu.mutation.AddMinPayNum(i)
	return acu
}

// ClearMinPayNum clears the value of the "minPayNum" field.
func (acu *ActivityComponentUpdate) ClearMinPayNum() *ActivityComponentUpdate {
	acu.mutation.ClearMinPayNum()
	return acu
}

// SetPayTimes sets the "payTimes" field.
func (acu *ActivityComponentUpdate) SetPayTimes(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetPayTimes()
	acu.mutation.SetPayTimes(i)
	return acu
}

// SetNillablePayTimes sets the "payTimes" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillablePayTimes(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetPayTimes(*i)
	}
	return acu
}

// AddPayTimes adds i to the "payTimes" field.
func (acu *ActivityComponentUpdate) AddPayTimes(i int64) *ActivityComponentUpdate {
	acu.mutation.AddPayTimes(i)
	return acu
}

// ClearPayTimes clears the value of the "payTimes" field.
func (acu *ActivityComponentUpdate) ClearPayTimes() *ActivityComponentUpdate {
	acu.mutation.ClearPayTimes()
	return acu
}

// SetPayAmount sets the "payAmount" field.
func (acu *ActivityComponentUpdate) SetPayAmount(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetPayAmount()
	acu.mutation.SetPayAmount(i)
	return acu
}

// SetNillablePayAmount sets the "payAmount" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillablePayAmount(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetPayAmount(*i)
	}
	return acu
}

// AddPayAmount adds i to the "payAmount" field.
func (acu *ActivityComponentUpdate) AddPayAmount(i int64) *ActivityComponentUpdate {
	acu.mutation.AddPayAmount(i)
	return acu
}

// ClearPayAmount clears the value of the "payAmount" field.
func (acu *ActivityComponentUpdate) ClearPayAmount() *ActivityComponentUpdate {
	acu.mutation.ClearPayAmount()
	return acu
}

// SetRegDays sets the "regDays" field.
func (acu *ActivityComponentUpdate) SetRegDays(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetRegDays()
	acu.mutation.SetRegDays(i)
	return acu
}

// SetNillableRegDays sets the "regDays" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableRegDays(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetRegDays(*i)
	}
	return acu
}

// AddRegDays adds i to the "regDays" field.
func (acu *ActivityComponentUpdate) AddRegDays(i int64) *ActivityComponentUpdate {
	acu.mutation.AddRegDays(i)
	return acu
}

// ClearRegDays clears the value of the "regDays" field.
func (acu *ActivityComponentUpdate) ClearRegDays() *ActivityComponentUpdate {
	acu.mutation.ClearRegDays()
	return acu
}

// SetSummary sets the "summary" field.
func (acu *ActivityComponentUpdate) SetSummary(s string) *ActivityComponentUpdate {
	acu.mutation.SetSummary(s)
	return acu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableSummary(s *string) *ActivityComponentUpdate {
	if s != nil {
		acu.SetSummary(*s)
	}
	return acu
}

// ClearSummary clears the value of the "summary" field.
func (acu *ActivityComponentUpdate) ClearSummary() *ActivityComponentUpdate {
	acu.mutation.ClearSummary()
	return acu
}

// SetAssetItemId sets the "assetItemId" field.
func (acu *ActivityComponentUpdate) SetAssetItemId(i int32) *ActivityComponentUpdate {
	acu.mutation.ResetAssetItemId()
	acu.mutation.SetAssetItemId(i)
	return acu
}

// SetNillableAssetItemId sets the "assetItemId" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableAssetItemId(i *int32) *ActivityComponentUpdate {
	if i != nil {
		acu.SetAssetItemId(*i)
	}
	return acu
}

// AddAssetItemId adds i to the "assetItemId" field.
func (acu *ActivityComponentUpdate) AddAssetItemId(i int32) *ActivityComponentUpdate {
	acu.mutation.AddAssetItemId(i)
	return acu
}

// ClearAssetItemId clears the value of the "assetItemId" field.
func (acu *ActivityComponentUpdate) ClearAssetItemId() *ActivityComponentUpdate {
	acu.mutation.ClearAssetItemId()
	return acu
}

// SetAmount sets the "amount" field.
func (acu *ActivityComponentUpdate) SetAmount(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetAmount()
	acu.mutation.SetAmount(i)
	return acu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableAmount(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetAmount(*i)
	}
	return acu
}

// AddAmount adds i to the "amount" field.
func (acu *ActivityComponentUpdate) AddAmount(i int64) *ActivityComponentUpdate {
	acu.mutation.AddAmount(i)
	return acu
}

// ClearAmount clears the value of the "amount" field.
func (acu *ActivityComponentUpdate) ClearAmount() *ActivityComponentUpdate {
	acu.mutation.ClearAmount()
	return acu
}

// SetResId sets the "resId" field.
func (acu *ActivityComponentUpdate) SetResId(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetResId()
	acu.mutation.SetResId(i)
	return acu
}

// SetNillableResId sets the "resId" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableResId(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetResId(*i)
	}
	return acu
}

// AddResId adds i to the "resId" field.
func (acu *ActivityComponentUpdate) AddResId(i int64) *ActivityComponentUpdate {
	acu.mutation.AddResId(i)
	return acu
}

// ClearResId clears the value of the "resId" field.
func (acu *ActivityComponentUpdate) ClearResId() *ActivityComponentUpdate {
	acu.mutation.ClearResId()
	return acu
}

// SetResDays sets the "resDays" field.
func (acu *ActivityComponentUpdate) SetResDays(i int32) *ActivityComponentUpdate {
	acu.mutation.ResetResDays()
	acu.mutation.SetResDays(i)
	return acu
}

// SetNillableResDays sets the "resDays" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableResDays(i *int32) *ActivityComponentUpdate {
	if i != nil {
		acu.SetResDays(*i)
	}
	return acu
}

// AddResDays adds i to the "resDays" field.
func (acu *ActivityComponentUpdate) AddResDays(i int32) *ActivityComponentUpdate {
	acu.mutation.AddResDays(i)
	return acu
}

// ClearResDays clears the value of the "resDays" field.
func (acu *ActivityComponentUpdate) ClearResDays() *ActivityComponentUpdate {
	acu.mutation.ClearResDays()
	return acu
}

// SetUpdatedAt sets the "updatedAt" field.
func (acu *ActivityComponentUpdate) SetUpdatedAt(t time.Time) *ActivityComponentUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetCreateBy sets the "createBy" field.
func (acu *ActivityComponentUpdate) SetCreateBy(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetCreateBy()
	acu.mutation.SetCreateBy(i)
	return acu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableCreateBy(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetCreateBy(*i)
	}
	return acu
}

// AddCreateBy adds i to the "createBy" field.
func (acu *ActivityComponentUpdate) AddCreateBy(i int64) *ActivityComponentUpdate {
	acu.mutation.AddCreateBy(i)
	return acu
}

// SetUpdateBy sets the "updateBy" field.
func (acu *ActivityComponentUpdate) SetUpdateBy(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetUpdateBy()
	acu.mutation.SetUpdateBy(i)
	return acu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableUpdateBy(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetUpdateBy(*i)
	}
	return acu
}

// AddUpdateBy adds i to the "updateBy" field.
func (acu *ActivityComponentUpdate) AddUpdateBy(i int64) *ActivityComponentUpdate {
	acu.mutation.AddUpdateBy(i)
	return acu
}

// SetTenantId sets the "tenantId" field.
func (acu *ActivityComponentUpdate) SetTenantId(i int64) *ActivityComponentUpdate {
	acu.mutation.ResetTenantId()
	acu.mutation.SetTenantId(i)
	return acu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (acu *ActivityComponentUpdate) SetNillableTenantId(i *int64) *ActivityComponentUpdate {
	if i != nil {
		acu.SetTenantId(*i)
	}
	return acu
}

// AddTenantId adds i to the "tenantId" field.
func (acu *ActivityComponentUpdate) AddTenantId(i int64) *ActivityComponentUpdate {
	acu.mutation.AddTenantId(i)
	return acu
}

// Mutation returns the ActivityComponentMutation object of the builder.
func (acu *ActivityComponentUpdate) Mutation() *ActivityComponentMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *ActivityComponentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	acu.defaults()
	if len(acu.hooks) == 0 {
		affected, err = acu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acu.mutation = mutation
			affected, err = acu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(acu.hooks) - 1; i >= 0; i-- {
			if acu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (acu *ActivityComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *ActivityComponentUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *ActivityComponentUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *ActivityComponentUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := activitycomponent.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

func (acu *ActivityComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activitycomponent.Table,
			Columns: activitycomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: activitycomponent.FieldID,
			},
		},
	}
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.ActivityCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldActivityCode,
		})
	}
	if acu.mutation.ActivityCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activitycomponent.FieldActivityCode,
		})
	}
	if value, ok := acu.mutation.ComponentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldComponentType,
		})
	}
	if acu.mutation.ComponentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activitycomponent.FieldComponentType,
		})
	}
	if value, ok := acu.mutation.Policy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldPolicy,
		})
	}
	if acu.mutation.PolicyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activitycomponent.FieldPolicy,
		})
	}
	if value, ok := acu.mutation.VipDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: activitycomponent.FieldVipDays,
		})
	}
	if acu.mutation.VipDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: activitycomponent.FieldVipDays,
		})
	}
	if value, ok := acu.mutation.MinConsume(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinConsume,
		})
	}
	if value, ok := acu.mutation.AddedMinConsume(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinConsume,
		})
	}
	if acu.mutation.MinConsumeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldMinConsume,
		})
	}
	if value, ok := acu.mutation.MaxConsume(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMaxConsume,
		})
	}
	if value, ok := acu.mutation.AddedMaxConsume(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMaxConsume,
		})
	}
	if acu.mutation.MaxConsumeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldMaxConsume,
		})
	}
	if value, ok := acu.mutation.MinPayNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinPayNum,
		})
	}
	if value, ok := acu.mutation.AddedMinPayNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinPayNum,
		})
	}
	if acu.mutation.MinPayNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldMinPayNum,
		})
	}
	if value, ok := acu.mutation.PayTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayTimes,
		})
	}
	if value, ok := acu.mutation.AddedPayTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayTimes,
		})
	}
	if acu.mutation.PayTimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldPayTimes,
		})
	}
	if value, ok := acu.mutation.PayAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayAmount,
		})
	}
	if value, ok := acu.mutation.AddedPayAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayAmount,
		})
	}
	if acu.mutation.PayAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldPayAmount,
		})
	}
	if value, ok := acu.mutation.RegDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldRegDays,
		})
	}
	if value, ok := acu.mutation.AddedRegDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldRegDays,
		})
	}
	if acu.mutation.RegDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldRegDays,
		})
	}
	if value, ok := acu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldSummary,
		})
	}
	if acu.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activitycomponent.FieldSummary,
		})
	}
	if value, ok := acu.mutation.AssetItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldAssetItemId,
		})
	}
	if value, ok := acu.mutation.AddedAssetItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldAssetItemId,
		})
	}
	if acu.mutation.AssetItemIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: activitycomponent.FieldAssetItemId,
		})
	}
	if value, ok := acu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldAmount,
		})
	}
	if value, ok := acu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldAmount,
		})
	}
	if acu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldAmount,
		})
	}
	if value, ok := acu.mutation.ResId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldResId,
		})
	}
	if value, ok := acu.mutation.AddedResId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldResId,
		})
	}
	if acu.mutation.ResIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldResId,
		})
	}
	if value, ok := acu.mutation.ResDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldResDays,
		})
	}
	if value, ok := acu.mutation.AddedResDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldResDays,
		})
	}
	if acu.mutation.ResDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: activitycomponent.FieldResDays,
		})
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitycomponent.FieldUpdatedAt,
		})
	}
	if value, ok := acu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldCreateBy,
		})
	}
	if value, ok := acu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldCreateBy,
		})
	}
	if value, ok := acu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldUpdateBy,
		})
	}
	if value, ok := acu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldUpdateBy,
		})
	}
	if value, ok := acu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldTenantId,
		})
	}
	if value, ok := acu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitycomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ActivityComponentUpdateOne is the builder for updating a single ActivityComponent entity.
type ActivityComponentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityComponentMutation
}

// SetActivityCode sets the "activityCode" field.
func (acuo *ActivityComponentUpdateOne) SetActivityCode(s string) *ActivityComponentUpdateOne {
	acuo.mutation.SetActivityCode(s)
	return acuo
}

// SetNillableActivityCode sets the "activityCode" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableActivityCode(s *string) *ActivityComponentUpdateOne {
	if s != nil {
		acuo.SetActivityCode(*s)
	}
	return acuo
}

// ClearActivityCode clears the value of the "activityCode" field.
func (acuo *ActivityComponentUpdateOne) ClearActivityCode() *ActivityComponentUpdateOne {
	acuo.mutation.ClearActivityCode()
	return acuo
}

// SetComponentType sets the "componentType" field.
func (acuo *ActivityComponentUpdateOne) SetComponentType(s string) *ActivityComponentUpdateOne {
	acuo.mutation.SetComponentType(s)
	return acuo
}

// SetNillableComponentType sets the "componentType" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableComponentType(s *string) *ActivityComponentUpdateOne {
	if s != nil {
		acuo.SetComponentType(*s)
	}
	return acuo
}

// ClearComponentType clears the value of the "componentType" field.
func (acuo *ActivityComponentUpdateOne) ClearComponentType() *ActivityComponentUpdateOne {
	acuo.mutation.ClearComponentType()
	return acuo
}

// SetPolicy sets the "policy" field.
func (acuo *ActivityComponentUpdateOne) SetPolicy(s string) *ActivityComponentUpdateOne {
	acuo.mutation.SetPolicy(s)
	return acuo
}

// SetNillablePolicy sets the "policy" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillablePolicy(s *string) *ActivityComponentUpdateOne {
	if s != nil {
		acuo.SetPolicy(*s)
	}
	return acuo
}

// ClearPolicy clears the value of the "policy" field.
func (acuo *ActivityComponentUpdateOne) ClearPolicy() *ActivityComponentUpdateOne {
	acuo.mutation.ClearPolicy()
	return acuo
}

// SetVipDays sets the "vipDays" field.
func (acuo *ActivityComponentUpdateOne) SetVipDays(b bool) *ActivityComponentUpdateOne {
	acuo.mutation.SetVipDays(b)
	return acuo
}

// SetNillableVipDays sets the "vipDays" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableVipDays(b *bool) *ActivityComponentUpdateOne {
	if b != nil {
		acuo.SetVipDays(*b)
	}
	return acuo
}

// ClearVipDays clears the value of the "vipDays" field.
func (acuo *ActivityComponentUpdateOne) ClearVipDays() *ActivityComponentUpdateOne {
	acuo.mutation.ClearVipDays()
	return acuo
}

// SetMinConsume sets the "minConsume" field.
func (acuo *ActivityComponentUpdateOne) SetMinConsume(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetMinConsume()
	acuo.mutation.SetMinConsume(i)
	return acuo
}

// SetNillableMinConsume sets the "minConsume" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableMinConsume(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetMinConsume(*i)
	}
	return acuo
}

// AddMinConsume adds i to the "minConsume" field.
func (acuo *ActivityComponentUpdateOne) AddMinConsume(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddMinConsume(i)
	return acuo
}

// ClearMinConsume clears the value of the "minConsume" field.
func (acuo *ActivityComponentUpdateOne) ClearMinConsume() *ActivityComponentUpdateOne {
	acuo.mutation.ClearMinConsume()
	return acuo
}

// SetMaxConsume sets the "maxConsume" field.
func (acuo *ActivityComponentUpdateOne) SetMaxConsume(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetMaxConsume()
	acuo.mutation.SetMaxConsume(i)
	return acuo
}

// SetNillableMaxConsume sets the "maxConsume" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableMaxConsume(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetMaxConsume(*i)
	}
	return acuo
}

// AddMaxConsume adds i to the "maxConsume" field.
func (acuo *ActivityComponentUpdateOne) AddMaxConsume(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddMaxConsume(i)
	return acuo
}

// ClearMaxConsume clears the value of the "maxConsume" field.
func (acuo *ActivityComponentUpdateOne) ClearMaxConsume() *ActivityComponentUpdateOne {
	acuo.mutation.ClearMaxConsume()
	return acuo
}

// SetMinPayNum sets the "minPayNum" field.
func (acuo *ActivityComponentUpdateOne) SetMinPayNum(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetMinPayNum()
	acuo.mutation.SetMinPayNum(i)
	return acuo
}

// SetNillableMinPayNum sets the "minPayNum" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableMinPayNum(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetMinPayNum(*i)
	}
	return acuo
}

// AddMinPayNum adds i to the "minPayNum" field.
func (acuo *ActivityComponentUpdateOne) AddMinPayNum(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddMinPayNum(i)
	return acuo
}

// ClearMinPayNum clears the value of the "minPayNum" field.
func (acuo *ActivityComponentUpdateOne) ClearMinPayNum() *ActivityComponentUpdateOne {
	acuo.mutation.ClearMinPayNum()
	return acuo
}

// SetPayTimes sets the "payTimes" field.
func (acuo *ActivityComponentUpdateOne) SetPayTimes(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetPayTimes()
	acuo.mutation.SetPayTimes(i)
	return acuo
}

// SetNillablePayTimes sets the "payTimes" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillablePayTimes(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetPayTimes(*i)
	}
	return acuo
}

// AddPayTimes adds i to the "payTimes" field.
func (acuo *ActivityComponentUpdateOne) AddPayTimes(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddPayTimes(i)
	return acuo
}

// ClearPayTimes clears the value of the "payTimes" field.
func (acuo *ActivityComponentUpdateOne) ClearPayTimes() *ActivityComponentUpdateOne {
	acuo.mutation.ClearPayTimes()
	return acuo
}

// SetPayAmount sets the "payAmount" field.
func (acuo *ActivityComponentUpdateOne) SetPayAmount(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetPayAmount()
	acuo.mutation.SetPayAmount(i)
	return acuo
}

// SetNillablePayAmount sets the "payAmount" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillablePayAmount(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetPayAmount(*i)
	}
	return acuo
}

// AddPayAmount adds i to the "payAmount" field.
func (acuo *ActivityComponentUpdateOne) AddPayAmount(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddPayAmount(i)
	return acuo
}

// ClearPayAmount clears the value of the "payAmount" field.
func (acuo *ActivityComponentUpdateOne) ClearPayAmount() *ActivityComponentUpdateOne {
	acuo.mutation.ClearPayAmount()
	return acuo
}

// SetRegDays sets the "regDays" field.
func (acuo *ActivityComponentUpdateOne) SetRegDays(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetRegDays()
	acuo.mutation.SetRegDays(i)
	return acuo
}

// SetNillableRegDays sets the "regDays" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableRegDays(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetRegDays(*i)
	}
	return acuo
}

// AddRegDays adds i to the "regDays" field.
func (acuo *ActivityComponentUpdateOne) AddRegDays(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddRegDays(i)
	return acuo
}

// ClearRegDays clears the value of the "regDays" field.
func (acuo *ActivityComponentUpdateOne) ClearRegDays() *ActivityComponentUpdateOne {
	acuo.mutation.ClearRegDays()
	return acuo
}

// SetSummary sets the "summary" field.
func (acuo *ActivityComponentUpdateOne) SetSummary(s string) *ActivityComponentUpdateOne {
	acuo.mutation.SetSummary(s)
	return acuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableSummary(s *string) *ActivityComponentUpdateOne {
	if s != nil {
		acuo.SetSummary(*s)
	}
	return acuo
}

// ClearSummary clears the value of the "summary" field.
func (acuo *ActivityComponentUpdateOne) ClearSummary() *ActivityComponentUpdateOne {
	acuo.mutation.ClearSummary()
	return acuo
}

// SetAssetItemId sets the "assetItemId" field.
func (acuo *ActivityComponentUpdateOne) SetAssetItemId(i int32) *ActivityComponentUpdateOne {
	acuo.mutation.ResetAssetItemId()
	acuo.mutation.SetAssetItemId(i)
	return acuo
}

// SetNillableAssetItemId sets the "assetItemId" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableAssetItemId(i *int32) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetAssetItemId(*i)
	}
	return acuo
}

// AddAssetItemId adds i to the "assetItemId" field.
func (acuo *ActivityComponentUpdateOne) AddAssetItemId(i int32) *ActivityComponentUpdateOne {
	acuo.mutation.AddAssetItemId(i)
	return acuo
}

// ClearAssetItemId clears the value of the "assetItemId" field.
func (acuo *ActivityComponentUpdateOne) ClearAssetItemId() *ActivityComponentUpdateOne {
	acuo.mutation.ClearAssetItemId()
	return acuo
}

// SetAmount sets the "amount" field.
func (acuo *ActivityComponentUpdateOne) SetAmount(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetAmount()
	acuo.mutation.SetAmount(i)
	return acuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableAmount(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetAmount(*i)
	}
	return acuo
}

// AddAmount adds i to the "amount" field.
func (acuo *ActivityComponentUpdateOne) AddAmount(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddAmount(i)
	return acuo
}

// ClearAmount clears the value of the "amount" field.
func (acuo *ActivityComponentUpdateOne) ClearAmount() *ActivityComponentUpdateOne {
	acuo.mutation.ClearAmount()
	return acuo
}

// SetResId sets the "resId" field.
func (acuo *ActivityComponentUpdateOne) SetResId(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetResId()
	acuo.mutation.SetResId(i)
	return acuo
}

// SetNillableResId sets the "resId" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableResId(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetResId(*i)
	}
	return acuo
}

// AddResId adds i to the "resId" field.
func (acuo *ActivityComponentUpdateOne) AddResId(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddResId(i)
	return acuo
}

// ClearResId clears the value of the "resId" field.
func (acuo *ActivityComponentUpdateOne) ClearResId() *ActivityComponentUpdateOne {
	acuo.mutation.ClearResId()
	return acuo
}

// SetResDays sets the "resDays" field.
func (acuo *ActivityComponentUpdateOne) SetResDays(i int32) *ActivityComponentUpdateOne {
	acuo.mutation.ResetResDays()
	acuo.mutation.SetResDays(i)
	return acuo
}

// SetNillableResDays sets the "resDays" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableResDays(i *int32) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetResDays(*i)
	}
	return acuo
}

// AddResDays adds i to the "resDays" field.
func (acuo *ActivityComponentUpdateOne) AddResDays(i int32) *ActivityComponentUpdateOne {
	acuo.mutation.AddResDays(i)
	return acuo
}

// ClearResDays clears the value of the "resDays" field.
func (acuo *ActivityComponentUpdateOne) ClearResDays() *ActivityComponentUpdateOne {
	acuo.mutation.ClearResDays()
	return acuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (acuo *ActivityComponentUpdateOne) SetUpdatedAt(t time.Time) *ActivityComponentUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetCreateBy sets the "createBy" field.
func (acuo *ActivityComponentUpdateOne) SetCreateBy(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetCreateBy()
	acuo.mutation.SetCreateBy(i)
	return acuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableCreateBy(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetCreateBy(*i)
	}
	return acuo
}

// AddCreateBy adds i to the "createBy" field.
func (acuo *ActivityComponentUpdateOne) AddCreateBy(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddCreateBy(i)
	return acuo
}

// SetUpdateBy sets the "updateBy" field.
func (acuo *ActivityComponentUpdateOne) SetUpdateBy(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetUpdateBy()
	acuo.mutation.SetUpdateBy(i)
	return acuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableUpdateBy(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetUpdateBy(*i)
	}
	return acuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (acuo *ActivityComponentUpdateOne) AddUpdateBy(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddUpdateBy(i)
	return acuo
}

// SetTenantId sets the "tenantId" field.
func (acuo *ActivityComponentUpdateOne) SetTenantId(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.ResetTenantId()
	acuo.mutation.SetTenantId(i)
	return acuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (acuo *ActivityComponentUpdateOne) SetNillableTenantId(i *int64) *ActivityComponentUpdateOne {
	if i != nil {
		acuo.SetTenantId(*i)
	}
	return acuo
}

// AddTenantId adds i to the "tenantId" field.
func (acuo *ActivityComponentUpdateOne) AddTenantId(i int64) *ActivityComponentUpdateOne {
	acuo.mutation.AddTenantId(i)
	return acuo
}

// Mutation returns the ActivityComponentMutation object of the builder.
func (acuo *ActivityComponentUpdateOne) Mutation() *ActivityComponentMutation {
	return acuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *ActivityComponentUpdateOne) Select(field string, fields ...string) *ActivityComponentUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated ActivityComponent entity.
func (acuo *ActivityComponentUpdateOne) Save(ctx context.Context) (*ActivityComponent, error) {
	var (
		err  error
		node *ActivityComponent
	)
	acuo.defaults()
	if len(acuo.hooks) == 0 {
		node, err = acuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acuo.mutation = mutation
			node, err = acuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acuo.hooks) - 1; i >= 0; i-- {
			if acuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *ActivityComponentUpdateOne) SaveX(ctx context.Context) *ActivityComponent {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *ActivityComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *ActivityComponentUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *ActivityComponentUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := activitycomponent.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

func (acuo *ActivityComponentUpdateOne) sqlSave(ctx context.Context) (_node *ActivityComponent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activitycomponent.Table,
			Columns: activitycomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: activitycomponent.FieldID,
			},
		},
	}
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ActivityComponent.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activitycomponent.FieldID)
		for _, f := range fields {
			if !activitycomponent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activitycomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.ActivityCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldActivityCode,
		})
	}
	if acuo.mutation.ActivityCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activitycomponent.FieldActivityCode,
		})
	}
	if value, ok := acuo.mutation.ComponentType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldComponentType,
		})
	}
	if acuo.mutation.ComponentTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activitycomponent.FieldComponentType,
		})
	}
	if value, ok := acuo.mutation.Policy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldPolicy,
		})
	}
	if acuo.mutation.PolicyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activitycomponent.FieldPolicy,
		})
	}
	if value, ok := acuo.mutation.VipDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: activitycomponent.FieldVipDays,
		})
	}
	if acuo.mutation.VipDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: activitycomponent.FieldVipDays,
		})
	}
	if value, ok := acuo.mutation.MinConsume(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinConsume,
		})
	}
	if value, ok := acuo.mutation.AddedMinConsume(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinConsume,
		})
	}
	if acuo.mutation.MinConsumeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldMinConsume,
		})
	}
	if value, ok := acuo.mutation.MaxConsume(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMaxConsume,
		})
	}
	if value, ok := acuo.mutation.AddedMaxConsume(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMaxConsume,
		})
	}
	if acuo.mutation.MaxConsumeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldMaxConsume,
		})
	}
	if value, ok := acuo.mutation.MinPayNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinPayNum,
		})
	}
	if value, ok := acuo.mutation.AddedMinPayNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinPayNum,
		})
	}
	if acuo.mutation.MinPayNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldMinPayNum,
		})
	}
	if value, ok := acuo.mutation.PayTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayTimes,
		})
	}
	if value, ok := acuo.mutation.AddedPayTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayTimes,
		})
	}
	if acuo.mutation.PayTimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldPayTimes,
		})
	}
	if value, ok := acuo.mutation.PayAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayAmount,
		})
	}
	if value, ok := acuo.mutation.AddedPayAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayAmount,
		})
	}
	if acuo.mutation.PayAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldPayAmount,
		})
	}
	if value, ok := acuo.mutation.RegDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldRegDays,
		})
	}
	if value, ok := acuo.mutation.AddedRegDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldRegDays,
		})
	}
	if acuo.mutation.RegDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldRegDays,
		})
	}
	if value, ok := acuo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldSummary,
		})
	}
	if acuo.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activitycomponent.FieldSummary,
		})
	}
	if value, ok := acuo.mutation.AssetItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldAssetItemId,
		})
	}
	if value, ok := acuo.mutation.AddedAssetItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldAssetItemId,
		})
	}
	if acuo.mutation.AssetItemIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: activitycomponent.FieldAssetItemId,
		})
	}
	if value, ok := acuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldAmount,
		})
	}
	if value, ok := acuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldAmount,
		})
	}
	if acuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldAmount,
		})
	}
	if value, ok := acuo.mutation.ResId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldResId,
		})
	}
	if value, ok := acuo.mutation.AddedResId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldResId,
		})
	}
	if acuo.mutation.ResIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: activitycomponent.FieldResId,
		})
	}
	if value, ok := acuo.mutation.ResDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldResDays,
		})
	}
	if value, ok := acuo.mutation.AddedResDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldResDays,
		})
	}
	if acuo.mutation.ResDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: activitycomponent.FieldResDays,
		})
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitycomponent.FieldUpdatedAt,
		})
	}
	if value, ok := acuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldCreateBy,
		})
	}
	if value, ok := acuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldCreateBy,
		})
	}
	if value, ok := acuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldUpdateBy,
		})
	}
	if value, ok := acuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldUpdateBy,
		})
	}
	if value, ok := acuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldTenantId,
		})
	}
	if value, ok := acuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldTenantId,
		})
	}
	_node = &ActivityComponent{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activitycomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
