// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/sysdictdata/v1/sys_dict_data.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysDictDataClient is the client API for SysDictData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysDictDataClient interface {
	// 根据字典类型获取字典值
	GetSysDictDataByType(ctx context.Context, in *GetDataByTypeReq, opts ...grpc.CallOption) (*GetDataByTypeReply, error)
	// 分页查询SysDictData
	GetSysDictDataPage(ctx context.Context, in *SysDictDataPageReq, opts ...grpc.CallOption) (*SysDictDataPageReply, error)
	// 获取SysDictData
	GetSysDictData(ctx context.Context, in *SysDictDataReq, opts ...grpc.CallOption) (*SysDictDataReply, error)
	// 更新SysDictData
	UpdateSysDictData(ctx context.Context, in *SysDictDataUpdateReq, opts ...grpc.CallOption) (*SysDictDataUpdateReply, error)
	// 创建SysDictData
	CreateSysDictData(ctx context.Context, in *SysDictDataCreateReq, opts ...grpc.CallOption) (*SysDictDataCreateReply, error)
	// 删除SysDictData
	DeleteSysDictData(ctx context.Context, in *SysDictDataDeleteReq, opts ...grpc.CallOption) (*SysDictDataDeleteReply, error)
	// 批量删除SysDictData
	BatchDeleteSysDictData(ctx context.Context, in *SysDictDataBatchDeleteReq, opts ...grpc.CallOption) (*SysDictDataDeleteReply, error)
}

type sysDictDataClient struct {
	cc grpc.ClientConnInterface
}

func NewSysDictDataClient(cc grpc.ClientConnInterface) SysDictDataClient {
	return &sysDictDataClient{cc}
}

func (c *sysDictDataClient) GetSysDictDataByType(ctx context.Context, in *GetDataByTypeReq, opts ...grpc.CallOption) (*GetDataByTypeReply, error) {
	out := new(GetDataByTypeReply)
	err := c.cc.Invoke(ctx, "/sysdictdata.v1.SysDictData/GetSysDictDataByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) GetSysDictDataPage(ctx context.Context, in *SysDictDataPageReq, opts ...grpc.CallOption) (*SysDictDataPageReply, error) {
	out := new(SysDictDataPageReply)
	err := c.cc.Invoke(ctx, "/sysdictdata.v1.SysDictData/GetSysDictDataPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) GetSysDictData(ctx context.Context, in *SysDictDataReq, opts ...grpc.CallOption) (*SysDictDataReply, error) {
	out := new(SysDictDataReply)
	err := c.cc.Invoke(ctx, "/sysdictdata.v1.SysDictData/GetSysDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) UpdateSysDictData(ctx context.Context, in *SysDictDataUpdateReq, opts ...grpc.CallOption) (*SysDictDataUpdateReply, error) {
	out := new(SysDictDataUpdateReply)
	err := c.cc.Invoke(ctx, "/sysdictdata.v1.SysDictData/UpdateSysDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) CreateSysDictData(ctx context.Context, in *SysDictDataCreateReq, opts ...grpc.CallOption) (*SysDictDataCreateReply, error) {
	out := new(SysDictDataCreateReply)
	err := c.cc.Invoke(ctx, "/sysdictdata.v1.SysDictData/CreateSysDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) DeleteSysDictData(ctx context.Context, in *SysDictDataDeleteReq, opts ...grpc.CallOption) (*SysDictDataDeleteReply, error) {
	out := new(SysDictDataDeleteReply)
	err := c.cc.Invoke(ctx, "/sysdictdata.v1.SysDictData/DeleteSysDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictDataClient) BatchDeleteSysDictData(ctx context.Context, in *SysDictDataBatchDeleteReq, opts ...grpc.CallOption) (*SysDictDataDeleteReply, error) {
	out := new(SysDictDataDeleteReply)
	err := c.cc.Invoke(ctx, "/sysdictdata.v1.SysDictData/BatchDeleteSysDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysDictDataServer is the server API for SysDictData service.
// All implementations must embed UnimplementedSysDictDataServer
// for forward compatibility
type SysDictDataServer interface {
	// 根据字典类型获取字典值
	GetSysDictDataByType(context.Context, *GetDataByTypeReq) (*GetDataByTypeReply, error)
	// 分页查询SysDictData
	GetSysDictDataPage(context.Context, *SysDictDataPageReq) (*SysDictDataPageReply, error)
	// 获取SysDictData
	GetSysDictData(context.Context, *SysDictDataReq) (*SysDictDataReply, error)
	// 更新SysDictData
	UpdateSysDictData(context.Context, *SysDictDataUpdateReq) (*SysDictDataUpdateReply, error)
	// 创建SysDictData
	CreateSysDictData(context.Context, *SysDictDataCreateReq) (*SysDictDataCreateReply, error)
	// 删除SysDictData
	DeleteSysDictData(context.Context, *SysDictDataDeleteReq) (*SysDictDataDeleteReply, error)
	// 批量删除SysDictData
	BatchDeleteSysDictData(context.Context, *SysDictDataBatchDeleteReq) (*SysDictDataDeleteReply, error)
	mustEmbedUnimplementedSysDictDataServer()
}

// UnimplementedSysDictDataServer must be embedded to have forward compatible implementations.
type UnimplementedSysDictDataServer struct {
}

func (UnimplementedSysDictDataServer) GetSysDictDataByType(context.Context, *GetDataByTypeReq) (*GetDataByTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysDictDataByType not implemented")
}
func (UnimplementedSysDictDataServer) GetSysDictDataPage(context.Context, *SysDictDataPageReq) (*SysDictDataPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysDictDataPage not implemented")
}
func (UnimplementedSysDictDataServer) GetSysDictData(context.Context, *SysDictDataReq) (*SysDictDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) UpdateSysDictData(context.Context, *SysDictDataUpdateReq) (*SysDictDataUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) CreateSysDictData(context.Context, *SysDictDataCreateReq) (*SysDictDataCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) DeleteSysDictData(context.Context, *SysDictDataDeleteReq) (*SysDictDataDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) BatchDeleteSysDictData(context.Context, *SysDictDataBatchDeleteReq) (*SysDictDataDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysDictData not implemented")
}
func (UnimplementedSysDictDataServer) mustEmbedUnimplementedSysDictDataServer() {}

// UnsafeSysDictDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysDictDataServer will
// result in compilation errors.
type UnsafeSysDictDataServer interface {
	mustEmbedUnimplementedSysDictDataServer()
}

func RegisterSysDictDataServer(s grpc.ServiceRegistrar, srv SysDictDataServer) {
	s.RegisterService(&SysDictData_ServiceDesc, srv)
}

func _SysDictData_GetSysDictDataByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataByTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).GetSysDictDataByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysdictdata.v1.SysDictData/GetSysDictDataByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).GetSysDictDataByType(ctx, req.(*GetDataByTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_GetSysDictDataPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDictDataPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).GetSysDictDataPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysdictdata.v1.SysDictData/GetSysDictDataPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).GetSysDictDataPage(ctx, req.(*SysDictDataPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_GetSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).GetSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysdictdata.v1.SysDictData/GetSysDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).GetSysDictData(ctx, req.(*SysDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_UpdateSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDictDataUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).UpdateSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysdictdata.v1.SysDictData/UpdateSysDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).UpdateSysDictData(ctx, req.(*SysDictDataUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_CreateSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDictDataCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).CreateSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysdictdata.v1.SysDictData/CreateSysDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).CreateSysDictData(ctx, req.(*SysDictDataCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_DeleteSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDictDataDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).DeleteSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysdictdata.v1.SysDictData/DeleteSysDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).DeleteSysDictData(ctx, req.(*SysDictDataDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysDictData_BatchDeleteSysDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysDictDataBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysDictDataServer).BatchDeleteSysDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysdictdata.v1.SysDictData/BatchDeleteSysDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysDictDataServer).BatchDeleteSysDictData(ctx, req.(*SysDictDataBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysDictData_ServiceDesc is the grpc.ServiceDesc for SysDictData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysDictData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysdictdata.v1.SysDictData",
	HandlerType: (*SysDictDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysDictDataByType",
			Handler:    _SysDictData_GetSysDictDataByType_Handler,
		},
		{
			MethodName: "GetSysDictDataPage",
			Handler:    _SysDictData_GetSysDictDataPage_Handler,
		},
		{
			MethodName: "GetSysDictData",
			Handler:    _SysDictData_GetSysDictData_Handler,
		},
		{
			MethodName: "UpdateSysDictData",
			Handler:    _SysDictData_UpdateSysDictData_Handler,
		},
		{
			MethodName: "CreateSysDictData",
			Handler:    _SysDictData_CreateSysDictData_Handler,
		},
		{
			MethodName: "DeleteSysDictData",
			Handler:    _SysDictData_DeleteSysDictData_Handler,
		},
		{
			MethodName: "BatchDeleteSysDictData",
			Handler:    _SysDictData_BatchDeleteSysDictData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/sysdictdata/v1/sys_dict_data.proto",
}
