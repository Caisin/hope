// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/userresource"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserResourceCreate is the builder for creating a UserResource entity.
type UserResourceCreate struct {
	config
	mutation *UserResourceMutation
	hooks    []Hook
}

// SetResType sets the "resType" field.
func (urc *UserResourceCreate) SetResType(s string) *UserResourceCreate {
	urc.mutation.SetResType(s)
	return urc
}

// SetNillableResType sets the "resType" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableResType(s *string) *UserResourceCreate {
	if s != nil {
		urc.SetResType(*s)
	}
	return urc
}

// SetName sets the "Name" field.
func (urc *UserResourceCreate) SetName(s string) *UserResourceCreate {
	urc.mutation.SetName(s)
	return urc
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableName(s *string) *UserResourceCreate {
	if s != nil {
		urc.SetName(*s)
	}
	return urc
}

// SetURL sets the "url" field.
func (urc *UserResourceCreate) SetURL(s string) *UserResourceCreate {
	urc.mutation.SetURL(s)
	return urc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableURL(s *string) *UserResourceCreate {
	if s != nil {
		urc.SetURL(*s)
	}
	return urc
}

// SetSummary sets the "summary" field.
func (urc *UserResourceCreate) SetSummary(s string) *UserResourceCreate {
	urc.mutation.SetSummary(s)
	return urc
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableSummary(s *string) *UserResourceCreate {
	if s != nil {
		urc.SetSummary(*s)
	}
	return urc
}

// SetCreatedAt sets the "createdAt" field.
func (urc *UserResourceCreate) SetCreatedAt(t time.Time) *UserResourceCreate {
	urc.mutation.SetCreatedAt(t)
	return urc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableCreatedAt(t *time.Time) *UserResourceCreate {
	if t != nil {
		urc.SetCreatedAt(*t)
	}
	return urc
}

// SetUpdatedAt sets the "updatedAt" field.
func (urc *UserResourceCreate) SetUpdatedAt(t time.Time) *UserResourceCreate {
	urc.mutation.SetUpdatedAt(t)
	return urc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableUpdatedAt(t *time.Time) *UserResourceCreate {
	if t != nil {
		urc.SetUpdatedAt(*t)
	}
	return urc
}

// SetCreateBy sets the "createBy" field.
func (urc *UserResourceCreate) SetCreateBy(i int64) *UserResourceCreate {
	urc.mutation.SetCreateBy(i)
	return urc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableCreateBy(i *int64) *UserResourceCreate {
	if i != nil {
		urc.SetCreateBy(*i)
	}
	return urc
}

// SetUpdateBy sets the "updateBy" field.
func (urc *UserResourceCreate) SetUpdateBy(i int64) *UserResourceCreate {
	urc.mutation.SetUpdateBy(i)
	return urc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableUpdateBy(i *int64) *UserResourceCreate {
	if i != nil {
		urc.SetUpdateBy(*i)
	}
	return urc
}

// SetTenantId sets the "tenantId" field.
func (urc *UserResourceCreate) SetTenantId(i int64) *UserResourceCreate {
	urc.mutation.SetTenantId(i)
	return urc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (urc *UserResourceCreate) SetNillableTenantId(i *int64) *UserResourceCreate {
	if i != nil {
		urc.SetTenantId(*i)
	}
	return urc
}

// Mutation returns the UserResourceMutation object of the builder.
func (urc *UserResourceCreate) Mutation() *UserResourceMutation {
	return urc.mutation
}

// Save creates the UserResource in the database.
func (urc *UserResourceCreate) Save(ctx context.Context) (*UserResource, error) {
	var (
		err  error
		node *UserResource
	)
	urc.defaults()
	if len(urc.hooks) == 0 {
		if err = urc.check(); err != nil {
			return nil, err
		}
		node, err = urc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserResourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = urc.check(); err != nil {
				return nil, err
			}
			urc.mutation = mutation
			if node, err = urc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(urc.hooks) - 1; i >= 0; i-- {
			if urc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = urc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, urc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (urc *UserResourceCreate) SaveX(ctx context.Context) *UserResource {
	v, err := urc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urc *UserResourceCreate) Exec(ctx context.Context) error {
	_, err := urc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urc *UserResourceCreate) ExecX(ctx context.Context) {
	if err := urc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urc *UserResourceCreate) defaults() {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		v := userresource.DefaultCreatedAt()
		urc.mutation.SetCreatedAt(v)
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		v := userresource.DefaultUpdatedAt()
		urc.mutation.SetUpdatedAt(v)
	}
	if _, ok := urc.mutation.CreateBy(); !ok {
		v := userresource.DefaultCreateBy
		urc.mutation.SetCreateBy(v)
	}
	if _, ok := urc.mutation.UpdateBy(); !ok {
		v := userresource.DefaultUpdateBy
		urc.mutation.SetUpdateBy(v)
	}
	if _, ok := urc.mutation.TenantId(); !ok {
		v := userresource.DefaultTenantId
		urc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urc *UserResourceCreate) check() error {
	if _, ok := urc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := urc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := urc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := urc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := urc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (urc *UserResourceCreate) sqlSave(ctx context.Context) (*UserResource, error) {
	_node, _spec := urc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (urc *UserResourceCreate) createSpec() (*UserResource, *sqlgraph.CreateSpec) {
	var (
		_node = &UserResource{config: urc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userresource.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userresource.FieldID,
			},
		}
	)
	if value, ok := urc.mutation.ResType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresource.FieldResType,
		})
		_node.ResType = value
	}
	if value, ok := urc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresource.FieldName,
		})
		_node.Name = value
	}
	if value, ok := urc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresource.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := urc.mutation.Summary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresource.FieldSummary,
		})
		_node.Summary = value
	}
	if value, ok := urc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresource.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := urc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresource.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := urc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresource.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := urc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresource.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := urc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresource.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// UserResourceCreateBulk is the builder for creating many UserResource entities in bulk.
type UserResourceCreateBulk struct {
	config
	builders []*UserResourceCreate
}

// Save creates the UserResource entities in the database.
func (urcb *UserResourceCreateBulk) Save(ctx context.Context) ([]*UserResource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(urcb.builders))
	nodes := make([]*UserResource, len(urcb.builders))
	mutators := make([]Mutator, len(urcb.builders))
	for i := range urcb.builders {
		func(i int, root context.Context) {
			builder := urcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urcb *UserResourceCreateBulk) SaveX(ctx context.Context) []*UserResource {
	v, err := urcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urcb *UserResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := urcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcb *UserResourceCreateBulk) ExecX(ctx context.Context) {
	if err := urcb.Exec(ctx); err != nil {
		panic(err)
	}
}
