// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/casbinrule/v1/casbin_rule.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CasbinRuleClient is the client API for CasbinRule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasbinRuleClient interface {
	// 分页查询CasbinRule
	GetCasbinRulePage(ctx context.Context, in *CasbinRulePageReq, opts ...grpc.CallOption) (*CasbinRulePageReply, error)
	// 获取CasbinRule
	GetCasbinRule(ctx context.Context, in *CasbinRuleReq, opts ...grpc.CallOption) (*CasbinRuleReply, error)
	// 更新CasbinRule
	UpdateCasbinRule(ctx context.Context, in *CasbinRuleUpdateReq, opts ...grpc.CallOption) (*CasbinRuleUpdateReply, error)
	// 创建CasbinRule
	CreateCasbinRule(ctx context.Context, in *CasbinRuleCreateReq, opts ...grpc.CallOption) (*CasbinRuleCreateReply, error)
	// 删除CasbinRule
	DeleteCasbinRule(ctx context.Context, in *CasbinRuleDeleteReq, opts ...grpc.CallOption) (*CasbinRuleDeleteReply, error)
	// 批量删除CasbinRule
	BatchDeleteCasbinRule(ctx context.Context, in *CasbinRuleBatchDeleteReq, opts ...grpc.CallOption) (*CasbinRuleDeleteReply, error)
}

type casbinRuleClient struct {
	cc grpc.ClientConnInterface
}

func NewCasbinRuleClient(cc grpc.ClientConnInterface) CasbinRuleClient {
	return &casbinRuleClient{cc}
}

func (c *casbinRuleClient) GetCasbinRulePage(ctx context.Context, in *CasbinRulePageReq, opts ...grpc.CallOption) (*CasbinRulePageReply, error) {
	out := new(CasbinRulePageReply)
	err := c.cc.Invoke(ctx, "/casbinrule.v1.CasbinRule/GetCasbinRulePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinRuleClient) GetCasbinRule(ctx context.Context, in *CasbinRuleReq, opts ...grpc.CallOption) (*CasbinRuleReply, error) {
	out := new(CasbinRuleReply)
	err := c.cc.Invoke(ctx, "/casbinrule.v1.CasbinRule/GetCasbinRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinRuleClient) UpdateCasbinRule(ctx context.Context, in *CasbinRuleUpdateReq, opts ...grpc.CallOption) (*CasbinRuleUpdateReply, error) {
	out := new(CasbinRuleUpdateReply)
	err := c.cc.Invoke(ctx, "/casbinrule.v1.CasbinRule/UpdateCasbinRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinRuleClient) CreateCasbinRule(ctx context.Context, in *CasbinRuleCreateReq, opts ...grpc.CallOption) (*CasbinRuleCreateReply, error) {
	out := new(CasbinRuleCreateReply)
	err := c.cc.Invoke(ctx, "/casbinrule.v1.CasbinRule/CreateCasbinRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinRuleClient) DeleteCasbinRule(ctx context.Context, in *CasbinRuleDeleteReq, opts ...grpc.CallOption) (*CasbinRuleDeleteReply, error) {
	out := new(CasbinRuleDeleteReply)
	err := c.cc.Invoke(ctx, "/casbinrule.v1.CasbinRule/DeleteCasbinRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinRuleClient) BatchDeleteCasbinRule(ctx context.Context, in *CasbinRuleBatchDeleteReq, opts ...grpc.CallOption) (*CasbinRuleDeleteReply, error) {
	out := new(CasbinRuleDeleteReply)
	err := c.cc.Invoke(ctx, "/casbinrule.v1.CasbinRule/BatchDeleteCasbinRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasbinRuleServer is the server API for CasbinRule service.
// All implementations must embed UnimplementedCasbinRuleServer
// for forward compatibility
type CasbinRuleServer interface {
	// 分页查询CasbinRule
	GetCasbinRulePage(context.Context, *CasbinRulePageReq) (*CasbinRulePageReply, error)
	// 获取CasbinRule
	GetCasbinRule(context.Context, *CasbinRuleReq) (*CasbinRuleReply, error)
	// 更新CasbinRule
	UpdateCasbinRule(context.Context, *CasbinRuleUpdateReq) (*CasbinRuleUpdateReply, error)
	// 创建CasbinRule
	CreateCasbinRule(context.Context, *CasbinRuleCreateReq) (*CasbinRuleCreateReply, error)
	// 删除CasbinRule
	DeleteCasbinRule(context.Context, *CasbinRuleDeleteReq) (*CasbinRuleDeleteReply, error)
	// 批量删除CasbinRule
	BatchDeleteCasbinRule(context.Context, *CasbinRuleBatchDeleteReq) (*CasbinRuleDeleteReply, error)
	mustEmbedUnimplementedCasbinRuleServer()
}

// UnimplementedCasbinRuleServer must be embedded to have forward compatible implementations.
type UnimplementedCasbinRuleServer struct {
}

func (UnimplementedCasbinRuleServer) GetCasbinRulePage(context.Context, *CasbinRulePageReq) (*CasbinRulePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCasbinRulePage not implemented")
}
func (UnimplementedCasbinRuleServer) GetCasbinRule(context.Context, *CasbinRuleReq) (*CasbinRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCasbinRule not implemented")
}
func (UnimplementedCasbinRuleServer) UpdateCasbinRule(context.Context, *CasbinRuleUpdateReq) (*CasbinRuleUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCasbinRule not implemented")
}
func (UnimplementedCasbinRuleServer) CreateCasbinRule(context.Context, *CasbinRuleCreateReq) (*CasbinRuleCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCasbinRule not implemented")
}
func (UnimplementedCasbinRuleServer) DeleteCasbinRule(context.Context, *CasbinRuleDeleteReq) (*CasbinRuleDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCasbinRule not implemented")
}
func (UnimplementedCasbinRuleServer) BatchDeleteCasbinRule(context.Context, *CasbinRuleBatchDeleteReq) (*CasbinRuleDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteCasbinRule not implemented")
}
func (UnimplementedCasbinRuleServer) mustEmbedUnimplementedCasbinRuleServer() {}

// UnsafeCasbinRuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasbinRuleServer will
// result in compilation errors.
type UnsafeCasbinRuleServer interface {
	mustEmbedUnimplementedCasbinRuleServer()
}

func RegisterCasbinRuleServer(s grpc.ServiceRegistrar, srv CasbinRuleServer) {
	s.RegisterService(&CasbinRule_ServiceDesc, srv)
}

func _CasbinRule_GetCasbinRulePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRulePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinRuleServer).GetCasbinRulePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casbinrule.v1.CasbinRule/GetCasbinRulePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinRuleServer).GetCasbinRulePage(ctx, req.(*CasbinRulePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinRule_GetCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinRuleServer).GetCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casbinrule.v1.CasbinRule/GetCasbinRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinRuleServer).GetCasbinRule(ctx, req.(*CasbinRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinRule_UpdateCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinRuleServer).UpdateCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casbinrule.v1.CasbinRule/UpdateCasbinRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinRuleServer).UpdateCasbinRule(ctx, req.(*CasbinRuleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinRule_CreateCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinRuleServer).CreateCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casbinrule.v1.CasbinRule/CreateCasbinRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinRuleServer).CreateCasbinRule(ctx, req.(*CasbinRuleCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinRule_DeleteCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinRuleServer).DeleteCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casbinrule.v1.CasbinRule/DeleteCasbinRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinRuleServer).DeleteCasbinRule(ctx, req.(*CasbinRuleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinRule_BatchDeleteCasbinRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CasbinRuleBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinRuleServer).BatchDeleteCasbinRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casbinrule.v1.CasbinRule/BatchDeleteCasbinRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinRuleServer).BatchDeleteCasbinRule(ctx, req.(*CasbinRuleBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CasbinRule_ServiceDesc is the grpc.ServiceDesc for CasbinRule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CasbinRule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "casbinrule.v1.CasbinRule",
	HandlerType: (*CasbinRuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCasbinRulePage",
			Handler:    _CasbinRule_GetCasbinRulePage_Handler,
		},
		{
			MethodName: "GetCasbinRule",
			Handler:    _CasbinRule_GetCasbinRule_Handler,
		},
		{
			MethodName: "UpdateCasbinRule",
			Handler:    _CasbinRule_UpdateCasbinRule_Handler,
		},
		{
			MethodName: "CreateCasbinRule",
			Handler:    _CasbinRule_CreateCasbinRule_Handler,
		},
		{
			MethodName: "DeleteCasbinRule",
			Handler:    _CasbinRule_DeleteCasbinRule_Handler,
		},
		{
			MethodName: "BatchDeleteCasbinRule",
			Handler:    _CasbinRule_BatchDeleteCasbinRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/casbinrule/v1/casbin_rule.proto",
}
