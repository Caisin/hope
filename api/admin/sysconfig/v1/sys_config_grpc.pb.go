// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/sysconfig/v1/sys_config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysConfigClient is the client API for SysConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysConfigClient interface {
	// 分页查询SysConfig
	GetSysConfigPage(ctx context.Context, in *SysConfigPageReq, opts ...grpc.CallOption) (*SysConfigPageReply, error)
	// 获取SysConfig
	GetSysConfig(ctx context.Context, in *SysConfigReq, opts ...grpc.CallOption) (*SysConfigReply, error)
	// 更新SysConfig
	UpdateSysConfig(ctx context.Context, in *SysConfigUpdateReq, opts ...grpc.CallOption) (*SysConfigUpdateReply, error)
	// 创建SysConfig
	CreateSysConfig(ctx context.Context, in *SysConfigCreateReq, opts ...grpc.CallOption) (*SysConfigCreateReply, error)
	// 删除SysConfig
	DeleteSysConfig(ctx context.Context, in *SysConfigDeleteReq, opts ...grpc.CallOption) (*SysConfigDeleteReply, error)
	// 批量删除SysConfig
	BatchDeleteSysConfig(ctx context.Context, in *SysConfigBatchDeleteReq, opts ...grpc.CallOption) (*SysConfigDeleteReply, error)
}

type sysConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewSysConfigClient(cc grpc.ClientConnInterface) SysConfigClient {
	return &sysConfigClient{cc}
}

func (c *sysConfigClient) GetSysConfigPage(ctx context.Context, in *SysConfigPageReq, opts ...grpc.CallOption) (*SysConfigPageReply, error) {
	out := new(SysConfigPageReply)
	err := c.cc.Invoke(ctx, "/sysconfig.v1.SysConfig/GetSysConfigPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) GetSysConfig(ctx context.Context, in *SysConfigReq, opts ...grpc.CallOption) (*SysConfigReply, error) {
	out := new(SysConfigReply)
	err := c.cc.Invoke(ctx, "/sysconfig.v1.SysConfig/GetSysConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) UpdateSysConfig(ctx context.Context, in *SysConfigUpdateReq, opts ...grpc.CallOption) (*SysConfigUpdateReply, error) {
	out := new(SysConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/sysconfig.v1.SysConfig/UpdateSysConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) CreateSysConfig(ctx context.Context, in *SysConfigCreateReq, opts ...grpc.CallOption) (*SysConfigCreateReply, error) {
	out := new(SysConfigCreateReply)
	err := c.cc.Invoke(ctx, "/sysconfig.v1.SysConfig/CreateSysConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) DeleteSysConfig(ctx context.Context, in *SysConfigDeleteReq, opts ...grpc.CallOption) (*SysConfigDeleteReply, error) {
	out := new(SysConfigDeleteReply)
	err := c.cc.Invoke(ctx, "/sysconfig.v1.SysConfig/DeleteSysConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) BatchDeleteSysConfig(ctx context.Context, in *SysConfigBatchDeleteReq, opts ...grpc.CallOption) (*SysConfigDeleteReply, error) {
	out := new(SysConfigDeleteReply)
	err := c.cc.Invoke(ctx, "/sysconfig.v1.SysConfig/BatchDeleteSysConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysConfigServer is the server API for SysConfig service.
// All implementations must embed UnimplementedSysConfigServer
// for forward compatibility
type SysConfigServer interface {
	// 分页查询SysConfig
	GetSysConfigPage(context.Context, *SysConfigPageReq) (*SysConfigPageReply, error)
	// 获取SysConfig
	GetSysConfig(context.Context, *SysConfigReq) (*SysConfigReply, error)
	// 更新SysConfig
	UpdateSysConfig(context.Context, *SysConfigUpdateReq) (*SysConfigUpdateReply, error)
	// 创建SysConfig
	CreateSysConfig(context.Context, *SysConfigCreateReq) (*SysConfigCreateReply, error)
	// 删除SysConfig
	DeleteSysConfig(context.Context, *SysConfigDeleteReq) (*SysConfigDeleteReply, error)
	// 批量删除SysConfig
	BatchDeleteSysConfig(context.Context, *SysConfigBatchDeleteReq) (*SysConfigDeleteReply, error)
	mustEmbedUnimplementedSysConfigServer()
}

// UnimplementedSysConfigServer must be embedded to have forward compatible implementations.
type UnimplementedSysConfigServer struct {
}

func (UnimplementedSysConfigServer) GetSysConfigPage(context.Context, *SysConfigPageReq) (*SysConfigPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysConfigPage not implemented")
}
func (UnimplementedSysConfigServer) GetSysConfig(context.Context, *SysConfigReq) (*SysConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysConfig not implemented")
}
func (UnimplementedSysConfigServer) UpdateSysConfig(context.Context, *SysConfigUpdateReq) (*SysConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysConfig not implemented")
}
func (UnimplementedSysConfigServer) CreateSysConfig(context.Context, *SysConfigCreateReq) (*SysConfigCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysConfig not implemented")
}
func (UnimplementedSysConfigServer) DeleteSysConfig(context.Context, *SysConfigDeleteReq) (*SysConfigDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysConfig not implemented")
}
func (UnimplementedSysConfigServer) BatchDeleteSysConfig(context.Context, *SysConfigBatchDeleteReq) (*SysConfigDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysConfig not implemented")
}
func (UnimplementedSysConfigServer) mustEmbedUnimplementedSysConfigServer() {}

// UnsafeSysConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysConfigServer will
// result in compilation errors.
type UnsafeSysConfigServer interface {
	mustEmbedUnimplementedSysConfigServer()
}

func RegisterSysConfigServer(s grpc.ServiceRegistrar, srv SysConfigServer) {
	s.RegisterService(&SysConfig_ServiceDesc, srv)
}

func _SysConfig_GetSysConfigPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfigPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).GetSysConfigPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysconfig.v1.SysConfig/GetSysConfigPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).GetSysConfigPage(ctx, req.(*SysConfigPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_GetSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).GetSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysconfig.v1.SysConfig/GetSysConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).GetSysConfig(ctx, req.(*SysConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_UpdateSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfigUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).UpdateSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysconfig.v1.SysConfig/UpdateSysConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).UpdateSysConfig(ctx, req.(*SysConfigUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_CreateSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfigCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).CreateSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysconfig.v1.SysConfig/CreateSysConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).CreateSysConfig(ctx, req.(*SysConfigCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_DeleteSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfigDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).DeleteSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysconfig.v1.SysConfig/DeleteSysConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).DeleteSysConfig(ctx, req.(*SysConfigDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_BatchDeleteSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfigBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).BatchDeleteSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysconfig.v1.SysConfig/BatchDeleteSysConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).BatchDeleteSysConfig(ctx, req.(*SysConfigBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysConfig_ServiceDesc is the grpc.ServiceDesc for SysConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysconfig.v1.SysConfig",
	HandlerType: (*SysConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysConfigPage",
			Handler:    _SysConfig_GetSysConfigPage_Handler,
		},
		{
			MethodName: "GetSysConfig",
			Handler:    _SysConfig_GetSysConfig_Handler,
		},
		{
			MethodName: "UpdateSysConfig",
			Handler:    _SysConfig_UpdateSysConfig_Handler,
		},
		{
			MethodName: "CreateSysConfig",
			Handler:    _SysConfig_CreateSysConfig_Handler,
		},
		{
			MethodName: "DeleteSysConfig",
			Handler:    _SysConfig_DeleteSysConfig_Handler,
		},
		{
			MethodName: "BatchDeleteSysConfig",
			Handler:    _SysConfig_BatchDeleteSysConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/sysconfig/v1/sys_config.proto",
}
