// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/customernovelconfig"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerNovelConfigCreate is the builder for creating a CustomerNovelConfig entity.
type CustomerNovelConfigCreate struct {
	config
	mutation *CustomerNovelConfigMutation
	hooks    []Hook
}

// SetGroupCode sets the "groupCode" field.
func (cncc *CustomerNovelConfigCreate) SetGroupCode(s string) *CustomerNovelConfigCreate {
	cncc.mutation.SetGroupCode(s)
	return cncc
}

// SetNillableGroupCode sets the "groupCode" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableGroupCode(s *string) *CustomerNovelConfigCreate {
	if s != nil {
		cncc.SetGroupCode(*s)
	}
	return cncc
}

// SetInnerGroupCode sets the "innerGroupCode" field.
func (cncc *CustomerNovelConfigCreate) SetInnerGroupCode(s string) *CustomerNovelConfigCreate {
	cncc.mutation.SetInnerGroupCode(s)
	return cncc
}

// SetNillableInnerGroupCode sets the "innerGroupCode" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableInnerGroupCode(s *string) *CustomerNovelConfigCreate {
	if s != nil {
		cncc.SetInnerGroupCode(*s)
	}
	return cncc
}

// SetGroupName sets the "groupName" field.
func (cncc *CustomerNovelConfigCreate) SetGroupName(s string) *CustomerNovelConfigCreate {
	cncc.mutation.SetGroupName(s)
	return cncc
}

// SetNillableGroupName sets the "groupName" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableGroupName(s *string) *CustomerNovelConfigCreate {
	if s != nil {
		cncc.SetGroupName(*s)
	}
	return cncc
}

// SetTypeId sets the "typeId" field.
func (cncc *CustomerNovelConfigCreate) SetTypeId(i int32) *CustomerNovelConfigCreate {
	cncc.mutation.SetTypeId(i)
	return cncc
}

// SetNillableTypeId sets the "typeId" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableTypeId(i *int32) *CustomerNovelConfigCreate {
	if i != nil {
		cncc.SetTypeId(*i)
	}
	return cncc
}

// SetTypeCode sets the "TypeCode" field.
func (cncc *CustomerNovelConfigCreate) SetTypeCode(s string) *CustomerNovelConfigCreate {
	cncc.mutation.SetTypeCode(s)
	return cncc
}

// SetNillableTypeCode sets the "TypeCode" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableTypeCode(s *string) *CustomerNovelConfigCreate {
	if s != nil {
		cncc.SetTypeCode(*s)
	}
	return cncc
}

// SetTypeName sets the "typeName" field.
func (cncc *CustomerNovelConfigCreate) SetTypeName(s string) *CustomerNovelConfigCreate {
	cncc.mutation.SetTypeName(s)
	return cncc
}

// SetNillableTypeName sets the "typeName" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableTypeName(s *string) *CustomerNovelConfigCreate {
	if s != nil {
		cncc.SetTypeName(*s)
	}
	return cncc
}

// SetFieldName sets the "fieldName" field.
func (cncc *CustomerNovelConfigCreate) SetFieldName(s string) *CustomerNovelConfigCreate {
	cncc.mutation.SetFieldName(s)
	return cncc
}

// SetNillableFieldName sets the "fieldName" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableFieldName(s *string) *CustomerNovelConfigCreate {
	if s != nil {
		cncc.SetFieldName(*s)
	}
	return cncc
}

// SetDefaultNum sets the "defaultNum" field.
func (cncc *CustomerNovelConfigCreate) SetDefaultNum(i int32) *CustomerNovelConfigCreate {
	cncc.mutation.SetDefaultNum(i)
	return cncc
}

// SetNillableDefaultNum sets the "defaultNum" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableDefaultNum(i *int32) *CustomerNovelConfigCreate {
	if i != nil {
		cncc.SetDefaultNum(*i)
	}
	return cncc
}

// SetState sets the "state" field.
func (cncc *CustomerNovelConfigCreate) SetState(b bool) *CustomerNovelConfigCreate {
	cncc.mutation.SetState(b)
	return cncc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableState(b *bool) *CustomerNovelConfigCreate {
	if b != nil {
		cncc.SetState(*b)
	}
	return cncc
}

// SetCreatedAt sets the "createdAt" field.
func (cncc *CustomerNovelConfigCreate) SetCreatedAt(t time.Time) *CustomerNovelConfigCreate {
	cncc.mutation.SetCreatedAt(t)
	return cncc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableCreatedAt(t *time.Time) *CustomerNovelConfigCreate {
	if t != nil {
		cncc.SetCreatedAt(*t)
	}
	return cncc
}

// SetUpdatedAt sets the "updatedAt" field.
func (cncc *CustomerNovelConfigCreate) SetUpdatedAt(t time.Time) *CustomerNovelConfigCreate {
	cncc.mutation.SetUpdatedAt(t)
	return cncc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableUpdatedAt(t *time.Time) *CustomerNovelConfigCreate {
	if t != nil {
		cncc.SetUpdatedAt(*t)
	}
	return cncc
}

// SetCreateBy sets the "createBy" field.
func (cncc *CustomerNovelConfigCreate) SetCreateBy(i int64) *CustomerNovelConfigCreate {
	cncc.mutation.SetCreateBy(i)
	return cncc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableCreateBy(i *int64) *CustomerNovelConfigCreate {
	if i != nil {
		cncc.SetCreateBy(*i)
	}
	return cncc
}

// SetUpdateBy sets the "updateBy" field.
func (cncc *CustomerNovelConfigCreate) SetUpdateBy(i int64) *CustomerNovelConfigCreate {
	cncc.mutation.SetUpdateBy(i)
	return cncc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableUpdateBy(i *int64) *CustomerNovelConfigCreate {
	if i != nil {
		cncc.SetUpdateBy(*i)
	}
	return cncc
}

// SetTenantId sets the "tenantId" field.
func (cncc *CustomerNovelConfigCreate) SetTenantId(i int64) *CustomerNovelConfigCreate {
	cncc.mutation.SetTenantId(i)
	return cncc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (cncc *CustomerNovelConfigCreate) SetNillableTenantId(i *int64) *CustomerNovelConfigCreate {
	if i != nil {
		cncc.SetTenantId(*i)
	}
	return cncc
}

// Mutation returns the CustomerNovelConfigMutation object of the builder.
func (cncc *CustomerNovelConfigCreate) Mutation() *CustomerNovelConfigMutation {
	return cncc.mutation
}

// Save creates the CustomerNovelConfig in the database.
func (cncc *CustomerNovelConfigCreate) Save(ctx context.Context) (*CustomerNovelConfig, error) {
	var (
		err  error
		node *CustomerNovelConfig
	)
	cncc.defaults()
	if len(cncc.hooks) == 0 {
		if err = cncc.check(); err != nil {
			return nil, err
		}
		node, err = cncc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerNovelConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cncc.check(); err != nil {
				return nil, err
			}
			cncc.mutation = mutation
			if node, err = cncc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cncc.hooks) - 1; i >= 0; i-- {
			if cncc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cncc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cncc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cncc *CustomerNovelConfigCreate) SaveX(ctx context.Context) *CustomerNovelConfig {
	v, err := cncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cncc *CustomerNovelConfigCreate) Exec(ctx context.Context) error {
	_, err := cncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cncc *CustomerNovelConfigCreate) ExecX(ctx context.Context) {
	if err := cncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cncc *CustomerNovelConfigCreate) defaults() {
	if _, ok := cncc.mutation.CreatedAt(); !ok {
		v := customernovelconfig.DefaultCreatedAt()
		cncc.mutation.SetCreatedAt(v)
	}
	if _, ok := cncc.mutation.UpdatedAt(); !ok {
		v := customernovelconfig.DefaultUpdatedAt()
		cncc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cncc.mutation.CreateBy(); !ok {
		v := customernovelconfig.DefaultCreateBy
		cncc.mutation.SetCreateBy(v)
	}
	if _, ok := cncc.mutation.UpdateBy(); !ok {
		v := customernovelconfig.DefaultUpdateBy
		cncc.mutation.SetUpdateBy(v)
	}
	if _, ok := cncc.mutation.TenantId(); !ok {
		v := customernovelconfig.DefaultTenantId
		cncc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cncc *CustomerNovelConfigCreate) check() error {
	if _, ok := cncc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "CustomerNovelConfig.createdAt"`)}
	}
	if _, ok := cncc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "CustomerNovelConfig.updatedAt"`)}
	}
	if _, ok := cncc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "CustomerNovelConfig.createBy"`)}
	}
	if _, ok := cncc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "CustomerNovelConfig.updateBy"`)}
	}
	if _, ok := cncc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "CustomerNovelConfig.tenantId"`)}
	}
	return nil
}

func (cncc *CustomerNovelConfigCreate) sqlSave(ctx context.Context) (*CustomerNovelConfig, error) {
	_node, _spec := cncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (cncc *CustomerNovelConfigCreate) createSpec() (*CustomerNovelConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerNovelConfig{config: cncc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: customernovelconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: customernovelconfig.FieldID,
			},
		}
	)
	if value, ok := cncc.mutation.GroupCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldGroupCode,
		})
		_node.GroupCode = value
	}
	if value, ok := cncc.mutation.InnerGroupCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldInnerGroupCode,
		})
		_node.InnerGroupCode = value
	}
	if value, ok := cncc.mutation.GroupName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldGroupName,
		})
		_node.GroupName = value
	}
	if value, ok := cncc.mutation.TypeId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldTypeId,
		})
		_node.TypeId = value
	}
	if value, ok := cncc.mutation.TypeCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldTypeCode,
		})
		_node.TypeCode = value
	}
	if value, ok := cncc.mutation.TypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldTypeName,
		})
		_node.TypeName = value
	}
	if value, ok := cncc.mutation.FieldName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldFieldName,
		})
		_node.FieldName = value
	}
	if value, ok := cncc.mutation.DefaultNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldDefaultNum,
		})
		_node.DefaultNum = value
	}
	if value, ok := cncc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customernovelconfig.FieldState,
		})
		_node.State = value
	}
	if value, ok := cncc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customernovelconfig.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cncc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customernovelconfig.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cncc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := cncc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := cncc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// CustomerNovelConfigCreateBulk is the builder for creating many CustomerNovelConfig entities in bulk.
type CustomerNovelConfigCreateBulk struct {
	config
	builders []*CustomerNovelConfigCreate
}

// Save creates the CustomerNovelConfig entities in the database.
func (cnccb *CustomerNovelConfigCreateBulk) Save(ctx context.Context) ([]*CustomerNovelConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cnccb.builders))
	nodes := make([]*CustomerNovelConfig, len(cnccb.builders))
	mutators := make([]Mutator, len(cnccb.builders))
	for i := range cnccb.builders {
		func(i int, root context.Context) {
			builder := cnccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerNovelConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cnccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cnccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cnccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cnccb *CustomerNovelConfigCreateBulk) SaveX(ctx context.Context) []*CustomerNovelConfig {
	v, err := cnccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cnccb *CustomerNovelConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := cnccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnccb *CustomerNovelConfigCreateBulk) ExecX(ctx context.Context) {
	if err := cnccb.Exec(ctx); err != nil {
		panic(err)
	}
}
