// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/agreement_log.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/agreementlog/v1"
	"hope/apps/novel/internal/data/ent"
	"hope/apps/novel/internal/data/ent/agreementlog"
)

func AgreementLogUpdateReq2Data(v *v1.AgreementLogUpdateReq) *ent.AgreementLog {
	if v == nil {
		return nil
	}
	return &ent.AgreementLog{
		ID:               v.Id,
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    agreementlog.AgreementType(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     v.NextExecTime.AsTime(),
	}
}

func AgreementLogData2UpdateReq(v *ent.AgreementLog) *v1.AgreementLogUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.AgreementLogUpdateReq{
		Id:               v.ID,
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    string(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     timestamppb.New(v.NextExecTime),
	}
}

func AgreementLogCreateReq2Data(v *v1.AgreementLogCreateReq) *ent.AgreementLog {
	if v == nil {
		return nil
	}
	return &ent.AgreementLog{
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    agreementlog.AgreementType(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     v.NextExecTime.AsTime(),
	}
}

func AgreementLogData2CreateReq(v *ent.AgreementLog) *v1.AgreementLogCreateReq {
	if v == nil {
		return nil
	}
	return &v1.AgreementLogCreateReq{
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    string(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     timestamppb.New(v.NextExecTime),
	}
}

func AgreementLogReq2Data(v *v1.AgreementLogReq) *ent.AgreementLog {
	if v == nil {
		return nil
	}
	return &ent.AgreementLog{
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    agreementlog.AgreementType(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     v.NextExecTime.AsTime(),
	}
}

func AgreementLogData2Req(v *ent.AgreementLog) *v1.AgreementLogReq {
	if v == nil {
		return nil
	}
	return &v1.AgreementLogReq{
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    string(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     timestamppb.New(v.NextExecTime),
	}
}

func AgreementLogReply2Data(v *v1.AgreementLogReply) *ent.AgreementLog {
	if v == nil {
		return nil
	}
	return &ent.AgreementLog{
		ID:               v.Id,
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    agreementlog.AgreementType(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     v.NextExecTime.AsTime(),
		Remark:           v.Remark,
		CreatedAt:        v.CreatedAt.AsTime(),
		UpdatedAt:        v.UpdatedAt.AsTime(),
		CreateBy:         v.CreateBy,
		UpdateBy:         v.UpdateBy,
		TenantId:         v.TenantId,
	}
}

func AgreementLogData2Reply(v *ent.AgreementLog) *v1.AgreementLogReply {
	if v == nil {
		return nil
	}
	return &v1.AgreementLogReply{
		Id:               v.ID,
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    string(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     timestamppb.New(v.NextExecTime),
		Remark:           v.Remark,
		CreatedAt:        timestamppb.New(v.CreatedAt),
		UpdatedAt:        timestamppb.New(v.UpdatedAt),
		CreateBy:         v.CreateBy,
		UpdateBy:         v.UpdateBy,
		TenantId:         v.TenantId,
	}
}

func AgreementLogUpdateReply2Data(v *v1.AgreementLogUpdateReply) *ent.AgreementLog {
	if v == nil {
		return nil
	}
	return &ent.AgreementLog{
		ID:               v.Id,
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    agreementlog.AgreementType(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     v.NextExecTime.AsTime(),
	}
}

func AgreementLogData2UpdateReply(v *ent.AgreementLog) *v1.AgreementLogUpdateReply {
	if v == nil {
		return nil
	}
	return &v1.AgreementLogUpdateReply{
		Id:               v.ID,
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    string(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     timestamppb.New(v.NextExecTime),
	}
}

func AgreementLogCreateReply2Data(v *v1.AgreementLogCreateReply) *ent.AgreementLog {
	if v == nil {
		return nil
	}
	return &ent.AgreementLog{
		ID:               v.Id,
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    agreementlog.AgreementType(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     v.NextExecTime.AsTime(),
		Remark:           v.Remark,
		CreatedAt:        v.CreatedAt.AsTime(),
		UpdatedAt:        v.UpdatedAt.AsTime(),
		CreateBy:         v.CreateBy,
		UpdateBy:         v.UpdateBy,
		TenantId:         v.TenantId,
	}
}

func AgreementLogData2CreateReply(v *ent.AgreementLog) *v1.AgreementLogCreateReply {
	if v == nil {
		return nil
	}
	return &v1.AgreementLogCreateReply{
		Id:               v.ID,
		OuterAgreementNo: v.OuterAgreementNo,
		OrderId:          v.OrderId,
		UserId:           v.UserId,
		ChId:             v.ChId,
		UserName:         v.UserName,
		PaymentName:      v.PaymentName,
		PaymentId:        v.PaymentId,
		State:            v.State,
		Payment:          v.Payment,
		AgreementType:    string(v.AgreementType),
		VipType:          v.VipType,
		Times:            v.Times,
		CycleDays:        v.CycleDays,
		NextExecTime:     timestamppb.New(v.NextExecTime),
		Remark:           v.Remark,
		CreatedAt:        timestamppb.New(v.CreatedAt),
		UpdatedAt:        timestamppb.New(v.UpdatedAt),
		CreateBy:         v.CreateBy,
		UpdateBy:         v.UpdateBy,
		TenantId:         v.TenantId,
	}
}
