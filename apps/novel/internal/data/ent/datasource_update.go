// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/datasource"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DataSourceUpdate is the builder for updating DataSource entities.
type DataSourceUpdate struct {
	config
	hooks    []Hook
	mutation *DataSourceMutation
}

// Where appends a list predicates to the DataSourceUpdate builder.
func (dsu *DataSourceUpdate) Where(ps ...predicate.DataSource) *DataSourceUpdate {
	dsu.mutation.Where(ps...)
	return dsu
}

// SetDbName sets the "dbName" field.
func (dsu *DataSourceUpdate) SetDbName(s string) *DataSourceUpdate {
	dsu.mutation.SetDbName(s)
	return dsu
}

// SetNillableDbName sets the "dbName" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableDbName(s *string) *DataSourceUpdate {
	if s != nil {
		dsu.SetDbName(*s)
	}
	return dsu
}

// ClearDbName clears the value of the "dbName" field.
func (dsu *DataSourceUpdate) ClearDbName() *DataSourceUpdate {
	dsu.mutation.ClearDbName()
	return dsu
}

// SetHost sets the "host" field.
func (dsu *DataSourceUpdate) SetHost(s string) *DataSourceUpdate {
	dsu.mutation.SetHost(s)
	return dsu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableHost(s *string) *DataSourceUpdate {
	if s != nil {
		dsu.SetHost(*s)
	}
	return dsu
}

// ClearHost clears the value of the "host" field.
func (dsu *DataSourceUpdate) ClearHost() *DataSourceUpdate {
	dsu.mutation.ClearHost()
	return dsu
}

// SetPort sets the "port" field.
func (dsu *DataSourceUpdate) SetPort(i int32) *DataSourceUpdate {
	dsu.mutation.ResetPort()
	dsu.mutation.SetPort(i)
	return dsu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillablePort(i *int32) *DataSourceUpdate {
	if i != nil {
		dsu.SetPort(*i)
	}
	return dsu
}

// AddPort adds i to the "port" field.
func (dsu *DataSourceUpdate) AddPort(i int32) *DataSourceUpdate {
	dsu.mutation.AddPort(i)
	return dsu
}

// ClearPort clears the value of the "port" field.
func (dsu *DataSourceUpdate) ClearPort() *DataSourceUpdate {
	dsu.mutation.ClearPort()
	return dsu
}

// SetDatabase sets the "database" field.
func (dsu *DataSourceUpdate) SetDatabase(s string) *DataSourceUpdate {
	dsu.mutation.SetDatabase(s)
	return dsu
}

// SetNillableDatabase sets the "database" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableDatabase(s *string) *DataSourceUpdate {
	if s != nil {
		dsu.SetDatabase(*s)
	}
	return dsu
}

// ClearDatabase clears the value of the "database" field.
func (dsu *DataSourceUpdate) ClearDatabase() *DataSourceUpdate {
	dsu.mutation.ClearDatabase()
	return dsu
}

// SetUserName sets the "userName" field.
func (dsu *DataSourceUpdate) SetUserName(s string) *DataSourceUpdate {
	dsu.mutation.SetUserName(s)
	return dsu
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableUserName(s *string) *DataSourceUpdate {
	if s != nil {
		dsu.SetUserName(*s)
	}
	return dsu
}

// ClearUserName clears the value of the "userName" field.
func (dsu *DataSourceUpdate) ClearUserName() *DataSourceUpdate {
	dsu.mutation.ClearUserName()
	return dsu
}

// SetPwd sets the "pwd" field.
func (dsu *DataSourceUpdate) SetPwd(s string) *DataSourceUpdate {
	dsu.mutation.SetPwd(s)
	return dsu
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillablePwd(s *string) *DataSourceUpdate {
	if s != nil {
		dsu.SetPwd(*s)
	}
	return dsu
}

// ClearPwd clears the value of the "pwd" field.
func (dsu *DataSourceUpdate) ClearPwd() *DataSourceUpdate {
	dsu.mutation.ClearPwd()
	return dsu
}

// SetStatus sets the "status" field.
func (dsu *DataSourceUpdate) SetStatus(b bool) *DataSourceUpdate {
	dsu.mutation.SetStatus(b)
	return dsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableStatus(b *bool) *DataSourceUpdate {
	if b != nil {
		dsu.SetStatus(*b)
	}
	return dsu
}

// ClearStatus clears the value of the "status" field.
func (dsu *DataSourceUpdate) ClearStatus() *DataSourceUpdate {
	dsu.mutation.ClearStatus()
	return dsu
}

// SetDbType sets the "dbType" field.
func (dsu *DataSourceUpdate) SetDbType(dt datasource.DbType) *DataSourceUpdate {
	dsu.mutation.SetDbType(dt)
	return dsu
}

// SetNillableDbType sets the "dbType" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableDbType(dt *datasource.DbType) *DataSourceUpdate {
	if dt != nil {
		dsu.SetDbType(*dt)
	}
	return dsu
}

// ClearDbType clears the value of the "dbType" field.
func (dsu *DataSourceUpdate) ClearDbType() *DataSourceUpdate {
	dsu.mutation.ClearDbType()
	return dsu
}

// SetConnMaxIdleTime sets the "connMaxIdleTime" field.
func (dsu *DataSourceUpdate) SetConnMaxIdleTime(i int32) *DataSourceUpdate {
	dsu.mutation.ResetConnMaxIdleTime()
	dsu.mutation.SetConnMaxIdleTime(i)
	return dsu
}

// SetNillableConnMaxIdleTime sets the "connMaxIdleTime" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableConnMaxIdleTime(i *int32) *DataSourceUpdate {
	if i != nil {
		dsu.SetConnMaxIdleTime(*i)
	}
	return dsu
}

// AddConnMaxIdleTime adds i to the "connMaxIdleTime" field.
func (dsu *DataSourceUpdate) AddConnMaxIdleTime(i int32) *DataSourceUpdate {
	dsu.mutation.AddConnMaxIdleTime(i)
	return dsu
}

// ClearConnMaxIdleTime clears the value of the "connMaxIdleTime" field.
func (dsu *DataSourceUpdate) ClearConnMaxIdleTime() *DataSourceUpdate {
	dsu.mutation.ClearConnMaxIdleTime()
	return dsu
}

// SetConnMaxLifeTime sets the "connMaxLifeTime" field.
func (dsu *DataSourceUpdate) SetConnMaxLifeTime(i int32) *DataSourceUpdate {
	dsu.mutation.ResetConnMaxLifeTime()
	dsu.mutation.SetConnMaxLifeTime(i)
	return dsu
}

// SetNillableConnMaxLifeTime sets the "connMaxLifeTime" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableConnMaxLifeTime(i *int32) *DataSourceUpdate {
	if i != nil {
		dsu.SetConnMaxLifeTime(*i)
	}
	return dsu
}

// AddConnMaxLifeTime adds i to the "connMaxLifeTime" field.
func (dsu *DataSourceUpdate) AddConnMaxLifeTime(i int32) *DataSourceUpdate {
	dsu.mutation.AddConnMaxLifeTime(i)
	return dsu
}

// ClearConnMaxLifeTime clears the value of the "connMaxLifeTime" field.
func (dsu *DataSourceUpdate) ClearConnMaxLifeTime() *DataSourceUpdate {
	dsu.mutation.ClearConnMaxLifeTime()
	return dsu
}

// SetMaxIdleConns sets the "maxIdleConns" field.
func (dsu *DataSourceUpdate) SetMaxIdleConns(i int32) *DataSourceUpdate {
	dsu.mutation.ResetMaxIdleConns()
	dsu.mutation.SetMaxIdleConns(i)
	return dsu
}

// SetNillableMaxIdleConns sets the "maxIdleConns" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableMaxIdleConns(i *int32) *DataSourceUpdate {
	if i != nil {
		dsu.SetMaxIdleConns(*i)
	}
	return dsu
}

// AddMaxIdleConns adds i to the "maxIdleConns" field.
func (dsu *DataSourceUpdate) AddMaxIdleConns(i int32) *DataSourceUpdate {
	dsu.mutation.AddMaxIdleConns(i)
	return dsu
}

// ClearMaxIdleConns clears the value of the "maxIdleConns" field.
func (dsu *DataSourceUpdate) ClearMaxIdleConns() *DataSourceUpdate {
	dsu.mutation.ClearMaxIdleConns()
	return dsu
}

// SetMaxOpenConns sets the "maxOpenConns" field.
func (dsu *DataSourceUpdate) SetMaxOpenConns(i int32) *DataSourceUpdate {
	dsu.mutation.ResetMaxOpenConns()
	dsu.mutation.SetMaxOpenConns(i)
	return dsu
}

// SetNillableMaxOpenConns sets the "maxOpenConns" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableMaxOpenConns(i *int32) *DataSourceUpdate {
	if i != nil {
		dsu.SetMaxOpenConns(*i)
	}
	return dsu
}

// AddMaxOpenConns adds i to the "maxOpenConns" field.
func (dsu *DataSourceUpdate) AddMaxOpenConns(i int32) *DataSourceUpdate {
	dsu.mutation.AddMaxOpenConns(i)
	return dsu
}

// ClearMaxOpenConns clears the value of the "maxOpenConns" field.
func (dsu *DataSourceUpdate) ClearMaxOpenConns() *DataSourceUpdate {
	dsu.mutation.ClearMaxOpenConns()
	return dsu
}

// SetRemark sets the "remark" field.
func (dsu *DataSourceUpdate) SetRemark(s string) *DataSourceUpdate {
	dsu.mutation.SetRemark(s)
	return dsu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableRemark(s *string) *DataSourceUpdate {
	if s != nil {
		dsu.SetRemark(*s)
	}
	return dsu
}

// ClearRemark clears the value of the "remark" field.
func (dsu *DataSourceUpdate) ClearRemark() *DataSourceUpdate {
	dsu.mutation.ClearRemark()
	return dsu
}

// SetUpdatedAt sets the "updatedAt" field.
func (dsu *DataSourceUpdate) SetUpdatedAt(t time.Time) *DataSourceUpdate {
	dsu.mutation.SetUpdatedAt(t)
	return dsu
}

// SetCreateBy sets the "createBy" field.
func (dsu *DataSourceUpdate) SetCreateBy(i int64) *DataSourceUpdate {
	dsu.mutation.ResetCreateBy()
	dsu.mutation.SetCreateBy(i)
	return dsu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableCreateBy(i *int64) *DataSourceUpdate {
	if i != nil {
		dsu.SetCreateBy(*i)
	}
	return dsu
}

// AddCreateBy adds i to the "createBy" field.
func (dsu *DataSourceUpdate) AddCreateBy(i int64) *DataSourceUpdate {
	dsu.mutation.AddCreateBy(i)
	return dsu
}

// SetUpdateBy sets the "updateBy" field.
func (dsu *DataSourceUpdate) SetUpdateBy(i int64) *DataSourceUpdate {
	dsu.mutation.ResetUpdateBy()
	dsu.mutation.SetUpdateBy(i)
	return dsu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableUpdateBy(i *int64) *DataSourceUpdate {
	if i != nil {
		dsu.SetUpdateBy(*i)
	}
	return dsu
}

// AddUpdateBy adds i to the "updateBy" field.
func (dsu *DataSourceUpdate) AddUpdateBy(i int64) *DataSourceUpdate {
	dsu.mutation.AddUpdateBy(i)
	return dsu
}

// SetTenantId sets the "tenantId" field.
func (dsu *DataSourceUpdate) SetTenantId(i int64) *DataSourceUpdate {
	dsu.mutation.ResetTenantId()
	dsu.mutation.SetTenantId(i)
	return dsu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableTenantId(i *int64) *DataSourceUpdate {
	if i != nil {
		dsu.SetTenantId(*i)
	}
	return dsu
}

// AddTenantId adds i to the "tenantId" field.
func (dsu *DataSourceUpdate) AddTenantId(i int64) *DataSourceUpdate {
	dsu.mutation.AddTenantId(i)
	return dsu
}

// Mutation returns the DataSourceMutation object of the builder.
func (dsu *DataSourceUpdate) Mutation() *DataSourceMutation {
	return dsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DataSourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	dsu.defaults()
	if len(dsu.hooks) == 0 {
		if err = dsu.check(); err != nil {
			return 0, err
		}
		affected, err = dsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsu.check(); err != nil {
				return 0, err
			}
			dsu.mutation = mutation
			affected, err = dsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dsu.hooks) - 1; i >= 0; i-- {
			if dsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DataSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DataSourceUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DataSourceUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsu *DataSourceUpdate) defaults() {
	if _, ok := dsu.mutation.UpdatedAt(); !ok {
		v := datasource.UpdateDefaultUpdatedAt()
		dsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsu *DataSourceUpdate) check() error {
	if v, ok := dsu.mutation.DbType(); ok {
		if err := datasource.DbTypeValidator(v); err != nil {
			return &ValidationError{Name: "dbType", err: fmt.Errorf(`ent: validator failed for field "DataSource.dbType": %w`, err)}
		}
	}
	return nil
}

func (dsu *DataSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datasource.Table,
			Columns: datasource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: datasource.FieldID,
			},
		},
	}
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.DbName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldDbName,
		})
	}
	if dsu.mutation.DbNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldDbName,
		})
	}
	if value, ok := dsu.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldHost,
		})
	}
	if dsu.mutation.HostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldHost,
		})
	}
	if value, ok := dsu.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldPort,
		})
	}
	if value, ok := dsu.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldPort,
		})
	}
	if dsu.mutation.PortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldPort,
		})
	}
	if value, ok := dsu.mutation.Database(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldDatabase,
		})
	}
	if dsu.mutation.DatabaseCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldDatabase,
		})
	}
	if value, ok := dsu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldUserName,
		})
	}
	if dsu.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldUserName,
		})
	}
	if value, ok := dsu.mutation.Pwd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldPwd,
		})
	}
	if dsu.mutation.PwdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldPwd,
		})
	}
	if value, ok := dsu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: datasource.FieldStatus,
		})
	}
	if dsu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: datasource.FieldStatus,
		})
	}
	if value, ok := dsu.mutation.DbType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: datasource.FieldDbType,
		})
	}
	if dsu.mutation.DbTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: datasource.FieldDbType,
		})
	}
	if value, ok := dsu.mutation.ConnMaxIdleTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxIdleTime,
		})
	}
	if value, ok := dsu.mutation.AddedConnMaxIdleTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxIdleTime,
		})
	}
	if dsu.mutation.ConnMaxIdleTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldConnMaxIdleTime,
		})
	}
	if value, ok := dsu.mutation.ConnMaxLifeTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxLifeTime,
		})
	}
	if value, ok := dsu.mutation.AddedConnMaxLifeTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxLifeTime,
		})
	}
	if dsu.mutation.ConnMaxLifeTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldConnMaxLifeTime,
		})
	}
	if value, ok := dsu.mutation.MaxIdleConns(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxIdleConns,
		})
	}
	if value, ok := dsu.mutation.AddedMaxIdleConns(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxIdleConns,
		})
	}
	if dsu.mutation.MaxIdleConnsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldMaxIdleConns,
		})
	}
	if value, ok := dsu.mutation.MaxOpenConns(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxOpenConns,
		})
	}
	if value, ok := dsu.mutation.AddedMaxOpenConns(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxOpenConns,
		})
	}
	if dsu.mutation.MaxOpenConnsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldMaxOpenConns,
		})
	}
	if value, ok := dsu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldRemark,
		})
	}
	if dsu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldRemark,
		})
	}
	if value, ok := dsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: datasource.FieldUpdatedAt,
		})
	}
	if value, ok := dsu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldCreateBy,
		})
	}
	if value, ok := dsu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldCreateBy,
		})
	}
	if value, ok := dsu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldUpdateBy,
		})
	}
	if value, ok := dsu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldUpdateBy,
		})
	}
	if value, ok := dsu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldTenantId,
		})
	}
	if value, ok := dsu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DataSourceUpdateOne is the builder for updating a single DataSource entity.
type DataSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DataSourceMutation
}

// SetDbName sets the "dbName" field.
func (dsuo *DataSourceUpdateOne) SetDbName(s string) *DataSourceUpdateOne {
	dsuo.mutation.SetDbName(s)
	return dsuo
}

// SetNillableDbName sets the "dbName" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableDbName(s *string) *DataSourceUpdateOne {
	if s != nil {
		dsuo.SetDbName(*s)
	}
	return dsuo
}

// ClearDbName clears the value of the "dbName" field.
func (dsuo *DataSourceUpdateOne) ClearDbName() *DataSourceUpdateOne {
	dsuo.mutation.ClearDbName()
	return dsuo
}

// SetHost sets the "host" field.
func (dsuo *DataSourceUpdateOne) SetHost(s string) *DataSourceUpdateOne {
	dsuo.mutation.SetHost(s)
	return dsuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableHost(s *string) *DataSourceUpdateOne {
	if s != nil {
		dsuo.SetHost(*s)
	}
	return dsuo
}

// ClearHost clears the value of the "host" field.
func (dsuo *DataSourceUpdateOne) ClearHost() *DataSourceUpdateOne {
	dsuo.mutation.ClearHost()
	return dsuo
}

// SetPort sets the "port" field.
func (dsuo *DataSourceUpdateOne) SetPort(i int32) *DataSourceUpdateOne {
	dsuo.mutation.ResetPort()
	dsuo.mutation.SetPort(i)
	return dsuo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillablePort(i *int32) *DataSourceUpdateOne {
	if i != nil {
		dsuo.SetPort(*i)
	}
	return dsuo
}

// AddPort adds i to the "port" field.
func (dsuo *DataSourceUpdateOne) AddPort(i int32) *DataSourceUpdateOne {
	dsuo.mutation.AddPort(i)
	return dsuo
}

// ClearPort clears the value of the "port" field.
func (dsuo *DataSourceUpdateOne) ClearPort() *DataSourceUpdateOne {
	dsuo.mutation.ClearPort()
	return dsuo
}

// SetDatabase sets the "database" field.
func (dsuo *DataSourceUpdateOne) SetDatabase(s string) *DataSourceUpdateOne {
	dsuo.mutation.SetDatabase(s)
	return dsuo
}

// SetNillableDatabase sets the "database" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableDatabase(s *string) *DataSourceUpdateOne {
	if s != nil {
		dsuo.SetDatabase(*s)
	}
	return dsuo
}

// ClearDatabase clears the value of the "database" field.
func (dsuo *DataSourceUpdateOne) ClearDatabase() *DataSourceUpdateOne {
	dsuo.mutation.ClearDatabase()
	return dsuo
}

// SetUserName sets the "userName" field.
func (dsuo *DataSourceUpdateOne) SetUserName(s string) *DataSourceUpdateOne {
	dsuo.mutation.SetUserName(s)
	return dsuo
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableUserName(s *string) *DataSourceUpdateOne {
	if s != nil {
		dsuo.SetUserName(*s)
	}
	return dsuo
}

// ClearUserName clears the value of the "userName" field.
func (dsuo *DataSourceUpdateOne) ClearUserName() *DataSourceUpdateOne {
	dsuo.mutation.ClearUserName()
	return dsuo
}

// SetPwd sets the "pwd" field.
func (dsuo *DataSourceUpdateOne) SetPwd(s string) *DataSourceUpdateOne {
	dsuo.mutation.SetPwd(s)
	return dsuo
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillablePwd(s *string) *DataSourceUpdateOne {
	if s != nil {
		dsuo.SetPwd(*s)
	}
	return dsuo
}

// ClearPwd clears the value of the "pwd" field.
func (dsuo *DataSourceUpdateOne) ClearPwd() *DataSourceUpdateOne {
	dsuo.mutation.ClearPwd()
	return dsuo
}

// SetStatus sets the "status" field.
func (dsuo *DataSourceUpdateOne) SetStatus(b bool) *DataSourceUpdateOne {
	dsuo.mutation.SetStatus(b)
	return dsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableStatus(b *bool) *DataSourceUpdateOne {
	if b != nil {
		dsuo.SetStatus(*b)
	}
	return dsuo
}

// ClearStatus clears the value of the "status" field.
func (dsuo *DataSourceUpdateOne) ClearStatus() *DataSourceUpdateOne {
	dsuo.mutation.ClearStatus()
	return dsuo
}

// SetDbType sets the "dbType" field.
func (dsuo *DataSourceUpdateOne) SetDbType(dt datasource.DbType) *DataSourceUpdateOne {
	dsuo.mutation.SetDbType(dt)
	return dsuo
}

// SetNillableDbType sets the "dbType" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableDbType(dt *datasource.DbType) *DataSourceUpdateOne {
	if dt != nil {
		dsuo.SetDbType(*dt)
	}
	return dsuo
}

// ClearDbType clears the value of the "dbType" field.
func (dsuo *DataSourceUpdateOne) ClearDbType() *DataSourceUpdateOne {
	dsuo.mutation.ClearDbType()
	return dsuo
}

// SetConnMaxIdleTime sets the "connMaxIdleTime" field.
func (dsuo *DataSourceUpdateOne) SetConnMaxIdleTime(i int32) *DataSourceUpdateOne {
	dsuo.mutation.ResetConnMaxIdleTime()
	dsuo.mutation.SetConnMaxIdleTime(i)
	return dsuo
}

// SetNillableConnMaxIdleTime sets the "connMaxIdleTime" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableConnMaxIdleTime(i *int32) *DataSourceUpdateOne {
	if i != nil {
		dsuo.SetConnMaxIdleTime(*i)
	}
	return dsuo
}

// AddConnMaxIdleTime adds i to the "connMaxIdleTime" field.
func (dsuo *DataSourceUpdateOne) AddConnMaxIdleTime(i int32) *DataSourceUpdateOne {
	dsuo.mutation.AddConnMaxIdleTime(i)
	return dsuo
}

// ClearConnMaxIdleTime clears the value of the "connMaxIdleTime" field.
func (dsuo *DataSourceUpdateOne) ClearConnMaxIdleTime() *DataSourceUpdateOne {
	dsuo.mutation.ClearConnMaxIdleTime()
	return dsuo
}

// SetConnMaxLifeTime sets the "connMaxLifeTime" field.
func (dsuo *DataSourceUpdateOne) SetConnMaxLifeTime(i int32) *DataSourceUpdateOne {
	dsuo.mutation.ResetConnMaxLifeTime()
	dsuo.mutation.SetConnMaxLifeTime(i)
	return dsuo
}

// SetNillableConnMaxLifeTime sets the "connMaxLifeTime" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableConnMaxLifeTime(i *int32) *DataSourceUpdateOne {
	if i != nil {
		dsuo.SetConnMaxLifeTime(*i)
	}
	return dsuo
}

// AddConnMaxLifeTime adds i to the "connMaxLifeTime" field.
func (dsuo *DataSourceUpdateOne) AddConnMaxLifeTime(i int32) *DataSourceUpdateOne {
	dsuo.mutation.AddConnMaxLifeTime(i)
	return dsuo
}

// ClearConnMaxLifeTime clears the value of the "connMaxLifeTime" field.
func (dsuo *DataSourceUpdateOne) ClearConnMaxLifeTime() *DataSourceUpdateOne {
	dsuo.mutation.ClearConnMaxLifeTime()
	return dsuo
}

// SetMaxIdleConns sets the "maxIdleConns" field.
func (dsuo *DataSourceUpdateOne) SetMaxIdleConns(i int32) *DataSourceUpdateOne {
	dsuo.mutation.ResetMaxIdleConns()
	dsuo.mutation.SetMaxIdleConns(i)
	return dsuo
}

// SetNillableMaxIdleConns sets the "maxIdleConns" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableMaxIdleConns(i *int32) *DataSourceUpdateOne {
	if i != nil {
		dsuo.SetMaxIdleConns(*i)
	}
	return dsuo
}

// AddMaxIdleConns adds i to the "maxIdleConns" field.
func (dsuo *DataSourceUpdateOne) AddMaxIdleConns(i int32) *DataSourceUpdateOne {
	dsuo.mutation.AddMaxIdleConns(i)
	return dsuo
}

// ClearMaxIdleConns clears the value of the "maxIdleConns" field.
func (dsuo *DataSourceUpdateOne) ClearMaxIdleConns() *DataSourceUpdateOne {
	dsuo.mutation.ClearMaxIdleConns()
	return dsuo
}

// SetMaxOpenConns sets the "maxOpenConns" field.
func (dsuo *DataSourceUpdateOne) SetMaxOpenConns(i int32) *DataSourceUpdateOne {
	dsuo.mutation.ResetMaxOpenConns()
	dsuo.mutation.SetMaxOpenConns(i)
	return dsuo
}

// SetNillableMaxOpenConns sets the "maxOpenConns" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableMaxOpenConns(i *int32) *DataSourceUpdateOne {
	if i != nil {
		dsuo.SetMaxOpenConns(*i)
	}
	return dsuo
}

// AddMaxOpenConns adds i to the "maxOpenConns" field.
func (dsuo *DataSourceUpdateOne) AddMaxOpenConns(i int32) *DataSourceUpdateOne {
	dsuo.mutation.AddMaxOpenConns(i)
	return dsuo
}

// ClearMaxOpenConns clears the value of the "maxOpenConns" field.
func (dsuo *DataSourceUpdateOne) ClearMaxOpenConns() *DataSourceUpdateOne {
	dsuo.mutation.ClearMaxOpenConns()
	return dsuo
}

// SetRemark sets the "remark" field.
func (dsuo *DataSourceUpdateOne) SetRemark(s string) *DataSourceUpdateOne {
	dsuo.mutation.SetRemark(s)
	return dsuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableRemark(s *string) *DataSourceUpdateOne {
	if s != nil {
		dsuo.SetRemark(*s)
	}
	return dsuo
}

// ClearRemark clears the value of the "remark" field.
func (dsuo *DataSourceUpdateOne) ClearRemark() *DataSourceUpdateOne {
	dsuo.mutation.ClearRemark()
	return dsuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (dsuo *DataSourceUpdateOne) SetUpdatedAt(t time.Time) *DataSourceUpdateOne {
	dsuo.mutation.SetUpdatedAt(t)
	return dsuo
}

// SetCreateBy sets the "createBy" field.
func (dsuo *DataSourceUpdateOne) SetCreateBy(i int64) *DataSourceUpdateOne {
	dsuo.mutation.ResetCreateBy()
	dsuo.mutation.SetCreateBy(i)
	return dsuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableCreateBy(i *int64) *DataSourceUpdateOne {
	if i != nil {
		dsuo.SetCreateBy(*i)
	}
	return dsuo
}

// AddCreateBy adds i to the "createBy" field.
func (dsuo *DataSourceUpdateOne) AddCreateBy(i int64) *DataSourceUpdateOne {
	dsuo.mutation.AddCreateBy(i)
	return dsuo
}

// SetUpdateBy sets the "updateBy" field.
func (dsuo *DataSourceUpdateOne) SetUpdateBy(i int64) *DataSourceUpdateOne {
	dsuo.mutation.ResetUpdateBy()
	dsuo.mutation.SetUpdateBy(i)
	return dsuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableUpdateBy(i *int64) *DataSourceUpdateOne {
	if i != nil {
		dsuo.SetUpdateBy(*i)
	}
	return dsuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (dsuo *DataSourceUpdateOne) AddUpdateBy(i int64) *DataSourceUpdateOne {
	dsuo.mutation.AddUpdateBy(i)
	return dsuo
}

// SetTenantId sets the "tenantId" field.
func (dsuo *DataSourceUpdateOne) SetTenantId(i int64) *DataSourceUpdateOne {
	dsuo.mutation.ResetTenantId()
	dsuo.mutation.SetTenantId(i)
	return dsuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableTenantId(i *int64) *DataSourceUpdateOne {
	if i != nil {
		dsuo.SetTenantId(*i)
	}
	return dsuo
}

// AddTenantId adds i to the "tenantId" field.
func (dsuo *DataSourceUpdateOne) AddTenantId(i int64) *DataSourceUpdateOne {
	dsuo.mutation.AddTenantId(i)
	return dsuo
}

// Mutation returns the DataSourceMutation object of the builder.
func (dsuo *DataSourceUpdateOne) Mutation() *DataSourceMutation {
	return dsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dsuo *DataSourceUpdateOne) Select(field string, fields ...string) *DataSourceUpdateOne {
	dsuo.fields = append([]string{field}, fields...)
	return dsuo
}

// Save executes the query and returns the updated DataSource entity.
func (dsuo *DataSourceUpdateOne) Save(ctx context.Context) (*DataSource, error) {
	var (
		err  error
		node *DataSource
	)
	dsuo.defaults()
	if len(dsuo.hooks) == 0 {
		if err = dsuo.check(); err != nil {
			return nil, err
		}
		node, err = dsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsuo.check(); err != nil {
				return nil, err
			}
			dsuo.mutation = mutation
			node, err = dsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dsuo.hooks) - 1; i >= 0; i-- {
			if dsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DataSourceUpdateOne) SaveX(ctx context.Context) *DataSource {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DataSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DataSourceUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsuo *DataSourceUpdateOne) defaults() {
	if _, ok := dsuo.mutation.UpdatedAt(); !ok {
		v := datasource.UpdateDefaultUpdatedAt()
		dsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsuo *DataSourceUpdateOne) check() error {
	if v, ok := dsuo.mutation.DbType(); ok {
		if err := datasource.DbTypeValidator(v); err != nil {
			return &ValidationError{Name: "dbType", err: fmt.Errorf(`ent: validator failed for field "DataSource.dbType": %w`, err)}
		}
	}
	return nil
}

func (dsuo *DataSourceUpdateOne) sqlSave(ctx context.Context) (_node *DataSource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datasource.Table,
			Columns: datasource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: datasource.FieldID,
			},
		},
	}
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DataSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, datasource.FieldID)
		for _, f := range fields {
			if !datasource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != datasource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.DbName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldDbName,
		})
	}
	if dsuo.mutation.DbNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldDbName,
		})
	}
	if value, ok := dsuo.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldHost,
		})
	}
	if dsuo.mutation.HostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldHost,
		})
	}
	if value, ok := dsuo.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldPort,
		})
	}
	if value, ok := dsuo.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldPort,
		})
	}
	if dsuo.mutation.PortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldPort,
		})
	}
	if value, ok := dsuo.mutation.Database(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldDatabase,
		})
	}
	if dsuo.mutation.DatabaseCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldDatabase,
		})
	}
	if value, ok := dsuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldUserName,
		})
	}
	if dsuo.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldUserName,
		})
	}
	if value, ok := dsuo.mutation.Pwd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldPwd,
		})
	}
	if dsuo.mutation.PwdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldPwd,
		})
	}
	if value, ok := dsuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: datasource.FieldStatus,
		})
	}
	if dsuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: datasource.FieldStatus,
		})
	}
	if value, ok := dsuo.mutation.DbType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: datasource.FieldDbType,
		})
	}
	if dsuo.mutation.DbTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: datasource.FieldDbType,
		})
	}
	if value, ok := dsuo.mutation.ConnMaxIdleTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxIdleTime,
		})
	}
	if value, ok := dsuo.mutation.AddedConnMaxIdleTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxIdleTime,
		})
	}
	if dsuo.mutation.ConnMaxIdleTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldConnMaxIdleTime,
		})
	}
	if value, ok := dsuo.mutation.ConnMaxLifeTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxLifeTime,
		})
	}
	if value, ok := dsuo.mutation.AddedConnMaxLifeTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxLifeTime,
		})
	}
	if dsuo.mutation.ConnMaxLifeTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldConnMaxLifeTime,
		})
	}
	if value, ok := dsuo.mutation.MaxIdleConns(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxIdleConns,
		})
	}
	if value, ok := dsuo.mutation.AddedMaxIdleConns(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxIdleConns,
		})
	}
	if dsuo.mutation.MaxIdleConnsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldMaxIdleConns,
		})
	}
	if value, ok := dsuo.mutation.MaxOpenConns(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxOpenConns,
		})
	}
	if value, ok := dsuo.mutation.AddedMaxOpenConns(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxOpenConns,
		})
	}
	if dsuo.mutation.MaxOpenConnsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: datasource.FieldMaxOpenConns,
		})
	}
	if value, ok := dsuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldRemark,
		})
	}
	if dsuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: datasource.FieldRemark,
		})
	}
	if value, ok := dsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: datasource.FieldUpdatedAt,
		})
	}
	if value, ok := dsuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldCreateBy,
		})
	}
	if value, ok := dsuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldCreateBy,
		})
	}
	if value, ok := dsuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldUpdateBy,
		})
	}
	if value, ok := dsuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldUpdateBy,
		})
	}
	if value, ok := dsuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldTenantId,
		})
	}
	if value, ok := dsuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldTenantId,
		})
	}
	_node = &DataSource{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
