// Code generated by entc, DO NOT EDIT.

package sysconfig

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ConfigName applies equality check predicate on the "configName" field. It's identical to ConfigNameEQ.
func ConfigName(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigName), v))
	})
}

// ConfigKey applies equality check predicate on the "configKey" field. It's identical to ConfigKeyEQ.
func ConfigKey(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigKey), v))
	})
}

// ConfigValue applies equality check predicate on the "configValue" field. It's identical to ConfigValueEQ.
func ConfigValue(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigValue), v))
	})
}

// ConfigType applies equality check predicate on the "configType" field. It's identical to ConfigTypeEQ.
func ConfigType(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigType), v))
	})
}

// IsFrontend applies equality check predicate on the "isFrontend" field. It's identical to IsFrontendEQ.
func IsFrontend(v int32) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFrontend), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// ConfigNameEQ applies the EQ predicate on the "configName" field.
func ConfigNameEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigName), v))
	})
}

// ConfigNameNEQ applies the NEQ predicate on the "configName" field.
func ConfigNameNEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConfigName), v))
	})
}

// ConfigNameIn applies the In predicate on the "configName" field.
func ConfigNameIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConfigName), v...))
	})
}

// ConfigNameNotIn applies the NotIn predicate on the "configName" field.
func ConfigNameNotIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConfigName), v...))
	})
}

// ConfigNameGT applies the GT predicate on the "configName" field.
func ConfigNameGT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConfigName), v))
	})
}

// ConfigNameGTE applies the GTE predicate on the "configName" field.
func ConfigNameGTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConfigName), v))
	})
}

// ConfigNameLT applies the LT predicate on the "configName" field.
func ConfigNameLT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConfigName), v))
	})
}

// ConfigNameLTE applies the LTE predicate on the "configName" field.
func ConfigNameLTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConfigName), v))
	})
}

// ConfigNameContains applies the Contains predicate on the "configName" field.
func ConfigNameContains(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConfigName), v))
	})
}

// ConfigNameHasPrefix applies the HasPrefix predicate on the "configName" field.
func ConfigNameHasPrefix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConfigName), v))
	})
}

// ConfigNameHasSuffix applies the HasSuffix predicate on the "configName" field.
func ConfigNameHasSuffix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConfigName), v))
	})
}

// ConfigNameIsNil applies the IsNil predicate on the "configName" field.
func ConfigNameIsNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConfigName)))
	})
}

// ConfigNameNotNil applies the NotNil predicate on the "configName" field.
func ConfigNameNotNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConfigName)))
	})
}

// ConfigNameEqualFold applies the EqualFold predicate on the "configName" field.
func ConfigNameEqualFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConfigName), v))
	})
}

// ConfigNameContainsFold applies the ContainsFold predicate on the "configName" field.
func ConfigNameContainsFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConfigName), v))
	})
}

// ConfigKeyEQ applies the EQ predicate on the "configKey" field.
func ConfigKeyEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyNEQ applies the NEQ predicate on the "configKey" field.
func ConfigKeyNEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyIn applies the In predicate on the "configKey" field.
func ConfigKeyIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConfigKey), v...))
	})
}

// ConfigKeyNotIn applies the NotIn predicate on the "configKey" field.
func ConfigKeyNotIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConfigKey), v...))
	})
}

// ConfigKeyGT applies the GT predicate on the "configKey" field.
func ConfigKeyGT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyGTE applies the GTE predicate on the "configKey" field.
func ConfigKeyGTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyLT applies the LT predicate on the "configKey" field.
func ConfigKeyLT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyLTE applies the LTE predicate on the "configKey" field.
func ConfigKeyLTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyContains applies the Contains predicate on the "configKey" field.
func ConfigKeyContains(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyHasPrefix applies the HasPrefix predicate on the "configKey" field.
func ConfigKeyHasPrefix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyHasSuffix applies the HasSuffix predicate on the "configKey" field.
func ConfigKeyHasSuffix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyIsNil applies the IsNil predicate on the "configKey" field.
func ConfigKeyIsNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConfigKey)))
	})
}

// ConfigKeyNotNil applies the NotNil predicate on the "configKey" field.
func ConfigKeyNotNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConfigKey)))
	})
}

// ConfigKeyEqualFold applies the EqualFold predicate on the "configKey" field.
func ConfigKeyEqualFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConfigKey), v))
	})
}

// ConfigKeyContainsFold applies the ContainsFold predicate on the "configKey" field.
func ConfigKeyContainsFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConfigKey), v))
	})
}

// ConfigValueEQ applies the EQ predicate on the "configValue" field.
func ConfigValueEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigValue), v))
	})
}

// ConfigValueNEQ applies the NEQ predicate on the "configValue" field.
func ConfigValueNEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConfigValue), v))
	})
}

// ConfigValueIn applies the In predicate on the "configValue" field.
func ConfigValueIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConfigValue), v...))
	})
}

// ConfigValueNotIn applies the NotIn predicate on the "configValue" field.
func ConfigValueNotIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConfigValue), v...))
	})
}

// ConfigValueGT applies the GT predicate on the "configValue" field.
func ConfigValueGT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConfigValue), v))
	})
}

// ConfigValueGTE applies the GTE predicate on the "configValue" field.
func ConfigValueGTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConfigValue), v))
	})
}

// ConfigValueLT applies the LT predicate on the "configValue" field.
func ConfigValueLT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConfigValue), v))
	})
}

// ConfigValueLTE applies the LTE predicate on the "configValue" field.
func ConfigValueLTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConfigValue), v))
	})
}

// ConfigValueContains applies the Contains predicate on the "configValue" field.
func ConfigValueContains(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConfigValue), v))
	})
}

// ConfigValueHasPrefix applies the HasPrefix predicate on the "configValue" field.
func ConfigValueHasPrefix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConfigValue), v))
	})
}

// ConfigValueHasSuffix applies the HasSuffix predicate on the "configValue" field.
func ConfigValueHasSuffix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConfigValue), v))
	})
}

// ConfigValueIsNil applies the IsNil predicate on the "configValue" field.
func ConfigValueIsNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConfigValue)))
	})
}

// ConfigValueNotNil applies the NotNil predicate on the "configValue" field.
func ConfigValueNotNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConfigValue)))
	})
}

// ConfigValueEqualFold applies the EqualFold predicate on the "configValue" field.
func ConfigValueEqualFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConfigValue), v))
	})
}

// ConfigValueContainsFold applies the ContainsFold predicate on the "configValue" field.
func ConfigValueContainsFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConfigValue), v))
	})
}

// ConfigTypeEQ applies the EQ predicate on the "configType" field.
func ConfigTypeEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConfigType), v))
	})
}

// ConfigTypeNEQ applies the NEQ predicate on the "configType" field.
func ConfigTypeNEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConfigType), v))
	})
}

// ConfigTypeIn applies the In predicate on the "configType" field.
func ConfigTypeIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConfigType), v...))
	})
}

// ConfigTypeNotIn applies the NotIn predicate on the "configType" field.
func ConfigTypeNotIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConfigType), v...))
	})
}

// ConfigTypeGT applies the GT predicate on the "configType" field.
func ConfigTypeGT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConfigType), v))
	})
}

// ConfigTypeGTE applies the GTE predicate on the "configType" field.
func ConfigTypeGTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConfigType), v))
	})
}

// ConfigTypeLT applies the LT predicate on the "configType" field.
func ConfigTypeLT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConfigType), v))
	})
}

// ConfigTypeLTE applies the LTE predicate on the "configType" field.
func ConfigTypeLTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConfigType), v))
	})
}

// ConfigTypeContains applies the Contains predicate on the "configType" field.
func ConfigTypeContains(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConfigType), v))
	})
}

// ConfigTypeHasPrefix applies the HasPrefix predicate on the "configType" field.
func ConfigTypeHasPrefix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConfigType), v))
	})
}

// ConfigTypeHasSuffix applies the HasSuffix predicate on the "configType" field.
func ConfigTypeHasSuffix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConfigType), v))
	})
}

// ConfigTypeIsNil applies the IsNil predicate on the "configType" field.
func ConfigTypeIsNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConfigType)))
	})
}

// ConfigTypeNotNil applies the NotNil predicate on the "configType" field.
func ConfigTypeNotNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConfigType)))
	})
}

// ConfigTypeEqualFold applies the EqualFold predicate on the "configType" field.
func ConfigTypeEqualFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConfigType), v))
	})
}

// ConfigTypeContainsFold applies the ContainsFold predicate on the "configType" field.
func ConfigTypeContainsFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConfigType), v))
	})
}

// IsFrontendEQ applies the EQ predicate on the "isFrontend" field.
func IsFrontendEQ(v int32) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFrontend), v))
	})
}

// IsFrontendNEQ applies the NEQ predicate on the "isFrontend" field.
func IsFrontendNEQ(v int32) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsFrontend), v))
	})
}

// IsFrontendIn applies the In predicate on the "isFrontend" field.
func IsFrontendIn(vs ...int32) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsFrontend), v...))
	})
}

// IsFrontendNotIn applies the NotIn predicate on the "isFrontend" field.
func IsFrontendNotIn(vs ...int32) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsFrontend), v...))
	})
}

// IsFrontendGT applies the GT predicate on the "isFrontend" field.
func IsFrontendGT(v int32) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsFrontend), v))
	})
}

// IsFrontendGTE applies the GTE predicate on the "isFrontend" field.
func IsFrontendGTE(v int32) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsFrontend), v))
	})
}

// IsFrontendLT applies the LT predicate on the "isFrontend" field.
func IsFrontendLT(v int32) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsFrontend), v))
	})
}

// IsFrontendLTE applies the LTE predicate on the "isFrontend" field.
func IsFrontendLTE(v int32) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsFrontend), v))
	})
}

// IsFrontendIsNil applies the IsNil predicate on the "isFrontend" field.
func IsFrontendIsNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsFrontend)))
	})
}

// IsFrontendNotNil applies the NotNil predicate on the "isFrontend" field.
func IsFrontendNotNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsFrontend)))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysConfig) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysConfig) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysConfig) predicate.SysConfig {
	return predicate.SysConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
