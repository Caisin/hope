// Code generated by entc, DO NOT EDIT.

package pageconfig

import (
	"hope/apps/param/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PageCode applies equality check predicate on the "pageCode" field. It's identical to PageCodeEQ.
func PageCode(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageCode), v))
	})
}

// PageName applies equality check predicate on the "pageName" field. It's identical to PageNameEQ.
func PageName(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageName), v))
	})
}

// GroupCodes applies equality check predicate on the "groupCodes" field. It's identical to GroupCodesEQ.
func GroupCodes(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCodes), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// PageCodeEQ applies the EQ predicate on the "pageCode" field.
func PageCodeEQ(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageCode), v))
	})
}

// PageCodeNEQ applies the NEQ predicate on the "pageCode" field.
func PageCodeNEQ(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPageCode), v))
	})
}

// PageCodeIn applies the In predicate on the "pageCode" field.
func PageCodeIn(vs ...string) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPageCode), v...))
	})
}

// PageCodeNotIn applies the NotIn predicate on the "pageCode" field.
func PageCodeNotIn(vs ...string) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPageCode), v...))
	})
}

// PageCodeGT applies the GT predicate on the "pageCode" field.
func PageCodeGT(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPageCode), v))
	})
}

// PageCodeGTE applies the GTE predicate on the "pageCode" field.
func PageCodeGTE(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPageCode), v))
	})
}

// PageCodeLT applies the LT predicate on the "pageCode" field.
func PageCodeLT(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPageCode), v))
	})
}

// PageCodeLTE applies the LTE predicate on the "pageCode" field.
func PageCodeLTE(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPageCode), v))
	})
}

// PageCodeContains applies the Contains predicate on the "pageCode" field.
func PageCodeContains(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPageCode), v))
	})
}

// PageCodeHasPrefix applies the HasPrefix predicate on the "pageCode" field.
func PageCodeHasPrefix(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPageCode), v))
	})
}

// PageCodeHasSuffix applies the HasSuffix predicate on the "pageCode" field.
func PageCodeHasSuffix(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPageCode), v))
	})
}

// PageCodeIsNil applies the IsNil predicate on the "pageCode" field.
func PageCodeIsNil() predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPageCode)))
	})
}

// PageCodeNotNil applies the NotNil predicate on the "pageCode" field.
func PageCodeNotNil() predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPageCode)))
	})
}

// PageCodeEqualFold applies the EqualFold predicate on the "pageCode" field.
func PageCodeEqualFold(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPageCode), v))
	})
}

// PageCodeContainsFold applies the ContainsFold predicate on the "pageCode" field.
func PageCodeContainsFold(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPageCode), v))
	})
}

// PageNameEQ applies the EQ predicate on the "pageName" field.
func PageNameEQ(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageName), v))
	})
}

// PageNameNEQ applies the NEQ predicate on the "pageName" field.
func PageNameNEQ(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPageName), v))
	})
}

// PageNameIn applies the In predicate on the "pageName" field.
func PageNameIn(vs ...string) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPageName), v...))
	})
}

// PageNameNotIn applies the NotIn predicate on the "pageName" field.
func PageNameNotIn(vs ...string) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPageName), v...))
	})
}

// PageNameGT applies the GT predicate on the "pageName" field.
func PageNameGT(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPageName), v))
	})
}

// PageNameGTE applies the GTE predicate on the "pageName" field.
func PageNameGTE(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPageName), v))
	})
}

// PageNameLT applies the LT predicate on the "pageName" field.
func PageNameLT(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPageName), v))
	})
}

// PageNameLTE applies the LTE predicate on the "pageName" field.
func PageNameLTE(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPageName), v))
	})
}

// PageNameContains applies the Contains predicate on the "pageName" field.
func PageNameContains(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPageName), v))
	})
}

// PageNameHasPrefix applies the HasPrefix predicate on the "pageName" field.
func PageNameHasPrefix(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPageName), v))
	})
}

// PageNameHasSuffix applies the HasSuffix predicate on the "pageName" field.
func PageNameHasSuffix(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPageName), v))
	})
}

// PageNameIsNil applies the IsNil predicate on the "pageName" field.
func PageNameIsNil() predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPageName)))
	})
}

// PageNameNotNil applies the NotNil predicate on the "pageName" field.
func PageNameNotNil() predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPageName)))
	})
}

// PageNameEqualFold applies the EqualFold predicate on the "pageName" field.
func PageNameEqualFold(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPageName), v))
	})
}

// PageNameContainsFold applies the ContainsFold predicate on the "pageName" field.
func PageNameContainsFold(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPageName), v))
	})
}

// GroupCodesEQ applies the EQ predicate on the "groupCodes" field.
func GroupCodesEQ(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesNEQ applies the NEQ predicate on the "groupCodes" field.
func GroupCodesNEQ(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesIn applies the In predicate on the "groupCodes" field.
func GroupCodesIn(vs ...string) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupCodes), v...))
	})
}

// GroupCodesNotIn applies the NotIn predicate on the "groupCodes" field.
func GroupCodesNotIn(vs ...string) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupCodes), v...))
	})
}

// GroupCodesGT applies the GT predicate on the "groupCodes" field.
func GroupCodesGT(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesGTE applies the GTE predicate on the "groupCodes" field.
func GroupCodesGTE(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesLT applies the LT predicate on the "groupCodes" field.
func GroupCodesLT(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesLTE applies the LTE predicate on the "groupCodes" field.
func GroupCodesLTE(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesContains applies the Contains predicate on the "groupCodes" field.
func GroupCodesContains(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesHasPrefix applies the HasPrefix predicate on the "groupCodes" field.
func GroupCodesHasPrefix(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesHasSuffix applies the HasSuffix predicate on the "groupCodes" field.
func GroupCodesHasSuffix(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesIsNil applies the IsNil predicate on the "groupCodes" field.
func GroupCodesIsNil() predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupCodes)))
	})
}

// GroupCodesNotNil applies the NotNil predicate on the "groupCodes" field.
func GroupCodesNotNil() predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupCodes)))
	})
}

// GroupCodesEqualFold applies the EqualFold predicate on the "groupCodes" field.
func GroupCodesEqualFold(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupCodes), v))
	})
}

// GroupCodesContainsFold applies the ContainsFold predicate on the "groupCodes" field.
func GroupCodesContainsFold(v string) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupCodes), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.PageConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PageConfig) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PageConfig) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PageConfig) predicate.PageConfig {
	return predicate.PageConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
