// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type NovelChapterHTTPServer interface {
	BatchDeleteNovelChapter(context.Context, *NovelChapterBatchDeleteReq) (*NovelChapterDeleteReply, error)
	CreateNovelChapter(context.Context, *NovelChapterCreateReq) (*NovelChapterCreateReply, error)
	DeleteNovelChapter(context.Context, *NovelChapterDeleteReq) (*NovelChapterDeleteReply, error)
	GetNovelChapter(context.Context, *NovelChapterReq) (*NovelChapterReply, error)
	GetPageNovelChapter(context.Context, *NovelChapterPageReq) (*NovelChapterPageReply, error)
	UpdateNovelChapter(context.Context, *NovelChapterUpdateReq) (*NovelChapterUpdateReply, error)
}

func RegisterNovelChapterHTTPServer(s *http.Server, srv NovelChapterHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/novelchapter/page", _NovelChapter_GetPageNovelChapter0_HTTP_Handler(srv))
	r.GET("/v1/novelchapter/{id}", _NovelChapter_GetNovelChapter0_HTTP_Handler(srv))
	r.PUT("/v1/novelchapter/{id}", _NovelChapter_UpdateNovelChapter0_HTTP_Handler(srv))
	r.POST("/v1/novelchapter", _NovelChapter_CreateNovelChapter0_HTTP_Handler(srv))
	r.DELETE("/v1/novelchapter/{id}", _NovelChapter_DeleteNovelChapter0_HTTP_Handler(srv))
	r.DELETE("/v1/novelchapter", _NovelChapter_BatchDeleteNovelChapter0_HTTP_Handler(srv))
}

func _NovelChapter_GetPageNovelChapter0_HTTP_Handler(srv NovelChapterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelChapterPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelchapter.v1.NovelChapter/GetPageNovelChapter")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageNovelChapter(ctx, req.(*NovelChapterPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelChapterPageReply)
		return ctx.Result(200, reply)
	}
}

func _NovelChapter_GetNovelChapter0_HTTP_Handler(srv NovelChapterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelChapterReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelchapter.v1.NovelChapter/GetNovelChapter")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNovelChapter(ctx, req.(*NovelChapterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelChapterReply)
		return ctx.Result(200, reply)
	}
}

func _NovelChapter_UpdateNovelChapter0_HTTP_Handler(srv NovelChapterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelChapterUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelchapter.v1.NovelChapter/UpdateNovelChapter")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNovelChapter(ctx, req.(*NovelChapterUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelChapterUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _NovelChapter_CreateNovelChapter0_HTTP_Handler(srv NovelChapterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelChapterCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelchapter.v1.NovelChapter/CreateNovelChapter")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNovelChapter(ctx, req.(*NovelChapterCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelChapterCreateReply)
		return ctx.Result(200, reply)
	}
}

func _NovelChapter_DeleteNovelChapter0_HTTP_Handler(srv NovelChapterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelChapterDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelchapter.v1.NovelChapter/DeleteNovelChapter")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNovelChapter(ctx, req.(*NovelChapterDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelChapterDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _NovelChapter_BatchDeleteNovelChapter0_HTTP_Handler(srv NovelChapterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelChapterBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelchapter.v1.NovelChapter/BatchDeleteNovelChapter")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteNovelChapter(ctx, req.(*NovelChapterBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelChapterDeleteReply)
		return ctx.Result(200, reply)
	}
}

type NovelChapterHTTPClient interface {
	BatchDeleteNovelChapter(ctx context.Context, req *NovelChapterBatchDeleteReq, opts ...http.CallOption) (rsp *NovelChapterDeleteReply, err error)
	CreateNovelChapter(ctx context.Context, req *NovelChapterCreateReq, opts ...http.CallOption) (rsp *NovelChapterCreateReply, err error)
	DeleteNovelChapter(ctx context.Context, req *NovelChapterDeleteReq, opts ...http.CallOption) (rsp *NovelChapterDeleteReply, err error)
	GetNovelChapter(ctx context.Context, req *NovelChapterReq, opts ...http.CallOption) (rsp *NovelChapterReply, err error)
	GetPageNovelChapter(ctx context.Context, req *NovelChapterPageReq, opts ...http.CallOption) (rsp *NovelChapterPageReply, err error)
	UpdateNovelChapter(ctx context.Context, req *NovelChapterUpdateReq, opts ...http.CallOption) (rsp *NovelChapterUpdateReply, err error)
}

type NovelChapterHTTPClientImpl struct {
	cc *http.Client
}

func NewNovelChapterHTTPClient(client *http.Client) NovelChapterHTTPClient {
	return &NovelChapterHTTPClientImpl{client}
}

func (c *NovelChapterHTTPClientImpl) BatchDeleteNovelChapter(ctx context.Context, in *NovelChapterBatchDeleteReq, opts ...http.CallOption) (*NovelChapterDeleteReply, error) {
	var out NovelChapterDeleteReply
	pattern := "/v1/novelchapter"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelchapter.v1.NovelChapter/BatchDeleteNovelChapter"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelChapterHTTPClientImpl) CreateNovelChapter(ctx context.Context, in *NovelChapterCreateReq, opts ...http.CallOption) (*NovelChapterCreateReply, error) {
	var out NovelChapterCreateReply
	pattern := "/v1/novelchapter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/novelchapter.v1.NovelChapter/CreateNovelChapter"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelChapterHTTPClientImpl) DeleteNovelChapter(ctx context.Context, in *NovelChapterDeleteReq, opts ...http.CallOption) (*NovelChapterDeleteReply, error) {
	var out NovelChapterDeleteReply
	pattern := "/v1/novelchapter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelchapter.v1.NovelChapter/DeleteNovelChapter"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelChapterHTTPClientImpl) GetNovelChapter(ctx context.Context, in *NovelChapterReq, opts ...http.CallOption) (*NovelChapterReply, error) {
	var out NovelChapterReply
	pattern := "/v1/novelchapter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelchapter.v1.NovelChapter/GetNovelChapter"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelChapterHTTPClientImpl) GetPageNovelChapter(ctx context.Context, in *NovelChapterPageReq, opts ...http.CallOption) (*NovelChapterPageReply, error) {
	var out NovelChapterPageReply
	pattern := "/v1/novelchapter/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelchapter.v1.NovelChapter/GetPageNovelChapter"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelChapterHTTPClientImpl) UpdateNovelChapter(ctx context.Context, in *NovelChapterUpdateReq, opts ...http.CallOption) (*NovelChapterUpdateReply, error) {
	var out NovelChapterUpdateReply
	pattern := "/v1/novelchapter/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/novelchapter.v1.NovelChapter/UpdateNovelChapter"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
