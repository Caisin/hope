// Code generated by entc, DO NOT EDIT.

package tasklog

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// TaskGroup applies equality check predicate on the "taskGroup" field. It's identical to TaskGroupEQ.
func TaskGroup(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskGroup), v))
	})
}

// TaskCode applies equality check predicate on the "taskCode" field. It's identical to TaskCodeEQ.
func TaskCode(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskCode), v))
	})
}

// TaskId applies equality check predicate on the "taskId" field. It's identical to TaskIdEQ.
func TaskId(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskId), v))
	})
}

// TaskName applies equality check predicate on the "taskName" field. It's identical to TaskNameEQ.
func TaskName(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskName), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Reward applies equality check predicate on the "reward" field. It's identical to RewardEQ.
func Reward(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReward), v))
	})
}

// AmountItem applies equality check predicate on the "amountItem" field. It's identical to AmountItemEQ.
func AmountItem(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountItem), v))
	})
}

// RewardItem applies equality check predicate on the "rewardItem" field. It's identical to RewardItemEQ.
func RewardItem(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRewardItem), v))
	})
}

// TargetAmount applies equality check predicate on the "targetAmount" field. It's identical to TargetAmountEQ.
func TargetAmount(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetAmount), v))
	})
}

// DoneAmount applies equality check predicate on the "doneAmount" field. It's identical to DoneAmountEQ.
func DoneAmount(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoneAmount), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// DoneAt applies equality check predicate on the "doneAt" field. It's identical to DoneAtEQ.
func DoneAt(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoneAt), v))
	})
}

// ObtainAt applies equality check predicate on the "obtainAt" field. It's identical to ObtainAtEQ.
func ObtainAt(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObtainAt), v))
	})
}

// DoneTimes applies equality check predicate on the "doneTimes" field. It's identical to DoneTimesEQ.
func DoneTimes(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoneTimes), v))
	})
}

// AllTimes applies equality check predicate on the "allTimes" field. It's identical to AllTimesEQ.
func AllTimes(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllTimes), v))
	})
}

// EffectTime applies equality check predicate on the "effectTime" field. It's identical to EffectTimeEQ.
func EffectTime(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// ExpiredTime applies equality check predicate on the "expiredTime" field. It's identical to ExpiredTimeEQ.
func ExpiredTime(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserId)))
	})
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserId)))
	})
}

// TaskGroupEQ applies the EQ predicate on the "taskGroup" field.
func TaskGroupEQ(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupNEQ applies the NEQ predicate on the "taskGroup" field.
func TaskGroupNEQ(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupIn applies the In predicate on the "taskGroup" field.
func TaskGroupIn(vs ...string) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskGroup), v...))
	})
}

// TaskGroupNotIn applies the NotIn predicate on the "taskGroup" field.
func TaskGroupNotIn(vs ...string) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskGroup), v...))
	})
}

// TaskGroupGT applies the GT predicate on the "taskGroup" field.
func TaskGroupGT(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupGTE applies the GTE predicate on the "taskGroup" field.
func TaskGroupGTE(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupLT applies the LT predicate on the "taskGroup" field.
func TaskGroupLT(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupLTE applies the LTE predicate on the "taskGroup" field.
func TaskGroupLTE(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupContains applies the Contains predicate on the "taskGroup" field.
func TaskGroupContains(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupHasPrefix applies the HasPrefix predicate on the "taskGroup" field.
func TaskGroupHasPrefix(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupHasSuffix applies the HasSuffix predicate on the "taskGroup" field.
func TaskGroupHasSuffix(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupIsNil applies the IsNil predicate on the "taskGroup" field.
func TaskGroupIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskGroup)))
	})
}

// TaskGroupNotNil applies the NotNil predicate on the "taskGroup" field.
func TaskGroupNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskGroup)))
	})
}

// TaskGroupEqualFold applies the EqualFold predicate on the "taskGroup" field.
func TaskGroupEqualFold(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskGroup), v))
	})
}

// TaskGroupContainsFold applies the ContainsFold predicate on the "taskGroup" field.
func TaskGroupContainsFold(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskGroup), v))
	})
}

// TaskCodeEQ applies the EQ predicate on the "taskCode" field.
func TaskCodeEQ(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskCode), v))
	})
}

// TaskCodeNEQ applies the NEQ predicate on the "taskCode" field.
func TaskCodeNEQ(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskCode), v))
	})
}

// TaskCodeIn applies the In predicate on the "taskCode" field.
func TaskCodeIn(vs ...string) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskCode), v...))
	})
}

// TaskCodeNotIn applies the NotIn predicate on the "taskCode" field.
func TaskCodeNotIn(vs ...string) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskCode), v...))
	})
}

// TaskCodeGT applies the GT predicate on the "taskCode" field.
func TaskCodeGT(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskCode), v))
	})
}

// TaskCodeGTE applies the GTE predicate on the "taskCode" field.
func TaskCodeGTE(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskCode), v))
	})
}

// TaskCodeLT applies the LT predicate on the "taskCode" field.
func TaskCodeLT(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskCode), v))
	})
}

// TaskCodeLTE applies the LTE predicate on the "taskCode" field.
func TaskCodeLTE(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskCode), v))
	})
}

// TaskCodeContains applies the Contains predicate on the "taskCode" field.
func TaskCodeContains(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskCode), v))
	})
}

// TaskCodeHasPrefix applies the HasPrefix predicate on the "taskCode" field.
func TaskCodeHasPrefix(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskCode), v))
	})
}

// TaskCodeHasSuffix applies the HasSuffix predicate on the "taskCode" field.
func TaskCodeHasSuffix(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskCode), v))
	})
}

// TaskCodeIsNil applies the IsNil predicate on the "taskCode" field.
func TaskCodeIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskCode)))
	})
}

// TaskCodeNotNil applies the NotNil predicate on the "taskCode" field.
func TaskCodeNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskCode)))
	})
}

// TaskCodeEqualFold applies the EqualFold predicate on the "taskCode" field.
func TaskCodeEqualFold(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskCode), v))
	})
}

// TaskCodeContainsFold applies the ContainsFold predicate on the "taskCode" field.
func TaskCodeContainsFold(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskCode), v))
	})
}

// TaskIdEQ applies the EQ predicate on the "taskId" field.
func TaskIdEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskId), v))
	})
}

// TaskIdNEQ applies the NEQ predicate on the "taskId" field.
func TaskIdNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskId), v))
	})
}

// TaskIdIn applies the In predicate on the "taskId" field.
func TaskIdIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskId), v...))
	})
}

// TaskIdNotIn applies the NotIn predicate on the "taskId" field.
func TaskIdNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskId), v...))
	})
}

// TaskIdGT applies the GT predicate on the "taskId" field.
func TaskIdGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskId), v))
	})
}

// TaskIdGTE applies the GTE predicate on the "taskId" field.
func TaskIdGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskId), v))
	})
}

// TaskIdLT applies the LT predicate on the "taskId" field.
func TaskIdLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskId), v))
	})
}

// TaskIdLTE applies the LTE predicate on the "taskId" field.
func TaskIdLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskId), v))
	})
}

// TaskIdIsNil applies the IsNil predicate on the "taskId" field.
func TaskIdIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskId)))
	})
}

// TaskIdNotNil applies the NotNil predicate on the "taskId" field.
func TaskIdNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskId)))
	})
}

// TaskNameEQ applies the EQ predicate on the "taskName" field.
func TaskNameEQ(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskName), v))
	})
}

// TaskNameNEQ applies the NEQ predicate on the "taskName" field.
func TaskNameNEQ(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskName), v))
	})
}

// TaskNameIn applies the In predicate on the "taskName" field.
func TaskNameIn(vs ...string) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskName), v...))
	})
}

// TaskNameNotIn applies the NotIn predicate on the "taskName" field.
func TaskNameNotIn(vs ...string) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskName), v...))
	})
}

// TaskNameGT applies the GT predicate on the "taskName" field.
func TaskNameGT(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskName), v))
	})
}

// TaskNameGTE applies the GTE predicate on the "taskName" field.
func TaskNameGTE(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskName), v))
	})
}

// TaskNameLT applies the LT predicate on the "taskName" field.
func TaskNameLT(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskName), v))
	})
}

// TaskNameLTE applies the LTE predicate on the "taskName" field.
func TaskNameLTE(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskName), v))
	})
}

// TaskNameContains applies the Contains predicate on the "taskName" field.
func TaskNameContains(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaskName), v))
	})
}

// TaskNameHasPrefix applies the HasPrefix predicate on the "taskName" field.
func TaskNameHasPrefix(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaskName), v))
	})
}

// TaskNameHasSuffix applies the HasSuffix predicate on the "taskName" field.
func TaskNameHasSuffix(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaskName), v))
	})
}

// TaskNameIsNil applies the IsNil predicate on the "taskName" field.
func TaskNameIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskName)))
	})
}

// TaskNameNotNil applies the NotNil predicate on the "taskName" field.
func TaskNameNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskName)))
	})
}

// TaskNameEqualFold applies the EqualFold predicate on the "taskName" field.
func TaskNameEqualFold(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaskName), v))
	})
}

// TaskNameContainsFold applies the ContainsFold predicate on the "taskName" field.
func TaskNameContainsFold(v string) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaskName), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// RewardEQ applies the EQ predicate on the "reward" field.
func RewardEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReward), v))
	})
}

// RewardNEQ applies the NEQ predicate on the "reward" field.
func RewardNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReward), v))
	})
}

// RewardIn applies the In predicate on the "reward" field.
func RewardIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReward), v...))
	})
}

// RewardNotIn applies the NotIn predicate on the "reward" field.
func RewardNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReward), v...))
	})
}

// RewardGT applies the GT predicate on the "reward" field.
func RewardGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReward), v))
	})
}

// RewardGTE applies the GTE predicate on the "reward" field.
func RewardGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReward), v))
	})
}

// RewardLT applies the LT predicate on the "reward" field.
func RewardLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReward), v))
	})
}

// RewardLTE applies the LTE predicate on the "reward" field.
func RewardLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReward), v))
	})
}

// RewardIsNil applies the IsNil predicate on the "reward" field.
func RewardIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReward)))
	})
}

// RewardNotNil applies the NotNil predicate on the "reward" field.
func RewardNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReward)))
	})
}

// AmountItemEQ applies the EQ predicate on the "amountItem" field.
func AmountItemEQ(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountItem), v))
	})
}

// AmountItemNEQ applies the NEQ predicate on the "amountItem" field.
func AmountItemNEQ(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmountItem), v))
	})
}

// AmountItemIn applies the In predicate on the "amountItem" field.
func AmountItemIn(vs ...int32) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmountItem), v...))
	})
}

// AmountItemNotIn applies the NotIn predicate on the "amountItem" field.
func AmountItemNotIn(vs ...int32) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmountItem), v...))
	})
}

// AmountItemGT applies the GT predicate on the "amountItem" field.
func AmountItemGT(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmountItem), v))
	})
}

// AmountItemGTE applies the GTE predicate on the "amountItem" field.
func AmountItemGTE(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmountItem), v))
	})
}

// AmountItemLT applies the LT predicate on the "amountItem" field.
func AmountItemLT(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmountItem), v))
	})
}

// AmountItemLTE applies the LTE predicate on the "amountItem" field.
func AmountItemLTE(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmountItem), v))
	})
}

// AmountItemIsNil applies the IsNil predicate on the "amountItem" field.
func AmountItemIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmountItem)))
	})
}

// AmountItemNotNil applies the NotNil predicate on the "amountItem" field.
func AmountItemNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmountItem)))
	})
}

// RewardItemEQ applies the EQ predicate on the "rewardItem" field.
func RewardItemEQ(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRewardItem), v))
	})
}

// RewardItemNEQ applies the NEQ predicate on the "rewardItem" field.
func RewardItemNEQ(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRewardItem), v))
	})
}

// RewardItemIn applies the In predicate on the "rewardItem" field.
func RewardItemIn(vs ...int32) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRewardItem), v...))
	})
}

// RewardItemNotIn applies the NotIn predicate on the "rewardItem" field.
func RewardItemNotIn(vs ...int32) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRewardItem), v...))
	})
}

// RewardItemGT applies the GT predicate on the "rewardItem" field.
func RewardItemGT(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRewardItem), v))
	})
}

// RewardItemGTE applies the GTE predicate on the "rewardItem" field.
func RewardItemGTE(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRewardItem), v))
	})
}

// RewardItemLT applies the LT predicate on the "rewardItem" field.
func RewardItemLT(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRewardItem), v))
	})
}

// RewardItemLTE applies the LTE predicate on the "rewardItem" field.
func RewardItemLTE(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRewardItem), v))
	})
}

// RewardItemIsNil applies the IsNil predicate on the "rewardItem" field.
func RewardItemIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRewardItem)))
	})
}

// RewardItemNotNil applies the NotNil predicate on the "rewardItem" field.
func RewardItemNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRewardItem)))
	})
}

// TargetAmountEQ applies the EQ predicate on the "targetAmount" field.
func TargetAmountEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountNEQ applies the NEQ predicate on the "targetAmount" field.
func TargetAmountNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountIn applies the In predicate on the "targetAmount" field.
func TargetAmountIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTargetAmount), v...))
	})
}

// TargetAmountNotIn applies the NotIn predicate on the "targetAmount" field.
func TargetAmountNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTargetAmount), v...))
	})
}

// TargetAmountGT applies the GT predicate on the "targetAmount" field.
func TargetAmountGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountGTE applies the GTE predicate on the "targetAmount" field.
func TargetAmountGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountLT applies the LT predicate on the "targetAmount" field.
func TargetAmountLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountLTE applies the LTE predicate on the "targetAmount" field.
func TargetAmountLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetAmount), v))
	})
}

// TargetAmountIsNil applies the IsNil predicate on the "targetAmount" field.
func TargetAmountIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetAmount)))
	})
}

// TargetAmountNotNil applies the NotNil predicate on the "targetAmount" field.
func TargetAmountNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetAmount)))
	})
}

// DoneAmountEQ applies the EQ predicate on the "doneAmount" field.
func DoneAmountEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoneAmount), v))
	})
}

// DoneAmountNEQ applies the NEQ predicate on the "doneAmount" field.
func DoneAmountNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoneAmount), v))
	})
}

// DoneAmountIn applies the In predicate on the "doneAmount" field.
func DoneAmountIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoneAmount), v...))
	})
}

// DoneAmountNotIn applies the NotIn predicate on the "doneAmount" field.
func DoneAmountNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoneAmount), v...))
	})
}

// DoneAmountGT applies the GT predicate on the "doneAmount" field.
func DoneAmountGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoneAmount), v))
	})
}

// DoneAmountGTE applies the GTE predicate on the "doneAmount" field.
func DoneAmountGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoneAmount), v))
	})
}

// DoneAmountLT applies the LT predicate on the "doneAmount" field.
func DoneAmountLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoneAmount), v))
	})
}

// DoneAmountLTE applies the LTE predicate on the "doneAmount" field.
func DoneAmountLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoneAmount), v))
	})
}

// DoneAmountIsNil applies the IsNil predicate on the "doneAmount" field.
func DoneAmountIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDoneAmount)))
	})
}

// DoneAmountNotNil applies the NotNil predicate on the "doneAmount" field.
func DoneAmountNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDoneAmount)))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// DoneAtEQ applies the EQ predicate on the "doneAt" field.
func DoneAtEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoneAt), v))
	})
}

// DoneAtNEQ applies the NEQ predicate on the "doneAt" field.
func DoneAtNEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoneAt), v))
	})
}

// DoneAtIn applies the In predicate on the "doneAt" field.
func DoneAtIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoneAt), v...))
	})
}

// DoneAtNotIn applies the NotIn predicate on the "doneAt" field.
func DoneAtNotIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoneAt), v...))
	})
}

// DoneAtGT applies the GT predicate on the "doneAt" field.
func DoneAtGT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoneAt), v))
	})
}

// DoneAtGTE applies the GTE predicate on the "doneAt" field.
func DoneAtGTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoneAt), v))
	})
}

// DoneAtLT applies the LT predicate on the "doneAt" field.
func DoneAtLT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoneAt), v))
	})
}

// DoneAtLTE applies the LTE predicate on the "doneAt" field.
func DoneAtLTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoneAt), v))
	})
}

// DoneAtIsNil applies the IsNil predicate on the "doneAt" field.
func DoneAtIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDoneAt)))
	})
}

// DoneAtNotNil applies the NotNil predicate on the "doneAt" field.
func DoneAtNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDoneAt)))
	})
}

// ObtainAtEQ applies the EQ predicate on the "obtainAt" field.
func ObtainAtEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldObtainAt), v))
	})
}

// ObtainAtNEQ applies the NEQ predicate on the "obtainAt" field.
func ObtainAtNEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldObtainAt), v))
	})
}

// ObtainAtIn applies the In predicate on the "obtainAt" field.
func ObtainAtIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldObtainAt), v...))
	})
}

// ObtainAtNotIn applies the NotIn predicate on the "obtainAt" field.
func ObtainAtNotIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldObtainAt), v...))
	})
}

// ObtainAtGT applies the GT predicate on the "obtainAt" field.
func ObtainAtGT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldObtainAt), v))
	})
}

// ObtainAtGTE applies the GTE predicate on the "obtainAt" field.
func ObtainAtGTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldObtainAt), v))
	})
}

// ObtainAtLT applies the LT predicate on the "obtainAt" field.
func ObtainAtLT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldObtainAt), v))
	})
}

// ObtainAtLTE applies the LTE predicate on the "obtainAt" field.
func ObtainAtLTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldObtainAt), v))
	})
}

// ObtainAtIsNil applies the IsNil predicate on the "obtainAt" field.
func ObtainAtIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldObtainAt)))
	})
}

// ObtainAtNotNil applies the NotNil predicate on the "obtainAt" field.
func ObtainAtNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldObtainAt)))
	})
}

// DoneTimesEQ applies the EQ predicate on the "doneTimes" field.
func DoneTimesEQ(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoneTimes), v))
	})
}

// DoneTimesNEQ applies the NEQ predicate on the "doneTimes" field.
func DoneTimesNEQ(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoneTimes), v))
	})
}

// DoneTimesIn applies the In predicate on the "doneTimes" field.
func DoneTimesIn(vs ...int32) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoneTimes), v...))
	})
}

// DoneTimesNotIn applies the NotIn predicate on the "doneTimes" field.
func DoneTimesNotIn(vs ...int32) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoneTimes), v...))
	})
}

// DoneTimesGT applies the GT predicate on the "doneTimes" field.
func DoneTimesGT(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoneTimes), v))
	})
}

// DoneTimesGTE applies the GTE predicate on the "doneTimes" field.
func DoneTimesGTE(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoneTimes), v))
	})
}

// DoneTimesLT applies the LT predicate on the "doneTimes" field.
func DoneTimesLT(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoneTimes), v))
	})
}

// DoneTimesLTE applies the LTE predicate on the "doneTimes" field.
func DoneTimesLTE(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoneTimes), v))
	})
}

// DoneTimesIsNil applies the IsNil predicate on the "doneTimes" field.
func DoneTimesIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDoneTimes)))
	})
}

// DoneTimesNotNil applies the NotNil predicate on the "doneTimes" field.
func DoneTimesNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDoneTimes)))
	})
}

// AllTimesEQ applies the EQ predicate on the "allTimes" field.
func AllTimesEQ(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllTimes), v))
	})
}

// AllTimesNEQ applies the NEQ predicate on the "allTimes" field.
func AllTimesNEQ(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllTimes), v))
	})
}

// AllTimesIn applies the In predicate on the "allTimes" field.
func AllTimesIn(vs ...int32) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllTimes), v...))
	})
}

// AllTimesNotIn applies the NotIn predicate on the "allTimes" field.
func AllTimesNotIn(vs ...int32) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllTimes), v...))
	})
}

// AllTimesGT applies the GT predicate on the "allTimes" field.
func AllTimesGT(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllTimes), v))
	})
}

// AllTimesGTE applies the GTE predicate on the "allTimes" field.
func AllTimesGTE(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllTimes), v))
	})
}

// AllTimesLT applies the LT predicate on the "allTimes" field.
func AllTimesLT(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllTimes), v))
	})
}

// AllTimesLTE applies the LTE predicate on the "allTimes" field.
func AllTimesLTE(v int32) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllTimes), v))
	})
}

// AllTimesIsNil applies the IsNil predicate on the "allTimes" field.
func AllTimesIsNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllTimes)))
	})
}

// AllTimesNotNil applies the NotNil predicate on the "allTimes" field.
func AllTimesNotNil() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllTimes)))
	})
}

// EffectTimeEQ applies the EQ predicate on the "effectTime" field.
func EffectTimeEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeNEQ applies the NEQ predicate on the "effectTime" field.
func EffectTimeNEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeIn applies the In predicate on the "effectTime" field.
func EffectTimeIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeNotIn applies the NotIn predicate on the "effectTime" field.
func EffectTimeNotIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeGT applies the GT predicate on the "effectTime" field.
func EffectTimeGT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeGTE applies the GTE predicate on the "effectTime" field.
func EffectTimeGTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLT applies the LT predicate on the "effectTime" field.
func EffectTimeLT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLTE applies the LTE predicate on the "effectTime" field.
func EffectTimeLTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEffectTime), v))
	})
}

// ExpiredTimeEQ applies the EQ predicate on the "expiredTime" field.
func ExpiredTimeEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeNEQ applies the NEQ predicate on the "expiredTime" field.
func ExpiredTimeNEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeIn applies the In predicate on the "expiredTime" field.
func ExpiredTimeIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeNotIn applies the NotIn predicate on the "expiredTime" field.
func ExpiredTimeNotIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeGT applies the GT predicate on the "expiredTime" field.
func ExpiredTimeGT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeGTE applies the GTE predicate on the "expiredTime" field.
func ExpiredTimeGTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLT applies the LT predicate on the "expiredTime" field.
func ExpiredTimeLT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLTE applies the LTE predicate on the "expiredTime" field.
func ExpiredTimeLTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiredTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.TaskLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TaskLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.SocialUser) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskLog) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskLog) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskLog) predicate.TaskLog {
	return predicate.TaskLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
