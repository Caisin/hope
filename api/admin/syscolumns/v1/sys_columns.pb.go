// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/admin/syscolumns/v1/sys_columns.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type SysColumnsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//
	ColumnId int32 `protobuf:"varint,2,opt,name=columnId,proto3" json:"columnId,omitempty"`
	//
	ColumnName string `protobuf:"bytes,3,opt,name=columnName,proto3" json:"columnName,omitempty"`
	//
	ColumnComment string `protobuf:"bytes,4,opt,name=columnComment,proto3" json:"columnComment,omitempty"`
	//
	ColumnType string `protobuf:"bytes,5,opt,name=columnType,proto3" json:"columnType,omitempty"`
	//
	GoType string `protobuf:"bytes,6,opt,name=goType,proto3" json:"goType,omitempty"`
	//
	GoField string `protobuf:"bytes,7,opt,name=goField,proto3" json:"goField,omitempty"`
	//
	JsonField string `protobuf:"bytes,8,opt,name=jsonField,proto3" json:"jsonField,omitempty"`
	//
	IsPk string `protobuf:"bytes,9,opt,name=isPk,proto3" json:"isPk,omitempty"`
	//
	IsIncrement string `protobuf:"bytes,10,opt,name=isIncrement,proto3" json:"isIncrement,omitempty"`
	//
	IsRequired string `protobuf:"bytes,11,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	//
	IsInsert string `protobuf:"bytes,12,opt,name=isInsert,proto3" json:"isInsert,omitempty"`
	//
	IsEdit string `protobuf:"bytes,13,opt,name=isEdit,proto3" json:"isEdit,omitempty"`
	//
	IsList string `protobuf:"bytes,14,opt,name=isList,proto3" json:"isList,omitempty"`
	//
	IsQuery string `protobuf:"bytes,15,opt,name=isQuery,proto3" json:"isQuery,omitempty"`
	//
	QueryType string `protobuf:"bytes,16,opt,name=queryType,proto3" json:"queryType,omitempty"`
	//
	HtmlType string `protobuf:"bytes,17,opt,name=htmlType,proto3" json:"htmlType,omitempty"`
	//
	DictType string `protobuf:"bytes,18,opt,name=dictType,proto3" json:"dictType,omitempty"`
	//
	Sort int32 `protobuf:"varint,19,opt,name=sort,proto3" json:"sort,omitempty"`
	//
	List string `protobuf:"bytes,20,opt,name=list,proto3" json:"list,omitempty"`
	//
	Pk bool `protobuf:"varint,21,opt,name=pk,proto3" json:"pk,omitempty"`
	//
	Required bool `protobuf:"varint,22,opt,name=required,proto3" json:"required,omitempty"`
	//
	SuperColumn bool `protobuf:"varint,23,opt,name=superColumn,proto3" json:"superColumn,omitempty"`
	//
	UsableColumn bool `protobuf:"varint,24,opt,name=usableColumn,proto3" json:"usableColumn,omitempty"`
	//
	Increment bool `protobuf:"varint,25,opt,name=increment,proto3" json:"increment,omitempty"`
	//
	Insert bool `protobuf:"varint,26,opt,name=insert,proto3" json:"insert,omitempty"`
	//
	Edit bool `protobuf:"varint,27,opt,name=edit,proto3" json:"edit,omitempty"`
	//
	Query bool `protobuf:"varint,28,opt,name=query,proto3" json:"query,omitempty"`
	//
	Remark string `protobuf:"bytes,29,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	FkLabelName string `protobuf:"bytes,30,opt,name=fkLabelName,proto3" json:"fkLabelName,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,33,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,34,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,35,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysColumnsData) Reset() {
	*x = SysColumnsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsData) ProtoMessage() {}

func (x *SysColumnsData) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsData.ProtoReflect.Descriptor instead.
func (*SysColumnsData) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{0}
}

func (x *SysColumnsData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysColumnsData) GetColumnId() int32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *SysColumnsData) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *SysColumnsData) GetColumnComment() string {
	if x != nil {
		return x.ColumnComment
	}
	return ""
}

func (x *SysColumnsData) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *SysColumnsData) GetGoType() string {
	if x != nil {
		return x.GoType
	}
	return ""
}

func (x *SysColumnsData) GetGoField() string {
	if x != nil {
		return x.GoField
	}
	return ""
}

func (x *SysColumnsData) GetJsonField() string {
	if x != nil {
		return x.JsonField
	}
	return ""
}

func (x *SysColumnsData) GetIsPk() string {
	if x != nil {
		return x.IsPk
	}
	return ""
}

func (x *SysColumnsData) GetIsIncrement() string {
	if x != nil {
		return x.IsIncrement
	}
	return ""
}

func (x *SysColumnsData) GetIsRequired() string {
	if x != nil {
		return x.IsRequired
	}
	return ""
}

func (x *SysColumnsData) GetIsInsert() string {
	if x != nil {
		return x.IsInsert
	}
	return ""
}

func (x *SysColumnsData) GetIsEdit() string {
	if x != nil {
		return x.IsEdit
	}
	return ""
}

func (x *SysColumnsData) GetIsList() string {
	if x != nil {
		return x.IsList
	}
	return ""
}

func (x *SysColumnsData) GetIsQuery() string {
	if x != nil {
		return x.IsQuery
	}
	return ""
}

func (x *SysColumnsData) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *SysColumnsData) GetHtmlType() string {
	if x != nil {
		return x.HtmlType
	}
	return ""
}

func (x *SysColumnsData) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *SysColumnsData) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SysColumnsData) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *SysColumnsData) GetPk() bool {
	if x != nil {
		return x.Pk
	}
	return false
}

func (x *SysColumnsData) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *SysColumnsData) GetSuperColumn() bool {
	if x != nil {
		return x.SuperColumn
	}
	return false
}

func (x *SysColumnsData) GetUsableColumn() bool {
	if x != nil {
		return x.UsableColumn
	}
	return false
}

func (x *SysColumnsData) GetIncrement() bool {
	if x != nil {
		return x.Increment
	}
	return false
}

func (x *SysColumnsData) GetInsert() bool {
	if x != nil {
		return x.Insert
	}
	return false
}

func (x *SysColumnsData) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *SysColumnsData) GetQuery() bool {
	if x != nil {
		return x.Query
	}
	return false
}

func (x *SysColumnsData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysColumnsData) GetFkLabelName() string {
	if x != nil {
		return x.FkLabelName
	}
	return ""
}

func (x *SysColumnsData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysColumnsData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysColumnsData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysColumnsData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysColumnsData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type SysColumnsPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *SysColumnsReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *SysColumnsPageReq) Reset() {
	*x = SysColumnsPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsPageReq) ProtoMessage() {}

func (x *SysColumnsPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsPageReq.ProtoReflect.Descriptor instead.
func (*SysColumnsPageReq) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{1}
}

func (x *SysColumnsPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *SysColumnsPageReq) GetParam() *SysColumnsReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type SysColumnsPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*SysColumnsData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SysColumnsPageReply) Reset() {
	*x = SysColumnsPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsPageReply) ProtoMessage() {}

func (x *SysColumnsPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsPageReply.ProtoReflect.Descriptor instead.
func (*SysColumnsPageReply) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{2}
}

func (x *SysColumnsPageReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysColumnsPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysColumnsPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SysColumnsPageReply) GetItems() []*SysColumnsData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type SysColumnsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//
	ColumnId int32 `protobuf:"varint,2,opt,name=columnId,proto3" json:"columnId,omitempty"`
	//
	ColumnName string `protobuf:"bytes,3,opt,name=columnName,proto3" json:"columnName,omitempty"`
	//
	ColumnComment string `protobuf:"bytes,4,opt,name=columnComment,proto3" json:"columnComment,omitempty"`
	//
	ColumnType string `protobuf:"bytes,5,opt,name=columnType,proto3" json:"columnType,omitempty"`
	//
	GoType string `protobuf:"bytes,6,opt,name=goType,proto3" json:"goType,omitempty"`
	//
	GoField string `protobuf:"bytes,7,opt,name=goField,proto3" json:"goField,omitempty"`
	//
	JsonField string `protobuf:"bytes,8,opt,name=jsonField,proto3" json:"jsonField,omitempty"`
	//
	IsPk string `protobuf:"bytes,9,opt,name=isPk,proto3" json:"isPk,omitempty"`
	//
	IsIncrement string `protobuf:"bytes,10,opt,name=isIncrement,proto3" json:"isIncrement,omitempty"`
	//
	IsRequired string `protobuf:"bytes,11,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	//
	IsInsert string `protobuf:"bytes,12,opt,name=isInsert,proto3" json:"isInsert,omitempty"`
	//
	IsEdit string `protobuf:"bytes,13,opt,name=isEdit,proto3" json:"isEdit,omitempty"`
	//
	IsList string `protobuf:"bytes,14,opt,name=isList,proto3" json:"isList,omitempty"`
	//
	IsQuery string `protobuf:"bytes,15,opt,name=isQuery,proto3" json:"isQuery,omitempty"`
	//
	QueryType string `protobuf:"bytes,16,opt,name=queryType,proto3" json:"queryType,omitempty"`
	//
	HtmlType string `protobuf:"bytes,17,opt,name=htmlType,proto3" json:"htmlType,omitempty"`
	//
	DictType string `protobuf:"bytes,18,opt,name=dictType,proto3" json:"dictType,omitempty"`
	//
	Sort int32 `protobuf:"varint,19,opt,name=sort,proto3" json:"sort,omitempty"`
	//
	List string `protobuf:"bytes,20,opt,name=list,proto3" json:"list,omitempty"`
	//
	Pk bool `protobuf:"varint,21,opt,name=pk,proto3" json:"pk,omitempty"`
	//
	Required bool `protobuf:"varint,22,opt,name=required,proto3" json:"required,omitempty"`
	//
	SuperColumn bool `protobuf:"varint,23,opt,name=superColumn,proto3" json:"superColumn,omitempty"`
	//
	UsableColumn bool `protobuf:"varint,24,opt,name=usableColumn,proto3" json:"usableColumn,omitempty"`
	//
	Increment bool `protobuf:"varint,25,opt,name=increment,proto3" json:"increment,omitempty"`
	//
	Insert bool `protobuf:"varint,26,opt,name=insert,proto3" json:"insert,omitempty"`
	//
	Edit bool `protobuf:"varint,27,opt,name=edit,proto3" json:"edit,omitempty"`
	//
	Query bool `protobuf:"varint,28,opt,name=query,proto3" json:"query,omitempty"`
	//
	Remark string `protobuf:"bytes,29,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	FkLabelName string `protobuf:"bytes,30,opt,name=fkLabelName,proto3" json:"fkLabelName,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,33,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,34,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,35,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysColumnsReq) Reset() {
	*x = SysColumnsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsReq) ProtoMessage() {}

func (x *SysColumnsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsReq.ProtoReflect.Descriptor instead.
func (*SysColumnsReq) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{3}
}

func (x *SysColumnsReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysColumnsReq) GetColumnId() int32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *SysColumnsReq) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *SysColumnsReq) GetColumnComment() string {
	if x != nil {
		return x.ColumnComment
	}
	return ""
}

func (x *SysColumnsReq) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *SysColumnsReq) GetGoType() string {
	if x != nil {
		return x.GoType
	}
	return ""
}

func (x *SysColumnsReq) GetGoField() string {
	if x != nil {
		return x.GoField
	}
	return ""
}

func (x *SysColumnsReq) GetJsonField() string {
	if x != nil {
		return x.JsonField
	}
	return ""
}

func (x *SysColumnsReq) GetIsPk() string {
	if x != nil {
		return x.IsPk
	}
	return ""
}

func (x *SysColumnsReq) GetIsIncrement() string {
	if x != nil {
		return x.IsIncrement
	}
	return ""
}

func (x *SysColumnsReq) GetIsRequired() string {
	if x != nil {
		return x.IsRequired
	}
	return ""
}

func (x *SysColumnsReq) GetIsInsert() string {
	if x != nil {
		return x.IsInsert
	}
	return ""
}

func (x *SysColumnsReq) GetIsEdit() string {
	if x != nil {
		return x.IsEdit
	}
	return ""
}

func (x *SysColumnsReq) GetIsList() string {
	if x != nil {
		return x.IsList
	}
	return ""
}

func (x *SysColumnsReq) GetIsQuery() string {
	if x != nil {
		return x.IsQuery
	}
	return ""
}

func (x *SysColumnsReq) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *SysColumnsReq) GetHtmlType() string {
	if x != nil {
		return x.HtmlType
	}
	return ""
}

func (x *SysColumnsReq) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *SysColumnsReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SysColumnsReq) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *SysColumnsReq) GetPk() bool {
	if x != nil {
		return x.Pk
	}
	return false
}

func (x *SysColumnsReq) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *SysColumnsReq) GetSuperColumn() bool {
	if x != nil {
		return x.SuperColumn
	}
	return false
}

func (x *SysColumnsReq) GetUsableColumn() bool {
	if x != nil {
		return x.UsableColumn
	}
	return false
}

func (x *SysColumnsReq) GetIncrement() bool {
	if x != nil {
		return x.Increment
	}
	return false
}

func (x *SysColumnsReq) GetInsert() bool {
	if x != nil {
		return x.Insert
	}
	return false
}

func (x *SysColumnsReq) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *SysColumnsReq) GetQuery() bool {
	if x != nil {
		return x.Query
	}
	return false
}

func (x *SysColumnsReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysColumnsReq) GetFkLabelName() string {
	if x != nil {
		return x.FkLabelName
	}
	return ""
}

func (x *SysColumnsReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysColumnsReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysColumnsReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysColumnsReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysColumnsReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type SysColumnsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *SysColumnsData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysColumnsReply) Reset() {
	*x = SysColumnsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsReply) ProtoMessage() {}

func (x *SysColumnsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsReply.ProtoReflect.Descriptor instead.
func (*SysColumnsReply) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{4}
}

func (x *SysColumnsReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysColumnsReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysColumnsReply) GetResult() *SysColumnsData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建SysColumns请求
type SysColumnsCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	ColumnId int32 `protobuf:"varint,1,opt,name=columnId,proto3" json:"columnId,omitempty"`
	//
	ColumnName string `protobuf:"bytes,2,opt,name=columnName,proto3" json:"columnName,omitempty"`
	//
	ColumnComment string `protobuf:"bytes,3,opt,name=columnComment,proto3" json:"columnComment,omitempty"`
	//
	ColumnType string `protobuf:"bytes,4,opt,name=columnType,proto3" json:"columnType,omitempty"`
	//
	GoType string `protobuf:"bytes,5,opt,name=goType,proto3" json:"goType,omitempty"`
	//
	GoField string `protobuf:"bytes,6,opt,name=goField,proto3" json:"goField,omitempty"`
	//
	JsonField string `protobuf:"bytes,7,opt,name=jsonField,proto3" json:"jsonField,omitempty"`
	//
	IsPk string `protobuf:"bytes,8,opt,name=isPk,proto3" json:"isPk,omitempty"`
	//
	IsIncrement string `protobuf:"bytes,9,opt,name=isIncrement,proto3" json:"isIncrement,omitempty"`
	//
	IsRequired string `protobuf:"bytes,10,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	//
	IsInsert string `protobuf:"bytes,11,opt,name=isInsert,proto3" json:"isInsert,omitempty"`
	//
	IsEdit string `protobuf:"bytes,12,opt,name=isEdit,proto3" json:"isEdit,omitempty"`
	//
	IsList string `protobuf:"bytes,13,opt,name=isList,proto3" json:"isList,omitempty"`
	//
	IsQuery string `protobuf:"bytes,14,opt,name=isQuery,proto3" json:"isQuery,omitempty"`
	//
	QueryType string `protobuf:"bytes,15,opt,name=queryType,proto3" json:"queryType,omitempty"`
	//
	HtmlType string `protobuf:"bytes,16,opt,name=htmlType,proto3" json:"htmlType,omitempty"`
	//
	DictType string `protobuf:"bytes,17,opt,name=dictType,proto3" json:"dictType,omitempty"`
	//
	Sort int32 `protobuf:"varint,18,opt,name=sort,proto3" json:"sort,omitempty"`
	//
	List string `protobuf:"bytes,19,opt,name=list,proto3" json:"list,omitempty"`
	//
	Pk bool `protobuf:"varint,20,opt,name=pk,proto3" json:"pk,omitempty"`
	//
	Required bool `protobuf:"varint,21,opt,name=required,proto3" json:"required,omitempty"`
	//
	SuperColumn bool `protobuf:"varint,22,opt,name=superColumn,proto3" json:"superColumn,omitempty"`
	//
	UsableColumn bool `protobuf:"varint,23,opt,name=usableColumn,proto3" json:"usableColumn,omitempty"`
	//
	Increment bool `protobuf:"varint,24,opt,name=increment,proto3" json:"increment,omitempty"`
	//
	Insert bool `protobuf:"varint,25,opt,name=insert,proto3" json:"insert,omitempty"`
	//
	Edit bool `protobuf:"varint,26,opt,name=edit,proto3" json:"edit,omitempty"`
	//
	Query bool `protobuf:"varint,27,opt,name=query,proto3" json:"query,omitempty"`
	//
	Remark string `protobuf:"bytes,28,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	FkLabelName string `protobuf:"bytes,29,opt,name=fkLabelName,proto3" json:"fkLabelName,omitempty"`
}

func (x *SysColumnsCreateReq) Reset() {
	*x = SysColumnsCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsCreateReq) ProtoMessage() {}

func (x *SysColumnsCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsCreateReq.ProtoReflect.Descriptor instead.
func (*SysColumnsCreateReq) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{5}
}

func (x *SysColumnsCreateReq) GetColumnId() int32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *SysColumnsCreateReq) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *SysColumnsCreateReq) GetColumnComment() string {
	if x != nil {
		return x.ColumnComment
	}
	return ""
}

func (x *SysColumnsCreateReq) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *SysColumnsCreateReq) GetGoType() string {
	if x != nil {
		return x.GoType
	}
	return ""
}

func (x *SysColumnsCreateReq) GetGoField() string {
	if x != nil {
		return x.GoField
	}
	return ""
}

func (x *SysColumnsCreateReq) GetJsonField() string {
	if x != nil {
		return x.JsonField
	}
	return ""
}

func (x *SysColumnsCreateReq) GetIsPk() string {
	if x != nil {
		return x.IsPk
	}
	return ""
}

func (x *SysColumnsCreateReq) GetIsIncrement() string {
	if x != nil {
		return x.IsIncrement
	}
	return ""
}

func (x *SysColumnsCreateReq) GetIsRequired() string {
	if x != nil {
		return x.IsRequired
	}
	return ""
}

func (x *SysColumnsCreateReq) GetIsInsert() string {
	if x != nil {
		return x.IsInsert
	}
	return ""
}

func (x *SysColumnsCreateReq) GetIsEdit() string {
	if x != nil {
		return x.IsEdit
	}
	return ""
}

func (x *SysColumnsCreateReq) GetIsList() string {
	if x != nil {
		return x.IsList
	}
	return ""
}

func (x *SysColumnsCreateReq) GetIsQuery() string {
	if x != nil {
		return x.IsQuery
	}
	return ""
}

func (x *SysColumnsCreateReq) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *SysColumnsCreateReq) GetHtmlType() string {
	if x != nil {
		return x.HtmlType
	}
	return ""
}

func (x *SysColumnsCreateReq) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *SysColumnsCreateReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SysColumnsCreateReq) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *SysColumnsCreateReq) GetPk() bool {
	if x != nil {
		return x.Pk
	}
	return false
}

func (x *SysColumnsCreateReq) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *SysColumnsCreateReq) GetSuperColumn() bool {
	if x != nil {
		return x.SuperColumn
	}
	return false
}

func (x *SysColumnsCreateReq) GetUsableColumn() bool {
	if x != nil {
		return x.UsableColumn
	}
	return false
}

func (x *SysColumnsCreateReq) GetIncrement() bool {
	if x != nil {
		return x.Increment
	}
	return false
}

func (x *SysColumnsCreateReq) GetInsert() bool {
	if x != nil {
		return x.Insert
	}
	return false
}

func (x *SysColumnsCreateReq) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *SysColumnsCreateReq) GetQuery() bool {
	if x != nil {
		return x.Query
	}
	return false
}

func (x *SysColumnsCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysColumnsCreateReq) GetFkLabelName() string {
	if x != nil {
		return x.FkLabelName
	}
	return ""
}

// 创建SysColumns返回
type SysColumnsCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *SysColumnsData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysColumnsCreateReply) Reset() {
	*x = SysColumnsCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsCreateReply) ProtoMessage() {}

func (x *SysColumnsCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsCreateReply.ProtoReflect.Descriptor instead.
func (*SysColumnsCreateReply) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{6}
}

func (x *SysColumnsCreateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysColumnsCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysColumnsCreateReply) GetResult() *SysColumnsData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新SysColumns请求
type SysColumnsUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//
	ColumnId int32 `protobuf:"varint,2,opt,name=columnId,proto3" json:"columnId,omitempty"`
	//
	ColumnName string `protobuf:"bytes,3,opt,name=columnName,proto3" json:"columnName,omitempty"`
	//
	ColumnComment string `protobuf:"bytes,4,opt,name=columnComment,proto3" json:"columnComment,omitempty"`
	//
	ColumnType string `protobuf:"bytes,5,opt,name=columnType,proto3" json:"columnType,omitempty"`
	//
	GoType string `protobuf:"bytes,6,opt,name=goType,proto3" json:"goType,omitempty"`
	//
	GoField string `protobuf:"bytes,7,opt,name=goField,proto3" json:"goField,omitempty"`
	//
	JsonField string `protobuf:"bytes,8,opt,name=jsonField,proto3" json:"jsonField,omitempty"`
	//
	IsPk string `protobuf:"bytes,9,opt,name=isPk,proto3" json:"isPk,omitempty"`
	//
	IsIncrement string `protobuf:"bytes,10,opt,name=isIncrement,proto3" json:"isIncrement,omitempty"`
	//
	IsRequired string `protobuf:"bytes,11,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	//
	IsInsert string `protobuf:"bytes,12,opt,name=isInsert,proto3" json:"isInsert,omitempty"`
	//
	IsEdit string `protobuf:"bytes,13,opt,name=isEdit,proto3" json:"isEdit,omitempty"`
	//
	IsList string `protobuf:"bytes,14,opt,name=isList,proto3" json:"isList,omitempty"`
	//
	IsQuery string `protobuf:"bytes,15,opt,name=isQuery,proto3" json:"isQuery,omitempty"`
	//
	QueryType string `protobuf:"bytes,16,opt,name=queryType,proto3" json:"queryType,omitempty"`
	//
	HtmlType string `protobuf:"bytes,17,opt,name=htmlType,proto3" json:"htmlType,omitempty"`
	//
	DictType string `protobuf:"bytes,18,opt,name=dictType,proto3" json:"dictType,omitempty"`
	//
	Sort int32 `protobuf:"varint,19,opt,name=sort,proto3" json:"sort,omitempty"`
	//
	List string `protobuf:"bytes,20,opt,name=list,proto3" json:"list,omitempty"`
	//
	Pk bool `protobuf:"varint,21,opt,name=pk,proto3" json:"pk,omitempty"`
	//
	Required bool `protobuf:"varint,22,opt,name=required,proto3" json:"required,omitempty"`
	//
	SuperColumn bool `protobuf:"varint,23,opt,name=superColumn,proto3" json:"superColumn,omitempty"`
	//
	UsableColumn bool `protobuf:"varint,24,opt,name=usableColumn,proto3" json:"usableColumn,omitempty"`
	//
	Increment bool `protobuf:"varint,25,opt,name=increment,proto3" json:"increment,omitempty"`
	//
	Insert bool `protobuf:"varint,26,opt,name=insert,proto3" json:"insert,omitempty"`
	//
	Edit bool `protobuf:"varint,27,opt,name=edit,proto3" json:"edit,omitempty"`
	//
	Query bool `protobuf:"varint,28,opt,name=query,proto3" json:"query,omitempty"`
	//
	Remark string `protobuf:"bytes,29,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	FkLabelName string `protobuf:"bytes,30,opt,name=fkLabelName,proto3" json:"fkLabelName,omitempty"`
}

func (x *SysColumnsUpdateReq) Reset() {
	*x = SysColumnsUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsUpdateReq) ProtoMessage() {}

func (x *SysColumnsUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsUpdateReq.ProtoReflect.Descriptor instead.
func (*SysColumnsUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{7}
}

func (x *SysColumnsUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysColumnsUpdateReq) GetColumnId() int32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *SysColumnsUpdateReq) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetColumnComment() string {
	if x != nil {
		return x.ColumnComment
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetGoType() string {
	if x != nil {
		return x.GoType
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetGoField() string {
	if x != nil {
		return x.GoField
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetJsonField() string {
	if x != nil {
		return x.JsonField
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetIsPk() string {
	if x != nil {
		return x.IsPk
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetIsIncrement() string {
	if x != nil {
		return x.IsIncrement
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetIsRequired() string {
	if x != nil {
		return x.IsRequired
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetIsInsert() string {
	if x != nil {
		return x.IsInsert
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetIsEdit() string {
	if x != nil {
		return x.IsEdit
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetIsList() string {
	if x != nil {
		return x.IsList
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetIsQuery() string {
	if x != nil {
		return x.IsQuery
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetHtmlType() string {
	if x != nil {
		return x.HtmlType
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SysColumnsUpdateReq) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetPk() bool {
	if x != nil {
		return x.Pk
	}
	return false
}

func (x *SysColumnsUpdateReq) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *SysColumnsUpdateReq) GetSuperColumn() bool {
	if x != nil {
		return x.SuperColumn
	}
	return false
}

func (x *SysColumnsUpdateReq) GetUsableColumn() bool {
	if x != nil {
		return x.UsableColumn
	}
	return false
}

func (x *SysColumnsUpdateReq) GetIncrement() bool {
	if x != nil {
		return x.Increment
	}
	return false
}

func (x *SysColumnsUpdateReq) GetInsert() bool {
	if x != nil {
		return x.Insert
	}
	return false
}

func (x *SysColumnsUpdateReq) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *SysColumnsUpdateReq) GetQuery() bool {
	if x != nil {
		return x.Query
	}
	return false
}

func (x *SysColumnsUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysColumnsUpdateReq) GetFkLabelName() string {
	if x != nil {
		return x.FkLabelName
	}
	return ""
}

// 更新SysColumns返回
type SysColumnsUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *SysColumnsData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysColumnsUpdateReply) Reset() {
	*x = SysColumnsUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsUpdateReply) ProtoMessage() {}

func (x *SysColumnsUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsUpdateReply.ProtoReflect.Descriptor instead.
func (*SysColumnsUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{8}
}

func (x *SysColumnsUpdateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysColumnsUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysColumnsUpdateReply) GetResult() *SysColumnsData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除SysColumns请求
type SysColumnsDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SysColumnsDeleteReq) Reset() {
	*x = SysColumnsDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsDeleteReq) ProtoMessage() {}

func (x *SysColumnsDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsDeleteReq.ProtoReflect.Descriptor instead.
func (*SysColumnsDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{9}
}

func (x *SysColumnsDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除SysColumns请求
type SysColumnsBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SysColumnsBatchDeleteReq) Reset() {
	*x = SysColumnsBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsBatchDeleteReq) ProtoMessage() {}

func (x *SysColumnsBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*SysColumnsBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{10}
}

func (x *SysColumnsBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除SysColumns返回
type SysColumnsDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysColumnsDeleteReply) Reset() {
	*x = SysColumnsDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumnsDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumnsDeleteReply) ProtoMessage() {}

func (x *SysColumnsDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumnsDeleteReply.ProtoReflect.Descriptor instead.
func (*SysColumnsDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP(), []int{11}
}

func (x *SysColumnsDeleteReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysColumnsDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysColumnsDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_admin_syscolumns_v1_sys_columns_proto protoreflect.FileDescriptor

var file_api_admin_syscolumns_v1_sys_columns_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x79, 0x73,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x08, 0x0a, 0x0e, 0x53, 0x79, 0x73,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x50, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x50,
	0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x11, 0x53,
	0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x8e, 0x01,
	0x0a, 0x13, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xff,
	0x07, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x74, 0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x74, 0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x70, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x76, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xad, 0x06, 0x0a, 0x13, 0x53, 0x79, 0x73,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x74, 0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x74, 0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x70, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbd, 0x06, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x73, 0x50, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74,
	0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74,
	0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x25, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x18, 0x53,
	0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x5d, 0x0a, 0x15, 0x53, 0x79, 0x73,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xe8, 0x05, 0x0a, 0x0a, 0x53, 0x79, 0x73,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x73,
	0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x79, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2f, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x6b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x1c, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73,
	0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x22, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x22, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x79, 0x73,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x7f, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x79,
	0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x42, 0x21, 0x5a, 0x1f, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_admin_syscolumns_v1_sys_columns_proto_rawDescOnce sync.Once
	file_api_admin_syscolumns_v1_sys_columns_proto_rawDescData = file_api_admin_syscolumns_v1_sys_columns_proto_rawDesc
)

func file_api_admin_syscolumns_v1_sys_columns_proto_rawDescGZIP() []byte {
	file_api_admin_syscolumns_v1_sys_columns_proto_rawDescOnce.Do(func() {
		file_api_admin_syscolumns_v1_sys_columns_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_admin_syscolumns_v1_sys_columns_proto_rawDescData)
	})
	return file_api_admin_syscolumns_v1_sys_columns_proto_rawDescData
}

var file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_admin_syscolumns_v1_sys_columns_proto_goTypes = []interface{}{
	(*SysColumnsData)(nil),           // 0: syscolumns.v1.SysColumnsData
	(*SysColumnsPageReq)(nil),        // 1: syscolumns.v1.SysColumnsPageReq
	(*SysColumnsPageReply)(nil),      // 2: syscolumns.v1.SysColumnsPageReply
	(*SysColumnsReq)(nil),            // 3: syscolumns.v1.SysColumnsReq
	(*SysColumnsReply)(nil),          // 4: syscolumns.v1.SysColumnsReply
	(*SysColumnsCreateReq)(nil),      // 5: syscolumns.v1.SysColumnsCreateReq
	(*SysColumnsCreateReply)(nil),    // 6: syscolumns.v1.SysColumnsCreateReply
	(*SysColumnsUpdateReq)(nil),      // 7: syscolumns.v1.SysColumnsUpdateReq
	(*SysColumnsUpdateReply)(nil),    // 8: syscolumns.v1.SysColumnsUpdateReply
	(*SysColumnsDeleteReq)(nil),      // 9: syscolumns.v1.SysColumnsDeleteReq
	(*SysColumnsBatchDeleteReq)(nil), // 10: syscolumns.v1.SysColumnsBatchDeleteReq
	(*SysColumnsDeleteReply)(nil),    // 11: syscolumns.v1.SysColumnsDeleteReply
	(*timestamppb.Timestamp)(nil),    // 12: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),         // 13: pagin.Pagination
}
var file_api_admin_syscolumns_v1_sys_columns_proto_depIdxs = []int32{
	12, // 0: syscolumns.v1.SysColumnsData.createdAt:type_name -> google.protobuf.Timestamp
	12, // 1: syscolumns.v1.SysColumnsData.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 2: syscolumns.v1.SysColumnsPageReq.pagin:type_name -> pagin.Pagination
	3,  // 3: syscolumns.v1.SysColumnsPageReq.param:type_name -> syscolumns.v1.SysColumnsReq
	0,  // 4: syscolumns.v1.SysColumnsPageReply.items:type_name -> syscolumns.v1.SysColumnsData
	12, // 5: syscolumns.v1.SysColumnsReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 6: syscolumns.v1.SysColumnsReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 7: syscolumns.v1.SysColumnsReply.result:type_name -> syscolumns.v1.SysColumnsData
	0,  // 8: syscolumns.v1.SysColumnsCreateReply.result:type_name -> syscolumns.v1.SysColumnsData
	0,  // 9: syscolumns.v1.SysColumnsUpdateReply.result:type_name -> syscolumns.v1.SysColumnsData
	1,  // 10: syscolumns.v1.SysColumns.GetPageSysColumns:input_type -> syscolumns.v1.SysColumnsPageReq
	3,  // 11: syscolumns.v1.SysColumns.GetSysColumns:input_type -> syscolumns.v1.SysColumnsReq
	7,  // 12: syscolumns.v1.SysColumns.UpdateSysColumns:input_type -> syscolumns.v1.SysColumnsUpdateReq
	5,  // 13: syscolumns.v1.SysColumns.CreateSysColumns:input_type -> syscolumns.v1.SysColumnsCreateReq
	9,  // 14: syscolumns.v1.SysColumns.DeleteSysColumns:input_type -> syscolumns.v1.SysColumnsDeleteReq
	10, // 15: syscolumns.v1.SysColumns.BatchDeleteSysColumns:input_type -> syscolumns.v1.SysColumnsBatchDeleteReq
	2,  // 16: syscolumns.v1.SysColumns.GetPageSysColumns:output_type -> syscolumns.v1.SysColumnsPageReply
	4,  // 17: syscolumns.v1.SysColumns.GetSysColumns:output_type -> syscolumns.v1.SysColumnsReply
	8,  // 18: syscolumns.v1.SysColumns.UpdateSysColumns:output_type -> syscolumns.v1.SysColumnsUpdateReply
	6,  // 19: syscolumns.v1.SysColumns.CreateSysColumns:output_type -> syscolumns.v1.SysColumnsCreateReply
	11, // 20: syscolumns.v1.SysColumns.DeleteSysColumns:output_type -> syscolumns.v1.SysColumnsDeleteReply
	11, // 21: syscolumns.v1.SysColumns.BatchDeleteSysColumns:output_type -> syscolumns.v1.SysColumnsDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_admin_syscolumns_v1_sys_columns_proto_init() }
func file_api_admin_syscolumns_v1_sys_columns_proto_init() {
	if File_api_admin_syscolumns_v1_sys_columns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumnsDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_admin_syscolumns_v1_sys_columns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_admin_syscolumns_v1_sys_columns_proto_goTypes,
		DependencyIndexes: file_api_admin_syscolumns_v1_sys_columns_proto_depIdxs,
		MessageInfos:      file_api_admin_syscolumns_v1_sys_columns_proto_msgTypes,
	}.Build()
	File_api_admin_syscolumns_v1_sys_columns_proto = out.File
	file_api_admin_syscolumns_v1_sys_columns_proto_rawDesc = nil
	file_api_admin_syscolumns_v1_sys_columns_proto_goTypes = nil
	file_api_admin_syscolumns_v1_sys_columns_proto_depIdxs = nil
}
