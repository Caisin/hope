// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/userevent"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserEvent is the model entity for the UserEvent schema.
type UserEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	// 用户ID
	UserId int64 `json:"userId,omitempty"`
	// EventType holds the value of the "eventType" field.
	// 事件类型,read
	EventType string `json:"eventType,omitempty"`
	// NovelId holds the value of the "novelId" field.
	// 书号
	NovelId int64 `json:"novelId,omitempty"`
	// ChapterId holds the value of the "chapterId" field.
	// 章节号
	ChapterId int64 `json:"chapterId,omitempty"`
	// Coin holds the value of the "coin" field.
	// 书币
	Coin int64 `json:"coin,omitempty"`
	// Coupon holds the value of the "coupon" field.
	// 书券
	Coupon int64 `json:"coupon,omitempty"`
	// Money holds the value of the "money" field.
	// 金额,充值金额
	Money int64 `json:"money,omitempty"`
	// Keyword holds the value of the "keyword" field.
	// 搜索关键字
	Keyword string `json:"keyword,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserEvent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userevent.FieldID, userevent.FieldUserId, userevent.FieldNovelId, userevent.FieldChapterId, userevent.FieldCoin, userevent.FieldCoupon, userevent.FieldMoney, userevent.FieldCreateBy, userevent.FieldUpdateBy, userevent.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case userevent.FieldEventType, userevent.FieldKeyword:
			values[i] = new(sql.NullString)
		case userevent.FieldCreatedAt, userevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserEvent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserEvent fields.
func (ue *UserEvent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ue.ID = int64(value.Int64)
		case userevent.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				ue.UserId = value.Int64
			}
		case userevent.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eventType", values[i])
			} else if value.Valid {
				ue.EventType = value.String
			}
		case userevent.FieldNovelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field novelId", values[i])
			} else if value.Valid {
				ue.NovelId = value.Int64
			}
		case userevent.FieldChapterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chapterId", values[i])
			} else if value.Valid {
				ue.ChapterId = value.Int64
			}
		case userevent.FieldCoin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coin", values[i])
			} else if value.Valid {
				ue.Coin = value.Int64
			}
		case userevent.FieldCoupon:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon", values[i])
			} else if value.Valid {
				ue.Coupon = value.Int64
			}
		case userevent.FieldMoney:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field money", values[i])
			} else if value.Valid {
				ue.Money = value.Int64
			}
		case userevent.FieldKeyword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keyword", values[i])
			} else if value.Valid {
				ue.Keyword = value.String
			}
		case userevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ue.CreatedAt = value.Time
			}
		case userevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ue.UpdatedAt = value.Time
			}
		case userevent.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				ue.CreateBy = value.Int64
			}
		case userevent.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				ue.UpdateBy = value.Int64
			}
		case userevent.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				ue.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserEvent.
// Note that you need to call UserEvent.Unwrap() before calling this method if this UserEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ue *UserEvent) Update() *UserEventUpdateOne {
	return (&UserEventClient{config: ue.config}).UpdateOne(ue)
}

// Unwrap unwraps the UserEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ue *UserEvent) Unwrap() *UserEvent {
	tx, ok := ue.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserEvent is not a transactional entity")
	}
	ue.config.driver = tx.drv
	return ue
}

// String implements the fmt.Stringer.
func (ue *UserEvent) String() string {
	var builder strings.Builder
	builder.WriteString("UserEvent(")
	builder.WriteString(fmt.Sprintf("id=%v", ue.ID))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", ue.UserId))
	builder.WriteString(", eventType=")
	builder.WriteString(ue.EventType)
	builder.WriteString(", novelId=")
	builder.WriteString(fmt.Sprintf("%v", ue.NovelId))
	builder.WriteString(", chapterId=")
	builder.WriteString(fmt.Sprintf("%v", ue.ChapterId))
	builder.WriteString(", coin=")
	builder.WriteString(fmt.Sprintf("%v", ue.Coin))
	builder.WriteString(", coupon=")
	builder.WriteString(fmt.Sprintf("%v", ue.Coupon))
	builder.WriteString(", money=")
	builder.WriteString(fmt.Sprintf("%v", ue.Money))
	builder.WriteString(", keyword=")
	builder.WriteString(ue.Keyword)
	builder.WriteString(", createdAt=")
	builder.WriteString(ue.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(ue.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", ue.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", ue.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", ue.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// UserEvents is a parsable slice of UserEvent.
type UserEvents []*UserEvent

func (ue UserEvents) config(cfg config) {
	for _i := range ue {
		ue[_i].config = cfg
	}
}
