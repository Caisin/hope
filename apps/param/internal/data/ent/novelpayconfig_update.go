// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/param/internal/data/ent/novelpayconfig"
	"hope/apps/param/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelPayConfigUpdate is the builder for updating NovelPayConfig entities.
type NovelPayConfigUpdate struct {
	config
	hooks    []Hook
	mutation *NovelPayConfigMutation
}

// Where appends a list predicates to the NovelPayConfigUpdate builder.
func (npcu *NovelPayConfigUpdate) Where(ps ...predicate.NovelPayConfig) *NovelPayConfigUpdate {
	npcu.mutation.Where(ps...)
	return npcu
}

// SetProductId sets the "productId" field.
func (npcu *NovelPayConfigUpdate) SetProductId(s string) *NovelPayConfigUpdate {
	npcu.mutation.SetProductId(s)
	return npcu
}

// SetNillableProductId sets the "productId" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableProductId(s *string) *NovelPayConfigUpdate {
	if s != nil {
		npcu.SetProductId(*s)
	}
	return npcu
}

// ClearProductId clears the value of the "productId" field.
func (npcu *NovelPayConfigUpdate) ClearProductId() *NovelPayConfigUpdate {
	npcu.mutation.ClearProductId()
	return npcu
}

// SetPaymentName sets the "paymentName" field.
func (npcu *NovelPayConfigUpdate) SetPaymentName(s string) *NovelPayConfigUpdate {
	npcu.mutation.SetPaymentName(s)
	return npcu
}

// SetNillablePaymentName sets the "paymentName" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillablePaymentName(s *string) *NovelPayConfigUpdate {
	if s != nil {
		npcu.SetPaymentName(*s)
	}
	return npcu
}

// ClearPaymentName clears the value of the "paymentName" field.
func (npcu *NovelPayConfigUpdate) ClearPaymentName() *NovelPayConfigUpdate {
	npcu.mutation.ClearPaymentName()
	return npcu
}

// SetFirstPayment sets the "firstPayment" field.
func (npcu *NovelPayConfigUpdate) SetFirstPayment(i int64) *NovelPayConfigUpdate {
	npcu.mutation.ResetFirstPayment()
	npcu.mutation.SetFirstPayment(i)
	return npcu
}

// SetNillableFirstPayment sets the "firstPayment" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableFirstPayment(i *int64) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetFirstPayment(*i)
	}
	return npcu
}

// AddFirstPayment adds i to the "firstPayment" field.
func (npcu *NovelPayConfigUpdate) AddFirstPayment(i int64) *NovelPayConfigUpdate {
	npcu.mutation.AddFirstPayment(i)
	return npcu
}

// ClearFirstPayment clears the value of the "firstPayment" field.
func (npcu *NovelPayConfigUpdate) ClearFirstPayment() *NovelPayConfigUpdate {
	npcu.mutation.ClearFirstPayment()
	return npcu
}

// SetPayment sets the "payment" field.
func (npcu *NovelPayConfigUpdate) SetPayment(i int64) *NovelPayConfigUpdate {
	npcu.mutation.ResetPayment()
	npcu.mutation.SetPayment(i)
	return npcu
}

// SetNillablePayment sets the "payment" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillablePayment(i *int64) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetPayment(*i)
	}
	return npcu
}

// AddPayment adds i to the "payment" field.
func (npcu *NovelPayConfigUpdate) AddPayment(i int64) *NovelPayConfigUpdate {
	npcu.mutation.AddPayment(i)
	return npcu
}

// ClearPayment clears the value of the "payment" field.
func (npcu *NovelPayConfigUpdate) ClearPayment() *NovelPayConfigUpdate {
	npcu.mutation.ClearPayment()
	return npcu
}

// SetOriginalPrice sets the "originalPrice" field.
func (npcu *NovelPayConfigUpdate) SetOriginalPrice(i int64) *NovelPayConfigUpdate {
	npcu.mutation.ResetOriginalPrice()
	npcu.mutation.SetOriginalPrice(i)
	return npcu
}

// SetNillableOriginalPrice sets the "originalPrice" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableOriginalPrice(i *int64) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetOriginalPrice(*i)
	}
	return npcu
}

// AddOriginalPrice adds i to the "originalPrice" field.
func (npcu *NovelPayConfigUpdate) AddOriginalPrice(i int64) *NovelPayConfigUpdate {
	npcu.mutation.AddOriginalPrice(i)
	return npcu
}

// ClearOriginalPrice clears the value of the "originalPrice" field.
func (npcu *NovelPayConfigUpdate) ClearOriginalPrice() *NovelPayConfigUpdate {
	npcu.mutation.ClearOriginalPrice()
	return npcu
}

// SetCfgType sets the "cfgType" field.
func (npcu *NovelPayConfigUpdate) SetCfgType(s string) *NovelPayConfigUpdate {
	npcu.mutation.SetCfgType(s)
	return npcu
}

// SetNillableCfgType sets the "cfgType" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableCfgType(s *string) *NovelPayConfigUpdate {
	if s != nil {
		npcu.SetCfgType(*s)
	}
	return npcu
}

// ClearCfgType clears the value of the "cfgType" field.
func (npcu *NovelPayConfigUpdate) ClearCfgType() *NovelPayConfigUpdate {
	npcu.mutation.ClearCfgType()
	return npcu
}

// SetCoin sets the "coin" field.
func (npcu *NovelPayConfigUpdate) SetCoin(i int64) *NovelPayConfigUpdate {
	npcu.mutation.ResetCoin()
	npcu.mutation.SetCoin(i)
	return npcu
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableCoin(i *int64) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetCoin(*i)
	}
	return npcu
}

// AddCoin adds i to the "coin" field.
func (npcu *NovelPayConfigUpdate) AddCoin(i int64) *NovelPayConfigUpdate {
	npcu.mutation.AddCoin(i)
	return npcu
}

// ClearCoin clears the value of the "coin" field.
func (npcu *NovelPayConfigUpdate) ClearCoin() *NovelPayConfigUpdate {
	npcu.mutation.ClearCoin()
	return npcu
}

// SetCurrency sets the "currency" field.
func (npcu *NovelPayConfigUpdate) SetCurrency(s string) *NovelPayConfigUpdate {
	npcu.mutation.SetCurrency(s)
	return npcu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableCurrency(s *string) *NovelPayConfigUpdate {
	if s != nil {
		npcu.SetCurrency(*s)
	}
	return npcu
}

// ClearCurrency clears the value of the "currency" field.
func (npcu *NovelPayConfigUpdate) ClearCurrency() *NovelPayConfigUpdate {
	npcu.mutation.ClearCurrency()
	return npcu
}

// SetCoupon sets the "coupon" field.
func (npcu *NovelPayConfigUpdate) SetCoupon(i int64) *NovelPayConfigUpdate {
	npcu.mutation.ResetCoupon()
	npcu.mutation.SetCoupon(i)
	return npcu
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableCoupon(i *int64) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetCoupon(*i)
	}
	return npcu
}

// AddCoupon adds i to the "coupon" field.
func (npcu *NovelPayConfigUpdate) AddCoupon(i int64) *NovelPayConfigUpdate {
	npcu.mutation.AddCoupon(i)
	return npcu
}

// ClearCoupon clears the value of the "coupon" field.
func (npcu *NovelPayConfigUpdate) ClearCoupon() *NovelPayConfigUpdate {
	npcu.mutation.ClearCoupon()
	return npcu
}

// SetCoinItem sets the "coinItem" field.
func (npcu *NovelPayConfigUpdate) SetCoinItem(i int32) *NovelPayConfigUpdate {
	npcu.mutation.ResetCoinItem()
	npcu.mutation.SetCoinItem(i)
	return npcu
}

// SetNillableCoinItem sets the "coinItem" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableCoinItem(i *int32) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetCoinItem(*i)
	}
	return npcu
}

// AddCoinItem adds i to the "coinItem" field.
func (npcu *NovelPayConfigUpdate) AddCoinItem(i int32) *NovelPayConfigUpdate {
	npcu.mutation.AddCoinItem(i)
	return npcu
}

// ClearCoinItem clears the value of the "coinItem" field.
func (npcu *NovelPayConfigUpdate) ClearCoinItem() *NovelPayConfigUpdate {
	npcu.mutation.ClearCoinItem()
	return npcu
}

// SetCouponItem sets the "couponItem" field.
func (npcu *NovelPayConfigUpdate) SetCouponItem(i int32) *NovelPayConfigUpdate {
	npcu.mutation.ResetCouponItem()
	npcu.mutation.SetCouponItem(i)
	return npcu
}

// SetNillableCouponItem sets the "couponItem" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableCouponItem(i *int32) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetCouponItem(*i)
	}
	return npcu
}

// AddCouponItem adds i to the "couponItem" field.
func (npcu *NovelPayConfigUpdate) AddCouponItem(i int32) *NovelPayConfigUpdate {
	npcu.mutation.AddCouponItem(i)
	return npcu
}

// ClearCouponItem clears the value of the "couponItem" field.
func (npcu *NovelPayConfigUpdate) ClearCouponItem() *NovelPayConfigUpdate {
	npcu.mutation.ClearCouponItem()
	return npcu
}

// SetSort sets the "sort" field.
func (npcu *NovelPayConfigUpdate) SetSort(i int32) *NovelPayConfigUpdate {
	npcu.mutation.ResetSort()
	npcu.mutation.SetSort(i)
	return npcu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableSort(i *int32) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetSort(*i)
	}
	return npcu
}

// AddSort adds i to the "sort" field.
func (npcu *NovelPayConfigUpdate) AddSort(i int32) *NovelPayConfigUpdate {
	npcu.mutation.AddSort(i)
	return npcu
}

// ClearSort clears the value of the "sort" field.
func (npcu *NovelPayConfigUpdate) ClearSort() *NovelPayConfigUpdate {
	npcu.mutation.ClearSort()
	return npcu
}

// SetState sets the "state" field.
func (npcu *NovelPayConfigUpdate) SetState(b bool) *NovelPayConfigUpdate {
	npcu.mutation.SetState(b)
	return npcu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableState(b *bool) *NovelPayConfigUpdate {
	if b != nil {
		npcu.SetState(*b)
	}
	return npcu
}

// ClearState clears the value of the "state" field.
func (npcu *NovelPayConfigUpdate) ClearState() *NovelPayConfigUpdate {
	npcu.mutation.ClearState()
	return npcu
}

// SetIsSend sets the "isSend" field.
func (npcu *NovelPayConfigUpdate) SetIsSend(i int32) *NovelPayConfigUpdate {
	npcu.mutation.ResetIsSend()
	npcu.mutation.SetIsSend(i)
	return npcu
}

// SetNillableIsSend sets the "isSend" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableIsSend(i *int32) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetIsSend(*i)
	}
	return npcu
}

// AddIsSend adds i to the "isSend" field.
func (npcu *NovelPayConfigUpdate) AddIsSend(i int32) *NovelPayConfigUpdate {
	npcu.mutation.AddIsSend(i)
	return npcu
}

// ClearIsSend clears the value of the "isSend" field.
func (npcu *NovelPayConfigUpdate) ClearIsSend() *NovelPayConfigUpdate {
	npcu.mutation.ClearIsSend()
	return npcu
}

// SetPayType sets the "payType" field.
func (npcu *NovelPayConfigUpdate) SetPayType(i int32) *NovelPayConfigUpdate {
	npcu.mutation.ResetPayType()
	npcu.mutation.SetPayType(i)
	return npcu
}

// SetNillablePayType sets the "payType" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillablePayType(i *int32) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetPayType(*i)
	}
	return npcu
}

// AddPayType adds i to the "payType" field.
func (npcu *NovelPayConfigUpdate) AddPayType(i int32) *NovelPayConfigUpdate {
	npcu.mutation.AddPayType(i)
	return npcu
}

// ClearPayType clears the value of the "payType" field.
func (npcu *NovelPayConfigUpdate) ClearPayType() *NovelPayConfigUpdate {
	npcu.mutation.ClearPayType()
	return npcu
}

// SetVipType sets the "vipType" field.
func (npcu *NovelPayConfigUpdate) SetVipType(i int64) *NovelPayConfigUpdate {
	npcu.mutation.ResetVipType()
	npcu.mutation.SetVipType(i)
	return npcu
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableVipType(i *int64) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetVipType(*i)
	}
	return npcu
}

// AddVipType adds i to the "vipType" field.
func (npcu *NovelPayConfigUpdate) AddVipType(i int64) *NovelPayConfigUpdate {
	npcu.mutation.AddVipType(i)
	return npcu
}

// ClearVipType clears the value of the "vipType" field.
func (npcu *NovelPayConfigUpdate) ClearVipType() *NovelPayConfigUpdate {
	npcu.mutation.ClearVipType()
	return npcu
}

// SetIsHot sets the "isHot" field.
func (npcu *NovelPayConfigUpdate) SetIsHot(b bool) *NovelPayConfigUpdate {
	npcu.mutation.SetIsHot(b)
	return npcu
}

// SetNillableIsHot sets the "isHot" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableIsHot(b *bool) *NovelPayConfigUpdate {
	if b != nil {
		npcu.SetIsHot(*b)
	}
	return npcu
}

// ClearIsHot clears the value of the "isHot" field.
func (npcu *NovelPayConfigUpdate) ClearIsHot() *NovelPayConfigUpdate {
	npcu.mutation.ClearIsHot()
	return npcu
}

// SetCycleDay sets the "cycleDay" field.
func (npcu *NovelPayConfigUpdate) SetCycleDay(i int32) *NovelPayConfigUpdate {
	npcu.mutation.ResetCycleDay()
	npcu.mutation.SetCycleDay(i)
	return npcu
}

// SetNillableCycleDay sets the "cycleDay" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableCycleDay(i *int32) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetCycleDay(*i)
	}
	return npcu
}

// AddCycleDay adds i to the "cycleDay" field.
func (npcu *NovelPayConfigUpdate) AddCycleDay(i int32) *NovelPayConfigUpdate {
	npcu.mutation.AddCycleDay(i)
	return npcu
}

// ClearCycleDay clears the value of the "cycleDay" field.
func (npcu *NovelPayConfigUpdate) ClearCycleDay() *NovelPayConfigUpdate {
	npcu.mutation.ClearCycleDay()
	return npcu
}

// SetSummary sets the "summary" field.
func (npcu *NovelPayConfigUpdate) SetSummary(s string) *NovelPayConfigUpdate {
	npcu.mutation.SetSummary(s)
	return npcu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableSummary(s *string) *NovelPayConfigUpdate {
	if s != nil {
		npcu.SetSummary(*s)
	}
	return npcu
}

// ClearSummary clears the value of the "summary" field.
func (npcu *NovelPayConfigUpdate) ClearSummary() *NovelPayConfigUpdate {
	npcu.mutation.ClearSummary()
	return npcu
}

// SetRemark sets the "remark" field.
func (npcu *NovelPayConfigUpdate) SetRemark(s string) *NovelPayConfigUpdate {
	npcu.mutation.SetRemark(s)
	return npcu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableRemark(s *string) *NovelPayConfigUpdate {
	if s != nil {
		npcu.SetRemark(*s)
	}
	return npcu
}

// ClearRemark clears the value of the "remark" field.
func (npcu *NovelPayConfigUpdate) ClearRemark() *NovelPayConfigUpdate {
	npcu.mutation.ClearRemark()
	return npcu
}

// SetEffectTime sets the "effectTime" field.
func (npcu *NovelPayConfigUpdate) SetEffectTime(t time.Time) *NovelPayConfigUpdate {
	npcu.mutation.SetEffectTime(t)
	return npcu
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableEffectTime(t *time.Time) *NovelPayConfigUpdate {
	if t != nil {
		npcu.SetEffectTime(*t)
	}
	return npcu
}

// SetExpiredTime sets the "expiredTime" field.
func (npcu *NovelPayConfigUpdate) SetExpiredTime(t time.Time) *NovelPayConfigUpdate {
	npcu.mutation.SetExpiredTime(t)
	return npcu
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableExpiredTime(t *time.Time) *NovelPayConfigUpdate {
	if t != nil {
		npcu.SetExpiredTime(*t)
	}
	return npcu
}

// SetUpdatedAt sets the "updatedAt" field.
func (npcu *NovelPayConfigUpdate) SetUpdatedAt(t time.Time) *NovelPayConfigUpdate {
	npcu.mutation.SetUpdatedAt(t)
	return npcu
}

// SetCreateBy sets the "createBy" field.
func (npcu *NovelPayConfigUpdate) SetCreateBy(i int64) *NovelPayConfigUpdate {
	npcu.mutation.ResetCreateBy()
	npcu.mutation.SetCreateBy(i)
	return npcu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableCreateBy(i *int64) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetCreateBy(*i)
	}
	return npcu
}

// AddCreateBy adds i to the "createBy" field.
func (npcu *NovelPayConfigUpdate) AddCreateBy(i int64) *NovelPayConfigUpdate {
	npcu.mutation.AddCreateBy(i)
	return npcu
}

// SetUpdateBy sets the "updateBy" field.
func (npcu *NovelPayConfigUpdate) SetUpdateBy(i int64) *NovelPayConfigUpdate {
	npcu.mutation.ResetUpdateBy()
	npcu.mutation.SetUpdateBy(i)
	return npcu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableUpdateBy(i *int64) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetUpdateBy(*i)
	}
	return npcu
}

// AddUpdateBy adds i to the "updateBy" field.
func (npcu *NovelPayConfigUpdate) AddUpdateBy(i int64) *NovelPayConfigUpdate {
	npcu.mutation.AddUpdateBy(i)
	return npcu
}

// SetTenantId sets the "tenantId" field.
func (npcu *NovelPayConfigUpdate) SetTenantId(i int64) *NovelPayConfigUpdate {
	npcu.mutation.ResetTenantId()
	npcu.mutation.SetTenantId(i)
	return npcu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (npcu *NovelPayConfigUpdate) SetNillableTenantId(i *int64) *NovelPayConfigUpdate {
	if i != nil {
		npcu.SetTenantId(*i)
	}
	return npcu
}

// AddTenantId adds i to the "tenantId" field.
func (npcu *NovelPayConfigUpdate) AddTenantId(i int64) *NovelPayConfigUpdate {
	npcu.mutation.AddTenantId(i)
	return npcu
}

// Mutation returns the NovelPayConfigMutation object of the builder.
func (npcu *NovelPayConfigUpdate) Mutation() *NovelPayConfigMutation {
	return npcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (npcu *NovelPayConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	npcu.defaults()
	if len(npcu.hooks) == 0 {
		affected, err = npcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelPayConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			npcu.mutation = mutation
			affected, err = npcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(npcu.hooks) - 1; i >= 0; i-- {
			if npcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = npcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (npcu *NovelPayConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := npcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (npcu *NovelPayConfigUpdate) Exec(ctx context.Context) error {
	_, err := npcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npcu *NovelPayConfigUpdate) ExecX(ctx context.Context) {
	if err := npcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npcu *NovelPayConfigUpdate) defaults() {
	if _, ok := npcu.mutation.UpdatedAt(); !ok {
		v := novelpayconfig.UpdateDefaultUpdatedAt()
		npcu.mutation.SetUpdatedAt(v)
	}
}

func (npcu *NovelPayConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelpayconfig.Table,
			Columns: novelpayconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelpayconfig.FieldID,
			},
		},
	}
	if ps := npcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := npcu.mutation.ProductId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldProductId,
		})
	}
	if npcu.mutation.ProductIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldProductId,
		})
	}
	if value, ok := npcu.mutation.PaymentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldPaymentName,
		})
	}
	if npcu.mutation.PaymentNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldPaymentName,
		})
	}
	if value, ok := npcu.mutation.FirstPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldFirstPayment,
		})
	}
	if value, ok := npcu.mutation.AddedFirstPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldFirstPayment,
		})
	}
	if npcu.mutation.FirstPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldFirstPayment,
		})
	}
	if value, ok := npcu.mutation.Payment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldPayment,
		})
	}
	if value, ok := npcu.mutation.AddedPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldPayment,
		})
	}
	if npcu.mutation.PaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldPayment,
		})
	}
	if value, ok := npcu.mutation.OriginalPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldOriginalPrice,
		})
	}
	if value, ok := npcu.mutation.AddedOriginalPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldOriginalPrice,
		})
	}
	if npcu.mutation.OriginalPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldOriginalPrice,
		})
	}
	if value, ok := npcu.mutation.CfgType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldCfgType,
		})
	}
	if npcu.mutation.CfgTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldCfgType,
		})
	}
	if value, ok := npcu.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoin,
		})
	}
	if value, ok := npcu.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoin,
		})
	}
	if npcu.mutation.CoinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldCoin,
		})
	}
	if value, ok := npcu.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldCurrency,
		})
	}
	if npcu.mutation.CurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldCurrency,
		})
	}
	if value, ok := npcu.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoupon,
		})
	}
	if value, ok := npcu.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoupon,
		})
	}
	if npcu.mutation.CouponCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldCoupon,
		})
	}
	if value, ok := npcu.mutation.CoinItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCoinItem,
		})
	}
	if value, ok := npcu.mutation.AddedCoinItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCoinItem,
		})
	}
	if npcu.mutation.CoinItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldCoinItem,
		})
	}
	if value, ok := npcu.mutation.CouponItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCouponItem,
		})
	}
	if value, ok := npcu.mutation.AddedCouponItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCouponItem,
		})
	}
	if npcu.mutation.CouponItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldCouponItem,
		})
	}
	if value, ok := npcu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldSort,
		})
	}
	if value, ok := npcu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldSort,
		})
	}
	if npcu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldSort,
		})
	}
	if value, ok := npcu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelpayconfig.FieldState,
		})
	}
	if npcu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelpayconfig.FieldState,
		})
	}
	if value, ok := npcu.mutation.IsSend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldIsSend,
		})
	}
	if value, ok := npcu.mutation.AddedIsSend(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldIsSend,
		})
	}
	if npcu.mutation.IsSendCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldIsSend,
		})
	}
	if value, ok := npcu.mutation.PayType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldPayType,
		})
	}
	if value, ok := npcu.mutation.AddedPayType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldPayType,
		})
	}
	if npcu.mutation.PayTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldPayType,
		})
	}
	if value, ok := npcu.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldVipType,
		})
	}
	if value, ok := npcu.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldVipType,
		})
	}
	if npcu.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldVipType,
		})
	}
	if value, ok := npcu.mutation.IsHot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelpayconfig.FieldIsHot,
		})
	}
	if npcu.mutation.IsHotCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelpayconfig.FieldIsHot,
		})
	}
	if value, ok := npcu.mutation.CycleDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCycleDay,
		})
	}
	if value, ok := npcu.mutation.AddedCycleDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCycleDay,
		})
	}
	if npcu.mutation.CycleDayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldCycleDay,
		})
	}
	if value, ok := npcu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldSummary,
		})
	}
	if npcu.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldSummary,
		})
	}
	if value, ok := npcu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldRemark,
		})
	}
	if npcu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldRemark,
		})
	}
	if value, ok := npcu.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldEffectTime,
		})
	}
	if value, ok := npcu.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldExpiredTime,
		})
	}
	if value, ok := npcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldUpdatedAt,
		})
	}
	if value, ok := npcu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCreateBy,
		})
	}
	if value, ok := npcu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCreateBy,
		})
	}
	if value, ok := npcu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldUpdateBy,
		})
	}
	if value, ok := npcu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldUpdateBy,
		})
	}
	if value, ok := npcu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldTenantId,
		})
	}
	if value, ok := npcu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, npcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelpayconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NovelPayConfigUpdateOne is the builder for updating a single NovelPayConfig entity.
type NovelPayConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NovelPayConfigMutation
}

// SetProductId sets the "productId" field.
func (npcuo *NovelPayConfigUpdateOne) SetProductId(s string) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetProductId(s)
	return npcuo
}

// SetNillableProductId sets the "productId" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableProductId(s *string) *NovelPayConfigUpdateOne {
	if s != nil {
		npcuo.SetProductId(*s)
	}
	return npcuo
}

// ClearProductId clears the value of the "productId" field.
func (npcuo *NovelPayConfigUpdateOne) ClearProductId() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearProductId()
	return npcuo
}

// SetPaymentName sets the "paymentName" field.
func (npcuo *NovelPayConfigUpdateOne) SetPaymentName(s string) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetPaymentName(s)
	return npcuo
}

// SetNillablePaymentName sets the "paymentName" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillablePaymentName(s *string) *NovelPayConfigUpdateOne {
	if s != nil {
		npcuo.SetPaymentName(*s)
	}
	return npcuo
}

// ClearPaymentName clears the value of the "paymentName" field.
func (npcuo *NovelPayConfigUpdateOne) ClearPaymentName() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearPaymentName()
	return npcuo
}

// SetFirstPayment sets the "firstPayment" field.
func (npcuo *NovelPayConfigUpdateOne) SetFirstPayment(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetFirstPayment()
	npcuo.mutation.SetFirstPayment(i)
	return npcuo
}

// SetNillableFirstPayment sets the "firstPayment" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableFirstPayment(i *int64) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetFirstPayment(*i)
	}
	return npcuo
}

// AddFirstPayment adds i to the "firstPayment" field.
func (npcuo *NovelPayConfigUpdateOne) AddFirstPayment(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddFirstPayment(i)
	return npcuo
}

// ClearFirstPayment clears the value of the "firstPayment" field.
func (npcuo *NovelPayConfigUpdateOne) ClearFirstPayment() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearFirstPayment()
	return npcuo
}

// SetPayment sets the "payment" field.
func (npcuo *NovelPayConfigUpdateOne) SetPayment(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetPayment()
	npcuo.mutation.SetPayment(i)
	return npcuo
}

// SetNillablePayment sets the "payment" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillablePayment(i *int64) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetPayment(*i)
	}
	return npcuo
}

// AddPayment adds i to the "payment" field.
func (npcuo *NovelPayConfigUpdateOne) AddPayment(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddPayment(i)
	return npcuo
}

// ClearPayment clears the value of the "payment" field.
func (npcuo *NovelPayConfigUpdateOne) ClearPayment() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearPayment()
	return npcuo
}

// SetOriginalPrice sets the "originalPrice" field.
func (npcuo *NovelPayConfigUpdateOne) SetOriginalPrice(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetOriginalPrice()
	npcuo.mutation.SetOriginalPrice(i)
	return npcuo
}

// SetNillableOriginalPrice sets the "originalPrice" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableOriginalPrice(i *int64) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetOriginalPrice(*i)
	}
	return npcuo
}

// AddOriginalPrice adds i to the "originalPrice" field.
func (npcuo *NovelPayConfigUpdateOne) AddOriginalPrice(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddOriginalPrice(i)
	return npcuo
}

// ClearOriginalPrice clears the value of the "originalPrice" field.
func (npcuo *NovelPayConfigUpdateOne) ClearOriginalPrice() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearOriginalPrice()
	return npcuo
}

// SetCfgType sets the "cfgType" field.
func (npcuo *NovelPayConfigUpdateOne) SetCfgType(s string) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetCfgType(s)
	return npcuo
}

// SetNillableCfgType sets the "cfgType" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableCfgType(s *string) *NovelPayConfigUpdateOne {
	if s != nil {
		npcuo.SetCfgType(*s)
	}
	return npcuo
}

// ClearCfgType clears the value of the "cfgType" field.
func (npcuo *NovelPayConfigUpdateOne) ClearCfgType() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearCfgType()
	return npcuo
}

// SetCoin sets the "coin" field.
func (npcuo *NovelPayConfigUpdateOne) SetCoin(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetCoin()
	npcuo.mutation.SetCoin(i)
	return npcuo
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableCoin(i *int64) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetCoin(*i)
	}
	return npcuo
}

// AddCoin adds i to the "coin" field.
func (npcuo *NovelPayConfigUpdateOne) AddCoin(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddCoin(i)
	return npcuo
}

// ClearCoin clears the value of the "coin" field.
func (npcuo *NovelPayConfigUpdateOne) ClearCoin() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearCoin()
	return npcuo
}

// SetCurrency sets the "currency" field.
func (npcuo *NovelPayConfigUpdateOne) SetCurrency(s string) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetCurrency(s)
	return npcuo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableCurrency(s *string) *NovelPayConfigUpdateOne {
	if s != nil {
		npcuo.SetCurrency(*s)
	}
	return npcuo
}

// ClearCurrency clears the value of the "currency" field.
func (npcuo *NovelPayConfigUpdateOne) ClearCurrency() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearCurrency()
	return npcuo
}

// SetCoupon sets the "coupon" field.
func (npcuo *NovelPayConfigUpdateOne) SetCoupon(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetCoupon()
	npcuo.mutation.SetCoupon(i)
	return npcuo
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableCoupon(i *int64) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetCoupon(*i)
	}
	return npcuo
}

// AddCoupon adds i to the "coupon" field.
func (npcuo *NovelPayConfigUpdateOne) AddCoupon(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddCoupon(i)
	return npcuo
}

// ClearCoupon clears the value of the "coupon" field.
func (npcuo *NovelPayConfigUpdateOne) ClearCoupon() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearCoupon()
	return npcuo
}

// SetCoinItem sets the "coinItem" field.
func (npcuo *NovelPayConfigUpdateOne) SetCoinItem(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetCoinItem()
	npcuo.mutation.SetCoinItem(i)
	return npcuo
}

// SetNillableCoinItem sets the "coinItem" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableCoinItem(i *int32) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetCoinItem(*i)
	}
	return npcuo
}

// AddCoinItem adds i to the "coinItem" field.
func (npcuo *NovelPayConfigUpdateOne) AddCoinItem(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddCoinItem(i)
	return npcuo
}

// ClearCoinItem clears the value of the "coinItem" field.
func (npcuo *NovelPayConfigUpdateOne) ClearCoinItem() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearCoinItem()
	return npcuo
}

// SetCouponItem sets the "couponItem" field.
func (npcuo *NovelPayConfigUpdateOne) SetCouponItem(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetCouponItem()
	npcuo.mutation.SetCouponItem(i)
	return npcuo
}

// SetNillableCouponItem sets the "couponItem" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableCouponItem(i *int32) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetCouponItem(*i)
	}
	return npcuo
}

// AddCouponItem adds i to the "couponItem" field.
func (npcuo *NovelPayConfigUpdateOne) AddCouponItem(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddCouponItem(i)
	return npcuo
}

// ClearCouponItem clears the value of the "couponItem" field.
func (npcuo *NovelPayConfigUpdateOne) ClearCouponItem() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearCouponItem()
	return npcuo
}

// SetSort sets the "sort" field.
func (npcuo *NovelPayConfigUpdateOne) SetSort(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetSort()
	npcuo.mutation.SetSort(i)
	return npcuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableSort(i *int32) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetSort(*i)
	}
	return npcuo
}

// AddSort adds i to the "sort" field.
func (npcuo *NovelPayConfigUpdateOne) AddSort(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddSort(i)
	return npcuo
}

// ClearSort clears the value of the "sort" field.
func (npcuo *NovelPayConfigUpdateOne) ClearSort() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearSort()
	return npcuo
}

// SetState sets the "state" field.
func (npcuo *NovelPayConfigUpdateOne) SetState(b bool) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetState(b)
	return npcuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableState(b *bool) *NovelPayConfigUpdateOne {
	if b != nil {
		npcuo.SetState(*b)
	}
	return npcuo
}

// ClearState clears the value of the "state" field.
func (npcuo *NovelPayConfigUpdateOne) ClearState() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearState()
	return npcuo
}

// SetIsSend sets the "isSend" field.
func (npcuo *NovelPayConfigUpdateOne) SetIsSend(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetIsSend()
	npcuo.mutation.SetIsSend(i)
	return npcuo
}

// SetNillableIsSend sets the "isSend" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableIsSend(i *int32) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetIsSend(*i)
	}
	return npcuo
}

// AddIsSend adds i to the "isSend" field.
func (npcuo *NovelPayConfigUpdateOne) AddIsSend(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddIsSend(i)
	return npcuo
}

// ClearIsSend clears the value of the "isSend" field.
func (npcuo *NovelPayConfigUpdateOne) ClearIsSend() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearIsSend()
	return npcuo
}

// SetPayType sets the "payType" field.
func (npcuo *NovelPayConfigUpdateOne) SetPayType(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetPayType()
	npcuo.mutation.SetPayType(i)
	return npcuo
}

// SetNillablePayType sets the "payType" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillablePayType(i *int32) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetPayType(*i)
	}
	return npcuo
}

// AddPayType adds i to the "payType" field.
func (npcuo *NovelPayConfigUpdateOne) AddPayType(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddPayType(i)
	return npcuo
}

// ClearPayType clears the value of the "payType" field.
func (npcuo *NovelPayConfigUpdateOne) ClearPayType() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearPayType()
	return npcuo
}

// SetVipType sets the "vipType" field.
func (npcuo *NovelPayConfigUpdateOne) SetVipType(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetVipType()
	npcuo.mutation.SetVipType(i)
	return npcuo
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableVipType(i *int64) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetVipType(*i)
	}
	return npcuo
}

// AddVipType adds i to the "vipType" field.
func (npcuo *NovelPayConfigUpdateOne) AddVipType(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddVipType(i)
	return npcuo
}

// ClearVipType clears the value of the "vipType" field.
func (npcuo *NovelPayConfigUpdateOne) ClearVipType() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearVipType()
	return npcuo
}

// SetIsHot sets the "isHot" field.
func (npcuo *NovelPayConfigUpdateOne) SetIsHot(b bool) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetIsHot(b)
	return npcuo
}

// SetNillableIsHot sets the "isHot" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableIsHot(b *bool) *NovelPayConfigUpdateOne {
	if b != nil {
		npcuo.SetIsHot(*b)
	}
	return npcuo
}

// ClearIsHot clears the value of the "isHot" field.
func (npcuo *NovelPayConfigUpdateOne) ClearIsHot() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearIsHot()
	return npcuo
}

// SetCycleDay sets the "cycleDay" field.
func (npcuo *NovelPayConfigUpdateOne) SetCycleDay(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetCycleDay()
	npcuo.mutation.SetCycleDay(i)
	return npcuo
}

// SetNillableCycleDay sets the "cycleDay" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableCycleDay(i *int32) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetCycleDay(*i)
	}
	return npcuo
}

// AddCycleDay adds i to the "cycleDay" field.
func (npcuo *NovelPayConfigUpdateOne) AddCycleDay(i int32) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddCycleDay(i)
	return npcuo
}

// ClearCycleDay clears the value of the "cycleDay" field.
func (npcuo *NovelPayConfigUpdateOne) ClearCycleDay() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearCycleDay()
	return npcuo
}

// SetSummary sets the "summary" field.
func (npcuo *NovelPayConfigUpdateOne) SetSummary(s string) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetSummary(s)
	return npcuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableSummary(s *string) *NovelPayConfigUpdateOne {
	if s != nil {
		npcuo.SetSummary(*s)
	}
	return npcuo
}

// ClearSummary clears the value of the "summary" field.
func (npcuo *NovelPayConfigUpdateOne) ClearSummary() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearSummary()
	return npcuo
}

// SetRemark sets the "remark" field.
func (npcuo *NovelPayConfigUpdateOne) SetRemark(s string) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetRemark(s)
	return npcuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableRemark(s *string) *NovelPayConfigUpdateOne {
	if s != nil {
		npcuo.SetRemark(*s)
	}
	return npcuo
}

// ClearRemark clears the value of the "remark" field.
func (npcuo *NovelPayConfigUpdateOne) ClearRemark() *NovelPayConfigUpdateOne {
	npcuo.mutation.ClearRemark()
	return npcuo
}

// SetEffectTime sets the "effectTime" field.
func (npcuo *NovelPayConfigUpdateOne) SetEffectTime(t time.Time) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetEffectTime(t)
	return npcuo
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableEffectTime(t *time.Time) *NovelPayConfigUpdateOne {
	if t != nil {
		npcuo.SetEffectTime(*t)
	}
	return npcuo
}

// SetExpiredTime sets the "expiredTime" field.
func (npcuo *NovelPayConfigUpdateOne) SetExpiredTime(t time.Time) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetExpiredTime(t)
	return npcuo
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableExpiredTime(t *time.Time) *NovelPayConfigUpdateOne {
	if t != nil {
		npcuo.SetExpiredTime(*t)
	}
	return npcuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (npcuo *NovelPayConfigUpdateOne) SetUpdatedAt(t time.Time) *NovelPayConfigUpdateOne {
	npcuo.mutation.SetUpdatedAt(t)
	return npcuo
}

// SetCreateBy sets the "createBy" field.
func (npcuo *NovelPayConfigUpdateOne) SetCreateBy(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetCreateBy()
	npcuo.mutation.SetCreateBy(i)
	return npcuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableCreateBy(i *int64) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetCreateBy(*i)
	}
	return npcuo
}

// AddCreateBy adds i to the "createBy" field.
func (npcuo *NovelPayConfigUpdateOne) AddCreateBy(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddCreateBy(i)
	return npcuo
}

// SetUpdateBy sets the "updateBy" field.
func (npcuo *NovelPayConfigUpdateOne) SetUpdateBy(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetUpdateBy()
	npcuo.mutation.SetUpdateBy(i)
	return npcuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableUpdateBy(i *int64) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetUpdateBy(*i)
	}
	return npcuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (npcuo *NovelPayConfigUpdateOne) AddUpdateBy(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddUpdateBy(i)
	return npcuo
}

// SetTenantId sets the "tenantId" field.
func (npcuo *NovelPayConfigUpdateOne) SetTenantId(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.ResetTenantId()
	npcuo.mutation.SetTenantId(i)
	return npcuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (npcuo *NovelPayConfigUpdateOne) SetNillableTenantId(i *int64) *NovelPayConfigUpdateOne {
	if i != nil {
		npcuo.SetTenantId(*i)
	}
	return npcuo
}

// AddTenantId adds i to the "tenantId" field.
func (npcuo *NovelPayConfigUpdateOne) AddTenantId(i int64) *NovelPayConfigUpdateOne {
	npcuo.mutation.AddTenantId(i)
	return npcuo
}

// Mutation returns the NovelPayConfigMutation object of the builder.
func (npcuo *NovelPayConfigUpdateOne) Mutation() *NovelPayConfigMutation {
	return npcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (npcuo *NovelPayConfigUpdateOne) Select(field string, fields ...string) *NovelPayConfigUpdateOne {
	npcuo.fields = append([]string{field}, fields...)
	return npcuo
}

// Save executes the query and returns the updated NovelPayConfig entity.
func (npcuo *NovelPayConfigUpdateOne) Save(ctx context.Context) (*NovelPayConfig, error) {
	var (
		err  error
		node *NovelPayConfig
	)
	npcuo.defaults()
	if len(npcuo.hooks) == 0 {
		node, err = npcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelPayConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			npcuo.mutation = mutation
			node, err = npcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(npcuo.hooks) - 1; i >= 0; i-- {
			if npcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = npcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (npcuo *NovelPayConfigUpdateOne) SaveX(ctx context.Context) *NovelPayConfig {
	node, err := npcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (npcuo *NovelPayConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := npcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npcuo *NovelPayConfigUpdateOne) ExecX(ctx context.Context) {
	if err := npcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npcuo *NovelPayConfigUpdateOne) defaults() {
	if _, ok := npcuo.mutation.UpdatedAt(); !ok {
		v := novelpayconfig.UpdateDefaultUpdatedAt()
		npcuo.mutation.SetUpdatedAt(v)
	}
}

func (npcuo *NovelPayConfigUpdateOne) sqlSave(ctx context.Context) (_node *NovelPayConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelpayconfig.Table,
			Columns: novelpayconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelpayconfig.FieldID,
			},
		},
	}
	id, ok := npcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NovelPayConfig.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := npcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, novelpayconfig.FieldID)
		for _, f := range fields {
			if !novelpayconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != novelpayconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := npcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := npcuo.mutation.ProductId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldProductId,
		})
	}
	if npcuo.mutation.ProductIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldProductId,
		})
	}
	if value, ok := npcuo.mutation.PaymentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldPaymentName,
		})
	}
	if npcuo.mutation.PaymentNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldPaymentName,
		})
	}
	if value, ok := npcuo.mutation.FirstPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldFirstPayment,
		})
	}
	if value, ok := npcuo.mutation.AddedFirstPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldFirstPayment,
		})
	}
	if npcuo.mutation.FirstPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldFirstPayment,
		})
	}
	if value, ok := npcuo.mutation.Payment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldPayment,
		})
	}
	if value, ok := npcuo.mutation.AddedPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldPayment,
		})
	}
	if npcuo.mutation.PaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldPayment,
		})
	}
	if value, ok := npcuo.mutation.OriginalPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldOriginalPrice,
		})
	}
	if value, ok := npcuo.mutation.AddedOriginalPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldOriginalPrice,
		})
	}
	if npcuo.mutation.OriginalPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldOriginalPrice,
		})
	}
	if value, ok := npcuo.mutation.CfgType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldCfgType,
		})
	}
	if npcuo.mutation.CfgTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldCfgType,
		})
	}
	if value, ok := npcuo.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoin,
		})
	}
	if value, ok := npcuo.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoin,
		})
	}
	if npcuo.mutation.CoinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldCoin,
		})
	}
	if value, ok := npcuo.mutation.Currency(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldCurrency,
		})
	}
	if npcuo.mutation.CurrencyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldCurrency,
		})
	}
	if value, ok := npcuo.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoupon,
		})
	}
	if value, ok := npcuo.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCoupon,
		})
	}
	if npcuo.mutation.CouponCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldCoupon,
		})
	}
	if value, ok := npcuo.mutation.CoinItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCoinItem,
		})
	}
	if value, ok := npcuo.mutation.AddedCoinItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCoinItem,
		})
	}
	if npcuo.mutation.CoinItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldCoinItem,
		})
	}
	if value, ok := npcuo.mutation.CouponItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCouponItem,
		})
	}
	if value, ok := npcuo.mutation.AddedCouponItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCouponItem,
		})
	}
	if npcuo.mutation.CouponItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldCouponItem,
		})
	}
	if value, ok := npcuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldSort,
		})
	}
	if value, ok := npcuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldSort,
		})
	}
	if npcuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldSort,
		})
	}
	if value, ok := npcuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelpayconfig.FieldState,
		})
	}
	if npcuo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelpayconfig.FieldState,
		})
	}
	if value, ok := npcuo.mutation.IsSend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldIsSend,
		})
	}
	if value, ok := npcuo.mutation.AddedIsSend(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldIsSend,
		})
	}
	if npcuo.mutation.IsSendCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldIsSend,
		})
	}
	if value, ok := npcuo.mutation.PayType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldPayType,
		})
	}
	if value, ok := npcuo.mutation.AddedPayType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldPayType,
		})
	}
	if npcuo.mutation.PayTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldPayType,
		})
	}
	if value, ok := npcuo.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldVipType,
		})
	}
	if value, ok := npcuo.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldVipType,
		})
	}
	if npcuo.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelpayconfig.FieldVipType,
		})
	}
	if value, ok := npcuo.mutation.IsHot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelpayconfig.FieldIsHot,
		})
	}
	if npcuo.mutation.IsHotCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelpayconfig.FieldIsHot,
		})
	}
	if value, ok := npcuo.mutation.CycleDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCycleDay,
		})
	}
	if value, ok := npcuo.mutation.AddedCycleDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelpayconfig.FieldCycleDay,
		})
	}
	if npcuo.mutation.CycleDayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelpayconfig.FieldCycleDay,
		})
	}
	if value, ok := npcuo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldSummary,
		})
	}
	if npcuo.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldSummary,
		})
	}
	if value, ok := npcuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelpayconfig.FieldRemark,
		})
	}
	if npcuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelpayconfig.FieldRemark,
		})
	}
	if value, ok := npcuo.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldEffectTime,
		})
	}
	if value, ok := npcuo.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldExpiredTime,
		})
	}
	if value, ok := npcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelpayconfig.FieldUpdatedAt,
		})
	}
	if value, ok := npcuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCreateBy,
		})
	}
	if value, ok := npcuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldCreateBy,
		})
	}
	if value, ok := npcuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldUpdateBy,
		})
	}
	if value, ok := npcuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldUpdateBy,
		})
	}
	if value, ok := npcuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldTenantId,
		})
	}
	if value, ok := npcuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelpayconfig.FieldTenantId,
		})
	}
	_node = &NovelPayConfig{config: npcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, npcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelpayconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
