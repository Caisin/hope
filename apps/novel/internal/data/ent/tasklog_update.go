// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/tasklog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskLogUpdate is the builder for updating TaskLog entities.
type TaskLogUpdate struct {
	config
	hooks    []Hook
	mutation *TaskLogMutation
}

// Where appends a list predicates to the TaskLogUpdate builder.
func (tlu *TaskLogUpdate) Where(ps ...predicate.TaskLog) *TaskLogUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetUserId sets the "userId" field.
func (tlu *TaskLogUpdate) SetUserId(i int64) *TaskLogUpdate {
	tlu.mutation.SetUserId(i)
	return tlu
}

// SetTaskGroup sets the "taskGroup" field.
func (tlu *TaskLogUpdate) SetTaskGroup(s string) *TaskLogUpdate {
	tlu.mutation.SetTaskGroup(s)
	return tlu
}

// SetNillableTaskGroup sets the "taskGroup" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableTaskGroup(s *string) *TaskLogUpdate {
	if s != nil {
		tlu.SetTaskGroup(*s)
	}
	return tlu
}

// ClearTaskGroup clears the value of the "taskGroup" field.
func (tlu *TaskLogUpdate) ClearTaskGroup() *TaskLogUpdate {
	tlu.mutation.ClearTaskGroup()
	return tlu
}

// SetTaskCode sets the "taskCode" field.
func (tlu *TaskLogUpdate) SetTaskCode(s string) *TaskLogUpdate {
	tlu.mutation.SetTaskCode(s)
	return tlu
}

// SetNillableTaskCode sets the "taskCode" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableTaskCode(s *string) *TaskLogUpdate {
	if s != nil {
		tlu.SetTaskCode(*s)
	}
	return tlu
}

// ClearTaskCode clears the value of the "taskCode" field.
func (tlu *TaskLogUpdate) ClearTaskCode() *TaskLogUpdate {
	tlu.mutation.ClearTaskCode()
	return tlu
}

// SetTaskId sets the "taskId" field.
func (tlu *TaskLogUpdate) SetTaskId(i int64) *TaskLogUpdate {
	tlu.mutation.ResetTaskId()
	tlu.mutation.SetTaskId(i)
	return tlu
}

// SetNillableTaskId sets the "taskId" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableTaskId(i *int64) *TaskLogUpdate {
	if i != nil {
		tlu.SetTaskId(*i)
	}
	return tlu
}

// AddTaskId adds i to the "taskId" field.
func (tlu *TaskLogUpdate) AddTaskId(i int64) *TaskLogUpdate {
	tlu.mutation.AddTaskId(i)
	return tlu
}

// ClearTaskId clears the value of the "taskId" field.
func (tlu *TaskLogUpdate) ClearTaskId() *TaskLogUpdate {
	tlu.mutation.ClearTaskId()
	return tlu
}

// SetTaskName sets the "taskName" field.
func (tlu *TaskLogUpdate) SetTaskName(s string) *TaskLogUpdate {
	tlu.mutation.SetTaskName(s)
	return tlu
}

// SetNillableTaskName sets the "taskName" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableTaskName(s *string) *TaskLogUpdate {
	if s != nil {
		tlu.SetTaskName(*s)
	}
	return tlu
}

// ClearTaskName clears the value of the "taskName" field.
func (tlu *TaskLogUpdate) ClearTaskName() *TaskLogUpdate {
	tlu.mutation.ClearTaskName()
	return tlu
}

// SetAmount sets the "amount" field.
func (tlu *TaskLogUpdate) SetAmount(i int64) *TaskLogUpdate {
	tlu.mutation.ResetAmount()
	tlu.mutation.SetAmount(i)
	return tlu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableAmount(i *int64) *TaskLogUpdate {
	if i != nil {
		tlu.SetAmount(*i)
	}
	return tlu
}

// AddAmount adds i to the "amount" field.
func (tlu *TaskLogUpdate) AddAmount(i int64) *TaskLogUpdate {
	tlu.mutation.AddAmount(i)
	return tlu
}

// ClearAmount clears the value of the "amount" field.
func (tlu *TaskLogUpdate) ClearAmount() *TaskLogUpdate {
	tlu.mutation.ClearAmount()
	return tlu
}

// SetReward sets the "reward" field.
func (tlu *TaskLogUpdate) SetReward(i int64) *TaskLogUpdate {
	tlu.mutation.ResetReward()
	tlu.mutation.SetReward(i)
	return tlu
}

// SetNillableReward sets the "reward" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableReward(i *int64) *TaskLogUpdate {
	if i != nil {
		tlu.SetReward(*i)
	}
	return tlu
}

// AddReward adds i to the "reward" field.
func (tlu *TaskLogUpdate) AddReward(i int64) *TaskLogUpdate {
	tlu.mutation.AddReward(i)
	return tlu
}

// ClearReward clears the value of the "reward" field.
func (tlu *TaskLogUpdate) ClearReward() *TaskLogUpdate {
	tlu.mutation.ClearReward()
	return tlu
}

// SetAmountItem sets the "amountItem" field.
func (tlu *TaskLogUpdate) SetAmountItem(i int32) *TaskLogUpdate {
	tlu.mutation.ResetAmountItem()
	tlu.mutation.SetAmountItem(i)
	return tlu
}

// SetNillableAmountItem sets the "amountItem" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableAmountItem(i *int32) *TaskLogUpdate {
	if i != nil {
		tlu.SetAmountItem(*i)
	}
	return tlu
}

// AddAmountItem adds i to the "amountItem" field.
func (tlu *TaskLogUpdate) AddAmountItem(i int32) *TaskLogUpdate {
	tlu.mutation.AddAmountItem(i)
	return tlu
}

// ClearAmountItem clears the value of the "amountItem" field.
func (tlu *TaskLogUpdate) ClearAmountItem() *TaskLogUpdate {
	tlu.mutation.ClearAmountItem()
	return tlu
}

// SetRewardItem sets the "rewardItem" field.
func (tlu *TaskLogUpdate) SetRewardItem(i int32) *TaskLogUpdate {
	tlu.mutation.ResetRewardItem()
	tlu.mutation.SetRewardItem(i)
	return tlu
}

// SetNillableRewardItem sets the "rewardItem" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableRewardItem(i *int32) *TaskLogUpdate {
	if i != nil {
		tlu.SetRewardItem(*i)
	}
	return tlu
}

// AddRewardItem adds i to the "rewardItem" field.
func (tlu *TaskLogUpdate) AddRewardItem(i int32) *TaskLogUpdate {
	tlu.mutation.AddRewardItem(i)
	return tlu
}

// ClearRewardItem clears the value of the "rewardItem" field.
func (tlu *TaskLogUpdate) ClearRewardItem() *TaskLogUpdate {
	tlu.mutation.ClearRewardItem()
	return tlu
}

// SetTargetAmount sets the "targetAmount" field.
func (tlu *TaskLogUpdate) SetTargetAmount(i int64) *TaskLogUpdate {
	tlu.mutation.ResetTargetAmount()
	tlu.mutation.SetTargetAmount(i)
	return tlu
}

// SetNillableTargetAmount sets the "targetAmount" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableTargetAmount(i *int64) *TaskLogUpdate {
	if i != nil {
		tlu.SetTargetAmount(*i)
	}
	return tlu
}

// AddTargetAmount adds i to the "targetAmount" field.
func (tlu *TaskLogUpdate) AddTargetAmount(i int64) *TaskLogUpdate {
	tlu.mutation.AddTargetAmount(i)
	return tlu
}

// ClearTargetAmount clears the value of the "targetAmount" field.
func (tlu *TaskLogUpdate) ClearTargetAmount() *TaskLogUpdate {
	tlu.mutation.ClearTargetAmount()
	return tlu
}

// SetDoneAmount sets the "doneAmount" field.
func (tlu *TaskLogUpdate) SetDoneAmount(i int64) *TaskLogUpdate {
	tlu.mutation.ResetDoneAmount()
	tlu.mutation.SetDoneAmount(i)
	return tlu
}

// SetNillableDoneAmount sets the "doneAmount" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableDoneAmount(i *int64) *TaskLogUpdate {
	if i != nil {
		tlu.SetDoneAmount(*i)
	}
	return tlu
}

// AddDoneAmount adds i to the "doneAmount" field.
func (tlu *TaskLogUpdate) AddDoneAmount(i int64) *TaskLogUpdate {
	tlu.mutation.AddDoneAmount(i)
	return tlu
}

// ClearDoneAmount clears the value of the "doneAmount" field.
func (tlu *TaskLogUpdate) ClearDoneAmount() *TaskLogUpdate {
	tlu.mutation.ClearDoneAmount()
	return tlu
}

// SetState sets the "state" field.
func (tlu *TaskLogUpdate) SetState(i int64) *TaskLogUpdate {
	tlu.mutation.ResetState()
	tlu.mutation.SetState(i)
	return tlu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableState(i *int64) *TaskLogUpdate {
	if i != nil {
		tlu.SetState(*i)
	}
	return tlu
}

// AddState adds i to the "state" field.
func (tlu *TaskLogUpdate) AddState(i int64) *TaskLogUpdate {
	tlu.mutation.AddState(i)
	return tlu
}

// ClearState clears the value of the "state" field.
func (tlu *TaskLogUpdate) ClearState() *TaskLogUpdate {
	tlu.mutation.ClearState()
	return tlu
}

// SetDoneAt sets the "doneAt" field.
func (tlu *TaskLogUpdate) SetDoneAt(t time.Time) *TaskLogUpdate {
	tlu.mutation.SetDoneAt(t)
	return tlu
}

// SetNillableDoneAt sets the "doneAt" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableDoneAt(t *time.Time) *TaskLogUpdate {
	if t != nil {
		tlu.SetDoneAt(*t)
	}
	return tlu
}

// ClearDoneAt clears the value of the "doneAt" field.
func (tlu *TaskLogUpdate) ClearDoneAt() *TaskLogUpdate {
	tlu.mutation.ClearDoneAt()
	return tlu
}

// SetObtainAt sets the "obtainAt" field.
func (tlu *TaskLogUpdate) SetObtainAt(t time.Time) *TaskLogUpdate {
	tlu.mutation.SetObtainAt(t)
	return tlu
}

// SetNillableObtainAt sets the "obtainAt" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableObtainAt(t *time.Time) *TaskLogUpdate {
	if t != nil {
		tlu.SetObtainAt(*t)
	}
	return tlu
}

// ClearObtainAt clears the value of the "obtainAt" field.
func (tlu *TaskLogUpdate) ClearObtainAt() *TaskLogUpdate {
	tlu.mutation.ClearObtainAt()
	return tlu
}

// SetDoneTimes sets the "doneTimes" field.
func (tlu *TaskLogUpdate) SetDoneTimes(i int32) *TaskLogUpdate {
	tlu.mutation.ResetDoneTimes()
	tlu.mutation.SetDoneTimes(i)
	return tlu
}

// SetNillableDoneTimes sets the "doneTimes" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableDoneTimes(i *int32) *TaskLogUpdate {
	if i != nil {
		tlu.SetDoneTimes(*i)
	}
	return tlu
}

// AddDoneTimes adds i to the "doneTimes" field.
func (tlu *TaskLogUpdate) AddDoneTimes(i int32) *TaskLogUpdate {
	tlu.mutation.AddDoneTimes(i)
	return tlu
}

// ClearDoneTimes clears the value of the "doneTimes" field.
func (tlu *TaskLogUpdate) ClearDoneTimes() *TaskLogUpdate {
	tlu.mutation.ClearDoneTimes()
	return tlu
}

// SetAllTimes sets the "allTimes" field.
func (tlu *TaskLogUpdate) SetAllTimes(i int32) *TaskLogUpdate {
	tlu.mutation.ResetAllTimes()
	tlu.mutation.SetAllTimes(i)
	return tlu
}

// SetNillableAllTimes sets the "allTimes" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableAllTimes(i *int32) *TaskLogUpdate {
	if i != nil {
		tlu.SetAllTimes(*i)
	}
	return tlu
}

// AddAllTimes adds i to the "allTimes" field.
func (tlu *TaskLogUpdate) AddAllTimes(i int32) *TaskLogUpdate {
	tlu.mutation.AddAllTimes(i)
	return tlu
}

// ClearAllTimes clears the value of the "allTimes" field.
func (tlu *TaskLogUpdate) ClearAllTimes() *TaskLogUpdate {
	tlu.mutation.ClearAllTimes()
	return tlu
}

// SetEffectTime sets the "effectTime" field.
func (tlu *TaskLogUpdate) SetEffectTime(t time.Time) *TaskLogUpdate {
	tlu.mutation.SetEffectTime(t)
	return tlu
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableEffectTime(t *time.Time) *TaskLogUpdate {
	if t != nil {
		tlu.SetEffectTime(*t)
	}
	return tlu
}

// SetExpiredTime sets the "expiredTime" field.
func (tlu *TaskLogUpdate) SetExpiredTime(t time.Time) *TaskLogUpdate {
	tlu.mutation.SetExpiredTime(t)
	return tlu
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableExpiredTime(t *time.Time) *TaskLogUpdate {
	if t != nil {
		tlu.SetExpiredTime(*t)
	}
	return tlu
}

// SetUpdatedAt sets the "updatedAt" field.
func (tlu *TaskLogUpdate) SetUpdatedAt(t time.Time) *TaskLogUpdate {
	tlu.mutation.SetUpdatedAt(t)
	return tlu
}

// SetCreateBy sets the "createBy" field.
func (tlu *TaskLogUpdate) SetCreateBy(i int64) *TaskLogUpdate {
	tlu.mutation.ResetCreateBy()
	tlu.mutation.SetCreateBy(i)
	return tlu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableCreateBy(i *int64) *TaskLogUpdate {
	if i != nil {
		tlu.SetCreateBy(*i)
	}
	return tlu
}

// AddCreateBy adds i to the "createBy" field.
func (tlu *TaskLogUpdate) AddCreateBy(i int64) *TaskLogUpdate {
	tlu.mutation.AddCreateBy(i)
	return tlu
}

// SetUpdateBy sets the "updateBy" field.
func (tlu *TaskLogUpdate) SetUpdateBy(i int64) *TaskLogUpdate {
	tlu.mutation.ResetUpdateBy()
	tlu.mutation.SetUpdateBy(i)
	return tlu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableUpdateBy(i *int64) *TaskLogUpdate {
	if i != nil {
		tlu.SetUpdateBy(*i)
	}
	return tlu
}

// AddUpdateBy adds i to the "updateBy" field.
func (tlu *TaskLogUpdate) AddUpdateBy(i int64) *TaskLogUpdate {
	tlu.mutation.AddUpdateBy(i)
	return tlu
}

// SetTenantId sets the "tenantId" field.
func (tlu *TaskLogUpdate) SetTenantId(i int64) *TaskLogUpdate {
	tlu.mutation.ResetTenantId()
	tlu.mutation.SetTenantId(i)
	return tlu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (tlu *TaskLogUpdate) SetNillableTenantId(i *int64) *TaskLogUpdate {
	if i != nil {
		tlu.SetTenantId(*i)
	}
	return tlu
}

// AddTenantId adds i to the "tenantId" field.
func (tlu *TaskLogUpdate) AddTenantId(i int64) *TaskLogUpdate {
	tlu.mutation.AddTenantId(i)
	return tlu
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (tlu *TaskLogUpdate) SetUserID(id int64) *TaskLogUpdate {
	tlu.mutation.SetUserID(id)
	return tlu
}

// SetUser sets the "user" edge to the SocialUser entity.
func (tlu *TaskLogUpdate) SetUser(s *SocialUser) *TaskLogUpdate {
	return tlu.SetUserID(s.ID)
}

// Mutation returns the TaskLogMutation object of the builder.
func (tlu *TaskLogUpdate) Mutation() *TaskLogMutation {
	return tlu.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (tlu *TaskLogUpdate) ClearUser() *TaskLogUpdate {
	tlu.mutation.ClearUser()
	return tlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TaskLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tlu.defaults()
	if len(tlu.hooks) == 0 {
		if err = tlu.check(); err != nil {
			return 0, err
		}
		affected, err = tlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tlu.check(); err != nil {
				return 0, err
			}
			tlu.mutation = mutation
			affected, err = tlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tlu.hooks) - 1; i >= 0; i-- {
			if tlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TaskLogUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TaskLogUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TaskLogUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlu *TaskLogUpdate) defaults() {
	if _, ok := tlu.mutation.UpdatedAt(); !ok {
		v := tasklog.UpdateDefaultUpdatedAt()
		tlu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlu *TaskLogUpdate) check() error {
	if _, ok := tlu.mutation.UserID(); tlu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskLog.user"`)
	}
	return nil
}

func (tlu *TaskLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tasklog.Table,
			Columns: tasklog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tasklog.FieldID,
			},
		},
	}
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.TaskGroup(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklog.FieldTaskGroup,
		})
	}
	if tlu.mutation.TaskGroupCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tasklog.FieldTaskGroup,
		})
	}
	if value, ok := tlu.mutation.TaskCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklog.FieldTaskCode,
		})
	}
	if tlu.mutation.TaskCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tasklog.FieldTaskCode,
		})
	}
	if value, ok := tlu.mutation.TaskId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTaskId,
		})
	}
	if value, ok := tlu.mutation.AddedTaskId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTaskId,
		})
	}
	if tlu.mutation.TaskIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldTaskId,
		})
	}
	if value, ok := tlu.mutation.TaskName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklog.FieldTaskName,
		})
	}
	if tlu.mutation.TaskNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tasklog.FieldTaskName,
		})
	}
	if value, ok := tlu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldAmount,
		})
	}
	if value, ok := tlu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldAmount,
		})
	}
	if tlu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldAmount,
		})
	}
	if value, ok := tlu.mutation.Reward(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldReward,
		})
	}
	if value, ok := tlu.mutation.AddedReward(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldReward,
		})
	}
	if tlu.mutation.RewardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldReward,
		})
	}
	if value, ok := tlu.mutation.AmountItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAmountItem,
		})
	}
	if value, ok := tlu.mutation.AddedAmountItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAmountItem,
		})
	}
	if tlu.mutation.AmountItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tasklog.FieldAmountItem,
		})
	}
	if value, ok := tlu.mutation.RewardItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldRewardItem,
		})
	}
	if value, ok := tlu.mutation.AddedRewardItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldRewardItem,
		})
	}
	if tlu.mutation.RewardItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tasklog.FieldRewardItem,
		})
	}
	if value, ok := tlu.mutation.TargetAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTargetAmount,
		})
	}
	if value, ok := tlu.mutation.AddedTargetAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTargetAmount,
		})
	}
	if tlu.mutation.TargetAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldTargetAmount,
		})
	}
	if value, ok := tlu.mutation.DoneAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldDoneAmount,
		})
	}
	if value, ok := tlu.mutation.AddedDoneAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldDoneAmount,
		})
	}
	if tlu.mutation.DoneAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldDoneAmount,
		})
	}
	if value, ok := tlu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldState,
		})
	}
	if value, ok := tlu.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldState,
		})
	}
	if tlu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldState,
		})
	}
	if value, ok := tlu.mutation.DoneAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldDoneAt,
		})
	}
	if tlu.mutation.DoneAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tasklog.FieldDoneAt,
		})
	}
	if value, ok := tlu.mutation.ObtainAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldObtainAt,
		})
	}
	if tlu.mutation.ObtainAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tasklog.FieldObtainAt,
		})
	}
	if value, ok := tlu.mutation.DoneTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldDoneTimes,
		})
	}
	if value, ok := tlu.mutation.AddedDoneTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldDoneTimes,
		})
	}
	if tlu.mutation.DoneTimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tasklog.FieldDoneTimes,
		})
	}
	if value, ok := tlu.mutation.AllTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAllTimes,
		})
	}
	if value, ok := tlu.mutation.AddedAllTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAllTimes,
		})
	}
	if tlu.mutation.AllTimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tasklog.FieldAllTimes,
		})
	}
	if value, ok := tlu.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldEffectTime,
		})
	}
	if value, ok := tlu.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldExpiredTime,
		})
	}
	if value, ok := tlu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldUpdatedAt,
		})
	}
	if value, ok := tlu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldCreateBy,
		})
	}
	if value, ok := tlu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldCreateBy,
		})
	}
	if value, ok := tlu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldUpdateBy,
		})
	}
	if value, ok := tlu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldUpdateBy,
		})
	}
	if value, ok := tlu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTenantId,
		})
	}
	if value, ok := tlu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTenantId,
		})
	}
	if tlu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.UserTable,
			Columns: []string{tasklog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.UserTable,
			Columns: []string{tasklog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasklog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskLogUpdateOne is the builder for updating a single TaskLog entity.
type TaskLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskLogMutation
}

// SetUserId sets the "userId" field.
func (tluo *TaskLogUpdateOne) SetUserId(i int64) *TaskLogUpdateOne {
	tluo.mutation.SetUserId(i)
	return tluo
}

// SetTaskGroup sets the "taskGroup" field.
func (tluo *TaskLogUpdateOne) SetTaskGroup(s string) *TaskLogUpdateOne {
	tluo.mutation.SetTaskGroup(s)
	return tluo
}

// SetNillableTaskGroup sets the "taskGroup" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableTaskGroup(s *string) *TaskLogUpdateOne {
	if s != nil {
		tluo.SetTaskGroup(*s)
	}
	return tluo
}

// ClearTaskGroup clears the value of the "taskGroup" field.
func (tluo *TaskLogUpdateOne) ClearTaskGroup() *TaskLogUpdateOne {
	tluo.mutation.ClearTaskGroup()
	return tluo
}

// SetTaskCode sets the "taskCode" field.
func (tluo *TaskLogUpdateOne) SetTaskCode(s string) *TaskLogUpdateOne {
	tluo.mutation.SetTaskCode(s)
	return tluo
}

// SetNillableTaskCode sets the "taskCode" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableTaskCode(s *string) *TaskLogUpdateOne {
	if s != nil {
		tluo.SetTaskCode(*s)
	}
	return tluo
}

// ClearTaskCode clears the value of the "taskCode" field.
func (tluo *TaskLogUpdateOne) ClearTaskCode() *TaskLogUpdateOne {
	tluo.mutation.ClearTaskCode()
	return tluo
}

// SetTaskId sets the "taskId" field.
func (tluo *TaskLogUpdateOne) SetTaskId(i int64) *TaskLogUpdateOne {
	tluo.mutation.ResetTaskId()
	tluo.mutation.SetTaskId(i)
	return tluo
}

// SetNillableTaskId sets the "taskId" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableTaskId(i *int64) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetTaskId(*i)
	}
	return tluo
}

// AddTaskId adds i to the "taskId" field.
func (tluo *TaskLogUpdateOne) AddTaskId(i int64) *TaskLogUpdateOne {
	tluo.mutation.AddTaskId(i)
	return tluo
}

// ClearTaskId clears the value of the "taskId" field.
func (tluo *TaskLogUpdateOne) ClearTaskId() *TaskLogUpdateOne {
	tluo.mutation.ClearTaskId()
	return tluo
}

// SetTaskName sets the "taskName" field.
func (tluo *TaskLogUpdateOne) SetTaskName(s string) *TaskLogUpdateOne {
	tluo.mutation.SetTaskName(s)
	return tluo
}

// SetNillableTaskName sets the "taskName" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableTaskName(s *string) *TaskLogUpdateOne {
	if s != nil {
		tluo.SetTaskName(*s)
	}
	return tluo
}

// ClearTaskName clears the value of the "taskName" field.
func (tluo *TaskLogUpdateOne) ClearTaskName() *TaskLogUpdateOne {
	tluo.mutation.ClearTaskName()
	return tluo
}

// SetAmount sets the "amount" field.
func (tluo *TaskLogUpdateOne) SetAmount(i int64) *TaskLogUpdateOne {
	tluo.mutation.ResetAmount()
	tluo.mutation.SetAmount(i)
	return tluo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableAmount(i *int64) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetAmount(*i)
	}
	return tluo
}

// AddAmount adds i to the "amount" field.
func (tluo *TaskLogUpdateOne) AddAmount(i int64) *TaskLogUpdateOne {
	tluo.mutation.AddAmount(i)
	return tluo
}

// ClearAmount clears the value of the "amount" field.
func (tluo *TaskLogUpdateOne) ClearAmount() *TaskLogUpdateOne {
	tluo.mutation.ClearAmount()
	return tluo
}

// SetReward sets the "reward" field.
func (tluo *TaskLogUpdateOne) SetReward(i int64) *TaskLogUpdateOne {
	tluo.mutation.ResetReward()
	tluo.mutation.SetReward(i)
	return tluo
}

// SetNillableReward sets the "reward" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableReward(i *int64) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetReward(*i)
	}
	return tluo
}

// AddReward adds i to the "reward" field.
func (tluo *TaskLogUpdateOne) AddReward(i int64) *TaskLogUpdateOne {
	tluo.mutation.AddReward(i)
	return tluo
}

// ClearReward clears the value of the "reward" field.
func (tluo *TaskLogUpdateOne) ClearReward() *TaskLogUpdateOne {
	tluo.mutation.ClearReward()
	return tluo
}

// SetAmountItem sets the "amountItem" field.
func (tluo *TaskLogUpdateOne) SetAmountItem(i int32) *TaskLogUpdateOne {
	tluo.mutation.ResetAmountItem()
	tluo.mutation.SetAmountItem(i)
	return tluo
}

// SetNillableAmountItem sets the "amountItem" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableAmountItem(i *int32) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetAmountItem(*i)
	}
	return tluo
}

// AddAmountItem adds i to the "amountItem" field.
func (tluo *TaskLogUpdateOne) AddAmountItem(i int32) *TaskLogUpdateOne {
	tluo.mutation.AddAmountItem(i)
	return tluo
}

// ClearAmountItem clears the value of the "amountItem" field.
func (tluo *TaskLogUpdateOne) ClearAmountItem() *TaskLogUpdateOne {
	tluo.mutation.ClearAmountItem()
	return tluo
}

// SetRewardItem sets the "rewardItem" field.
func (tluo *TaskLogUpdateOne) SetRewardItem(i int32) *TaskLogUpdateOne {
	tluo.mutation.ResetRewardItem()
	tluo.mutation.SetRewardItem(i)
	return tluo
}

// SetNillableRewardItem sets the "rewardItem" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableRewardItem(i *int32) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetRewardItem(*i)
	}
	return tluo
}

// AddRewardItem adds i to the "rewardItem" field.
func (tluo *TaskLogUpdateOne) AddRewardItem(i int32) *TaskLogUpdateOne {
	tluo.mutation.AddRewardItem(i)
	return tluo
}

// ClearRewardItem clears the value of the "rewardItem" field.
func (tluo *TaskLogUpdateOne) ClearRewardItem() *TaskLogUpdateOne {
	tluo.mutation.ClearRewardItem()
	return tluo
}

// SetTargetAmount sets the "targetAmount" field.
func (tluo *TaskLogUpdateOne) SetTargetAmount(i int64) *TaskLogUpdateOne {
	tluo.mutation.ResetTargetAmount()
	tluo.mutation.SetTargetAmount(i)
	return tluo
}

// SetNillableTargetAmount sets the "targetAmount" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableTargetAmount(i *int64) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetTargetAmount(*i)
	}
	return tluo
}

// AddTargetAmount adds i to the "targetAmount" field.
func (tluo *TaskLogUpdateOne) AddTargetAmount(i int64) *TaskLogUpdateOne {
	tluo.mutation.AddTargetAmount(i)
	return tluo
}

// ClearTargetAmount clears the value of the "targetAmount" field.
func (tluo *TaskLogUpdateOne) ClearTargetAmount() *TaskLogUpdateOne {
	tluo.mutation.ClearTargetAmount()
	return tluo
}

// SetDoneAmount sets the "doneAmount" field.
func (tluo *TaskLogUpdateOne) SetDoneAmount(i int64) *TaskLogUpdateOne {
	tluo.mutation.ResetDoneAmount()
	tluo.mutation.SetDoneAmount(i)
	return tluo
}

// SetNillableDoneAmount sets the "doneAmount" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableDoneAmount(i *int64) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetDoneAmount(*i)
	}
	return tluo
}

// AddDoneAmount adds i to the "doneAmount" field.
func (tluo *TaskLogUpdateOne) AddDoneAmount(i int64) *TaskLogUpdateOne {
	tluo.mutation.AddDoneAmount(i)
	return tluo
}

// ClearDoneAmount clears the value of the "doneAmount" field.
func (tluo *TaskLogUpdateOne) ClearDoneAmount() *TaskLogUpdateOne {
	tluo.mutation.ClearDoneAmount()
	return tluo
}

// SetState sets the "state" field.
func (tluo *TaskLogUpdateOne) SetState(i int64) *TaskLogUpdateOne {
	tluo.mutation.ResetState()
	tluo.mutation.SetState(i)
	return tluo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableState(i *int64) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetState(*i)
	}
	return tluo
}

// AddState adds i to the "state" field.
func (tluo *TaskLogUpdateOne) AddState(i int64) *TaskLogUpdateOne {
	tluo.mutation.AddState(i)
	return tluo
}

// ClearState clears the value of the "state" field.
func (tluo *TaskLogUpdateOne) ClearState() *TaskLogUpdateOne {
	tluo.mutation.ClearState()
	return tluo
}

// SetDoneAt sets the "doneAt" field.
func (tluo *TaskLogUpdateOne) SetDoneAt(t time.Time) *TaskLogUpdateOne {
	tluo.mutation.SetDoneAt(t)
	return tluo
}

// SetNillableDoneAt sets the "doneAt" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableDoneAt(t *time.Time) *TaskLogUpdateOne {
	if t != nil {
		tluo.SetDoneAt(*t)
	}
	return tluo
}

// ClearDoneAt clears the value of the "doneAt" field.
func (tluo *TaskLogUpdateOne) ClearDoneAt() *TaskLogUpdateOne {
	tluo.mutation.ClearDoneAt()
	return tluo
}

// SetObtainAt sets the "obtainAt" field.
func (tluo *TaskLogUpdateOne) SetObtainAt(t time.Time) *TaskLogUpdateOne {
	tluo.mutation.SetObtainAt(t)
	return tluo
}

// SetNillableObtainAt sets the "obtainAt" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableObtainAt(t *time.Time) *TaskLogUpdateOne {
	if t != nil {
		tluo.SetObtainAt(*t)
	}
	return tluo
}

// ClearObtainAt clears the value of the "obtainAt" field.
func (tluo *TaskLogUpdateOne) ClearObtainAt() *TaskLogUpdateOne {
	tluo.mutation.ClearObtainAt()
	return tluo
}

// SetDoneTimes sets the "doneTimes" field.
func (tluo *TaskLogUpdateOne) SetDoneTimes(i int32) *TaskLogUpdateOne {
	tluo.mutation.ResetDoneTimes()
	tluo.mutation.SetDoneTimes(i)
	return tluo
}

// SetNillableDoneTimes sets the "doneTimes" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableDoneTimes(i *int32) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetDoneTimes(*i)
	}
	return tluo
}

// AddDoneTimes adds i to the "doneTimes" field.
func (tluo *TaskLogUpdateOne) AddDoneTimes(i int32) *TaskLogUpdateOne {
	tluo.mutation.AddDoneTimes(i)
	return tluo
}

// ClearDoneTimes clears the value of the "doneTimes" field.
func (tluo *TaskLogUpdateOne) ClearDoneTimes() *TaskLogUpdateOne {
	tluo.mutation.ClearDoneTimes()
	return tluo
}

// SetAllTimes sets the "allTimes" field.
func (tluo *TaskLogUpdateOne) SetAllTimes(i int32) *TaskLogUpdateOne {
	tluo.mutation.ResetAllTimes()
	tluo.mutation.SetAllTimes(i)
	return tluo
}

// SetNillableAllTimes sets the "allTimes" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableAllTimes(i *int32) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetAllTimes(*i)
	}
	return tluo
}

// AddAllTimes adds i to the "allTimes" field.
func (tluo *TaskLogUpdateOne) AddAllTimes(i int32) *TaskLogUpdateOne {
	tluo.mutation.AddAllTimes(i)
	return tluo
}

// ClearAllTimes clears the value of the "allTimes" field.
func (tluo *TaskLogUpdateOne) ClearAllTimes() *TaskLogUpdateOne {
	tluo.mutation.ClearAllTimes()
	return tluo
}

// SetEffectTime sets the "effectTime" field.
func (tluo *TaskLogUpdateOne) SetEffectTime(t time.Time) *TaskLogUpdateOne {
	tluo.mutation.SetEffectTime(t)
	return tluo
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableEffectTime(t *time.Time) *TaskLogUpdateOne {
	if t != nil {
		tluo.SetEffectTime(*t)
	}
	return tluo
}

// SetExpiredTime sets the "expiredTime" field.
func (tluo *TaskLogUpdateOne) SetExpiredTime(t time.Time) *TaskLogUpdateOne {
	tluo.mutation.SetExpiredTime(t)
	return tluo
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableExpiredTime(t *time.Time) *TaskLogUpdateOne {
	if t != nil {
		tluo.SetExpiredTime(*t)
	}
	return tluo
}

// SetUpdatedAt sets the "updatedAt" field.
func (tluo *TaskLogUpdateOne) SetUpdatedAt(t time.Time) *TaskLogUpdateOne {
	tluo.mutation.SetUpdatedAt(t)
	return tluo
}

// SetCreateBy sets the "createBy" field.
func (tluo *TaskLogUpdateOne) SetCreateBy(i int64) *TaskLogUpdateOne {
	tluo.mutation.ResetCreateBy()
	tluo.mutation.SetCreateBy(i)
	return tluo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableCreateBy(i *int64) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetCreateBy(*i)
	}
	return tluo
}

// AddCreateBy adds i to the "createBy" field.
func (tluo *TaskLogUpdateOne) AddCreateBy(i int64) *TaskLogUpdateOne {
	tluo.mutation.AddCreateBy(i)
	return tluo
}

// SetUpdateBy sets the "updateBy" field.
func (tluo *TaskLogUpdateOne) SetUpdateBy(i int64) *TaskLogUpdateOne {
	tluo.mutation.ResetUpdateBy()
	tluo.mutation.SetUpdateBy(i)
	return tluo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableUpdateBy(i *int64) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetUpdateBy(*i)
	}
	return tluo
}

// AddUpdateBy adds i to the "updateBy" field.
func (tluo *TaskLogUpdateOne) AddUpdateBy(i int64) *TaskLogUpdateOne {
	tluo.mutation.AddUpdateBy(i)
	return tluo
}

// SetTenantId sets the "tenantId" field.
func (tluo *TaskLogUpdateOne) SetTenantId(i int64) *TaskLogUpdateOne {
	tluo.mutation.ResetTenantId()
	tluo.mutation.SetTenantId(i)
	return tluo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (tluo *TaskLogUpdateOne) SetNillableTenantId(i *int64) *TaskLogUpdateOne {
	if i != nil {
		tluo.SetTenantId(*i)
	}
	return tluo
}

// AddTenantId adds i to the "tenantId" field.
func (tluo *TaskLogUpdateOne) AddTenantId(i int64) *TaskLogUpdateOne {
	tluo.mutation.AddTenantId(i)
	return tluo
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (tluo *TaskLogUpdateOne) SetUserID(id int64) *TaskLogUpdateOne {
	tluo.mutation.SetUserID(id)
	return tluo
}

// SetUser sets the "user" edge to the SocialUser entity.
func (tluo *TaskLogUpdateOne) SetUser(s *SocialUser) *TaskLogUpdateOne {
	return tluo.SetUserID(s.ID)
}

// Mutation returns the TaskLogMutation object of the builder.
func (tluo *TaskLogUpdateOne) Mutation() *TaskLogMutation {
	return tluo.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (tluo *TaskLogUpdateOne) ClearUser() *TaskLogUpdateOne {
	tluo.mutation.ClearUser()
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TaskLogUpdateOne) Select(field string, fields ...string) *TaskLogUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TaskLog entity.
func (tluo *TaskLogUpdateOne) Save(ctx context.Context) (*TaskLog, error) {
	var (
		err  error
		node *TaskLog
	)
	tluo.defaults()
	if len(tluo.hooks) == 0 {
		if err = tluo.check(); err != nil {
			return nil, err
		}
		node, err = tluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tluo.check(); err != nil {
				return nil, err
			}
			tluo.mutation = mutation
			node, err = tluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tluo.hooks) - 1; i >= 0; i-- {
			if tluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TaskLogUpdateOne) SaveX(ctx context.Context) *TaskLog {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TaskLogUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TaskLogUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tluo *TaskLogUpdateOne) defaults() {
	if _, ok := tluo.mutation.UpdatedAt(); !ok {
		v := tasklog.UpdateDefaultUpdatedAt()
		tluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluo *TaskLogUpdateOne) check() error {
	if _, ok := tluo.mutation.UserID(); tluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskLog.user"`)
	}
	return nil
}

func (tluo *TaskLogUpdateOne) sqlSave(ctx context.Context) (_node *TaskLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tasklog.Table,
			Columns: tasklog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tasklog.FieldID,
			},
		},
	}
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasklog.FieldID)
		for _, f := range fields {
			if !tasklog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tasklog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.TaskGroup(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklog.FieldTaskGroup,
		})
	}
	if tluo.mutation.TaskGroupCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tasklog.FieldTaskGroup,
		})
	}
	if value, ok := tluo.mutation.TaskCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklog.FieldTaskCode,
		})
	}
	if tluo.mutation.TaskCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tasklog.FieldTaskCode,
		})
	}
	if value, ok := tluo.mutation.TaskId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTaskId,
		})
	}
	if value, ok := tluo.mutation.AddedTaskId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTaskId,
		})
	}
	if tluo.mutation.TaskIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldTaskId,
		})
	}
	if value, ok := tluo.mutation.TaskName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasklog.FieldTaskName,
		})
	}
	if tluo.mutation.TaskNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tasklog.FieldTaskName,
		})
	}
	if value, ok := tluo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldAmount,
		})
	}
	if value, ok := tluo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldAmount,
		})
	}
	if tluo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldAmount,
		})
	}
	if value, ok := tluo.mutation.Reward(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldReward,
		})
	}
	if value, ok := tluo.mutation.AddedReward(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldReward,
		})
	}
	if tluo.mutation.RewardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldReward,
		})
	}
	if value, ok := tluo.mutation.AmountItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAmountItem,
		})
	}
	if value, ok := tluo.mutation.AddedAmountItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAmountItem,
		})
	}
	if tluo.mutation.AmountItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tasklog.FieldAmountItem,
		})
	}
	if value, ok := tluo.mutation.RewardItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldRewardItem,
		})
	}
	if value, ok := tluo.mutation.AddedRewardItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldRewardItem,
		})
	}
	if tluo.mutation.RewardItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tasklog.FieldRewardItem,
		})
	}
	if value, ok := tluo.mutation.TargetAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTargetAmount,
		})
	}
	if value, ok := tluo.mutation.AddedTargetAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTargetAmount,
		})
	}
	if tluo.mutation.TargetAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldTargetAmount,
		})
	}
	if value, ok := tluo.mutation.DoneAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldDoneAmount,
		})
	}
	if value, ok := tluo.mutation.AddedDoneAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldDoneAmount,
		})
	}
	if tluo.mutation.DoneAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldDoneAmount,
		})
	}
	if value, ok := tluo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldState,
		})
	}
	if value, ok := tluo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldState,
		})
	}
	if tluo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: tasklog.FieldState,
		})
	}
	if value, ok := tluo.mutation.DoneAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldDoneAt,
		})
	}
	if tluo.mutation.DoneAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tasklog.FieldDoneAt,
		})
	}
	if value, ok := tluo.mutation.ObtainAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldObtainAt,
		})
	}
	if tluo.mutation.ObtainAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: tasklog.FieldObtainAt,
		})
	}
	if value, ok := tluo.mutation.DoneTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldDoneTimes,
		})
	}
	if value, ok := tluo.mutation.AddedDoneTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldDoneTimes,
		})
	}
	if tluo.mutation.DoneTimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tasklog.FieldDoneTimes,
		})
	}
	if value, ok := tluo.mutation.AllTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAllTimes,
		})
	}
	if value, ok := tluo.mutation.AddedAllTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: tasklog.FieldAllTimes,
		})
	}
	if tluo.mutation.AllTimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: tasklog.FieldAllTimes,
		})
	}
	if value, ok := tluo.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldEffectTime,
		})
	}
	if value, ok := tluo.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldExpiredTime,
		})
	}
	if value, ok := tluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tasklog.FieldUpdatedAt,
		})
	}
	if value, ok := tluo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldCreateBy,
		})
	}
	if value, ok := tluo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldCreateBy,
		})
	}
	if value, ok := tluo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldUpdateBy,
		})
	}
	if value, ok := tluo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldUpdateBy,
		})
	}
	if value, ok := tluo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTenantId,
		})
	}
	if value, ok := tluo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tasklog.FieldTenantId,
		})
	}
	if tluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.UserTable,
			Columns: []string{tasklog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasklog.UserTable,
			Columns: []string{tasklog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskLog{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasklog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
