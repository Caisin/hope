// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/listenrecord"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ListenRecordUpdate is the builder for updating ListenRecord entities.
type ListenRecordUpdate struct {
	config
	hooks    []Hook
	mutation *ListenRecordMutation
}

// Where appends a list predicates to the ListenRecordUpdate builder.
func (lru *ListenRecordUpdate) Where(ps ...predicate.ListenRecord) *ListenRecordUpdate {
	lru.mutation.Where(ps...)
	return lru
}

// SetUserId sets the "userId" field.
func (lru *ListenRecordUpdate) SetUserId(i int64) *ListenRecordUpdate {
	lru.mutation.ResetUserId()
	lru.mutation.SetUserId(i)
	return lru
}

// AddUserId adds i to the "userId" field.
func (lru *ListenRecordUpdate) AddUserId(i int64) *ListenRecordUpdate {
	lru.mutation.AddUserId(i)
	return lru
}

// SetChapterId sets the "chapterId" field.
func (lru *ListenRecordUpdate) SetChapterId(i int64) *ListenRecordUpdate {
	lru.mutation.ResetChapterId()
	lru.mutation.SetChapterId(i)
	return lru
}

// AddChapterId adds i to the "chapterId" field.
func (lru *ListenRecordUpdate) AddChapterId(i int64) *ListenRecordUpdate {
	lru.mutation.AddChapterId(i)
	return lru
}

// SetNovelId sets the "novelId" field.
func (lru *ListenRecordUpdate) SetNovelId(i int64) *ListenRecordUpdate {
	lru.mutation.ResetNovelId()
	lru.mutation.SetNovelId(i)
	return lru
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (lru *ListenRecordUpdate) SetNillableNovelId(i *int64) *ListenRecordUpdate {
	if i != nil {
		lru.SetNovelId(*i)
	}
	return lru
}

// AddNovelId adds i to the "novelId" field.
func (lru *ListenRecordUpdate) AddNovelId(i int64) *ListenRecordUpdate {
	lru.mutation.AddNovelId(i)
	return lru
}

// ClearNovelId clears the value of the "novelId" field.
func (lru *ListenRecordUpdate) ClearNovelId() *ListenRecordUpdate {
	lru.mutation.ClearNovelId()
	return lru
}

// SetListenTimes sets the "listenTimes" field.
func (lru *ListenRecordUpdate) SetListenTimes(i int64) *ListenRecordUpdate {
	lru.mutation.ResetListenTimes()
	lru.mutation.SetListenTimes(i)
	return lru
}

// SetNillableListenTimes sets the "listenTimes" field if the given value is not nil.
func (lru *ListenRecordUpdate) SetNillableListenTimes(i *int64) *ListenRecordUpdate {
	if i != nil {
		lru.SetListenTimes(*i)
	}
	return lru
}

// AddListenTimes adds i to the "listenTimes" field.
func (lru *ListenRecordUpdate) AddListenTimes(i int64) *ListenRecordUpdate {
	lru.mutation.AddListenTimes(i)
	return lru
}

// ClearListenTimes clears the value of the "listenTimes" field.
func (lru *ListenRecordUpdate) ClearListenTimes() *ListenRecordUpdate {
	lru.mutation.ClearListenTimes()
	return lru
}

// SetDuration sets the "duration" field.
func (lru *ListenRecordUpdate) SetDuration(t time.Duration) *ListenRecordUpdate {
	lru.mutation.ResetDuration()
	lru.mutation.SetDuration(t)
	return lru
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (lru *ListenRecordUpdate) SetNillableDuration(t *time.Duration) *ListenRecordUpdate {
	if t != nil {
		lru.SetDuration(*t)
	}
	return lru
}

// AddDuration adds t to the "duration" field.
func (lru *ListenRecordUpdate) AddDuration(t time.Duration) *ListenRecordUpdate {
	lru.mutation.AddDuration(t)
	return lru
}

// ClearDuration clears the value of the "duration" field.
func (lru *ListenRecordUpdate) ClearDuration() *ListenRecordUpdate {
	lru.mutation.ClearDuration()
	return lru
}

// SetAllDuration sets the "allDuration" field.
func (lru *ListenRecordUpdate) SetAllDuration(t time.Duration) *ListenRecordUpdate {
	lru.mutation.ResetAllDuration()
	lru.mutation.SetAllDuration(t)
	return lru
}

// SetNillableAllDuration sets the "allDuration" field if the given value is not nil.
func (lru *ListenRecordUpdate) SetNillableAllDuration(t *time.Duration) *ListenRecordUpdate {
	if t != nil {
		lru.SetAllDuration(*t)
	}
	return lru
}

// AddAllDuration adds t to the "allDuration" field.
func (lru *ListenRecordUpdate) AddAllDuration(t time.Duration) *ListenRecordUpdate {
	lru.mutation.AddAllDuration(t)
	return lru
}

// ClearAllDuration clears the value of the "allDuration" field.
func (lru *ListenRecordUpdate) ClearAllDuration() *ListenRecordUpdate {
	lru.mutation.ClearAllDuration()
	return lru
}

// SetDayDuration sets the "dayDuration" field.
func (lru *ListenRecordUpdate) SetDayDuration(t time.Duration) *ListenRecordUpdate {
	lru.mutation.ResetDayDuration()
	lru.mutation.SetDayDuration(t)
	return lru
}

// SetNillableDayDuration sets the "dayDuration" field if the given value is not nil.
func (lru *ListenRecordUpdate) SetNillableDayDuration(t *time.Duration) *ListenRecordUpdate {
	if t != nil {
		lru.SetDayDuration(*t)
	}
	return lru
}

// AddDayDuration adds t to the "dayDuration" field.
func (lru *ListenRecordUpdate) AddDayDuration(t time.Duration) *ListenRecordUpdate {
	lru.mutation.AddDayDuration(t)
	return lru
}

// ClearDayDuration clears the value of the "dayDuration" field.
func (lru *ListenRecordUpdate) ClearDayDuration() *ListenRecordUpdate {
	lru.mutation.ClearDayDuration()
	return lru
}

// SetUpdatedAt sets the "updatedAt" field.
func (lru *ListenRecordUpdate) SetUpdatedAt(t time.Time) *ListenRecordUpdate {
	lru.mutation.SetUpdatedAt(t)
	return lru
}

// SetCreateBy sets the "createBy" field.
func (lru *ListenRecordUpdate) SetCreateBy(i int64) *ListenRecordUpdate {
	lru.mutation.ResetCreateBy()
	lru.mutation.SetCreateBy(i)
	return lru
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (lru *ListenRecordUpdate) SetNillableCreateBy(i *int64) *ListenRecordUpdate {
	if i != nil {
		lru.SetCreateBy(*i)
	}
	return lru
}

// AddCreateBy adds i to the "createBy" field.
func (lru *ListenRecordUpdate) AddCreateBy(i int64) *ListenRecordUpdate {
	lru.mutation.AddCreateBy(i)
	return lru
}

// SetUpdateBy sets the "updateBy" field.
func (lru *ListenRecordUpdate) SetUpdateBy(i int64) *ListenRecordUpdate {
	lru.mutation.ResetUpdateBy()
	lru.mutation.SetUpdateBy(i)
	return lru
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (lru *ListenRecordUpdate) SetNillableUpdateBy(i *int64) *ListenRecordUpdate {
	if i != nil {
		lru.SetUpdateBy(*i)
	}
	return lru
}

// AddUpdateBy adds i to the "updateBy" field.
func (lru *ListenRecordUpdate) AddUpdateBy(i int64) *ListenRecordUpdate {
	lru.mutation.AddUpdateBy(i)
	return lru
}

// SetTenantId sets the "tenantId" field.
func (lru *ListenRecordUpdate) SetTenantId(i int64) *ListenRecordUpdate {
	lru.mutation.ResetTenantId()
	lru.mutation.SetTenantId(i)
	return lru
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (lru *ListenRecordUpdate) SetNillableTenantId(i *int64) *ListenRecordUpdate {
	if i != nil {
		lru.SetTenantId(*i)
	}
	return lru
}

// AddTenantId adds i to the "tenantId" field.
func (lru *ListenRecordUpdate) AddTenantId(i int64) *ListenRecordUpdate {
	lru.mutation.AddTenantId(i)
	return lru
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (lru *ListenRecordUpdate) SetUserID(id int64) *ListenRecordUpdate {
	lru.mutation.SetUserID(id)
	return lru
}

// SetNillableUserID sets the "user" edge to the SocialUser entity by ID if the given value is not nil.
func (lru *ListenRecordUpdate) SetNillableUserID(id *int64) *ListenRecordUpdate {
	if id != nil {
		lru = lru.SetUserID(*id)
	}
	return lru
}

// SetUser sets the "user" edge to the SocialUser entity.
func (lru *ListenRecordUpdate) SetUser(s *SocialUser) *ListenRecordUpdate {
	return lru.SetUserID(s.ID)
}

// Mutation returns the ListenRecordMutation object of the builder.
func (lru *ListenRecordUpdate) Mutation() *ListenRecordMutation {
	return lru.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (lru *ListenRecordUpdate) ClearUser() *ListenRecordUpdate {
	lru.mutation.ClearUser()
	return lru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lru *ListenRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	lru.defaults()
	if len(lru.hooks) == 0 {
		affected, err = lru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ListenRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lru.mutation = mutation
			affected, err = lru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lru.hooks) - 1; i >= 0; i-- {
			if lru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lru *ListenRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := lru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lru *ListenRecordUpdate) Exec(ctx context.Context) error {
	_, err := lru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lru *ListenRecordUpdate) ExecX(ctx context.Context) {
	if err := lru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lru *ListenRecordUpdate) defaults() {
	if _, ok := lru.mutation.UpdatedAt(); !ok {
		v := listenrecord.UpdateDefaultUpdatedAt()
		lru.mutation.SetUpdatedAt(v)
	}
}

func (lru *ListenRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   listenrecord.Table,
			Columns: listenrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: listenrecord.FieldID,
			},
		},
	}
	if ps := lru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lru.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldUserId,
		})
	}
	if value, ok := lru.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldUserId,
		})
	}
	if value, ok := lru.mutation.ChapterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldChapterId,
		})
	}
	if value, ok := lru.mutation.AddedChapterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldChapterId,
		})
	}
	if value, ok := lru.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldNovelId,
		})
	}
	if value, ok := lru.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldNovelId,
		})
	}
	if lru.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldNovelId,
		})
	}
	if value, ok := lru.mutation.ListenTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldListenTimes,
		})
	}
	if value, ok := lru.mutation.AddedListenTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldListenTimes,
		})
	}
	if lru.mutation.ListenTimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldListenTimes,
		})
	}
	if value, ok := lru.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDuration,
		})
	}
	if value, ok := lru.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDuration,
		})
	}
	if lru.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldDuration,
		})
	}
	if value, ok := lru.mutation.AllDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldAllDuration,
		})
	}
	if value, ok := lru.mutation.AddedAllDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldAllDuration,
		})
	}
	if lru.mutation.AllDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldAllDuration,
		})
	}
	if value, ok := lru.mutation.DayDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDayDuration,
		})
	}
	if value, ok := lru.mutation.AddedDayDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDayDuration,
		})
	}
	if lru.mutation.DayDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldDayDuration,
		})
	}
	if value, ok := lru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: listenrecord.FieldUpdatedAt,
		})
	}
	if value, ok := lru.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldCreateBy,
		})
	}
	if value, ok := lru.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldCreateBy,
		})
	}
	if value, ok := lru.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldUpdateBy,
		})
	}
	if value, ok := lru.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldUpdateBy,
		})
	}
	if value, ok := lru.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldTenantId,
		})
	}
	if value, ok := lru.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldTenantId,
		})
	}
	if lru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listenrecord.UserTable,
			Columns: []string{listenrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listenrecord.UserTable,
			Columns: []string{listenrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{listenrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ListenRecordUpdateOne is the builder for updating a single ListenRecord entity.
type ListenRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ListenRecordMutation
}

// SetUserId sets the "userId" field.
func (lruo *ListenRecordUpdateOne) SetUserId(i int64) *ListenRecordUpdateOne {
	lruo.mutation.ResetUserId()
	lruo.mutation.SetUserId(i)
	return lruo
}

// AddUserId adds i to the "userId" field.
func (lruo *ListenRecordUpdateOne) AddUserId(i int64) *ListenRecordUpdateOne {
	lruo.mutation.AddUserId(i)
	return lruo
}

// SetChapterId sets the "chapterId" field.
func (lruo *ListenRecordUpdateOne) SetChapterId(i int64) *ListenRecordUpdateOne {
	lruo.mutation.ResetChapterId()
	lruo.mutation.SetChapterId(i)
	return lruo
}

// AddChapterId adds i to the "chapterId" field.
func (lruo *ListenRecordUpdateOne) AddChapterId(i int64) *ListenRecordUpdateOne {
	lruo.mutation.AddChapterId(i)
	return lruo
}

// SetNovelId sets the "novelId" field.
func (lruo *ListenRecordUpdateOne) SetNovelId(i int64) *ListenRecordUpdateOne {
	lruo.mutation.ResetNovelId()
	lruo.mutation.SetNovelId(i)
	return lruo
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (lruo *ListenRecordUpdateOne) SetNillableNovelId(i *int64) *ListenRecordUpdateOne {
	if i != nil {
		lruo.SetNovelId(*i)
	}
	return lruo
}

// AddNovelId adds i to the "novelId" field.
func (lruo *ListenRecordUpdateOne) AddNovelId(i int64) *ListenRecordUpdateOne {
	lruo.mutation.AddNovelId(i)
	return lruo
}

// ClearNovelId clears the value of the "novelId" field.
func (lruo *ListenRecordUpdateOne) ClearNovelId() *ListenRecordUpdateOne {
	lruo.mutation.ClearNovelId()
	return lruo
}

// SetListenTimes sets the "listenTimes" field.
func (lruo *ListenRecordUpdateOne) SetListenTimes(i int64) *ListenRecordUpdateOne {
	lruo.mutation.ResetListenTimes()
	lruo.mutation.SetListenTimes(i)
	return lruo
}

// SetNillableListenTimes sets the "listenTimes" field if the given value is not nil.
func (lruo *ListenRecordUpdateOne) SetNillableListenTimes(i *int64) *ListenRecordUpdateOne {
	if i != nil {
		lruo.SetListenTimes(*i)
	}
	return lruo
}

// AddListenTimes adds i to the "listenTimes" field.
func (lruo *ListenRecordUpdateOne) AddListenTimes(i int64) *ListenRecordUpdateOne {
	lruo.mutation.AddListenTimes(i)
	return lruo
}

// ClearListenTimes clears the value of the "listenTimes" field.
func (lruo *ListenRecordUpdateOne) ClearListenTimes() *ListenRecordUpdateOne {
	lruo.mutation.ClearListenTimes()
	return lruo
}

// SetDuration sets the "duration" field.
func (lruo *ListenRecordUpdateOne) SetDuration(t time.Duration) *ListenRecordUpdateOne {
	lruo.mutation.ResetDuration()
	lruo.mutation.SetDuration(t)
	return lruo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (lruo *ListenRecordUpdateOne) SetNillableDuration(t *time.Duration) *ListenRecordUpdateOne {
	if t != nil {
		lruo.SetDuration(*t)
	}
	return lruo
}

// AddDuration adds t to the "duration" field.
func (lruo *ListenRecordUpdateOne) AddDuration(t time.Duration) *ListenRecordUpdateOne {
	lruo.mutation.AddDuration(t)
	return lruo
}

// ClearDuration clears the value of the "duration" field.
func (lruo *ListenRecordUpdateOne) ClearDuration() *ListenRecordUpdateOne {
	lruo.mutation.ClearDuration()
	return lruo
}

// SetAllDuration sets the "allDuration" field.
func (lruo *ListenRecordUpdateOne) SetAllDuration(t time.Duration) *ListenRecordUpdateOne {
	lruo.mutation.ResetAllDuration()
	lruo.mutation.SetAllDuration(t)
	return lruo
}

// SetNillableAllDuration sets the "allDuration" field if the given value is not nil.
func (lruo *ListenRecordUpdateOne) SetNillableAllDuration(t *time.Duration) *ListenRecordUpdateOne {
	if t != nil {
		lruo.SetAllDuration(*t)
	}
	return lruo
}

// AddAllDuration adds t to the "allDuration" field.
func (lruo *ListenRecordUpdateOne) AddAllDuration(t time.Duration) *ListenRecordUpdateOne {
	lruo.mutation.AddAllDuration(t)
	return lruo
}

// ClearAllDuration clears the value of the "allDuration" field.
func (lruo *ListenRecordUpdateOne) ClearAllDuration() *ListenRecordUpdateOne {
	lruo.mutation.ClearAllDuration()
	return lruo
}

// SetDayDuration sets the "dayDuration" field.
func (lruo *ListenRecordUpdateOne) SetDayDuration(t time.Duration) *ListenRecordUpdateOne {
	lruo.mutation.ResetDayDuration()
	lruo.mutation.SetDayDuration(t)
	return lruo
}

// SetNillableDayDuration sets the "dayDuration" field if the given value is not nil.
func (lruo *ListenRecordUpdateOne) SetNillableDayDuration(t *time.Duration) *ListenRecordUpdateOne {
	if t != nil {
		lruo.SetDayDuration(*t)
	}
	return lruo
}

// AddDayDuration adds t to the "dayDuration" field.
func (lruo *ListenRecordUpdateOne) AddDayDuration(t time.Duration) *ListenRecordUpdateOne {
	lruo.mutation.AddDayDuration(t)
	return lruo
}

// ClearDayDuration clears the value of the "dayDuration" field.
func (lruo *ListenRecordUpdateOne) ClearDayDuration() *ListenRecordUpdateOne {
	lruo.mutation.ClearDayDuration()
	return lruo
}

// SetUpdatedAt sets the "updatedAt" field.
func (lruo *ListenRecordUpdateOne) SetUpdatedAt(t time.Time) *ListenRecordUpdateOne {
	lruo.mutation.SetUpdatedAt(t)
	return lruo
}

// SetCreateBy sets the "createBy" field.
func (lruo *ListenRecordUpdateOne) SetCreateBy(i int64) *ListenRecordUpdateOne {
	lruo.mutation.ResetCreateBy()
	lruo.mutation.SetCreateBy(i)
	return lruo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (lruo *ListenRecordUpdateOne) SetNillableCreateBy(i *int64) *ListenRecordUpdateOne {
	if i != nil {
		lruo.SetCreateBy(*i)
	}
	return lruo
}

// AddCreateBy adds i to the "createBy" field.
func (lruo *ListenRecordUpdateOne) AddCreateBy(i int64) *ListenRecordUpdateOne {
	lruo.mutation.AddCreateBy(i)
	return lruo
}

// SetUpdateBy sets the "updateBy" field.
func (lruo *ListenRecordUpdateOne) SetUpdateBy(i int64) *ListenRecordUpdateOne {
	lruo.mutation.ResetUpdateBy()
	lruo.mutation.SetUpdateBy(i)
	return lruo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (lruo *ListenRecordUpdateOne) SetNillableUpdateBy(i *int64) *ListenRecordUpdateOne {
	if i != nil {
		lruo.SetUpdateBy(*i)
	}
	return lruo
}

// AddUpdateBy adds i to the "updateBy" field.
func (lruo *ListenRecordUpdateOne) AddUpdateBy(i int64) *ListenRecordUpdateOne {
	lruo.mutation.AddUpdateBy(i)
	return lruo
}

// SetTenantId sets the "tenantId" field.
func (lruo *ListenRecordUpdateOne) SetTenantId(i int64) *ListenRecordUpdateOne {
	lruo.mutation.ResetTenantId()
	lruo.mutation.SetTenantId(i)
	return lruo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (lruo *ListenRecordUpdateOne) SetNillableTenantId(i *int64) *ListenRecordUpdateOne {
	if i != nil {
		lruo.SetTenantId(*i)
	}
	return lruo
}

// AddTenantId adds i to the "tenantId" field.
func (lruo *ListenRecordUpdateOne) AddTenantId(i int64) *ListenRecordUpdateOne {
	lruo.mutation.AddTenantId(i)
	return lruo
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (lruo *ListenRecordUpdateOne) SetUserID(id int64) *ListenRecordUpdateOne {
	lruo.mutation.SetUserID(id)
	return lruo
}

// SetNillableUserID sets the "user" edge to the SocialUser entity by ID if the given value is not nil.
func (lruo *ListenRecordUpdateOne) SetNillableUserID(id *int64) *ListenRecordUpdateOne {
	if id != nil {
		lruo = lruo.SetUserID(*id)
	}
	return lruo
}

// SetUser sets the "user" edge to the SocialUser entity.
func (lruo *ListenRecordUpdateOne) SetUser(s *SocialUser) *ListenRecordUpdateOne {
	return lruo.SetUserID(s.ID)
}

// Mutation returns the ListenRecordMutation object of the builder.
func (lruo *ListenRecordUpdateOne) Mutation() *ListenRecordMutation {
	return lruo.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (lruo *ListenRecordUpdateOne) ClearUser() *ListenRecordUpdateOne {
	lruo.mutation.ClearUser()
	return lruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lruo *ListenRecordUpdateOne) Select(field string, fields ...string) *ListenRecordUpdateOne {
	lruo.fields = append([]string{field}, fields...)
	return lruo
}

// Save executes the query and returns the updated ListenRecord entity.
func (lruo *ListenRecordUpdateOne) Save(ctx context.Context) (*ListenRecord, error) {
	var (
		err  error
		node *ListenRecord
	)
	lruo.defaults()
	if len(lruo.hooks) == 0 {
		node, err = lruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ListenRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lruo.mutation = mutation
			node, err = lruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lruo.hooks) - 1; i >= 0; i-- {
			if lruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lruo *ListenRecordUpdateOne) SaveX(ctx context.Context) *ListenRecord {
	node, err := lruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lruo *ListenRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := lruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lruo *ListenRecordUpdateOne) ExecX(ctx context.Context) {
	if err := lruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lruo *ListenRecordUpdateOne) defaults() {
	if _, ok := lruo.mutation.UpdatedAt(); !ok {
		v := listenrecord.UpdateDefaultUpdatedAt()
		lruo.mutation.SetUpdatedAt(v)
	}
}

func (lruo *ListenRecordUpdateOne) sqlSave(ctx context.Context) (_node *ListenRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   listenrecord.Table,
			Columns: listenrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: listenrecord.FieldID,
			},
		},
	}
	id, ok := lruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ListenRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := lruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, listenrecord.FieldID)
		for _, f := range fields {
			if !listenrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != listenrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lruo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldUserId,
		})
	}
	if value, ok := lruo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldUserId,
		})
	}
	if value, ok := lruo.mutation.ChapterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldChapterId,
		})
	}
	if value, ok := lruo.mutation.AddedChapterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldChapterId,
		})
	}
	if value, ok := lruo.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldNovelId,
		})
	}
	if value, ok := lruo.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldNovelId,
		})
	}
	if lruo.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldNovelId,
		})
	}
	if value, ok := lruo.mutation.ListenTimes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldListenTimes,
		})
	}
	if value, ok := lruo.mutation.AddedListenTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldListenTimes,
		})
	}
	if lruo.mutation.ListenTimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldListenTimes,
		})
	}
	if value, ok := lruo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDuration,
		})
	}
	if value, ok := lruo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDuration,
		})
	}
	if lruo.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldDuration,
		})
	}
	if value, ok := lruo.mutation.AllDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldAllDuration,
		})
	}
	if value, ok := lruo.mutation.AddedAllDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldAllDuration,
		})
	}
	if lruo.mutation.AllDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldAllDuration,
		})
	}
	if value, ok := lruo.mutation.DayDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDayDuration,
		})
	}
	if value, ok := lruo.mutation.AddedDayDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDayDuration,
		})
	}
	if lruo.mutation.DayDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: listenrecord.FieldDayDuration,
		})
	}
	if value, ok := lruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: listenrecord.FieldUpdatedAt,
		})
	}
	if value, ok := lruo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldCreateBy,
		})
	}
	if value, ok := lruo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldCreateBy,
		})
	}
	if value, ok := lruo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldUpdateBy,
		})
	}
	if value, ok := lruo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldUpdateBy,
		})
	}
	if value, ok := lruo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldTenantId,
		})
	}
	if value, ok := lruo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldTenantId,
		})
	}
	if lruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listenrecord.UserTable,
			Columns: []string{listenrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listenrecord.UserTable,
			Columns: []string{listenrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ListenRecord{config: lruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{listenrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
