// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysRoleHTTPServer interface {
	BatchDeleteSysRole(context.Context, *SysRoleBatchDeleteReq) (*SysRoleDeleteReply, error)
	CreateSysRole(context.Context, *SysRoleCreateReq) (*SysRoleCreateReply, error)
	DeleteSysRole(context.Context, *SysRoleDeleteReq) (*SysRoleDeleteReply, error)
	GetSysRole(context.Context, *SysRoleReq) (*SysRoleReply, error)
	GetSysRolePage(context.Context, *SysRolePageReq) (*SysRolePageReply, error)
	UpdateSysRole(context.Context, *SysRoleUpdateReq) (*SysRoleUpdateReply, error)
}

func RegisterSysRoleHTTPServer(s *http.Server, srv SysRoleHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sys/role/page", _SysRole_GetSysRolePage0_HTTP_Handler(srv))
	r.GET("/v1/sys/role/{id}", _SysRole_GetSysRole0_HTTP_Handler(srv))
	r.PUT("/v1/sys/role/{id}", _SysRole_UpdateSysRole0_HTTP_Handler(srv))
	r.POST("/v1/sys/role", _SysRole_CreateSysRole0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/role/{id}", _SysRole_DeleteSysRole0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/role", _SysRole_BatchDeleteSysRole0_HTTP_Handler(srv))
}

func _SysRole_GetSysRolePage0_HTTP_Handler(srv SysRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRolePageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysrole.v1.SysRole/GetSysRolePage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysRolePage(ctx, req.(*SysRolePageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRolePageReply)
		return ctx.Result(200, reply)
	}
}

func _SysRole_GetSysRole0_HTTP_Handler(srv SysRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysrole.v1.SysRole/GetSysRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysRole(ctx, req.(*SysRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleReply)
		return ctx.Result(200, reply)
	}
}

func _SysRole_UpdateSysRole0_HTTP_Handler(srv SysRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysrole.v1.SysRole/UpdateSysRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysRole(ctx, req.(*SysRoleUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysRole_CreateSysRole0_HTTP_Handler(srv SysRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysrole.v1.SysRole/CreateSysRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysRole(ctx, req.(*SysRoleCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysRole_DeleteSysRole0_HTTP_Handler(srv SysRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysrole.v1.SysRole/DeleteSysRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysRole(ctx, req.(*SysRoleDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysRole_BatchDeleteSysRole0_HTTP_Handler(srv SysRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysRoleBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysrole.v1.SysRole/BatchDeleteSysRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysRole(ctx, req.(*SysRoleBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysRoleDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysRoleHTTPClient interface {
	BatchDeleteSysRole(ctx context.Context, req *SysRoleBatchDeleteReq, opts ...http.CallOption) (rsp *SysRoleDeleteReply, err error)
	CreateSysRole(ctx context.Context, req *SysRoleCreateReq, opts ...http.CallOption) (rsp *SysRoleCreateReply, err error)
	DeleteSysRole(ctx context.Context, req *SysRoleDeleteReq, opts ...http.CallOption) (rsp *SysRoleDeleteReply, err error)
	GetSysRole(ctx context.Context, req *SysRoleReq, opts ...http.CallOption) (rsp *SysRoleReply, err error)
	GetSysRolePage(ctx context.Context, req *SysRolePageReq, opts ...http.CallOption) (rsp *SysRolePageReply, err error)
	UpdateSysRole(ctx context.Context, req *SysRoleUpdateReq, opts ...http.CallOption) (rsp *SysRoleUpdateReply, err error)
}

type SysRoleHTTPClientImpl struct {
	cc *http.Client
}

func NewSysRoleHTTPClient(client *http.Client) SysRoleHTTPClient {
	return &SysRoleHTTPClientImpl{client}
}

func (c *SysRoleHTTPClientImpl) BatchDeleteSysRole(ctx context.Context, in *SysRoleBatchDeleteReq, opts ...http.CallOption) (*SysRoleDeleteReply, error) {
	var out SysRoleDeleteReply
	pattern := "/v1/sys/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysrole.v1.SysRole/BatchDeleteSysRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleHTTPClientImpl) CreateSysRole(ctx context.Context, in *SysRoleCreateReq, opts ...http.CallOption) (*SysRoleCreateReply, error) {
	var out SysRoleCreateReply
	pattern := "/v1/sys/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysrole.v1.SysRole/CreateSysRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleHTTPClientImpl) DeleteSysRole(ctx context.Context, in *SysRoleDeleteReq, opts ...http.CallOption) (*SysRoleDeleteReply, error) {
	var out SysRoleDeleteReply
	pattern := "/v1/sys/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysrole.v1.SysRole/DeleteSysRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleHTTPClientImpl) GetSysRole(ctx context.Context, in *SysRoleReq, opts ...http.CallOption) (*SysRoleReply, error) {
	var out SysRoleReply
	pattern := "/v1/sys/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysrole.v1.SysRole/GetSysRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleHTTPClientImpl) GetSysRolePage(ctx context.Context, in *SysRolePageReq, opts ...http.CallOption) (*SysRolePageReply, error) {
	var out SysRolePageReply
	pattern := "/v1/sys/role/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysrole.v1.SysRole/GetSysRolePage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysRoleHTTPClientImpl) UpdateSysRole(ctx context.Context, in *SysRoleUpdateReq, opts ...http.CallOption) (*SysRoleUpdateReply, error) {
	var out SysRoleUpdateReply
	pattern := "/v1/sys/role/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysrole.v1.SysRole/UpdateSysRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
