// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/customernovelconfig/v1/customer_novel_config.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询搜索请求
type CustomerNovelConfigPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *CustomerNovelConfigReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *CustomerNovelConfigPageReq) Reset() {
	*x = CustomerNovelConfigPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigPageReq) ProtoMessage() {}

func (x *CustomerNovelConfigPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigPageReq.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{0}
}

func (x *CustomerNovelConfigPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *CustomerNovelConfigPageReq) GetParam() *CustomerNovelConfigReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type CustomerNovelConfigPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条目
	Items []*CustomerNovelConfigReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CustomerNovelConfigPageReply) Reset() {
	*x = CustomerNovelConfigPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigPageReply) ProtoMessage() {}

func (x *CustomerNovelConfigPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigPageReply.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{1}
}

func (x *CustomerNovelConfigPageReply) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *CustomerNovelConfigPageReply) GetItems() []*CustomerNovelConfigReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type CustomerNovelConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分组编码
	GroupCode string `protobuf:"bytes,2,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	//嵌套分组
	InnerGroupCode string `protobuf:"bytes,3,opt,name=innerGroupCode,proto3" json:"innerGroupCode,omitempty"`
	//分组名称
	GroupName string `protobuf:"bytes,4,opt,name=groupName,proto3" json:"groupName,omitempty"`
	//类型ID
	TypeId int32 `protobuf:"varint,5,opt,name=typeId,proto3" json:"typeId,omitempty"`
	//类型编码
	TypeCode string `protobuf:"bytes,6,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	//类型名称
	TypeName string `protobuf:"bytes,7,opt,name=typeName,proto3" json:"typeName,omitempty"`
	//字段名称
	FieldName string `protobuf:"bytes,8,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	//默认数量
	DefaultNum int32 `protobuf:"varint,9,opt,name=defaultNum,proto3" json:"defaultNum,omitempty"`
	//是否可用
	State bool `protobuf:"varint,10,opt,name=state,proto3" json:"state,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,13,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,14,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *CustomerNovelConfigReq) Reset() {
	*x = CustomerNovelConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigReq) ProtoMessage() {}

func (x *CustomerNovelConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigReq.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigReq) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{2}
}

func (x *CustomerNovelConfigReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerNovelConfigReq) GetGroupCode() string {
	if x != nil {
		return x.GroupCode
	}
	return ""
}

func (x *CustomerNovelConfigReq) GetInnerGroupCode() string {
	if x != nil {
		return x.InnerGroupCode
	}
	return ""
}

func (x *CustomerNovelConfigReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CustomerNovelConfigReq) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CustomerNovelConfigReq) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *CustomerNovelConfigReq) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CustomerNovelConfigReq) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CustomerNovelConfigReq) GetDefaultNum() int32 {
	if x != nil {
		return x.DefaultNum
	}
	return 0
}

func (x *CustomerNovelConfigReq) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *CustomerNovelConfigReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CustomerNovelConfigReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CustomerNovelConfigReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *CustomerNovelConfigReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *CustomerNovelConfigReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索返回
type CustomerNovelConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分组编码
	GroupCode string `protobuf:"bytes,2,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	//嵌套分组
	InnerGroupCode string `protobuf:"bytes,3,opt,name=innerGroupCode,proto3" json:"innerGroupCode,omitempty"`
	//分组名称
	GroupName string `protobuf:"bytes,4,opt,name=groupName,proto3" json:"groupName,omitempty"`
	//类型ID
	TypeId int32 `protobuf:"varint,5,opt,name=typeId,proto3" json:"typeId,omitempty"`
	//类型编码
	TypeCode string `protobuf:"bytes,6,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	//类型名称
	TypeName string `protobuf:"bytes,7,opt,name=typeName,proto3" json:"typeName,omitempty"`
	//字段名称
	FieldName string `protobuf:"bytes,8,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	//默认数量
	DefaultNum int32 `protobuf:"varint,9,opt,name=defaultNum,proto3" json:"defaultNum,omitempty"`
	//是否可用
	State bool `protobuf:"varint,10,opt,name=state,proto3" json:"state,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,13,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,14,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *CustomerNovelConfigReply) Reset() {
	*x = CustomerNovelConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigReply) ProtoMessage() {}

func (x *CustomerNovelConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigReply.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigReply) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{3}
}

func (x *CustomerNovelConfigReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerNovelConfigReply) GetGroupCode() string {
	if x != nil {
		return x.GroupCode
	}
	return ""
}

func (x *CustomerNovelConfigReply) GetInnerGroupCode() string {
	if x != nil {
		return x.InnerGroupCode
	}
	return ""
}

func (x *CustomerNovelConfigReply) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CustomerNovelConfigReply) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CustomerNovelConfigReply) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *CustomerNovelConfigReply) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CustomerNovelConfigReply) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CustomerNovelConfigReply) GetDefaultNum() int32 {
	if x != nil {
		return x.DefaultNum
	}
	return 0
}

func (x *CustomerNovelConfigReply) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *CustomerNovelConfigReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CustomerNovelConfigReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CustomerNovelConfigReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *CustomerNovelConfigReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *CustomerNovelConfigReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 创建CustomerNovelConfig请求
type CustomerNovelConfigCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分组编码
	GroupCode string `protobuf:"bytes,1,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	//嵌套分组
	InnerGroupCode string `protobuf:"bytes,2,opt,name=innerGroupCode,proto3" json:"innerGroupCode,omitempty"`
	//分组名称
	GroupName string `protobuf:"bytes,3,opt,name=groupName,proto3" json:"groupName,omitempty"`
	//类型ID
	TypeId int32 `protobuf:"varint,4,opt,name=typeId,proto3" json:"typeId,omitempty"`
	//类型编码
	TypeCode string `protobuf:"bytes,5,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	//类型名称
	TypeName string `protobuf:"bytes,6,opt,name=typeName,proto3" json:"typeName,omitempty"`
	//字段名称
	FieldName string `protobuf:"bytes,7,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	//默认数量
	DefaultNum int32 `protobuf:"varint,8,opt,name=defaultNum,proto3" json:"defaultNum,omitempty"`
	//是否可用
	State bool `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CustomerNovelConfigCreateReq) Reset() {
	*x = CustomerNovelConfigCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigCreateReq) ProtoMessage() {}

func (x *CustomerNovelConfigCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigCreateReq.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{4}
}

func (x *CustomerNovelConfigCreateReq) GetGroupCode() string {
	if x != nil {
		return x.GroupCode
	}
	return ""
}

func (x *CustomerNovelConfigCreateReq) GetInnerGroupCode() string {
	if x != nil {
		return x.InnerGroupCode
	}
	return ""
}

func (x *CustomerNovelConfigCreateReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CustomerNovelConfigCreateReq) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CustomerNovelConfigCreateReq) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *CustomerNovelConfigCreateReq) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CustomerNovelConfigCreateReq) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CustomerNovelConfigCreateReq) GetDefaultNum() int32 {
	if x != nil {
		return x.DefaultNum
	}
	return 0
}

func (x *CustomerNovelConfigCreateReq) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

// 创建CustomerNovelConfig返回
type CustomerNovelConfigCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分组编码
	GroupCode string `protobuf:"bytes,2,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	//嵌套分组
	InnerGroupCode string `protobuf:"bytes,3,opt,name=innerGroupCode,proto3" json:"innerGroupCode,omitempty"`
	//分组名称
	GroupName string `protobuf:"bytes,4,opt,name=groupName,proto3" json:"groupName,omitempty"`
	//类型ID
	TypeId int32 `protobuf:"varint,5,opt,name=typeId,proto3" json:"typeId,omitempty"`
	//类型编码
	TypeCode string `protobuf:"bytes,6,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	//类型名称
	TypeName string `protobuf:"bytes,7,opt,name=typeName,proto3" json:"typeName,omitempty"`
	//字段名称
	FieldName string `protobuf:"bytes,8,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	//默认数量
	DefaultNum int32 `protobuf:"varint,9,opt,name=defaultNum,proto3" json:"defaultNum,omitempty"`
	//是否可用
	State bool `protobuf:"varint,10,opt,name=state,proto3" json:"state,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,13,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,14,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *CustomerNovelConfigCreateReply) Reset() {
	*x = CustomerNovelConfigCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigCreateReply) ProtoMessage() {}

func (x *CustomerNovelConfigCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigCreateReply.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{5}
}

func (x *CustomerNovelConfigCreateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerNovelConfigCreateReply) GetGroupCode() string {
	if x != nil {
		return x.GroupCode
	}
	return ""
}

func (x *CustomerNovelConfigCreateReply) GetInnerGroupCode() string {
	if x != nil {
		return x.InnerGroupCode
	}
	return ""
}

func (x *CustomerNovelConfigCreateReply) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CustomerNovelConfigCreateReply) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CustomerNovelConfigCreateReply) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *CustomerNovelConfigCreateReply) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CustomerNovelConfigCreateReply) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CustomerNovelConfigCreateReply) GetDefaultNum() int32 {
	if x != nil {
		return x.DefaultNum
	}
	return 0
}

func (x *CustomerNovelConfigCreateReply) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *CustomerNovelConfigCreateReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CustomerNovelConfigCreateReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CustomerNovelConfigCreateReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *CustomerNovelConfigCreateReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *CustomerNovelConfigCreateReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 更新CustomerNovelConfig请求
type CustomerNovelConfigUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分组编码
	GroupCode string `protobuf:"bytes,2,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	//嵌套分组
	InnerGroupCode string `protobuf:"bytes,3,opt,name=innerGroupCode,proto3" json:"innerGroupCode,omitempty"`
	//分组名称
	GroupName string `protobuf:"bytes,4,opt,name=groupName,proto3" json:"groupName,omitempty"`
	//类型ID
	TypeId int32 `protobuf:"varint,5,opt,name=typeId,proto3" json:"typeId,omitempty"`
	//类型编码
	TypeCode string `protobuf:"bytes,6,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	//类型名称
	TypeName string `protobuf:"bytes,7,opt,name=typeName,proto3" json:"typeName,omitempty"`
	//字段名称
	FieldName string `protobuf:"bytes,8,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	//默认数量
	DefaultNum int32 `protobuf:"varint,9,opt,name=defaultNum,proto3" json:"defaultNum,omitempty"`
	//是否可用
	State bool `protobuf:"varint,10,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CustomerNovelConfigUpdateReq) Reset() {
	*x = CustomerNovelConfigUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigUpdateReq) ProtoMessage() {}

func (x *CustomerNovelConfigUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigUpdateReq.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{6}
}

func (x *CustomerNovelConfigUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerNovelConfigUpdateReq) GetGroupCode() string {
	if x != nil {
		return x.GroupCode
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReq) GetInnerGroupCode() string {
	if x != nil {
		return x.InnerGroupCode
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReq) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CustomerNovelConfigUpdateReq) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReq) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReq) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReq) GetDefaultNum() int32 {
	if x != nil {
		return x.DefaultNum
	}
	return 0
}

func (x *CustomerNovelConfigUpdateReq) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

// 更新CustomerNovelConfig返回
type CustomerNovelConfigUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分组编码
	GroupCode string `protobuf:"bytes,2,opt,name=groupCode,proto3" json:"groupCode,omitempty"`
	//嵌套分组
	InnerGroupCode string `protobuf:"bytes,3,opt,name=innerGroupCode,proto3" json:"innerGroupCode,omitempty"`
	//分组名称
	GroupName string `protobuf:"bytes,4,opt,name=groupName,proto3" json:"groupName,omitempty"`
	//类型ID
	TypeId int32 `protobuf:"varint,5,opt,name=typeId,proto3" json:"typeId,omitempty"`
	//类型编码
	TypeCode string `protobuf:"bytes,6,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	//类型名称
	TypeName string `protobuf:"bytes,7,opt,name=typeName,proto3" json:"typeName,omitempty"`
	//字段名称
	FieldName string `protobuf:"bytes,8,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	//默认数量
	DefaultNum int32 `protobuf:"varint,9,opt,name=defaultNum,proto3" json:"defaultNum,omitempty"`
	//是否可用
	State bool `protobuf:"varint,10,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CustomerNovelConfigUpdateReply) Reset() {
	*x = CustomerNovelConfigUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigUpdateReply) ProtoMessage() {}

func (x *CustomerNovelConfigUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigUpdateReply.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{7}
}

func (x *CustomerNovelConfigUpdateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerNovelConfigUpdateReply) GetGroupCode() string {
	if x != nil {
		return x.GroupCode
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReply) GetInnerGroupCode() string {
	if x != nil {
		return x.InnerGroupCode
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReply) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReply) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CustomerNovelConfigUpdateReply) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReply) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReply) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CustomerNovelConfigUpdateReply) GetDefaultNum() int32 {
	if x != nil {
		return x.DefaultNum
	}
	return 0
}

func (x *CustomerNovelConfigUpdateReply) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

// 删除CustomerNovelConfig请求
type CustomerNovelConfigDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CustomerNovelConfigDeleteReq) Reset() {
	*x = CustomerNovelConfigDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigDeleteReq) ProtoMessage() {}

func (x *CustomerNovelConfigDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigDeleteReq.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{8}
}

func (x *CustomerNovelConfigDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除CustomerNovelConfig请求
type CustomerNovelConfigBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CustomerNovelConfigBatchDeleteReq) Reset() {
	*x = CustomerNovelConfigBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigBatchDeleteReq) ProtoMessage() {}

func (x *CustomerNovelConfigBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{9}
}

func (x *CustomerNovelConfigBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除CustomerNovelConfig返回
type CustomerNovelConfigDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CustomerNovelConfigDeleteReply) Reset() {
	*x = CustomerNovelConfigDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNovelConfigDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNovelConfigDeleteReply) ProtoMessage() {}

func (x *CustomerNovelConfigDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNovelConfigDeleteReply.ProtoReflect.Descriptor instead.
func (*CustomerNovelConfigDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP(), []int{10}
}

func (x *CustomerNovelConfigDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_customernovelconfig_v1_customer_novel_config_proto protoreflect.FileDescriptor

var file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x8f, 0x01, 0x0a, 0x1c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xf8, 0x03, 0x0a, 0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xfa, 0x03, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x02, 0x0a,
	0x1c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x80, 0x04, 0x0a, 0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb6, 0x02, 0x0a, 0x1c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xb8, 0x02, 0x0a, 0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x1c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x21,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xb5, 0x08,
	0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xac, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x70, 0x61, 0x67, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x30, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xaf, 0x01, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x36, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x2a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb4,
	0x01, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x39, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2a, 0x5a, 0x28, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescOnce sync.Once
	file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescData = file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDesc
)

func file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescGZIP() []byte {
	file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescOnce.Do(func() {
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescData)
	})
	return file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDescData
}

var file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_novel_customernovelconfig_v1_customer_novel_config_proto_goTypes = []interface{}{
	(*CustomerNovelConfigPageReq)(nil),        // 0: customernovelconfig.v1.CustomerNovelConfigPageReq
	(*CustomerNovelConfigPageReply)(nil),      // 1: customernovelconfig.v1.CustomerNovelConfigPageReply
	(*CustomerNovelConfigReq)(nil),            // 2: customernovelconfig.v1.CustomerNovelConfigReq
	(*CustomerNovelConfigReply)(nil),          // 3: customernovelconfig.v1.CustomerNovelConfigReply
	(*CustomerNovelConfigCreateReq)(nil),      // 4: customernovelconfig.v1.CustomerNovelConfigCreateReq
	(*CustomerNovelConfigCreateReply)(nil),    // 5: customernovelconfig.v1.CustomerNovelConfigCreateReply
	(*CustomerNovelConfigUpdateReq)(nil),      // 6: customernovelconfig.v1.CustomerNovelConfigUpdateReq
	(*CustomerNovelConfigUpdateReply)(nil),    // 7: customernovelconfig.v1.CustomerNovelConfigUpdateReply
	(*CustomerNovelConfigDeleteReq)(nil),      // 8: customernovelconfig.v1.CustomerNovelConfigDeleteReq
	(*CustomerNovelConfigBatchDeleteReq)(nil), // 9: customernovelconfig.v1.CustomerNovelConfigBatchDeleteReq
	(*CustomerNovelConfigDeleteReply)(nil),    // 10: customernovelconfig.v1.CustomerNovelConfigDeleteReply
	(*pagin.Pagination)(nil),                  // 11: pagin.Pagination
	(*timestamppb.Timestamp)(nil),             // 12: google.protobuf.Timestamp
}
var file_api_novel_customernovelconfig_v1_customer_novel_config_proto_depIdxs = []int32{
	11, // 0: customernovelconfig.v1.CustomerNovelConfigPageReq.pagin:type_name -> pagin.Pagination
	2,  // 1: customernovelconfig.v1.CustomerNovelConfigPageReq.param:type_name -> customernovelconfig.v1.CustomerNovelConfigReq
	11, // 2: customernovelconfig.v1.CustomerNovelConfigPageReply.pagin:type_name -> pagin.Pagination
	3,  // 3: customernovelconfig.v1.CustomerNovelConfigPageReply.items:type_name -> customernovelconfig.v1.CustomerNovelConfigReply
	12, // 4: customernovelconfig.v1.CustomerNovelConfigReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 5: customernovelconfig.v1.CustomerNovelConfigReq.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 6: customernovelconfig.v1.CustomerNovelConfigReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 7: customernovelconfig.v1.CustomerNovelConfigReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 8: customernovelconfig.v1.CustomerNovelConfigCreateReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 9: customernovelconfig.v1.CustomerNovelConfigCreateReply.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 10: customernovelconfig.v1.CustomerNovelConfig.GetPageCustomerNovelConfig:input_type -> customernovelconfig.v1.CustomerNovelConfigPageReq
	2,  // 11: customernovelconfig.v1.CustomerNovelConfig.GetCustomerNovelConfig:input_type -> customernovelconfig.v1.CustomerNovelConfigReq
	6,  // 12: customernovelconfig.v1.CustomerNovelConfig.UpdateCustomerNovelConfig:input_type -> customernovelconfig.v1.CustomerNovelConfigUpdateReq
	4,  // 13: customernovelconfig.v1.CustomerNovelConfig.CreateCustomerNovelConfig:input_type -> customernovelconfig.v1.CustomerNovelConfigCreateReq
	8,  // 14: customernovelconfig.v1.CustomerNovelConfig.DeleteCustomerNovelConfig:input_type -> customernovelconfig.v1.CustomerNovelConfigDeleteReq
	9,  // 15: customernovelconfig.v1.CustomerNovelConfig.BatchDeleteCustomerNovelConfig:input_type -> customernovelconfig.v1.CustomerNovelConfigBatchDeleteReq
	1,  // 16: customernovelconfig.v1.CustomerNovelConfig.GetPageCustomerNovelConfig:output_type -> customernovelconfig.v1.CustomerNovelConfigPageReply
	3,  // 17: customernovelconfig.v1.CustomerNovelConfig.GetCustomerNovelConfig:output_type -> customernovelconfig.v1.CustomerNovelConfigReply
	7,  // 18: customernovelconfig.v1.CustomerNovelConfig.UpdateCustomerNovelConfig:output_type -> customernovelconfig.v1.CustomerNovelConfigUpdateReply
	5,  // 19: customernovelconfig.v1.CustomerNovelConfig.CreateCustomerNovelConfig:output_type -> customernovelconfig.v1.CustomerNovelConfigCreateReply
	10, // 20: customernovelconfig.v1.CustomerNovelConfig.DeleteCustomerNovelConfig:output_type -> customernovelconfig.v1.CustomerNovelConfigDeleteReply
	10, // 21: customernovelconfig.v1.CustomerNovelConfig.BatchDeleteCustomerNovelConfig:output_type -> customernovelconfig.v1.CustomerNovelConfigDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_novel_customernovelconfig_v1_customer_novel_config_proto_init() }
func file_api_novel_customernovelconfig_v1_customer_novel_config_proto_init() {
	if File_api_novel_customernovelconfig_v1_customer_novel_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNovelConfigDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_customernovelconfig_v1_customer_novel_config_proto_goTypes,
		DependencyIndexes: file_api_novel_customernovelconfig_v1_customer_novel_config_proto_depIdxs,
		MessageInfos:      file_api_novel_customernovelconfig_v1_customer_novel_config_proto_msgTypes,
	}.Build()
	File_api_novel_customernovelconfig_v1_customer_novel_config_proto = out.File
	file_api_novel_customernovelconfig_v1_customer_novel_config_proto_rawDesc = nil
	file_api_novel_customernovelconfig_v1_customer_novel_config_proto_goTypes = nil
	file_api_novel_customernovelconfig_v1_customer_novel_config_proto_depIdxs = nil
}
