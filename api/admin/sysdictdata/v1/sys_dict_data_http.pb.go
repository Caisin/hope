// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysDictDataHTTPServer interface {
	BatchDeleteSysDictData(context.Context, *SysDictDataBatchDeleteReq) (*SysDictDataDeleteReply, error)
	CreateSysDictData(context.Context, *SysDictDataCreateReq) (*SysDictDataCreateReply, error)
	DeleteSysDictData(context.Context, *SysDictDataDeleteReq) (*SysDictDataDeleteReply, error)
	GetSysDictData(context.Context, *SysDictDataReq) (*SysDictDataReply, error)
	GetSysDictDataPage(context.Context, *SysDictDataPageReq) (*SysDictDataPageReply, error)
	UpdateSysDictData(context.Context, *SysDictDataUpdateReq) (*SysDictDataUpdateReply, error)
}

func RegisterSysDictDataHTTPServer(s *http.Server, srv SysDictDataHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sys/dict/data/page", _SysDictData_GetSysDictDataPage0_HTTP_Handler(srv))
	r.GET("/v1/sys/dict/data/{id}", _SysDictData_GetSysDictData0_HTTP_Handler(srv))
	r.PUT("/v1/sys/dict/data/{id}", _SysDictData_UpdateSysDictData0_HTTP_Handler(srv))
	r.POST("/v1/sys/dict/data", _SysDictData_CreateSysDictData0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/dict/data/{id}", _SysDictData_DeleteSysDictData0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/dict/data", _SysDictData_BatchDeleteSysDictData0_HTTP_Handler(srv))
}

func _SysDictData_GetSysDictDataPage0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictDataPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdictdata.v1.SysDictData/GetSysDictDataPage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysDictDataPage(ctx, req.(*SysDictDataPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictDataPageReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictData_GetSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictDataReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdictdata.v1.SysDictData/GetSysDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysDictData(ctx, req.(*SysDictDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictDataReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictData_UpdateSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictDataUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdictdata.v1.SysDictData/UpdateSysDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysDictData(ctx, req.(*SysDictDataUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictDataUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictData_CreateSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictDataCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdictdata.v1.SysDictData/CreateSysDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysDictData(ctx, req.(*SysDictDataCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictDataCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictData_DeleteSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictDataDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdictdata.v1.SysDictData/DeleteSysDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysDictData(ctx, req.(*SysDictDataDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictDataDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictData_BatchDeleteSysDictData0_HTTP_Handler(srv SysDictDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictDataBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdictdata.v1.SysDictData/BatchDeleteSysDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysDictData(ctx, req.(*SysDictDataBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictDataDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysDictDataHTTPClient interface {
	BatchDeleteSysDictData(ctx context.Context, req *SysDictDataBatchDeleteReq, opts ...http.CallOption) (rsp *SysDictDataDeleteReply, err error)
	CreateSysDictData(ctx context.Context, req *SysDictDataCreateReq, opts ...http.CallOption) (rsp *SysDictDataCreateReply, err error)
	DeleteSysDictData(ctx context.Context, req *SysDictDataDeleteReq, opts ...http.CallOption) (rsp *SysDictDataDeleteReply, err error)
	GetSysDictData(ctx context.Context, req *SysDictDataReq, opts ...http.CallOption) (rsp *SysDictDataReply, err error)
	GetSysDictDataPage(ctx context.Context, req *SysDictDataPageReq, opts ...http.CallOption) (rsp *SysDictDataPageReply, err error)
	UpdateSysDictData(ctx context.Context, req *SysDictDataUpdateReq, opts ...http.CallOption) (rsp *SysDictDataUpdateReply, err error)
}

type SysDictDataHTTPClientImpl struct {
	cc *http.Client
}

func NewSysDictDataHTTPClient(client *http.Client) SysDictDataHTTPClient {
	return &SysDictDataHTTPClientImpl{client}
}

func (c *SysDictDataHTTPClientImpl) BatchDeleteSysDictData(ctx context.Context, in *SysDictDataBatchDeleteReq, opts ...http.CallOption) (*SysDictDataDeleteReply, error) {
	var out SysDictDataDeleteReply
	pattern := "/v1/sys/dict/data"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdictdata.v1.SysDictData/BatchDeleteSysDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictDataHTTPClientImpl) CreateSysDictData(ctx context.Context, in *SysDictDataCreateReq, opts ...http.CallOption) (*SysDictDataCreateReply, error) {
	var out SysDictDataCreateReply
	pattern := "/v1/sys/dict/data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysdictdata.v1.SysDictData/CreateSysDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictDataHTTPClientImpl) DeleteSysDictData(ctx context.Context, in *SysDictDataDeleteReq, opts ...http.CallOption) (*SysDictDataDeleteReply, error) {
	var out SysDictDataDeleteReply
	pattern := "/v1/sys/dict/data/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdictdata.v1.SysDictData/DeleteSysDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictDataHTTPClientImpl) GetSysDictData(ctx context.Context, in *SysDictDataReq, opts ...http.CallOption) (*SysDictDataReply, error) {
	var out SysDictDataReply
	pattern := "/v1/sys/dict/data/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdictdata.v1.SysDictData/GetSysDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictDataHTTPClientImpl) GetSysDictDataPage(ctx context.Context, in *SysDictDataPageReq, opts ...http.CallOption) (*SysDictDataPageReply, error) {
	var out SysDictDataPageReply
	pattern := "/v1/sys/dict/data/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdictdata.v1.SysDictData/GetSysDictDataPage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictDataHTTPClientImpl) UpdateSysDictData(ctx context.Context, in *SysDictDataUpdateReq, opts ...http.CallOption) (*SysDictDataUpdateReply, error) {
	var out SysDictDataUpdateReply
	pattern := "/v1/sys/dict/data/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysdictdata.v1.SysDictData/UpdateSysDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
