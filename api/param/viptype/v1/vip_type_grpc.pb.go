// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/param/viptype/v1/vip_type.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VipTypeClient is the client API for VipType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VipTypeClient interface {
	// 分页查询VipType
	GetVipTypePage(ctx context.Context, in *VipTypePageReq, opts ...grpc.CallOption) (*VipTypePageReply, error)
	// 获取VipType
	GetVipType(ctx context.Context, in *VipTypeReq, opts ...grpc.CallOption) (*VipTypeReply, error)
	// 更新VipType
	UpdateVipType(ctx context.Context, in *VipTypeUpdateReq, opts ...grpc.CallOption) (*VipTypeUpdateReply, error)
	// 创建VipType
	CreateVipType(ctx context.Context, in *VipTypeCreateReq, opts ...grpc.CallOption) (*VipTypeCreateReply, error)
	// 删除VipType
	DeleteVipType(ctx context.Context, in *VipTypeDeleteReq, opts ...grpc.CallOption) (*VipTypeDeleteReply, error)
	// 批量删除VipType
	BatchDeleteVipType(ctx context.Context, in *VipTypeBatchDeleteReq, opts ...grpc.CallOption) (*VipTypeDeleteReply, error)
}

type vipTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewVipTypeClient(cc grpc.ClientConnInterface) VipTypeClient {
	return &vipTypeClient{cc}
}

func (c *vipTypeClient) GetVipTypePage(ctx context.Context, in *VipTypePageReq, opts ...grpc.CallOption) (*VipTypePageReply, error) {
	out := new(VipTypePageReply)
	err := c.cc.Invoke(ctx, "/viptype.v1.VipType/GetVipTypePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipTypeClient) GetVipType(ctx context.Context, in *VipTypeReq, opts ...grpc.CallOption) (*VipTypeReply, error) {
	out := new(VipTypeReply)
	err := c.cc.Invoke(ctx, "/viptype.v1.VipType/GetVipType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipTypeClient) UpdateVipType(ctx context.Context, in *VipTypeUpdateReq, opts ...grpc.CallOption) (*VipTypeUpdateReply, error) {
	out := new(VipTypeUpdateReply)
	err := c.cc.Invoke(ctx, "/viptype.v1.VipType/UpdateVipType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipTypeClient) CreateVipType(ctx context.Context, in *VipTypeCreateReq, opts ...grpc.CallOption) (*VipTypeCreateReply, error) {
	out := new(VipTypeCreateReply)
	err := c.cc.Invoke(ctx, "/viptype.v1.VipType/CreateVipType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipTypeClient) DeleteVipType(ctx context.Context, in *VipTypeDeleteReq, opts ...grpc.CallOption) (*VipTypeDeleteReply, error) {
	out := new(VipTypeDeleteReply)
	err := c.cc.Invoke(ctx, "/viptype.v1.VipType/DeleteVipType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipTypeClient) BatchDeleteVipType(ctx context.Context, in *VipTypeBatchDeleteReq, opts ...grpc.CallOption) (*VipTypeDeleteReply, error) {
	out := new(VipTypeDeleteReply)
	err := c.cc.Invoke(ctx, "/viptype.v1.VipType/BatchDeleteVipType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VipTypeServer is the server API for VipType service.
// All implementations must embed UnimplementedVipTypeServer
// for forward compatibility
type VipTypeServer interface {
	// 分页查询VipType
	GetVipTypePage(context.Context, *VipTypePageReq) (*VipTypePageReply, error)
	// 获取VipType
	GetVipType(context.Context, *VipTypeReq) (*VipTypeReply, error)
	// 更新VipType
	UpdateVipType(context.Context, *VipTypeUpdateReq) (*VipTypeUpdateReply, error)
	// 创建VipType
	CreateVipType(context.Context, *VipTypeCreateReq) (*VipTypeCreateReply, error)
	// 删除VipType
	DeleteVipType(context.Context, *VipTypeDeleteReq) (*VipTypeDeleteReply, error)
	// 批量删除VipType
	BatchDeleteVipType(context.Context, *VipTypeBatchDeleteReq) (*VipTypeDeleteReply, error)
	mustEmbedUnimplementedVipTypeServer()
}

// UnimplementedVipTypeServer must be embedded to have forward compatible implementations.
type UnimplementedVipTypeServer struct {
}

func (UnimplementedVipTypeServer) GetVipTypePage(context.Context, *VipTypePageReq) (*VipTypePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipTypePage not implemented")
}
func (UnimplementedVipTypeServer) GetVipType(context.Context, *VipTypeReq) (*VipTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipType not implemented")
}
func (UnimplementedVipTypeServer) UpdateVipType(context.Context, *VipTypeUpdateReq) (*VipTypeUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipType not implemented")
}
func (UnimplementedVipTypeServer) CreateVipType(context.Context, *VipTypeCreateReq) (*VipTypeCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVipType not implemented")
}
func (UnimplementedVipTypeServer) DeleteVipType(context.Context, *VipTypeDeleteReq) (*VipTypeDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVipType not implemented")
}
func (UnimplementedVipTypeServer) BatchDeleteVipType(context.Context, *VipTypeBatchDeleteReq) (*VipTypeDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteVipType not implemented")
}
func (UnimplementedVipTypeServer) mustEmbedUnimplementedVipTypeServer() {}

// UnsafeVipTypeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VipTypeServer will
// result in compilation errors.
type UnsafeVipTypeServer interface {
	mustEmbedUnimplementedVipTypeServer()
}

func RegisterVipTypeServer(s grpc.ServiceRegistrar, srv VipTypeServer) {
	s.RegisterService(&VipType_ServiceDesc, srv)
}

func _VipType_GetVipTypePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipTypePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipTypeServer).GetVipTypePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viptype.v1.VipType/GetVipTypePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipTypeServer).GetVipTypePage(ctx, req.(*VipTypePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VipType_GetVipType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipTypeServer).GetVipType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viptype.v1.VipType/GetVipType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipTypeServer).GetVipType(ctx, req.(*VipTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VipType_UpdateVipType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipTypeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipTypeServer).UpdateVipType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viptype.v1.VipType/UpdateVipType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipTypeServer).UpdateVipType(ctx, req.(*VipTypeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VipType_CreateVipType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipTypeCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipTypeServer).CreateVipType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viptype.v1.VipType/CreateVipType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipTypeServer).CreateVipType(ctx, req.(*VipTypeCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VipType_DeleteVipType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipTypeDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipTypeServer).DeleteVipType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viptype.v1.VipType/DeleteVipType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipTypeServer).DeleteVipType(ctx, req.(*VipTypeDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VipType_BatchDeleteVipType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipTypeBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipTypeServer).BatchDeleteVipType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viptype.v1.VipType/BatchDeleteVipType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipTypeServer).BatchDeleteVipType(ctx, req.(*VipTypeBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VipType_ServiceDesc is the grpc.ServiceDesc for VipType service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VipType_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viptype.v1.VipType",
	HandlerType: (*VipTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVipTypePage",
			Handler:    _VipType_GetVipTypePage_Handler,
		},
		{
			MethodName: "GetVipType",
			Handler:    _VipType_GetVipType_Handler,
		},
		{
			MethodName: "UpdateVipType",
			Handler:    _VipType_UpdateVipType_Handler,
		},
		{
			MethodName: "CreateVipType",
			Handler:    _VipType_CreateVipType_Handler,
		},
		{
			MethodName: "DeleteVipType",
			Handler:    _VipType_DeleteVipType_Handler,
		},
		{
			MethodName: "BatchDeleteVipType",
			Handler:    _VipType_BatchDeleteVipType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/param/viptype/v1/vip_type.proto",
}
