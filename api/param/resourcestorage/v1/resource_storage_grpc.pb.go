// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/param/resourcestorage/v1/resource_storage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceStorageClient is the client API for ResourceStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceStorageClient interface {
	// 分页查询ResourceStorage
	GetResourceStoragePage(ctx context.Context, in *ResourceStoragePageReq, opts ...grpc.CallOption) (*ResourceStoragePageReply, error)
	// 获取ResourceStorage
	GetResourceStorage(ctx context.Context, in *ResourceStorageReq, opts ...grpc.CallOption) (*ResourceStorageReply, error)
	// 更新ResourceStorage
	UpdateResourceStorage(ctx context.Context, in *ResourceStorageUpdateReq, opts ...grpc.CallOption) (*ResourceStorageUpdateReply, error)
	// 创建ResourceStorage
	CreateResourceStorage(ctx context.Context, in *ResourceStorageCreateReq, opts ...grpc.CallOption) (*ResourceStorageCreateReply, error)
	// 删除ResourceStorage
	DeleteResourceStorage(ctx context.Context, in *ResourceStorageDeleteReq, opts ...grpc.CallOption) (*ResourceStorageDeleteReply, error)
	// 批量删除ResourceStorage
	BatchDeleteResourceStorage(ctx context.Context, in *ResourceStorageBatchDeleteReq, opts ...grpc.CallOption) (*ResourceStorageDeleteReply, error)
}

type resourceStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceStorageClient(cc grpc.ClientConnInterface) ResourceStorageClient {
	return &resourceStorageClient{cc}
}

func (c *resourceStorageClient) GetResourceStoragePage(ctx context.Context, in *ResourceStoragePageReq, opts ...grpc.CallOption) (*ResourceStoragePageReply, error) {
	out := new(ResourceStoragePageReply)
	err := c.cc.Invoke(ctx, "/resourcestorage.v1.ResourceStorage/GetResourceStoragePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceStorageClient) GetResourceStorage(ctx context.Context, in *ResourceStorageReq, opts ...grpc.CallOption) (*ResourceStorageReply, error) {
	out := new(ResourceStorageReply)
	err := c.cc.Invoke(ctx, "/resourcestorage.v1.ResourceStorage/GetResourceStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceStorageClient) UpdateResourceStorage(ctx context.Context, in *ResourceStorageUpdateReq, opts ...grpc.CallOption) (*ResourceStorageUpdateReply, error) {
	out := new(ResourceStorageUpdateReply)
	err := c.cc.Invoke(ctx, "/resourcestorage.v1.ResourceStorage/UpdateResourceStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceStorageClient) CreateResourceStorage(ctx context.Context, in *ResourceStorageCreateReq, opts ...grpc.CallOption) (*ResourceStorageCreateReply, error) {
	out := new(ResourceStorageCreateReply)
	err := c.cc.Invoke(ctx, "/resourcestorage.v1.ResourceStorage/CreateResourceStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceStorageClient) DeleteResourceStorage(ctx context.Context, in *ResourceStorageDeleteReq, opts ...grpc.CallOption) (*ResourceStorageDeleteReply, error) {
	out := new(ResourceStorageDeleteReply)
	err := c.cc.Invoke(ctx, "/resourcestorage.v1.ResourceStorage/DeleteResourceStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceStorageClient) BatchDeleteResourceStorage(ctx context.Context, in *ResourceStorageBatchDeleteReq, opts ...grpc.CallOption) (*ResourceStorageDeleteReply, error) {
	out := new(ResourceStorageDeleteReply)
	err := c.cc.Invoke(ctx, "/resourcestorage.v1.ResourceStorage/BatchDeleteResourceStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceStorageServer is the server API for ResourceStorage service.
// All implementations must embed UnimplementedResourceStorageServer
// for forward compatibility
type ResourceStorageServer interface {
	// 分页查询ResourceStorage
	GetResourceStoragePage(context.Context, *ResourceStoragePageReq) (*ResourceStoragePageReply, error)
	// 获取ResourceStorage
	GetResourceStorage(context.Context, *ResourceStorageReq) (*ResourceStorageReply, error)
	// 更新ResourceStorage
	UpdateResourceStorage(context.Context, *ResourceStorageUpdateReq) (*ResourceStorageUpdateReply, error)
	// 创建ResourceStorage
	CreateResourceStorage(context.Context, *ResourceStorageCreateReq) (*ResourceStorageCreateReply, error)
	// 删除ResourceStorage
	DeleteResourceStorage(context.Context, *ResourceStorageDeleteReq) (*ResourceStorageDeleteReply, error)
	// 批量删除ResourceStorage
	BatchDeleteResourceStorage(context.Context, *ResourceStorageBatchDeleteReq) (*ResourceStorageDeleteReply, error)
	mustEmbedUnimplementedResourceStorageServer()
}

// UnimplementedResourceStorageServer must be embedded to have forward compatible implementations.
type UnimplementedResourceStorageServer struct {
}

func (UnimplementedResourceStorageServer) GetResourceStoragePage(context.Context, *ResourceStoragePageReq) (*ResourceStoragePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceStoragePage not implemented")
}
func (UnimplementedResourceStorageServer) GetResourceStorage(context.Context, *ResourceStorageReq) (*ResourceStorageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceStorage not implemented")
}
func (UnimplementedResourceStorageServer) UpdateResourceStorage(context.Context, *ResourceStorageUpdateReq) (*ResourceStorageUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceStorage not implemented")
}
func (UnimplementedResourceStorageServer) CreateResourceStorage(context.Context, *ResourceStorageCreateReq) (*ResourceStorageCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceStorage not implemented")
}
func (UnimplementedResourceStorageServer) DeleteResourceStorage(context.Context, *ResourceStorageDeleteReq) (*ResourceStorageDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceStorage not implemented")
}
func (UnimplementedResourceStorageServer) BatchDeleteResourceStorage(context.Context, *ResourceStorageBatchDeleteReq) (*ResourceStorageDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteResourceStorage not implemented")
}
func (UnimplementedResourceStorageServer) mustEmbedUnimplementedResourceStorageServer() {}

// UnsafeResourceStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceStorageServer will
// result in compilation errors.
type UnsafeResourceStorageServer interface {
	mustEmbedUnimplementedResourceStorageServer()
}

func RegisterResourceStorageServer(s grpc.ServiceRegistrar, srv ResourceStorageServer) {
	s.RegisterService(&ResourceStorage_ServiceDesc, srv)
}

func _ResourceStorage_GetResourceStoragePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceStoragePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStorageServer).GetResourceStoragePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcestorage.v1.ResourceStorage/GetResourceStoragePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStorageServer).GetResourceStoragePage(ctx, req.(*ResourceStoragePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceStorage_GetResourceStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceStorageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStorageServer).GetResourceStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcestorage.v1.ResourceStorage/GetResourceStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStorageServer).GetResourceStorage(ctx, req.(*ResourceStorageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceStorage_UpdateResourceStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceStorageUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStorageServer).UpdateResourceStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcestorage.v1.ResourceStorage/UpdateResourceStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStorageServer).UpdateResourceStorage(ctx, req.(*ResourceStorageUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceStorage_CreateResourceStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceStorageCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStorageServer).CreateResourceStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcestorage.v1.ResourceStorage/CreateResourceStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStorageServer).CreateResourceStorage(ctx, req.(*ResourceStorageCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceStorage_DeleteResourceStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceStorageDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStorageServer).DeleteResourceStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcestorage.v1.ResourceStorage/DeleteResourceStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStorageServer).DeleteResourceStorage(ctx, req.(*ResourceStorageDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceStorage_BatchDeleteResourceStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceStorageBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStorageServer).BatchDeleteResourceStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcestorage.v1.ResourceStorage/BatchDeleteResourceStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStorageServer).BatchDeleteResourceStorage(ctx, req.(*ResourceStorageBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceStorage_ServiceDesc is the grpc.ServiceDesc for ResourceStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourcestorage.v1.ResourceStorage",
	HandlerType: (*ResourceStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceStoragePage",
			Handler:    _ResourceStorage_GetResourceStoragePage_Handler,
		},
		{
			MethodName: "GetResourceStorage",
			Handler:    _ResourceStorage_GetResourceStorage_Handler,
		},
		{
			MethodName: "UpdateResourceStorage",
			Handler:    _ResourceStorage_UpdateResourceStorage_Handler,
		},
		{
			MethodName: "CreateResourceStorage",
			Handler:    _ResourceStorage_CreateResourceStorage_Handler,
		},
		{
			MethodName: "DeleteResourceStorage",
			Handler:    _ResourceStorage_DeleteResourceStorage_Handler,
		},
		{
			MethodName: "BatchDeleteResourceStorage",
			Handler:    _ResourceStorage_BatchDeleteResourceStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/param/resourcestorage/v1/resource_storage.proto",
}
