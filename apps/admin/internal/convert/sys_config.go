// Code generated by Caisin. DO NOT EDIT.
// source: apps/admin/internal/data/ent/schema/sys_config.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/admin/sysconfig/v1"
	"hope/apps/admin/internal/data/ent"
	"hope/apps/admin/internal/data/ent/sysconfig"
)

func SysConfigUpdateReq2Data(v *v1.SysConfigUpdateReq) *ent.SysConfig {
	if v == nil {
		return nil
	}
	return &ent.SysConfig{
		ID:          v.Id,
		ConfigName:  v.ConfigName,
		ConfigKey:   v.ConfigKey,
		ConfigValue: v.ConfigValue,
		ConfigType:  v.ConfigType,
		IsFrontend:  v.IsFrontend,
		State:       sysconfig.State(v.State),
	}
}

func SysConfigData2UpdateReq(v *ent.SysConfig) *v1.SysConfigUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.SysConfigUpdateReq{
		Id:          v.ID,
		ConfigName:  v.ConfigName,
		ConfigKey:   v.ConfigKey,
		ConfigValue: v.ConfigValue,
		ConfigType:  v.ConfigType,
		IsFrontend:  v.IsFrontend,
		State:       string(v.State),
	}
}

func SysConfigCreateReq2Data(v *v1.SysConfigCreateReq) *ent.SysConfig {
	if v == nil {
		return nil
	}
	return &ent.SysConfig{
		ConfigName:  v.ConfigName,
		ConfigKey:   v.ConfigKey,
		ConfigValue: v.ConfigValue,
		ConfigType:  v.ConfigType,
		IsFrontend:  v.IsFrontend,
		State:       sysconfig.State(v.State),
	}
}

func SysConfigData2CreateReq(v *ent.SysConfig) *v1.SysConfigCreateReq {
	if v == nil {
		return nil
	}
	return &v1.SysConfigCreateReq{
		ConfigName:  v.ConfigName,
		ConfigKey:   v.ConfigKey,
		ConfigValue: v.ConfigValue,
		ConfigType:  v.ConfigType,
		IsFrontend:  v.IsFrontend,
		State:       string(v.State),
	}
}

func SysConfigReq2Data(v *v1.SysConfigReq) *ent.SysConfig {
	if v == nil {
		return nil
	}
	return &ent.SysConfig{
		ConfigName:  v.ConfigName,
		ConfigKey:   v.ConfigKey,
		ConfigValue: v.ConfigValue,
		ConfigType:  v.ConfigType,
		IsFrontend:  v.IsFrontend,
		State:       sysconfig.State(v.State),
	}
}

func SysConfigData2Req(v *ent.SysConfig) *v1.SysConfigReq {
	if v == nil {
		return nil
	}
	return &v1.SysConfigReq{
		ConfigName:  v.ConfigName,
		ConfigKey:   v.ConfigKey,
		ConfigValue: v.ConfigValue,
		ConfigType:  v.ConfigType,
		IsFrontend:  v.IsFrontend,
		State:       string(v.State),
	}
}

func SysConfigData2Reply(v *ent.SysConfig) *v1.SysConfigData {
	if v == nil {
		return nil
	}
	return &v1.SysConfigData{
		Id:          v.ID,
		ConfigName:  v.ConfigName,
		ConfigKey:   v.ConfigKey,
		ConfigValue: v.ConfigValue,
		ConfigType:  v.ConfigType,
		IsFrontend:  v.IsFrontend,
		State:       string(v.State),
		Remark:      v.Remark,
		CreatedAt:   timestamppb.New(v.CreatedAt),
		UpdatedAt:   timestamppb.New(v.UpdatedAt),
		CreateBy:    v.CreateBy,
		UpdateBy:    v.UpdateBy,
		TenantId:    v.TenantId,
	}
}
