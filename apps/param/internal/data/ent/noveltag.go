// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/param/internal/data/ent/noveltag"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// NovelTag is the model entity for the NovelTag schema.
type NovelTag struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// TagId holds the value of the "tagId" field.
	// 主键
	TagId int64 `json:"tagId,omitempty"`
	// TagName holds the value of the "tagName" field.
	// 标签名称
	TagName string `json:"tagName,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NovelTag) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case noveltag.FieldID, noveltag.FieldTagId, noveltag.FieldCreateBy, noveltag.FieldUpdateBy, noveltag.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case noveltag.FieldTagName, noveltag.FieldRemark:
			values[i] = new(sql.NullString)
		case noveltag.FieldCreatedAt, noveltag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NovelTag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NovelTag fields.
func (nt *NovelTag) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case noveltag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nt.ID = int64(value.Int64)
		case noveltag.FieldTagId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tagId", values[i])
			} else if value.Valid {
				nt.TagId = value.Int64
			}
		case noveltag.FieldTagName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tagName", values[i])
			} else if value.Valid {
				nt.TagName = value.String
			}
		case noveltag.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				nt.Remark = value.String
			}
		case noveltag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				nt.CreatedAt = value.Time
			}
		case noveltag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				nt.UpdatedAt = value.Time
			}
		case noveltag.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				nt.CreateBy = value.Int64
			}
		case noveltag.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				nt.UpdateBy = value.Int64
			}
		case noveltag.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				nt.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NovelTag.
// Note that you need to call NovelTag.Unwrap() before calling this method if this NovelTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NovelTag) Update() *NovelTagUpdateOne {
	return (&NovelTagClient{config: nt.config}).UpdateOne(nt)
}

// Unwrap unwraps the NovelTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nt *NovelTag) Unwrap() *NovelTag {
	tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NovelTag is not a transactional entity")
	}
	nt.config.driver = tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NovelTag) String() string {
	var builder strings.Builder
	builder.WriteString("NovelTag(")
	builder.WriteString(fmt.Sprintf("id=%v", nt.ID))
	builder.WriteString(", tagId=")
	builder.WriteString(fmt.Sprintf("%v", nt.TagId))
	builder.WriteString(", tagName=")
	builder.WriteString(nt.TagName)
	builder.WriteString(", remark=")
	builder.WriteString(nt.Remark)
	builder.WriteString(", createdAt=")
	builder.WriteString(nt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(nt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", nt.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", nt.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", nt.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NovelTags is a parsable slice of NovelTag.
type NovelTags []*NovelTag

func (nt NovelTags) config(cfg config) {
	for _i := range nt {
		nt[_i].config = cfg
	}
}
