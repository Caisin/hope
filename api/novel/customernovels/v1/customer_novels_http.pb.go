// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CustomerNovelsHTTPServer interface {
	BatchDeleteCustomerNovels(context.Context, *CustomerNovelsBatchDeleteReq) (*CustomerNovelsDeleteReply, error)
	CreateCustomerNovels(context.Context, *CustomerNovelsCreateReq) (*CustomerNovelsCreateReply, error)
	DeleteCustomerNovels(context.Context, *CustomerNovelsDeleteReq) (*CustomerNovelsDeleteReply, error)
	GetCustomerNovels(context.Context, *CustomerNovelsReq) (*CustomerNovelsReply, error)
	GetCustomerNovelsPage(context.Context, *CustomerNovelsPageReq) (*CustomerNovelsPageReply, error)
	UpdateCustomerNovels(context.Context, *CustomerNovelsUpdateReq) (*CustomerNovelsUpdateReply, error)
}

func RegisterCustomerNovelsHTTPServer(s *http.Server, srv CustomerNovelsHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/customer/novels/page", _CustomerNovels_GetCustomerNovelsPage0_HTTP_Handler(srv))
	r.GET("/v1/customer/novels/{id}", _CustomerNovels_GetCustomerNovels0_HTTP_Handler(srv))
	r.PUT("/v1/customer/novels/{id}", _CustomerNovels_UpdateCustomerNovels0_HTTP_Handler(srv))
	r.POST("/v1/customer/novels", _CustomerNovels_CreateCustomerNovels0_HTTP_Handler(srv))
	r.DELETE("/v1/customer/novels/{id}", _CustomerNovels_DeleteCustomerNovels0_HTTP_Handler(srv))
	r.DELETE("/v1/customer/novels", _CustomerNovels_BatchDeleteCustomerNovels0_HTTP_Handler(srv))
}

func _CustomerNovels_GetCustomerNovelsPage0_HTTP_Handler(srv CustomerNovelsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CustomerNovelsPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/customernovels.v1.CustomerNovels/GetCustomerNovelsPage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomerNovelsPage(ctx, req.(*CustomerNovelsPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CustomerNovelsPageReply)
		return ctx.Result(200, reply)
	}
}

func _CustomerNovels_GetCustomerNovels0_HTTP_Handler(srv CustomerNovelsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CustomerNovelsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/customernovels.v1.CustomerNovels/GetCustomerNovels")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustomerNovels(ctx, req.(*CustomerNovelsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CustomerNovelsReply)
		return ctx.Result(200, reply)
	}
}

func _CustomerNovels_UpdateCustomerNovels0_HTTP_Handler(srv CustomerNovelsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CustomerNovelsUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/customernovels.v1.CustomerNovels/UpdateCustomerNovels")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCustomerNovels(ctx, req.(*CustomerNovelsUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CustomerNovelsUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _CustomerNovels_CreateCustomerNovels0_HTTP_Handler(srv CustomerNovelsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CustomerNovelsCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/customernovels.v1.CustomerNovels/CreateCustomerNovels")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCustomerNovels(ctx, req.(*CustomerNovelsCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CustomerNovelsCreateReply)
		return ctx.Result(200, reply)
	}
}

func _CustomerNovels_DeleteCustomerNovels0_HTTP_Handler(srv CustomerNovelsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CustomerNovelsDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/customernovels.v1.CustomerNovels/DeleteCustomerNovels")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCustomerNovels(ctx, req.(*CustomerNovelsDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CustomerNovelsDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _CustomerNovels_BatchDeleteCustomerNovels0_HTTP_Handler(srv CustomerNovelsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CustomerNovelsBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/customernovels.v1.CustomerNovels/BatchDeleteCustomerNovels")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteCustomerNovels(ctx, req.(*CustomerNovelsBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CustomerNovelsDeleteReply)
		return ctx.Result(200, reply)
	}
}

type CustomerNovelsHTTPClient interface {
	BatchDeleteCustomerNovels(ctx context.Context, req *CustomerNovelsBatchDeleteReq, opts ...http.CallOption) (rsp *CustomerNovelsDeleteReply, err error)
	CreateCustomerNovels(ctx context.Context, req *CustomerNovelsCreateReq, opts ...http.CallOption) (rsp *CustomerNovelsCreateReply, err error)
	DeleteCustomerNovels(ctx context.Context, req *CustomerNovelsDeleteReq, opts ...http.CallOption) (rsp *CustomerNovelsDeleteReply, err error)
	GetCustomerNovels(ctx context.Context, req *CustomerNovelsReq, opts ...http.CallOption) (rsp *CustomerNovelsReply, err error)
	GetCustomerNovelsPage(ctx context.Context, req *CustomerNovelsPageReq, opts ...http.CallOption) (rsp *CustomerNovelsPageReply, err error)
	UpdateCustomerNovels(ctx context.Context, req *CustomerNovelsUpdateReq, opts ...http.CallOption) (rsp *CustomerNovelsUpdateReply, err error)
}

type CustomerNovelsHTTPClientImpl struct {
	cc *http.Client
}

func NewCustomerNovelsHTTPClient(client *http.Client) CustomerNovelsHTTPClient {
	return &CustomerNovelsHTTPClientImpl{client}
}

func (c *CustomerNovelsHTTPClientImpl) BatchDeleteCustomerNovels(ctx context.Context, in *CustomerNovelsBatchDeleteReq, opts ...http.CallOption) (*CustomerNovelsDeleteReply, error) {
	var out CustomerNovelsDeleteReply
	pattern := "/v1/customer/novels"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/customernovels.v1.CustomerNovels/BatchDeleteCustomerNovels"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerNovelsHTTPClientImpl) CreateCustomerNovels(ctx context.Context, in *CustomerNovelsCreateReq, opts ...http.CallOption) (*CustomerNovelsCreateReply, error) {
	var out CustomerNovelsCreateReply
	pattern := "/v1/customer/novels"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/customernovels.v1.CustomerNovels/CreateCustomerNovels"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerNovelsHTTPClientImpl) DeleteCustomerNovels(ctx context.Context, in *CustomerNovelsDeleteReq, opts ...http.CallOption) (*CustomerNovelsDeleteReply, error) {
	var out CustomerNovelsDeleteReply
	pattern := "/v1/customer/novels/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/customernovels.v1.CustomerNovels/DeleteCustomerNovels"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerNovelsHTTPClientImpl) GetCustomerNovels(ctx context.Context, in *CustomerNovelsReq, opts ...http.CallOption) (*CustomerNovelsReply, error) {
	var out CustomerNovelsReply
	pattern := "/v1/customer/novels/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/customernovels.v1.CustomerNovels/GetCustomerNovels"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerNovelsHTTPClientImpl) GetCustomerNovelsPage(ctx context.Context, in *CustomerNovelsPageReq, opts ...http.CallOption) (*CustomerNovelsPageReply, error) {
	var out CustomerNovelsPageReply
	pattern := "/v1/customer/novels/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/customernovels.v1.CustomerNovels/GetCustomerNovelsPage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CustomerNovelsHTTPClientImpl) UpdateCustomerNovels(ctx context.Context, in *CustomerNovelsUpdateReq, opts ...http.CallOption) (*CustomerNovelsUpdateReply, error) {
	var out CustomerNovelsUpdateReply
	pattern := "/v1/customer/novels/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/customernovels.v1.CustomerNovels/UpdateCustomerNovels"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
