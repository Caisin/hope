// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysmenu"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysMenu is the model entity for the SysMenu schema.
type SysMenu struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ParentId holds the value of the "parentId" field.
	// 父菜单Id
	ParentId int64 `json:"parentId,omitempty"`
	// MenuName holds the value of the "menuName" field.
	// 菜单名
	MenuName string `json:"menuName,omitempty"`
	// Title holds the value of the "title" field.
	// 菜单标题
	Title string `json:"title,omitempty"`
	// Icon holds the value of the "icon" field.
	// 图标
	Icon string `json:"icon,omitempty"`
	// Path holds the value of the "path" field.
	// 路径
	Path string `json:"path,omitempty"`
	// Paths holds the value of the "paths" field.
	// 多级路径
	Paths string `json:"paths,omitempty"`
	// MenuType holds the value of the "menuType" field.
	// D-目录M-菜单F-按钮
	MenuType string `json:"menuType,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Permission holds the value of the "permission" field.
	// 权限
	Permission string `json:"permission,omitempty"`
	// NoCache holds the value of the "noCache" field.
	// 无缓存
	NoCache bool `json:"noCache,omitempty"`
	// Breadcrumb holds the value of the "breadcrumb" field.
	// 面包屑
	Breadcrumb string `json:"breadcrumb,omitempty"`
	// Component holds the value of the "component" field.
	// 组件
	Component string `json:"component,omitempty"`
	// Sort holds the value of the "sort" field.
	// 排序
	Sort int32 `json:"sort,omitempty"`
	// Visible holds the value of the "visible" field.
	// 是否可见
	Visible bool `json:"visible,omitempty"`
	// IsFrame holds the value of the "isFrame" field.
	// 是否外链1是0否
	IsFrame bool `json:"isFrame,omitempty"`
	// SysApi holds the value of the "sysApi" field.
	SysApi string `json:"sysApi,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysMenuQuery when eager-loading is set.
	Edges SysMenuEdges `json:"edges"`
}

// SysMenuEdges holds the relations/edges for other nodes in the graph.
type SysMenuEdges struct {
	// Role holds the value of the role edge.
	Role []*SysRole `json:"role,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *SysMenu `json:"parent,omitempty"`
	// Childes holds the value of the childes edge.
	Childes []*SysMenu `json:"childes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading.
func (e SysMenuEdges) RoleOrErr() ([]*SysRole, error) {
	if e.loadedTypes[0] {
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysMenuEdges) ParentOrErr() (*SysMenu, error) {
	if e.loadedTypes[1] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sysmenu.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildesOrErr returns the Childes value or an error if the edge
// was not loaded in eager-loading.
func (e SysMenuEdges) ChildesOrErr() ([]*SysMenu, error) {
	if e.loadedTypes[2] {
		return e.Childes, nil
	}
	return nil, &NotLoadedError{edge: "childes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysMenu) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysmenu.FieldNoCache, sysmenu.FieldVisible, sysmenu.FieldIsFrame:
			values[i] = new(sql.NullBool)
		case sysmenu.FieldID, sysmenu.FieldParentId, sysmenu.FieldSort, sysmenu.FieldCreateBy, sysmenu.FieldUpdateBy, sysmenu.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysmenu.FieldMenuName, sysmenu.FieldTitle, sysmenu.FieldIcon, sysmenu.FieldPath, sysmenu.FieldPaths, sysmenu.FieldMenuType, sysmenu.FieldAction, sysmenu.FieldPermission, sysmenu.FieldBreadcrumb, sysmenu.FieldComponent, sysmenu.FieldSysApi:
			values[i] = new(sql.NullString)
		case sysmenu.FieldCreatedAt, sysmenu.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysMenu", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysMenu fields.
func (sm *SysMenu) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysmenu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int64(value.Int64)
		case sysmenu.FieldParentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parentId", values[i])
			} else if value.Valid {
				sm.ParentId = value.Int64
			}
		case sysmenu.FieldMenuName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field menuName", values[i])
			} else if value.Valid {
				sm.MenuName = value.String
			}
		case sysmenu.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sm.Title = value.String
			}
		case sysmenu.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				sm.Icon = value.String
			}
		case sysmenu.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				sm.Path = value.String
			}
		case sysmenu.FieldPaths:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paths", values[i])
			} else if value.Valid {
				sm.Paths = value.String
			}
		case sysmenu.FieldMenuType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field menuType", values[i])
			} else if value.Valid {
				sm.MenuType = value.String
			}
		case sysmenu.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				sm.Action = value.String
			}
		case sysmenu.FieldPermission:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permission", values[i])
			} else if value.Valid {
				sm.Permission = value.String
			}
		case sysmenu.FieldNoCache:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field noCache", values[i])
			} else if value.Valid {
				sm.NoCache = value.Bool
			}
		case sysmenu.FieldBreadcrumb:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field breadcrumb", values[i])
			} else if value.Valid {
				sm.Breadcrumb = value.String
			}
		case sysmenu.FieldComponent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component", values[i])
			} else if value.Valid {
				sm.Component = value.String
			}
		case sysmenu.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sm.Sort = int32(value.Int64)
			}
		case sysmenu.FieldVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field visible", values[i])
			} else if value.Valid {
				sm.Visible = value.Bool
			}
		case sysmenu.FieldIsFrame:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isFrame", values[i])
			} else if value.Valid {
				sm.IsFrame = value.Bool
			}
		case sysmenu.FieldSysApi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sysApi", values[i])
			} else if value.Valid {
				sm.SysApi = value.String
			}
		case sysmenu.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sm.CreatedAt = value.Time
			}
		case sysmenu.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sm.UpdatedAt = value.Time
			}
		case sysmenu.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sm.CreateBy = value.Int64
			}
		case sysmenu.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sm.UpdateBy = value.Int64
			}
		case sysmenu.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sm.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryRole queries the "role" edge of the SysMenu entity.
func (sm *SysMenu) QueryRole() *SysRoleQuery {
	return (&SysMenuClient{config: sm.config}).QueryRole(sm)
}

// QueryParent queries the "parent" edge of the SysMenu entity.
func (sm *SysMenu) QueryParent() *SysMenuQuery {
	return (&SysMenuClient{config: sm.config}).QueryParent(sm)
}

// QueryChildes queries the "childes" edge of the SysMenu entity.
func (sm *SysMenu) QueryChildes() *SysMenuQuery {
	return (&SysMenuClient{config: sm.config}).QueryChildes(sm)
}

// Update returns a builder for updating this SysMenu.
// Note that you need to call SysMenu.Unwrap() before calling this method if this SysMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *SysMenu) Update() *SysMenuUpdateOne {
	return (&SysMenuClient{config: sm.config}).UpdateOne(sm)
}

// Unwrap unwraps the SysMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *SysMenu) Unwrap() *SysMenu {
	tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysMenu is not a transactional entity")
	}
	sm.config.driver = tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *SysMenu) String() string {
	var builder strings.Builder
	builder.WriteString("SysMenu(")
	builder.WriteString(fmt.Sprintf("id=%v", sm.ID))
	builder.WriteString(", parentId=")
	builder.WriteString(fmt.Sprintf("%v", sm.ParentId))
	builder.WriteString(", menuName=")
	builder.WriteString(sm.MenuName)
	builder.WriteString(", title=")
	builder.WriteString(sm.Title)
	builder.WriteString(", icon=")
	builder.WriteString(sm.Icon)
	builder.WriteString(", path=")
	builder.WriteString(sm.Path)
	builder.WriteString(", paths=")
	builder.WriteString(sm.Paths)
	builder.WriteString(", menuType=")
	builder.WriteString(sm.MenuType)
	builder.WriteString(", action=")
	builder.WriteString(sm.Action)
	builder.WriteString(", permission=")
	builder.WriteString(sm.Permission)
	builder.WriteString(", noCache=")
	builder.WriteString(fmt.Sprintf("%v", sm.NoCache))
	builder.WriteString(", breadcrumb=")
	builder.WriteString(sm.Breadcrumb)
	builder.WriteString(", component=")
	builder.WriteString(sm.Component)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", sm.Sort))
	builder.WriteString(", visible=")
	builder.WriteString(fmt.Sprintf("%v", sm.Visible))
	builder.WriteString(", isFrame=")
	builder.WriteString(fmt.Sprintf("%v", sm.IsFrame))
	builder.WriteString(", sysApi=")
	builder.WriteString(sm.SysApi)
	builder.WriteString(", createdAt=")
	builder.WriteString(sm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sm.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sm.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sm.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysMenus is a parsable slice of SysMenu.
type SysMenus []*SysMenu

func (sm SysMenus) config(cfg config) {
	for _i := range sm {
		sm[_i].config = cfg
	}
}
