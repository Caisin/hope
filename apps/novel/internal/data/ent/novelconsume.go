// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/novelconsume"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// NovelConsume is the model entity for the NovelConsume schema.
type NovelConsume struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// NovelId holds the value of the "novelId" field.
	// 书号
	NovelId int64 `json:"novelId,omitempty"`
	// Coin holds the value of the "coin" field.
	// 书币
	Coin int64 `json:"coin,omitempty"`
	// Coupon holds the value of the "coupon" field.
	// 书券
	Coupon int64 `json:"coupon,omitempty"`
	// Discount holds the value of the "discount" field.
	// VIP折扣金额
	Discount int64 `json:"discount,omitempty"`
	// Reward holds the value of the "reward" field.
	// 打赏金额
	Reward int64 `json:"reward,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NovelConsume) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case novelconsume.FieldID, novelconsume.FieldNovelId, novelconsume.FieldCoin, novelconsume.FieldCoupon, novelconsume.FieldDiscount, novelconsume.FieldReward, novelconsume.FieldCreateBy, novelconsume.FieldUpdateBy, novelconsume.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case novelconsume.FieldCreatedAt, novelconsume.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NovelConsume", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NovelConsume fields.
func (nc *NovelConsume) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case novelconsume.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nc.ID = int64(value.Int64)
		case novelconsume.FieldNovelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field novelId", values[i])
			} else if value.Valid {
				nc.NovelId = value.Int64
			}
		case novelconsume.FieldCoin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coin", values[i])
			} else if value.Valid {
				nc.Coin = value.Int64
			}
		case novelconsume.FieldCoupon:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon", values[i])
			} else if value.Valid {
				nc.Coupon = value.Int64
			}
		case novelconsume.FieldDiscount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discount", values[i])
			} else if value.Valid {
				nc.Discount = value.Int64
			}
		case novelconsume.FieldReward:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reward", values[i])
			} else if value.Valid {
				nc.Reward = value.Int64
			}
		case novelconsume.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				nc.CreatedAt = value.Time
			}
		case novelconsume.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				nc.UpdatedAt = value.Time
			}
		case novelconsume.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				nc.CreateBy = value.Int64
			}
		case novelconsume.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				nc.UpdateBy = value.Int64
			}
		case novelconsume.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				nc.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NovelConsume.
// Note that you need to call NovelConsume.Unwrap() before calling this method if this NovelConsume
// was returned from a transaction, and the transaction was committed or rolled back.
func (nc *NovelConsume) Update() *NovelConsumeUpdateOne {
	return (&NovelConsumeClient{config: nc.config}).UpdateOne(nc)
}

// Unwrap unwraps the NovelConsume entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nc *NovelConsume) Unwrap() *NovelConsume {
	tx, ok := nc.config.driver.(*txDriver)
	if !ok {
		panic("ent: NovelConsume is not a transactional entity")
	}
	nc.config.driver = tx.drv
	return nc
}

// String implements the fmt.Stringer.
func (nc *NovelConsume) String() string {
	var builder strings.Builder
	builder.WriteString("NovelConsume(")
	builder.WriteString(fmt.Sprintf("id=%v", nc.ID))
	builder.WriteString(", novelId=")
	builder.WriteString(fmt.Sprintf("%v", nc.NovelId))
	builder.WriteString(", coin=")
	builder.WriteString(fmt.Sprintf("%v", nc.Coin))
	builder.WriteString(", coupon=")
	builder.WriteString(fmt.Sprintf("%v", nc.Coupon))
	builder.WriteString(", discount=")
	builder.WriteString(fmt.Sprintf("%v", nc.Discount))
	builder.WriteString(", reward=")
	builder.WriteString(fmt.Sprintf("%v", nc.Reward))
	builder.WriteString(", createdAt=")
	builder.WriteString(nc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(nc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", nc.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", nc.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", nc.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NovelConsumes is a parsable slice of NovelConsume.
type NovelConsumes []*NovelConsume

func (nc NovelConsumes) config(cfg config) {
	for _i := range nc {
		nc[_i].config = cfg
	}
}
