// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/payorder/v1/pay_order.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayOrderClient is the client API for PayOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayOrderClient interface {
	// 分页查询PayOrder
	GetPagePayOrder(ctx context.Context, in *PayOrderPageReq, opts ...grpc.CallOption) (*PayOrderPageReply, error)
	// 获取PayOrder
	GetPayOrder(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*PayOrderReply, error)
	// 更新PayOrder
	UpdatePayOrder(ctx context.Context, in *PayOrderUpdateReq, opts ...grpc.CallOption) (*PayOrderUpdateReply, error)
	// 创建PayOrder
	CreatePayOrder(ctx context.Context, in *PayOrderCreateReq, opts ...grpc.CallOption) (*PayOrderCreateReply, error)
	// 删除PayOrder
	DeletePayOrder(ctx context.Context, in *PayOrderDeleteReq, opts ...grpc.CallOption) (*PayOrderDeleteReply, error)
	// 批量删除PayOrder
	BatchDeletePayOrder(ctx context.Context, in *PayOrderBatchDeleteReq, opts ...grpc.CallOption) (*PayOrderDeleteReply, error)
}

type payOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewPayOrderClient(cc grpc.ClientConnInterface) PayOrderClient {
	return &payOrderClient{cc}
}

func (c *payOrderClient) GetPagePayOrder(ctx context.Context, in *PayOrderPageReq, opts ...grpc.CallOption) (*PayOrderPageReply, error) {
	out := new(PayOrderPageReply)
	err := c.cc.Invoke(ctx, "/payorder.v1.PayOrder/GetPagePayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderClient) GetPayOrder(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*PayOrderReply, error) {
	out := new(PayOrderReply)
	err := c.cc.Invoke(ctx, "/payorder.v1.PayOrder/GetPayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderClient) UpdatePayOrder(ctx context.Context, in *PayOrderUpdateReq, opts ...grpc.CallOption) (*PayOrderUpdateReply, error) {
	out := new(PayOrderUpdateReply)
	err := c.cc.Invoke(ctx, "/payorder.v1.PayOrder/UpdatePayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderClient) CreatePayOrder(ctx context.Context, in *PayOrderCreateReq, opts ...grpc.CallOption) (*PayOrderCreateReply, error) {
	out := new(PayOrderCreateReply)
	err := c.cc.Invoke(ctx, "/payorder.v1.PayOrder/CreatePayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderClient) DeletePayOrder(ctx context.Context, in *PayOrderDeleteReq, opts ...grpc.CallOption) (*PayOrderDeleteReply, error) {
	out := new(PayOrderDeleteReply)
	err := c.cc.Invoke(ctx, "/payorder.v1.PayOrder/DeletePayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderClient) BatchDeletePayOrder(ctx context.Context, in *PayOrderBatchDeleteReq, opts ...grpc.CallOption) (*PayOrderDeleteReply, error) {
	out := new(PayOrderDeleteReply)
	err := c.cc.Invoke(ctx, "/payorder.v1.PayOrder/BatchDeletePayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayOrderServer is the server API for PayOrder service.
// All implementations must embed UnimplementedPayOrderServer
// for forward compatibility
type PayOrderServer interface {
	// 分页查询PayOrder
	GetPagePayOrder(context.Context, *PayOrderPageReq) (*PayOrderPageReply, error)
	// 获取PayOrder
	GetPayOrder(context.Context, *PayOrderReq) (*PayOrderReply, error)
	// 更新PayOrder
	UpdatePayOrder(context.Context, *PayOrderUpdateReq) (*PayOrderUpdateReply, error)
	// 创建PayOrder
	CreatePayOrder(context.Context, *PayOrderCreateReq) (*PayOrderCreateReply, error)
	// 删除PayOrder
	DeletePayOrder(context.Context, *PayOrderDeleteReq) (*PayOrderDeleteReply, error)
	// 批量删除PayOrder
	BatchDeletePayOrder(context.Context, *PayOrderBatchDeleteReq) (*PayOrderDeleteReply, error)
	mustEmbedUnimplementedPayOrderServer()
}

// UnimplementedPayOrderServer must be embedded to have forward compatible implementations.
type UnimplementedPayOrderServer struct {
}

func (UnimplementedPayOrderServer) GetPagePayOrder(context.Context, *PayOrderPageReq) (*PayOrderPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPagePayOrder not implemented")
}
func (UnimplementedPayOrderServer) GetPayOrder(context.Context, *PayOrderReq) (*PayOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayOrder not implemented")
}
func (UnimplementedPayOrderServer) UpdatePayOrder(context.Context, *PayOrderUpdateReq) (*PayOrderUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayOrder not implemented")
}
func (UnimplementedPayOrderServer) CreatePayOrder(context.Context, *PayOrderCreateReq) (*PayOrderCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayOrder not implemented")
}
func (UnimplementedPayOrderServer) DeletePayOrder(context.Context, *PayOrderDeleteReq) (*PayOrderDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayOrder not implemented")
}
func (UnimplementedPayOrderServer) BatchDeletePayOrder(context.Context, *PayOrderBatchDeleteReq) (*PayOrderDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeletePayOrder not implemented")
}
func (UnimplementedPayOrderServer) mustEmbedUnimplementedPayOrderServer() {}

// UnsafePayOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayOrderServer will
// result in compilation errors.
type UnsafePayOrderServer interface {
	mustEmbedUnimplementedPayOrderServer()
}

func RegisterPayOrderServer(s grpc.ServiceRegistrar, srv PayOrderServer) {
	s.RegisterService(&PayOrder_ServiceDesc, srv)
}

func _PayOrder_GetPagePayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServer).GetPagePayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payorder.v1.PayOrder/GetPagePayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServer).GetPagePayOrder(ctx, req.(*PayOrderPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrder_GetPayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServer).GetPayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payorder.v1.PayOrder/GetPayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServer).GetPayOrder(ctx, req.(*PayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrder_UpdatePayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServer).UpdatePayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payorder.v1.PayOrder/UpdatePayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServer).UpdatePayOrder(ctx, req.(*PayOrderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrder_CreatePayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServer).CreatePayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payorder.v1.PayOrder/CreatePayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServer).CreatePayOrder(ctx, req.(*PayOrderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrder_DeletePayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServer).DeletePayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payorder.v1.PayOrder/DeletePayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServer).DeletePayOrder(ctx, req.(*PayOrderDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrder_BatchDeletePayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServer).BatchDeletePayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payorder.v1.PayOrder/BatchDeletePayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServer).BatchDeletePayOrder(ctx, req.(*PayOrderBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PayOrder_ServiceDesc is the grpc.ServiceDesc for PayOrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayOrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payorder.v1.PayOrder",
	HandlerType: (*PayOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPagePayOrder",
			Handler:    _PayOrder_GetPagePayOrder_Handler,
		},
		{
			MethodName: "GetPayOrder",
			Handler:    _PayOrder_GetPayOrder_Handler,
		},
		{
			MethodName: "UpdatePayOrder",
			Handler:    _PayOrder_UpdatePayOrder_Handler,
		},
		{
			MethodName: "CreatePayOrder",
			Handler:    _PayOrder_CreatePayOrder_Handler,
		},
		{
			MethodName: "DeletePayOrder",
			Handler:    _PayOrder_DeletePayOrder_Handler,
		},
		{
			MethodName: "BatchDeletePayOrder",
			Handler:    _PayOrder_BatchDeletePayOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/payorder/v1/pay_order.proto",
}
