// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/adchangelog"
	"hope/apps/novel/internal/data/ent/adchannel"
	"hope/apps/novel/internal/data/ent/ambalance"
	"hope/apps/novel/internal/data/ent/assetchangelog"
	"hope/apps/novel/internal/data/ent/listenrecord"
	"hope/apps/novel/internal/data/ent/novelautobuy"
	"hope/apps/novel/internal/data/ent/novelbookshelf"
	"hope/apps/novel/internal/data/ent/novelbuychapterrecord"
	"hope/apps/novel/internal/data/ent/novelbuyrecord"
	"hope/apps/novel/internal/data/ent/novelcomment"
	"hope/apps/novel/internal/data/ent/payorder"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/tasklog"
	"hope/apps/novel/internal/data/ent/userevent"
	"hope/apps/novel/internal/data/ent/usermsg"
	"hope/apps/novel/internal/data/ent/vipuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SocialUserCreate is the builder for creating a SocialUser entity.
type SocialUserCreate struct {
	config
	mutation *SocialUserMutation
	hooks    []Hook
}

// SetChId sets the "chId" field.
func (suc *SocialUserCreate) SetChId(i int64) *SocialUserCreate {
	suc.mutation.SetChId(i)
	return suc
}

// SetUnionid sets the "unionid" field.
func (suc *SocialUserCreate) SetUnionid(s string) *SocialUserCreate {
	suc.mutation.SetUnionid(s)
	return suc
}

// SetNillableUnionid sets the "unionid" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableUnionid(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetUnionid(*s)
	}
	return suc
}

// SetToken sets the "token" field.
func (suc *SocialUserCreate) SetToken(s string) *SocialUserCreate {
	suc.mutation.SetToken(s)
	return suc
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableToken(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetToken(*s)
	}
	return suc
}

// SetOpenid sets the "openid" field.
func (suc *SocialUserCreate) SetOpenid(s string) *SocialUserCreate {
	suc.mutation.SetOpenid(s)
	return suc
}

// SetNillableOpenid sets the "openid" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableOpenid(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetOpenid(*s)
	}
	return suc
}

// SetRoutineOpenid sets the "routineOpenid" field.
func (suc *SocialUserCreate) SetRoutineOpenid(s string) *SocialUserCreate {
	suc.mutation.SetRoutineOpenid(s)
	return suc
}

// SetNillableRoutineOpenid sets the "routineOpenid" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableRoutineOpenid(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetRoutineOpenid(*s)
	}
	return suc
}

// SetUserName sets the "userName" field.
func (suc *SocialUserCreate) SetUserName(s string) *SocialUserCreate {
	suc.mutation.SetUserName(s)
	return suc
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableUserName(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetUserName(*s)
	}
	return suc
}

// SetNickName sets the "nickName" field.
func (suc *SocialUserCreate) SetNickName(s string) *SocialUserCreate {
	suc.mutation.SetNickName(s)
	return suc
}

// SetNillableNickName sets the "nickName" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableNickName(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetNickName(*s)
	}
	return suc
}

// SetBirthday sets the "birthday" field.
func (suc *SocialUserCreate) SetBirthday(t time.Time) *SocialUserCreate {
	suc.mutation.SetBirthday(t)
	return suc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableBirthday(t *time.Time) *SocialUserCreate {
	if t != nil {
		suc.SetBirthday(*t)
	}
	return suc
}

// SetPhone sets the "phone" field.
func (suc *SocialUserCreate) SetPhone(s string) *SocialUserCreate {
	suc.mutation.SetPhone(s)
	return suc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillablePhone(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetPhone(*s)
	}
	return suc
}

// SetEmail sets the "email" field.
func (suc *SocialUserCreate) SetEmail(s string) *SocialUserCreate {
	suc.mutation.SetEmail(s)
	return suc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableEmail(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetEmail(*s)
	}
	return suc
}

// SetPassword sets the "password" field.
func (suc *SocialUserCreate) SetPassword(s string) *SocialUserCreate {
	suc.mutation.SetPassword(s)
	return suc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillablePassword(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetPassword(*s)
	}
	return suc
}

// SetAvatar sets the "avatar" field.
func (suc *SocialUserCreate) SetAvatar(s string) *SocialUserCreate {
	suc.mutation.SetAvatar(s)
	return suc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableAvatar(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetAvatar(*s)
	}
	return suc
}

// SetSex sets the "sex" field.
func (suc *SocialUserCreate) SetSex(i int32) *SocialUserCreate {
	suc.mutation.SetSex(i)
	return suc
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableSex(i *int32) *SocialUserCreate {
	if i != nil {
		suc.SetSex(*i)
	}
	return suc
}

// SetRegion sets the "region" field.
func (suc *SocialUserCreate) SetRegion(s string) *SocialUserCreate {
	suc.mutation.SetRegion(s)
	return suc
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableRegion(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetRegion(*s)
	}
	return suc
}

// SetCity sets the "city" field.
func (suc *SocialUserCreate) SetCity(s string) *SocialUserCreate {
	suc.mutation.SetCity(s)
	return suc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableCity(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetCity(*s)
	}
	return suc
}

// SetLanguage sets the "language" field.
func (suc *SocialUserCreate) SetLanguage(s string) *SocialUserCreate {
	suc.mutation.SetLanguage(s)
	return suc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableLanguage(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetLanguage(*s)
	}
	return suc
}

// SetProvince sets the "province" field.
func (suc *SocialUserCreate) SetProvince(s string) *SocialUserCreate {
	suc.mutation.SetProvince(s)
	return suc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableProvince(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetProvince(*s)
	}
	return suc
}

// SetCountry sets the "country" field.
func (suc *SocialUserCreate) SetCountry(s string) *SocialUserCreate {
	suc.mutation.SetCountry(s)
	return suc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableCountry(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetCountry(*s)
	}
	return suc
}

// SetSignature sets the "signature" field.
func (suc *SocialUserCreate) SetSignature(s string) *SocialUserCreate {
	suc.mutation.SetSignature(s)
	return suc
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableSignature(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetSignature(*s)
	}
	return suc
}

// SetRemark sets the "remark" field.
func (suc *SocialUserCreate) SetRemark(s string) *SocialUserCreate {
	suc.mutation.SetRemark(s)
	return suc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableRemark(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetRemark(*s)
	}
	return suc
}

// SetGroupid sets the "groupid" field.
func (suc *SocialUserCreate) SetGroupid(i int32) *SocialUserCreate {
	suc.mutation.SetGroupid(i)
	return suc
}

// SetNillableGroupid sets the "groupid" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableGroupid(i *int32) *SocialUserCreate {
	if i != nil {
		suc.SetGroupid(*i)
	}
	return suc
}

// SetTagidList sets the "tagidList" field.
func (suc *SocialUserCreate) SetTagidList(s string) *SocialUserCreate {
	suc.mutation.SetTagidList(s)
	return suc
}

// SetNillableTagidList sets the "tagidList" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableTagidList(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetTagidList(*s)
	}
	return suc
}

// SetSubscribe sets the "subscribe" field.
func (suc *SocialUserCreate) SetSubscribe(i int32) *SocialUserCreate {
	suc.mutation.SetSubscribe(i)
	return suc
}

// SetNillableSubscribe sets the "subscribe" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableSubscribe(i *int32) *SocialUserCreate {
	if i != nil {
		suc.SetSubscribe(*i)
	}
	return suc
}

// SetSubscribeTime sets the "subscribeTime" field.
func (suc *SocialUserCreate) SetSubscribeTime(i int32) *SocialUserCreate {
	suc.mutation.SetSubscribeTime(i)
	return suc
}

// SetNillableSubscribeTime sets the "subscribeTime" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableSubscribeTime(i *int32) *SocialUserCreate {
	if i != nil {
		suc.SetSubscribeTime(*i)
	}
	return suc
}

// SetSessionKey sets the "sessionKey" field.
func (suc *SocialUserCreate) SetSessionKey(s string) *SocialUserCreate {
	suc.mutation.SetSessionKey(s)
	return suc
}

// SetNillableSessionKey sets the "sessionKey" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableSessionKey(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetSessionKey(*s)
	}
	return suc
}

// SetUserType sets the "userType" field.
func (suc *SocialUserCreate) SetUserType(s string) *SocialUserCreate {
	suc.mutation.SetUserType(s)
	return suc
}

// SetNillableUserType sets the "userType" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableUserType(s *string) *SocialUserCreate {
	if s != nil {
		suc.SetUserType(*s)
	}
	return suc
}

// SetCreatedAt sets the "createdAt" field.
func (suc *SocialUserCreate) SetCreatedAt(t time.Time) *SocialUserCreate {
	suc.mutation.SetCreatedAt(t)
	return suc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableCreatedAt(t *time.Time) *SocialUserCreate {
	if t != nil {
		suc.SetCreatedAt(*t)
	}
	return suc
}

// SetUpdatedAt sets the "updatedAt" field.
func (suc *SocialUserCreate) SetUpdatedAt(t time.Time) *SocialUserCreate {
	suc.mutation.SetUpdatedAt(t)
	return suc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableUpdatedAt(t *time.Time) *SocialUserCreate {
	if t != nil {
		suc.SetUpdatedAt(*t)
	}
	return suc
}

// SetCreateBy sets the "createBy" field.
func (suc *SocialUserCreate) SetCreateBy(i int64) *SocialUserCreate {
	suc.mutation.SetCreateBy(i)
	return suc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableCreateBy(i *int64) *SocialUserCreate {
	if i != nil {
		suc.SetCreateBy(*i)
	}
	return suc
}

// SetUpdateBy sets the "updateBy" field.
func (suc *SocialUserCreate) SetUpdateBy(i int64) *SocialUserCreate {
	suc.mutation.SetUpdateBy(i)
	return suc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableUpdateBy(i *int64) *SocialUserCreate {
	if i != nil {
		suc.SetUpdateBy(*i)
	}
	return suc
}

// SetTenantId sets the "tenantId" field.
func (suc *SocialUserCreate) SetTenantId(i int64) *SocialUserCreate {
	suc.mutation.SetTenantId(i)
	return suc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (suc *SocialUserCreate) SetNillableTenantId(i *int64) *SocialUserCreate {
	if i != nil {
		suc.SetTenantId(*i)
	}
	return suc
}

// AddTaskIDs adds the "tasks" edge to the TaskLog entity by IDs.
func (suc *SocialUserCreate) AddTaskIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddTaskIDs(ids...)
	return suc
}

// AddTasks adds the "tasks" edges to the TaskLog entity.
func (suc *SocialUserCreate) AddTasks(t ...*TaskLog) *SocialUserCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suc.AddTaskIDs(ids...)
}

// AddEventIDs adds the "events" edge to the UserEvent entity by IDs.
func (suc *SocialUserCreate) AddEventIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddEventIDs(ids...)
	return suc
}

// AddEvents adds the "events" edges to the UserEvent entity.
func (suc *SocialUserCreate) AddEvents(u ...*UserEvent) *SocialUserCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suc.AddEventIDs(ids...)
}

// AddListenRecordIDs adds the "listenRecords" edge to the ListenRecord entity by IDs.
func (suc *SocialUserCreate) AddListenRecordIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddListenRecordIDs(ids...)
	return suc
}

// AddListenRecords adds the "listenRecords" edges to the ListenRecord entity.
func (suc *SocialUserCreate) AddListenRecords(l ...*ListenRecord) *SocialUserCreate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suc.AddListenRecordIDs(ids...)
}

// AddAdIDs adds the "ads" edge to the AdChangeLog entity by IDs.
func (suc *SocialUserCreate) AddAdIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddAdIDs(ids...)
	return suc
}

// AddAds adds the "ads" edges to the AdChangeLog entity.
func (suc *SocialUserCreate) AddAds(a ...*AdChangeLog) *SocialUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suc.AddAdIDs(ids...)
}

// AddBookshelfIDs adds the "bookshelves" edge to the NovelBookshelf entity by IDs.
func (suc *SocialUserCreate) AddBookshelfIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddBookshelfIDs(ids...)
	return suc
}

// AddBookshelves adds the "bookshelves" edges to the NovelBookshelf entity.
func (suc *SocialUserCreate) AddBookshelves(n ...*NovelBookshelf) *SocialUserCreate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suc.AddBookshelfIDs(ids...)
}

// AddAutoBuyNovelIDs adds the "autoBuyNovels" edge to the NovelAutoBuy entity by IDs.
func (suc *SocialUserCreate) AddAutoBuyNovelIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddAutoBuyNovelIDs(ids...)
	return suc
}

// AddAutoBuyNovels adds the "autoBuyNovels" edges to the NovelAutoBuy entity.
func (suc *SocialUserCreate) AddAutoBuyNovels(n ...*NovelAutoBuy) *SocialUserCreate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suc.AddAutoBuyNovelIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the NovelComment entity by IDs.
func (suc *SocialUserCreate) AddCommentIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddCommentIDs(ids...)
	return suc
}

// AddComments adds the "comments" edges to the NovelComment entity.
func (suc *SocialUserCreate) AddComments(n ...*NovelComment) *SocialUserCreate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suc.AddCommentIDs(ids...)
}

// AddMsgIDs adds the "msgs" edge to the UserMsg entity by IDs.
func (suc *SocialUserCreate) AddMsgIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddMsgIDs(ids...)
	return suc
}

// AddMsgs adds the "msgs" edges to the UserMsg entity.
func (suc *SocialUserCreate) AddMsgs(u ...*UserMsg) *SocialUserCreate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suc.AddMsgIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the PayOrder entity by IDs.
func (suc *SocialUserCreate) AddOrderIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddOrderIDs(ids...)
	return suc
}

// AddOrders adds the "orders" edges to the PayOrder entity.
func (suc *SocialUserCreate) AddOrders(p ...*PayOrder) *SocialUserCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suc.AddOrderIDs(ids...)
}

// AddVipIDs adds the "vips" edge to the VipUser entity by IDs.
func (suc *SocialUserCreate) AddVipIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddVipIDs(ids...)
	return suc
}

// AddVips adds the "vips" edges to the VipUser entity.
func (suc *SocialUserCreate) AddVips(v ...*VipUser) *SocialUserCreate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return suc.AddVipIDs(ids...)
}

// AddBalanceIDs adds the "balances" edge to the AmBalance entity by IDs.
func (suc *SocialUserCreate) AddBalanceIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddBalanceIDs(ids...)
	return suc
}

// AddBalances adds the "balances" edges to the AmBalance entity.
func (suc *SocialUserCreate) AddBalances(a ...*AmBalance) *SocialUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suc.AddBalanceIDs(ids...)
}

// AddAssetLogIDs adds the "assetLogs" edge to the AssetChangeLog entity by IDs.
func (suc *SocialUserCreate) AddAssetLogIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddAssetLogIDs(ids...)
	return suc
}

// AddAssetLogs adds the "assetLogs" edges to the AssetChangeLog entity.
func (suc *SocialUserCreate) AddAssetLogs(a ...*AssetChangeLog) *SocialUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suc.AddAssetLogIDs(ids...)
}

// AddBuyChapterRecordIDs adds the "buyChapterRecords" edge to the NovelBuyChapterRecord entity by IDs.
func (suc *SocialUserCreate) AddBuyChapterRecordIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddBuyChapterRecordIDs(ids...)
	return suc
}

// AddBuyChapterRecords adds the "buyChapterRecords" edges to the NovelBuyChapterRecord entity.
func (suc *SocialUserCreate) AddBuyChapterRecords(n ...*NovelBuyChapterRecord) *SocialUserCreate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suc.AddBuyChapterRecordIDs(ids...)
}

// AddBuyNovelRecordIDs adds the "buyNovelRecords" edge to the NovelBuyRecord entity by IDs.
func (suc *SocialUserCreate) AddBuyNovelRecordIDs(ids ...int64) *SocialUserCreate {
	suc.mutation.AddBuyNovelRecordIDs(ids...)
	return suc
}

// AddBuyNovelRecords adds the "buyNovelRecords" edges to the NovelBuyRecord entity.
func (suc *SocialUserCreate) AddBuyNovelRecords(n ...*NovelBuyRecord) *SocialUserCreate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suc.AddBuyNovelRecordIDs(ids...)
}

// SetChannelID sets the "channel" edge to the AdChannel entity by ID.
func (suc *SocialUserCreate) SetChannelID(id int64) *SocialUserCreate {
	suc.mutation.SetChannelID(id)
	return suc
}

// SetChannel sets the "channel" edge to the AdChannel entity.
func (suc *SocialUserCreate) SetChannel(a *AdChannel) *SocialUserCreate {
	return suc.SetChannelID(a.ID)
}

// Mutation returns the SocialUserMutation object of the builder.
func (suc *SocialUserCreate) Mutation() *SocialUserMutation {
	return suc.mutation
}

// Save creates the SocialUser in the database.
func (suc *SocialUserCreate) Save(ctx context.Context) (*SocialUser, error) {
	var (
		err  error
		node *SocialUser
	)
	suc.defaults()
	if len(suc.hooks) == 0 {
		if err = suc.check(); err != nil {
			return nil, err
		}
		node, err = suc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SocialUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suc.check(); err != nil {
				return nil, err
			}
			suc.mutation = mutation
			if node, err = suc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(suc.hooks) - 1; i >= 0; i-- {
			if suc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (suc *SocialUserCreate) SaveX(ctx context.Context) *SocialUser {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *SocialUserCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *SocialUserCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suc *SocialUserCreate) defaults() {
	if _, ok := suc.mutation.CreatedAt(); !ok {
		v := socialuser.DefaultCreatedAt()
		suc.mutation.SetCreatedAt(v)
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		v := socialuser.DefaultUpdatedAt()
		suc.mutation.SetUpdatedAt(v)
	}
	if _, ok := suc.mutation.CreateBy(); !ok {
		v := socialuser.DefaultCreateBy
		suc.mutation.SetCreateBy(v)
	}
	if _, ok := suc.mutation.UpdateBy(); !ok {
		v := socialuser.DefaultUpdateBy
		suc.mutation.SetUpdateBy(v)
	}
	if _, ok := suc.mutation.TenantId(); !ok {
		v := socialuser.DefaultTenantId
		suc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suc *SocialUserCreate) check() error {
	if _, ok := suc.mutation.ChId(); !ok {
		return &ValidationError{Name: "chId", err: errors.New(`ent: missing required field "SocialUser.chId"`)}
	}
	if _, ok := suc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "SocialUser.createdAt"`)}
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "SocialUser.updatedAt"`)}
	}
	if _, ok := suc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "SocialUser.createBy"`)}
	}
	if _, ok := suc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "SocialUser.updateBy"`)}
	}
	if _, ok := suc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "SocialUser.tenantId"`)}
	}
	if _, ok := suc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "SocialUser.channel"`)}
	}
	return nil
}

func (suc *SocialUserCreate) sqlSave(ctx context.Context) (*SocialUser, error) {
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (suc *SocialUserCreate) createSpec() (*SocialUser, *sqlgraph.CreateSpec) {
	var (
		_node = &SocialUser{config: suc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: socialuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: socialuser.FieldID,
			},
		}
	)
	if value, ok := suc.mutation.Unionid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldUnionid,
		})
		_node.Unionid = value
	}
	if value, ok := suc.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := suc.mutation.Openid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldOpenid,
		})
		_node.Openid = value
	}
	if value, ok := suc.mutation.RoutineOpenid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldRoutineOpenid,
		})
		_node.RoutineOpenid = value
	}
	if value, ok := suc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := suc.mutation.NickName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldNickName,
		})
		_node.NickName = value
	}
	if value, ok := suc.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: socialuser.FieldBirthday,
		})
		_node.Birthday = value
	}
	if value, ok := suc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := suc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := suc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := suc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := suc.mutation.Sex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSex,
		})
		_node.Sex = value
	}
	if value, ok := suc.mutation.Region(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldRegion,
		})
		_node.Region = value
	}
	if value, ok := suc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldCity,
		})
		_node.City = value
	}
	if value, ok := suc.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldLanguage,
		})
		_node.Language = value
	}
	if value, ok := suc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldProvince,
		})
		_node.Province = value
	}
	if value, ok := suc.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := suc.mutation.Signature(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldSignature,
		})
		_node.Signature = value
	}
	if value, ok := suc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := suc.mutation.Groupid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldGroupid,
		})
		_node.Groupid = value
	}
	if value, ok := suc.mutation.TagidList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldTagidList,
		})
		_node.TagidList = value
	}
	if value, ok := suc.mutation.Subscribe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribe,
		})
		_node.Subscribe = value
	}
	if value, ok := suc.mutation.SubscribeTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribeTime,
		})
		_node.SubscribeTime = value
	}
	if value, ok := suc.mutation.SessionKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldSessionKey,
		})
		_node.SessionKey = value
	}
	if value, ok := suc.mutation.UserType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldUserType,
		})
		_node.UserType = value
	}
	if value, ok := suc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: socialuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := suc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: socialuser.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := suc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := suc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := suc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := suc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.TasksTable,
			Columns: []string{socialuser.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tasklog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.EventsTable,
			Columns: []string{socialuser.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: userevent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.ListenRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.ListenRecordsTable,
			Columns: []string{socialuser.ListenRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: listenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.AdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AdsTable,
			Columns: []string{socialuser.AdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.BookshelvesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BookshelvesTable,
			Columns: []string{socialuser.BookshelvesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbookshelf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.AutoBuyNovelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AutoBuyNovelsTable,
			Columns: []string{socialuser.AutoBuyNovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelautobuy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.CommentsTable,
			Columns: []string{socialuser.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.MsgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.MsgsTable,
			Columns: []string{socialuser.MsgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usermsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.OrdersTable,
			Columns: []string{socialuser.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.VipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.VipsTable,
			Columns: []string{socialuser.VipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: vipuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.BalancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BalancesTable,
			Columns: []string{socialuser.BalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ambalance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.AssetLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AssetLogsTable,
			Columns: []string{socialuser.AssetLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: assetchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.BuyChapterRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyChapterRecordsTable,
			Columns: []string{socialuser.BuyChapterRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuychapterrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.BuyNovelRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyNovelRecordsTable,
			Columns: []string{socialuser.BuyNovelRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   socialuser.ChannelTable,
			Columns: []string{socialuser.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SocialUserCreateBulk is the builder for creating many SocialUser entities in bulk.
type SocialUserCreateBulk struct {
	config
	builders []*SocialUserCreate
}

// Save creates the SocialUser entities in the database.
func (sucb *SocialUserCreateBulk) Save(ctx context.Context) ([]*SocialUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*SocialUser, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SocialUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *SocialUserCreateBulk) SaveX(ctx context.Context) []*SocialUser {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *SocialUserCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *SocialUserCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}
