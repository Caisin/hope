// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/novelcomment"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelCommentCreate is the builder for creating a NovelComment entity.
type NovelCommentCreate struct {
	config
	mutation *NovelCommentMutation
	hooks    []Hook
}

// SetNovelId sets the "novelId" field.
func (ncc *NovelCommentCreate) SetNovelId(i int64) *NovelCommentCreate {
	ncc.mutation.SetNovelId(i)
	return ncc
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableNovelId(i *int64) *NovelCommentCreate {
	if i != nil {
		ncc.SetNovelId(*i)
	}
	return ncc
}

// SetUserId sets the "userId" field.
func (ncc *NovelCommentCreate) SetUserId(i int64) *NovelCommentCreate {
	ncc.mutation.SetUserId(i)
	return ncc
}

// SetAvatar sets the "avatar" field.
func (ncc *NovelCommentCreate) SetAvatar(s string) *NovelCommentCreate {
	ncc.mutation.SetAvatar(s)
	return ncc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableAvatar(s *string) *NovelCommentCreate {
	if s != nil {
		ncc.SetAvatar(*s)
	}
	return ncc
}

// SetUserName sets the "userName" field.
func (ncc *NovelCommentCreate) SetUserName(s string) *NovelCommentCreate {
	ncc.mutation.SetUserName(s)
	return ncc
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableUserName(s *string) *NovelCommentCreate {
	if s != nil {
		ncc.SetUserName(*s)
	}
	return ncc
}

// SetRepUserId sets the "repUserId" field.
func (ncc *NovelCommentCreate) SetRepUserId(i int64) *NovelCommentCreate {
	ncc.mutation.SetRepUserId(i)
	return ncc
}

// SetNillableRepUserId sets the "repUserId" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableRepUserId(i *int64) *NovelCommentCreate {
	if i != nil {
		ncc.SetRepUserId(*i)
	}
	return ncc
}

// SetRepUserName sets the "repUserName" field.
func (ncc *NovelCommentCreate) SetRepUserName(s string) *NovelCommentCreate {
	ncc.mutation.SetRepUserName(s)
	return ncc
}

// SetNillableRepUserName sets the "repUserName" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableRepUserName(s *string) *NovelCommentCreate {
	if s != nil {
		ncc.SetRepUserName(*s)
	}
	return ncc
}

// SetContent sets the "content" field.
func (ncc *NovelCommentCreate) SetContent(s string) *NovelCommentCreate {
	ncc.mutation.SetContent(s)
	return ncc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableContent(s *string) *NovelCommentCreate {
	if s != nil {
		ncc.SetContent(*s)
	}
	return ncc
}

// SetScore sets the "score" field.
func (ncc *NovelCommentCreate) SetScore(i int32) *NovelCommentCreate {
	ncc.mutation.SetScore(i)
	return ncc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableScore(i *int32) *NovelCommentCreate {
	if i != nil {
		ncc.SetScore(*i)
	}
	return ncc
}

// SetPId sets the "pId" field.
func (ncc *NovelCommentCreate) SetPId(i int64) *NovelCommentCreate {
	ncc.mutation.SetPId(i)
	return ncc
}

// SetNillablePId sets the "pId" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillablePId(i *int64) *NovelCommentCreate {
	if i != nil {
		ncc.SetPId(*i)
	}
	return ncc
}

// SetIsTop sets the "isTop" field.
func (ncc *NovelCommentCreate) SetIsTop(b bool) *NovelCommentCreate {
	ncc.mutation.SetIsTop(b)
	return ncc
}

// SetNillableIsTop sets the "isTop" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableIsTop(b *bool) *NovelCommentCreate {
	if b != nil {
		ncc.SetIsTop(*b)
	}
	return ncc
}

// SetState sets the "state" field.
func (ncc *NovelCommentCreate) SetState(n novelcomment.State) *NovelCommentCreate {
	ncc.mutation.SetState(n)
	return ncc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableState(n *novelcomment.State) *NovelCommentCreate {
	if n != nil {
		ncc.SetState(*n)
	}
	return ncc
}

// SetIsHighlight sets the "isHighlight" field.
func (ncc *NovelCommentCreate) SetIsHighlight(b bool) *NovelCommentCreate {
	ncc.mutation.SetIsHighlight(b)
	return ncc
}

// SetNillableIsHighlight sets the "isHighlight" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableIsHighlight(b *bool) *NovelCommentCreate {
	if b != nil {
		ncc.SetIsHighlight(*b)
	}
	return ncc
}

// SetIsHot sets the "isHot" field.
func (ncc *NovelCommentCreate) SetIsHot(b bool) *NovelCommentCreate {
	ncc.mutation.SetIsHot(b)
	return ncc
}

// SetNillableIsHot sets the "isHot" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableIsHot(b *bool) *NovelCommentCreate {
	if b != nil {
		ncc.SetIsHot(*b)
	}
	return ncc
}

// SetRemark sets the "remark" field.
func (ncc *NovelCommentCreate) SetRemark(s string) *NovelCommentCreate {
	ncc.mutation.SetRemark(s)
	return ncc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableRemark(s *string) *NovelCommentCreate {
	if s != nil {
		ncc.SetRemark(*s)
	}
	return ncc
}

// SetCreatedAt sets the "createdAt" field.
func (ncc *NovelCommentCreate) SetCreatedAt(t time.Time) *NovelCommentCreate {
	ncc.mutation.SetCreatedAt(t)
	return ncc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableCreatedAt(t *time.Time) *NovelCommentCreate {
	if t != nil {
		ncc.SetCreatedAt(*t)
	}
	return ncc
}

// SetUpdatedAt sets the "updatedAt" field.
func (ncc *NovelCommentCreate) SetUpdatedAt(t time.Time) *NovelCommentCreate {
	ncc.mutation.SetUpdatedAt(t)
	return ncc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableUpdatedAt(t *time.Time) *NovelCommentCreate {
	if t != nil {
		ncc.SetUpdatedAt(*t)
	}
	return ncc
}

// SetCreateBy sets the "createBy" field.
func (ncc *NovelCommentCreate) SetCreateBy(i int64) *NovelCommentCreate {
	ncc.mutation.SetCreateBy(i)
	return ncc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableCreateBy(i *int64) *NovelCommentCreate {
	if i != nil {
		ncc.SetCreateBy(*i)
	}
	return ncc
}

// SetUpdateBy sets the "updateBy" field.
func (ncc *NovelCommentCreate) SetUpdateBy(i int64) *NovelCommentCreate {
	ncc.mutation.SetUpdateBy(i)
	return ncc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableUpdateBy(i *int64) *NovelCommentCreate {
	if i != nil {
		ncc.SetUpdateBy(*i)
	}
	return ncc
}

// SetTenantId sets the "tenantId" field.
func (ncc *NovelCommentCreate) SetTenantId(i int64) *NovelCommentCreate {
	ncc.mutation.SetTenantId(i)
	return ncc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableTenantId(i *int64) *NovelCommentCreate {
	if i != nil {
		ncc.SetTenantId(*i)
	}
	return ncc
}

// SetParentID sets the "parent" edge to the NovelComment entity by ID.
func (ncc *NovelCommentCreate) SetParentID(id int64) *NovelCommentCreate {
	ncc.mutation.SetParentID(id)
	return ncc
}

// SetNillableParentID sets the "parent" edge to the NovelComment entity by ID if the given value is not nil.
func (ncc *NovelCommentCreate) SetNillableParentID(id *int64) *NovelCommentCreate {
	if id != nil {
		ncc = ncc.SetParentID(*id)
	}
	return ncc
}

// SetParent sets the "parent" edge to the NovelComment entity.
func (ncc *NovelCommentCreate) SetParent(n *NovelComment) *NovelCommentCreate {
	return ncc.SetParentID(n.ID)
}

// AddChildeIDs adds the "childes" edge to the NovelComment entity by IDs.
func (ncc *NovelCommentCreate) AddChildeIDs(ids ...int64) *NovelCommentCreate {
	ncc.mutation.AddChildeIDs(ids...)
	return ncc
}

// AddChildes adds the "childes" edges to the NovelComment entity.
func (ncc *NovelCommentCreate) AddChildes(n ...*NovelComment) *NovelCommentCreate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncc.AddChildeIDs(ids...)
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (ncc *NovelCommentCreate) SetUserID(id int64) *NovelCommentCreate {
	ncc.mutation.SetUserID(id)
	return ncc
}

// SetUser sets the "user" edge to the SocialUser entity.
func (ncc *NovelCommentCreate) SetUser(s *SocialUser) *NovelCommentCreate {
	return ncc.SetUserID(s.ID)
}

// Mutation returns the NovelCommentMutation object of the builder.
func (ncc *NovelCommentCreate) Mutation() *NovelCommentMutation {
	return ncc.mutation
}

// Save creates the NovelComment in the database.
func (ncc *NovelCommentCreate) Save(ctx context.Context) (*NovelComment, error) {
	var (
		err  error
		node *NovelComment
	)
	ncc.defaults()
	if len(ncc.hooks) == 0 {
		if err = ncc.check(); err != nil {
			return nil, err
		}
		node, err = ncc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ncc.check(); err != nil {
				return nil, err
			}
			ncc.mutation = mutation
			if node, err = ncc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ncc.hooks) - 1; i >= 0; i-- {
			if ncc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NovelCommentCreate) SaveX(ctx context.Context) *NovelComment {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NovelCommentCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NovelCommentCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncc *NovelCommentCreate) defaults() {
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		v := novelcomment.DefaultCreatedAt()
		ncc.mutation.SetCreatedAt(v)
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		v := novelcomment.DefaultUpdatedAt()
		ncc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ncc.mutation.CreateBy(); !ok {
		v := novelcomment.DefaultCreateBy
		ncc.mutation.SetCreateBy(v)
	}
	if _, ok := ncc.mutation.UpdateBy(); !ok {
		v := novelcomment.DefaultUpdateBy
		ncc.mutation.SetUpdateBy(v)
	}
	if _, ok := ncc.mutation.TenantId(); !ok {
		v := novelcomment.DefaultTenantId
		ncc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NovelCommentCreate) check() error {
	if _, ok := ncc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "userId"`)}
	}
	if v, ok := ncc.mutation.State(); ok {
		if err := novelcomment.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "state": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := ncc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := ncc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := ncc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	if _, ok := ncc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (ncc *NovelCommentCreate) sqlSave(ctx context.Context) (*NovelComment, error) {
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ncc *NovelCommentCreate) createSpec() (*NovelComment, *sqlgraph.CreateSpec) {
	var (
		_node = &NovelComment{config: ncc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: novelcomment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelcomment.FieldID,
			},
		}
	)
	if value, ok := ncc.mutation.NovelId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldNovelId,
		})
		_node.NovelId = value
	}
	if value, ok := ncc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := ncc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := ncc.mutation.RepUserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldRepUserId,
		})
		_node.RepUserId = value
	}
	if value, ok := ncc.mutation.RepUserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldRepUserName,
		})
		_node.RepUserName = value
	}
	if value, ok := ncc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := ncc.mutation.Score(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelcomment.FieldScore,
		})
		_node.Score = value
	}
	if value, ok := ncc.mutation.PId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldPId,
		})
		_node.PId = value
	}
	if value, ok := ncc.mutation.IsTop(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelcomment.FieldIsTop,
		})
		_node.IsTop = value
	}
	if value, ok := ncc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: novelcomment.FieldState,
		})
		_node.State = value
	}
	if value, ok := ncc.mutation.IsHighlight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelcomment.FieldIsHighlight,
		})
		_node.IsHighlight = value
	}
	if value, ok := ncc.mutation.IsHot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelcomment.FieldIsHot,
		})
		_node.IsHot = value
	}
	if value, ok := ncc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ncc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelcomment.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ncc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelcomment.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ncc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := ncc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := ncc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := ncc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.ParentTable,
			Columns: []string{novelcomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.novel_comment_childes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ncc.mutation.ChildesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelcomment.ChildesTable,
			Columns: []string{novelcomment.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ncc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.UserTable,
			Columns: []string{novelcomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NovelCommentCreateBulk is the builder for creating many NovelComment entities in bulk.
type NovelCommentCreateBulk struct {
	config
	builders []*NovelCommentCreate
}

// Save creates the NovelComment entities in the database.
func (nccb *NovelCommentCreateBulk) Save(ctx context.Context) ([]*NovelComment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NovelComment, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NovelCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NovelCommentCreateBulk) SaveX(ctx context.Context) []*NovelComment {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NovelCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NovelCommentCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}
