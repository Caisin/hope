// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysPostHTTPServer interface {
	BatchDeleteSysPost(context.Context, *SysPostBatchDeleteReq) (*SysPostDeleteReply, error)
	CreateSysPost(context.Context, *SysPostCreateReq) (*SysPostCreateReply, error)
	DeleteSysPost(context.Context, *SysPostDeleteReq) (*SysPostDeleteReply, error)
	GetPageSysPost(context.Context, *SysPostPageReq) (*SysPostPageReply, error)
	GetSysPost(context.Context, *SysPostReq) (*SysPostReply, error)
	UpdateSysPost(context.Context, *SysPostUpdateReq) (*SysPostUpdateReply, error)
}

func RegisterSysPostHTTPServer(s *http.Server, srv SysPostHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/syspost/page", _SysPost_GetPageSysPost0_HTTP_Handler(srv))
	r.GET("/v1/syspost/{id}", _SysPost_GetSysPost0_HTTP_Handler(srv))
	r.PUT("/v1/syspost/{id}", _SysPost_UpdateSysPost0_HTTP_Handler(srv))
	r.POST("/v1/syspost", _SysPost_CreateSysPost0_HTTP_Handler(srv))
	r.DELETE("/v1/syspost/{id}", _SysPost_DeleteSysPost0_HTTP_Handler(srv))
	r.DELETE("/v1/syspost", _SysPost_BatchDeleteSysPost0_HTTP_Handler(srv))
}

func _SysPost_GetPageSysPost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPostPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syspost.v1.SysPost/GetPageSysPost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageSysPost(ctx, req.(*SysPostPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPostPageReply)
		return ctx.Result(200, reply)
	}
}

func _SysPost_GetSysPost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPostReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syspost.v1.SysPost/GetSysPost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysPost(ctx, req.(*SysPostReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPostReply)
		return ctx.Result(200, reply)
	}
}

func _SysPost_UpdateSysPost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPostUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syspost.v1.SysPost/UpdateSysPost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysPost(ctx, req.(*SysPostUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPostUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysPost_CreateSysPost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPostCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syspost.v1.SysPost/CreateSysPost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysPost(ctx, req.(*SysPostCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPostCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysPost_DeleteSysPost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPostDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syspost.v1.SysPost/DeleteSysPost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysPost(ctx, req.(*SysPostDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPostDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysPost_BatchDeleteSysPost0_HTTP_Handler(srv SysPostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysPostBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syspost.v1.SysPost/BatchDeleteSysPost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysPost(ctx, req.(*SysPostBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysPostDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysPostHTTPClient interface {
	BatchDeleteSysPost(ctx context.Context, req *SysPostBatchDeleteReq, opts ...http.CallOption) (rsp *SysPostDeleteReply, err error)
	CreateSysPost(ctx context.Context, req *SysPostCreateReq, opts ...http.CallOption) (rsp *SysPostCreateReply, err error)
	DeleteSysPost(ctx context.Context, req *SysPostDeleteReq, opts ...http.CallOption) (rsp *SysPostDeleteReply, err error)
	GetPageSysPost(ctx context.Context, req *SysPostPageReq, opts ...http.CallOption) (rsp *SysPostPageReply, err error)
	GetSysPost(ctx context.Context, req *SysPostReq, opts ...http.CallOption) (rsp *SysPostReply, err error)
	UpdateSysPost(ctx context.Context, req *SysPostUpdateReq, opts ...http.CallOption) (rsp *SysPostUpdateReply, err error)
}

type SysPostHTTPClientImpl struct {
	cc *http.Client
}

func NewSysPostHTTPClient(client *http.Client) SysPostHTTPClient {
	return &SysPostHTTPClientImpl{client}
}

func (c *SysPostHTTPClientImpl) BatchDeleteSysPost(ctx context.Context, in *SysPostBatchDeleteReq, opts ...http.CallOption) (*SysPostDeleteReply, error) {
	var out SysPostDeleteReply
	pattern := "/v1/syspost"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/syspost.v1.SysPost/BatchDeleteSysPost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysPostHTTPClientImpl) CreateSysPost(ctx context.Context, in *SysPostCreateReq, opts ...http.CallOption) (*SysPostCreateReply, error) {
	var out SysPostCreateReply
	pattern := "/v1/syspost"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/syspost.v1.SysPost/CreateSysPost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysPostHTTPClientImpl) DeleteSysPost(ctx context.Context, in *SysPostDeleteReq, opts ...http.CallOption) (*SysPostDeleteReply, error) {
	var out SysPostDeleteReply
	pattern := "/v1/syspost/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/syspost.v1.SysPost/DeleteSysPost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysPostHTTPClientImpl) GetPageSysPost(ctx context.Context, in *SysPostPageReq, opts ...http.CallOption) (*SysPostPageReply, error) {
	var out SysPostPageReply
	pattern := "/v1/syspost/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/syspost.v1.SysPost/GetPageSysPost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysPostHTTPClientImpl) GetSysPost(ctx context.Context, in *SysPostReq, opts ...http.CallOption) (*SysPostReply, error) {
	var out SysPostReply
	pattern := "/v1/syspost/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/syspost.v1.SysPost/GetSysPost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysPostHTTPClientImpl) UpdateSysPost(ctx context.Context, in *SysPostUpdateReq, opts ...http.CallOption) (*SysPostUpdateReply, error) {
	var out SysPostUpdateReply
	pattern := "/v1/syspost/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/syspost.v1.SysPost/UpdateSysPost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
