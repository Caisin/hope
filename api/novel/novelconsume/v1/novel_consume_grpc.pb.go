// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/novelconsume/v1/novel_consume.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelConsumeClient is the client API for NovelConsume service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelConsumeClient interface {
	// 分页查询NovelConsume
	GetPageNovelConsume(ctx context.Context, in *NovelConsumePageReq, opts ...grpc.CallOption) (*NovelConsumePageReply, error)
	// 获取NovelConsume
	GetNovelConsume(ctx context.Context, in *NovelConsumeReq, opts ...grpc.CallOption) (*NovelConsumeReply, error)
	// 更新NovelConsume
	UpdateNovelConsume(ctx context.Context, in *NovelConsumeUpdateReq, opts ...grpc.CallOption) (*NovelConsumeUpdateReply, error)
	// 创建NovelConsume
	CreateNovelConsume(ctx context.Context, in *NovelConsumeCreateReq, opts ...grpc.CallOption) (*NovelConsumeCreateReply, error)
	// 删除NovelConsume
	DeleteNovelConsume(ctx context.Context, in *NovelConsumeDeleteReq, opts ...grpc.CallOption) (*NovelConsumeDeleteReply, error)
	// 批量删除NovelConsume
	BatchDeleteNovelConsume(ctx context.Context, in *NovelConsumeBatchDeleteReq, opts ...grpc.CallOption) (*NovelConsumeDeleteReply, error)
}

type novelConsumeClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelConsumeClient(cc grpc.ClientConnInterface) NovelConsumeClient {
	return &novelConsumeClient{cc}
}

func (c *novelConsumeClient) GetPageNovelConsume(ctx context.Context, in *NovelConsumePageReq, opts ...grpc.CallOption) (*NovelConsumePageReply, error) {
	out := new(NovelConsumePageReply)
	err := c.cc.Invoke(ctx, "/novelconsume.v1.NovelConsume/GetPageNovelConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelConsumeClient) GetNovelConsume(ctx context.Context, in *NovelConsumeReq, opts ...grpc.CallOption) (*NovelConsumeReply, error) {
	out := new(NovelConsumeReply)
	err := c.cc.Invoke(ctx, "/novelconsume.v1.NovelConsume/GetNovelConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelConsumeClient) UpdateNovelConsume(ctx context.Context, in *NovelConsumeUpdateReq, opts ...grpc.CallOption) (*NovelConsumeUpdateReply, error) {
	out := new(NovelConsumeUpdateReply)
	err := c.cc.Invoke(ctx, "/novelconsume.v1.NovelConsume/UpdateNovelConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelConsumeClient) CreateNovelConsume(ctx context.Context, in *NovelConsumeCreateReq, opts ...grpc.CallOption) (*NovelConsumeCreateReply, error) {
	out := new(NovelConsumeCreateReply)
	err := c.cc.Invoke(ctx, "/novelconsume.v1.NovelConsume/CreateNovelConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelConsumeClient) DeleteNovelConsume(ctx context.Context, in *NovelConsumeDeleteReq, opts ...grpc.CallOption) (*NovelConsumeDeleteReply, error) {
	out := new(NovelConsumeDeleteReply)
	err := c.cc.Invoke(ctx, "/novelconsume.v1.NovelConsume/DeleteNovelConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelConsumeClient) BatchDeleteNovelConsume(ctx context.Context, in *NovelConsumeBatchDeleteReq, opts ...grpc.CallOption) (*NovelConsumeDeleteReply, error) {
	out := new(NovelConsumeDeleteReply)
	err := c.cc.Invoke(ctx, "/novelconsume.v1.NovelConsume/BatchDeleteNovelConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelConsumeServer is the server API for NovelConsume service.
// All implementations must embed UnimplementedNovelConsumeServer
// for forward compatibility
type NovelConsumeServer interface {
	// 分页查询NovelConsume
	GetPageNovelConsume(context.Context, *NovelConsumePageReq) (*NovelConsumePageReply, error)
	// 获取NovelConsume
	GetNovelConsume(context.Context, *NovelConsumeReq) (*NovelConsumeReply, error)
	// 更新NovelConsume
	UpdateNovelConsume(context.Context, *NovelConsumeUpdateReq) (*NovelConsumeUpdateReply, error)
	// 创建NovelConsume
	CreateNovelConsume(context.Context, *NovelConsumeCreateReq) (*NovelConsumeCreateReply, error)
	// 删除NovelConsume
	DeleteNovelConsume(context.Context, *NovelConsumeDeleteReq) (*NovelConsumeDeleteReply, error)
	// 批量删除NovelConsume
	BatchDeleteNovelConsume(context.Context, *NovelConsumeBatchDeleteReq) (*NovelConsumeDeleteReply, error)
	mustEmbedUnimplementedNovelConsumeServer()
}

// UnimplementedNovelConsumeServer must be embedded to have forward compatible implementations.
type UnimplementedNovelConsumeServer struct {
}

func (UnimplementedNovelConsumeServer) GetPageNovelConsume(context.Context, *NovelConsumePageReq) (*NovelConsumePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageNovelConsume not implemented")
}
func (UnimplementedNovelConsumeServer) GetNovelConsume(context.Context, *NovelConsumeReq) (*NovelConsumeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelConsume not implemented")
}
func (UnimplementedNovelConsumeServer) UpdateNovelConsume(context.Context, *NovelConsumeUpdateReq) (*NovelConsumeUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNovelConsume not implemented")
}
func (UnimplementedNovelConsumeServer) CreateNovelConsume(context.Context, *NovelConsumeCreateReq) (*NovelConsumeCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNovelConsume not implemented")
}
func (UnimplementedNovelConsumeServer) DeleteNovelConsume(context.Context, *NovelConsumeDeleteReq) (*NovelConsumeDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNovelConsume not implemented")
}
func (UnimplementedNovelConsumeServer) BatchDeleteNovelConsume(context.Context, *NovelConsumeBatchDeleteReq) (*NovelConsumeDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNovelConsume not implemented")
}
func (UnimplementedNovelConsumeServer) mustEmbedUnimplementedNovelConsumeServer() {}

// UnsafeNovelConsumeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelConsumeServer will
// result in compilation errors.
type UnsafeNovelConsumeServer interface {
	mustEmbedUnimplementedNovelConsumeServer()
}

func RegisterNovelConsumeServer(s grpc.ServiceRegistrar, srv NovelConsumeServer) {
	s.RegisterService(&NovelConsume_ServiceDesc, srv)
}

func _NovelConsume_GetPageNovelConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelConsumePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelConsumeServer).GetPageNovelConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelconsume.v1.NovelConsume/GetPageNovelConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelConsumeServer).GetPageNovelConsume(ctx, req.(*NovelConsumePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelConsume_GetNovelConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelConsumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelConsumeServer).GetNovelConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelconsume.v1.NovelConsume/GetNovelConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelConsumeServer).GetNovelConsume(ctx, req.(*NovelConsumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelConsume_UpdateNovelConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelConsumeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelConsumeServer).UpdateNovelConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelconsume.v1.NovelConsume/UpdateNovelConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelConsumeServer).UpdateNovelConsume(ctx, req.(*NovelConsumeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelConsume_CreateNovelConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelConsumeCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelConsumeServer).CreateNovelConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelconsume.v1.NovelConsume/CreateNovelConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelConsumeServer).CreateNovelConsume(ctx, req.(*NovelConsumeCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelConsume_DeleteNovelConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelConsumeDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelConsumeServer).DeleteNovelConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelconsume.v1.NovelConsume/DeleteNovelConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelConsumeServer).DeleteNovelConsume(ctx, req.(*NovelConsumeDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelConsume_BatchDeleteNovelConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelConsumeBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelConsumeServer).BatchDeleteNovelConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelconsume.v1.NovelConsume/BatchDeleteNovelConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelConsumeServer).BatchDeleteNovelConsume(ctx, req.(*NovelConsumeBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelConsume_ServiceDesc is the grpc.ServiceDesc for NovelConsume service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelConsume_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novelconsume.v1.NovelConsume",
	HandlerType: (*NovelConsumeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageNovelConsume",
			Handler:    _NovelConsume_GetPageNovelConsume_Handler,
		},
		{
			MethodName: "GetNovelConsume",
			Handler:    _NovelConsume_GetNovelConsume_Handler,
		},
		{
			MethodName: "UpdateNovelConsume",
			Handler:    _NovelConsume_UpdateNovelConsume_Handler,
		},
		{
			MethodName: "CreateNovelConsume",
			Handler:    _NovelConsume_CreateNovelConsume_Handler,
		},
		{
			MethodName: "DeleteNovelConsume",
			Handler:    _NovelConsume_DeleteNovelConsume_Handler,
		},
		{
			MethodName: "BatchDeleteNovelConsume",
			Handler:    _NovelConsume_BatchDeleteNovelConsume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/novelconsume/v1/novel_consume.proto",
}
