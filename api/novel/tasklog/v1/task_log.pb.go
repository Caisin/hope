// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/tasklog/v1/task_log.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询搜索请求
type TaskLogPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *TaskLogReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *TaskLogPageReq) Reset() {
	*x = TaskLogPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogPageReq) ProtoMessage() {}

func (x *TaskLogPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogPageReq.ProtoReflect.Descriptor instead.
func (*TaskLogPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{0}
}

func (x *TaskLogPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *TaskLogPageReq) GetParam() *TaskLogReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type TaskLogPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条目
	Items []*TaskLogReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TaskLogPageReply) Reset() {
	*x = TaskLogPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogPageReply) ProtoMessage() {}

func (x *TaskLogPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogPageReply.ProtoReflect.Descriptor instead.
func (*TaskLogPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{1}
}

func (x *TaskLogPageReply) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *TaskLogPageReply) GetItems() []*TaskLogReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type TaskLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,3,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//任务编码
	TaskCode string `protobuf:"bytes,4,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//任务Id
	TaskId int64 `protobuf:"varint,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
	//任务名称
	TaskName string `protobuf:"bytes,6,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励金额
	Reward int64 `protobuf:"varint,8,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资产科目
	AmountItem int32 `protobuf:"varint,9,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资产科目
	RewardItem int32 `protobuf:"varint,10,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标值
	TargetAmount int64 `protobuf:"varint,11,opt,name=targetAmount,proto3" json:"targetAmount,omitempty"`
	//完成值
	DoneAmount int64 `protobuf:"varint,12,opt,name=doneAmount,proto3" json:"doneAmount,omitempty"`
	//状态,0
	State int64 `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	//完成时间
	DoneAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=doneAt,proto3" json:"doneAt,omitempty"`
	//领取奖励时间
	ObtainAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=obtainAt,proto3" json:"obtainAt,omitempty"`
	//完成次数
	DoneTimes int32 `protobuf:"varint,16,opt,name=doneTimes,proto3" json:"doneTimes,omitempty"`
	//可完成次数
	AllTimes int32 `protobuf:"varint,17,opt,name=allTimes,proto3" json:"allTimes,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,22,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,23,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,24,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *TaskLogReq) Reset() {
	*x = TaskLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogReq) ProtoMessage() {}

func (x *TaskLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogReq.ProtoReflect.Descriptor instead.
func (*TaskLogReq) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{2}
}

func (x *TaskLogReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskLogReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TaskLogReq) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskLogReq) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskLogReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskLogReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskLogReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskLogReq) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskLogReq) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskLogReq) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskLogReq) GetTargetAmount() int64 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *TaskLogReq) GetDoneAmount() int64 {
	if x != nil {
		return x.DoneAmount
	}
	return 0
}

func (x *TaskLogReq) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TaskLogReq) GetDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DoneAt
	}
	return nil
}

func (x *TaskLogReq) GetObtainAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObtainAt
	}
	return nil
}

func (x *TaskLogReq) GetDoneTimes() int32 {
	if x != nil {
		return x.DoneTimes
	}
	return 0
}

func (x *TaskLogReq) GetAllTimes() int32 {
	if x != nil {
		return x.AllTimes
	}
	return 0
}

func (x *TaskLogReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskLogReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *TaskLogReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskLogReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TaskLogReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *TaskLogReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *TaskLogReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索返回
type TaskLogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,3,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//任务编码
	TaskCode string `protobuf:"bytes,4,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//任务Id
	TaskId int64 `protobuf:"varint,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
	//任务名称
	TaskName string `protobuf:"bytes,6,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励金额
	Reward int64 `protobuf:"varint,8,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资产科目
	AmountItem int32 `protobuf:"varint,9,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资产科目
	RewardItem int32 `protobuf:"varint,10,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标值
	TargetAmount int64 `protobuf:"varint,11,opt,name=targetAmount,proto3" json:"targetAmount,omitempty"`
	//完成值
	DoneAmount int64 `protobuf:"varint,12,opt,name=doneAmount,proto3" json:"doneAmount,omitempty"`
	//状态,0
	State int64 `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	//完成时间
	DoneAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=doneAt,proto3" json:"doneAt,omitempty"`
	//领取奖励时间
	ObtainAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=obtainAt,proto3" json:"obtainAt,omitempty"`
	//完成次数
	DoneTimes int32 `protobuf:"varint,16,opt,name=doneTimes,proto3" json:"doneTimes,omitempty"`
	//可完成次数
	AllTimes int32 `protobuf:"varint,17,opt,name=allTimes,proto3" json:"allTimes,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,22,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,23,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,24,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *TaskLogReply) Reset() {
	*x = TaskLogReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogReply) ProtoMessage() {}

func (x *TaskLogReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogReply.ProtoReflect.Descriptor instead.
func (*TaskLogReply) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{3}
}

func (x *TaskLogReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskLogReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TaskLogReply) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskLogReply) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskLogReply) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskLogReply) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskLogReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskLogReply) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskLogReply) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskLogReply) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskLogReply) GetTargetAmount() int64 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *TaskLogReply) GetDoneAmount() int64 {
	if x != nil {
		return x.DoneAmount
	}
	return 0
}

func (x *TaskLogReply) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TaskLogReply) GetDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DoneAt
	}
	return nil
}

func (x *TaskLogReply) GetObtainAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObtainAt
	}
	return nil
}

func (x *TaskLogReply) GetDoneTimes() int32 {
	if x != nil {
		return x.DoneTimes
	}
	return 0
}

func (x *TaskLogReply) GetAllTimes() int32 {
	if x != nil {
		return x.AllTimes
	}
	return 0
}

func (x *TaskLogReply) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskLogReply) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *TaskLogReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskLogReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TaskLogReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *TaskLogReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *TaskLogReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 创建TaskLog请求
type TaskLogCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户ID
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,2,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//任务编码
	TaskCode string `protobuf:"bytes,3,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//任务Id
	TaskId int64 `protobuf:"varint,4,opt,name=taskId,proto3" json:"taskId,omitempty"`
	//任务名称
	TaskName string `protobuf:"bytes,5,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励金额
	Reward int64 `protobuf:"varint,7,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资产科目
	AmountItem int32 `protobuf:"varint,8,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资产科目
	RewardItem int32 `protobuf:"varint,9,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标值
	TargetAmount int64 `protobuf:"varint,10,opt,name=targetAmount,proto3" json:"targetAmount,omitempty"`
	//完成值
	DoneAmount int64 `protobuf:"varint,11,opt,name=doneAmount,proto3" json:"doneAmount,omitempty"`
	//状态,0
	State int64 `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	//完成时间
	DoneAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=doneAt,proto3" json:"doneAt,omitempty"`
	//领取奖励时间
	ObtainAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=obtainAt,proto3" json:"obtainAt,omitempty"`
	//完成次数
	DoneTimes int32 `protobuf:"varint,15,opt,name=doneTimes,proto3" json:"doneTimes,omitempty"`
	//可完成次数
	AllTimes int32 `protobuf:"varint,16,opt,name=allTimes,proto3" json:"allTimes,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *TaskLogCreateReq) Reset() {
	*x = TaskLogCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogCreateReq) ProtoMessage() {}

func (x *TaskLogCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogCreateReq.ProtoReflect.Descriptor instead.
func (*TaskLogCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{4}
}

func (x *TaskLogCreateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TaskLogCreateReq) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskLogCreateReq) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskLogCreateReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskLogCreateReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskLogCreateReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskLogCreateReq) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskLogCreateReq) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskLogCreateReq) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskLogCreateReq) GetTargetAmount() int64 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *TaskLogCreateReq) GetDoneAmount() int64 {
	if x != nil {
		return x.DoneAmount
	}
	return 0
}

func (x *TaskLogCreateReq) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TaskLogCreateReq) GetDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DoneAt
	}
	return nil
}

func (x *TaskLogCreateReq) GetObtainAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObtainAt
	}
	return nil
}

func (x *TaskLogCreateReq) GetDoneTimes() int32 {
	if x != nil {
		return x.DoneTimes
	}
	return 0
}

func (x *TaskLogCreateReq) GetAllTimes() int32 {
	if x != nil {
		return x.AllTimes
	}
	return 0
}

func (x *TaskLogCreateReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskLogCreateReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 创建TaskLog返回
type TaskLogCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,3,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//任务编码
	TaskCode string `protobuf:"bytes,4,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//任务Id
	TaskId int64 `protobuf:"varint,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
	//任务名称
	TaskName string `protobuf:"bytes,6,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励金额
	Reward int64 `protobuf:"varint,8,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资产科目
	AmountItem int32 `protobuf:"varint,9,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资产科目
	RewardItem int32 `protobuf:"varint,10,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标值
	TargetAmount int64 `protobuf:"varint,11,opt,name=targetAmount,proto3" json:"targetAmount,omitempty"`
	//完成值
	DoneAmount int64 `protobuf:"varint,12,opt,name=doneAmount,proto3" json:"doneAmount,omitempty"`
	//状态,0
	State int64 `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	//完成时间
	DoneAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=doneAt,proto3" json:"doneAt,omitempty"`
	//领取奖励时间
	ObtainAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=obtainAt,proto3" json:"obtainAt,omitempty"`
	//完成次数
	DoneTimes int32 `protobuf:"varint,16,opt,name=doneTimes,proto3" json:"doneTimes,omitempty"`
	//可完成次数
	AllTimes int32 `protobuf:"varint,17,opt,name=allTimes,proto3" json:"allTimes,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,22,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,23,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,24,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *TaskLogCreateReply) Reset() {
	*x = TaskLogCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogCreateReply) ProtoMessage() {}

func (x *TaskLogCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogCreateReply.ProtoReflect.Descriptor instead.
func (*TaskLogCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{5}
}

func (x *TaskLogCreateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskLogCreateReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TaskLogCreateReply) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskLogCreateReply) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskLogCreateReply) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskLogCreateReply) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskLogCreateReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskLogCreateReply) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskLogCreateReply) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskLogCreateReply) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskLogCreateReply) GetTargetAmount() int64 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *TaskLogCreateReply) GetDoneAmount() int64 {
	if x != nil {
		return x.DoneAmount
	}
	return 0
}

func (x *TaskLogCreateReply) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TaskLogCreateReply) GetDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DoneAt
	}
	return nil
}

func (x *TaskLogCreateReply) GetObtainAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObtainAt
	}
	return nil
}

func (x *TaskLogCreateReply) GetDoneTimes() int32 {
	if x != nil {
		return x.DoneTimes
	}
	return 0
}

func (x *TaskLogCreateReply) GetAllTimes() int32 {
	if x != nil {
		return x.AllTimes
	}
	return 0
}

func (x *TaskLogCreateReply) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskLogCreateReply) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *TaskLogCreateReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskLogCreateReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TaskLogCreateReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *TaskLogCreateReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *TaskLogCreateReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 更新TaskLog请求
type TaskLogUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,3,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//任务编码
	TaskCode string `protobuf:"bytes,4,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//任务Id
	TaskId int64 `protobuf:"varint,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
	//任务名称
	TaskName string `protobuf:"bytes,6,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励金额
	Reward int64 `protobuf:"varint,8,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资产科目
	AmountItem int32 `protobuf:"varint,9,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资产科目
	RewardItem int32 `protobuf:"varint,10,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标值
	TargetAmount int64 `protobuf:"varint,11,opt,name=targetAmount,proto3" json:"targetAmount,omitempty"`
	//完成值
	DoneAmount int64 `protobuf:"varint,12,opt,name=doneAmount,proto3" json:"doneAmount,omitempty"`
	//状态,0
	State int64 `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	//完成时间
	DoneAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=doneAt,proto3" json:"doneAt,omitempty"`
	//领取奖励时间
	ObtainAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=obtainAt,proto3" json:"obtainAt,omitempty"`
	//完成次数
	DoneTimes int32 `protobuf:"varint,16,opt,name=doneTimes,proto3" json:"doneTimes,omitempty"`
	//可完成次数
	AllTimes int32 `protobuf:"varint,17,opt,name=allTimes,proto3" json:"allTimes,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *TaskLogUpdateReq) Reset() {
	*x = TaskLogUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogUpdateReq) ProtoMessage() {}

func (x *TaskLogUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogUpdateReq.ProtoReflect.Descriptor instead.
func (*TaskLogUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{6}
}

func (x *TaskLogUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskLogUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TaskLogUpdateReq) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskLogUpdateReq) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskLogUpdateReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskLogUpdateReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskLogUpdateReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskLogUpdateReq) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskLogUpdateReq) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskLogUpdateReq) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskLogUpdateReq) GetTargetAmount() int64 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *TaskLogUpdateReq) GetDoneAmount() int64 {
	if x != nil {
		return x.DoneAmount
	}
	return 0
}

func (x *TaskLogUpdateReq) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TaskLogUpdateReq) GetDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DoneAt
	}
	return nil
}

func (x *TaskLogUpdateReq) GetObtainAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObtainAt
	}
	return nil
}

func (x *TaskLogUpdateReq) GetDoneTimes() int32 {
	if x != nil {
		return x.DoneTimes
	}
	return 0
}

func (x *TaskLogUpdateReq) GetAllTimes() int32 {
	if x != nil {
		return x.AllTimes
	}
	return 0
}

func (x *TaskLogUpdateReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskLogUpdateReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 更新TaskLog返回
type TaskLogUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,3,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//任务编码
	TaskCode string `protobuf:"bytes,4,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//任务Id
	TaskId int64 `protobuf:"varint,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
	//任务名称
	TaskName string `protobuf:"bytes,6,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励金额
	Reward int64 `protobuf:"varint,8,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资产科目
	AmountItem int32 `protobuf:"varint,9,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资产科目
	RewardItem int32 `protobuf:"varint,10,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标值
	TargetAmount int64 `protobuf:"varint,11,opt,name=targetAmount,proto3" json:"targetAmount,omitempty"`
	//完成值
	DoneAmount int64 `protobuf:"varint,12,opt,name=doneAmount,proto3" json:"doneAmount,omitempty"`
	//状态,0
	State int64 `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	//完成时间
	DoneAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=doneAt,proto3" json:"doneAt,omitempty"`
	//领取奖励时间
	ObtainAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=obtainAt,proto3" json:"obtainAt,omitempty"`
	//完成次数
	DoneTimes int32 `protobuf:"varint,16,opt,name=doneTimes,proto3" json:"doneTimes,omitempty"`
	//可完成次数
	AllTimes int32 `protobuf:"varint,17,opt,name=allTimes,proto3" json:"allTimes,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *TaskLogUpdateReply) Reset() {
	*x = TaskLogUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogUpdateReply) ProtoMessage() {}

func (x *TaskLogUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogUpdateReply.ProtoReflect.Descriptor instead.
func (*TaskLogUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{7}
}

func (x *TaskLogUpdateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskLogUpdateReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TaskLogUpdateReply) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskLogUpdateReply) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskLogUpdateReply) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskLogUpdateReply) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskLogUpdateReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskLogUpdateReply) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskLogUpdateReply) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskLogUpdateReply) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskLogUpdateReply) GetTargetAmount() int64 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *TaskLogUpdateReply) GetDoneAmount() int64 {
	if x != nil {
		return x.DoneAmount
	}
	return 0
}

func (x *TaskLogUpdateReply) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TaskLogUpdateReply) GetDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DoneAt
	}
	return nil
}

func (x *TaskLogUpdateReply) GetObtainAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObtainAt
	}
	return nil
}

func (x *TaskLogUpdateReply) GetDoneTimes() int32 {
	if x != nil {
		return x.DoneTimes
	}
	return 0
}

func (x *TaskLogUpdateReply) GetAllTimes() int32 {
	if x != nil {
		return x.AllTimes
	}
	return 0
}

func (x *TaskLogUpdateReply) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskLogUpdateReply) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 删除TaskLog请求
type TaskLogDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskLogDeleteReq) Reset() {
	*x = TaskLogDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogDeleteReq) ProtoMessage() {}

func (x *TaskLogDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogDeleteReq.ProtoReflect.Descriptor instead.
func (*TaskLogDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{8}
}

func (x *TaskLogDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除TaskLog请求
type TaskLogBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *TaskLogBatchDeleteReq) Reset() {
	*x = TaskLogBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogBatchDeleteReq) ProtoMessage() {}

func (x *TaskLogBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*TaskLogBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{9}
}

func (x *TaskLogBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除TaskLog返回
type TaskLogDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TaskLogDeleteReply) Reset() {
	*x = TaskLogDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogDeleteReply) ProtoMessage() {}

func (x *TaskLogDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_tasklog_v1_task_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogDeleteReply.ProtoReflect.Descriptor instead.
func (*TaskLogDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP(), []int{10}
}

func (x *TaskLogDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_tasklog_v1_task_log_proto protoreflect.FileDescriptor

var file_api_novel_tasklog_v1_task_log_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x67, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x6b, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x6f, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd4, 0x06, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd6, 0x06, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x6e,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41,
	0x74, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x82, 0x05, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x6f,
	0x6e, 0x65, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x62,
	0x74, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdc, 0x06, 0x0a, 0x12, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64,
	0x6f, 0x6e, 0x65, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x92, 0x05, 0x0a, 0x10, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6e, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f,
	0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x64, 0x6f, 0x6e, 0x65,
	0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x94,
	0x05, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x15, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0xf3, 0x04, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x64,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67,
	0x12, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f,
	0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2f,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6a,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x12,
	0x1c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x6c,
	0x6f, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x3a, 0x01,
	0x2a, 0x12, 0x67, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x12, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67,
	0x12, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x6c, 0x6f, 0x67, 0x42, 0x1e, 0x5a, 0x1c, 0x68, 0x6f, 0x70, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x6c,
	0x6f, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_novel_tasklog_v1_task_log_proto_rawDescOnce sync.Once
	file_api_novel_tasklog_v1_task_log_proto_rawDescData = file_api_novel_tasklog_v1_task_log_proto_rawDesc
)

func file_api_novel_tasklog_v1_task_log_proto_rawDescGZIP() []byte {
	file_api_novel_tasklog_v1_task_log_proto_rawDescOnce.Do(func() {
		file_api_novel_tasklog_v1_task_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_tasklog_v1_task_log_proto_rawDescData)
	})
	return file_api_novel_tasklog_v1_task_log_proto_rawDescData
}

var file_api_novel_tasklog_v1_task_log_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_novel_tasklog_v1_task_log_proto_goTypes = []interface{}{
	(*TaskLogPageReq)(nil),        // 0: tasklog.v1.TaskLogPageReq
	(*TaskLogPageReply)(nil),      // 1: tasklog.v1.TaskLogPageReply
	(*TaskLogReq)(nil),            // 2: tasklog.v1.TaskLogReq
	(*TaskLogReply)(nil),          // 3: tasklog.v1.TaskLogReply
	(*TaskLogCreateReq)(nil),      // 4: tasklog.v1.TaskLogCreateReq
	(*TaskLogCreateReply)(nil),    // 5: tasklog.v1.TaskLogCreateReply
	(*TaskLogUpdateReq)(nil),      // 6: tasklog.v1.TaskLogUpdateReq
	(*TaskLogUpdateReply)(nil),    // 7: tasklog.v1.TaskLogUpdateReply
	(*TaskLogDeleteReq)(nil),      // 8: tasklog.v1.TaskLogDeleteReq
	(*TaskLogBatchDeleteReq)(nil), // 9: tasklog.v1.TaskLogBatchDeleteReq
	(*TaskLogDeleteReply)(nil),    // 10: tasklog.v1.TaskLogDeleteReply
	(*pagin.Pagination)(nil),      // 11: pagin.Pagination
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_api_novel_tasklog_v1_task_log_proto_depIdxs = []int32{
	11, // 0: tasklog.v1.TaskLogPageReq.pagin:type_name -> pagin.Pagination
	2,  // 1: tasklog.v1.TaskLogPageReq.param:type_name -> tasklog.v1.TaskLogReq
	11, // 2: tasklog.v1.TaskLogPageReply.pagin:type_name -> pagin.Pagination
	3,  // 3: tasklog.v1.TaskLogPageReply.items:type_name -> tasklog.v1.TaskLogReply
	12, // 4: tasklog.v1.TaskLogReq.doneAt:type_name -> google.protobuf.Timestamp
	12, // 5: tasklog.v1.TaskLogReq.obtainAt:type_name -> google.protobuf.Timestamp
	12, // 6: tasklog.v1.TaskLogReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 7: tasklog.v1.TaskLogReq.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 8: tasklog.v1.TaskLogReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 9: tasklog.v1.TaskLogReq.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 10: tasklog.v1.TaskLogReply.doneAt:type_name -> google.protobuf.Timestamp
	12, // 11: tasklog.v1.TaskLogReply.obtainAt:type_name -> google.protobuf.Timestamp
	12, // 12: tasklog.v1.TaskLogReply.effectTime:type_name -> google.protobuf.Timestamp
	12, // 13: tasklog.v1.TaskLogReply.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 14: tasklog.v1.TaskLogReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 15: tasklog.v1.TaskLogReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 16: tasklog.v1.TaskLogCreateReq.doneAt:type_name -> google.protobuf.Timestamp
	12, // 17: tasklog.v1.TaskLogCreateReq.obtainAt:type_name -> google.protobuf.Timestamp
	12, // 18: tasklog.v1.TaskLogCreateReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 19: tasklog.v1.TaskLogCreateReq.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 20: tasklog.v1.TaskLogCreateReply.doneAt:type_name -> google.protobuf.Timestamp
	12, // 21: tasklog.v1.TaskLogCreateReply.obtainAt:type_name -> google.protobuf.Timestamp
	12, // 22: tasklog.v1.TaskLogCreateReply.effectTime:type_name -> google.protobuf.Timestamp
	12, // 23: tasklog.v1.TaskLogCreateReply.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 24: tasklog.v1.TaskLogCreateReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 25: tasklog.v1.TaskLogCreateReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 26: tasklog.v1.TaskLogUpdateReq.doneAt:type_name -> google.protobuf.Timestamp
	12, // 27: tasklog.v1.TaskLogUpdateReq.obtainAt:type_name -> google.protobuf.Timestamp
	12, // 28: tasklog.v1.TaskLogUpdateReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 29: tasklog.v1.TaskLogUpdateReq.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 30: tasklog.v1.TaskLogUpdateReply.doneAt:type_name -> google.protobuf.Timestamp
	12, // 31: tasklog.v1.TaskLogUpdateReply.obtainAt:type_name -> google.protobuf.Timestamp
	12, // 32: tasklog.v1.TaskLogUpdateReply.effectTime:type_name -> google.protobuf.Timestamp
	12, // 33: tasklog.v1.TaskLogUpdateReply.expiredTime:type_name -> google.protobuf.Timestamp
	0,  // 34: tasklog.v1.TaskLog.GetPageTaskLog:input_type -> tasklog.v1.TaskLogPageReq
	2,  // 35: tasklog.v1.TaskLog.GetTaskLog:input_type -> tasklog.v1.TaskLogReq
	6,  // 36: tasklog.v1.TaskLog.UpdateTaskLog:input_type -> tasklog.v1.TaskLogUpdateReq
	4,  // 37: tasklog.v1.TaskLog.CreateTaskLog:input_type -> tasklog.v1.TaskLogCreateReq
	8,  // 38: tasklog.v1.TaskLog.DeleteTaskLog:input_type -> tasklog.v1.TaskLogDeleteReq
	9,  // 39: tasklog.v1.TaskLog.BatchDeleteTaskLog:input_type -> tasklog.v1.TaskLogBatchDeleteReq
	1,  // 40: tasklog.v1.TaskLog.GetPageTaskLog:output_type -> tasklog.v1.TaskLogPageReply
	3,  // 41: tasklog.v1.TaskLog.GetTaskLog:output_type -> tasklog.v1.TaskLogReply
	7,  // 42: tasklog.v1.TaskLog.UpdateTaskLog:output_type -> tasklog.v1.TaskLogUpdateReply
	5,  // 43: tasklog.v1.TaskLog.CreateTaskLog:output_type -> tasklog.v1.TaskLogCreateReply
	10, // 44: tasklog.v1.TaskLog.DeleteTaskLog:output_type -> tasklog.v1.TaskLogDeleteReply
	10, // 45: tasklog.v1.TaskLog.BatchDeleteTaskLog:output_type -> tasklog.v1.TaskLogDeleteReply
	40, // [40:46] is the sub-list for method output_type
	34, // [34:40] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_api_novel_tasklog_v1_task_log_proto_init() }
func file_api_novel_tasklog_v1_task_log_proto_init() {
	if File_api_novel_tasklog_v1_task_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_tasklog_v1_task_log_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_tasklog_v1_task_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_tasklog_v1_task_log_proto_goTypes,
		DependencyIndexes: file_api_novel_tasklog_v1_task_log_proto_depIdxs,
		MessageInfos:      file_api_novel_tasklog_v1_task_log_proto_msgTypes,
	}.Build()
	File_api_novel_tasklog_v1_task_log_proto = out.File
	file_api_novel_tasklog_v1_task_log_proto_rawDesc = nil
	file_api_novel_tasklog_v1_task_log_proto_goTypes = nil
	file_api_novel_tasklog_v1_task_log_proto_depIdxs = nil
}
