// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/userevent"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserEventUpdate is the builder for updating UserEvent entities.
type UserEventUpdate struct {
	config
	hooks    []Hook
	mutation *UserEventMutation
}

// Where appends a list predicates to the UserEventUpdate builder.
func (ueu *UserEventUpdate) Where(ps ...predicate.UserEvent) *UserEventUpdate {
	ueu.mutation.Where(ps...)
	return ueu
}

// SetUserId sets the "userId" field.
func (ueu *UserEventUpdate) SetUserId(i int64) *UserEventUpdate {
	ueu.mutation.ResetUserId()
	ueu.mutation.SetUserId(i)
	return ueu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableUserId(i *int64) *UserEventUpdate {
	if i != nil {
		ueu.SetUserId(*i)
	}
	return ueu
}

// AddUserId adds i to the "userId" field.
func (ueu *UserEventUpdate) AddUserId(i int64) *UserEventUpdate {
	ueu.mutation.AddUserId(i)
	return ueu
}

// ClearUserId clears the value of the "userId" field.
func (ueu *UserEventUpdate) ClearUserId() *UserEventUpdate {
	ueu.mutation.ClearUserId()
	return ueu
}

// SetEventType sets the "eventType" field.
func (ueu *UserEventUpdate) SetEventType(s string) *UserEventUpdate {
	ueu.mutation.SetEventType(s)
	return ueu
}

// SetNillableEventType sets the "eventType" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableEventType(s *string) *UserEventUpdate {
	if s != nil {
		ueu.SetEventType(*s)
	}
	return ueu
}

// ClearEventType clears the value of the "eventType" field.
func (ueu *UserEventUpdate) ClearEventType() *UserEventUpdate {
	ueu.mutation.ClearEventType()
	return ueu
}

// SetNovelId sets the "novelId" field.
func (ueu *UserEventUpdate) SetNovelId(i int64) *UserEventUpdate {
	ueu.mutation.ResetNovelId()
	ueu.mutation.SetNovelId(i)
	return ueu
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableNovelId(i *int64) *UserEventUpdate {
	if i != nil {
		ueu.SetNovelId(*i)
	}
	return ueu
}

// AddNovelId adds i to the "novelId" field.
func (ueu *UserEventUpdate) AddNovelId(i int64) *UserEventUpdate {
	ueu.mutation.AddNovelId(i)
	return ueu
}

// ClearNovelId clears the value of the "novelId" field.
func (ueu *UserEventUpdate) ClearNovelId() *UserEventUpdate {
	ueu.mutation.ClearNovelId()
	return ueu
}

// SetChapterId sets the "chapterId" field.
func (ueu *UserEventUpdate) SetChapterId(i int64) *UserEventUpdate {
	ueu.mutation.ResetChapterId()
	ueu.mutation.SetChapterId(i)
	return ueu
}

// SetNillableChapterId sets the "chapterId" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableChapterId(i *int64) *UserEventUpdate {
	if i != nil {
		ueu.SetChapterId(*i)
	}
	return ueu
}

// AddChapterId adds i to the "chapterId" field.
func (ueu *UserEventUpdate) AddChapterId(i int64) *UserEventUpdate {
	ueu.mutation.AddChapterId(i)
	return ueu
}

// ClearChapterId clears the value of the "chapterId" field.
func (ueu *UserEventUpdate) ClearChapterId() *UserEventUpdate {
	ueu.mutation.ClearChapterId()
	return ueu
}

// SetCoin sets the "coin" field.
func (ueu *UserEventUpdate) SetCoin(i int64) *UserEventUpdate {
	ueu.mutation.ResetCoin()
	ueu.mutation.SetCoin(i)
	return ueu
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableCoin(i *int64) *UserEventUpdate {
	if i != nil {
		ueu.SetCoin(*i)
	}
	return ueu
}

// AddCoin adds i to the "coin" field.
func (ueu *UserEventUpdate) AddCoin(i int64) *UserEventUpdate {
	ueu.mutation.AddCoin(i)
	return ueu
}

// ClearCoin clears the value of the "coin" field.
func (ueu *UserEventUpdate) ClearCoin() *UserEventUpdate {
	ueu.mutation.ClearCoin()
	return ueu
}

// SetCoupon sets the "coupon" field.
func (ueu *UserEventUpdate) SetCoupon(i int64) *UserEventUpdate {
	ueu.mutation.ResetCoupon()
	ueu.mutation.SetCoupon(i)
	return ueu
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableCoupon(i *int64) *UserEventUpdate {
	if i != nil {
		ueu.SetCoupon(*i)
	}
	return ueu
}

// AddCoupon adds i to the "coupon" field.
func (ueu *UserEventUpdate) AddCoupon(i int64) *UserEventUpdate {
	ueu.mutation.AddCoupon(i)
	return ueu
}

// ClearCoupon clears the value of the "coupon" field.
func (ueu *UserEventUpdate) ClearCoupon() *UserEventUpdate {
	ueu.mutation.ClearCoupon()
	return ueu
}

// SetMoney sets the "money" field.
func (ueu *UserEventUpdate) SetMoney(i int64) *UserEventUpdate {
	ueu.mutation.ResetMoney()
	ueu.mutation.SetMoney(i)
	return ueu
}

// SetNillableMoney sets the "money" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableMoney(i *int64) *UserEventUpdate {
	if i != nil {
		ueu.SetMoney(*i)
	}
	return ueu
}

// AddMoney adds i to the "money" field.
func (ueu *UserEventUpdate) AddMoney(i int64) *UserEventUpdate {
	ueu.mutation.AddMoney(i)
	return ueu
}

// ClearMoney clears the value of the "money" field.
func (ueu *UserEventUpdate) ClearMoney() *UserEventUpdate {
	ueu.mutation.ClearMoney()
	return ueu
}

// SetKeyword sets the "keyword" field.
func (ueu *UserEventUpdate) SetKeyword(s string) *UserEventUpdate {
	ueu.mutation.SetKeyword(s)
	return ueu
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableKeyword(s *string) *UserEventUpdate {
	if s != nil {
		ueu.SetKeyword(*s)
	}
	return ueu
}

// ClearKeyword clears the value of the "keyword" field.
func (ueu *UserEventUpdate) ClearKeyword() *UserEventUpdate {
	ueu.mutation.ClearKeyword()
	return ueu
}

// SetUpdatedAt sets the "updatedAt" field.
func (ueu *UserEventUpdate) SetUpdatedAt(t time.Time) *UserEventUpdate {
	ueu.mutation.SetUpdatedAt(t)
	return ueu
}

// SetCreateBy sets the "createBy" field.
func (ueu *UserEventUpdate) SetCreateBy(i int64) *UserEventUpdate {
	ueu.mutation.ResetCreateBy()
	ueu.mutation.SetCreateBy(i)
	return ueu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableCreateBy(i *int64) *UserEventUpdate {
	if i != nil {
		ueu.SetCreateBy(*i)
	}
	return ueu
}

// AddCreateBy adds i to the "createBy" field.
func (ueu *UserEventUpdate) AddCreateBy(i int64) *UserEventUpdate {
	ueu.mutation.AddCreateBy(i)
	return ueu
}

// SetUpdateBy sets the "updateBy" field.
func (ueu *UserEventUpdate) SetUpdateBy(i int64) *UserEventUpdate {
	ueu.mutation.ResetUpdateBy()
	ueu.mutation.SetUpdateBy(i)
	return ueu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableUpdateBy(i *int64) *UserEventUpdate {
	if i != nil {
		ueu.SetUpdateBy(*i)
	}
	return ueu
}

// AddUpdateBy adds i to the "updateBy" field.
func (ueu *UserEventUpdate) AddUpdateBy(i int64) *UserEventUpdate {
	ueu.mutation.AddUpdateBy(i)
	return ueu
}

// SetTenantId sets the "tenantId" field.
func (ueu *UserEventUpdate) SetTenantId(i int64) *UserEventUpdate {
	ueu.mutation.ResetTenantId()
	ueu.mutation.SetTenantId(i)
	return ueu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ueu *UserEventUpdate) SetNillableTenantId(i *int64) *UserEventUpdate {
	if i != nil {
		ueu.SetTenantId(*i)
	}
	return ueu
}

// AddTenantId adds i to the "tenantId" field.
func (ueu *UserEventUpdate) AddTenantId(i int64) *UserEventUpdate {
	ueu.mutation.AddTenantId(i)
	return ueu
}

// Mutation returns the UserEventMutation object of the builder.
func (ueu *UserEventUpdate) Mutation() *UserEventMutation {
	return ueu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ueu *UserEventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ueu.defaults()
	if len(ueu.hooks) == 0 {
		affected, err = ueu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ueu.mutation = mutation
			affected, err = ueu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ueu.hooks) - 1; i >= 0; i-- {
			if ueu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ueu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ueu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ueu *UserEventUpdate) SaveX(ctx context.Context) int {
	affected, err := ueu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ueu *UserEventUpdate) Exec(ctx context.Context) error {
	_, err := ueu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueu *UserEventUpdate) ExecX(ctx context.Context) {
	if err := ueu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ueu *UserEventUpdate) defaults() {
	if _, ok := ueu.mutation.UpdatedAt(); !ok {
		v := userevent.UpdateDefaultUpdatedAt()
		ueu.mutation.SetUpdatedAt(v)
	}
}

func (ueu *UserEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userevent.Table,
			Columns: userevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userevent.FieldID,
			},
		},
	}
	if ps := ueu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueu.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldUserId,
		})
	}
	if value, ok := ueu.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldUserId,
		})
	}
	if ueu.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldUserId,
		})
	}
	if value, ok := ueu.mutation.EventType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userevent.FieldEventType,
		})
	}
	if ueu.mutation.EventTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userevent.FieldEventType,
		})
	}
	if value, ok := ueu.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldNovelId,
		})
	}
	if value, ok := ueu.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldNovelId,
		})
	}
	if ueu.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldNovelId,
		})
	}
	if value, ok := ueu.mutation.ChapterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldChapterId,
		})
	}
	if value, ok := ueu.mutation.AddedChapterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldChapterId,
		})
	}
	if ueu.mutation.ChapterIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldChapterId,
		})
	}
	if value, ok := ueu.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoin,
		})
	}
	if value, ok := ueu.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoin,
		})
	}
	if ueu.mutation.CoinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldCoin,
		})
	}
	if value, ok := ueu.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoupon,
		})
	}
	if value, ok := ueu.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoupon,
		})
	}
	if ueu.mutation.CouponCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldCoupon,
		})
	}
	if value, ok := ueu.mutation.Money(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldMoney,
		})
	}
	if value, ok := ueu.mutation.AddedMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldMoney,
		})
	}
	if ueu.mutation.MoneyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldMoney,
		})
	}
	if value, ok := ueu.mutation.Keyword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userevent.FieldKeyword,
		})
	}
	if ueu.mutation.KeywordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userevent.FieldKeyword,
		})
	}
	if value, ok := ueu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userevent.FieldUpdatedAt,
		})
	}
	if value, ok := ueu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCreateBy,
		})
	}
	if value, ok := ueu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCreateBy,
		})
	}
	if value, ok := ueu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldUpdateBy,
		})
	}
	if value, ok := ueu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldUpdateBy,
		})
	}
	if value, ok := ueu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldTenantId,
		})
	}
	if value, ok := ueu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ueu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserEventUpdateOne is the builder for updating a single UserEvent entity.
type UserEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserEventMutation
}

// SetUserId sets the "userId" field.
func (ueuo *UserEventUpdateOne) SetUserId(i int64) *UserEventUpdateOne {
	ueuo.mutation.ResetUserId()
	ueuo.mutation.SetUserId(i)
	return ueuo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableUserId(i *int64) *UserEventUpdateOne {
	if i != nil {
		ueuo.SetUserId(*i)
	}
	return ueuo
}

// AddUserId adds i to the "userId" field.
func (ueuo *UserEventUpdateOne) AddUserId(i int64) *UserEventUpdateOne {
	ueuo.mutation.AddUserId(i)
	return ueuo
}

// ClearUserId clears the value of the "userId" field.
func (ueuo *UserEventUpdateOne) ClearUserId() *UserEventUpdateOne {
	ueuo.mutation.ClearUserId()
	return ueuo
}

// SetEventType sets the "eventType" field.
func (ueuo *UserEventUpdateOne) SetEventType(s string) *UserEventUpdateOne {
	ueuo.mutation.SetEventType(s)
	return ueuo
}

// SetNillableEventType sets the "eventType" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableEventType(s *string) *UserEventUpdateOne {
	if s != nil {
		ueuo.SetEventType(*s)
	}
	return ueuo
}

// ClearEventType clears the value of the "eventType" field.
func (ueuo *UserEventUpdateOne) ClearEventType() *UserEventUpdateOne {
	ueuo.mutation.ClearEventType()
	return ueuo
}

// SetNovelId sets the "novelId" field.
func (ueuo *UserEventUpdateOne) SetNovelId(i int64) *UserEventUpdateOne {
	ueuo.mutation.ResetNovelId()
	ueuo.mutation.SetNovelId(i)
	return ueuo
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableNovelId(i *int64) *UserEventUpdateOne {
	if i != nil {
		ueuo.SetNovelId(*i)
	}
	return ueuo
}

// AddNovelId adds i to the "novelId" field.
func (ueuo *UserEventUpdateOne) AddNovelId(i int64) *UserEventUpdateOne {
	ueuo.mutation.AddNovelId(i)
	return ueuo
}

// ClearNovelId clears the value of the "novelId" field.
func (ueuo *UserEventUpdateOne) ClearNovelId() *UserEventUpdateOne {
	ueuo.mutation.ClearNovelId()
	return ueuo
}

// SetChapterId sets the "chapterId" field.
func (ueuo *UserEventUpdateOne) SetChapterId(i int64) *UserEventUpdateOne {
	ueuo.mutation.ResetChapterId()
	ueuo.mutation.SetChapterId(i)
	return ueuo
}

// SetNillableChapterId sets the "chapterId" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableChapterId(i *int64) *UserEventUpdateOne {
	if i != nil {
		ueuo.SetChapterId(*i)
	}
	return ueuo
}

// AddChapterId adds i to the "chapterId" field.
func (ueuo *UserEventUpdateOne) AddChapterId(i int64) *UserEventUpdateOne {
	ueuo.mutation.AddChapterId(i)
	return ueuo
}

// ClearChapterId clears the value of the "chapterId" field.
func (ueuo *UserEventUpdateOne) ClearChapterId() *UserEventUpdateOne {
	ueuo.mutation.ClearChapterId()
	return ueuo
}

// SetCoin sets the "coin" field.
func (ueuo *UserEventUpdateOne) SetCoin(i int64) *UserEventUpdateOne {
	ueuo.mutation.ResetCoin()
	ueuo.mutation.SetCoin(i)
	return ueuo
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableCoin(i *int64) *UserEventUpdateOne {
	if i != nil {
		ueuo.SetCoin(*i)
	}
	return ueuo
}

// AddCoin adds i to the "coin" field.
func (ueuo *UserEventUpdateOne) AddCoin(i int64) *UserEventUpdateOne {
	ueuo.mutation.AddCoin(i)
	return ueuo
}

// ClearCoin clears the value of the "coin" field.
func (ueuo *UserEventUpdateOne) ClearCoin() *UserEventUpdateOne {
	ueuo.mutation.ClearCoin()
	return ueuo
}

// SetCoupon sets the "coupon" field.
func (ueuo *UserEventUpdateOne) SetCoupon(i int64) *UserEventUpdateOne {
	ueuo.mutation.ResetCoupon()
	ueuo.mutation.SetCoupon(i)
	return ueuo
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableCoupon(i *int64) *UserEventUpdateOne {
	if i != nil {
		ueuo.SetCoupon(*i)
	}
	return ueuo
}

// AddCoupon adds i to the "coupon" field.
func (ueuo *UserEventUpdateOne) AddCoupon(i int64) *UserEventUpdateOne {
	ueuo.mutation.AddCoupon(i)
	return ueuo
}

// ClearCoupon clears the value of the "coupon" field.
func (ueuo *UserEventUpdateOne) ClearCoupon() *UserEventUpdateOne {
	ueuo.mutation.ClearCoupon()
	return ueuo
}

// SetMoney sets the "money" field.
func (ueuo *UserEventUpdateOne) SetMoney(i int64) *UserEventUpdateOne {
	ueuo.mutation.ResetMoney()
	ueuo.mutation.SetMoney(i)
	return ueuo
}

// SetNillableMoney sets the "money" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableMoney(i *int64) *UserEventUpdateOne {
	if i != nil {
		ueuo.SetMoney(*i)
	}
	return ueuo
}

// AddMoney adds i to the "money" field.
func (ueuo *UserEventUpdateOne) AddMoney(i int64) *UserEventUpdateOne {
	ueuo.mutation.AddMoney(i)
	return ueuo
}

// ClearMoney clears the value of the "money" field.
func (ueuo *UserEventUpdateOne) ClearMoney() *UserEventUpdateOne {
	ueuo.mutation.ClearMoney()
	return ueuo
}

// SetKeyword sets the "keyword" field.
func (ueuo *UserEventUpdateOne) SetKeyword(s string) *UserEventUpdateOne {
	ueuo.mutation.SetKeyword(s)
	return ueuo
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableKeyword(s *string) *UserEventUpdateOne {
	if s != nil {
		ueuo.SetKeyword(*s)
	}
	return ueuo
}

// ClearKeyword clears the value of the "keyword" field.
func (ueuo *UserEventUpdateOne) ClearKeyword() *UserEventUpdateOne {
	ueuo.mutation.ClearKeyword()
	return ueuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ueuo *UserEventUpdateOne) SetUpdatedAt(t time.Time) *UserEventUpdateOne {
	ueuo.mutation.SetUpdatedAt(t)
	return ueuo
}

// SetCreateBy sets the "createBy" field.
func (ueuo *UserEventUpdateOne) SetCreateBy(i int64) *UserEventUpdateOne {
	ueuo.mutation.ResetCreateBy()
	ueuo.mutation.SetCreateBy(i)
	return ueuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableCreateBy(i *int64) *UserEventUpdateOne {
	if i != nil {
		ueuo.SetCreateBy(*i)
	}
	return ueuo
}

// AddCreateBy adds i to the "createBy" field.
func (ueuo *UserEventUpdateOne) AddCreateBy(i int64) *UserEventUpdateOne {
	ueuo.mutation.AddCreateBy(i)
	return ueuo
}

// SetUpdateBy sets the "updateBy" field.
func (ueuo *UserEventUpdateOne) SetUpdateBy(i int64) *UserEventUpdateOne {
	ueuo.mutation.ResetUpdateBy()
	ueuo.mutation.SetUpdateBy(i)
	return ueuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableUpdateBy(i *int64) *UserEventUpdateOne {
	if i != nil {
		ueuo.SetUpdateBy(*i)
	}
	return ueuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (ueuo *UserEventUpdateOne) AddUpdateBy(i int64) *UserEventUpdateOne {
	ueuo.mutation.AddUpdateBy(i)
	return ueuo
}

// SetTenantId sets the "tenantId" field.
func (ueuo *UserEventUpdateOne) SetTenantId(i int64) *UserEventUpdateOne {
	ueuo.mutation.ResetTenantId()
	ueuo.mutation.SetTenantId(i)
	return ueuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ueuo *UserEventUpdateOne) SetNillableTenantId(i *int64) *UserEventUpdateOne {
	if i != nil {
		ueuo.SetTenantId(*i)
	}
	return ueuo
}

// AddTenantId adds i to the "tenantId" field.
func (ueuo *UserEventUpdateOne) AddTenantId(i int64) *UserEventUpdateOne {
	ueuo.mutation.AddTenantId(i)
	return ueuo
}

// Mutation returns the UserEventMutation object of the builder.
func (ueuo *UserEventUpdateOne) Mutation() *UserEventMutation {
	return ueuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ueuo *UserEventUpdateOne) Select(field string, fields ...string) *UserEventUpdateOne {
	ueuo.fields = append([]string{field}, fields...)
	return ueuo
}

// Save executes the query and returns the updated UserEvent entity.
func (ueuo *UserEventUpdateOne) Save(ctx context.Context) (*UserEvent, error) {
	var (
		err  error
		node *UserEvent
	)
	ueuo.defaults()
	if len(ueuo.hooks) == 0 {
		node, err = ueuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ueuo.mutation = mutation
			node, err = ueuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ueuo.hooks) - 1; i >= 0; i-- {
			if ueuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ueuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ueuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ueuo *UserEventUpdateOne) SaveX(ctx context.Context) *UserEvent {
	node, err := ueuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ueuo *UserEventUpdateOne) Exec(ctx context.Context) error {
	_, err := ueuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ueuo *UserEventUpdateOne) ExecX(ctx context.Context) {
	if err := ueuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ueuo *UserEventUpdateOne) defaults() {
	if _, ok := ueuo.mutation.UpdatedAt(); !ok {
		v := userevent.UpdateDefaultUpdatedAt()
		ueuo.mutation.SetUpdatedAt(v)
	}
}

func (ueuo *UserEventUpdateOne) sqlSave(ctx context.Context) (_node *UserEvent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userevent.Table,
			Columns: userevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userevent.FieldID,
			},
		},
	}
	id, ok := ueuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserEvent.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ueuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userevent.FieldID)
		for _, f := range fields {
			if !userevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ueuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ueuo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldUserId,
		})
	}
	if value, ok := ueuo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldUserId,
		})
	}
	if ueuo.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldUserId,
		})
	}
	if value, ok := ueuo.mutation.EventType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userevent.FieldEventType,
		})
	}
	if ueuo.mutation.EventTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userevent.FieldEventType,
		})
	}
	if value, ok := ueuo.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldNovelId,
		})
	}
	if value, ok := ueuo.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldNovelId,
		})
	}
	if ueuo.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldNovelId,
		})
	}
	if value, ok := ueuo.mutation.ChapterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldChapterId,
		})
	}
	if value, ok := ueuo.mutation.AddedChapterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldChapterId,
		})
	}
	if ueuo.mutation.ChapterIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldChapterId,
		})
	}
	if value, ok := ueuo.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoin,
		})
	}
	if value, ok := ueuo.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoin,
		})
	}
	if ueuo.mutation.CoinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldCoin,
		})
	}
	if value, ok := ueuo.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoupon,
		})
	}
	if value, ok := ueuo.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoupon,
		})
	}
	if ueuo.mutation.CouponCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldCoupon,
		})
	}
	if value, ok := ueuo.mutation.Money(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldMoney,
		})
	}
	if value, ok := ueuo.mutation.AddedMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldMoney,
		})
	}
	if ueuo.mutation.MoneyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userevent.FieldMoney,
		})
	}
	if value, ok := ueuo.mutation.Keyword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userevent.FieldKeyword,
		})
	}
	if ueuo.mutation.KeywordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userevent.FieldKeyword,
		})
	}
	if value, ok := ueuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userevent.FieldUpdatedAt,
		})
	}
	if value, ok := ueuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCreateBy,
		})
	}
	if value, ok := ueuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCreateBy,
		})
	}
	if value, ok := ueuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldUpdateBy,
		})
	}
	if value, ok := ueuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldUpdateBy,
		})
	}
	if value, ok := ueuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldTenantId,
		})
	}
	if value, ok := ueuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldTenantId,
		})
	}
	_node = &UserEvent{config: ueuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ueuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
