// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysapi"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysApi is the model entity for the SysApi schema.
type SysApi struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Handle holds the value of the "handle" field.
	// 处理器
	Handle string `json:"handle,omitempty"`
	// Title holds the value of the "title" field.
	// 标题
	Title string `json:"title,omitempty"`
	// Path holds the value of the "path" field.
	// 地址
	Path string `json:"path,omitempty"`
	// Action holds the value of the "action" field.
	// 请求类型
	Action string `json:"action,omitempty"`
	// Type holds the value of the "type" field.
	// 接口类型
	Type string `json:"type,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysApi) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysapi.FieldID, sysapi.FieldCreateBy, sysapi.FieldUpdateBy, sysapi.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysapi.FieldHandle, sysapi.FieldTitle, sysapi.FieldPath, sysapi.FieldAction, sysapi.FieldType:
			values[i] = new(sql.NullString)
		case sysapi.FieldCreatedAt, sysapi.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysApi", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysApi fields.
func (sa *SysApi) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysapi.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sa.ID = int64(value.Int64)
		case sysapi.FieldHandle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handle", values[i])
			} else if value.Valid {
				sa.Handle = value.String
			}
		case sysapi.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sa.Title = value.String
			}
		case sysapi.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				sa.Path = value.String
			}
		case sysapi.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				sa.Action = value.String
			}
		case sysapi.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sa.Type = value.String
			}
		case sysapi.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sa.CreatedAt = value.Time
			}
		case sysapi.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sa.UpdatedAt = value.Time
			}
		case sysapi.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sa.CreateBy = value.Int64
			}
		case sysapi.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sa.UpdateBy = value.Int64
			}
		case sysapi.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sa.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SysApi.
// Note that you need to call SysApi.Unwrap() before calling this method if this SysApi
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SysApi) Update() *SysApiUpdateOne {
	return (&SysApiClient{config: sa.config}).UpdateOne(sa)
}

// Unwrap unwraps the SysApi entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SysApi) Unwrap() *SysApi {
	tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysApi is not a transactional entity")
	}
	sa.config.driver = tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SysApi) String() string {
	var builder strings.Builder
	builder.WriteString("SysApi(")
	builder.WriteString(fmt.Sprintf("id=%v", sa.ID))
	builder.WriteString(", handle=")
	builder.WriteString(sa.Handle)
	builder.WriteString(", title=")
	builder.WriteString(sa.Title)
	builder.WriteString(", path=")
	builder.WriteString(sa.Path)
	builder.WriteString(", action=")
	builder.WriteString(sa.Action)
	builder.WriteString(", type=")
	builder.WriteString(sa.Type)
	builder.WriteString(", createdAt=")
	builder.WriteString(sa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sa.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sa.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sa.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysApis is a parsable slice of SysApi.
type SysApis []*SysApi

func (sa SysApis) config(cfg config) {
	for _i := range sa {
		sa[_i].config = cfg
	}
}
