// Code generated by entc, DO NOT EDIT.

package bookpackage

import (
	"time"
)

const (
	// Label holds the string label denoting the bookpackage type in the database.
	Label = "book_package"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldActivityCode holds the string denoting the activitycode field in the database.
	FieldActivityCode = "activity_code"
	// FieldPackageName holds the string denoting the packagename field in the database.
	FieldPackageName = "package_name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldDailyPrice holds the string denoting the dailyprice field in the database.
	FieldDailyPrice = "daily_price"
	// FieldNovelIds holds the string denoting the novelids field in the database.
	FieldNovelIds = "novel_ids"
	// FieldEffectTime holds the string denoting the effecttime field in the database.
	FieldEffectTime = "effect_time"
	// FieldExpiredTime holds the string denoting the expiredtime field in the database.
	FieldExpiredTime = "expired_time"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeBooks holds the string denoting the books edge name in mutations.
	EdgeBooks = "books"
	// Table holds the table name of the bookpackage in the database.
	Table = "book_packages"
	// BooksTable is the table that holds the books relation/edge. The primary key declared below.
	BooksTable = "novel_pkgs"
	// BooksInverseTable is the table name for the Novel entity.
	// It exists in this package in order to avoid circular dependency with the "novel" package.
	BooksInverseTable = "novels"
)

// Columns holds all SQL columns for bookpackage fields.
var Columns = []string{
	FieldID,
	FieldActivityCode,
	FieldPackageName,
	FieldPrice,
	FieldDailyPrice,
	FieldNovelIds,
	FieldEffectTime,
	FieldExpiredTime,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreateBy,
	FieldUpdateBy,
	FieldTenantId,
}

var (
	// BooksPrimaryKey and BooksColumn2 are the table columns denoting the
	// primary key for the books relation (M2M).
	BooksPrimaryKey = []string{"novel_id", "book_package_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEffectTime holds the default value on creation for the "effectTime" field.
	DefaultEffectTime func() time.Time
	// DefaultExpiredTime holds the default value on creation for the "expiredTime" field.
	DefaultExpiredTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateBy holds the default value on creation for the "createBy" field.
	DefaultCreateBy int64
	// DefaultUpdateBy holds the default value on creation for the "updateBy" field.
	DefaultUpdateBy int64
	// DefaultTenantId holds the default value on creation for the "tenantId" field.
	DefaultTenantId int64
)
