// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/customernovelconfig"
	"hope/apps/novel/internal/data/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerNovelConfigQuery is the builder for querying CustomerNovelConfig entities.
type CustomerNovelConfigQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CustomerNovelConfig
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CustomerNovelConfigQuery builder.
func (cncq *CustomerNovelConfigQuery) Where(ps ...predicate.CustomerNovelConfig) *CustomerNovelConfigQuery {
	cncq.predicates = append(cncq.predicates, ps...)
	return cncq
}

// Limit adds a limit step to the query.
func (cncq *CustomerNovelConfigQuery) Limit(limit int) *CustomerNovelConfigQuery {
	cncq.limit = &limit
	return cncq
}

// Offset adds an offset step to the query.
func (cncq *CustomerNovelConfigQuery) Offset(offset int) *CustomerNovelConfigQuery {
	cncq.offset = &offset
	return cncq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cncq *CustomerNovelConfigQuery) Unique(unique bool) *CustomerNovelConfigQuery {
	cncq.unique = &unique
	return cncq
}

// Order adds an order step to the query.
func (cncq *CustomerNovelConfigQuery) Order(o ...OrderFunc) *CustomerNovelConfigQuery {
	cncq.order = append(cncq.order, o...)
	return cncq
}

// First returns the first CustomerNovelConfig entity from the query.
// Returns a *NotFoundError when no CustomerNovelConfig was found.
func (cncq *CustomerNovelConfigQuery) First(ctx context.Context) (*CustomerNovelConfig, error) {
	nodes, err := cncq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{customernovelconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cncq *CustomerNovelConfigQuery) FirstX(ctx context.Context) *CustomerNovelConfig {
	node, err := cncq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CustomerNovelConfig ID from the query.
// Returns a *NotFoundError when no CustomerNovelConfig ID was found.
func (cncq *CustomerNovelConfigQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cncq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{customernovelconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cncq *CustomerNovelConfigQuery) FirstIDX(ctx context.Context) int64 {
	id, err := cncq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CustomerNovelConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one CustomerNovelConfig entity is not found.
// Returns a *NotFoundError when no CustomerNovelConfig entities are found.
func (cncq *CustomerNovelConfigQuery) Only(ctx context.Context) (*CustomerNovelConfig, error) {
	nodes, err := cncq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{customernovelconfig.Label}
	default:
		return nil, &NotSingularError{customernovelconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cncq *CustomerNovelConfigQuery) OnlyX(ctx context.Context) *CustomerNovelConfig {
	node, err := cncq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CustomerNovelConfig ID in the query.
// Returns a *NotSingularError when exactly one CustomerNovelConfig ID is not found.
// Returns a *NotFoundError when no entities are found.
func (cncq *CustomerNovelConfigQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = cncq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{customernovelconfig.Label}
	default:
		err = &NotSingularError{customernovelconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cncq *CustomerNovelConfigQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := cncq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CustomerNovelConfigs.
func (cncq *CustomerNovelConfigQuery) All(ctx context.Context) ([]*CustomerNovelConfig, error) {
	if err := cncq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cncq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cncq *CustomerNovelConfigQuery) AllX(ctx context.Context) []*CustomerNovelConfig {
	nodes, err := cncq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CustomerNovelConfig IDs.
func (cncq *CustomerNovelConfigQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := cncq.Select(customernovelconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cncq *CustomerNovelConfigQuery) IDsX(ctx context.Context) []int64 {
	ids, err := cncq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cncq *CustomerNovelConfigQuery) Count(ctx context.Context) (int, error) {
	if err := cncq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cncq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cncq *CustomerNovelConfigQuery) CountX(ctx context.Context) int {
	count, err := cncq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cncq *CustomerNovelConfigQuery) Exist(ctx context.Context) (bool, error) {
	if err := cncq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cncq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cncq *CustomerNovelConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := cncq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CustomerNovelConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cncq *CustomerNovelConfigQuery) Clone() *CustomerNovelConfigQuery {
	if cncq == nil {
		return nil
	}
	return &CustomerNovelConfigQuery{
		config:     cncq.config,
		limit:      cncq.limit,
		offset:     cncq.offset,
		order:      append([]OrderFunc{}, cncq.order...),
		predicates: append([]predicate.CustomerNovelConfig{}, cncq.predicates...),
		// clone intermediate query.
		sql:  cncq.sql.Clone(),
		path: cncq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		GroupCode string `json:"groupCode,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CustomerNovelConfig.Query().
//		GroupBy(customernovelconfig.FieldGroupCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cncq *CustomerNovelConfigQuery) GroupBy(field string, fields ...string) *CustomerNovelConfigGroupBy {
	group := &CustomerNovelConfigGroupBy{config: cncq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cncq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cncq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		GroupCode string `json:"groupCode,omitempty"`
//	}
//
//	client.CustomerNovelConfig.Query().
//		Select(customernovelconfig.FieldGroupCode).
//		Scan(ctx, &v)
//
func (cncq *CustomerNovelConfigQuery) Select(fields ...string) *CustomerNovelConfigSelect {
	cncq.fields = append(cncq.fields, fields...)
	return &CustomerNovelConfigSelect{CustomerNovelConfigQuery: cncq}
}

func (cncq *CustomerNovelConfigQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cncq.fields {
		if !customernovelconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cncq.path != nil {
		prev, err := cncq.path(ctx)
		if err != nil {
			return err
		}
		cncq.sql = prev
	}
	return nil
}

func (cncq *CustomerNovelConfigQuery) sqlAll(ctx context.Context) ([]*CustomerNovelConfig, error) {
	var (
		nodes = []*CustomerNovelConfig{}
		_spec = cncq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &CustomerNovelConfig{config: cncq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, cncq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (cncq *CustomerNovelConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cncq.querySpec()
	_spec.Node.Columns = cncq.fields
	if len(cncq.fields) > 0 {
		_spec.Unique = cncq.unique != nil && *cncq.unique
	}
	return sqlgraph.CountNodes(ctx, cncq.driver, _spec)
}

func (cncq *CustomerNovelConfigQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cncq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (cncq *CustomerNovelConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customernovelconfig.Table,
			Columns: customernovelconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: customernovelconfig.FieldID,
			},
		},
		From:   cncq.sql,
		Unique: true,
	}
	if unique := cncq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cncq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customernovelconfig.FieldID)
		for i := range fields {
			if fields[i] != customernovelconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cncq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cncq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cncq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cncq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cncq *CustomerNovelConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cncq.driver.Dialect())
	t1 := builder.Table(customernovelconfig.Table)
	columns := cncq.fields
	if len(columns) == 0 {
		columns = customernovelconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cncq.sql != nil {
		selector = cncq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cncq.unique != nil && *cncq.unique {
		selector.Distinct()
	}
	for _, p := range cncq.predicates {
		p(selector)
	}
	for _, p := range cncq.order {
		p(selector)
	}
	if offset := cncq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cncq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CustomerNovelConfigGroupBy is the group-by builder for CustomerNovelConfig entities.
type CustomerNovelConfigGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cncgb *CustomerNovelConfigGroupBy) Aggregate(fns ...AggregateFunc) *CustomerNovelConfigGroupBy {
	cncgb.fns = append(cncgb.fns, fns...)
	return cncgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cncgb *CustomerNovelConfigGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cncgb.path(ctx)
	if err != nil {
		return err
	}
	cncgb.sql = query
	return cncgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cncgb *CustomerNovelConfigGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cncgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (cncgb *CustomerNovelConfigGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cncgb.fields) > 1 {
		return nil, errors.New("ent: CustomerNovelConfigGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cncgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cncgb *CustomerNovelConfigGroupBy) StringsX(ctx context.Context) []string {
	v, err := cncgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cncgb *CustomerNovelConfigGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cncgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customernovelconfig.Label}
	default:
		err = fmt.Errorf("ent: CustomerNovelConfigGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cncgb *CustomerNovelConfigGroupBy) StringX(ctx context.Context) string {
	v, err := cncgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (cncgb *CustomerNovelConfigGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cncgb.fields) > 1 {
		return nil, errors.New("ent: CustomerNovelConfigGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cncgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cncgb *CustomerNovelConfigGroupBy) IntsX(ctx context.Context) []int {
	v, err := cncgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cncgb *CustomerNovelConfigGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cncgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customernovelconfig.Label}
	default:
		err = fmt.Errorf("ent: CustomerNovelConfigGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cncgb *CustomerNovelConfigGroupBy) IntX(ctx context.Context) int {
	v, err := cncgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (cncgb *CustomerNovelConfigGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cncgb.fields) > 1 {
		return nil, errors.New("ent: CustomerNovelConfigGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cncgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cncgb *CustomerNovelConfigGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cncgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cncgb *CustomerNovelConfigGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cncgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customernovelconfig.Label}
	default:
		err = fmt.Errorf("ent: CustomerNovelConfigGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cncgb *CustomerNovelConfigGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cncgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (cncgb *CustomerNovelConfigGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cncgb.fields) > 1 {
		return nil, errors.New("ent: CustomerNovelConfigGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cncgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cncgb *CustomerNovelConfigGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cncgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (cncgb *CustomerNovelConfigGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cncgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customernovelconfig.Label}
	default:
		err = fmt.Errorf("ent: CustomerNovelConfigGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cncgb *CustomerNovelConfigGroupBy) BoolX(ctx context.Context) bool {
	v, err := cncgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cncgb *CustomerNovelConfigGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cncgb.fields {
		if !customernovelconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cncgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cncgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cncgb *CustomerNovelConfigGroupBy) sqlQuery() *sql.Selector {
	selector := cncgb.sql.Select()
	aggregation := make([]string, 0, len(cncgb.fns))
	for _, fn := range cncgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cncgb.fields)+len(cncgb.fns))
		for _, f := range cncgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cncgb.fields...)...)
}

// CustomerNovelConfigSelect is the builder for selecting fields of CustomerNovelConfig entities.
type CustomerNovelConfigSelect struct {
	*CustomerNovelConfigQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cncs *CustomerNovelConfigSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cncs.prepareQuery(ctx); err != nil {
		return err
	}
	cncs.sql = cncs.CustomerNovelConfigQuery.sqlQuery(ctx)
	return cncs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cncs *CustomerNovelConfigSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cncs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (cncs *CustomerNovelConfigSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cncs.fields) > 1 {
		return nil, errors.New("ent: CustomerNovelConfigSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cncs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cncs *CustomerNovelConfigSelect) StringsX(ctx context.Context) []string {
	v, err := cncs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (cncs *CustomerNovelConfigSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cncs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customernovelconfig.Label}
	default:
		err = fmt.Errorf("ent: CustomerNovelConfigSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cncs *CustomerNovelConfigSelect) StringX(ctx context.Context) string {
	v, err := cncs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (cncs *CustomerNovelConfigSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cncs.fields) > 1 {
		return nil, errors.New("ent: CustomerNovelConfigSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cncs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cncs *CustomerNovelConfigSelect) IntsX(ctx context.Context) []int {
	v, err := cncs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (cncs *CustomerNovelConfigSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cncs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customernovelconfig.Label}
	default:
		err = fmt.Errorf("ent: CustomerNovelConfigSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cncs *CustomerNovelConfigSelect) IntX(ctx context.Context) int {
	v, err := cncs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (cncs *CustomerNovelConfigSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cncs.fields) > 1 {
		return nil, errors.New("ent: CustomerNovelConfigSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cncs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cncs *CustomerNovelConfigSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cncs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (cncs *CustomerNovelConfigSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cncs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customernovelconfig.Label}
	default:
		err = fmt.Errorf("ent: CustomerNovelConfigSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cncs *CustomerNovelConfigSelect) Float64X(ctx context.Context) float64 {
	v, err := cncs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (cncs *CustomerNovelConfigSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cncs.fields) > 1 {
		return nil, errors.New("ent: CustomerNovelConfigSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cncs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cncs *CustomerNovelConfigSelect) BoolsX(ctx context.Context) []bool {
	v, err := cncs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (cncs *CustomerNovelConfigSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cncs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{customernovelconfig.Label}
	default:
		err = fmt.Errorf("ent: CustomerNovelConfigSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cncs *CustomerNovelConfigSelect) BoolX(ctx context.Context) bool {
	v, err := cncs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cncs *CustomerNovelConfigSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cncs.sql.Query()
	if err := cncs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
