// Code generated by entc, DO NOT EDIT.

package agreementlog

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OuterAgreementNo applies equality check predicate on the "outerAgreementNo" field. It's identical to OuterAgreementNoEQ.
func OuterAgreementNo(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOuterAgreementNo), v))
	})
}

// OrderId applies equality check predicate on the "orderId" field. It's identical to OrderIdEQ.
func OrderId(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderId), v))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// ChId applies equality check predicate on the "chId" field. It's identical to ChIdEQ.
func ChId(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChId), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// PaymentName applies equality check predicate on the "paymentName" field. It's identical to PaymentNameEQ.
func PaymentName(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentName), v))
	})
}

// PaymentId applies equality check predicate on the "paymentId" field. It's identical to PaymentIdEQ.
func PaymentId(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentId), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// Payment applies equality check predicate on the "payment" field. It's identical to PaymentEQ.
func Payment(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayment), v))
	})
}

// VipType applies equality check predicate on the "vipType" field. It's identical to VipTypeEQ.
func VipType(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipType), v))
	})
}

// Times applies equality check predicate on the "times" field. It's identical to TimesEQ.
func Times(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// CycleDays applies equality check predicate on the "cycleDays" field. It's identical to CycleDaysEQ.
func CycleDays(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCycleDays), v))
	})
}

// NextExecTime applies equality check predicate on the "nextExecTime" field. It's identical to NextExecTimeEQ.
func NextExecTime(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextExecTime), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// OuterAgreementNoEQ applies the EQ predicate on the "outerAgreementNo" field.
func OuterAgreementNoEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoNEQ applies the NEQ predicate on the "outerAgreementNo" field.
func OuterAgreementNoNEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoIn applies the In predicate on the "outerAgreementNo" field.
func OuterAgreementNoIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOuterAgreementNo), v...))
	})
}

// OuterAgreementNoNotIn applies the NotIn predicate on the "outerAgreementNo" field.
func OuterAgreementNoNotIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOuterAgreementNo), v...))
	})
}

// OuterAgreementNoGT applies the GT predicate on the "outerAgreementNo" field.
func OuterAgreementNoGT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoGTE applies the GTE predicate on the "outerAgreementNo" field.
func OuterAgreementNoGTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoLT applies the LT predicate on the "outerAgreementNo" field.
func OuterAgreementNoLT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoLTE applies the LTE predicate on the "outerAgreementNo" field.
func OuterAgreementNoLTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoContains applies the Contains predicate on the "outerAgreementNo" field.
func OuterAgreementNoContains(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoHasPrefix applies the HasPrefix predicate on the "outerAgreementNo" field.
func OuterAgreementNoHasPrefix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoHasSuffix applies the HasSuffix predicate on the "outerAgreementNo" field.
func OuterAgreementNoHasSuffix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoIsNil applies the IsNil predicate on the "outerAgreementNo" field.
func OuterAgreementNoIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOuterAgreementNo)))
	})
}

// OuterAgreementNoNotNil applies the NotNil predicate on the "outerAgreementNo" field.
func OuterAgreementNoNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOuterAgreementNo)))
	})
}

// OuterAgreementNoEqualFold applies the EqualFold predicate on the "outerAgreementNo" field.
func OuterAgreementNoEqualFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOuterAgreementNo), v))
	})
}

// OuterAgreementNoContainsFold applies the ContainsFold predicate on the "outerAgreementNo" field.
func OuterAgreementNoContainsFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOuterAgreementNo), v))
	})
}

// OrderIdEQ applies the EQ predicate on the "orderId" field.
func OrderIdEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderId), v))
	})
}

// OrderIdNEQ applies the NEQ predicate on the "orderId" field.
func OrderIdNEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderId), v))
	})
}

// OrderIdIn applies the In predicate on the "orderId" field.
func OrderIdIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderId), v...))
	})
}

// OrderIdNotIn applies the NotIn predicate on the "orderId" field.
func OrderIdNotIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderId), v...))
	})
}

// OrderIdGT applies the GT predicate on the "orderId" field.
func OrderIdGT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderId), v))
	})
}

// OrderIdGTE applies the GTE predicate on the "orderId" field.
func OrderIdGTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderId), v))
	})
}

// OrderIdLT applies the LT predicate on the "orderId" field.
func OrderIdLT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderId), v))
	})
}

// OrderIdLTE applies the LTE predicate on the "orderId" field.
func OrderIdLTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderId), v))
	})
}

// OrderIdContains applies the Contains predicate on the "orderId" field.
func OrderIdContains(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderId), v))
	})
}

// OrderIdHasPrefix applies the HasPrefix predicate on the "orderId" field.
func OrderIdHasPrefix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderId), v))
	})
}

// OrderIdHasSuffix applies the HasSuffix predicate on the "orderId" field.
func OrderIdHasSuffix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderId), v))
	})
}

// OrderIdIsNil applies the IsNil predicate on the "orderId" field.
func OrderIdIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderId)))
	})
}

// OrderIdNotNil applies the NotNil predicate on the "orderId" field.
func OrderIdNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderId)))
	})
}

// OrderIdEqualFold applies the EqualFold predicate on the "orderId" field.
func OrderIdEqualFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderId), v))
	})
}

// OrderIdContainsFold applies the ContainsFold predicate on the "orderId" field.
func OrderIdContainsFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserId)))
	})
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserId)))
	})
}

// ChIdEQ applies the EQ predicate on the "chId" field.
func ChIdEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChId), v))
	})
}

// ChIdNEQ applies the NEQ predicate on the "chId" field.
func ChIdNEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChId), v))
	})
}

// ChIdIn applies the In predicate on the "chId" field.
func ChIdIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChId), v...))
	})
}

// ChIdNotIn applies the NotIn predicate on the "chId" field.
func ChIdNotIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChId), v...))
	})
}

// ChIdGT applies the GT predicate on the "chId" field.
func ChIdGT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChId), v))
	})
}

// ChIdGTE applies the GTE predicate on the "chId" field.
func ChIdGTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChId), v))
	})
}

// ChIdLT applies the LT predicate on the "chId" field.
func ChIdLT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChId), v))
	})
}

// ChIdLTE applies the LTE predicate on the "chId" field.
func ChIdLTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChId), v))
	})
}

// ChIdIsNil applies the IsNil predicate on the "chId" field.
func ChIdIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChId)))
	})
}

// ChIdNotNil applies the NotNil predicate on the "chId" field.
func ChIdNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChId)))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameIsNil applies the IsNil predicate on the "userName" field.
func UserNameIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserName)))
	})
}

// UserNameNotNil applies the NotNil predicate on the "userName" field.
func UserNameNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserName)))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// PaymentNameEQ applies the EQ predicate on the "paymentName" field.
func PaymentNameEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentName), v))
	})
}

// PaymentNameNEQ applies the NEQ predicate on the "paymentName" field.
func PaymentNameNEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentName), v))
	})
}

// PaymentNameIn applies the In predicate on the "paymentName" field.
func PaymentNameIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentName), v...))
	})
}

// PaymentNameNotIn applies the NotIn predicate on the "paymentName" field.
func PaymentNameNotIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentName), v...))
	})
}

// PaymentNameGT applies the GT predicate on the "paymentName" field.
func PaymentNameGT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentName), v))
	})
}

// PaymentNameGTE applies the GTE predicate on the "paymentName" field.
func PaymentNameGTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentName), v))
	})
}

// PaymentNameLT applies the LT predicate on the "paymentName" field.
func PaymentNameLT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentName), v))
	})
}

// PaymentNameLTE applies the LTE predicate on the "paymentName" field.
func PaymentNameLTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentName), v))
	})
}

// PaymentNameContains applies the Contains predicate on the "paymentName" field.
func PaymentNameContains(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentName), v))
	})
}

// PaymentNameHasPrefix applies the HasPrefix predicate on the "paymentName" field.
func PaymentNameHasPrefix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentName), v))
	})
}

// PaymentNameHasSuffix applies the HasSuffix predicate on the "paymentName" field.
func PaymentNameHasSuffix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentName), v))
	})
}

// PaymentNameIsNil applies the IsNil predicate on the "paymentName" field.
func PaymentNameIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentName)))
	})
}

// PaymentNameNotNil applies the NotNil predicate on the "paymentName" field.
func PaymentNameNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentName)))
	})
}

// PaymentNameEqualFold applies the EqualFold predicate on the "paymentName" field.
func PaymentNameEqualFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentName), v))
	})
}

// PaymentNameContainsFold applies the ContainsFold predicate on the "paymentName" field.
func PaymentNameContainsFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentName), v))
	})
}

// PaymentIdEQ applies the EQ predicate on the "paymentId" field.
func PaymentIdEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentId), v))
	})
}

// PaymentIdNEQ applies the NEQ predicate on the "paymentId" field.
func PaymentIdNEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentId), v))
	})
}

// PaymentIdIn applies the In predicate on the "paymentId" field.
func PaymentIdIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentId), v...))
	})
}

// PaymentIdNotIn applies the NotIn predicate on the "paymentId" field.
func PaymentIdNotIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentId), v...))
	})
}

// PaymentIdGT applies the GT predicate on the "paymentId" field.
func PaymentIdGT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentId), v))
	})
}

// PaymentIdGTE applies the GTE predicate on the "paymentId" field.
func PaymentIdGTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentId), v))
	})
}

// PaymentIdLT applies the LT predicate on the "paymentId" field.
func PaymentIdLT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentId), v))
	})
}

// PaymentIdLTE applies the LTE predicate on the "paymentId" field.
func PaymentIdLTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentId), v))
	})
}

// PaymentIdIsNil applies the IsNil predicate on the "paymentId" field.
func PaymentIdIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentId)))
	})
}

// PaymentIdNotNil applies the NotNil predicate on the "paymentId" field.
func PaymentIdNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentId)))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int32) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int32) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// PaymentEQ applies the EQ predicate on the "payment" field.
func PaymentEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayment), v))
	})
}

// PaymentNEQ applies the NEQ predicate on the "payment" field.
func PaymentNEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayment), v))
	})
}

// PaymentIn applies the In predicate on the "payment" field.
func PaymentIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayment), v...))
	})
}

// PaymentNotIn applies the NotIn predicate on the "payment" field.
func PaymentNotIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayment), v...))
	})
}

// PaymentGT applies the GT predicate on the "payment" field.
func PaymentGT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayment), v))
	})
}

// PaymentGTE applies the GTE predicate on the "payment" field.
func PaymentGTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayment), v))
	})
}

// PaymentLT applies the LT predicate on the "payment" field.
func PaymentLT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayment), v))
	})
}

// PaymentLTE applies the LTE predicate on the "payment" field.
func PaymentLTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayment), v))
	})
}

// PaymentIsNil applies the IsNil predicate on the "payment" field.
func PaymentIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayment)))
	})
}

// PaymentNotNil applies the NotNil predicate on the "payment" field.
func PaymentNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayment)))
	})
}

// AgreementTypeEQ applies the EQ predicate on the "agreementType" field.
func AgreementTypeEQ(v AgreementType) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgreementType), v))
	})
}

// AgreementTypeNEQ applies the NEQ predicate on the "agreementType" field.
func AgreementTypeNEQ(v AgreementType) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgreementType), v))
	})
}

// AgreementTypeIn applies the In predicate on the "agreementType" field.
func AgreementTypeIn(vs ...AgreementType) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgreementType), v...))
	})
}

// AgreementTypeNotIn applies the NotIn predicate on the "agreementType" field.
func AgreementTypeNotIn(vs ...AgreementType) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgreementType), v...))
	})
}

// AgreementTypeIsNil applies the IsNil predicate on the "agreementType" field.
func AgreementTypeIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAgreementType)))
	})
}

// AgreementTypeNotNil applies the NotNil predicate on the "agreementType" field.
func AgreementTypeNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAgreementType)))
	})
}

// VipTypeEQ applies the EQ predicate on the "vipType" field.
func VipTypeEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipType), v))
	})
}

// VipTypeNEQ applies the NEQ predicate on the "vipType" field.
func VipTypeNEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVipType), v))
	})
}

// VipTypeIn applies the In predicate on the "vipType" field.
func VipTypeIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVipType), v...))
	})
}

// VipTypeNotIn applies the NotIn predicate on the "vipType" field.
func VipTypeNotIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVipType), v...))
	})
}

// VipTypeGT applies the GT predicate on the "vipType" field.
func VipTypeGT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVipType), v))
	})
}

// VipTypeGTE applies the GTE predicate on the "vipType" field.
func VipTypeGTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVipType), v))
	})
}

// VipTypeLT applies the LT predicate on the "vipType" field.
func VipTypeLT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVipType), v))
	})
}

// VipTypeLTE applies the LTE predicate on the "vipType" field.
func VipTypeLTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVipType), v))
	})
}

// VipTypeIsNil applies the IsNil predicate on the "vipType" field.
func VipTypeIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVipType)))
	})
}

// VipTypeNotNil applies the NotNil predicate on the "vipType" field.
func VipTypeNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVipType)))
	})
}

// TimesEQ applies the EQ predicate on the "times" field.
func TimesEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// TimesNEQ applies the NEQ predicate on the "times" field.
func TimesNEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimes), v))
	})
}

// TimesIn applies the In predicate on the "times" field.
func TimesIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimes), v...))
	})
}

// TimesNotIn applies the NotIn predicate on the "times" field.
func TimesNotIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimes), v...))
	})
}

// TimesGT applies the GT predicate on the "times" field.
func TimesGT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimes), v))
	})
}

// TimesGTE applies the GTE predicate on the "times" field.
func TimesGTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimes), v))
	})
}

// TimesLT applies the LT predicate on the "times" field.
func TimesLT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimes), v))
	})
}

// TimesLTE applies the LTE predicate on the "times" field.
func TimesLTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimes), v))
	})
}

// TimesIsNil applies the IsNil predicate on the "times" field.
func TimesIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimes)))
	})
}

// TimesNotNil applies the NotNil predicate on the "times" field.
func TimesNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimes)))
	})
}

// CycleDaysEQ applies the EQ predicate on the "cycleDays" field.
func CycleDaysEQ(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCycleDays), v))
	})
}

// CycleDaysNEQ applies the NEQ predicate on the "cycleDays" field.
func CycleDaysNEQ(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCycleDays), v))
	})
}

// CycleDaysIn applies the In predicate on the "cycleDays" field.
func CycleDaysIn(vs ...int32) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCycleDays), v...))
	})
}

// CycleDaysNotIn applies the NotIn predicate on the "cycleDays" field.
func CycleDaysNotIn(vs ...int32) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCycleDays), v...))
	})
}

// CycleDaysGT applies the GT predicate on the "cycleDays" field.
func CycleDaysGT(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCycleDays), v))
	})
}

// CycleDaysGTE applies the GTE predicate on the "cycleDays" field.
func CycleDaysGTE(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCycleDays), v))
	})
}

// CycleDaysLT applies the LT predicate on the "cycleDays" field.
func CycleDaysLT(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCycleDays), v))
	})
}

// CycleDaysLTE applies the LTE predicate on the "cycleDays" field.
func CycleDaysLTE(v int32) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCycleDays), v))
	})
}

// CycleDaysIsNil applies the IsNil predicate on the "cycleDays" field.
func CycleDaysIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCycleDays)))
	})
}

// CycleDaysNotNil applies the NotNil predicate on the "cycleDays" field.
func CycleDaysNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCycleDays)))
	})
}

// NextExecTimeEQ applies the EQ predicate on the "nextExecTime" field.
func NextExecTimeEQ(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextExecTime), v))
	})
}

// NextExecTimeNEQ applies the NEQ predicate on the "nextExecTime" field.
func NextExecTimeNEQ(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNextExecTime), v))
	})
}

// NextExecTimeIn applies the In predicate on the "nextExecTime" field.
func NextExecTimeIn(vs ...time.Time) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNextExecTime), v...))
	})
}

// NextExecTimeNotIn applies the NotIn predicate on the "nextExecTime" field.
func NextExecTimeNotIn(vs ...time.Time) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNextExecTime), v...))
	})
}

// NextExecTimeGT applies the GT predicate on the "nextExecTime" field.
func NextExecTimeGT(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNextExecTime), v))
	})
}

// NextExecTimeGTE applies the GTE predicate on the "nextExecTime" field.
func NextExecTimeGTE(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNextExecTime), v))
	})
}

// NextExecTimeLT applies the LT predicate on the "nextExecTime" field.
func NextExecTimeLT(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNextExecTime), v))
	})
}

// NextExecTimeLTE applies the LTE predicate on the "nextExecTime" field.
func NextExecTimeLTE(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNextExecTime), v))
	})
}

// NextExecTimeIsNil applies the IsNil predicate on the "nextExecTime" field.
func NextExecTimeIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNextExecTime)))
	})
}

// NextExecTimeNotNil applies the NotNil predicate on the "nextExecTime" field.
func NextExecTimeNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNextExecTime)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.AgreementLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AgreementLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.PayOrder) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AgreementLog) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AgreementLog) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AgreementLog) predicate.AgreementLog {
	return predicate.AgreementLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
