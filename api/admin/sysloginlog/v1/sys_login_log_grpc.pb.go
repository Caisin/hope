// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/sysloginlog/v1/sys_login_log.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysLoginLogClient is the client API for SysLoginLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysLoginLogClient interface {
	// 分页查询SysLoginLog
	GetSysLoginLogPage(ctx context.Context, in *SysLoginLogPageReq, opts ...grpc.CallOption) (*SysLoginLogPageReply, error)
	// 获取SysLoginLog
	GetSysLoginLog(ctx context.Context, in *SysLoginLogReq, opts ...grpc.CallOption) (*SysLoginLogReply, error)
	// 更新SysLoginLog
	UpdateSysLoginLog(ctx context.Context, in *SysLoginLogUpdateReq, opts ...grpc.CallOption) (*SysLoginLogUpdateReply, error)
	// 创建SysLoginLog
	CreateSysLoginLog(ctx context.Context, in *SysLoginLogCreateReq, opts ...grpc.CallOption) (*SysLoginLogCreateReply, error)
	// 删除SysLoginLog
	DeleteSysLoginLog(ctx context.Context, in *SysLoginLogDeleteReq, opts ...grpc.CallOption) (*SysLoginLogDeleteReply, error)
	// 批量删除SysLoginLog
	BatchDeleteSysLoginLog(ctx context.Context, in *SysLoginLogBatchDeleteReq, opts ...grpc.CallOption) (*SysLoginLogDeleteReply, error)
}

type sysLoginLogClient struct {
	cc grpc.ClientConnInterface
}

func NewSysLoginLogClient(cc grpc.ClientConnInterface) SysLoginLogClient {
	return &sysLoginLogClient{cc}
}

func (c *sysLoginLogClient) GetSysLoginLogPage(ctx context.Context, in *SysLoginLogPageReq, opts ...grpc.CallOption) (*SysLoginLogPageReply, error) {
	out := new(SysLoginLogPageReply)
	err := c.cc.Invoke(ctx, "/sysloginlog.v1.SysLoginLog/GetSysLoginLogPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoginLogClient) GetSysLoginLog(ctx context.Context, in *SysLoginLogReq, opts ...grpc.CallOption) (*SysLoginLogReply, error) {
	out := new(SysLoginLogReply)
	err := c.cc.Invoke(ctx, "/sysloginlog.v1.SysLoginLog/GetSysLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoginLogClient) UpdateSysLoginLog(ctx context.Context, in *SysLoginLogUpdateReq, opts ...grpc.CallOption) (*SysLoginLogUpdateReply, error) {
	out := new(SysLoginLogUpdateReply)
	err := c.cc.Invoke(ctx, "/sysloginlog.v1.SysLoginLog/UpdateSysLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoginLogClient) CreateSysLoginLog(ctx context.Context, in *SysLoginLogCreateReq, opts ...grpc.CallOption) (*SysLoginLogCreateReply, error) {
	out := new(SysLoginLogCreateReply)
	err := c.cc.Invoke(ctx, "/sysloginlog.v1.SysLoginLog/CreateSysLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoginLogClient) DeleteSysLoginLog(ctx context.Context, in *SysLoginLogDeleteReq, opts ...grpc.CallOption) (*SysLoginLogDeleteReply, error) {
	out := new(SysLoginLogDeleteReply)
	err := c.cc.Invoke(ctx, "/sysloginlog.v1.SysLoginLog/DeleteSysLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysLoginLogClient) BatchDeleteSysLoginLog(ctx context.Context, in *SysLoginLogBatchDeleteReq, opts ...grpc.CallOption) (*SysLoginLogDeleteReply, error) {
	out := new(SysLoginLogDeleteReply)
	err := c.cc.Invoke(ctx, "/sysloginlog.v1.SysLoginLog/BatchDeleteSysLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysLoginLogServer is the server API for SysLoginLog service.
// All implementations must embed UnimplementedSysLoginLogServer
// for forward compatibility
type SysLoginLogServer interface {
	// 分页查询SysLoginLog
	GetSysLoginLogPage(context.Context, *SysLoginLogPageReq) (*SysLoginLogPageReply, error)
	// 获取SysLoginLog
	GetSysLoginLog(context.Context, *SysLoginLogReq) (*SysLoginLogReply, error)
	// 更新SysLoginLog
	UpdateSysLoginLog(context.Context, *SysLoginLogUpdateReq) (*SysLoginLogUpdateReply, error)
	// 创建SysLoginLog
	CreateSysLoginLog(context.Context, *SysLoginLogCreateReq) (*SysLoginLogCreateReply, error)
	// 删除SysLoginLog
	DeleteSysLoginLog(context.Context, *SysLoginLogDeleteReq) (*SysLoginLogDeleteReply, error)
	// 批量删除SysLoginLog
	BatchDeleteSysLoginLog(context.Context, *SysLoginLogBatchDeleteReq) (*SysLoginLogDeleteReply, error)
	mustEmbedUnimplementedSysLoginLogServer()
}

// UnimplementedSysLoginLogServer must be embedded to have forward compatible implementations.
type UnimplementedSysLoginLogServer struct {
}

func (UnimplementedSysLoginLogServer) GetSysLoginLogPage(context.Context, *SysLoginLogPageReq) (*SysLoginLogPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysLoginLogPage not implemented")
}
func (UnimplementedSysLoginLogServer) GetSysLoginLog(context.Context, *SysLoginLogReq) (*SysLoginLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysLoginLog not implemented")
}
func (UnimplementedSysLoginLogServer) UpdateSysLoginLog(context.Context, *SysLoginLogUpdateReq) (*SysLoginLogUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysLoginLog not implemented")
}
func (UnimplementedSysLoginLogServer) CreateSysLoginLog(context.Context, *SysLoginLogCreateReq) (*SysLoginLogCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysLoginLog not implemented")
}
func (UnimplementedSysLoginLogServer) DeleteSysLoginLog(context.Context, *SysLoginLogDeleteReq) (*SysLoginLogDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysLoginLog not implemented")
}
func (UnimplementedSysLoginLogServer) BatchDeleteSysLoginLog(context.Context, *SysLoginLogBatchDeleteReq) (*SysLoginLogDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysLoginLog not implemented")
}
func (UnimplementedSysLoginLogServer) mustEmbedUnimplementedSysLoginLogServer() {}

// UnsafeSysLoginLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysLoginLogServer will
// result in compilation errors.
type UnsafeSysLoginLogServer interface {
	mustEmbedUnimplementedSysLoginLogServer()
}

func RegisterSysLoginLogServer(s grpc.ServiceRegistrar, srv SysLoginLogServer) {
	s.RegisterService(&SysLoginLog_ServiceDesc, srv)
}

func _SysLoginLog_GetSysLoginLogPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginLogPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoginLogServer).GetSysLoginLogPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysloginlog.v1.SysLoginLog/GetSysLoginLogPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoginLogServer).GetSysLoginLogPage(ctx, req.(*SysLoginLogPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoginLog_GetSysLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoginLogServer).GetSysLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysloginlog.v1.SysLoginLog/GetSysLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoginLogServer).GetSysLoginLog(ctx, req.(*SysLoginLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoginLog_UpdateSysLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginLogUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoginLogServer).UpdateSysLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysloginlog.v1.SysLoginLog/UpdateSysLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoginLogServer).UpdateSysLoginLog(ctx, req.(*SysLoginLogUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoginLog_CreateSysLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginLogCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoginLogServer).CreateSysLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysloginlog.v1.SysLoginLog/CreateSysLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoginLogServer).CreateSysLoginLog(ctx, req.(*SysLoginLogCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoginLog_DeleteSysLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginLogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoginLogServer).DeleteSysLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysloginlog.v1.SysLoginLog/DeleteSysLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoginLogServer).DeleteSysLoginLog(ctx, req.(*SysLoginLogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysLoginLog_BatchDeleteSysLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginLogBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysLoginLogServer).BatchDeleteSysLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysloginlog.v1.SysLoginLog/BatchDeleteSysLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysLoginLogServer).BatchDeleteSysLoginLog(ctx, req.(*SysLoginLogBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysLoginLog_ServiceDesc is the grpc.ServiceDesc for SysLoginLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysLoginLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysloginlog.v1.SysLoginLog",
	HandlerType: (*SysLoginLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysLoginLogPage",
			Handler:    _SysLoginLog_GetSysLoginLogPage_Handler,
		},
		{
			MethodName: "GetSysLoginLog",
			Handler:    _SysLoginLog_GetSysLoginLog_Handler,
		},
		{
			MethodName: "UpdateSysLoginLog",
			Handler:    _SysLoginLog_UpdateSysLoginLog_Handler,
		},
		{
			MethodName: "CreateSysLoginLog",
			Handler:    _SysLoginLog_CreateSysLoginLog_Handler,
		},
		{
			MethodName: "DeleteSysLoginLog",
			Handler:    _SysLoginLog_DeleteSysLoginLog_Handler,
		},
		{
			MethodName: "BatchDeleteSysLoginLog",
			Handler:    _SysLoginLog_BatchDeleteSysLoginLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/sysloginlog/v1/sys_login_log.proto",
}
