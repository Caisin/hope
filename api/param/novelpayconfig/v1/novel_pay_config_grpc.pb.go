// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/param/novelpayconfig/v1/novel_pay_config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelPayConfigClient is the client API for NovelPayConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelPayConfigClient interface {
	// 分页查询NovelPayConfig
	GetNovelPayConfigPage(ctx context.Context, in *NovelPayConfigPageReq, opts ...grpc.CallOption) (*NovelPayConfigPageReply, error)
	// 获取NovelPayConfig
	GetNovelPayConfig(ctx context.Context, in *NovelPayConfigReq, opts ...grpc.CallOption) (*NovelPayConfigReply, error)
	// 更新NovelPayConfig
	UpdateNovelPayConfig(ctx context.Context, in *NovelPayConfigUpdateReq, opts ...grpc.CallOption) (*NovelPayConfigUpdateReply, error)
	// 创建NovelPayConfig
	CreateNovelPayConfig(ctx context.Context, in *NovelPayConfigCreateReq, opts ...grpc.CallOption) (*NovelPayConfigCreateReply, error)
	// 删除NovelPayConfig
	DeleteNovelPayConfig(ctx context.Context, in *NovelPayConfigDeleteReq, opts ...grpc.CallOption) (*NovelPayConfigDeleteReply, error)
	// 批量删除NovelPayConfig
	BatchDeleteNovelPayConfig(ctx context.Context, in *NovelPayConfigBatchDeleteReq, opts ...grpc.CallOption) (*NovelPayConfigDeleteReply, error)
}

type novelPayConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelPayConfigClient(cc grpc.ClientConnInterface) NovelPayConfigClient {
	return &novelPayConfigClient{cc}
}

func (c *novelPayConfigClient) GetNovelPayConfigPage(ctx context.Context, in *NovelPayConfigPageReq, opts ...grpc.CallOption) (*NovelPayConfigPageReply, error) {
	out := new(NovelPayConfigPageReply)
	err := c.cc.Invoke(ctx, "/novelpayconfig.v1.NovelPayConfig/GetNovelPayConfigPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelPayConfigClient) GetNovelPayConfig(ctx context.Context, in *NovelPayConfigReq, opts ...grpc.CallOption) (*NovelPayConfigReply, error) {
	out := new(NovelPayConfigReply)
	err := c.cc.Invoke(ctx, "/novelpayconfig.v1.NovelPayConfig/GetNovelPayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelPayConfigClient) UpdateNovelPayConfig(ctx context.Context, in *NovelPayConfigUpdateReq, opts ...grpc.CallOption) (*NovelPayConfigUpdateReply, error) {
	out := new(NovelPayConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/novelpayconfig.v1.NovelPayConfig/UpdateNovelPayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelPayConfigClient) CreateNovelPayConfig(ctx context.Context, in *NovelPayConfigCreateReq, opts ...grpc.CallOption) (*NovelPayConfigCreateReply, error) {
	out := new(NovelPayConfigCreateReply)
	err := c.cc.Invoke(ctx, "/novelpayconfig.v1.NovelPayConfig/CreateNovelPayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelPayConfigClient) DeleteNovelPayConfig(ctx context.Context, in *NovelPayConfigDeleteReq, opts ...grpc.CallOption) (*NovelPayConfigDeleteReply, error) {
	out := new(NovelPayConfigDeleteReply)
	err := c.cc.Invoke(ctx, "/novelpayconfig.v1.NovelPayConfig/DeleteNovelPayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelPayConfigClient) BatchDeleteNovelPayConfig(ctx context.Context, in *NovelPayConfigBatchDeleteReq, opts ...grpc.CallOption) (*NovelPayConfigDeleteReply, error) {
	out := new(NovelPayConfigDeleteReply)
	err := c.cc.Invoke(ctx, "/novelpayconfig.v1.NovelPayConfig/BatchDeleteNovelPayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelPayConfigServer is the server API for NovelPayConfig service.
// All implementations must embed UnimplementedNovelPayConfigServer
// for forward compatibility
type NovelPayConfigServer interface {
	// 分页查询NovelPayConfig
	GetNovelPayConfigPage(context.Context, *NovelPayConfigPageReq) (*NovelPayConfigPageReply, error)
	// 获取NovelPayConfig
	GetNovelPayConfig(context.Context, *NovelPayConfigReq) (*NovelPayConfigReply, error)
	// 更新NovelPayConfig
	UpdateNovelPayConfig(context.Context, *NovelPayConfigUpdateReq) (*NovelPayConfigUpdateReply, error)
	// 创建NovelPayConfig
	CreateNovelPayConfig(context.Context, *NovelPayConfigCreateReq) (*NovelPayConfigCreateReply, error)
	// 删除NovelPayConfig
	DeleteNovelPayConfig(context.Context, *NovelPayConfigDeleteReq) (*NovelPayConfigDeleteReply, error)
	// 批量删除NovelPayConfig
	BatchDeleteNovelPayConfig(context.Context, *NovelPayConfigBatchDeleteReq) (*NovelPayConfigDeleteReply, error)
	mustEmbedUnimplementedNovelPayConfigServer()
}

// UnimplementedNovelPayConfigServer must be embedded to have forward compatible implementations.
type UnimplementedNovelPayConfigServer struct {
}

func (UnimplementedNovelPayConfigServer) GetNovelPayConfigPage(context.Context, *NovelPayConfigPageReq) (*NovelPayConfigPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelPayConfigPage not implemented")
}
func (UnimplementedNovelPayConfigServer) GetNovelPayConfig(context.Context, *NovelPayConfigReq) (*NovelPayConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelPayConfig not implemented")
}
func (UnimplementedNovelPayConfigServer) UpdateNovelPayConfig(context.Context, *NovelPayConfigUpdateReq) (*NovelPayConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNovelPayConfig not implemented")
}
func (UnimplementedNovelPayConfigServer) CreateNovelPayConfig(context.Context, *NovelPayConfigCreateReq) (*NovelPayConfigCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNovelPayConfig not implemented")
}
func (UnimplementedNovelPayConfigServer) DeleteNovelPayConfig(context.Context, *NovelPayConfigDeleteReq) (*NovelPayConfigDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNovelPayConfig not implemented")
}
func (UnimplementedNovelPayConfigServer) BatchDeleteNovelPayConfig(context.Context, *NovelPayConfigBatchDeleteReq) (*NovelPayConfigDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNovelPayConfig not implemented")
}
func (UnimplementedNovelPayConfigServer) mustEmbedUnimplementedNovelPayConfigServer() {}

// UnsafeNovelPayConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelPayConfigServer will
// result in compilation errors.
type UnsafeNovelPayConfigServer interface {
	mustEmbedUnimplementedNovelPayConfigServer()
}

func RegisterNovelPayConfigServer(s grpc.ServiceRegistrar, srv NovelPayConfigServer) {
	s.RegisterService(&NovelPayConfig_ServiceDesc, srv)
}

func _NovelPayConfig_GetNovelPayConfigPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelPayConfigPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelPayConfigServer).GetNovelPayConfigPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelpayconfig.v1.NovelPayConfig/GetNovelPayConfigPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelPayConfigServer).GetNovelPayConfigPage(ctx, req.(*NovelPayConfigPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelPayConfig_GetNovelPayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelPayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelPayConfigServer).GetNovelPayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelpayconfig.v1.NovelPayConfig/GetNovelPayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelPayConfigServer).GetNovelPayConfig(ctx, req.(*NovelPayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelPayConfig_UpdateNovelPayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelPayConfigUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelPayConfigServer).UpdateNovelPayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelpayconfig.v1.NovelPayConfig/UpdateNovelPayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelPayConfigServer).UpdateNovelPayConfig(ctx, req.(*NovelPayConfigUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelPayConfig_CreateNovelPayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelPayConfigCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelPayConfigServer).CreateNovelPayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelpayconfig.v1.NovelPayConfig/CreateNovelPayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelPayConfigServer).CreateNovelPayConfig(ctx, req.(*NovelPayConfigCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelPayConfig_DeleteNovelPayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelPayConfigDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelPayConfigServer).DeleteNovelPayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelpayconfig.v1.NovelPayConfig/DeleteNovelPayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelPayConfigServer).DeleteNovelPayConfig(ctx, req.(*NovelPayConfigDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelPayConfig_BatchDeleteNovelPayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelPayConfigBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelPayConfigServer).BatchDeleteNovelPayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelpayconfig.v1.NovelPayConfig/BatchDeleteNovelPayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelPayConfigServer).BatchDeleteNovelPayConfig(ctx, req.(*NovelPayConfigBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelPayConfig_ServiceDesc is the grpc.ServiceDesc for NovelPayConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelPayConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novelpayconfig.v1.NovelPayConfig",
	HandlerType: (*NovelPayConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNovelPayConfigPage",
			Handler:    _NovelPayConfig_GetNovelPayConfigPage_Handler,
		},
		{
			MethodName: "GetNovelPayConfig",
			Handler:    _NovelPayConfig_GetNovelPayConfig_Handler,
		},
		{
			MethodName: "UpdateNovelPayConfig",
			Handler:    _NovelPayConfig_UpdateNovelPayConfig_Handler,
		},
		{
			MethodName: "CreateNovelPayConfig",
			Handler:    _NovelPayConfig_CreateNovelPayConfig_Handler,
		},
		{
			MethodName: "DeleteNovelPayConfig",
			Handler:    _NovelPayConfig_DeleteNovelPayConfig_Handler,
		},
		{
			MethodName: "BatchDeleteNovelPayConfig",
			Handler:    _NovelPayConfig_BatchDeleteNovelPayConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/param/novelpayconfig/v1/novel_pay_config.proto",
}
