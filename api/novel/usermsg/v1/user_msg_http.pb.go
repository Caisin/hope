// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UserMsgHTTPServer interface {
	BatchDeleteUserMsg(context.Context, *UserMsgBatchDeleteReq) (*UserMsgDeleteReply, error)
	CreateUserMsg(context.Context, *UserMsgCreateReq) (*UserMsgCreateReply, error)
	DeleteUserMsg(context.Context, *UserMsgDeleteReq) (*UserMsgDeleteReply, error)
	GetPageUserMsg(context.Context, *UserMsgPageReq) (*UserMsgPageReply, error)
	GetUserMsg(context.Context, *UserMsgReq) (*UserMsgReply, error)
	UpdateUserMsg(context.Context, *UserMsgUpdateReq) (*UserMsgUpdateReply, error)
}

func RegisterUserMsgHTTPServer(s *http.Server, srv UserMsgHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/user/msg/page", _UserMsg_GetPageUserMsg0_HTTP_Handler(srv))
	r.GET("/v1/user/msg/{id}", _UserMsg_GetUserMsg0_HTTP_Handler(srv))
	r.PUT("/v1/user/msg/{id}", _UserMsg_UpdateUserMsg0_HTTP_Handler(srv))
	r.POST("/v1/user/msg", _UserMsg_CreateUserMsg0_HTTP_Handler(srv))
	r.DELETE("/v1/user/msg/{id}", _UserMsg_DeleteUserMsg0_HTTP_Handler(srv))
	r.DELETE("/v1/user/msg", _UserMsg_BatchDeleteUserMsg0_HTTP_Handler(srv))
}

func _UserMsg_GetPageUserMsg0_HTTP_Handler(srv UserMsgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMsgPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/usermsg.v1.UserMsg/GetPageUserMsg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageUserMsg(ctx, req.(*UserMsgPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMsgPageReply)
		return ctx.Result(200, reply)
	}
}

func _UserMsg_GetUserMsg0_HTTP_Handler(srv UserMsgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMsgReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/usermsg.v1.UserMsg/GetUserMsg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserMsg(ctx, req.(*UserMsgReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMsgReply)
		return ctx.Result(200, reply)
	}
}

func _UserMsg_UpdateUserMsg0_HTTP_Handler(srv UserMsgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMsgUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/usermsg.v1.UserMsg/UpdateUserMsg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserMsg(ctx, req.(*UserMsgUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMsgUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _UserMsg_CreateUserMsg0_HTTP_Handler(srv UserMsgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMsgCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/usermsg.v1.UserMsg/CreateUserMsg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserMsg(ctx, req.(*UserMsgCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMsgCreateReply)
		return ctx.Result(200, reply)
	}
}

func _UserMsg_DeleteUserMsg0_HTTP_Handler(srv UserMsgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMsgDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/usermsg.v1.UserMsg/DeleteUserMsg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserMsg(ctx, req.(*UserMsgDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMsgDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _UserMsg_BatchDeleteUserMsg0_HTTP_Handler(srv UserMsgHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMsgBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/usermsg.v1.UserMsg/BatchDeleteUserMsg")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteUserMsg(ctx, req.(*UserMsgBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserMsgDeleteReply)
		return ctx.Result(200, reply)
	}
}

type UserMsgHTTPClient interface {
	BatchDeleteUserMsg(ctx context.Context, req *UserMsgBatchDeleteReq, opts ...http.CallOption) (rsp *UserMsgDeleteReply, err error)
	CreateUserMsg(ctx context.Context, req *UserMsgCreateReq, opts ...http.CallOption) (rsp *UserMsgCreateReply, err error)
	DeleteUserMsg(ctx context.Context, req *UserMsgDeleteReq, opts ...http.CallOption) (rsp *UserMsgDeleteReply, err error)
	GetPageUserMsg(ctx context.Context, req *UserMsgPageReq, opts ...http.CallOption) (rsp *UserMsgPageReply, err error)
	GetUserMsg(ctx context.Context, req *UserMsgReq, opts ...http.CallOption) (rsp *UserMsgReply, err error)
	UpdateUserMsg(ctx context.Context, req *UserMsgUpdateReq, opts ...http.CallOption) (rsp *UserMsgUpdateReply, err error)
}

type UserMsgHTTPClientImpl struct {
	cc *http.Client
}

func NewUserMsgHTTPClient(client *http.Client) UserMsgHTTPClient {
	return &UserMsgHTTPClientImpl{client}
}

func (c *UserMsgHTTPClientImpl) BatchDeleteUserMsg(ctx context.Context, in *UserMsgBatchDeleteReq, opts ...http.CallOption) (*UserMsgDeleteReply, error) {
	var out UserMsgDeleteReply
	pattern := "/v1/user/msg"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/usermsg.v1.UserMsg/BatchDeleteUserMsg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserMsgHTTPClientImpl) CreateUserMsg(ctx context.Context, in *UserMsgCreateReq, opts ...http.CallOption) (*UserMsgCreateReply, error) {
	var out UserMsgCreateReply
	pattern := "/v1/user/msg"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/usermsg.v1.UserMsg/CreateUserMsg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserMsgHTTPClientImpl) DeleteUserMsg(ctx context.Context, in *UserMsgDeleteReq, opts ...http.CallOption) (*UserMsgDeleteReply, error) {
	var out UserMsgDeleteReply
	pattern := "/v1/user/msg/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/usermsg.v1.UserMsg/DeleteUserMsg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserMsgHTTPClientImpl) GetPageUserMsg(ctx context.Context, in *UserMsgPageReq, opts ...http.CallOption) (*UserMsgPageReply, error) {
	var out UserMsgPageReply
	pattern := "/v1/user/msg/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/usermsg.v1.UserMsg/GetPageUserMsg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserMsgHTTPClientImpl) GetUserMsg(ctx context.Context, in *UserMsgReq, opts ...http.CallOption) (*UserMsgReply, error) {
	var out UserMsgReply
	pattern := "/v1/user/msg/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/usermsg.v1.UserMsg/GetUserMsg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserMsgHTTPClientImpl) UpdateUserMsg(ctx context.Context, in *UserMsgUpdateReq, opts ...http.CallOption) (*UserMsgUpdateReply, error) {
	var out UserMsgUpdateReply
	pattern := "/v1/user/msg/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/usermsg.v1.UserMsg/UpdateUserMsg"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
