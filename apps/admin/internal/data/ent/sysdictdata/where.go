// Code generated by entc, DO NOT EDIT.

package sysdictdata

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TypeId applies equality check predicate on the "typeId" field. It's identical to TypeIdEQ.
func TypeId(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeId), v))
	})
}

// TypeCode applies equality check predicate on the "typeCode" field. It's identical to TypeCodeEQ.
func TypeCode(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeCode), v))
	})
}

// DictSort applies equality check predicate on the "dictSort" field. It's identical to DictSortEQ.
func DictSort(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictSort), v))
	})
}

// DictLabel applies equality check predicate on the "dictLabel" field. It's identical to DictLabelEQ.
func DictLabel(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictLabel), v))
	})
}

// DictValue applies equality check predicate on the "dictValue" field. It's identical to DictValueEQ.
func DictValue(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictValue), v))
	})
}

// IsDefault applies equality check predicate on the "isDefault" field. It's identical to IsDefaultEQ.
func IsDefault(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDefault), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Default applies equality check predicate on the "default" field. It's identical to DefaultEQ.
func Default(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefault), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TypeIdEQ applies the EQ predicate on the "typeId" field.
func TypeIdEQ(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeId), v))
	})
}

// TypeIdNEQ applies the NEQ predicate on the "typeId" field.
func TypeIdNEQ(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeId), v))
	})
}

// TypeIdIn applies the In predicate on the "typeId" field.
func TypeIdIn(vs ...int64) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeId), v...))
	})
}

// TypeIdNotIn applies the NotIn predicate on the "typeId" field.
func TypeIdNotIn(vs ...int64) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeId), v...))
	})
}

// TypeCodeEQ applies the EQ predicate on the "typeCode" field.
func TypeCodeEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeCode), v))
	})
}

// TypeCodeNEQ applies the NEQ predicate on the "typeCode" field.
func TypeCodeNEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeCode), v))
	})
}

// TypeCodeIn applies the In predicate on the "typeCode" field.
func TypeCodeIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeCode), v...))
	})
}

// TypeCodeNotIn applies the NotIn predicate on the "typeCode" field.
func TypeCodeNotIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeCode), v...))
	})
}

// TypeCodeGT applies the GT predicate on the "typeCode" field.
func TypeCodeGT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeCode), v))
	})
}

// TypeCodeGTE applies the GTE predicate on the "typeCode" field.
func TypeCodeGTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeCode), v))
	})
}

// TypeCodeLT applies the LT predicate on the "typeCode" field.
func TypeCodeLT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeCode), v))
	})
}

// TypeCodeLTE applies the LTE predicate on the "typeCode" field.
func TypeCodeLTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeCode), v))
	})
}

// TypeCodeContains applies the Contains predicate on the "typeCode" field.
func TypeCodeContains(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTypeCode), v))
	})
}

// TypeCodeHasPrefix applies the HasPrefix predicate on the "typeCode" field.
func TypeCodeHasPrefix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTypeCode), v))
	})
}

// TypeCodeHasSuffix applies the HasSuffix predicate on the "typeCode" field.
func TypeCodeHasSuffix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTypeCode), v))
	})
}

// TypeCodeEqualFold applies the EqualFold predicate on the "typeCode" field.
func TypeCodeEqualFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTypeCode), v))
	})
}

// TypeCodeContainsFold applies the ContainsFold predicate on the "typeCode" field.
func TypeCodeContainsFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTypeCode), v))
	})
}

// DictSortEQ applies the EQ predicate on the "dictSort" field.
func DictSortEQ(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictSort), v))
	})
}

// DictSortNEQ applies the NEQ predicate on the "dictSort" field.
func DictSortNEQ(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDictSort), v))
	})
}

// DictSortIn applies the In predicate on the "dictSort" field.
func DictSortIn(vs ...int32) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDictSort), v...))
	})
}

// DictSortNotIn applies the NotIn predicate on the "dictSort" field.
func DictSortNotIn(vs ...int32) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDictSort), v...))
	})
}

// DictSortGT applies the GT predicate on the "dictSort" field.
func DictSortGT(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDictSort), v))
	})
}

// DictSortGTE applies the GTE predicate on the "dictSort" field.
func DictSortGTE(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDictSort), v))
	})
}

// DictSortLT applies the LT predicate on the "dictSort" field.
func DictSortLT(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDictSort), v))
	})
}

// DictSortLTE applies the LTE predicate on the "dictSort" field.
func DictSortLTE(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDictSort), v))
	})
}

// DictSortIsNil applies the IsNil predicate on the "dictSort" field.
func DictSortIsNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDictSort)))
	})
}

// DictSortNotNil applies the NotNil predicate on the "dictSort" field.
func DictSortNotNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDictSort)))
	})
}

// DictLabelEQ applies the EQ predicate on the "dictLabel" field.
func DictLabelEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictLabel), v))
	})
}

// DictLabelNEQ applies the NEQ predicate on the "dictLabel" field.
func DictLabelNEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDictLabel), v))
	})
}

// DictLabelIn applies the In predicate on the "dictLabel" field.
func DictLabelIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDictLabel), v...))
	})
}

// DictLabelNotIn applies the NotIn predicate on the "dictLabel" field.
func DictLabelNotIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDictLabel), v...))
	})
}

// DictLabelGT applies the GT predicate on the "dictLabel" field.
func DictLabelGT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDictLabel), v))
	})
}

// DictLabelGTE applies the GTE predicate on the "dictLabel" field.
func DictLabelGTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDictLabel), v))
	})
}

// DictLabelLT applies the LT predicate on the "dictLabel" field.
func DictLabelLT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDictLabel), v))
	})
}

// DictLabelLTE applies the LTE predicate on the "dictLabel" field.
func DictLabelLTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDictLabel), v))
	})
}

// DictLabelContains applies the Contains predicate on the "dictLabel" field.
func DictLabelContains(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDictLabel), v))
	})
}

// DictLabelHasPrefix applies the HasPrefix predicate on the "dictLabel" field.
func DictLabelHasPrefix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDictLabel), v))
	})
}

// DictLabelHasSuffix applies the HasSuffix predicate on the "dictLabel" field.
func DictLabelHasSuffix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDictLabel), v))
	})
}

// DictLabelIsNil applies the IsNil predicate on the "dictLabel" field.
func DictLabelIsNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDictLabel)))
	})
}

// DictLabelNotNil applies the NotNil predicate on the "dictLabel" field.
func DictLabelNotNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDictLabel)))
	})
}

// DictLabelEqualFold applies the EqualFold predicate on the "dictLabel" field.
func DictLabelEqualFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDictLabel), v))
	})
}

// DictLabelContainsFold applies the ContainsFold predicate on the "dictLabel" field.
func DictLabelContainsFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDictLabel), v))
	})
}

// DictValueEQ applies the EQ predicate on the "dictValue" field.
func DictValueEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictValue), v))
	})
}

// DictValueNEQ applies the NEQ predicate on the "dictValue" field.
func DictValueNEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDictValue), v))
	})
}

// DictValueIn applies the In predicate on the "dictValue" field.
func DictValueIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDictValue), v...))
	})
}

// DictValueNotIn applies the NotIn predicate on the "dictValue" field.
func DictValueNotIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDictValue), v...))
	})
}

// DictValueGT applies the GT predicate on the "dictValue" field.
func DictValueGT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDictValue), v))
	})
}

// DictValueGTE applies the GTE predicate on the "dictValue" field.
func DictValueGTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDictValue), v))
	})
}

// DictValueLT applies the LT predicate on the "dictValue" field.
func DictValueLT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDictValue), v))
	})
}

// DictValueLTE applies the LTE predicate on the "dictValue" field.
func DictValueLTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDictValue), v))
	})
}

// DictValueContains applies the Contains predicate on the "dictValue" field.
func DictValueContains(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDictValue), v))
	})
}

// DictValueHasPrefix applies the HasPrefix predicate on the "dictValue" field.
func DictValueHasPrefix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDictValue), v))
	})
}

// DictValueHasSuffix applies the HasSuffix predicate on the "dictValue" field.
func DictValueHasSuffix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDictValue), v))
	})
}

// DictValueIsNil applies the IsNil predicate on the "dictValue" field.
func DictValueIsNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDictValue)))
	})
}

// DictValueNotNil applies the NotNil predicate on the "dictValue" field.
func DictValueNotNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDictValue)))
	})
}

// DictValueEqualFold applies the EqualFold predicate on the "dictValue" field.
func DictValueEqualFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDictValue), v))
	})
}

// DictValueContainsFold applies the ContainsFold predicate on the "dictValue" field.
func DictValueContainsFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDictValue), v))
	})
}

// IsDefaultEQ applies the EQ predicate on the "isDefault" field.
func IsDefaultEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDefault), v))
	})
}

// IsDefaultNEQ applies the NEQ predicate on the "isDefault" field.
func IsDefaultNEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDefault), v))
	})
}

// IsDefaultIn applies the In predicate on the "isDefault" field.
func IsDefaultIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDefault), v...))
	})
}

// IsDefaultNotIn applies the NotIn predicate on the "isDefault" field.
func IsDefaultNotIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDefault), v...))
	})
}

// IsDefaultGT applies the GT predicate on the "isDefault" field.
func IsDefaultGT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDefault), v))
	})
}

// IsDefaultGTE applies the GTE predicate on the "isDefault" field.
func IsDefaultGTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDefault), v))
	})
}

// IsDefaultLT applies the LT predicate on the "isDefault" field.
func IsDefaultLT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDefault), v))
	})
}

// IsDefaultLTE applies the LTE predicate on the "isDefault" field.
func IsDefaultLTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDefault), v))
	})
}

// IsDefaultContains applies the Contains predicate on the "isDefault" field.
func IsDefaultContains(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsDefault), v))
	})
}

// IsDefaultHasPrefix applies the HasPrefix predicate on the "isDefault" field.
func IsDefaultHasPrefix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsDefault), v))
	})
}

// IsDefaultHasSuffix applies the HasSuffix predicate on the "isDefault" field.
func IsDefaultHasSuffix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsDefault), v))
	})
}

// IsDefaultIsNil applies the IsNil predicate on the "isDefault" field.
func IsDefaultIsNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDefault)))
	})
}

// IsDefaultNotNil applies the NotNil predicate on the "isDefault" field.
func IsDefaultNotNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDefault)))
	})
}

// IsDefaultEqualFold applies the EqualFold predicate on the "isDefault" field.
func IsDefaultEqualFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsDefault), v))
	})
}

// IsDefaultContainsFold applies the ContainsFold predicate on the "isDefault" field.
func IsDefaultContainsFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsDefault), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// DefaultEQ applies the EQ predicate on the "default" field.
func DefaultEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefault), v))
	})
}

// DefaultNEQ applies the NEQ predicate on the "default" field.
func DefaultNEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefault), v))
	})
}

// DefaultIn applies the In predicate on the "default" field.
func DefaultIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefault), v...))
	})
}

// DefaultNotIn applies the NotIn predicate on the "default" field.
func DefaultNotIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefault), v...))
	})
}

// DefaultGT applies the GT predicate on the "default" field.
func DefaultGT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefault), v))
	})
}

// DefaultGTE applies the GTE predicate on the "default" field.
func DefaultGTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefault), v))
	})
}

// DefaultLT applies the LT predicate on the "default" field.
func DefaultLT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefault), v))
	})
}

// DefaultLTE applies the LTE predicate on the "default" field.
func DefaultLTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefault), v))
	})
}

// DefaultContains applies the Contains predicate on the "default" field.
func DefaultContains(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDefault), v))
	})
}

// DefaultHasPrefix applies the HasPrefix predicate on the "default" field.
func DefaultHasPrefix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDefault), v))
	})
}

// DefaultHasSuffix applies the HasSuffix predicate on the "default" field.
func DefaultHasSuffix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDefault), v))
	})
}

// DefaultIsNil applies the IsNil predicate on the "default" field.
func DefaultIsNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefault)))
	})
}

// DefaultNotNil applies the NotNil predicate on the "default" field.
func DefaultNotNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefault)))
	})
}

// DefaultEqualFold applies the EqualFold predicate on the "default" field.
func DefaultEqualFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDefault), v))
	})
}

// DefaultContainsFold applies the ContainsFold predicate on the "default" field.
func DefaultContainsFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDefault), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysDictData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDictData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasDictType applies the HasEdge predicate on the "dictType" edge.
func HasDictType() predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DictTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DictTypeTable, DictTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDictTypeWith applies the HasEdge predicate on the "dictType" edge with a given conditions (other predicates).
func HasDictTypeWith(preds ...predicate.SysDictType) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DictTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DictTypeTable, DictTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysDictData) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysDictData) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysDictData) predicate.SysDictData {
	return predicate.SysDictData(func(s *sql.Selector) {
		p(s.Not())
	})
}
