// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/userresourcerecord"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserResourceRecordCreate is the builder for creating a UserResourceRecord entity.
type UserResourceRecordCreate struct {
	config
	mutation *UserResourceRecordMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (urrc *UserResourceRecordCreate) SetUserId(i int64) *UserResourceRecordCreate {
	urrc.mutation.SetUserId(i)
	return urrc
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableUserId(i *int64) *UserResourceRecordCreate {
	if i != nil {
		urrc.SetUserId(*i)
	}
	return urrc
}

// SetResId sets the "resId" field.
func (urrc *UserResourceRecordCreate) SetResId(i int64) *UserResourceRecordCreate {
	urrc.mutation.SetResId(i)
	return urrc
}

// SetNillableResId sets the "resId" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableResId(i *int64) *UserResourceRecordCreate {
	if i != nil {
		urrc.SetResId(*i)
	}
	return urrc
}

// SetDef sets the "def" field.
func (urrc *UserResourceRecordCreate) SetDef(b bool) *UserResourceRecordCreate {
	urrc.mutation.SetDef(b)
	return urrc
}

// SetNillableDef sets the "def" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableDef(b *bool) *UserResourceRecordCreate {
	if b != nil {
		urrc.SetDef(*b)
	}
	return urrc
}

// SetName sets the "name" field.
func (urrc *UserResourceRecordCreate) SetName(s string) *UserResourceRecordCreate {
	urrc.mutation.SetName(s)
	return urrc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableName(s *string) *UserResourceRecordCreate {
	if s != nil {
		urrc.SetName(*s)
	}
	return urrc
}

// SetURL sets the "url" field.
func (urrc *UserResourceRecordCreate) SetURL(s string) *UserResourceRecordCreate {
	urrc.mutation.SetURL(s)
	return urrc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableURL(s *string) *UserResourceRecordCreate {
	if s != nil {
		urrc.SetURL(*s)
	}
	return urrc
}

// SetResType sets the "resType" field.
func (urrc *UserResourceRecordCreate) SetResType(s string) *UserResourceRecordCreate {
	urrc.mutation.SetResType(s)
	return urrc
}

// SetNillableResType sets the "resType" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableResType(s *string) *UserResourceRecordCreate {
	if s != nil {
		urrc.SetResType(*s)
	}
	return urrc
}

// SetRemark sets the "remark" field.
func (urrc *UserResourceRecordCreate) SetRemark(s string) *UserResourceRecordCreate {
	urrc.mutation.SetRemark(s)
	return urrc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableRemark(s *string) *UserResourceRecordCreate {
	if s != nil {
		urrc.SetRemark(*s)
	}
	return urrc
}

// SetState sets the "state" field.
func (urrc *UserResourceRecordCreate) SetState(i int32) *UserResourceRecordCreate {
	urrc.mutation.SetState(i)
	return urrc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableState(i *int32) *UserResourceRecordCreate {
	if i != nil {
		urrc.SetState(*i)
	}
	return urrc
}

// SetEffectTime sets the "effectTime" field.
func (urrc *UserResourceRecordCreate) SetEffectTime(t time.Time) *UserResourceRecordCreate {
	urrc.mutation.SetEffectTime(t)
	return urrc
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableEffectTime(t *time.Time) *UserResourceRecordCreate {
	if t != nil {
		urrc.SetEffectTime(*t)
	}
	return urrc
}

// SetExpiredTime sets the "expiredTime" field.
func (urrc *UserResourceRecordCreate) SetExpiredTime(t time.Time) *UserResourceRecordCreate {
	urrc.mutation.SetExpiredTime(t)
	return urrc
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableExpiredTime(t *time.Time) *UserResourceRecordCreate {
	if t != nil {
		urrc.SetExpiredTime(*t)
	}
	return urrc
}

// SetCreatedAt sets the "createdAt" field.
func (urrc *UserResourceRecordCreate) SetCreatedAt(t time.Time) *UserResourceRecordCreate {
	urrc.mutation.SetCreatedAt(t)
	return urrc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableCreatedAt(t *time.Time) *UserResourceRecordCreate {
	if t != nil {
		urrc.SetCreatedAt(*t)
	}
	return urrc
}

// SetUpdatedAt sets the "updatedAt" field.
func (urrc *UserResourceRecordCreate) SetUpdatedAt(t time.Time) *UserResourceRecordCreate {
	urrc.mutation.SetUpdatedAt(t)
	return urrc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableUpdatedAt(t *time.Time) *UserResourceRecordCreate {
	if t != nil {
		urrc.SetUpdatedAt(*t)
	}
	return urrc
}

// SetCreateBy sets the "createBy" field.
func (urrc *UserResourceRecordCreate) SetCreateBy(i int64) *UserResourceRecordCreate {
	urrc.mutation.SetCreateBy(i)
	return urrc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableCreateBy(i *int64) *UserResourceRecordCreate {
	if i != nil {
		urrc.SetCreateBy(*i)
	}
	return urrc
}

// SetUpdateBy sets the "updateBy" field.
func (urrc *UserResourceRecordCreate) SetUpdateBy(i int64) *UserResourceRecordCreate {
	urrc.mutation.SetUpdateBy(i)
	return urrc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableUpdateBy(i *int64) *UserResourceRecordCreate {
	if i != nil {
		urrc.SetUpdateBy(*i)
	}
	return urrc
}

// SetTenantId sets the "tenantId" field.
func (urrc *UserResourceRecordCreate) SetTenantId(i int64) *UserResourceRecordCreate {
	urrc.mutation.SetTenantId(i)
	return urrc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (urrc *UserResourceRecordCreate) SetNillableTenantId(i *int64) *UserResourceRecordCreate {
	if i != nil {
		urrc.SetTenantId(*i)
	}
	return urrc
}

// Mutation returns the UserResourceRecordMutation object of the builder.
func (urrc *UserResourceRecordCreate) Mutation() *UserResourceRecordMutation {
	return urrc.mutation
}

// Save creates the UserResourceRecord in the database.
func (urrc *UserResourceRecordCreate) Save(ctx context.Context) (*UserResourceRecord, error) {
	var (
		err  error
		node *UserResourceRecord
	)
	urrc.defaults()
	if len(urrc.hooks) == 0 {
		if err = urrc.check(); err != nil {
			return nil, err
		}
		node, err = urrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserResourceRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = urrc.check(); err != nil {
				return nil, err
			}
			urrc.mutation = mutation
			if node, err = urrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(urrc.hooks) - 1; i >= 0; i-- {
			if urrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = urrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, urrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (urrc *UserResourceRecordCreate) SaveX(ctx context.Context) *UserResourceRecord {
	v, err := urrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urrc *UserResourceRecordCreate) Exec(ctx context.Context) error {
	_, err := urrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urrc *UserResourceRecordCreate) ExecX(ctx context.Context) {
	if err := urrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urrc *UserResourceRecordCreate) defaults() {
	if _, ok := urrc.mutation.EffectTime(); !ok {
		v := userresourcerecord.DefaultEffectTime()
		urrc.mutation.SetEffectTime(v)
	}
	if _, ok := urrc.mutation.ExpiredTime(); !ok {
		v := userresourcerecord.DefaultExpiredTime()
		urrc.mutation.SetExpiredTime(v)
	}
	if _, ok := urrc.mutation.CreatedAt(); !ok {
		v := userresourcerecord.DefaultCreatedAt()
		urrc.mutation.SetCreatedAt(v)
	}
	if _, ok := urrc.mutation.UpdatedAt(); !ok {
		v := userresourcerecord.DefaultUpdatedAt()
		urrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := urrc.mutation.CreateBy(); !ok {
		v := userresourcerecord.DefaultCreateBy
		urrc.mutation.SetCreateBy(v)
	}
	if _, ok := urrc.mutation.UpdateBy(); !ok {
		v := userresourcerecord.DefaultUpdateBy
		urrc.mutation.SetUpdateBy(v)
	}
	if _, ok := urrc.mutation.TenantId(); !ok {
		v := userresourcerecord.DefaultTenantId
		urrc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urrc *UserResourceRecordCreate) check() error {
	if _, ok := urrc.mutation.EffectTime(); !ok {
		return &ValidationError{Name: "effectTime", err: errors.New(`ent: missing required field "effectTime"`)}
	}
	if _, ok := urrc.mutation.ExpiredTime(); !ok {
		return &ValidationError{Name: "expiredTime", err: errors.New(`ent: missing required field "expiredTime"`)}
	}
	if _, ok := urrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := urrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := urrc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := urrc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := urrc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (urrc *UserResourceRecordCreate) sqlSave(ctx context.Context) (*UserResourceRecord, error) {
	_node, _spec := urrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (urrc *UserResourceRecordCreate) createSpec() (*UserResourceRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &UserResourceRecord{config: urrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userresourcerecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userresourcerecord.FieldID,
			},
		}
	)
	if value, ok := urrc.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUserId,
		})
		_node.UserId = value
	}
	if value, ok := urrc.mutation.ResId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldResId,
		})
		_node.ResId = value
	}
	if value, ok := urrc.mutation.Def(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userresourcerecord.FieldDef,
		})
		_node.Def = value
	}
	if value, ok := urrc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldName,
		})
		_node.Name = value
	}
	if value, ok := urrc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := urrc.mutation.ResType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldResType,
		})
		_node.ResType = value
	}
	if value, ok := urrc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := urrc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userresourcerecord.FieldState,
		})
		_node.State = value
	}
	if value, ok := urrc.mutation.EffectTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldEffectTime,
		})
		_node.EffectTime = value
	}
	if value, ok := urrc.mutation.ExpiredTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldExpiredTime,
		})
		_node.ExpiredTime = value
	}
	if value, ok := urrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := urrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := urrc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := urrc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := urrc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// UserResourceRecordCreateBulk is the builder for creating many UserResourceRecord entities in bulk.
type UserResourceRecordCreateBulk struct {
	config
	builders []*UserResourceRecordCreate
}

// Save creates the UserResourceRecord entities in the database.
func (urrcb *UserResourceRecordCreateBulk) Save(ctx context.Context) ([]*UserResourceRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(urrcb.builders))
	nodes := make([]*UserResourceRecord, len(urrcb.builders))
	mutators := make([]Mutator, len(urrcb.builders))
	for i := range urrcb.builders {
		func(i int, root context.Context) {
			builder := urrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserResourceRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urrcb *UserResourceRecordCreateBulk) SaveX(ctx context.Context) []*UserResourceRecord {
	v, err := urrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urrcb *UserResourceRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := urrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urrcb *UserResourceRecordCreateBulk) ExecX(ctx context.Context) {
	if err := urrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
