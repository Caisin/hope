// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/activitycomponent"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ActivityComponent is the model entity for the ActivityComponent schema.
type ActivityComponent struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ActivityCode holds the value of the "activityCode" field.
	// 活动编码
	ActivityCode string `json:"activityCode,omitempty"`
	// ComponentType holds the value of the "componentType" field.
	// 活动组成类型,reg
	ComponentType string `json:"componentType,omitempty"`
	// Policy holds the value of the "policy" field.
	// 策略,all
	Policy string `json:"policy,omitempty"`
	// VipDays holds the value of the "vipDays" field.
	// vip拓展天数,当用户为vip时生效
	VipDays bool `json:"vipDays,omitempty"`
	// MinConsume holds the value of the "minConsume" field.
	// 最小消耗金额
	MinConsume int64 `json:"minConsume,omitempty"`
	// MaxConsume holds the value of the "maxConsume" field.
	// 最大消耗金额
	MaxConsume int64 `json:"maxConsume,omitempty"`
	// MinPayNum holds the value of the "minPayNum" field.
	// 充值次数
	MinPayNum int64 `json:"minPayNum,omitempty"`
	// PayTimes holds the value of the "payTimes" field.
	// 第几次充值
	PayTimes int64 `json:"payTimes,omitempty"`
	// PayAmount holds the value of the "payAmount" field.
	// 充值金额
	PayAmount int64 `json:"payAmount,omitempty"`
	// RegDays holds the value of the "regDays" field.
	// 注册天数
	RegDays int64 `json:"regDays,omitempty"`
	// Summary holds the value of the "summary" field.
	// 活动描述
	Summary string `json:"summary,omitempty"`
	// AssetItemId holds the value of the "assetItemId" field.
	// 活动期间赠送资金科目
	AssetItemId int32 `json:"assetItemId,omitempty"`
	// Amount holds the value of the "amount" field.
	// 活动期间赠送金额,-1为赠送等额消耗书券
	Amount int64 `json:"amount,omitempty"`
	// ResId holds the value of the "resId" field.
	// 获得资产编号
	ResId int64 `json:"resId,omitempty"`
	// ResDays holds the value of the "resDays" field.
	// 获得资产有效时间
	ResDays int32 `json:"resDays,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActivityComponent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case activitycomponent.FieldVipDays:
			values[i] = new(sql.NullBool)
		case activitycomponent.FieldID, activitycomponent.FieldMinConsume, activitycomponent.FieldMaxConsume, activitycomponent.FieldMinPayNum, activitycomponent.FieldPayTimes, activitycomponent.FieldPayAmount, activitycomponent.FieldRegDays, activitycomponent.FieldAssetItemId, activitycomponent.FieldAmount, activitycomponent.FieldResId, activitycomponent.FieldResDays, activitycomponent.FieldCreateBy, activitycomponent.FieldUpdateBy, activitycomponent.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case activitycomponent.FieldActivityCode, activitycomponent.FieldComponentType, activitycomponent.FieldPolicy, activitycomponent.FieldSummary:
			values[i] = new(sql.NullString)
		case activitycomponent.FieldCreatedAt, activitycomponent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ActivityComponent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActivityComponent fields.
func (ac *ActivityComponent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activitycomponent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ac.ID = int64(value.Int64)
		case activitycomponent.FieldActivityCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activityCode", values[i])
			} else if value.Valid {
				ac.ActivityCode = value.String
			}
		case activitycomponent.FieldComponentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field componentType", values[i])
			} else if value.Valid {
				ac.ComponentType = value.String
			}
		case activitycomponent.FieldPolicy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field policy", values[i])
			} else if value.Valid {
				ac.Policy = value.String
			}
		case activitycomponent.FieldVipDays:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field vipDays", values[i])
			} else if value.Valid {
				ac.VipDays = value.Bool
			}
		case activitycomponent.FieldMinConsume:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minConsume", values[i])
			} else if value.Valid {
				ac.MinConsume = value.Int64
			}
		case activitycomponent.FieldMaxConsume:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maxConsume", values[i])
			} else if value.Valid {
				ac.MaxConsume = value.Int64
			}
		case activitycomponent.FieldMinPayNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minPayNum", values[i])
			} else if value.Valid {
				ac.MinPayNum = value.Int64
			}
		case activitycomponent.FieldPayTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payTimes", values[i])
			} else if value.Valid {
				ac.PayTimes = value.Int64
			}
		case activitycomponent.FieldPayAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payAmount", values[i])
			} else if value.Valid {
				ac.PayAmount = value.Int64
			}
		case activitycomponent.FieldRegDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field regDays", values[i])
			} else if value.Valid {
				ac.RegDays = value.Int64
			}
		case activitycomponent.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				ac.Summary = value.String
			}
		case activitycomponent.FieldAssetItemId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assetItemId", values[i])
			} else if value.Valid {
				ac.AssetItemId = int32(value.Int64)
			}
		case activitycomponent.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				ac.Amount = value.Int64
			}
		case activitycomponent.FieldResId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resId", values[i])
			} else if value.Valid {
				ac.ResId = value.Int64
			}
		case activitycomponent.FieldResDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resDays", values[i])
			} else if value.Valid {
				ac.ResDays = int32(value.Int64)
			}
		case activitycomponent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		case activitycomponent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ac.UpdatedAt = value.Time
			}
		case activitycomponent.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				ac.CreateBy = value.Int64
			}
		case activitycomponent.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				ac.UpdateBy = value.Int64
			}
		case activitycomponent.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				ac.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ActivityComponent.
// Note that you need to call ActivityComponent.Unwrap() before calling this method if this ActivityComponent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *ActivityComponent) Update() *ActivityComponentUpdateOne {
	return (&ActivityComponentClient{config: ac.config}).UpdateOne(ac)
}

// Unwrap unwraps the ActivityComponent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *ActivityComponent) Unwrap() *ActivityComponent {
	tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActivityComponent is not a transactional entity")
	}
	ac.config.driver = tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *ActivityComponent) String() string {
	var builder strings.Builder
	builder.WriteString("ActivityComponent(")
	builder.WriteString(fmt.Sprintf("id=%v", ac.ID))
	builder.WriteString(", activityCode=")
	builder.WriteString(ac.ActivityCode)
	builder.WriteString(", componentType=")
	builder.WriteString(ac.ComponentType)
	builder.WriteString(", policy=")
	builder.WriteString(ac.Policy)
	builder.WriteString(", vipDays=")
	builder.WriteString(fmt.Sprintf("%v", ac.VipDays))
	builder.WriteString(", minConsume=")
	builder.WriteString(fmt.Sprintf("%v", ac.MinConsume))
	builder.WriteString(", maxConsume=")
	builder.WriteString(fmt.Sprintf("%v", ac.MaxConsume))
	builder.WriteString(", minPayNum=")
	builder.WriteString(fmt.Sprintf("%v", ac.MinPayNum))
	builder.WriteString(", payTimes=")
	builder.WriteString(fmt.Sprintf("%v", ac.PayTimes))
	builder.WriteString(", payAmount=")
	builder.WriteString(fmt.Sprintf("%v", ac.PayAmount))
	builder.WriteString(", regDays=")
	builder.WriteString(fmt.Sprintf("%v", ac.RegDays))
	builder.WriteString(", summary=")
	builder.WriteString(ac.Summary)
	builder.WriteString(", assetItemId=")
	builder.WriteString(fmt.Sprintf("%v", ac.AssetItemId))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", ac.Amount))
	builder.WriteString(", resId=")
	builder.WriteString(fmt.Sprintf("%v", ac.ResId))
	builder.WriteString(", resDays=")
	builder.WriteString(fmt.Sprintf("%v", ac.ResDays))
	builder.WriteString(", createdAt=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(ac.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", ac.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", ac.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", ac.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// ActivityComponents is a parsable slice of ActivityComponent.
type ActivityComponents []*ActivityComponent

func (ac ActivityComponents) config(cfg config) {
	for _i := range ac {
		ac[_i].config = cfg
	}
}
