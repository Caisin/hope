// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/vipuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VipUserUpdate is the builder for updating VipUser entities.
type VipUserUpdate struct {
	config
	hooks    []Hook
	mutation *VipUserMutation
}

// Where appends a list predicates to the VipUserUpdate builder.
func (vuu *VipUserUpdate) Where(ps ...predicate.VipUser) *VipUserUpdate {
	vuu.mutation.Where(ps...)
	return vuu
}

// SetVipType sets the "vipType" field.
func (vuu *VipUserUpdate) SetVipType(i int64) *VipUserUpdate {
	vuu.mutation.ResetVipType()
	vuu.mutation.SetVipType(i)
	return vuu
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableVipType(i *int64) *VipUserUpdate {
	if i != nil {
		vuu.SetVipType(*i)
	}
	return vuu
}

// AddVipType adds i to the "vipType" field.
func (vuu *VipUserUpdate) AddVipType(i int64) *VipUserUpdate {
	vuu.mutation.AddVipType(i)
	return vuu
}

// ClearVipType clears the value of the "vipType" field.
func (vuu *VipUserUpdate) ClearVipType() *VipUserUpdate {
	vuu.mutation.ClearVipType()
	return vuu
}

// SetSvipType sets the "svipType" field.
func (vuu *VipUserUpdate) SetSvipType(i int64) *VipUserUpdate {
	vuu.mutation.ResetSvipType()
	vuu.mutation.SetSvipType(i)
	return vuu
}

// SetNillableSvipType sets the "svipType" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableSvipType(i *int64) *VipUserUpdate {
	if i != nil {
		vuu.SetSvipType(*i)
	}
	return vuu
}

// AddSvipType adds i to the "svipType" field.
func (vuu *VipUserUpdate) AddSvipType(i int64) *VipUserUpdate {
	vuu.mutation.AddSvipType(i)
	return vuu
}

// ClearSvipType clears the value of the "svipType" field.
func (vuu *VipUserUpdate) ClearSvipType() *VipUserUpdate {
	vuu.mutation.ClearSvipType()
	return vuu
}

// SetSvipEffectTime sets the "svipEffectTime" field.
func (vuu *VipUserUpdate) SetSvipEffectTime(t time.Time) *VipUserUpdate {
	vuu.mutation.SetSvipEffectTime(t)
	return vuu
}

// SetNillableSvipEffectTime sets the "svipEffectTime" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableSvipEffectTime(t *time.Time) *VipUserUpdate {
	if t != nil {
		vuu.SetSvipEffectTime(*t)
	}
	return vuu
}

// ClearSvipEffectTime clears the value of the "svipEffectTime" field.
func (vuu *VipUserUpdate) ClearSvipEffectTime() *VipUserUpdate {
	vuu.mutation.ClearSvipEffectTime()
	return vuu
}

// SetSvipExpiredTime sets the "svipExpiredTime" field.
func (vuu *VipUserUpdate) SetSvipExpiredTime(t time.Time) *VipUserUpdate {
	vuu.mutation.SetSvipExpiredTime(t)
	return vuu
}

// SetNillableSvipExpiredTime sets the "svipExpiredTime" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableSvipExpiredTime(t *time.Time) *VipUserUpdate {
	if t != nil {
		vuu.SetSvipExpiredTime(*t)
	}
	return vuu
}

// ClearSvipExpiredTime clears the value of the "svipExpiredTime" field.
func (vuu *VipUserUpdate) ClearSvipExpiredTime() *VipUserUpdate {
	vuu.mutation.ClearSvipExpiredTime()
	return vuu
}

// SetRemark sets the "remark" field.
func (vuu *VipUserUpdate) SetRemark(s string) *VipUserUpdate {
	vuu.mutation.SetRemark(s)
	return vuu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableRemark(s *string) *VipUserUpdate {
	if s != nil {
		vuu.SetRemark(*s)
	}
	return vuu
}

// ClearRemark clears the value of the "remark" field.
func (vuu *VipUserUpdate) ClearRemark() *VipUserUpdate {
	vuu.mutation.ClearRemark()
	return vuu
}

// SetEffectTime sets the "effectTime" field.
func (vuu *VipUserUpdate) SetEffectTime(t time.Time) *VipUserUpdate {
	vuu.mutation.SetEffectTime(t)
	return vuu
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableEffectTime(t *time.Time) *VipUserUpdate {
	if t != nil {
		vuu.SetEffectTime(*t)
	}
	return vuu
}

// SetExpiredTime sets the "expiredTime" field.
func (vuu *VipUserUpdate) SetExpiredTime(t time.Time) *VipUserUpdate {
	vuu.mutation.SetExpiredTime(t)
	return vuu
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableExpiredTime(t *time.Time) *VipUserUpdate {
	if t != nil {
		vuu.SetExpiredTime(*t)
	}
	return vuu
}

// SetUpdatedAt sets the "updatedAt" field.
func (vuu *VipUserUpdate) SetUpdatedAt(t time.Time) *VipUserUpdate {
	vuu.mutation.SetUpdatedAt(t)
	return vuu
}

// SetCreateBy sets the "createBy" field.
func (vuu *VipUserUpdate) SetCreateBy(i int64) *VipUserUpdate {
	vuu.mutation.ResetCreateBy()
	vuu.mutation.SetCreateBy(i)
	return vuu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableCreateBy(i *int64) *VipUserUpdate {
	if i != nil {
		vuu.SetCreateBy(*i)
	}
	return vuu
}

// AddCreateBy adds i to the "createBy" field.
func (vuu *VipUserUpdate) AddCreateBy(i int64) *VipUserUpdate {
	vuu.mutation.AddCreateBy(i)
	return vuu
}

// SetUpdateBy sets the "updateBy" field.
func (vuu *VipUserUpdate) SetUpdateBy(i int64) *VipUserUpdate {
	vuu.mutation.ResetUpdateBy()
	vuu.mutation.SetUpdateBy(i)
	return vuu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableUpdateBy(i *int64) *VipUserUpdate {
	if i != nil {
		vuu.SetUpdateBy(*i)
	}
	return vuu
}

// AddUpdateBy adds i to the "updateBy" field.
func (vuu *VipUserUpdate) AddUpdateBy(i int64) *VipUserUpdate {
	vuu.mutation.AddUpdateBy(i)
	return vuu
}

// SetTenantId sets the "tenantId" field.
func (vuu *VipUserUpdate) SetTenantId(i int64) *VipUserUpdate {
	vuu.mutation.ResetTenantId()
	vuu.mutation.SetTenantId(i)
	return vuu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (vuu *VipUserUpdate) SetNillableTenantId(i *int64) *VipUserUpdate {
	if i != nil {
		vuu.SetTenantId(*i)
	}
	return vuu
}

// AddTenantId adds i to the "tenantId" field.
func (vuu *VipUserUpdate) AddTenantId(i int64) *VipUserUpdate {
	vuu.mutation.AddTenantId(i)
	return vuu
}

// AddUserIDs adds the "user" edge to the SocialUser entity by IDs.
func (vuu *VipUserUpdate) AddUserIDs(ids ...int64) *VipUserUpdate {
	vuu.mutation.AddUserIDs(ids...)
	return vuu
}

// AddUser adds the "user" edges to the SocialUser entity.
func (vuu *VipUserUpdate) AddUser(s ...*SocialUser) *VipUserUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuu.AddUserIDs(ids...)
}

// Mutation returns the VipUserMutation object of the builder.
func (vuu *VipUserUpdate) Mutation() *VipUserMutation {
	return vuu.mutation
}

// ClearUser clears all "user" edges to the SocialUser entity.
func (vuu *VipUserUpdate) ClearUser() *VipUserUpdate {
	vuu.mutation.ClearUser()
	return vuu
}

// RemoveUserIDs removes the "user" edge to SocialUser entities by IDs.
func (vuu *VipUserUpdate) RemoveUserIDs(ids ...int64) *VipUserUpdate {
	vuu.mutation.RemoveUserIDs(ids...)
	return vuu
}

// RemoveUser removes "user" edges to SocialUser entities.
func (vuu *VipUserUpdate) RemoveUser(s ...*SocialUser) *VipUserUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vuu *VipUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vuu.defaults()
	if len(vuu.hooks) == 0 {
		affected, err = vuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VipUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuu.mutation = mutation
			affected, err = vuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vuu.hooks) - 1; i >= 0; i-- {
			if vuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuu *VipUserUpdate) SaveX(ctx context.Context) int {
	affected, err := vuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vuu *VipUserUpdate) Exec(ctx context.Context) error {
	_, err := vuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuu *VipUserUpdate) ExecX(ctx context.Context) {
	if err := vuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuu *VipUserUpdate) defaults() {
	if _, ok := vuu.mutation.UpdatedAt(); !ok {
		v := vipuser.UpdateDefaultUpdatedAt()
		vuu.mutation.SetUpdatedAt(v)
	}
}

func (vuu *VipUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vipuser.Table,
			Columns: vipuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: vipuser.FieldID,
			},
		},
	}
	if ps := vuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuu.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldVipType,
		})
	}
	if value, ok := vuu.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldVipType,
		})
	}
	if vuu.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: vipuser.FieldVipType,
		})
	}
	if value, ok := vuu.mutation.SvipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldSvipType,
		})
	}
	if value, ok := vuu.mutation.AddedSvipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldSvipType,
		})
	}
	if vuu.mutation.SvipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: vipuser.FieldSvipType,
		})
	}
	if value, ok := vuu.mutation.SvipEffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldSvipEffectTime,
		})
	}
	if vuu.mutation.SvipEffectTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vipuser.FieldSvipEffectTime,
		})
	}
	if value, ok := vuu.mutation.SvipExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldSvipExpiredTime,
		})
	}
	if vuu.mutation.SvipExpiredTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vipuser.FieldSvipExpiredTime,
		})
	}
	if value, ok := vuu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vipuser.FieldRemark,
		})
	}
	if vuu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vipuser.FieldRemark,
		})
	}
	if value, ok := vuu.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldEffectTime,
		})
	}
	if value, ok := vuu.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldExpiredTime,
		})
	}
	if value, ok := vuu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldUpdatedAt,
		})
	}
	if value, ok := vuu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldCreateBy,
		})
	}
	if value, ok := vuu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldCreateBy,
		})
	}
	if value, ok := vuu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldUpdateBy,
		})
	}
	if value, ok := vuu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldUpdateBy,
		})
	}
	if value, ok := vuu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldTenantId,
		})
	}
	if value, ok := vuu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldTenantId,
		})
	}
	if vuu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vipuser.UserTable,
			Columns: vipuser.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuu.mutation.RemovedUserIDs(); len(nodes) > 0 && !vuu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vipuser.UserTable,
			Columns: vipuser.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vipuser.UserTable,
			Columns: vipuser.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vipuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VipUserUpdateOne is the builder for updating a single VipUser entity.
type VipUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VipUserMutation
}

// SetVipType sets the "vipType" field.
func (vuuo *VipUserUpdateOne) SetVipType(i int64) *VipUserUpdateOne {
	vuuo.mutation.ResetVipType()
	vuuo.mutation.SetVipType(i)
	return vuuo
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableVipType(i *int64) *VipUserUpdateOne {
	if i != nil {
		vuuo.SetVipType(*i)
	}
	return vuuo
}

// AddVipType adds i to the "vipType" field.
func (vuuo *VipUserUpdateOne) AddVipType(i int64) *VipUserUpdateOne {
	vuuo.mutation.AddVipType(i)
	return vuuo
}

// ClearVipType clears the value of the "vipType" field.
func (vuuo *VipUserUpdateOne) ClearVipType() *VipUserUpdateOne {
	vuuo.mutation.ClearVipType()
	return vuuo
}

// SetSvipType sets the "svipType" field.
func (vuuo *VipUserUpdateOne) SetSvipType(i int64) *VipUserUpdateOne {
	vuuo.mutation.ResetSvipType()
	vuuo.mutation.SetSvipType(i)
	return vuuo
}

// SetNillableSvipType sets the "svipType" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableSvipType(i *int64) *VipUserUpdateOne {
	if i != nil {
		vuuo.SetSvipType(*i)
	}
	return vuuo
}

// AddSvipType adds i to the "svipType" field.
func (vuuo *VipUserUpdateOne) AddSvipType(i int64) *VipUserUpdateOne {
	vuuo.mutation.AddSvipType(i)
	return vuuo
}

// ClearSvipType clears the value of the "svipType" field.
func (vuuo *VipUserUpdateOne) ClearSvipType() *VipUserUpdateOne {
	vuuo.mutation.ClearSvipType()
	return vuuo
}

// SetSvipEffectTime sets the "svipEffectTime" field.
func (vuuo *VipUserUpdateOne) SetSvipEffectTime(t time.Time) *VipUserUpdateOne {
	vuuo.mutation.SetSvipEffectTime(t)
	return vuuo
}

// SetNillableSvipEffectTime sets the "svipEffectTime" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableSvipEffectTime(t *time.Time) *VipUserUpdateOne {
	if t != nil {
		vuuo.SetSvipEffectTime(*t)
	}
	return vuuo
}

// ClearSvipEffectTime clears the value of the "svipEffectTime" field.
func (vuuo *VipUserUpdateOne) ClearSvipEffectTime() *VipUserUpdateOne {
	vuuo.mutation.ClearSvipEffectTime()
	return vuuo
}

// SetSvipExpiredTime sets the "svipExpiredTime" field.
func (vuuo *VipUserUpdateOne) SetSvipExpiredTime(t time.Time) *VipUserUpdateOne {
	vuuo.mutation.SetSvipExpiredTime(t)
	return vuuo
}

// SetNillableSvipExpiredTime sets the "svipExpiredTime" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableSvipExpiredTime(t *time.Time) *VipUserUpdateOne {
	if t != nil {
		vuuo.SetSvipExpiredTime(*t)
	}
	return vuuo
}

// ClearSvipExpiredTime clears the value of the "svipExpiredTime" field.
func (vuuo *VipUserUpdateOne) ClearSvipExpiredTime() *VipUserUpdateOne {
	vuuo.mutation.ClearSvipExpiredTime()
	return vuuo
}

// SetRemark sets the "remark" field.
func (vuuo *VipUserUpdateOne) SetRemark(s string) *VipUserUpdateOne {
	vuuo.mutation.SetRemark(s)
	return vuuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableRemark(s *string) *VipUserUpdateOne {
	if s != nil {
		vuuo.SetRemark(*s)
	}
	return vuuo
}

// ClearRemark clears the value of the "remark" field.
func (vuuo *VipUserUpdateOne) ClearRemark() *VipUserUpdateOne {
	vuuo.mutation.ClearRemark()
	return vuuo
}

// SetEffectTime sets the "effectTime" field.
func (vuuo *VipUserUpdateOne) SetEffectTime(t time.Time) *VipUserUpdateOne {
	vuuo.mutation.SetEffectTime(t)
	return vuuo
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableEffectTime(t *time.Time) *VipUserUpdateOne {
	if t != nil {
		vuuo.SetEffectTime(*t)
	}
	return vuuo
}

// SetExpiredTime sets the "expiredTime" field.
func (vuuo *VipUserUpdateOne) SetExpiredTime(t time.Time) *VipUserUpdateOne {
	vuuo.mutation.SetExpiredTime(t)
	return vuuo
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableExpiredTime(t *time.Time) *VipUserUpdateOne {
	if t != nil {
		vuuo.SetExpiredTime(*t)
	}
	return vuuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (vuuo *VipUserUpdateOne) SetUpdatedAt(t time.Time) *VipUserUpdateOne {
	vuuo.mutation.SetUpdatedAt(t)
	return vuuo
}

// SetCreateBy sets the "createBy" field.
func (vuuo *VipUserUpdateOne) SetCreateBy(i int64) *VipUserUpdateOne {
	vuuo.mutation.ResetCreateBy()
	vuuo.mutation.SetCreateBy(i)
	return vuuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableCreateBy(i *int64) *VipUserUpdateOne {
	if i != nil {
		vuuo.SetCreateBy(*i)
	}
	return vuuo
}

// AddCreateBy adds i to the "createBy" field.
func (vuuo *VipUserUpdateOne) AddCreateBy(i int64) *VipUserUpdateOne {
	vuuo.mutation.AddCreateBy(i)
	return vuuo
}

// SetUpdateBy sets the "updateBy" field.
func (vuuo *VipUserUpdateOne) SetUpdateBy(i int64) *VipUserUpdateOne {
	vuuo.mutation.ResetUpdateBy()
	vuuo.mutation.SetUpdateBy(i)
	return vuuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableUpdateBy(i *int64) *VipUserUpdateOne {
	if i != nil {
		vuuo.SetUpdateBy(*i)
	}
	return vuuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (vuuo *VipUserUpdateOne) AddUpdateBy(i int64) *VipUserUpdateOne {
	vuuo.mutation.AddUpdateBy(i)
	return vuuo
}

// SetTenantId sets the "tenantId" field.
func (vuuo *VipUserUpdateOne) SetTenantId(i int64) *VipUserUpdateOne {
	vuuo.mutation.ResetTenantId()
	vuuo.mutation.SetTenantId(i)
	return vuuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (vuuo *VipUserUpdateOne) SetNillableTenantId(i *int64) *VipUserUpdateOne {
	if i != nil {
		vuuo.SetTenantId(*i)
	}
	return vuuo
}

// AddTenantId adds i to the "tenantId" field.
func (vuuo *VipUserUpdateOne) AddTenantId(i int64) *VipUserUpdateOne {
	vuuo.mutation.AddTenantId(i)
	return vuuo
}

// AddUserIDs adds the "user" edge to the SocialUser entity by IDs.
func (vuuo *VipUserUpdateOne) AddUserIDs(ids ...int64) *VipUserUpdateOne {
	vuuo.mutation.AddUserIDs(ids...)
	return vuuo
}

// AddUser adds the "user" edges to the SocialUser entity.
func (vuuo *VipUserUpdateOne) AddUser(s ...*SocialUser) *VipUserUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuuo.AddUserIDs(ids...)
}

// Mutation returns the VipUserMutation object of the builder.
func (vuuo *VipUserUpdateOne) Mutation() *VipUserMutation {
	return vuuo.mutation
}

// ClearUser clears all "user" edges to the SocialUser entity.
func (vuuo *VipUserUpdateOne) ClearUser() *VipUserUpdateOne {
	vuuo.mutation.ClearUser()
	return vuuo
}

// RemoveUserIDs removes the "user" edge to SocialUser entities by IDs.
func (vuuo *VipUserUpdateOne) RemoveUserIDs(ids ...int64) *VipUserUpdateOne {
	vuuo.mutation.RemoveUserIDs(ids...)
	return vuuo
}

// RemoveUser removes "user" edges to SocialUser entities.
func (vuuo *VipUserUpdateOne) RemoveUser(s ...*SocialUser) *VipUserUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vuuo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuuo *VipUserUpdateOne) Select(field string, fields ...string) *VipUserUpdateOne {
	vuuo.fields = append([]string{field}, fields...)
	return vuuo
}

// Save executes the query and returns the updated VipUser entity.
func (vuuo *VipUserUpdateOne) Save(ctx context.Context) (*VipUser, error) {
	var (
		err  error
		node *VipUser
	)
	vuuo.defaults()
	if len(vuuo.hooks) == 0 {
		node, err = vuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VipUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuuo.mutation = mutation
			node, err = vuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuuo.hooks) - 1; i >= 0; i-- {
			if vuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuuo *VipUserUpdateOne) SaveX(ctx context.Context) *VipUser {
	node, err := vuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuuo *VipUserUpdateOne) Exec(ctx context.Context) error {
	_, err := vuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuuo *VipUserUpdateOne) ExecX(ctx context.Context) {
	if err := vuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuuo *VipUserUpdateOne) defaults() {
	if _, ok := vuuo.mutation.UpdatedAt(); !ok {
		v := vipuser.UpdateDefaultUpdatedAt()
		vuuo.mutation.SetUpdatedAt(v)
	}
}

func (vuuo *VipUserUpdateOne) sqlSave(ctx context.Context) (_node *VipUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vipuser.Table,
			Columns: vipuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: vipuser.FieldID,
			},
		},
	}
	id, ok := vuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VipUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vipuser.FieldID)
		for _, f := range fields {
			if !vipuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vipuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuuo.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldVipType,
		})
	}
	if value, ok := vuuo.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldVipType,
		})
	}
	if vuuo.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: vipuser.FieldVipType,
		})
	}
	if value, ok := vuuo.mutation.SvipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldSvipType,
		})
	}
	if value, ok := vuuo.mutation.AddedSvipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldSvipType,
		})
	}
	if vuuo.mutation.SvipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: vipuser.FieldSvipType,
		})
	}
	if value, ok := vuuo.mutation.SvipEffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldSvipEffectTime,
		})
	}
	if vuuo.mutation.SvipEffectTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vipuser.FieldSvipEffectTime,
		})
	}
	if value, ok := vuuo.mutation.SvipExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldSvipExpiredTime,
		})
	}
	if vuuo.mutation.SvipExpiredTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: vipuser.FieldSvipExpiredTime,
		})
	}
	if value, ok := vuuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vipuser.FieldRemark,
		})
	}
	if vuuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vipuser.FieldRemark,
		})
	}
	if value, ok := vuuo.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldEffectTime,
		})
	}
	if value, ok := vuuo.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldExpiredTime,
		})
	}
	if value, ok := vuuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vipuser.FieldUpdatedAt,
		})
	}
	if value, ok := vuuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldCreateBy,
		})
	}
	if value, ok := vuuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldCreateBy,
		})
	}
	if value, ok := vuuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldUpdateBy,
		})
	}
	if value, ok := vuuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldUpdateBy,
		})
	}
	if value, ok := vuuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldTenantId,
		})
	}
	if value, ok := vuuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vipuser.FieldTenantId,
		})
	}
	if vuuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vipuser.UserTable,
			Columns: vipuser.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !vuuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vipuser.UserTable,
			Columns: vipuser.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vipuser.UserTable,
			Columns: vipuser.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VipUser{config: vuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vipuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
