// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/appversion"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppVersionUpdate is the builder for updating AppVersion entities.
type AppVersionUpdate struct {
	config
	hooks    []Hook
	mutation *AppVersionMutation
}

// Where appends a list predicates to the AppVersionUpdate builder.
func (avu *AppVersionUpdate) Where(ps ...predicate.AppVersion) *AppVersionUpdate {
	avu.mutation.Where(ps...)
	return avu
}

// SetTitle sets the "title" field.
func (avu *AppVersionUpdate) SetTitle(s string) *AppVersionUpdate {
	avu.mutation.SetTitle(s)
	return avu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableTitle(s *string) *AppVersionUpdate {
	if s != nil {
		avu.SetTitle(*s)
	}
	return avu
}

// ClearTitle clears the value of the "title" field.
func (avu *AppVersionUpdate) ClearTitle() *AppVersionUpdate {
	avu.mutation.ClearTitle()
	return avu
}

// SetVersion sets the "version" field.
func (avu *AppVersionUpdate) SetVersion(i int32) *AppVersionUpdate {
	avu.mutation.ResetVersion()
	avu.mutation.SetVersion(i)
	return avu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableVersion(i *int32) *AppVersionUpdate {
	if i != nil {
		avu.SetVersion(*i)
	}
	return avu
}

// AddVersion adds i to the "version" field.
func (avu *AppVersionUpdate) AddVersion(i int32) *AppVersionUpdate {
	avu.mutation.AddVersion(i)
	return avu
}

// ClearVersion clears the value of the "version" field.
func (avu *AppVersionUpdate) ClearVersion() *AppVersionUpdate {
	avu.mutation.ClearVersion()
	return avu
}

// SetUpdateInfo sets the "updateInfo" field.
func (avu *AppVersionUpdate) SetUpdateInfo(s string) *AppVersionUpdate {
	avu.mutation.SetUpdateInfo(s)
	return avu
}

// SetNillableUpdateInfo sets the "updateInfo" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableUpdateInfo(s *string) *AppVersionUpdate {
	if s != nil {
		avu.SetUpdateInfo(*s)
	}
	return avu
}

// ClearUpdateInfo clears the value of the "updateInfo" field.
func (avu *AppVersionUpdate) ClearUpdateInfo() *AppVersionUpdate {
	avu.mutation.ClearUpdateInfo()
	return avu
}

// SetDownloadUrl sets the "downloadUrl" field.
func (avu *AppVersionUpdate) SetDownloadUrl(s string) *AppVersionUpdate {
	avu.mutation.SetDownloadUrl(s)
	return avu
}

// SetNillableDownloadUrl sets the "downloadUrl" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableDownloadUrl(s *string) *AppVersionUpdate {
	if s != nil {
		avu.SetDownloadUrl(*s)
	}
	return avu
}

// ClearDownloadUrl clears the value of the "downloadUrl" field.
func (avu *AppVersionUpdate) ClearDownloadUrl() *AppVersionUpdate {
	avu.mutation.ClearDownloadUrl()
	return avu
}

// SetPlatform sets the "platform" field.
func (avu *AppVersionUpdate) SetPlatform(s string) *AppVersionUpdate {
	avu.mutation.SetPlatform(s)
	return avu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillablePlatform(s *string) *AppVersionUpdate {
	if s != nil {
		avu.SetPlatform(*s)
	}
	return avu
}

// ClearPlatform clears the value of the "platform" field.
func (avu *AppVersionUpdate) ClearPlatform() *AppVersionUpdate {
	avu.mutation.ClearPlatform()
	return avu
}

// SetUpdatedAt sets the "updatedAt" field.
func (avu *AppVersionUpdate) SetUpdatedAt(t time.Time) *AppVersionUpdate {
	avu.mutation.SetUpdatedAt(t)
	return avu
}

// SetCreateBy sets the "createBy" field.
func (avu *AppVersionUpdate) SetCreateBy(i int64) *AppVersionUpdate {
	avu.mutation.ResetCreateBy()
	avu.mutation.SetCreateBy(i)
	return avu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableCreateBy(i *int64) *AppVersionUpdate {
	if i != nil {
		avu.SetCreateBy(*i)
	}
	return avu
}

// AddCreateBy adds i to the "createBy" field.
func (avu *AppVersionUpdate) AddCreateBy(i int64) *AppVersionUpdate {
	avu.mutation.AddCreateBy(i)
	return avu
}

// SetUpdateBy sets the "updateBy" field.
func (avu *AppVersionUpdate) SetUpdateBy(i int64) *AppVersionUpdate {
	avu.mutation.ResetUpdateBy()
	avu.mutation.SetUpdateBy(i)
	return avu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableUpdateBy(i *int64) *AppVersionUpdate {
	if i != nil {
		avu.SetUpdateBy(*i)
	}
	return avu
}

// AddUpdateBy adds i to the "updateBy" field.
func (avu *AppVersionUpdate) AddUpdateBy(i int64) *AppVersionUpdate {
	avu.mutation.AddUpdateBy(i)
	return avu
}

// SetTenantId sets the "tenantId" field.
func (avu *AppVersionUpdate) SetTenantId(i int64) *AppVersionUpdate {
	avu.mutation.ResetTenantId()
	avu.mutation.SetTenantId(i)
	return avu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (avu *AppVersionUpdate) SetNillableTenantId(i *int64) *AppVersionUpdate {
	if i != nil {
		avu.SetTenantId(*i)
	}
	return avu
}

// AddTenantId adds i to the "tenantId" field.
func (avu *AppVersionUpdate) AddTenantId(i int64) *AppVersionUpdate {
	avu.mutation.AddTenantId(i)
	return avu
}

// Mutation returns the AppVersionMutation object of the builder.
func (avu *AppVersionUpdate) Mutation() *AppVersionMutation {
	return avu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (avu *AppVersionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	avu.defaults()
	if len(avu.hooks) == 0 {
		affected, err = avu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			avu.mutation = mutation
			affected, err = avu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(avu.hooks) - 1; i >= 0; i-- {
			if avu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = avu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, avu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (avu *AppVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := avu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (avu *AppVersionUpdate) Exec(ctx context.Context) error {
	_, err := avu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avu *AppVersionUpdate) ExecX(ctx context.Context) {
	if err := avu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (avu *AppVersionUpdate) defaults() {
	if _, ok := avu.mutation.UpdatedAt(); !ok {
		v := appversion.UpdateDefaultUpdatedAt()
		avu.mutation.SetUpdatedAt(v)
	}
}

func (avu *AppVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appversion.Table,
			Columns: appversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: appversion.FieldID,
			},
		},
	}
	if ps := avu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldTitle,
		})
	}
	if avu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appversion.FieldTitle,
		})
	}
	if value, ok := avu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appversion.FieldVersion,
		})
	}
	if value, ok := avu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appversion.FieldVersion,
		})
	}
	if avu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: appversion.FieldVersion,
		})
	}
	if value, ok := avu.mutation.UpdateInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldUpdateInfo,
		})
	}
	if avu.mutation.UpdateInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appversion.FieldUpdateInfo,
		})
	}
	if value, ok := avu.mutation.DownloadUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldDownloadUrl,
		})
	}
	if avu.mutation.DownloadUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appversion.FieldDownloadUrl,
		})
	}
	if value, ok := avu.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldPlatform,
		})
	}
	if avu.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appversion.FieldPlatform,
		})
	}
	if value, ok := avu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appversion.FieldUpdatedAt,
		})
	}
	if value, ok := avu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldCreateBy,
		})
	}
	if value, ok := avu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldCreateBy,
		})
	}
	if value, ok := avu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldUpdateBy,
		})
	}
	if value, ok := avu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldUpdateBy,
		})
	}
	if value, ok := avu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldTenantId,
		})
	}
	if value, ok := avu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, avu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppVersionUpdateOne is the builder for updating a single AppVersion entity.
type AppVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppVersionMutation
}

// SetTitle sets the "title" field.
func (avuo *AppVersionUpdateOne) SetTitle(s string) *AppVersionUpdateOne {
	avuo.mutation.SetTitle(s)
	return avuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableTitle(s *string) *AppVersionUpdateOne {
	if s != nil {
		avuo.SetTitle(*s)
	}
	return avuo
}

// ClearTitle clears the value of the "title" field.
func (avuo *AppVersionUpdateOne) ClearTitle() *AppVersionUpdateOne {
	avuo.mutation.ClearTitle()
	return avuo
}

// SetVersion sets the "version" field.
func (avuo *AppVersionUpdateOne) SetVersion(i int32) *AppVersionUpdateOne {
	avuo.mutation.ResetVersion()
	avuo.mutation.SetVersion(i)
	return avuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableVersion(i *int32) *AppVersionUpdateOne {
	if i != nil {
		avuo.SetVersion(*i)
	}
	return avuo
}

// AddVersion adds i to the "version" field.
func (avuo *AppVersionUpdateOne) AddVersion(i int32) *AppVersionUpdateOne {
	avuo.mutation.AddVersion(i)
	return avuo
}

// ClearVersion clears the value of the "version" field.
func (avuo *AppVersionUpdateOne) ClearVersion() *AppVersionUpdateOne {
	avuo.mutation.ClearVersion()
	return avuo
}

// SetUpdateInfo sets the "updateInfo" field.
func (avuo *AppVersionUpdateOne) SetUpdateInfo(s string) *AppVersionUpdateOne {
	avuo.mutation.SetUpdateInfo(s)
	return avuo
}

// SetNillableUpdateInfo sets the "updateInfo" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableUpdateInfo(s *string) *AppVersionUpdateOne {
	if s != nil {
		avuo.SetUpdateInfo(*s)
	}
	return avuo
}

// ClearUpdateInfo clears the value of the "updateInfo" field.
func (avuo *AppVersionUpdateOne) ClearUpdateInfo() *AppVersionUpdateOne {
	avuo.mutation.ClearUpdateInfo()
	return avuo
}

// SetDownloadUrl sets the "downloadUrl" field.
func (avuo *AppVersionUpdateOne) SetDownloadUrl(s string) *AppVersionUpdateOne {
	avuo.mutation.SetDownloadUrl(s)
	return avuo
}

// SetNillableDownloadUrl sets the "downloadUrl" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableDownloadUrl(s *string) *AppVersionUpdateOne {
	if s != nil {
		avuo.SetDownloadUrl(*s)
	}
	return avuo
}

// ClearDownloadUrl clears the value of the "downloadUrl" field.
func (avuo *AppVersionUpdateOne) ClearDownloadUrl() *AppVersionUpdateOne {
	avuo.mutation.ClearDownloadUrl()
	return avuo
}

// SetPlatform sets the "platform" field.
func (avuo *AppVersionUpdateOne) SetPlatform(s string) *AppVersionUpdateOne {
	avuo.mutation.SetPlatform(s)
	return avuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillablePlatform(s *string) *AppVersionUpdateOne {
	if s != nil {
		avuo.SetPlatform(*s)
	}
	return avuo
}

// ClearPlatform clears the value of the "platform" field.
func (avuo *AppVersionUpdateOne) ClearPlatform() *AppVersionUpdateOne {
	avuo.mutation.ClearPlatform()
	return avuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (avuo *AppVersionUpdateOne) SetUpdatedAt(t time.Time) *AppVersionUpdateOne {
	avuo.mutation.SetUpdatedAt(t)
	return avuo
}

// SetCreateBy sets the "createBy" field.
func (avuo *AppVersionUpdateOne) SetCreateBy(i int64) *AppVersionUpdateOne {
	avuo.mutation.ResetCreateBy()
	avuo.mutation.SetCreateBy(i)
	return avuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableCreateBy(i *int64) *AppVersionUpdateOne {
	if i != nil {
		avuo.SetCreateBy(*i)
	}
	return avuo
}

// AddCreateBy adds i to the "createBy" field.
func (avuo *AppVersionUpdateOne) AddCreateBy(i int64) *AppVersionUpdateOne {
	avuo.mutation.AddCreateBy(i)
	return avuo
}

// SetUpdateBy sets the "updateBy" field.
func (avuo *AppVersionUpdateOne) SetUpdateBy(i int64) *AppVersionUpdateOne {
	avuo.mutation.ResetUpdateBy()
	avuo.mutation.SetUpdateBy(i)
	return avuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableUpdateBy(i *int64) *AppVersionUpdateOne {
	if i != nil {
		avuo.SetUpdateBy(*i)
	}
	return avuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (avuo *AppVersionUpdateOne) AddUpdateBy(i int64) *AppVersionUpdateOne {
	avuo.mutation.AddUpdateBy(i)
	return avuo
}

// SetTenantId sets the "tenantId" field.
func (avuo *AppVersionUpdateOne) SetTenantId(i int64) *AppVersionUpdateOne {
	avuo.mutation.ResetTenantId()
	avuo.mutation.SetTenantId(i)
	return avuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (avuo *AppVersionUpdateOne) SetNillableTenantId(i *int64) *AppVersionUpdateOne {
	if i != nil {
		avuo.SetTenantId(*i)
	}
	return avuo
}

// AddTenantId adds i to the "tenantId" field.
func (avuo *AppVersionUpdateOne) AddTenantId(i int64) *AppVersionUpdateOne {
	avuo.mutation.AddTenantId(i)
	return avuo
}

// Mutation returns the AppVersionMutation object of the builder.
func (avuo *AppVersionUpdateOne) Mutation() *AppVersionMutation {
	return avuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (avuo *AppVersionUpdateOne) Select(field string, fields ...string) *AppVersionUpdateOne {
	avuo.fields = append([]string{field}, fields...)
	return avuo
}

// Save executes the query and returns the updated AppVersion entity.
func (avuo *AppVersionUpdateOne) Save(ctx context.Context) (*AppVersion, error) {
	var (
		err  error
		node *AppVersion
	)
	avuo.defaults()
	if len(avuo.hooks) == 0 {
		node, err = avuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppVersionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			avuo.mutation = mutation
			node, err = avuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(avuo.hooks) - 1; i >= 0; i-- {
			if avuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = avuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, avuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (avuo *AppVersionUpdateOne) SaveX(ctx context.Context) *AppVersion {
	node, err := avuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (avuo *AppVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := avuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avuo *AppVersionUpdateOne) ExecX(ctx context.Context) {
	if err := avuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (avuo *AppVersionUpdateOne) defaults() {
	if _, ok := avuo.mutation.UpdatedAt(); !ok {
		v := appversion.UpdateDefaultUpdatedAt()
		avuo.mutation.SetUpdatedAt(v)
	}
}

func (avuo *AppVersionUpdateOne) sqlSave(ctx context.Context) (_node *AppVersion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appversion.Table,
			Columns: appversion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: appversion.FieldID,
			},
		},
	}
	id, ok := avuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppVersion.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := avuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appversion.FieldID)
		for _, f := range fields {
			if !appversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := avuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldTitle,
		})
	}
	if avuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appversion.FieldTitle,
		})
	}
	if value, ok := avuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appversion.FieldVersion,
		})
	}
	if value, ok := avuo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: appversion.FieldVersion,
		})
	}
	if avuo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: appversion.FieldVersion,
		})
	}
	if value, ok := avuo.mutation.UpdateInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldUpdateInfo,
		})
	}
	if avuo.mutation.UpdateInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appversion.FieldUpdateInfo,
		})
	}
	if value, ok := avuo.mutation.DownloadUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldDownloadUrl,
		})
	}
	if avuo.mutation.DownloadUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appversion.FieldDownloadUrl,
		})
	}
	if value, ok := avuo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appversion.FieldPlatform,
		})
	}
	if avuo.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: appversion.FieldPlatform,
		})
	}
	if value, ok := avuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appversion.FieldUpdatedAt,
		})
	}
	if value, ok := avuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldCreateBy,
		})
	}
	if value, ok := avuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldCreateBy,
		})
	}
	if value, ok := avuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldUpdateBy,
		})
	}
	if value, ok := avuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldUpdateBy,
		})
	}
	if value, ok := avuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldTenantId,
		})
	}
	if value, ok := avuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appversion.FieldTenantId,
		})
	}
	_node = &AppVersion{config: avuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, avuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
