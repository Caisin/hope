// Code generated by Caisin. DO NOT EDIT.
// source: apps/param/internal/data/ent/schema/user_resource_record.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/param/userresourcerecord/v1"
	"hope/apps/param/internal/data/ent"
)

func UserResourceRecordUpdateReq2Data(v *v1.UserResourceRecordUpdateReq) *ent.UserResourceRecord {
	if v == nil {
		return nil
	}
	return &ent.UserResourceRecord{
		ID:         v.Id,
		UserId:     v.UserId,
		ResId:      v.ResId,
		Def:        v.Def,
		Name:       v.Name,
		URL:        v.Url,
		ResType:    v.ResType,
		Remark:     v.Remark,
		State:      v.State,
		EffectTime: v.EffectTime.AsTime(),
	}
}

func UserResourceRecordData2UpdateReq(v *ent.UserResourceRecord) *v1.UserResourceRecordUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.UserResourceRecordUpdateReq{
		Id:         v.ID,
		UserId:     v.UserId,
		ResId:      v.ResId,
		Def:        v.Def,
		Name:       v.Name,
		Url:        v.URL,
		ResType:    v.ResType,
		Remark:     v.Remark,
		State:      v.State,
		EffectTime: timestamppb.New(v.EffectTime),
	}
}

func UserResourceRecordCreateReq2Data(v *v1.UserResourceRecordCreateReq) *ent.UserResourceRecord {
	if v == nil {
		return nil
	}
	return &ent.UserResourceRecord{
		UserId:     v.UserId,
		ResId:      v.ResId,
		Def:        v.Def,
		Name:       v.Name,
		URL:        v.Url,
		ResType:    v.ResType,
		Remark:     v.Remark,
		State:      v.State,
		EffectTime: v.EffectTime.AsTime(),
	}
}

func UserResourceRecordData2CreateReq(v *ent.UserResourceRecord) *v1.UserResourceRecordCreateReq {
	if v == nil {
		return nil
	}
	return &v1.UserResourceRecordCreateReq{
		UserId:     v.UserId,
		ResId:      v.ResId,
		Def:        v.Def,
		Name:       v.Name,
		Url:        v.URL,
		ResType:    v.ResType,
		Remark:     v.Remark,
		State:      v.State,
		EffectTime: timestamppb.New(v.EffectTime),
	}
}

func UserResourceRecordReq2Data(v *v1.UserResourceRecordReq) *ent.UserResourceRecord {
	if v == nil {
		return nil
	}
	return &ent.UserResourceRecord{
		UserId:     v.UserId,
		ResId:      v.ResId,
		Def:        v.Def,
		Name:       v.Name,
		URL:        v.Url,
		ResType:    v.ResType,
		Remark:     v.Remark,
		State:      v.State,
		EffectTime: v.EffectTime.AsTime(),
	}
}

func UserResourceRecordData2Req(v *ent.UserResourceRecord) *v1.UserResourceRecordReq {
	if v == nil {
		return nil
	}
	return &v1.UserResourceRecordReq{
		UserId:     v.UserId,
		ResId:      v.ResId,
		Def:        v.Def,
		Name:       v.Name,
		Url:        v.URL,
		ResType:    v.ResType,
		Remark:     v.Remark,
		State:      v.State,
		EffectTime: timestamppb.New(v.EffectTime),
	}
}

func UserResourceRecordReply2Data(v *v1.UserResourceRecordReply) *ent.UserResourceRecord {
	if v == nil {
		return nil
	}
	return &ent.UserResourceRecord{
		ID:          v.Id,
		UserId:      v.UserId,
		ResId:       v.ResId,
		Def:         v.Def,
		Name:        v.Name,
		URL:         v.Url,
		ResType:     v.ResType,
		Remark:      v.Remark,
		State:       v.State,
		EffectTime:  v.EffectTime.AsTime(),
		ExpiredTime: v.ExpiredTime.AsTime(),
		CreatedAt:   v.CreatedAt.AsTime(),
		UpdatedAt:   v.UpdatedAt.AsTime(),
		CreateBy:    v.CreateBy,
		UpdateBy:    v.UpdateBy,
		TenantId:    v.TenantId,
	}
}

func UserResourceRecordData2Reply(v *ent.UserResourceRecord) *v1.UserResourceRecordReply {
	if v == nil {
		return nil
	}
	return &v1.UserResourceRecordReply{
		Id:          v.ID,
		UserId:      v.UserId,
		ResId:       v.ResId,
		Def:         v.Def,
		Name:        v.Name,
		Url:         v.URL,
		ResType:     v.ResType,
		Remark:      v.Remark,
		State:       v.State,
		EffectTime:  timestamppb.New(v.EffectTime),
		ExpiredTime: timestamppb.New(v.ExpiredTime),
		CreatedAt:   timestamppb.New(v.CreatedAt),
		UpdatedAt:   timestamppb.New(v.UpdatedAt),
		CreateBy:    v.CreateBy,
		UpdateBy:    v.UpdateBy,
		TenantId:    v.TenantId,
	}
}

func UserResourceRecordUpdateReply2Data(v *v1.UserResourceRecordUpdateReply) *ent.UserResourceRecord {
	if v == nil {
		return nil
	}
	return &ent.UserResourceRecord{
		ID:         v.Id,
		UserId:     v.UserId,
		ResId:      v.ResId,
		Def:        v.Def,
		Name:       v.Name,
		URL:        v.Url,
		ResType:    v.ResType,
		Remark:     v.Remark,
		State:      v.State,
		EffectTime: v.EffectTime.AsTime(),
	}
}

func UserResourceRecordData2UpdateReply(v *ent.UserResourceRecord) *v1.UserResourceRecordUpdateReply {
	if v == nil {
		return nil
	}
	return &v1.UserResourceRecordUpdateReply{
		Id:         v.ID,
		UserId:     v.UserId,
		ResId:      v.ResId,
		Def:        v.Def,
		Name:       v.Name,
		Url:        v.URL,
		ResType:    v.ResType,
		Remark:     v.Remark,
		State:      v.State,
		EffectTime: timestamppb.New(v.EffectTime),
	}
}

func UserResourceRecordCreateReply2Data(v *v1.UserResourceRecordCreateReply) *ent.UserResourceRecord {
	if v == nil {
		return nil
	}
	return &ent.UserResourceRecord{
		ID:          v.Id,
		UserId:      v.UserId,
		ResId:       v.ResId,
		Def:         v.Def,
		Name:        v.Name,
		URL:         v.Url,
		ResType:     v.ResType,
		Remark:      v.Remark,
		State:       v.State,
		EffectTime:  v.EffectTime.AsTime(),
		ExpiredTime: v.ExpiredTime.AsTime(),
		CreatedAt:   v.CreatedAt.AsTime(),
		UpdatedAt:   v.UpdatedAt.AsTime(),
		CreateBy:    v.CreateBy,
		UpdateBy:    v.UpdateBy,
		TenantId:    v.TenantId,
	}
}

func UserResourceRecordData2CreateReply(v *ent.UserResourceRecord) *v1.UserResourceRecordCreateReply {
	if v == nil {
		return nil
	}
	return &v1.UserResourceRecordCreateReply{
		Id:          v.ID,
		UserId:      v.UserId,
		ResId:       v.ResId,
		Def:         v.Def,
		Name:        v.Name,
		Url:         v.URL,
		ResType:     v.ResType,
		Remark:      v.Remark,
		State:       v.State,
		EffectTime:  timestamppb.New(v.EffectTime),
		ExpiredTime: timestamppb.New(v.ExpiredTime),
		CreatedAt:   timestamppb.New(v.CreatedAt),
		UpdatedAt:   timestamppb.New(v.UpdatedAt),
		CreateBy:    v.CreateBy,
		UpdateBy:    v.UpdateBy,
		TenantId:    v.TenantId,
	}
}
