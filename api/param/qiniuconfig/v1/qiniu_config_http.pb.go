// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type QiniuConfigHTTPServer interface {
	BatchDeleteQiniuConfig(context.Context, *QiniuConfigBatchDeleteReq) (*QiniuConfigDeleteReply, error)
	CreateQiniuConfig(context.Context, *QiniuConfigCreateReq) (*QiniuConfigCreateReply, error)
	DeleteQiniuConfig(context.Context, *QiniuConfigDeleteReq) (*QiniuConfigDeleteReply, error)
	GetPageQiniuConfig(context.Context, *QiniuConfigPageReq) (*QiniuConfigPageReply, error)
	GetQiniuConfig(context.Context, *QiniuConfigReq) (*QiniuConfigReply, error)
	UpdateQiniuConfig(context.Context, *QiniuConfigUpdateReq) (*QiniuConfigUpdateReply, error)
}

func RegisterQiniuConfigHTTPServer(s *http.Server, srv QiniuConfigHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/qiniuconfig/page", _QiniuConfig_GetPageQiniuConfig0_HTTP_Handler(srv))
	r.GET("/v1/qiniuconfig/{id}", _QiniuConfig_GetQiniuConfig0_HTTP_Handler(srv))
	r.PUT("/v1/qiniuconfig/{id}", _QiniuConfig_UpdateQiniuConfig0_HTTP_Handler(srv))
	r.POST("/v1/qiniuconfig", _QiniuConfig_CreateQiniuConfig0_HTTP_Handler(srv))
	r.DELETE("/v1/qiniuconfig/{id}", _QiniuConfig_DeleteQiniuConfig0_HTTP_Handler(srv))
	r.DELETE("/v1/qiniuconfig", _QiniuConfig_BatchDeleteQiniuConfig0_HTTP_Handler(srv))
}

func _QiniuConfig_GetPageQiniuConfig0_HTTP_Handler(srv QiniuConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QiniuConfigPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/qiniuconfig.v1.QiniuConfig/GetPageQiniuConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageQiniuConfig(ctx, req.(*QiniuConfigPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QiniuConfigPageReply)
		return ctx.Result(200, reply)
	}
}

func _QiniuConfig_GetQiniuConfig0_HTTP_Handler(srv QiniuConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QiniuConfigReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/qiniuconfig.v1.QiniuConfig/GetQiniuConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQiniuConfig(ctx, req.(*QiniuConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QiniuConfigReply)
		return ctx.Result(200, reply)
	}
}

func _QiniuConfig_UpdateQiniuConfig0_HTTP_Handler(srv QiniuConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QiniuConfigUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/qiniuconfig.v1.QiniuConfig/UpdateQiniuConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQiniuConfig(ctx, req.(*QiniuConfigUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QiniuConfigUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _QiniuConfig_CreateQiniuConfig0_HTTP_Handler(srv QiniuConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QiniuConfigCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/qiniuconfig.v1.QiniuConfig/CreateQiniuConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQiniuConfig(ctx, req.(*QiniuConfigCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QiniuConfigCreateReply)
		return ctx.Result(200, reply)
	}
}

func _QiniuConfig_DeleteQiniuConfig0_HTTP_Handler(srv QiniuConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QiniuConfigDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/qiniuconfig.v1.QiniuConfig/DeleteQiniuConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQiniuConfig(ctx, req.(*QiniuConfigDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QiniuConfigDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _QiniuConfig_BatchDeleteQiniuConfig0_HTTP_Handler(srv QiniuConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QiniuConfigBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/qiniuconfig.v1.QiniuConfig/BatchDeleteQiniuConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteQiniuConfig(ctx, req.(*QiniuConfigBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QiniuConfigDeleteReply)
		return ctx.Result(200, reply)
	}
}

type QiniuConfigHTTPClient interface {
	BatchDeleteQiniuConfig(ctx context.Context, req *QiniuConfigBatchDeleteReq, opts ...http.CallOption) (rsp *QiniuConfigDeleteReply, err error)
	CreateQiniuConfig(ctx context.Context, req *QiniuConfigCreateReq, opts ...http.CallOption) (rsp *QiniuConfigCreateReply, err error)
	DeleteQiniuConfig(ctx context.Context, req *QiniuConfigDeleteReq, opts ...http.CallOption) (rsp *QiniuConfigDeleteReply, err error)
	GetPageQiniuConfig(ctx context.Context, req *QiniuConfigPageReq, opts ...http.CallOption) (rsp *QiniuConfigPageReply, err error)
	GetQiniuConfig(ctx context.Context, req *QiniuConfigReq, opts ...http.CallOption) (rsp *QiniuConfigReply, err error)
	UpdateQiniuConfig(ctx context.Context, req *QiniuConfigUpdateReq, opts ...http.CallOption) (rsp *QiniuConfigUpdateReply, err error)
}

type QiniuConfigHTTPClientImpl struct {
	cc *http.Client
}

func NewQiniuConfigHTTPClient(client *http.Client) QiniuConfigHTTPClient {
	return &QiniuConfigHTTPClientImpl{client}
}

func (c *QiniuConfigHTTPClientImpl) BatchDeleteQiniuConfig(ctx context.Context, in *QiniuConfigBatchDeleteReq, opts ...http.CallOption) (*QiniuConfigDeleteReply, error) {
	var out QiniuConfigDeleteReply
	pattern := "/v1/qiniuconfig"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/qiniuconfig.v1.QiniuConfig/BatchDeleteQiniuConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QiniuConfigHTTPClientImpl) CreateQiniuConfig(ctx context.Context, in *QiniuConfigCreateReq, opts ...http.CallOption) (*QiniuConfigCreateReply, error) {
	var out QiniuConfigCreateReply
	pattern := "/v1/qiniuconfig"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/qiniuconfig.v1.QiniuConfig/CreateQiniuConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QiniuConfigHTTPClientImpl) DeleteQiniuConfig(ctx context.Context, in *QiniuConfigDeleteReq, opts ...http.CallOption) (*QiniuConfigDeleteReply, error) {
	var out QiniuConfigDeleteReply
	pattern := "/v1/qiniuconfig/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/qiniuconfig.v1.QiniuConfig/DeleteQiniuConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QiniuConfigHTTPClientImpl) GetPageQiniuConfig(ctx context.Context, in *QiniuConfigPageReq, opts ...http.CallOption) (*QiniuConfigPageReply, error) {
	var out QiniuConfigPageReply
	pattern := "/v1/qiniuconfig/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/qiniuconfig.v1.QiniuConfig/GetPageQiniuConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QiniuConfigHTTPClientImpl) GetQiniuConfig(ctx context.Context, in *QiniuConfigReq, opts ...http.CallOption) (*QiniuConfigReply, error) {
	var out QiniuConfigReply
	pattern := "/v1/qiniuconfig/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/qiniuconfig.v1.QiniuConfig/GetQiniuConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QiniuConfigHTTPClientImpl) UpdateQiniuConfig(ctx context.Context, in *QiniuConfigUpdateReq, opts ...http.CallOption) (*QiniuConfigUpdateReply, error) {
	var out QiniuConfigUpdateReply
	pattern := "/v1/qiniuconfig/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/qiniuconfig.v1.QiniuConfig/UpdateQiniuConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
