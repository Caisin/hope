// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/novelbookshelf/v1/novel_bookshelf.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelBookshelfClient is the client API for NovelBookshelf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelBookshelfClient interface {
	// 分页查询NovelBookshelf
	GetNovelBookshelfPage(ctx context.Context, in *NovelBookshelfPageReq, opts ...grpc.CallOption) (*NovelBookshelfPageReply, error)
	// 获取NovelBookshelf
	GetNovelBookshelf(ctx context.Context, in *NovelBookshelfReq, opts ...grpc.CallOption) (*NovelBookshelfReply, error)
	// 更新NovelBookshelf
	UpdateNovelBookshelf(ctx context.Context, in *NovelBookshelfUpdateReq, opts ...grpc.CallOption) (*NovelBookshelfUpdateReply, error)
	// 创建NovelBookshelf
	CreateNovelBookshelf(ctx context.Context, in *NovelBookshelfCreateReq, opts ...grpc.CallOption) (*NovelBookshelfCreateReply, error)
	// 删除NovelBookshelf
	DeleteNovelBookshelf(ctx context.Context, in *NovelBookshelfDeleteReq, opts ...grpc.CallOption) (*NovelBookshelfDeleteReply, error)
	// 批量删除NovelBookshelf
	BatchDeleteNovelBookshelf(ctx context.Context, in *NovelBookshelfBatchDeleteReq, opts ...grpc.CallOption) (*NovelBookshelfDeleteReply, error)
}

type novelBookshelfClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelBookshelfClient(cc grpc.ClientConnInterface) NovelBookshelfClient {
	return &novelBookshelfClient{cc}
}

func (c *novelBookshelfClient) GetNovelBookshelfPage(ctx context.Context, in *NovelBookshelfPageReq, opts ...grpc.CallOption) (*NovelBookshelfPageReply, error) {
	out := new(NovelBookshelfPageReply)
	err := c.cc.Invoke(ctx, "/novelbookshelf.v1.NovelBookshelf/GetNovelBookshelfPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBookshelfClient) GetNovelBookshelf(ctx context.Context, in *NovelBookshelfReq, opts ...grpc.CallOption) (*NovelBookshelfReply, error) {
	out := new(NovelBookshelfReply)
	err := c.cc.Invoke(ctx, "/novelbookshelf.v1.NovelBookshelf/GetNovelBookshelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBookshelfClient) UpdateNovelBookshelf(ctx context.Context, in *NovelBookshelfUpdateReq, opts ...grpc.CallOption) (*NovelBookshelfUpdateReply, error) {
	out := new(NovelBookshelfUpdateReply)
	err := c.cc.Invoke(ctx, "/novelbookshelf.v1.NovelBookshelf/UpdateNovelBookshelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBookshelfClient) CreateNovelBookshelf(ctx context.Context, in *NovelBookshelfCreateReq, opts ...grpc.CallOption) (*NovelBookshelfCreateReply, error) {
	out := new(NovelBookshelfCreateReply)
	err := c.cc.Invoke(ctx, "/novelbookshelf.v1.NovelBookshelf/CreateNovelBookshelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBookshelfClient) DeleteNovelBookshelf(ctx context.Context, in *NovelBookshelfDeleteReq, opts ...grpc.CallOption) (*NovelBookshelfDeleteReply, error) {
	out := new(NovelBookshelfDeleteReply)
	err := c.cc.Invoke(ctx, "/novelbookshelf.v1.NovelBookshelf/DeleteNovelBookshelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBookshelfClient) BatchDeleteNovelBookshelf(ctx context.Context, in *NovelBookshelfBatchDeleteReq, opts ...grpc.CallOption) (*NovelBookshelfDeleteReply, error) {
	out := new(NovelBookshelfDeleteReply)
	err := c.cc.Invoke(ctx, "/novelbookshelf.v1.NovelBookshelf/BatchDeleteNovelBookshelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelBookshelfServer is the server API for NovelBookshelf service.
// All implementations must embed UnimplementedNovelBookshelfServer
// for forward compatibility
type NovelBookshelfServer interface {
	// 分页查询NovelBookshelf
	GetNovelBookshelfPage(context.Context, *NovelBookshelfPageReq) (*NovelBookshelfPageReply, error)
	// 获取NovelBookshelf
	GetNovelBookshelf(context.Context, *NovelBookshelfReq) (*NovelBookshelfReply, error)
	// 更新NovelBookshelf
	UpdateNovelBookshelf(context.Context, *NovelBookshelfUpdateReq) (*NovelBookshelfUpdateReply, error)
	// 创建NovelBookshelf
	CreateNovelBookshelf(context.Context, *NovelBookshelfCreateReq) (*NovelBookshelfCreateReply, error)
	// 删除NovelBookshelf
	DeleteNovelBookshelf(context.Context, *NovelBookshelfDeleteReq) (*NovelBookshelfDeleteReply, error)
	// 批量删除NovelBookshelf
	BatchDeleteNovelBookshelf(context.Context, *NovelBookshelfBatchDeleteReq) (*NovelBookshelfDeleteReply, error)
	mustEmbedUnimplementedNovelBookshelfServer()
}

// UnimplementedNovelBookshelfServer must be embedded to have forward compatible implementations.
type UnimplementedNovelBookshelfServer struct {
}

func (UnimplementedNovelBookshelfServer) GetNovelBookshelfPage(context.Context, *NovelBookshelfPageReq) (*NovelBookshelfPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelBookshelfPage not implemented")
}
func (UnimplementedNovelBookshelfServer) GetNovelBookshelf(context.Context, *NovelBookshelfReq) (*NovelBookshelfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelBookshelf not implemented")
}
func (UnimplementedNovelBookshelfServer) UpdateNovelBookshelf(context.Context, *NovelBookshelfUpdateReq) (*NovelBookshelfUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNovelBookshelf not implemented")
}
func (UnimplementedNovelBookshelfServer) CreateNovelBookshelf(context.Context, *NovelBookshelfCreateReq) (*NovelBookshelfCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNovelBookshelf not implemented")
}
func (UnimplementedNovelBookshelfServer) DeleteNovelBookshelf(context.Context, *NovelBookshelfDeleteReq) (*NovelBookshelfDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNovelBookshelf not implemented")
}
func (UnimplementedNovelBookshelfServer) BatchDeleteNovelBookshelf(context.Context, *NovelBookshelfBatchDeleteReq) (*NovelBookshelfDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNovelBookshelf not implemented")
}
func (UnimplementedNovelBookshelfServer) mustEmbedUnimplementedNovelBookshelfServer() {}

// UnsafeNovelBookshelfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelBookshelfServer will
// result in compilation errors.
type UnsafeNovelBookshelfServer interface {
	mustEmbedUnimplementedNovelBookshelfServer()
}

func RegisterNovelBookshelfServer(s grpc.ServiceRegistrar, srv NovelBookshelfServer) {
	s.RegisterService(&NovelBookshelf_ServiceDesc, srv)
}

func _NovelBookshelf_GetNovelBookshelfPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBookshelfPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBookshelfServer).GetNovelBookshelfPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbookshelf.v1.NovelBookshelf/GetNovelBookshelfPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBookshelfServer).GetNovelBookshelfPage(ctx, req.(*NovelBookshelfPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBookshelf_GetNovelBookshelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBookshelfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBookshelfServer).GetNovelBookshelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbookshelf.v1.NovelBookshelf/GetNovelBookshelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBookshelfServer).GetNovelBookshelf(ctx, req.(*NovelBookshelfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBookshelf_UpdateNovelBookshelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBookshelfUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBookshelfServer).UpdateNovelBookshelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbookshelf.v1.NovelBookshelf/UpdateNovelBookshelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBookshelfServer).UpdateNovelBookshelf(ctx, req.(*NovelBookshelfUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBookshelf_CreateNovelBookshelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBookshelfCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBookshelfServer).CreateNovelBookshelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbookshelf.v1.NovelBookshelf/CreateNovelBookshelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBookshelfServer).CreateNovelBookshelf(ctx, req.(*NovelBookshelfCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBookshelf_DeleteNovelBookshelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBookshelfDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBookshelfServer).DeleteNovelBookshelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbookshelf.v1.NovelBookshelf/DeleteNovelBookshelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBookshelfServer).DeleteNovelBookshelf(ctx, req.(*NovelBookshelfDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBookshelf_BatchDeleteNovelBookshelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBookshelfBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBookshelfServer).BatchDeleteNovelBookshelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbookshelf.v1.NovelBookshelf/BatchDeleteNovelBookshelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBookshelfServer).BatchDeleteNovelBookshelf(ctx, req.(*NovelBookshelfBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelBookshelf_ServiceDesc is the grpc.ServiceDesc for NovelBookshelf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelBookshelf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novelbookshelf.v1.NovelBookshelf",
	HandlerType: (*NovelBookshelfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNovelBookshelfPage",
			Handler:    _NovelBookshelf_GetNovelBookshelfPage_Handler,
		},
		{
			MethodName: "GetNovelBookshelf",
			Handler:    _NovelBookshelf_GetNovelBookshelf_Handler,
		},
		{
			MethodName: "UpdateNovelBookshelf",
			Handler:    _NovelBookshelf_UpdateNovelBookshelf_Handler,
		},
		{
			MethodName: "CreateNovelBookshelf",
			Handler:    _NovelBookshelf_CreateNovelBookshelf_Handler,
		},
		{
			MethodName: "DeleteNovelBookshelf",
			Handler:    _NovelBookshelf_DeleteNovelBookshelf_Handler,
		},
		{
			MethodName: "BatchDeleteNovelBookshelf",
			Handler:    _NovelBookshelf_BatchDeleteNovelBookshelf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/novelbookshelf/v1/novel_bookshelf.proto",
}
