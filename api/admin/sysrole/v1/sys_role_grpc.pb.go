// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/sysrole/v1/sys_role.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysRoleClient is the client API for SysRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysRoleClient interface {
	// 分页查询SysRole
	GetPageSysRole(ctx context.Context, in *SysRolePageReq, opts ...grpc.CallOption) (*SysRolePageReply, error)
	// 获取SysRole
	GetSysRole(ctx context.Context, in *SysRoleReq, opts ...grpc.CallOption) (*SysRoleReply, error)
	// 更新SysRole
	UpdateSysRole(ctx context.Context, in *SysRoleUpdateReq, opts ...grpc.CallOption) (*SysRoleUpdateReply, error)
	// 创建SysRole
	CreateSysRole(ctx context.Context, in *SysRoleCreateReq, opts ...grpc.CallOption) (*SysRoleCreateReply, error)
	// 删除SysRole
	DeleteSysRole(ctx context.Context, in *SysRoleDeleteReq, opts ...grpc.CallOption) (*SysRoleDeleteReply, error)
	// 批量删除SysRole
	BatchDeleteSysRole(ctx context.Context, in *SysRoleBatchDeleteReq, opts ...grpc.CallOption) (*SysRoleDeleteReply, error)
}

type sysRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewSysRoleClient(cc grpc.ClientConnInterface) SysRoleClient {
	return &sysRoleClient{cc}
}

func (c *sysRoleClient) GetPageSysRole(ctx context.Context, in *SysRolePageReq, opts ...grpc.CallOption) (*SysRolePageReply, error) {
	out := new(SysRolePageReply)
	err := c.cc.Invoke(ctx, "/sysrole.v1.SysRole/GetPageSysRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) GetSysRole(ctx context.Context, in *SysRoleReq, opts ...grpc.CallOption) (*SysRoleReply, error) {
	out := new(SysRoleReply)
	err := c.cc.Invoke(ctx, "/sysrole.v1.SysRole/GetSysRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) UpdateSysRole(ctx context.Context, in *SysRoleUpdateReq, opts ...grpc.CallOption) (*SysRoleUpdateReply, error) {
	out := new(SysRoleUpdateReply)
	err := c.cc.Invoke(ctx, "/sysrole.v1.SysRole/UpdateSysRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) CreateSysRole(ctx context.Context, in *SysRoleCreateReq, opts ...grpc.CallOption) (*SysRoleCreateReply, error) {
	out := new(SysRoleCreateReply)
	err := c.cc.Invoke(ctx, "/sysrole.v1.SysRole/CreateSysRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) DeleteSysRole(ctx context.Context, in *SysRoleDeleteReq, opts ...grpc.CallOption) (*SysRoleDeleteReply, error) {
	out := new(SysRoleDeleteReply)
	err := c.cc.Invoke(ctx, "/sysrole.v1.SysRole/DeleteSysRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRoleClient) BatchDeleteSysRole(ctx context.Context, in *SysRoleBatchDeleteReq, opts ...grpc.CallOption) (*SysRoleDeleteReply, error) {
	out := new(SysRoleDeleteReply)
	err := c.cc.Invoke(ctx, "/sysrole.v1.SysRole/BatchDeleteSysRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysRoleServer is the server API for SysRole service.
// All implementations must embed UnimplementedSysRoleServer
// for forward compatibility
type SysRoleServer interface {
	// 分页查询SysRole
	GetPageSysRole(context.Context, *SysRolePageReq) (*SysRolePageReply, error)
	// 获取SysRole
	GetSysRole(context.Context, *SysRoleReq) (*SysRoleReply, error)
	// 更新SysRole
	UpdateSysRole(context.Context, *SysRoleUpdateReq) (*SysRoleUpdateReply, error)
	// 创建SysRole
	CreateSysRole(context.Context, *SysRoleCreateReq) (*SysRoleCreateReply, error)
	// 删除SysRole
	DeleteSysRole(context.Context, *SysRoleDeleteReq) (*SysRoleDeleteReply, error)
	// 批量删除SysRole
	BatchDeleteSysRole(context.Context, *SysRoleBatchDeleteReq) (*SysRoleDeleteReply, error)
	mustEmbedUnimplementedSysRoleServer()
}

// UnimplementedSysRoleServer must be embedded to have forward compatible implementations.
type UnimplementedSysRoleServer struct {
}

func (UnimplementedSysRoleServer) GetPageSysRole(context.Context, *SysRolePageReq) (*SysRolePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageSysRole not implemented")
}
func (UnimplementedSysRoleServer) GetSysRole(context.Context, *SysRoleReq) (*SysRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysRole not implemented")
}
func (UnimplementedSysRoleServer) UpdateSysRole(context.Context, *SysRoleUpdateReq) (*SysRoleUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysRole not implemented")
}
func (UnimplementedSysRoleServer) CreateSysRole(context.Context, *SysRoleCreateReq) (*SysRoleCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysRole not implemented")
}
func (UnimplementedSysRoleServer) DeleteSysRole(context.Context, *SysRoleDeleteReq) (*SysRoleDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysRole not implemented")
}
func (UnimplementedSysRoleServer) BatchDeleteSysRole(context.Context, *SysRoleBatchDeleteReq) (*SysRoleDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysRole not implemented")
}
func (UnimplementedSysRoleServer) mustEmbedUnimplementedSysRoleServer() {}

// UnsafeSysRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysRoleServer will
// result in compilation errors.
type UnsafeSysRoleServer interface {
	mustEmbedUnimplementedSysRoleServer()
}

func RegisterSysRoleServer(s grpc.ServiceRegistrar, srv SysRoleServer) {
	s.RegisterService(&SysRole_ServiceDesc, srv)
}

func _SysRole_GetPageSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRolePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).GetPageSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysrole.v1.SysRole/GetPageSysRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).GetPageSysRole(ctx, req.(*SysRolePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_GetSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).GetSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysrole.v1.SysRole/GetSysRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).GetSysRole(ctx, req.(*SysRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_UpdateSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).UpdateSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysrole.v1.SysRole/UpdateSysRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).UpdateSysRole(ctx, req.(*SysRoleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_CreateSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).CreateSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysrole.v1.SysRole/CreateSysRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).CreateSysRole(ctx, req.(*SysRoleCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_DeleteSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).DeleteSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysrole.v1.SysRole/DeleteSysRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).DeleteSysRole(ctx, req.(*SysRoleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRole_BatchDeleteSysRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysRoleBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRoleServer).BatchDeleteSysRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysrole.v1.SysRole/BatchDeleteSysRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRoleServer).BatchDeleteSysRole(ctx, req.(*SysRoleBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysRole_ServiceDesc is the grpc.ServiceDesc for SysRole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysRole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysrole.v1.SysRole",
	HandlerType: (*SysRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageSysRole",
			Handler:    _SysRole_GetPageSysRole_Handler,
		},
		{
			MethodName: "GetSysRole",
			Handler:    _SysRole_GetSysRole_Handler,
		},
		{
			MethodName: "UpdateSysRole",
			Handler:    _SysRole_UpdateSysRole_Handler,
		},
		{
			MethodName: "CreateSysRole",
			Handler:    _SysRole_CreateSysRole_Handler,
		},
		{
			MethodName: "DeleteSysRole",
			Handler:    _SysRole_DeleteSysRole_Handler,
		},
		{
			MethodName: "BatchDeleteSysRole",
			Handler:    _SysRole_BatchDeleteSysRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/sysrole/v1/sys_role.proto",
}
