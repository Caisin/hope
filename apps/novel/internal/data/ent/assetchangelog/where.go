// Code generated by entc, DO NOT EDIT.

package assetchangelog

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OrderId applies equality check predicate on the "orderId" field. It's identical to OrderIdEQ.
func OrderId(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderId), v))
	})
}

// BalanceId applies equality check predicate on the "balanceId" field. It's identical to BalanceIdEQ.
func BalanceId(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalanceId), v))
	})
}

// EventId applies equality check predicate on the "eventId" field. It's identical to EventIdEQ.
func EventId(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventId), v))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// AssetItemId applies equality check predicate on the "assetItemId" field. It's identical to AssetItemIdEQ.
func AssetItemId(v int32) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssetItemId), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// OldBalance applies equality check predicate on the "oldBalance" field. It's identical to OldBalanceEQ.
func OldBalance(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldBalance), v))
	})
}

// NewBalance applies equality check predicate on the "newBalance" field. It's identical to NewBalanceEQ.
func NewBalance(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNewBalance), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// OrderIdEQ applies the EQ predicate on the "orderId" field.
func OrderIdEQ(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderId), v))
	})
}

// OrderIdNEQ applies the NEQ predicate on the "orderId" field.
func OrderIdNEQ(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderId), v))
	})
}

// OrderIdIn applies the In predicate on the "orderId" field.
func OrderIdIn(vs ...string) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderId), v...))
	})
}

// OrderIdNotIn applies the NotIn predicate on the "orderId" field.
func OrderIdNotIn(vs ...string) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderId), v...))
	})
}

// OrderIdGT applies the GT predicate on the "orderId" field.
func OrderIdGT(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderId), v))
	})
}

// OrderIdGTE applies the GTE predicate on the "orderId" field.
func OrderIdGTE(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderId), v))
	})
}

// OrderIdLT applies the LT predicate on the "orderId" field.
func OrderIdLT(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderId), v))
	})
}

// OrderIdLTE applies the LTE predicate on the "orderId" field.
func OrderIdLTE(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderId), v))
	})
}

// OrderIdContains applies the Contains predicate on the "orderId" field.
func OrderIdContains(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderId), v))
	})
}

// OrderIdHasPrefix applies the HasPrefix predicate on the "orderId" field.
func OrderIdHasPrefix(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderId), v))
	})
}

// OrderIdHasSuffix applies the HasSuffix predicate on the "orderId" field.
func OrderIdHasSuffix(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderId), v))
	})
}

// OrderIdIsNil applies the IsNil predicate on the "orderId" field.
func OrderIdIsNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderId)))
	})
}

// OrderIdNotNil applies the NotNil predicate on the "orderId" field.
func OrderIdNotNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderId)))
	})
}

// OrderIdEqualFold applies the EqualFold predicate on the "orderId" field.
func OrderIdEqualFold(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderId), v))
	})
}

// OrderIdContainsFold applies the ContainsFold predicate on the "orderId" field.
func OrderIdContainsFold(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderId), v))
	})
}

// BalanceIdEQ applies the EQ predicate on the "balanceId" field.
func BalanceIdEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalanceId), v))
	})
}

// BalanceIdNEQ applies the NEQ predicate on the "balanceId" field.
func BalanceIdNEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalanceId), v))
	})
}

// BalanceIdIn applies the In predicate on the "balanceId" field.
func BalanceIdIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBalanceId), v...))
	})
}

// BalanceIdNotIn applies the NotIn predicate on the "balanceId" field.
func BalanceIdNotIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBalanceId), v...))
	})
}

// BalanceIdGT applies the GT predicate on the "balanceId" field.
func BalanceIdGT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalanceId), v))
	})
}

// BalanceIdGTE applies the GTE predicate on the "balanceId" field.
func BalanceIdGTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalanceId), v))
	})
}

// BalanceIdLT applies the LT predicate on the "balanceId" field.
func BalanceIdLT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalanceId), v))
	})
}

// BalanceIdLTE applies the LTE predicate on the "balanceId" field.
func BalanceIdLTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalanceId), v))
	})
}

// BalanceIdIsNil applies the IsNil predicate on the "balanceId" field.
func BalanceIdIsNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBalanceId)))
	})
}

// BalanceIdNotNil applies the NotNil predicate on the "balanceId" field.
func BalanceIdNotNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBalanceId)))
	})
}

// EventIdEQ applies the EQ predicate on the "eventId" field.
func EventIdEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventId), v))
	})
}

// EventIdNEQ applies the NEQ predicate on the "eventId" field.
func EventIdNEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventId), v))
	})
}

// EventIdIn applies the In predicate on the "eventId" field.
func EventIdIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEventId), v...))
	})
}

// EventIdNotIn applies the NotIn predicate on the "eventId" field.
func EventIdNotIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEventId), v...))
	})
}

// EventIdGT applies the GT predicate on the "eventId" field.
func EventIdGT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventId), v))
	})
}

// EventIdGTE applies the GTE predicate on the "eventId" field.
func EventIdGTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventId), v))
	})
}

// EventIdLT applies the LT predicate on the "eventId" field.
func EventIdLT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventId), v))
	})
}

// EventIdLTE applies the LTE predicate on the "eventId" field.
func EventIdLTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventId), v))
	})
}

// EventIdIsNil applies the IsNil predicate on the "eventId" field.
func EventIdIsNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEventId)))
	})
}

// EventIdNotNil applies the NotNil predicate on the "eventId" field.
func EventIdNotNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEventId)))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// AssetItemIdEQ applies the EQ predicate on the "assetItemId" field.
func AssetItemIdEQ(v int32) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdNEQ applies the NEQ predicate on the "assetItemId" field.
func AssetItemIdNEQ(v int32) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdIn applies the In predicate on the "assetItemId" field.
func AssetItemIdIn(vs ...int32) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAssetItemId), v...))
	})
}

// AssetItemIdNotIn applies the NotIn predicate on the "assetItemId" field.
func AssetItemIdNotIn(vs ...int32) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAssetItemId), v...))
	})
}

// AssetItemIdGT applies the GT predicate on the "assetItemId" field.
func AssetItemIdGT(v int32) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdGTE applies the GTE predicate on the "assetItemId" field.
func AssetItemIdGTE(v int32) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdLT applies the LT predicate on the "assetItemId" field.
func AssetItemIdLT(v int32) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdLTE applies the LTE predicate on the "assetItemId" field.
func AssetItemIdLTE(v int32) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAssetItemId), v))
	})
}

// AssetItemIdIsNil applies the IsNil predicate on the "assetItemId" field.
func AssetItemIdIsNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAssetItemId)))
	})
}

// AssetItemIdNotNil applies the NotNil predicate on the "assetItemId" field.
func AssetItemIdNotNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAssetItemId)))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// OldBalanceEQ applies the EQ predicate on the "oldBalance" field.
func OldBalanceEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldBalance), v))
	})
}

// OldBalanceNEQ applies the NEQ predicate on the "oldBalance" field.
func OldBalanceNEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOldBalance), v))
	})
}

// OldBalanceIn applies the In predicate on the "oldBalance" field.
func OldBalanceIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOldBalance), v...))
	})
}

// OldBalanceNotIn applies the NotIn predicate on the "oldBalance" field.
func OldBalanceNotIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOldBalance), v...))
	})
}

// OldBalanceGT applies the GT predicate on the "oldBalance" field.
func OldBalanceGT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOldBalance), v))
	})
}

// OldBalanceGTE applies the GTE predicate on the "oldBalance" field.
func OldBalanceGTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOldBalance), v))
	})
}

// OldBalanceLT applies the LT predicate on the "oldBalance" field.
func OldBalanceLT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOldBalance), v))
	})
}

// OldBalanceLTE applies the LTE predicate on the "oldBalance" field.
func OldBalanceLTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOldBalance), v))
	})
}

// OldBalanceIsNil applies the IsNil predicate on the "oldBalance" field.
func OldBalanceIsNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOldBalance)))
	})
}

// OldBalanceNotNil applies the NotNil predicate on the "oldBalance" field.
func OldBalanceNotNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOldBalance)))
	})
}

// NewBalanceEQ applies the EQ predicate on the "newBalance" field.
func NewBalanceEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNewBalance), v))
	})
}

// NewBalanceNEQ applies the NEQ predicate on the "newBalance" field.
func NewBalanceNEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNewBalance), v))
	})
}

// NewBalanceIn applies the In predicate on the "newBalance" field.
func NewBalanceIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNewBalance), v...))
	})
}

// NewBalanceNotIn applies the NotIn predicate on the "newBalance" field.
func NewBalanceNotIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNewBalance), v...))
	})
}

// NewBalanceGT applies the GT predicate on the "newBalance" field.
func NewBalanceGT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNewBalance), v))
	})
}

// NewBalanceGTE applies the GTE predicate on the "newBalance" field.
func NewBalanceGTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNewBalance), v))
	})
}

// NewBalanceLT applies the LT predicate on the "newBalance" field.
func NewBalanceLT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNewBalance), v))
	})
}

// NewBalanceLTE applies the LTE predicate on the "newBalance" field.
func NewBalanceLTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNewBalance), v))
	})
}

// NewBalanceIsNil applies the IsNil predicate on the "newBalance" field.
func NewBalanceIsNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNewBalance)))
	})
}

// NewBalanceNotNil applies the NotNil predicate on the "newBalance" field.
func NewBalanceNotNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNewBalance)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.AssetChangeLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.SocialUser) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetChangeLog) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetChangeLog) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetChangeLog) predicate.AssetChangeLog {
	return predicate.AssetChangeLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
