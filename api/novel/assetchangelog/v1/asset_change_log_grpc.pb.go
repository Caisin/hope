// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/assetchangelog/v1/asset_change_log.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetChangeLogClient is the client API for AssetChangeLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetChangeLogClient interface {
	// 分页查询AssetChangeLog
	GetPageAssetChangeLog(ctx context.Context, in *AssetChangeLogPageReq, opts ...grpc.CallOption) (*AssetChangeLogPageReply, error)
	// 获取AssetChangeLog
	GetAssetChangeLog(ctx context.Context, in *AssetChangeLogReq, opts ...grpc.CallOption) (*AssetChangeLogReply, error)
	// 更新AssetChangeLog
	UpdateAssetChangeLog(ctx context.Context, in *AssetChangeLogUpdateReq, opts ...grpc.CallOption) (*AssetChangeLogUpdateReply, error)
	// 创建AssetChangeLog
	CreateAssetChangeLog(ctx context.Context, in *AssetChangeLogCreateReq, opts ...grpc.CallOption) (*AssetChangeLogCreateReply, error)
	// 删除AssetChangeLog
	DeleteAssetChangeLog(ctx context.Context, in *AssetChangeLogDeleteReq, opts ...grpc.CallOption) (*AssetChangeLogDeleteReply, error)
	// 批量删除AssetChangeLog
	BatchDeleteAssetChangeLog(ctx context.Context, in *AssetChangeLogBatchDeleteReq, opts ...grpc.CallOption) (*AssetChangeLogDeleteReply, error)
}

type assetChangeLogClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetChangeLogClient(cc grpc.ClientConnInterface) AssetChangeLogClient {
	return &assetChangeLogClient{cc}
}

func (c *assetChangeLogClient) GetPageAssetChangeLog(ctx context.Context, in *AssetChangeLogPageReq, opts ...grpc.CallOption) (*AssetChangeLogPageReply, error) {
	out := new(AssetChangeLogPageReply)
	err := c.cc.Invoke(ctx, "/assetchangelog.v1.AssetChangeLog/GetPageAssetChangeLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetChangeLogClient) GetAssetChangeLog(ctx context.Context, in *AssetChangeLogReq, opts ...grpc.CallOption) (*AssetChangeLogReply, error) {
	out := new(AssetChangeLogReply)
	err := c.cc.Invoke(ctx, "/assetchangelog.v1.AssetChangeLog/GetAssetChangeLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetChangeLogClient) UpdateAssetChangeLog(ctx context.Context, in *AssetChangeLogUpdateReq, opts ...grpc.CallOption) (*AssetChangeLogUpdateReply, error) {
	out := new(AssetChangeLogUpdateReply)
	err := c.cc.Invoke(ctx, "/assetchangelog.v1.AssetChangeLog/UpdateAssetChangeLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetChangeLogClient) CreateAssetChangeLog(ctx context.Context, in *AssetChangeLogCreateReq, opts ...grpc.CallOption) (*AssetChangeLogCreateReply, error) {
	out := new(AssetChangeLogCreateReply)
	err := c.cc.Invoke(ctx, "/assetchangelog.v1.AssetChangeLog/CreateAssetChangeLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetChangeLogClient) DeleteAssetChangeLog(ctx context.Context, in *AssetChangeLogDeleteReq, opts ...grpc.CallOption) (*AssetChangeLogDeleteReply, error) {
	out := new(AssetChangeLogDeleteReply)
	err := c.cc.Invoke(ctx, "/assetchangelog.v1.AssetChangeLog/DeleteAssetChangeLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetChangeLogClient) BatchDeleteAssetChangeLog(ctx context.Context, in *AssetChangeLogBatchDeleteReq, opts ...grpc.CallOption) (*AssetChangeLogDeleteReply, error) {
	out := new(AssetChangeLogDeleteReply)
	err := c.cc.Invoke(ctx, "/assetchangelog.v1.AssetChangeLog/BatchDeleteAssetChangeLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetChangeLogServer is the server API for AssetChangeLog service.
// All implementations must embed UnimplementedAssetChangeLogServer
// for forward compatibility
type AssetChangeLogServer interface {
	// 分页查询AssetChangeLog
	GetPageAssetChangeLog(context.Context, *AssetChangeLogPageReq) (*AssetChangeLogPageReply, error)
	// 获取AssetChangeLog
	GetAssetChangeLog(context.Context, *AssetChangeLogReq) (*AssetChangeLogReply, error)
	// 更新AssetChangeLog
	UpdateAssetChangeLog(context.Context, *AssetChangeLogUpdateReq) (*AssetChangeLogUpdateReply, error)
	// 创建AssetChangeLog
	CreateAssetChangeLog(context.Context, *AssetChangeLogCreateReq) (*AssetChangeLogCreateReply, error)
	// 删除AssetChangeLog
	DeleteAssetChangeLog(context.Context, *AssetChangeLogDeleteReq) (*AssetChangeLogDeleteReply, error)
	// 批量删除AssetChangeLog
	BatchDeleteAssetChangeLog(context.Context, *AssetChangeLogBatchDeleteReq) (*AssetChangeLogDeleteReply, error)
	mustEmbedUnimplementedAssetChangeLogServer()
}

// UnimplementedAssetChangeLogServer must be embedded to have forward compatible implementations.
type UnimplementedAssetChangeLogServer struct {
}

func (UnimplementedAssetChangeLogServer) GetPageAssetChangeLog(context.Context, *AssetChangeLogPageReq) (*AssetChangeLogPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageAssetChangeLog not implemented")
}
func (UnimplementedAssetChangeLogServer) GetAssetChangeLog(context.Context, *AssetChangeLogReq) (*AssetChangeLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetChangeLog not implemented")
}
func (UnimplementedAssetChangeLogServer) UpdateAssetChangeLog(context.Context, *AssetChangeLogUpdateReq) (*AssetChangeLogUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetChangeLog not implemented")
}
func (UnimplementedAssetChangeLogServer) CreateAssetChangeLog(context.Context, *AssetChangeLogCreateReq) (*AssetChangeLogCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetChangeLog not implemented")
}
func (UnimplementedAssetChangeLogServer) DeleteAssetChangeLog(context.Context, *AssetChangeLogDeleteReq) (*AssetChangeLogDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssetChangeLog not implemented")
}
func (UnimplementedAssetChangeLogServer) BatchDeleteAssetChangeLog(context.Context, *AssetChangeLogBatchDeleteReq) (*AssetChangeLogDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteAssetChangeLog not implemented")
}
func (UnimplementedAssetChangeLogServer) mustEmbedUnimplementedAssetChangeLogServer() {}

// UnsafeAssetChangeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetChangeLogServer will
// result in compilation errors.
type UnsafeAssetChangeLogServer interface {
	mustEmbedUnimplementedAssetChangeLogServer()
}

func RegisterAssetChangeLogServer(s grpc.ServiceRegistrar, srv AssetChangeLogServer) {
	s.RegisterService(&AssetChangeLog_ServiceDesc, srv)
}

func _AssetChangeLog_GetPageAssetChangeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetChangeLogPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetChangeLogServer).GetPageAssetChangeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetchangelog.v1.AssetChangeLog/GetPageAssetChangeLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetChangeLogServer).GetPageAssetChangeLog(ctx, req.(*AssetChangeLogPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetChangeLog_GetAssetChangeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetChangeLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetChangeLogServer).GetAssetChangeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetchangelog.v1.AssetChangeLog/GetAssetChangeLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetChangeLogServer).GetAssetChangeLog(ctx, req.(*AssetChangeLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetChangeLog_UpdateAssetChangeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetChangeLogUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetChangeLogServer).UpdateAssetChangeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetchangelog.v1.AssetChangeLog/UpdateAssetChangeLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetChangeLogServer).UpdateAssetChangeLog(ctx, req.(*AssetChangeLogUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetChangeLog_CreateAssetChangeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetChangeLogCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetChangeLogServer).CreateAssetChangeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetchangelog.v1.AssetChangeLog/CreateAssetChangeLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetChangeLogServer).CreateAssetChangeLog(ctx, req.(*AssetChangeLogCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetChangeLog_DeleteAssetChangeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetChangeLogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetChangeLogServer).DeleteAssetChangeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetchangelog.v1.AssetChangeLog/DeleteAssetChangeLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetChangeLogServer).DeleteAssetChangeLog(ctx, req.(*AssetChangeLogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetChangeLog_BatchDeleteAssetChangeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetChangeLogBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetChangeLogServer).BatchDeleteAssetChangeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assetchangelog.v1.AssetChangeLog/BatchDeleteAssetChangeLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetChangeLogServer).BatchDeleteAssetChangeLog(ctx, req.(*AssetChangeLogBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetChangeLog_ServiceDesc is the grpc.ServiceDesc for AssetChangeLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetChangeLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assetchangelog.v1.AssetChangeLog",
	HandlerType: (*AssetChangeLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageAssetChangeLog",
			Handler:    _AssetChangeLog_GetPageAssetChangeLog_Handler,
		},
		{
			MethodName: "GetAssetChangeLog",
			Handler:    _AssetChangeLog_GetAssetChangeLog_Handler,
		},
		{
			MethodName: "UpdateAssetChangeLog",
			Handler:    _AssetChangeLog_UpdateAssetChangeLog_Handler,
		},
		{
			MethodName: "CreateAssetChangeLog",
			Handler:    _AssetChangeLog_CreateAssetChangeLog_Handler,
		},
		{
			MethodName: "DeleteAssetChangeLog",
			Handler:    _AssetChangeLog_DeleteAssetChangeLog_Handler,
		},
		{
			MethodName: "BatchDeleteAssetChangeLog",
			Handler:    _AssetChangeLog_BatchDeleteAssetChangeLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/assetchangelog/v1/asset_change_log.proto",
}
