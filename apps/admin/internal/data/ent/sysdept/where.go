// Code generated by entc, DO NOT EDIT.

package sysdept

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DeptPath applies equality check predicate on the "deptPath" field. It's identical to DeptPathEQ.
func DeptPath(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptPath), v))
	})
}

// DeptName applies equality check predicate on the "deptName" field. It's identical to DeptNameEQ.
func DeptName(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptName), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// Leader applies equality check predicate on the "leader" field. It's identical to LeaderEQ.
func Leader(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeader), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// DeptPathEQ applies the EQ predicate on the "deptPath" field.
func DeptPathEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptPath), v))
	})
}

// DeptPathNEQ applies the NEQ predicate on the "deptPath" field.
func DeptPathNEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeptPath), v))
	})
}

// DeptPathIn applies the In predicate on the "deptPath" field.
func DeptPathIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeptPath), v...))
	})
}

// DeptPathNotIn applies the NotIn predicate on the "deptPath" field.
func DeptPathNotIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeptPath), v...))
	})
}

// DeptPathGT applies the GT predicate on the "deptPath" field.
func DeptPathGT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeptPath), v))
	})
}

// DeptPathGTE applies the GTE predicate on the "deptPath" field.
func DeptPathGTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeptPath), v))
	})
}

// DeptPathLT applies the LT predicate on the "deptPath" field.
func DeptPathLT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeptPath), v))
	})
}

// DeptPathLTE applies the LTE predicate on the "deptPath" field.
func DeptPathLTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeptPath), v))
	})
}

// DeptPathContains applies the Contains predicate on the "deptPath" field.
func DeptPathContains(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeptPath), v))
	})
}

// DeptPathHasPrefix applies the HasPrefix predicate on the "deptPath" field.
func DeptPathHasPrefix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeptPath), v))
	})
}

// DeptPathHasSuffix applies the HasSuffix predicate on the "deptPath" field.
func DeptPathHasSuffix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeptPath), v))
	})
}

// DeptPathIsNil applies the IsNil predicate on the "deptPath" field.
func DeptPathIsNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeptPath)))
	})
}

// DeptPathNotNil applies the NotNil predicate on the "deptPath" field.
func DeptPathNotNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeptPath)))
	})
}

// DeptPathEqualFold applies the EqualFold predicate on the "deptPath" field.
func DeptPathEqualFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeptPath), v))
	})
}

// DeptPathContainsFold applies the ContainsFold predicate on the "deptPath" field.
func DeptPathContainsFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeptPath), v))
	})
}

// DeptNameEQ applies the EQ predicate on the "deptName" field.
func DeptNameEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptName), v))
	})
}

// DeptNameNEQ applies the NEQ predicate on the "deptName" field.
func DeptNameNEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeptName), v))
	})
}

// DeptNameIn applies the In predicate on the "deptName" field.
func DeptNameIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeptName), v...))
	})
}

// DeptNameNotIn applies the NotIn predicate on the "deptName" field.
func DeptNameNotIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeptName), v...))
	})
}

// DeptNameGT applies the GT predicate on the "deptName" field.
func DeptNameGT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeptName), v))
	})
}

// DeptNameGTE applies the GTE predicate on the "deptName" field.
func DeptNameGTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeptName), v))
	})
}

// DeptNameLT applies the LT predicate on the "deptName" field.
func DeptNameLT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeptName), v))
	})
}

// DeptNameLTE applies the LTE predicate on the "deptName" field.
func DeptNameLTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeptName), v))
	})
}

// DeptNameContains applies the Contains predicate on the "deptName" field.
func DeptNameContains(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeptName), v))
	})
}

// DeptNameHasPrefix applies the HasPrefix predicate on the "deptName" field.
func DeptNameHasPrefix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeptName), v))
	})
}

// DeptNameHasSuffix applies the HasSuffix predicate on the "deptName" field.
func DeptNameHasSuffix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeptName), v))
	})
}

// DeptNameIsNil applies the IsNil predicate on the "deptName" field.
func DeptNameIsNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeptName)))
	})
}

// DeptNameNotNil applies the NotNil predicate on the "deptName" field.
func DeptNameNotNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeptName)))
	})
}

// DeptNameEqualFold applies the EqualFold predicate on the "deptName" field.
func DeptNameEqualFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeptName), v))
	})
}

// DeptNameContainsFold applies the ContainsFold predicate on the "deptName" field.
func DeptNameContainsFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeptName), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int32) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int32) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// SortIsNil applies the IsNil predicate on the "sort" field.
func SortIsNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSort)))
	})
}

// SortNotNil applies the NotNil predicate on the "sort" field.
func SortNotNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSort)))
	})
}

// LeaderEQ applies the EQ predicate on the "leader" field.
func LeaderEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeader), v))
	})
}

// LeaderNEQ applies the NEQ predicate on the "leader" field.
func LeaderNEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeader), v))
	})
}

// LeaderIn applies the In predicate on the "leader" field.
func LeaderIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLeader), v...))
	})
}

// LeaderNotIn applies the NotIn predicate on the "leader" field.
func LeaderNotIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLeader), v...))
	})
}

// LeaderGT applies the GT predicate on the "leader" field.
func LeaderGT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeader), v))
	})
}

// LeaderGTE applies the GTE predicate on the "leader" field.
func LeaderGTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeader), v))
	})
}

// LeaderLT applies the LT predicate on the "leader" field.
func LeaderLT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeader), v))
	})
}

// LeaderLTE applies the LTE predicate on the "leader" field.
func LeaderLTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeader), v))
	})
}

// LeaderContains applies the Contains predicate on the "leader" field.
func LeaderContains(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLeader), v))
	})
}

// LeaderHasPrefix applies the HasPrefix predicate on the "leader" field.
func LeaderHasPrefix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLeader), v))
	})
}

// LeaderHasSuffix applies the HasSuffix predicate on the "leader" field.
func LeaderHasSuffix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLeader), v))
	})
}

// LeaderIsNil applies the IsNil predicate on the "leader" field.
func LeaderIsNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLeader)))
	})
}

// LeaderNotNil applies the NotNil predicate on the "leader" field.
func LeaderNotNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLeader)))
	})
}

// LeaderEqualFold applies the EqualFold predicate on the "leader" field.
func LeaderEqualFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLeader), v))
	})
}

// LeaderContainsFold applies the ContainsFold predicate on the "leader" field.
func LeaderContainsFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLeader), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhone)))
	})
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhone)))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmail)))
	})
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmail)))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysDept {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDept(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.SysDept) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildes applies the HasEdge predicate on the "childes" edge.
func HasChildes() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildesTable, ChildesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildesWith applies the HasEdge predicate on the "childes" edge with a given conditions (other predicates).
func HasChildesWith(preds ...predicate.SysDept) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildesTable, ChildesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.SysUser) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysDept) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysDept) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysDept) predicate.SysDept {
	return predicate.SysDept(func(s *sql.Selector) {
		p(s.Not())
	})
}
