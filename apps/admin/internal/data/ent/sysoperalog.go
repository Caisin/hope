// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysoperalog"
	"hope/apps/admin/internal/data/ent/sysuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysOperaLog is the model entity for the SysOperaLog schema.
type SysOperaLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	// 用户ID
	UserId int64 `json:"userId,omitempty"`
	// Title holds the value of the "title" field.
	// 操作模块
	Title string `json:"title,omitempty"`
	// RequestId holds the value of the "requestId" field.
	// 请求ID
	RequestId string `json:"requestId,omitempty"`
	// BusinessType holds the value of the "businessType" field.
	// 操作类型
	BusinessType string `json:"businessType,omitempty"`
	// BusinessTypes holds the value of the "businessTypes" field.
	// BusinessTypes
	BusinessTypes string `json:"businessTypes,omitempty"`
	// Method holds the value of the "method" field.
	// 函数
	Method string `json:"method,omitempty"`
	// RequestMethod holds the value of the "requestMethod" field.
	// 请求方式
	RequestMethod string `json:"requestMethod,omitempty"`
	// OperatorType holds the value of the "operatorType" field.
	// 操作类型
	OperatorType string `json:"operatorType,omitempty"`
	// OperName holds the value of the "operName" field.
	// 操作者
	OperName string `json:"operName,omitempty"`
	// DeptName holds the value of the "deptName" field.
	// 部门名称
	DeptName string `json:"deptName,omitempty"`
	// OperUrl holds the value of the "operUrl" field.
	// 访问地址
	OperUrl string `json:"operUrl,omitempty"`
	// OperIp holds the value of the "operIp" field.
	// 客户端ip
	OperIp string `json:"operIp,omitempty"`
	// Browser holds the value of the "browser" field.
	// 浏览器
	Browser string `json:"browser,omitempty"`
	// Os holds the value of the "os" field.
	// 系统
	Os string `json:"os,omitempty"`
	// Platform holds the value of the "platform" field.
	// 固件
	Platform string `json:"platform,omitempty"`
	// OperLocation holds the value of the "operLocation" field.
	// 访问位置
	OperLocation string `json:"operLocation,omitempty"`
	// OperParam holds the value of the "operParam" field.
	// 请求参数
	OperParam string `json:"operParam,omitempty"`
	// Status holds the value of the "status" field.
	// 操作状态
	Status string `json:"status,omitempty"`
	// OperTime holds the value of the "operTime" field.
	// 操作时间
	OperTime time.Time `json:"operTime,omitempty"`
	// JsonResult holds the value of the "jsonResult" field.
	// 返回数据
	JsonResult string `json:"jsonResult,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// LatencyTime holds the value of the "latencyTime" field.
	// 耗时
	LatencyTime string `json:"latencyTime,omitempty"`
	// UserAgent holds the value of the "userAgent" field.
	// ua
	UserAgent string `json:"userAgent,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysOperaLogQuery when eager-loading is set.
	Edges SysOperaLogEdges `json:"edges"`
}

// SysOperaLogEdges holds the relations/edges for other nodes in the graph.
type SysOperaLogEdges struct {
	// User holds the value of the user edge.
	User *SysUser `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysOperaLogEdges) UserOrErr() (*SysUser, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sysuser.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysOperaLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysoperalog.FieldID, sysoperalog.FieldUserId, sysoperalog.FieldCreateBy, sysoperalog.FieldUpdateBy, sysoperalog.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysoperalog.FieldTitle, sysoperalog.FieldRequestId, sysoperalog.FieldBusinessType, sysoperalog.FieldBusinessTypes, sysoperalog.FieldMethod, sysoperalog.FieldRequestMethod, sysoperalog.FieldOperatorType, sysoperalog.FieldOperName, sysoperalog.FieldDeptName, sysoperalog.FieldOperUrl, sysoperalog.FieldOperIp, sysoperalog.FieldBrowser, sysoperalog.FieldOs, sysoperalog.FieldPlatform, sysoperalog.FieldOperLocation, sysoperalog.FieldOperParam, sysoperalog.FieldStatus, sysoperalog.FieldJsonResult, sysoperalog.FieldRemark, sysoperalog.FieldLatencyTime, sysoperalog.FieldUserAgent:
			values[i] = new(sql.NullString)
		case sysoperalog.FieldOperTime, sysoperalog.FieldCreatedAt, sysoperalog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysOperaLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysOperaLog fields.
func (sol *SysOperaLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysoperalog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sol.ID = int64(value.Int64)
		case sysoperalog.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				sol.UserId = value.Int64
			}
		case sysoperalog.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sol.Title = value.String
			}
		case sysoperalog.FieldRequestId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requestId", values[i])
			} else if value.Valid {
				sol.RequestId = value.String
			}
		case sysoperalog.FieldBusinessType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field businessType", values[i])
			} else if value.Valid {
				sol.BusinessType = value.String
			}
		case sysoperalog.FieldBusinessTypes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field businessTypes", values[i])
			} else if value.Valid {
				sol.BusinessTypes = value.String
			}
		case sysoperalog.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				sol.Method = value.String
			}
		case sysoperalog.FieldRequestMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requestMethod", values[i])
			} else if value.Valid {
				sol.RequestMethod = value.String
			}
		case sysoperalog.FieldOperatorType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operatorType", values[i])
			} else if value.Valid {
				sol.OperatorType = value.String
			}
		case sysoperalog.FieldOperName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operName", values[i])
			} else if value.Valid {
				sol.OperName = value.String
			}
		case sysoperalog.FieldDeptName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deptName", values[i])
			} else if value.Valid {
				sol.DeptName = value.String
			}
		case sysoperalog.FieldOperUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operUrl", values[i])
			} else if value.Valid {
				sol.OperUrl = value.String
			}
		case sysoperalog.FieldOperIp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operIp", values[i])
			} else if value.Valid {
				sol.OperIp = value.String
			}
		case sysoperalog.FieldBrowser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser", values[i])
			} else if value.Valid {
				sol.Browser = value.String
			}
		case sysoperalog.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				sol.Os = value.String
			}
		case sysoperalog.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				sol.Platform = value.String
			}
		case sysoperalog.FieldOperLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operLocation", values[i])
			} else if value.Valid {
				sol.OperLocation = value.String
			}
		case sysoperalog.FieldOperParam:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operParam", values[i])
			} else if value.Valid {
				sol.OperParam = value.String
			}
		case sysoperalog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sol.Status = value.String
			}
		case sysoperalog.FieldOperTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field operTime", values[i])
			} else if value.Valid {
				sol.OperTime = value.Time
			}
		case sysoperalog.FieldJsonResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jsonResult", values[i])
			} else if value.Valid {
				sol.JsonResult = value.String
			}
		case sysoperalog.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sol.Remark = value.String
			}
		case sysoperalog.FieldLatencyTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field latencyTime", values[i])
			} else if value.Valid {
				sol.LatencyTime = value.String
			}
		case sysoperalog.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userAgent", values[i])
			} else if value.Valid {
				sol.UserAgent = value.String
			}
		case sysoperalog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sol.CreatedAt = value.Time
			}
		case sysoperalog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sol.UpdatedAt = value.Time
			}
		case sysoperalog.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sol.CreateBy = value.Int64
			}
		case sysoperalog.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sol.UpdateBy = value.Int64
			}
		case sysoperalog.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sol.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the SysOperaLog entity.
func (sol *SysOperaLog) QueryUser() *SysUserQuery {
	return (&SysOperaLogClient{config: sol.config}).QueryUser(sol)
}

// Update returns a builder for updating this SysOperaLog.
// Note that you need to call SysOperaLog.Unwrap() before calling this method if this SysOperaLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sol *SysOperaLog) Update() *SysOperaLogUpdateOne {
	return (&SysOperaLogClient{config: sol.config}).UpdateOne(sol)
}

// Unwrap unwraps the SysOperaLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sol *SysOperaLog) Unwrap() *SysOperaLog {
	tx, ok := sol.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysOperaLog is not a transactional entity")
	}
	sol.config.driver = tx.drv
	return sol
}

// String implements the fmt.Stringer.
func (sol *SysOperaLog) String() string {
	var builder strings.Builder
	builder.WriteString("SysOperaLog(")
	builder.WriteString(fmt.Sprintf("id=%v", sol.ID))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", sol.UserId))
	builder.WriteString(", title=")
	builder.WriteString(sol.Title)
	builder.WriteString(", requestId=")
	builder.WriteString(sol.RequestId)
	builder.WriteString(", businessType=")
	builder.WriteString(sol.BusinessType)
	builder.WriteString(", businessTypes=")
	builder.WriteString(sol.BusinessTypes)
	builder.WriteString(", method=")
	builder.WriteString(sol.Method)
	builder.WriteString(", requestMethod=")
	builder.WriteString(sol.RequestMethod)
	builder.WriteString(", operatorType=")
	builder.WriteString(sol.OperatorType)
	builder.WriteString(", operName=")
	builder.WriteString(sol.OperName)
	builder.WriteString(", deptName=")
	builder.WriteString(sol.DeptName)
	builder.WriteString(", operUrl=")
	builder.WriteString(sol.OperUrl)
	builder.WriteString(", operIp=")
	builder.WriteString(sol.OperIp)
	builder.WriteString(", browser=")
	builder.WriteString(sol.Browser)
	builder.WriteString(", os=")
	builder.WriteString(sol.Os)
	builder.WriteString(", platform=")
	builder.WriteString(sol.Platform)
	builder.WriteString(", operLocation=")
	builder.WriteString(sol.OperLocation)
	builder.WriteString(", operParam=")
	builder.WriteString(sol.OperParam)
	builder.WriteString(", status=")
	builder.WriteString(sol.Status)
	builder.WriteString(", operTime=")
	builder.WriteString(sol.OperTime.Format(time.ANSIC))
	builder.WriteString(", jsonResult=")
	builder.WriteString(sol.JsonResult)
	builder.WriteString(", remark=")
	builder.WriteString(sol.Remark)
	builder.WriteString(", latencyTime=")
	builder.WriteString(sol.LatencyTime)
	builder.WriteString(", userAgent=")
	builder.WriteString(sol.UserAgent)
	builder.WriteString(", createdAt=")
	builder.WriteString(sol.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sol.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sol.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sol.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sol.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysOperaLogs is a parsable slice of SysOperaLog.
type SysOperaLogs []*SysOperaLog

func (sol SysOperaLogs) config(cfg config) {
	for _i := range sol {
		sol[_i].config = cfg
	}
}
