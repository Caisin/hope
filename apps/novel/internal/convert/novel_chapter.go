// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/novel_chapter.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/novelchapter/v1"
	"hope/apps/novel/internal/data/ent"
)

func NovelChapterUpdateReq2Data(v *v1.NovelChapterUpdateReq) *ent.NovelChapter {
	if v == nil {
		return nil
	}
	return &ent.NovelChapter{
		ID:          v.Id,
		NovelId:     v.NovelId,
		OrderNum:    v.OrderNum,
		ChapterName: v.ChapterName,
		Content:     v.Content,
		MediaKey:    v.MediaKey,
		Duration:    v.Duration,
		PublishTime: v.PublishTime.AsTime(),
		Status:      v.Status,
		IsFree:      v.IsFree,
		Price:       v.Price,
		WordNum:     v.WordNum,
		Remark:      v.Remark,
	}
}

func NovelChapterData2UpdateReq(v *ent.NovelChapter) *v1.NovelChapterUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.NovelChapterUpdateReq{
		Id:          v.ID,
		NovelId:     v.NovelId,
		OrderNum:    v.OrderNum,
		ChapterName: v.ChapterName,
		Content:     v.Content,
		MediaKey:    v.MediaKey,
		Duration:    v.Duration,
		PublishTime: timestamppb.New(v.PublishTime),
		Status:      v.Status,
		IsFree:      v.IsFree,
		Price:       v.Price,
		WordNum:     v.WordNum,
		Remark:      v.Remark,
	}
}

func NovelChapterCreateReq2Data(v *v1.NovelChapterCreateReq) *ent.NovelChapter {
	if v == nil {
		return nil
	}
	return &ent.NovelChapter{
		NovelId:     v.NovelId,
		OrderNum:    v.OrderNum,
		ChapterName: v.ChapterName,
		Content:     v.Content,
		MediaKey:    v.MediaKey,
		Duration:    v.Duration,
		PublishTime: v.PublishTime.AsTime(),
		Status:      v.Status,
		IsFree:      v.IsFree,
		Price:       v.Price,
		WordNum:     v.WordNum,
		Remark:      v.Remark,
	}
}

func NovelChapterData2CreateReq(v *ent.NovelChapter) *v1.NovelChapterCreateReq {
	if v == nil {
		return nil
	}
	return &v1.NovelChapterCreateReq{
		NovelId:     v.NovelId,
		OrderNum:    v.OrderNum,
		ChapterName: v.ChapterName,
		Content:     v.Content,
		MediaKey:    v.MediaKey,
		Duration:    v.Duration,
		PublishTime: timestamppb.New(v.PublishTime),
		Status:      v.Status,
		IsFree:      v.IsFree,
		Price:       v.Price,
		WordNum:     v.WordNum,
		Remark:      v.Remark,
	}
}

func NovelChapterReq2Data(v *v1.NovelChapterReq) *ent.NovelChapter {
	if v == nil {
		return nil
	}
	return &ent.NovelChapter{
		NovelId:     v.NovelId,
		OrderNum:    v.OrderNum,
		ChapterName: v.ChapterName,
		Content:     v.Content,
		MediaKey:    v.MediaKey,
		Duration:    v.Duration,
		PublishTime: v.PublishTime.AsTime(),
		Status:      v.Status,
		IsFree:      v.IsFree,
		Price:       v.Price,
		WordNum:     v.WordNum,
		Remark:      v.Remark,
	}
}

func NovelChapterData2Req(v *ent.NovelChapter) *v1.NovelChapterReq {
	if v == nil {
		return nil
	}
	return &v1.NovelChapterReq{
		NovelId:     v.NovelId,
		OrderNum:    v.OrderNum,
		ChapterName: v.ChapterName,
		Content:     v.Content,
		MediaKey:    v.MediaKey,
		Duration:    v.Duration,
		PublishTime: timestamppb.New(v.PublishTime),
		Status:      v.Status,
		IsFree:      v.IsFree,
		Price:       v.Price,
		WordNum:     v.WordNum,
		Remark:      v.Remark,
	}
}

func NovelChapterData2Reply(v *ent.NovelChapter) *v1.NovelChapterData {
	if v == nil {
		return nil
	}
	return &v1.NovelChapterData{
		Id:          v.ID,
		NovelId:     v.NovelId,
		OrderNum:    v.OrderNum,
		ChapterName: v.ChapterName,
		Content:     v.Content,
		MediaKey:    v.MediaKey,
		Duration:    v.Duration,
		PublishTime: timestamppb.New(v.PublishTime),
		Status:      v.Status,
		IsFree:      v.IsFree,
		Price:       v.Price,
		WordNum:     v.WordNum,
		Remark:      v.Remark,
		CreatedAt:   timestamppb.New(v.CreatedAt),
		UpdatedAt:   timestamppb.New(v.UpdatedAt),
		CreateBy:    v.CreateBy,
		UpdateBy:    v.UpdateBy,
		TenantId:    v.TenantId,
	}
}
