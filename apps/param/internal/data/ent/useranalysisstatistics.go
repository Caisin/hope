// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/param/internal/data/ent/useranalysisstatistics"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserAnalysisStatistics is the model entity for the UserAnalysisStatistics schema.
type UserAnalysisStatistics struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// StatisticsDate holds the value of the "statisticsDate" field.
	// 统计日期
	StatisticsDate string `json:"statisticsDate,omitempty"`
	// AllUserNum holds the value of the "allUserNum" field.
	// 累计注册
	AllUserNum int64 `json:"allUserNum,omitempty"`
	// AllPayment holds the value of the "allPayment" field.
	// 累计充值
	AllPayment int64 `json:"allPayment,omitempty"`
	// AllPayUser holds the value of the "allPayUser" field.
	// 总充值人数
	AllPayUser int64 `json:"allPayUser,omitempty"`
	// AllOrderNum holds the value of the "allOrderNum" field.
	// 总订单数
	AllOrderNum int64 `json:"allOrderNum,omitempty"`
	// DayUserNum holds the value of the "dayUserNum" field.
	// 当日注册人数
	DayUserNum int64 `json:"dayUserNum,omitempty"`
	// DayPayment holds the value of the "dayPayment" field.
	// 当日订单金额
	DayPayment int64 `json:"dayPayment,omitempty"`
	// DayOrderNum holds the value of the "dayOrderNum" field.
	// 当日订单数
	DayOrderNum int64 `json:"dayOrderNum,omitempty"`
	// DayPayUser holds the value of the "dayPayUser" field.
	// 当日充值人数
	DayPayUser int64 `json:"dayPayUser,omitempty"`
	// DayRegPayment holds the value of the "dayRegPayment" field.
	// 当日注册充值
	DayRegPayment int64 `json:"dayRegPayment,omitempty"`
	// DayRegUserNum holds the value of the "dayRegUserNum" field.
	// 当日注册充值人数
	DayRegUserNum int64 `json:"dayRegUserNum,omitempty"`
	// DayRegOrderNum holds the value of the "dayRegOrderNum" field.
	// 当日注册充值笔数
	DayRegOrderNum int64 `json:"dayRegOrderNum,omitempty"`
	// OldRegPayment holds the value of the "oldRegPayment" field.
	// 当日老用户充值
	OldRegPayment int64 `json:"oldRegPayment,omitempty"`
	// OldRegUserNum holds the value of the "oldRegUserNum" field.
	// 当日老用户充值人数
	OldRegUserNum int64 `json:"oldRegUserNum,omitempty"`
	// OldRegOrderNum holds the value of the "oldRegOrderNum" field.
	// 当日老用户充值笔数
	OldRegOrderNum int64 `json:"oldRegOrderNum,omitempty"`
	// PayRate holds the value of the "payRate" field.
	// 付费率=当日充值笔数/当日注册
	PayRate int64 `json:"payRate,omitempty"`
	// Arpu holds the value of the "arpu" field.
	// ARPU(average revenue per user)=充值/注册
	Arpu int64 `json:"arpu,omitempty"`
	// DayRegArpu holds the value of the "dayRegArpu" field.
	// 当日注册充值客单价=当日注册充值/当日注册充值笔数
	DayRegArpu int64 `json:"dayRegArpu,omitempty"`
	// DayArpu holds the value of the "dayArpu" field.
	// 今日充值客单价=今日充值金额/充值笔数
	DayArpu int64 `json:"dayArpu,omitempty"`
	// DayOldArpu holds the value of the "dayOldArpu" field.
	// 老用户充值客单价=老用户充值/老用户充值笔数
	DayOldArpu int64 `json:"dayOldArpu,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAnalysisStatistics) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case useranalysisstatistics.FieldID, useranalysisstatistics.FieldAllUserNum, useranalysisstatistics.FieldAllPayment, useranalysisstatistics.FieldAllPayUser, useranalysisstatistics.FieldAllOrderNum, useranalysisstatistics.FieldDayUserNum, useranalysisstatistics.FieldDayPayment, useranalysisstatistics.FieldDayOrderNum, useranalysisstatistics.FieldDayPayUser, useranalysisstatistics.FieldDayRegPayment, useranalysisstatistics.FieldDayRegUserNum, useranalysisstatistics.FieldDayRegOrderNum, useranalysisstatistics.FieldOldRegPayment, useranalysisstatistics.FieldOldRegUserNum, useranalysisstatistics.FieldOldRegOrderNum, useranalysisstatistics.FieldPayRate, useranalysisstatistics.FieldArpu, useranalysisstatistics.FieldDayRegArpu, useranalysisstatistics.FieldDayArpu, useranalysisstatistics.FieldDayOldArpu, useranalysisstatistics.FieldCreateBy, useranalysisstatistics.FieldUpdateBy, useranalysisstatistics.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case useranalysisstatistics.FieldStatisticsDate:
			values[i] = new(sql.NullString)
		case useranalysisstatistics.FieldCreatedAt, useranalysisstatistics.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserAnalysisStatistics", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAnalysisStatistics fields.
func (uas *UserAnalysisStatistics) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useranalysisstatistics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uas.ID = int64(value.Int64)
		case useranalysisstatistics.FieldStatisticsDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field statisticsDate", values[i])
			} else if value.Valid {
				uas.StatisticsDate = value.String
			}
		case useranalysisstatistics.FieldAllUserNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allUserNum", values[i])
			} else if value.Valid {
				uas.AllUserNum = value.Int64
			}
		case useranalysisstatistics.FieldAllPayment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allPayment", values[i])
			} else if value.Valid {
				uas.AllPayment = value.Int64
			}
		case useranalysisstatistics.FieldAllPayUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allPayUser", values[i])
			} else if value.Valid {
				uas.AllPayUser = value.Int64
			}
		case useranalysisstatistics.FieldAllOrderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allOrderNum", values[i])
			} else if value.Valid {
				uas.AllOrderNum = value.Int64
			}
		case useranalysisstatistics.FieldDayUserNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayUserNum", values[i])
			} else if value.Valid {
				uas.DayUserNum = value.Int64
			}
		case useranalysisstatistics.FieldDayPayment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayPayment", values[i])
			} else if value.Valid {
				uas.DayPayment = value.Int64
			}
		case useranalysisstatistics.FieldDayOrderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayOrderNum", values[i])
			} else if value.Valid {
				uas.DayOrderNum = value.Int64
			}
		case useranalysisstatistics.FieldDayPayUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayPayUser", values[i])
			} else if value.Valid {
				uas.DayPayUser = value.Int64
			}
		case useranalysisstatistics.FieldDayRegPayment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayRegPayment", values[i])
			} else if value.Valid {
				uas.DayRegPayment = value.Int64
			}
		case useranalysisstatistics.FieldDayRegUserNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayRegUserNum", values[i])
			} else if value.Valid {
				uas.DayRegUserNum = value.Int64
			}
		case useranalysisstatistics.FieldDayRegOrderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayRegOrderNum", values[i])
			} else if value.Valid {
				uas.DayRegOrderNum = value.Int64
			}
		case useranalysisstatistics.FieldOldRegPayment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oldRegPayment", values[i])
			} else if value.Valid {
				uas.OldRegPayment = value.Int64
			}
		case useranalysisstatistics.FieldOldRegUserNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oldRegUserNum", values[i])
			} else if value.Valid {
				uas.OldRegUserNum = value.Int64
			}
		case useranalysisstatistics.FieldOldRegOrderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oldRegOrderNum", values[i])
			} else if value.Valid {
				uas.OldRegOrderNum = value.Int64
			}
		case useranalysisstatistics.FieldPayRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payRate", values[i])
			} else if value.Valid {
				uas.PayRate = value.Int64
			}
		case useranalysisstatistics.FieldArpu:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field arpu", values[i])
			} else if value.Valid {
				uas.Arpu = value.Int64
			}
		case useranalysisstatistics.FieldDayRegArpu:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayRegArpu", values[i])
			} else if value.Valid {
				uas.DayRegArpu = value.Int64
			}
		case useranalysisstatistics.FieldDayArpu:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayArpu", values[i])
			} else if value.Valid {
				uas.DayArpu = value.Int64
			}
		case useranalysisstatistics.FieldDayOldArpu:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayOldArpu", values[i])
			} else if value.Valid {
				uas.DayOldArpu = value.Int64
			}
		case useranalysisstatistics.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				uas.CreatedAt = value.Time
			}
		case useranalysisstatistics.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				uas.UpdatedAt = value.Time
			}
		case useranalysisstatistics.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				uas.CreateBy = value.Int64
			}
		case useranalysisstatistics.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				uas.UpdateBy = value.Int64
			}
		case useranalysisstatistics.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				uas.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserAnalysisStatistics.
// Note that you need to call UserAnalysisStatistics.Unwrap() before calling this method if this UserAnalysisStatistics
// was returned from a transaction, and the transaction was committed or rolled back.
func (uas *UserAnalysisStatistics) Update() *UserAnalysisStatisticsUpdateOne {
	return (&UserAnalysisStatisticsClient{config: uas.config}).UpdateOne(uas)
}

// Unwrap unwraps the UserAnalysisStatistics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uas *UserAnalysisStatistics) Unwrap() *UserAnalysisStatistics {
	tx, ok := uas.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAnalysisStatistics is not a transactional entity")
	}
	uas.config.driver = tx.drv
	return uas
}

// String implements the fmt.Stringer.
func (uas *UserAnalysisStatistics) String() string {
	var builder strings.Builder
	builder.WriteString("UserAnalysisStatistics(")
	builder.WriteString(fmt.Sprintf("id=%v", uas.ID))
	builder.WriteString(", statisticsDate=")
	builder.WriteString(uas.StatisticsDate)
	builder.WriteString(", allUserNum=")
	builder.WriteString(fmt.Sprintf("%v", uas.AllUserNum))
	builder.WriteString(", allPayment=")
	builder.WriteString(fmt.Sprintf("%v", uas.AllPayment))
	builder.WriteString(", allPayUser=")
	builder.WriteString(fmt.Sprintf("%v", uas.AllPayUser))
	builder.WriteString(", allOrderNum=")
	builder.WriteString(fmt.Sprintf("%v", uas.AllOrderNum))
	builder.WriteString(", dayUserNum=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayUserNum))
	builder.WriteString(", dayPayment=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayPayment))
	builder.WriteString(", dayOrderNum=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayOrderNum))
	builder.WriteString(", dayPayUser=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayPayUser))
	builder.WriteString(", dayRegPayment=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayRegPayment))
	builder.WriteString(", dayRegUserNum=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayRegUserNum))
	builder.WriteString(", dayRegOrderNum=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayRegOrderNum))
	builder.WriteString(", oldRegPayment=")
	builder.WriteString(fmt.Sprintf("%v", uas.OldRegPayment))
	builder.WriteString(", oldRegUserNum=")
	builder.WriteString(fmt.Sprintf("%v", uas.OldRegUserNum))
	builder.WriteString(", oldRegOrderNum=")
	builder.WriteString(fmt.Sprintf("%v", uas.OldRegOrderNum))
	builder.WriteString(", payRate=")
	builder.WriteString(fmt.Sprintf("%v", uas.PayRate))
	builder.WriteString(", arpu=")
	builder.WriteString(fmt.Sprintf("%v", uas.Arpu))
	builder.WriteString(", dayRegArpu=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayRegArpu))
	builder.WriteString(", dayArpu=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayArpu))
	builder.WriteString(", dayOldArpu=")
	builder.WriteString(fmt.Sprintf("%v", uas.DayOldArpu))
	builder.WriteString(", createdAt=")
	builder.WriteString(uas.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(uas.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", uas.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", uas.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", uas.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// UserAnalysisStatisticsSlice is a parsable slice of UserAnalysisStatistics.
type UserAnalysisStatisticsSlice []*UserAnalysisStatistics

func (uas UserAnalysisStatisticsSlice) config(cfg config) {
	for _i := range uas {
		uas[_i].config = cfg
	}
}
