// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"hope/apps/param/internal/data/ent/migrate"

	"hope/apps/param/internal/data/ent/novelpayconfig"
	"hope/apps/param/internal/data/ent/noveltag"
	"hope/apps/param/internal/data/ent/pageconfig"
	"hope/apps/param/internal/data/ent/qiniuconfig"
	"hope/apps/param/internal/data/ent/resourcegroup"
	"hope/apps/param/internal/data/ent/resourcestorage"
	"hope/apps/param/internal/data/ent/scoreproduct"
	"hope/apps/param/internal/data/ent/task"
	"hope/apps/param/internal/data/ent/useranalysisstatistics"
	"hope/apps/param/internal/data/ent/userconsume"
	"hope/apps/param/internal/data/ent/userresource"
	"hope/apps/param/internal/data/ent/userresourcerecord"
	"hope/apps/param/internal/data/ent/viptype"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// NovelPayConfig is the client for interacting with the NovelPayConfig builders.
	NovelPayConfig *NovelPayConfigClient
	// NovelTag is the client for interacting with the NovelTag builders.
	NovelTag *NovelTagClient
	// PageConfig is the client for interacting with the PageConfig builders.
	PageConfig *PageConfigClient
	// QiniuConfig is the client for interacting with the QiniuConfig builders.
	QiniuConfig *QiniuConfigClient
	// ResourceGroup is the client for interacting with the ResourceGroup builders.
	ResourceGroup *ResourceGroupClient
	// ResourceStorage is the client for interacting with the ResourceStorage builders.
	ResourceStorage *ResourceStorageClient
	// ScoreProduct is the client for interacting with the ScoreProduct builders.
	ScoreProduct *ScoreProductClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// UserAnalysisStatistics is the client for interacting with the UserAnalysisStatistics builders.
	UserAnalysisStatistics *UserAnalysisStatisticsClient
	// UserConsume is the client for interacting with the UserConsume builders.
	UserConsume *UserConsumeClient
	// UserResource is the client for interacting with the UserResource builders.
	UserResource *UserResourceClient
	// UserResourceRecord is the client for interacting with the UserResourceRecord builders.
	UserResourceRecord *UserResourceRecordClient
	// VipType is the client for interacting with the VipType builders.
	VipType *VipTypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.NovelPayConfig = NewNovelPayConfigClient(c.config)
	c.NovelTag = NewNovelTagClient(c.config)
	c.PageConfig = NewPageConfigClient(c.config)
	c.QiniuConfig = NewQiniuConfigClient(c.config)
	c.ResourceGroup = NewResourceGroupClient(c.config)
	c.ResourceStorage = NewResourceStorageClient(c.config)
	c.ScoreProduct = NewScoreProductClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.UserAnalysisStatistics = NewUserAnalysisStatisticsClient(c.config)
	c.UserConsume = NewUserConsumeClient(c.config)
	c.UserResource = NewUserResourceClient(c.config)
	c.UserResourceRecord = NewUserResourceRecordClient(c.config)
	c.VipType = NewVipTypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		NovelPayConfig:         NewNovelPayConfigClient(cfg),
		NovelTag:               NewNovelTagClient(cfg),
		PageConfig:             NewPageConfigClient(cfg),
		QiniuConfig:            NewQiniuConfigClient(cfg),
		ResourceGroup:          NewResourceGroupClient(cfg),
		ResourceStorage:        NewResourceStorageClient(cfg),
		ScoreProduct:           NewScoreProductClient(cfg),
		Task:                   NewTaskClient(cfg),
		UserAnalysisStatistics: NewUserAnalysisStatisticsClient(cfg),
		UserConsume:            NewUserConsumeClient(cfg),
		UserResource:           NewUserResourceClient(cfg),
		UserResourceRecord:     NewUserResourceRecordClient(cfg),
		VipType:                NewVipTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		NovelPayConfig:         NewNovelPayConfigClient(cfg),
		NovelTag:               NewNovelTagClient(cfg),
		PageConfig:             NewPageConfigClient(cfg),
		QiniuConfig:            NewQiniuConfigClient(cfg),
		ResourceGroup:          NewResourceGroupClient(cfg),
		ResourceStorage:        NewResourceStorageClient(cfg),
		ScoreProduct:           NewScoreProductClient(cfg),
		Task:                   NewTaskClient(cfg),
		UserAnalysisStatistics: NewUserAnalysisStatisticsClient(cfg),
		UserConsume:            NewUserConsumeClient(cfg),
		UserResource:           NewUserResourceClient(cfg),
		UserResourceRecord:     NewUserResourceRecordClient(cfg),
		VipType:                NewVipTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		NovelPayConfig.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.NovelPayConfig.Use(hooks...)
	c.NovelTag.Use(hooks...)
	c.PageConfig.Use(hooks...)
	c.QiniuConfig.Use(hooks...)
	c.ResourceGroup.Use(hooks...)
	c.ResourceStorage.Use(hooks...)
	c.ScoreProduct.Use(hooks...)
	c.Task.Use(hooks...)
	c.UserAnalysisStatistics.Use(hooks...)
	c.UserConsume.Use(hooks...)
	c.UserResource.Use(hooks...)
	c.UserResourceRecord.Use(hooks...)
	c.VipType.Use(hooks...)
}

// NovelPayConfigClient is a client for the NovelPayConfig schema.
type NovelPayConfigClient struct {
	config
}

// NewNovelPayConfigClient returns a client for the NovelPayConfig from the given config.
func NewNovelPayConfigClient(c config) *NovelPayConfigClient {
	return &NovelPayConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `novelpayconfig.Hooks(f(g(h())))`.
func (c *NovelPayConfigClient) Use(hooks ...Hook) {
	c.hooks.NovelPayConfig = append(c.hooks.NovelPayConfig, hooks...)
}

// Create returns a create builder for NovelPayConfig.
func (c *NovelPayConfigClient) Create() *NovelPayConfigCreate {
	mutation := newNovelPayConfigMutation(c.config, OpCreate)
	return &NovelPayConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelPayConfig entities.
func (c *NovelPayConfigClient) CreateBulk(builders ...*NovelPayConfigCreate) *NovelPayConfigCreateBulk {
	return &NovelPayConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelPayConfig.
func (c *NovelPayConfigClient) Update() *NovelPayConfigUpdate {
	mutation := newNovelPayConfigMutation(c.config, OpUpdate)
	return &NovelPayConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelPayConfigClient) UpdateOne(npc *NovelPayConfig) *NovelPayConfigUpdateOne {
	mutation := newNovelPayConfigMutation(c.config, OpUpdateOne, withNovelPayConfig(npc))
	return &NovelPayConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelPayConfigClient) UpdateOneID(id int64) *NovelPayConfigUpdateOne {
	mutation := newNovelPayConfigMutation(c.config, OpUpdateOne, withNovelPayConfigID(id))
	return &NovelPayConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelPayConfig.
func (c *NovelPayConfigClient) Delete() *NovelPayConfigDelete {
	mutation := newNovelPayConfigMutation(c.config, OpDelete)
	return &NovelPayConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelPayConfigClient) DeleteOne(npc *NovelPayConfig) *NovelPayConfigDeleteOne {
	return c.DeleteOneID(npc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelPayConfigClient) DeleteOneID(id int64) *NovelPayConfigDeleteOne {
	builder := c.Delete().Where(novelpayconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelPayConfigDeleteOne{builder}
}

// Query returns a query builder for NovelPayConfig.
func (c *NovelPayConfigClient) Query() *NovelPayConfigQuery {
	return &NovelPayConfigQuery{
		config: c.config,
	}
}

// Get returns a NovelPayConfig entity by its id.
func (c *NovelPayConfigClient) Get(ctx context.Context, id int64) (*NovelPayConfig, error) {
	return c.Query().Where(novelpayconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelPayConfigClient) GetX(ctx context.Context, id int64) *NovelPayConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NovelPayConfigClient) Hooks() []Hook {
	return c.hooks.NovelPayConfig
}

// NovelTagClient is a client for the NovelTag schema.
type NovelTagClient struct {
	config
}

// NewNovelTagClient returns a client for the NovelTag from the given config.
func NewNovelTagClient(c config) *NovelTagClient {
	return &NovelTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `noveltag.Hooks(f(g(h())))`.
func (c *NovelTagClient) Use(hooks ...Hook) {
	c.hooks.NovelTag = append(c.hooks.NovelTag, hooks...)
}

// Create returns a create builder for NovelTag.
func (c *NovelTagClient) Create() *NovelTagCreate {
	mutation := newNovelTagMutation(c.config, OpCreate)
	return &NovelTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NovelTag entities.
func (c *NovelTagClient) CreateBulk(builders ...*NovelTagCreate) *NovelTagCreateBulk {
	return &NovelTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NovelTag.
func (c *NovelTagClient) Update() *NovelTagUpdate {
	mutation := newNovelTagMutation(c.config, OpUpdate)
	return &NovelTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NovelTagClient) UpdateOne(nt *NovelTag) *NovelTagUpdateOne {
	mutation := newNovelTagMutation(c.config, OpUpdateOne, withNovelTag(nt))
	return &NovelTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NovelTagClient) UpdateOneID(id int64) *NovelTagUpdateOne {
	mutation := newNovelTagMutation(c.config, OpUpdateOne, withNovelTagID(id))
	return &NovelTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NovelTag.
func (c *NovelTagClient) Delete() *NovelTagDelete {
	mutation := newNovelTagMutation(c.config, OpDelete)
	return &NovelTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NovelTagClient) DeleteOne(nt *NovelTag) *NovelTagDeleteOne {
	return c.DeleteOneID(nt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NovelTagClient) DeleteOneID(id int64) *NovelTagDeleteOne {
	builder := c.Delete().Where(noveltag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NovelTagDeleteOne{builder}
}

// Query returns a query builder for NovelTag.
func (c *NovelTagClient) Query() *NovelTagQuery {
	return &NovelTagQuery{
		config: c.config,
	}
}

// Get returns a NovelTag entity by its id.
func (c *NovelTagClient) Get(ctx context.Context, id int64) (*NovelTag, error) {
	return c.Query().Where(noveltag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NovelTagClient) GetX(ctx context.Context, id int64) *NovelTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NovelTagClient) Hooks() []Hook {
	return c.hooks.NovelTag
}

// PageConfigClient is a client for the PageConfig schema.
type PageConfigClient struct {
	config
}

// NewPageConfigClient returns a client for the PageConfig from the given config.
func NewPageConfigClient(c config) *PageConfigClient {
	return &PageConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pageconfig.Hooks(f(g(h())))`.
func (c *PageConfigClient) Use(hooks ...Hook) {
	c.hooks.PageConfig = append(c.hooks.PageConfig, hooks...)
}

// Create returns a create builder for PageConfig.
func (c *PageConfigClient) Create() *PageConfigCreate {
	mutation := newPageConfigMutation(c.config, OpCreate)
	return &PageConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PageConfig entities.
func (c *PageConfigClient) CreateBulk(builders ...*PageConfigCreate) *PageConfigCreateBulk {
	return &PageConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PageConfig.
func (c *PageConfigClient) Update() *PageConfigUpdate {
	mutation := newPageConfigMutation(c.config, OpUpdate)
	return &PageConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PageConfigClient) UpdateOne(pc *PageConfig) *PageConfigUpdateOne {
	mutation := newPageConfigMutation(c.config, OpUpdateOne, withPageConfig(pc))
	return &PageConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PageConfigClient) UpdateOneID(id int64) *PageConfigUpdateOne {
	mutation := newPageConfigMutation(c.config, OpUpdateOne, withPageConfigID(id))
	return &PageConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PageConfig.
func (c *PageConfigClient) Delete() *PageConfigDelete {
	mutation := newPageConfigMutation(c.config, OpDelete)
	return &PageConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PageConfigClient) DeleteOne(pc *PageConfig) *PageConfigDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PageConfigClient) DeleteOneID(id int64) *PageConfigDeleteOne {
	builder := c.Delete().Where(pageconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PageConfigDeleteOne{builder}
}

// Query returns a query builder for PageConfig.
func (c *PageConfigClient) Query() *PageConfigQuery {
	return &PageConfigQuery{
		config: c.config,
	}
}

// Get returns a PageConfig entity by its id.
func (c *PageConfigClient) Get(ctx context.Context, id int64) (*PageConfig, error) {
	return c.Query().Where(pageconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PageConfigClient) GetX(ctx context.Context, id int64) *PageConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PageConfigClient) Hooks() []Hook {
	return c.hooks.PageConfig
}

// QiniuConfigClient is a client for the QiniuConfig schema.
type QiniuConfigClient struct {
	config
}

// NewQiniuConfigClient returns a client for the QiniuConfig from the given config.
func NewQiniuConfigClient(c config) *QiniuConfigClient {
	return &QiniuConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `qiniuconfig.Hooks(f(g(h())))`.
func (c *QiniuConfigClient) Use(hooks ...Hook) {
	c.hooks.QiniuConfig = append(c.hooks.QiniuConfig, hooks...)
}

// Create returns a create builder for QiniuConfig.
func (c *QiniuConfigClient) Create() *QiniuConfigCreate {
	mutation := newQiniuConfigMutation(c.config, OpCreate)
	return &QiniuConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QiniuConfig entities.
func (c *QiniuConfigClient) CreateBulk(builders ...*QiniuConfigCreate) *QiniuConfigCreateBulk {
	return &QiniuConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QiniuConfig.
func (c *QiniuConfigClient) Update() *QiniuConfigUpdate {
	mutation := newQiniuConfigMutation(c.config, OpUpdate)
	return &QiniuConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QiniuConfigClient) UpdateOne(qc *QiniuConfig) *QiniuConfigUpdateOne {
	mutation := newQiniuConfigMutation(c.config, OpUpdateOne, withQiniuConfig(qc))
	return &QiniuConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QiniuConfigClient) UpdateOneID(id int64) *QiniuConfigUpdateOne {
	mutation := newQiniuConfigMutation(c.config, OpUpdateOne, withQiniuConfigID(id))
	return &QiniuConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QiniuConfig.
func (c *QiniuConfigClient) Delete() *QiniuConfigDelete {
	mutation := newQiniuConfigMutation(c.config, OpDelete)
	return &QiniuConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *QiniuConfigClient) DeleteOne(qc *QiniuConfig) *QiniuConfigDeleteOne {
	return c.DeleteOneID(qc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *QiniuConfigClient) DeleteOneID(id int64) *QiniuConfigDeleteOne {
	builder := c.Delete().Where(qiniuconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QiniuConfigDeleteOne{builder}
}

// Query returns a query builder for QiniuConfig.
func (c *QiniuConfigClient) Query() *QiniuConfigQuery {
	return &QiniuConfigQuery{
		config: c.config,
	}
}

// Get returns a QiniuConfig entity by its id.
func (c *QiniuConfigClient) Get(ctx context.Context, id int64) (*QiniuConfig, error) {
	return c.Query().Where(qiniuconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QiniuConfigClient) GetX(ctx context.Context, id int64) *QiniuConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *QiniuConfigClient) Hooks() []Hook {
	return c.hooks.QiniuConfig
}

// ResourceGroupClient is a client for the ResourceGroup schema.
type ResourceGroupClient struct {
	config
}

// NewResourceGroupClient returns a client for the ResourceGroup from the given config.
func NewResourceGroupClient(c config) *ResourceGroupClient {
	return &ResourceGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resourcegroup.Hooks(f(g(h())))`.
func (c *ResourceGroupClient) Use(hooks ...Hook) {
	c.hooks.ResourceGroup = append(c.hooks.ResourceGroup, hooks...)
}

// Create returns a create builder for ResourceGroup.
func (c *ResourceGroupClient) Create() *ResourceGroupCreate {
	mutation := newResourceGroupMutation(c.config, OpCreate)
	return &ResourceGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResourceGroup entities.
func (c *ResourceGroupClient) CreateBulk(builders ...*ResourceGroupCreate) *ResourceGroupCreateBulk {
	return &ResourceGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResourceGroup.
func (c *ResourceGroupClient) Update() *ResourceGroupUpdate {
	mutation := newResourceGroupMutation(c.config, OpUpdate)
	return &ResourceGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceGroupClient) UpdateOne(rg *ResourceGroup) *ResourceGroupUpdateOne {
	mutation := newResourceGroupMutation(c.config, OpUpdateOne, withResourceGroup(rg))
	return &ResourceGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceGroupClient) UpdateOneID(id int64) *ResourceGroupUpdateOne {
	mutation := newResourceGroupMutation(c.config, OpUpdateOne, withResourceGroupID(id))
	return &ResourceGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResourceGroup.
func (c *ResourceGroupClient) Delete() *ResourceGroupDelete {
	mutation := newResourceGroupMutation(c.config, OpDelete)
	return &ResourceGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResourceGroupClient) DeleteOne(rg *ResourceGroup) *ResourceGroupDeleteOne {
	return c.DeleteOneID(rg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResourceGroupClient) DeleteOneID(id int64) *ResourceGroupDeleteOne {
	builder := c.Delete().Where(resourcegroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceGroupDeleteOne{builder}
}

// Query returns a query builder for ResourceGroup.
func (c *ResourceGroupClient) Query() *ResourceGroupQuery {
	return &ResourceGroupQuery{
		config: c.config,
	}
}

// Get returns a ResourceGroup entity by its id.
func (c *ResourceGroupClient) Get(ctx context.Context, id int64) (*ResourceGroup, error) {
	return c.Query().Where(resourcegroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceGroupClient) GetX(ctx context.Context, id int64) *ResourceGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResourceGroupClient) Hooks() []Hook {
	return c.hooks.ResourceGroup
}

// ResourceStorageClient is a client for the ResourceStorage schema.
type ResourceStorageClient struct {
	config
}

// NewResourceStorageClient returns a client for the ResourceStorage from the given config.
func NewResourceStorageClient(c config) *ResourceStorageClient {
	return &ResourceStorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resourcestorage.Hooks(f(g(h())))`.
func (c *ResourceStorageClient) Use(hooks ...Hook) {
	c.hooks.ResourceStorage = append(c.hooks.ResourceStorage, hooks...)
}

// Create returns a create builder for ResourceStorage.
func (c *ResourceStorageClient) Create() *ResourceStorageCreate {
	mutation := newResourceStorageMutation(c.config, OpCreate)
	return &ResourceStorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResourceStorage entities.
func (c *ResourceStorageClient) CreateBulk(builders ...*ResourceStorageCreate) *ResourceStorageCreateBulk {
	return &ResourceStorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResourceStorage.
func (c *ResourceStorageClient) Update() *ResourceStorageUpdate {
	mutation := newResourceStorageMutation(c.config, OpUpdate)
	return &ResourceStorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceStorageClient) UpdateOne(rs *ResourceStorage) *ResourceStorageUpdateOne {
	mutation := newResourceStorageMutation(c.config, OpUpdateOne, withResourceStorage(rs))
	return &ResourceStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceStorageClient) UpdateOneID(id int64) *ResourceStorageUpdateOne {
	mutation := newResourceStorageMutation(c.config, OpUpdateOne, withResourceStorageID(id))
	return &ResourceStorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResourceStorage.
func (c *ResourceStorageClient) Delete() *ResourceStorageDelete {
	mutation := newResourceStorageMutation(c.config, OpDelete)
	return &ResourceStorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResourceStorageClient) DeleteOne(rs *ResourceStorage) *ResourceStorageDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResourceStorageClient) DeleteOneID(id int64) *ResourceStorageDeleteOne {
	builder := c.Delete().Where(resourcestorage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceStorageDeleteOne{builder}
}

// Query returns a query builder for ResourceStorage.
func (c *ResourceStorageClient) Query() *ResourceStorageQuery {
	return &ResourceStorageQuery{
		config: c.config,
	}
}

// Get returns a ResourceStorage entity by its id.
func (c *ResourceStorageClient) Get(ctx context.Context, id int64) (*ResourceStorage, error) {
	return c.Query().Where(resourcestorage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceStorageClient) GetX(ctx context.Context, id int64) *ResourceStorage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResourceStorageClient) Hooks() []Hook {
	return c.hooks.ResourceStorage
}

// ScoreProductClient is a client for the ScoreProduct schema.
type ScoreProductClient struct {
	config
}

// NewScoreProductClient returns a client for the ScoreProduct from the given config.
func NewScoreProductClient(c config) *ScoreProductClient {
	return &ScoreProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scoreproduct.Hooks(f(g(h())))`.
func (c *ScoreProductClient) Use(hooks ...Hook) {
	c.hooks.ScoreProduct = append(c.hooks.ScoreProduct, hooks...)
}

// Create returns a create builder for ScoreProduct.
func (c *ScoreProductClient) Create() *ScoreProductCreate {
	mutation := newScoreProductMutation(c.config, OpCreate)
	return &ScoreProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScoreProduct entities.
func (c *ScoreProductClient) CreateBulk(builders ...*ScoreProductCreate) *ScoreProductCreateBulk {
	return &ScoreProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScoreProduct.
func (c *ScoreProductClient) Update() *ScoreProductUpdate {
	mutation := newScoreProductMutation(c.config, OpUpdate)
	return &ScoreProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScoreProductClient) UpdateOne(sp *ScoreProduct) *ScoreProductUpdateOne {
	mutation := newScoreProductMutation(c.config, OpUpdateOne, withScoreProduct(sp))
	return &ScoreProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScoreProductClient) UpdateOneID(id int64) *ScoreProductUpdateOne {
	mutation := newScoreProductMutation(c.config, OpUpdateOne, withScoreProductID(id))
	return &ScoreProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScoreProduct.
func (c *ScoreProductClient) Delete() *ScoreProductDelete {
	mutation := newScoreProductMutation(c.config, OpDelete)
	return &ScoreProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScoreProductClient) DeleteOne(sp *ScoreProduct) *ScoreProductDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScoreProductClient) DeleteOneID(id int64) *ScoreProductDeleteOne {
	builder := c.Delete().Where(scoreproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScoreProductDeleteOne{builder}
}

// Query returns a query builder for ScoreProduct.
func (c *ScoreProductClient) Query() *ScoreProductQuery {
	return &ScoreProductQuery{
		config: c.config,
	}
}

// Get returns a ScoreProduct entity by its id.
func (c *ScoreProductClient) Get(ctx context.Context, id int64) (*ScoreProduct, error) {
	return c.Query().Where(scoreproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScoreProductClient) GetX(ctx context.Context, id int64) *ScoreProduct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ScoreProductClient) Hooks() []Hook {
	return c.hooks.ScoreProduct
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Create returns a create builder for Task.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id int64) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskClient) DeleteOneID(id int64) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id int64) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id int64) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// UserAnalysisStatisticsClient is a client for the UserAnalysisStatistics schema.
type UserAnalysisStatisticsClient struct {
	config
}

// NewUserAnalysisStatisticsClient returns a client for the UserAnalysisStatistics from the given config.
func NewUserAnalysisStatisticsClient(c config) *UserAnalysisStatisticsClient {
	return &UserAnalysisStatisticsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useranalysisstatistics.Hooks(f(g(h())))`.
func (c *UserAnalysisStatisticsClient) Use(hooks ...Hook) {
	c.hooks.UserAnalysisStatistics = append(c.hooks.UserAnalysisStatistics, hooks...)
}

// Create returns a create builder for UserAnalysisStatistics.
func (c *UserAnalysisStatisticsClient) Create() *UserAnalysisStatisticsCreate {
	mutation := newUserAnalysisStatisticsMutation(c.config, OpCreate)
	return &UserAnalysisStatisticsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserAnalysisStatistics entities.
func (c *UserAnalysisStatisticsClient) CreateBulk(builders ...*UserAnalysisStatisticsCreate) *UserAnalysisStatisticsCreateBulk {
	return &UserAnalysisStatisticsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserAnalysisStatistics.
func (c *UserAnalysisStatisticsClient) Update() *UserAnalysisStatisticsUpdate {
	mutation := newUserAnalysisStatisticsMutation(c.config, OpUpdate)
	return &UserAnalysisStatisticsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserAnalysisStatisticsClient) UpdateOne(uas *UserAnalysisStatistics) *UserAnalysisStatisticsUpdateOne {
	mutation := newUserAnalysisStatisticsMutation(c.config, OpUpdateOne, withUserAnalysisStatistics(uas))
	return &UserAnalysisStatisticsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserAnalysisStatisticsClient) UpdateOneID(id int64) *UserAnalysisStatisticsUpdateOne {
	mutation := newUserAnalysisStatisticsMutation(c.config, OpUpdateOne, withUserAnalysisStatisticsID(id))
	return &UserAnalysisStatisticsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserAnalysisStatistics.
func (c *UserAnalysisStatisticsClient) Delete() *UserAnalysisStatisticsDelete {
	mutation := newUserAnalysisStatisticsMutation(c.config, OpDelete)
	return &UserAnalysisStatisticsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserAnalysisStatisticsClient) DeleteOne(uas *UserAnalysisStatistics) *UserAnalysisStatisticsDeleteOne {
	return c.DeleteOneID(uas.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserAnalysisStatisticsClient) DeleteOneID(id int64) *UserAnalysisStatisticsDeleteOne {
	builder := c.Delete().Where(useranalysisstatistics.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserAnalysisStatisticsDeleteOne{builder}
}

// Query returns a query builder for UserAnalysisStatistics.
func (c *UserAnalysisStatisticsClient) Query() *UserAnalysisStatisticsQuery {
	return &UserAnalysisStatisticsQuery{
		config: c.config,
	}
}

// Get returns a UserAnalysisStatistics entity by its id.
func (c *UserAnalysisStatisticsClient) Get(ctx context.Context, id int64) (*UserAnalysisStatistics, error) {
	return c.Query().Where(useranalysisstatistics.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserAnalysisStatisticsClient) GetX(ctx context.Context, id int64) *UserAnalysisStatistics {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserAnalysisStatisticsClient) Hooks() []Hook {
	return c.hooks.UserAnalysisStatistics
}

// UserConsumeClient is a client for the UserConsume schema.
type UserConsumeClient struct {
	config
}

// NewUserConsumeClient returns a client for the UserConsume from the given config.
func NewUserConsumeClient(c config) *UserConsumeClient {
	return &UserConsumeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userconsume.Hooks(f(g(h())))`.
func (c *UserConsumeClient) Use(hooks ...Hook) {
	c.hooks.UserConsume = append(c.hooks.UserConsume, hooks...)
}

// Create returns a create builder for UserConsume.
func (c *UserConsumeClient) Create() *UserConsumeCreate {
	mutation := newUserConsumeMutation(c.config, OpCreate)
	return &UserConsumeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserConsume entities.
func (c *UserConsumeClient) CreateBulk(builders ...*UserConsumeCreate) *UserConsumeCreateBulk {
	return &UserConsumeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserConsume.
func (c *UserConsumeClient) Update() *UserConsumeUpdate {
	mutation := newUserConsumeMutation(c.config, OpUpdate)
	return &UserConsumeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserConsumeClient) UpdateOne(uc *UserConsume) *UserConsumeUpdateOne {
	mutation := newUserConsumeMutation(c.config, OpUpdateOne, withUserConsume(uc))
	return &UserConsumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserConsumeClient) UpdateOneID(id int64) *UserConsumeUpdateOne {
	mutation := newUserConsumeMutation(c.config, OpUpdateOne, withUserConsumeID(id))
	return &UserConsumeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserConsume.
func (c *UserConsumeClient) Delete() *UserConsumeDelete {
	mutation := newUserConsumeMutation(c.config, OpDelete)
	return &UserConsumeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserConsumeClient) DeleteOne(uc *UserConsume) *UserConsumeDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserConsumeClient) DeleteOneID(id int64) *UserConsumeDeleteOne {
	builder := c.Delete().Where(userconsume.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserConsumeDeleteOne{builder}
}

// Query returns a query builder for UserConsume.
func (c *UserConsumeClient) Query() *UserConsumeQuery {
	return &UserConsumeQuery{
		config: c.config,
	}
}

// Get returns a UserConsume entity by its id.
func (c *UserConsumeClient) Get(ctx context.Context, id int64) (*UserConsume, error) {
	return c.Query().Where(userconsume.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserConsumeClient) GetX(ctx context.Context, id int64) *UserConsume {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserConsumeClient) Hooks() []Hook {
	return c.hooks.UserConsume
}

// UserResourceClient is a client for the UserResource schema.
type UserResourceClient struct {
	config
}

// NewUserResourceClient returns a client for the UserResource from the given config.
func NewUserResourceClient(c config) *UserResourceClient {
	return &UserResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userresource.Hooks(f(g(h())))`.
func (c *UserResourceClient) Use(hooks ...Hook) {
	c.hooks.UserResource = append(c.hooks.UserResource, hooks...)
}

// Create returns a create builder for UserResource.
func (c *UserResourceClient) Create() *UserResourceCreate {
	mutation := newUserResourceMutation(c.config, OpCreate)
	return &UserResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserResource entities.
func (c *UserResourceClient) CreateBulk(builders ...*UserResourceCreate) *UserResourceCreateBulk {
	return &UserResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserResource.
func (c *UserResourceClient) Update() *UserResourceUpdate {
	mutation := newUserResourceMutation(c.config, OpUpdate)
	return &UserResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserResourceClient) UpdateOne(ur *UserResource) *UserResourceUpdateOne {
	mutation := newUserResourceMutation(c.config, OpUpdateOne, withUserResource(ur))
	return &UserResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserResourceClient) UpdateOneID(id int64) *UserResourceUpdateOne {
	mutation := newUserResourceMutation(c.config, OpUpdateOne, withUserResourceID(id))
	return &UserResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserResource.
func (c *UserResourceClient) Delete() *UserResourceDelete {
	mutation := newUserResourceMutation(c.config, OpDelete)
	return &UserResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserResourceClient) DeleteOne(ur *UserResource) *UserResourceDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserResourceClient) DeleteOneID(id int64) *UserResourceDeleteOne {
	builder := c.Delete().Where(userresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserResourceDeleteOne{builder}
}

// Query returns a query builder for UserResource.
func (c *UserResourceClient) Query() *UserResourceQuery {
	return &UserResourceQuery{
		config: c.config,
	}
}

// Get returns a UserResource entity by its id.
func (c *UserResourceClient) Get(ctx context.Context, id int64) (*UserResource, error) {
	return c.Query().Where(userresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserResourceClient) GetX(ctx context.Context, id int64) *UserResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserResourceClient) Hooks() []Hook {
	return c.hooks.UserResource
}

// UserResourceRecordClient is a client for the UserResourceRecord schema.
type UserResourceRecordClient struct {
	config
}

// NewUserResourceRecordClient returns a client for the UserResourceRecord from the given config.
func NewUserResourceRecordClient(c config) *UserResourceRecordClient {
	return &UserResourceRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userresourcerecord.Hooks(f(g(h())))`.
func (c *UserResourceRecordClient) Use(hooks ...Hook) {
	c.hooks.UserResourceRecord = append(c.hooks.UserResourceRecord, hooks...)
}

// Create returns a create builder for UserResourceRecord.
func (c *UserResourceRecordClient) Create() *UserResourceRecordCreate {
	mutation := newUserResourceRecordMutation(c.config, OpCreate)
	return &UserResourceRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserResourceRecord entities.
func (c *UserResourceRecordClient) CreateBulk(builders ...*UserResourceRecordCreate) *UserResourceRecordCreateBulk {
	return &UserResourceRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserResourceRecord.
func (c *UserResourceRecordClient) Update() *UserResourceRecordUpdate {
	mutation := newUserResourceRecordMutation(c.config, OpUpdate)
	return &UserResourceRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserResourceRecordClient) UpdateOne(urr *UserResourceRecord) *UserResourceRecordUpdateOne {
	mutation := newUserResourceRecordMutation(c.config, OpUpdateOne, withUserResourceRecord(urr))
	return &UserResourceRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserResourceRecordClient) UpdateOneID(id int64) *UserResourceRecordUpdateOne {
	mutation := newUserResourceRecordMutation(c.config, OpUpdateOne, withUserResourceRecordID(id))
	return &UserResourceRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserResourceRecord.
func (c *UserResourceRecordClient) Delete() *UserResourceRecordDelete {
	mutation := newUserResourceRecordMutation(c.config, OpDelete)
	return &UserResourceRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserResourceRecordClient) DeleteOne(urr *UserResourceRecord) *UserResourceRecordDeleteOne {
	return c.DeleteOneID(urr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserResourceRecordClient) DeleteOneID(id int64) *UserResourceRecordDeleteOne {
	builder := c.Delete().Where(userresourcerecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserResourceRecordDeleteOne{builder}
}

// Query returns a query builder for UserResourceRecord.
func (c *UserResourceRecordClient) Query() *UserResourceRecordQuery {
	return &UserResourceRecordQuery{
		config: c.config,
	}
}

// Get returns a UserResourceRecord entity by its id.
func (c *UserResourceRecordClient) Get(ctx context.Context, id int64) (*UserResourceRecord, error) {
	return c.Query().Where(userresourcerecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserResourceRecordClient) GetX(ctx context.Context, id int64) *UserResourceRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserResourceRecordClient) Hooks() []Hook {
	return c.hooks.UserResourceRecord
}

// VipTypeClient is a client for the VipType schema.
type VipTypeClient struct {
	config
}

// NewVipTypeClient returns a client for the VipType from the given config.
func NewVipTypeClient(c config) *VipTypeClient {
	return &VipTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `viptype.Hooks(f(g(h())))`.
func (c *VipTypeClient) Use(hooks ...Hook) {
	c.hooks.VipType = append(c.hooks.VipType, hooks...)
}

// Create returns a create builder for VipType.
func (c *VipTypeClient) Create() *VipTypeCreate {
	mutation := newVipTypeMutation(c.config, OpCreate)
	return &VipTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VipType entities.
func (c *VipTypeClient) CreateBulk(builders ...*VipTypeCreate) *VipTypeCreateBulk {
	return &VipTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VipType.
func (c *VipTypeClient) Update() *VipTypeUpdate {
	mutation := newVipTypeMutation(c.config, OpUpdate)
	return &VipTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VipTypeClient) UpdateOne(vt *VipType) *VipTypeUpdateOne {
	mutation := newVipTypeMutation(c.config, OpUpdateOne, withVipType(vt))
	return &VipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VipTypeClient) UpdateOneID(id int64) *VipTypeUpdateOne {
	mutation := newVipTypeMutation(c.config, OpUpdateOne, withVipTypeID(id))
	return &VipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VipType.
func (c *VipTypeClient) Delete() *VipTypeDelete {
	mutation := newVipTypeMutation(c.config, OpDelete)
	return &VipTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VipTypeClient) DeleteOne(vt *VipType) *VipTypeDeleteOne {
	return c.DeleteOneID(vt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VipTypeClient) DeleteOneID(id int64) *VipTypeDeleteOne {
	builder := c.Delete().Where(viptype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VipTypeDeleteOne{builder}
}

// Query returns a query builder for VipType.
func (c *VipTypeClient) Query() *VipTypeQuery {
	return &VipTypeQuery{
		config: c.config,
	}
}

// Get returns a VipType entity by its id.
func (c *VipTypeClient) Get(ctx context.Context, id int64) (*VipType, error) {
	return c.Query().Where(viptype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VipTypeClient) GetX(ctx context.Context, id int64) *VipType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VipTypeClient) Hooks() []Hook {
	return c.hooks.VipType
}
