// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/activitycomponent"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityComponentCreate is the builder for creating a ActivityComponent entity.
type ActivityComponentCreate struct {
	config
	mutation *ActivityComponentMutation
	hooks    []Hook
}

// SetActivityCode sets the "activityCode" field.
func (acc *ActivityComponentCreate) SetActivityCode(s string) *ActivityComponentCreate {
	acc.mutation.SetActivityCode(s)
	return acc
}

// SetNillableActivityCode sets the "activityCode" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableActivityCode(s *string) *ActivityComponentCreate {
	if s != nil {
		acc.SetActivityCode(*s)
	}
	return acc
}

// SetComponentType sets the "componentType" field.
func (acc *ActivityComponentCreate) SetComponentType(s string) *ActivityComponentCreate {
	acc.mutation.SetComponentType(s)
	return acc
}

// SetNillableComponentType sets the "componentType" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableComponentType(s *string) *ActivityComponentCreate {
	if s != nil {
		acc.SetComponentType(*s)
	}
	return acc
}

// SetPolicy sets the "policy" field.
func (acc *ActivityComponentCreate) SetPolicy(s string) *ActivityComponentCreate {
	acc.mutation.SetPolicy(s)
	return acc
}

// SetNillablePolicy sets the "policy" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillablePolicy(s *string) *ActivityComponentCreate {
	if s != nil {
		acc.SetPolicy(*s)
	}
	return acc
}

// SetVipDays sets the "vipDays" field.
func (acc *ActivityComponentCreate) SetVipDays(b bool) *ActivityComponentCreate {
	acc.mutation.SetVipDays(b)
	return acc
}

// SetNillableVipDays sets the "vipDays" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableVipDays(b *bool) *ActivityComponentCreate {
	if b != nil {
		acc.SetVipDays(*b)
	}
	return acc
}

// SetMinConsume sets the "minConsume" field.
func (acc *ActivityComponentCreate) SetMinConsume(i int64) *ActivityComponentCreate {
	acc.mutation.SetMinConsume(i)
	return acc
}

// SetNillableMinConsume sets the "minConsume" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableMinConsume(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetMinConsume(*i)
	}
	return acc
}

// SetMaxConsume sets the "maxConsume" field.
func (acc *ActivityComponentCreate) SetMaxConsume(i int64) *ActivityComponentCreate {
	acc.mutation.SetMaxConsume(i)
	return acc
}

// SetNillableMaxConsume sets the "maxConsume" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableMaxConsume(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetMaxConsume(*i)
	}
	return acc
}

// SetMinPayNum sets the "minPayNum" field.
func (acc *ActivityComponentCreate) SetMinPayNum(i int64) *ActivityComponentCreate {
	acc.mutation.SetMinPayNum(i)
	return acc
}

// SetNillableMinPayNum sets the "minPayNum" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableMinPayNum(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetMinPayNum(*i)
	}
	return acc
}

// SetPayTimes sets the "payTimes" field.
func (acc *ActivityComponentCreate) SetPayTimes(i int64) *ActivityComponentCreate {
	acc.mutation.SetPayTimes(i)
	return acc
}

// SetNillablePayTimes sets the "payTimes" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillablePayTimes(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetPayTimes(*i)
	}
	return acc
}

// SetPayAmount sets the "payAmount" field.
func (acc *ActivityComponentCreate) SetPayAmount(i int64) *ActivityComponentCreate {
	acc.mutation.SetPayAmount(i)
	return acc
}

// SetNillablePayAmount sets the "payAmount" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillablePayAmount(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetPayAmount(*i)
	}
	return acc
}

// SetRegDays sets the "regDays" field.
func (acc *ActivityComponentCreate) SetRegDays(i int64) *ActivityComponentCreate {
	acc.mutation.SetRegDays(i)
	return acc
}

// SetNillableRegDays sets the "regDays" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableRegDays(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetRegDays(*i)
	}
	return acc
}

// SetSummary sets the "summary" field.
func (acc *ActivityComponentCreate) SetSummary(s string) *ActivityComponentCreate {
	acc.mutation.SetSummary(s)
	return acc
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableSummary(s *string) *ActivityComponentCreate {
	if s != nil {
		acc.SetSummary(*s)
	}
	return acc
}

// SetAssetItemId sets the "assetItemId" field.
func (acc *ActivityComponentCreate) SetAssetItemId(i int32) *ActivityComponentCreate {
	acc.mutation.SetAssetItemId(i)
	return acc
}

// SetNillableAssetItemId sets the "assetItemId" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableAssetItemId(i *int32) *ActivityComponentCreate {
	if i != nil {
		acc.SetAssetItemId(*i)
	}
	return acc
}

// SetAmount sets the "amount" field.
func (acc *ActivityComponentCreate) SetAmount(i int64) *ActivityComponentCreate {
	acc.mutation.SetAmount(i)
	return acc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableAmount(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetAmount(*i)
	}
	return acc
}

// SetResId sets the "resId" field.
func (acc *ActivityComponentCreate) SetResId(i int64) *ActivityComponentCreate {
	acc.mutation.SetResId(i)
	return acc
}

// SetNillableResId sets the "resId" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableResId(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetResId(*i)
	}
	return acc
}

// SetResDays sets the "resDays" field.
func (acc *ActivityComponentCreate) SetResDays(i int32) *ActivityComponentCreate {
	acc.mutation.SetResDays(i)
	return acc
}

// SetNillableResDays sets the "resDays" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableResDays(i *int32) *ActivityComponentCreate {
	if i != nil {
		acc.SetResDays(*i)
	}
	return acc
}

// SetCreatedAt sets the "createdAt" field.
func (acc *ActivityComponentCreate) SetCreatedAt(t time.Time) *ActivityComponentCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableCreatedAt(t *time.Time) *ActivityComponentCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// SetUpdatedAt sets the "updatedAt" field.
func (acc *ActivityComponentCreate) SetUpdatedAt(t time.Time) *ActivityComponentCreate {
	acc.mutation.SetUpdatedAt(t)
	return acc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableUpdatedAt(t *time.Time) *ActivityComponentCreate {
	if t != nil {
		acc.SetUpdatedAt(*t)
	}
	return acc
}

// SetCreateBy sets the "createBy" field.
func (acc *ActivityComponentCreate) SetCreateBy(i int64) *ActivityComponentCreate {
	acc.mutation.SetCreateBy(i)
	return acc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableCreateBy(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetCreateBy(*i)
	}
	return acc
}

// SetUpdateBy sets the "updateBy" field.
func (acc *ActivityComponentCreate) SetUpdateBy(i int64) *ActivityComponentCreate {
	acc.mutation.SetUpdateBy(i)
	return acc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableUpdateBy(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetUpdateBy(*i)
	}
	return acc
}

// SetTenantId sets the "tenantId" field.
func (acc *ActivityComponentCreate) SetTenantId(i int64) *ActivityComponentCreate {
	acc.mutation.SetTenantId(i)
	return acc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (acc *ActivityComponentCreate) SetNillableTenantId(i *int64) *ActivityComponentCreate {
	if i != nil {
		acc.SetTenantId(*i)
	}
	return acc
}

// Mutation returns the ActivityComponentMutation object of the builder.
func (acc *ActivityComponentCreate) Mutation() *ActivityComponentMutation {
	return acc.mutation
}

// Save creates the ActivityComponent in the database.
func (acc *ActivityComponentCreate) Save(ctx context.Context) (*ActivityComponent, error) {
	var (
		err  error
		node *ActivityComponent
	)
	acc.defaults()
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			if node, err = acc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			if acc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *ActivityComponentCreate) SaveX(ctx context.Context) *ActivityComponent {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *ActivityComponentCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *ActivityComponentCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *ActivityComponentCreate) defaults() {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := activitycomponent.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		v := activitycomponent.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.CreateBy(); !ok {
		v := activitycomponent.DefaultCreateBy
		acc.mutation.SetCreateBy(v)
	}
	if _, ok := acc.mutation.UpdateBy(); !ok {
		v := activitycomponent.DefaultUpdateBy
		acc.mutation.SetUpdateBy(v)
	}
	if _, ok := acc.mutation.TenantId(); !ok {
		v := activitycomponent.DefaultTenantId
		acc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *ActivityComponentCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "ActivityComponent.createdAt"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "ActivityComponent.updatedAt"`)}
	}
	if _, ok := acc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "ActivityComponent.createBy"`)}
	}
	if _, ok := acc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "ActivityComponent.updateBy"`)}
	}
	if _, ok := acc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "ActivityComponent.tenantId"`)}
	}
	return nil
}

func (acc *ActivityComponentCreate) sqlSave(ctx context.Context) (*ActivityComponent, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (acc *ActivityComponentCreate) createSpec() (*ActivityComponent, *sqlgraph.CreateSpec) {
	var (
		_node = &ActivityComponent{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: activitycomponent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: activitycomponent.FieldID,
			},
		}
	)
	if value, ok := acc.mutation.ActivityCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldActivityCode,
		})
		_node.ActivityCode = value
	}
	if value, ok := acc.mutation.ComponentType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldComponentType,
		})
		_node.ComponentType = value
	}
	if value, ok := acc.mutation.Policy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldPolicy,
		})
		_node.Policy = value
	}
	if value, ok := acc.mutation.VipDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: activitycomponent.FieldVipDays,
		})
		_node.VipDays = value
	}
	if value, ok := acc.mutation.MinConsume(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinConsume,
		})
		_node.MinConsume = value
	}
	if value, ok := acc.mutation.MaxConsume(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMaxConsume,
		})
		_node.MaxConsume = value
	}
	if value, ok := acc.mutation.MinPayNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldMinPayNum,
		})
		_node.MinPayNum = value
	}
	if value, ok := acc.mutation.PayTimes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayTimes,
		})
		_node.PayTimes = value
	}
	if value, ok := acc.mutation.PayAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldPayAmount,
		})
		_node.PayAmount = value
	}
	if value, ok := acc.mutation.RegDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldRegDays,
		})
		_node.RegDays = value
	}
	if value, ok := acc.mutation.Summary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activitycomponent.FieldSummary,
		})
		_node.Summary = value
	}
	if value, ok := acc.mutation.AssetItemId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldAssetItemId,
		})
		_node.AssetItemId = value
	}
	if value, ok := acc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := acc.mutation.ResId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldResId,
		})
		_node.ResId = value
	}
	if value, ok := acc.mutation.ResDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activitycomponent.FieldResDays,
		})
		_node.ResDays = value
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitycomponent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activitycomponent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := acc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := acc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activitycomponent.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// ActivityComponentCreateBulk is the builder for creating many ActivityComponent entities in bulk.
type ActivityComponentCreateBulk struct {
	config
	builders []*ActivityComponentCreate
}

// Save creates the ActivityComponent entities in the database.
func (accb *ActivityComponentCreateBulk) Save(ctx context.Context) ([]*ActivityComponent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*ActivityComponent, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityComponentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *ActivityComponentCreateBulk) SaveX(ctx context.Context) []*ActivityComponent {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *ActivityComponentCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *ActivityComponentCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
