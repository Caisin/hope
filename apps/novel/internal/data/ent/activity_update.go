// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/activity"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetActivityCode sets the "activityCode" field.
func (au *ActivityUpdate) SetActivityCode(s string) *ActivityUpdate {
	au.mutation.SetActivityCode(s)
	return au
}

// SetNillableActivityCode sets the "activityCode" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityCode(s *string) *ActivityUpdate {
	if s != nil {
		au.SetActivityCode(*s)
	}
	return au
}

// ClearActivityCode clears the value of the "activityCode" field.
func (au *ActivityUpdate) ClearActivityCode() *ActivityUpdate {
	au.mutation.ClearActivityCode()
	return au
}

// SetActivityName sets the "activityName" field.
func (au *ActivityUpdate) SetActivityName(s string) *ActivityUpdate {
	au.mutation.SetActivityName(s)
	return au
}

// SetNillableActivityName sets the "activityName" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityName(s *string) *ActivityUpdate {
	if s != nil {
		au.SetActivityName(*s)
	}
	return au
}

// ClearActivityName clears the value of the "activityName" field.
func (au *ActivityUpdate) ClearActivityName() *ActivityUpdate {
	au.mutation.ClearActivityName()
	return au
}

// SetSummary sets the "summary" field.
func (au *ActivityUpdate) SetSummary(s string) *ActivityUpdate {
	au.mutation.SetSummary(s)
	return au
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableSummary(s *string) *ActivityUpdate {
	if s != nil {
		au.SetSummary(*s)
	}
	return au
}

// ClearSummary clears the value of the "summary" field.
func (au *ActivityUpdate) ClearSummary() *ActivityUpdate {
	au.mutation.ClearSummary()
	return au
}

// SetRuleImgSc sets the "ruleImgSc" field.
func (au *ActivityUpdate) SetRuleImgSc(s string) *ActivityUpdate {
	au.mutation.SetRuleImgSc(s)
	return au
}

// SetNillableRuleImgSc sets the "ruleImgSc" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableRuleImgSc(s *string) *ActivityUpdate {
	if s != nil {
		au.SetRuleImgSc(*s)
	}
	return au
}

// ClearRuleImgSc clears the value of the "ruleImgSc" field.
func (au *ActivityUpdate) ClearRuleImgSc() *ActivityUpdate {
	au.mutation.ClearRuleImgSc()
	return au
}

// SetRuleImgTc sets the "ruleImgTc" field.
func (au *ActivityUpdate) SetRuleImgTc(s string) *ActivityUpdate {
	au.mutation.SetRuleImgTc(s)
	return au
}

// SetNillableRuleImgTc sets the "ruleImgTc" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableRuleImgTc(s *string) *ActivityUpdate {
	if s != nil {
		au.SetRuleImgTc(*s)
	}
	return au
}

// ClearRuleImgTc clears the value of the "ruleImgTc" field.
func (au *ActivityUpdate) ClearRuleImgTc() *ActivityUpdate {
	au.mutation.ClearRuleImgTc()
	return au
}

// SetPopupImg sets the "popupImg" field.
func (au *ActivityUpdate) SetPopupImg(s string) *ActivityUpdate {
	au.mutation.SetPopupImg(s)
	return au
}

// SetNillablePopupImg sets the "popupImg" field if the given value is not nil.
func (au *ActivityUpdate) SetNillablePopupImg(s *string) *ActivityUpdate {
	if s != nil {
		au.SetPopupImg(*s)
	}
	return au
}

// ClearPopupImg clears the value of the "popupImg" field.
func (au *ActivityUpdate) ClearPopupImg() *ActivityUpdate {
	au.mutation.ClearPopupImg()
	return au
}

// SetRegDays sets the "regDays" field.
func (au *ActivityUpdate) SetRegDays(i int32) *ActivityUpdate {
	au.mutation.ResetRegDays()
	au.mutation.SetRegDays(i)
	return au
}

// SetNillableRegDays sets the "regDays" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableRegDays(i *int32) *ActivityUpdate {
	if i != nil {
		au.SetRegDays(*i)
	}
	return au
}

// AddRegDays adds i to the "regDays" field.
func (au *ActivityUpdate) AddRegDays(i int32) *ActivityUpdate {
	au.mutation.AddRegDays(i)
	return au
}

// ClearRegDays clears the value of the "regDays" field.
func (au *ActivityUpdate) ClearRegDays() *ActivityUpdate {
	au.mutation.ClearRegDays()
	return au
}

// SetCycleType sets the "cycleType" field.
func (au *ActivityUpdate) SetCycleType(s string) *ActivityUpdate {
	au.mutation.SetCycleType(s)
	return au
}

// SetNillableCycleType sets the "cycleType" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCycleType(s *string) *ActivityUpdate {
	if s != nil {
		au.SetCycleType(*s)
	}
	return au
}

// ClearCycleType clears the value of the "cycleType" field.
func (au *ActivityUpdate) ClearCycleType() *ActivityUpdate {
	au.mutation.ClearCycleType()
	return au
}

// SetEffectTime sets the "effectTime" field.
func (au *ActivityUpdate) SetEffectTime(t time.Time) *ActivityUpdate {
	au.mutation.SetEffectTime(t)
	return au
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableEffectTime(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetEffectTime(*t)
	}
	return au
}

// ClearEffectTime clears the value of the "effectTime" field.
func (au *ActivityUpdate) ClearEffectTime() *ActivityUpdate {
	au.mutation.ClearEffectTime()
	return au
}

// SetExpiredTime sets the "expiredTime" field.
func (au *ActivityUpdate) SetExpiredTime(t time.Time) *ActivityUpdate {
	au.mutation.SetExpiredTime(t)
	return au
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableExpiredTime(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetExpiredTime(*t)
	}
	return au
}

// ClearExpiredTime clears the value of the "expiredTime" field.
func (au *ActivityUpdate) ClearExpiredTime() *ActivityUpdate {
	au.mutation.ClearExpiredTime()
	return au
}

// SetUpdatedAt sets the "updatedAt" field.
func (au *ActivityUpdate) SetUpdatedAt(t time.Time) *ActivityUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetCreateBy sets the "createBy" field.
func (au *ActivityUpdate) SetCreateBy(i int64) *ActivityUpdate {
	au.mutation.ResetCreateBy()
	au.mutation.SetCreateBy(i)
	return au
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableCreateBy(i *int64) *ActivityUpdate {
	if i != nil {
		au.SetCreateBy(*i)
	}
	return au
}

// AddCreateBy adds i to the "createBy" field.
func (au *ActivityUpdate) AddCreateBy(i int64) *ActivityUpdate {
	au.mutation.AddCreateBy(i)
	return au
}

// SetUpdateBy sets the "updateBy" field.
func (au *ActivityUpdate) SetUpdateBy(i int64) *ActivityUpdate {
	au.mutation.ResetUpdateBy()
	au.mutation.SetUpdateBy(i)
	return au
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableUpdateBy(i *int64) *ActivityUpdate {
	if i != nil {
		au.SetUpdateBy(*i)
	}
	return au
}

// AddUpdateBy adds i to the "updateBy" field.
func (au *ActivityUpdate) AddUpdateBy(i int64) *ActivityUpdate {
	au.mutation.AddUpdateBy(i)
	return au
}

// SetTenantId sets the "tenantId" field.
func (au *ActivityUpdate) SetTenantId(i int64) *ActivityUpdate {
	au.mutation.ResetTenantId()
	au.mutation.SetTenantId(i)
	return au
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableTenantId(i *int64) *ActivityUpdate {
	if i != nil {
		au.SetTenantId(*i)
	}
	return au
}

// AddTenantId adds i to the "tenantId" field.
func (au *ActivityUpdate) AddTenantId(i int64) *ActivityUpdate {
	au.mutation.AddTenantId(i)
	return au
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ActivityUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := activity.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: activity.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ActivityCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldActivityCode,
		})
	}
	if au.mutation.ActivityCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldActivityCode,
		})
	}
	if value, ok := au.mutation.ActivityName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldActivityName,
		})
	}
	if au.mutation.ActivityNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldActivityName,
		})
	}
	if value, ok := au.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldSummary,
		})
	}
	if au.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldSummary,
		})
	}
	if value, ok := au.mutation.RuleImgSc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldRuleImgSc,
		})
	}
	if au.mutation.RuleImgScCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldRuleImgSc,
		})
	}
	if value, ok := au.mutation.RuleImgTc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldRuleImgTc,
		})
	}
	if au.mutation.RuleImgTcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldRuleImgTc,
		})
	}
	if value, ok := au.mutation.PopupImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldPopupImg,
		})
	}
	if au.mutation.PopupImgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldPopupImg,
		})
	}
	if value, ok := au.mutation.RegDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activity.FieldRegDays,
		})
	}
	if value, ok := au.mutation.AddedRegDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activity.FieldRegDays,
		})
	}
	if au.mutation.RegDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: activity.FieldRegDays,
		})
	}
	if value, ok := au.mutation.CycleType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldCycleType,
		})
	}
	if au.mutation.CycleTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldCycleType,
		})
	}
	if value, ok := au.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldEffectTime,
		})
	}
	if au.mutation.EffectTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldEffectTime,
		})
	}
	if value, ok := au.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldExpiredTime,
		})
	}
	if au.mutation.ExpiredTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldExpiredTime,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldCreateBy,
		})
	}
	if value, ok := au.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldCreateBy,
		})
	}
	if value, ok := au.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldUpdateBy,
		})
	}
	if value, ok := au.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldUpdateBy,
		})
	}
	if value, ok := au.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldTenantId,
		})
	}
	if value, ok := au.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityMutation
}

// SetActivityCode sets the "activityCode" field.
func (auo *ActivityUpdateOne) SetActivityCode(s string) *ActivityUpdateOne {
	auo.mutation.SetActivityCode(s)
	return auo
}

// SetNillableActivityCode sets the "activityCode" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityCode(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetActivityCode(*s)
	}
	return auo
}

// ClearActivityCode clears the value of the "activityCode" field.
func (auo *ActivityUpdateOne) ClearActivityCode() *ActivityUpdateOne {
	auo.mutation.ClearActivityCode()
	return auo
}

// SetActivityName sets the "activityName" field.
func (auo *ActivityUpdateOne) SetActivityName(s string) *ActivityUpdateOne {
	auo.mutation.SetActivityName(s)
	return auo
}

// SetNillableActivityName sets the "activityName" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityName(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetActivityName(*s)
	}
	return auo
}

// ClearActivityName clears the value of the "activityName" field.
func (auo *ActivityUpdateOne) ClearActivityName() *ActivityUpdateOne {
	auo.mutation.ClearActivityName()
	return auo
}

// SetSummary sets the "summary" field.
func (auo *ActivityUpdateOne) SetSummary(s string) *ActivityUpdateOne {
	auo.mutation.SetSummary(s)
	return auo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableSummary(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetSummary(*s)
	}
	return auo
}

// ClearSummary clears the value of the "summary" field.
func (auo *ActivityUpdateOne) ClearSummary() *ActivityUpdateOne {
	auo.mutation.ClearSummary()
	return auo
}

// SetRuleImgSc sets the "ruleImgSc" field.
func (auo *ActivityUpdateOne) SetRuleImgSc(s string) *ActivityUpdateOne {
	auo.mutation.SetRuleImgSc(s)
	return auo
}

// SetNillableRuleImgSc sets the "ruleImgSc" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableRuleImgSc(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetRuleImgSc(*s)
	}
	return auo
}

// ClearRuleImgSc clears the value of the "ruleImgSc" field.
func (auo *ActivityUpdateOne) ClearRuleImgSc() *ActivityUpdateOne {
	auo.mutation.ClearRuleImgSc()
	return auo
}

// SetRuleImgTc sets the "ruleImgTc" field.
func (auo *ActivityUpdateOne) SetRuleImgTc(s string) *ActivityUpdateOne {
	auo.mutation.SetRuleImgTc(s)
	return auo
}

// SetNillableRuleImgTc sets the "ruleImgTc" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableRuleImgTc(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetRuleImgTc(*s)
	}
	return auo
}

// ClearRuleImgTc clears the value of the "ruleImgTc" field.
func (auo *ActivityUpdateOne) ClearRuleImgTc() *ActivityUpdateOne {
	auo.mutation.ClearRuleImgTc()
	return auo
}

// SetPopupImg sets the "popupImg" field.
func (auo *ActivityUpdateOne) SetPopupImg(s string) *ActivityUpdateOne {
	auo.mutation.SetPopupImg(s)
	return auo
}

// SetNillablePopupImg sets the "popupImg" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillablePopupImg(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetPopupImg(*s)
	}
	return auo
}

// ClearPopupImg clears the value of the "popupImg" field.
func (auo *ActivityUpdateOne) ClearPopupImg() *ActivityUpdateOne {
	auo.mutation.ClearPopupImg()
	return auo
}

// SetRegDays sets the "regDays" field.
func (auo *ActivityUpdateOne) SetRegDays(i int32) *ActivityUpdateOne {
	auo.mutation.ResetRegDays()
	auo.mutation.SetRegDays(i)
	return auo
}

// SetNillableRegDays sets the "regDays" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableRegDays(i *int32) *ActivityUpdateOne {
	if i != nil {
		auo.SetRegDays(*i)
	}
	return auo
}

// AddRegDays adds i to the "regDays" field.
func (auo *ActivityUpdateOne) AddRegDays(i int32) *ActivityUpdateOne {
	auo.mutation.AddRegDays(i)
	return auo
}

// ClearRegDays clears the value of the "regDays" field.
func (auo *ActivityUpdateOne) ClearRegDays() *ActivityUpdateOne {
	auo.mutation.ClearRegDays()
	return auo
}

// SetCycleType sets the "cycleType" field.
func (auo *ActivityUpdateOne) SetCycleType(s string) *ActivityUpdateOne {
	auo.mutation.SetCycleType(s)
	return auo
}

// SetNillableCycleType sets the "cycleType" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCycleType(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetCycleType(*s)
	}
	return auo
}

// ClearCycleType clears the value of the "cycleType" field.
func (auo *ActivityUpdateOne) ClearCycleType() *ActivityUpdateOne {
	auo.mutation.ClearCycleType()
	return auo
}

// SetEffectTime sets the "effectTime" field.
func (auo *ActivityUpdateOne) SetEffectTime(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetEffectTime(t)
	return auo
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableEffectTime(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetEffectTime(*t)
	}
	return auo
}

// ClearEffectTime clears the value of the "effectTime" field.
func (auo *ActivityUpdateOne) ClearEffectTime() *ActivityUpdateOne {
	auo.mutation.ClearEffectTime()
	return auo
}

// SetExpiredTime sets the "expiredTime" field.
func (auo *ActivityUpdateOne) SetExpiredTime(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetExpiredTime(t)
	return auo
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableExpiredTime(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetExpiredTime(*t)
	}
	return auo
}

// ClearExpiredTime clears the value of the "expiredTime" field.
func (auo *ActivityUpdateOne) ClearExpiredTime() *ActivityUpdateOne {
	auo.mutation.ClearExpiredTime()
	return auo
}

// SetUpdatedAt sets the "updatedAt" field.
func (auo *ActivityUpdateOne) SetUpdatedAt(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetCreateBy sets the "createBy" field.
func (auo *ActivityUpdateOne) SetCreateBy(i int64) *ActivityUpdateOne {
	auo.mutation.ResetCreateBy()
	auo.mutation.SetCreateBy(i)
	return auo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableCreateBy(i *int64) *ActivityUpdateOne {
	if i != nil {
		auo.SetCreateBy(*i)
	}
	return auo
}

// AddCreateBy adds i to the "createBy" field.
func (auo *ActivityUpdateOne) AddCreateBy(i int64) *ActivityUpdateOne {
	auo.mutation.AddCreateBy(i)
	return auo
}

// SetUpdateBy sets the "updateBy" field.
func (auo *ActivityUpdateOne) SetUpdateBy(i int64) *ActivityUpdateOne {
	auo.mutation.ResetUpdateBy()
	auo.mutation.SetUpdateBy(i)
	return auo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableUpdateBy(i *int64) *ActivityUpdateOne {
	if i != nil {
		auo.SetUpdateBy(*i)
	}
	return auo
}

// AddUpdateBy adds i to the "updateBy" field.
func (auo *ActivityUpdateOne) AddUpdateBy(i int64) *ActivityUpdateOne {
	auo.mutation.AddUpdateBy(i)
	return auo
}

// SetTenantId sets the "tenantId" field.
func (auo *ActivityUpdateOne) SetTenantId(i int64) *ActivityUpdateOne {
	auo.mutation.ResetTenantId()
	auo.mutation.SetTenantId(i)
	return auo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableTenantId(i *int64) *ActivityUpdateOne {
	if i != nil {
		auo.SetTenantId(*i)
	}
	return auo
}

// AddTenantId adds i to the "tenantId" field.
func (auo *ActivityUpdateOne) AddTenantId(i int64) *ActivityUpdateOne {
	auo.mutation.AddTenantId(i)
	return auo
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Activity entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	var (
		err  error
		node *Activity
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ActivityUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := activity.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: activity.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Activity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activity.FieldID)
		for _, f := range fields {
			if !activity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ActivityCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldActivityCode,
		})
	}
	if auo.mutation.ActivityCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldActivityCode,
		})
	}
	if value, ok := auo.mutation.ActivityName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldActivityName,
		})
	}
	if auo.mutation.ActivityNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldActivityName,
		})
	}
	if value, ok := auo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldSummary,
		})
	}
	if auo.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldSummary,
		})
	}
	if value, ok := auo.mutation.RuleImgSc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldRuleImgSc,
		})
	}
	if auo.mutation.RuleImgScCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldRuleImgSc,
		})
	}
	if value, ok := auo.mutation.RuleImgTc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldRuleImgTc,
		})
	}
	if auo.mutation.RuleImgTcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldRuleImgTc,
		})
	}
	if value, ok := auo.mutation.PopupImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldPopupImg,
		})
	}
	if auo.mutation.PopupImgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldPopupImg,
		})
	}
	if value, ok := auo.mutation.RegDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activity.FieldRegDays,
		})
	}
	if value, ok := auo.mutation.AddedRegDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: activity.FieldRegDays,
		})
	}
	if auo.mutation.RegDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: activity.FieldRegDays,
		})
	}
	if value, ok := auo.mutation.CycleType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldCycleType,
		})
	}
	if auo.mutation.CycleTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: activity.FieldCycleType,
		})
	}
	if value, ok := auo.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldEffectTime,
		})
	}
	if auo.mutation.EffectTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldEffectTime,
		})
	}
	if value, ok := auo.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldExpiredTime,
		})
	}
	if auo.mutation.ExpiredTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: activity.FieldExpiredTime,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldCreateBy,
		})
	}
	if value, ok := auo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldCreateBy,
		})
	}
	if value, ok := auo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldUpdateBy,
		})
	}
	if value, ok := auo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldUpdateBy,
		})
	}
	if value, ok := auo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldTenantId,
		})
	}
	if value, ok := auo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: activity.FieldTenantId,
		})
	}
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
