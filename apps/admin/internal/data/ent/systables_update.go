// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/systables"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysTablesUpdate is the builder for updating SysTables entities.
type SysTablesUpdate struct {
	config
	hooks    []Hook
	mutation *SysTablesMutation
}

// Where appends a list predicates to the SysTablesUpdate builder.
func (stu *SysTablesUpdate) Where(ps ...predicate.SysTables) *SysTablesUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetTableName sets the "tableName" field.
func (stu *SysTablesUpdate) SetTableName(s string) *SysTablesUpdate {
	stu.mutation.SetTableName(s)
	return stu
}

// SetNillableTableName sets the "tableName" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableTableName(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetTableName(*s)
	}
	return stu
}

// ClearTableName clears the value of the "tableName" field.
func (stu *SysTablesUpdate) ClearTableName() *SysTablesUpdate {
	stu.mutation.ClearTableName()
	return stu
}

// SetTableComment sets the "tableComment" field.
func (stu *SysTablesUpdate) SetTableComment(s string) *SysTablesUpdate {
	stu.mutation.SetTableComment(s)
	return stu
}

// SetNillableTableComment sets the "tableComment" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableTableComment(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetTableComment(*s)
	}
	return stu
}

// ClearTableComment clears the value of the "tableComment" field.
func (stu *SysTablesUpdate) ClearTableComment() *SysTablesUpdate {
	stu.mutation.ClearTableComment()
	return stu
}

// SetClassName sets the "className" field.
func (stu *SysTablesUpdate) SetClassName(s string) *SysTablesUpdate {
	stu.mutation.SetClassName(s)
	return stu
}

// SetNillableClassName sets the "className" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableClassName(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetClassName(*s)
	}
	return stu
}

// ClearClassName clears the value of the "className" field.
func (stu *SysTablesUpdate) ClearClassName() *SysTablesUpdate {
	stu.mutation.ClearClassName()
	return stu
}

// SetTplCategory sets the "tplCategory" field.
func (stu *SysTablesUpdate) SetTplCategory(s string) *SysTablesUpdate {
	stu.mutation.SetTplCategory(s)
	return stu
}

// SetNillableTplCategory sets the "tplCategory" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableTplCategory(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetTplCategory(*s)
	}
	return stu
}

// ClearTplCategory clears the value of the "tplCategory" field.
func (stu *SysTablesUpdate) ClearTplCategory() *SysTablesUpdate {
	stu.mutation.ClearTplCategory()
	return stu
}

// SetPackageName sets the "packageName" field.
func (stu *SysTablesUpdate) SetPackageName(s string) *SysTablesUpdate {
	stu.mutation.SetPackageName(s)
	return stu
}

// SetNillablePackageName sets the "packageName" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillablePackageName(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetPackageName(*s)
	}
	return stu
}

// ClearPackageName clears the value of the "packageName" field.
func (stu *SysTablesUpdate) ClearPackageName() *SysTablesUpdate {
	stu.mutation.ClearPackageName()
	return stu
}

// SetModuleName sets the "moduleName" field.
func (stu *SysTablesUpdate) SetModuleName(s string) *SysTablesUpdate {
	stu.mutation.SetModuleName(s)
	return stu
}

// SetNillableModuleName sets the "moduleName" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableModuleName(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetModuleName(*s)
	}
	return stu
}

// ClearModuleName clears the value of the "moduleName" field.
func (stu *SysTablesUpdate) ClearModuleName() *SysTablesUpdate {
	stu.mutation.ClearModuleName()
	return stu
}

// SetModuleFrontName sets the "moduleFrontName" field.
func (stu *SysTablesUpdate) SetModuleFrontName(s string) *SysTablesUpdate {
	stu.mutation.SetModuleFrontName(s)
	return stu
}

// SetNillableModuleFrontName sets the "moduleFrontName" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableModuleFrontName(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetModuleFrontName(*s)
	}
	return stu
}

// ClearModuleFrontName clears the value of the "moduleFrontName" field.
func (stu *SysTablesUpdate) ClearModuleFrontName() *SysTablesUpdate {
	stu.mutation.ClearModuleFrontName()
	return stu
}

// SetBusinessName sets the "businessName" field.
func (stu *SysTablesUpdate) SetBusinessName(s string) *SysTablesUpdate {
	stu.mutation.SetBusinessName(s)
	return stu
}

// SetNillableBusinessName sets the "businessName" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableBusinessName(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetBusinessName(*s)
	}
	return stu
}

// ClearBusinessName clears the value of the "businessName" field.
func (stu *SysTablesUpdate) ClearBusinessName() *SysTablesUpdate {
	stu.mutation.ClearBusinessName()
	return stu
}

// SetFunctionName sets the "functionName" field.
func (stu *SysTablesUpdate) SetFunctionName(s string) *SysTablesUpdate {
	stu.mutation.SetFunctionName(s)
	return stu
}

// SetNillableFunctionName sets the "functionName" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableFunctionName(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetFunctionName(*s)
	}
	return stu
}

// ClearFunctionName clears the value of the "functionName" field.
func (stu *SysTablesUpdate) ClearFunctionName() *SysTablesUpdate {
	stu.mutation.ClearFunctionName()
	return stu
}

// SetFunctionAuthor sets the "functionAuthor" field.
func (stu *SysTablesUpdate) SetFunctionAuthor(s string) *SysTablesUpdate {
	stu.mutation.SetFunctionAuthor(s)
	return stu
}

// SetNillableFunctionAuthor sets the "functionAuthor" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableFunctionAuthor(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetFunctionAuthor(*s)
	}
	return stu
}

// ClearFunctionAuthor clears the value of the "functionAuthor" field.
func (stu *SysTablesUpdate) ClearFunctionAuthor() *SysTablesUpdate {
	stu.mutation.ClearFunctionAuthor()
	return stu
}

// SetPkColumn sets the "pkColumn" field.
func (stu *SysTablesUpdate) SetPkColumn(s string) *SysTablesUpdate {
	stu.mutation.SetPkColumn(s)
	return stu
}

// SetNillablePkColumn sets the "pkColumn" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillablePkColumn(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetPkColumn(*s)
	}
	return stu
}

// ClearPkColumn clears the value of the "pkColumn" field.
func (stu *SysTablesUpdate) ClearPkColumn() *SysTablesUpdate {
	stu.mutation.ClearPkColumn()
	return stu
}

// SetPkGoField sets the "pkGoField" field.
func (stu *SysTablesUpdate) SetPkGoField(s string) *SysTablesUpdate {
	stu.mutation.SetPkGoField(s)
	return stu
}

// SetNillablePkGoField sets the "pkGoField" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillablePkGoField(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetPkGoField(*s)
	}
	return stu
}

// ClearPkGoField clears the value of the "pkGoField" field.
func (stu *SysTablesUpdate) ClearPkGoField() *SysTablesUpdate {
	stu.mutation.ClearPkGoField()
	return stu
}

// SetPkJsonField sets the "pkJsonField" field.
func (stu *SysTablesUpdate) SetPkJsonField(s string) *SysTablesUpdate {
	stu.mutation.SetPkJsonField(s)
	return stu
}

// SetNillablePkJsonField sets the "pkJsonField" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillablePkJsonField(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetPkJsonField(*s)
	}
	return stu
}

// ClearPkJsonField clears the value of the "pkJsonField" field.
func (stu *SysTablesUpdate) ClearPkJsonField() *SysTablesUpdate {
	stu.mutation.ClearPkJsonField()
	return stu
}

// SetOptions sets the "options" field.
func (stu *SysTablesUpdate) SetOptions(s string) *SysTablesUpdate {
	stu.mutation.SetOptions(s)
	return stu
}

// SetNillableOptions sets the "options" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableOptions(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetOptions(*s)
	}
	return stu
}

// ClearOptions clears the value of the "options" field.
func (stu *SysTablesUpdate) ClearOptions() *SysTablesUpdate {
	stu.mutation.ClearOptions()
	return stu
}

// SetTreeCode sets the "treeCode" field.
func (stu *SysTablesUpdate) SetTreeCode(s string) *SysTablesUpdate {
	stu.mutation.SetTreeCode(s)
	return stu
}

// SetNillableTreeCode sets the "treeCode" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableTreeCode(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetTreeCode(*s)
	}
	return stu
}

// ClearTreeCode clears the value of the "treeCode" field.
func (stu *SysTablesUpdate) ClearTreeCode() *SysTablesUpdate {
	stu.mutation.ClearTreeCode()
	return stu
}

// SetTreeParentCode sets the "treeParentCode" field.
func (stu *SysTablesUpdate) SetTreeParentCode(s string) *SysTablesUpdate {
	stu.mutation.SetTreeParentCode(s)
	return stu
}

// SetNillableTreeParentCode sets the "treeParentCode" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableTreeParentCode(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetTreeParentCode(*s)
	}
	return stu
}

// ClearTreeParentCode clears the value of the "treeParentCode" field.
func (stu *SysTablesUpdate) ClearTreeParentCode() *SysTablesUpdate {
	stu.mutation.ClearTreeParentCode()
	return stu
}

// SetTreeName sets the "treeName" field.
func (stu *SysTablesUpdate) SetTreeName(s string) *SysTablesUpdate {
	stu.mutation.SetTreeName(s)
	return stu
}

// SetNillableTreeName sets the "treeName" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableTreeName(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetTreeName(*s)
	}
	return stu
}

// ClearTreeName clears the value of the "treeName" field.
func (stu *SysTablesUpdate) ClearTreeName() *SysTablesUpdate {
	stu.mutation.ClearTreeName()
	return stu
}

// SetTree sets the "tree" field.
func (stu *SysTablesUpdate) SetTree(b bool) *SysTablesUpdate {
	stu.mutation.SetTree(b)
	return stu
}

// SetNillableTree sets the "tree" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableTree(b *bool) *SysTablesUpdate {
	if b != nil {
		stu.SetTree(*b)
	}
	return stu
}

// ClearTree clears the value of the "tree" field.
func (stu *SysTablesUpdate) ClearTree() *SysTablesUpdate {
	stu.mutation.ClearTree()
	return stu
}

// SetCrud sets the "crud" field.
func (stu *SysTablesUpdate) SetCrud(b bool) *SysTablesUpdate {
	stu.mutation.SetCrud(b)
	return stu
}

// SetNillableCrud sets the "crud" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableCrud(b *bool) *SysTablesUpdate {
	if b != nil {
		stu.SetCrud(*b)
	}
	return stu
}

// ClearCrud clears the value of the "crud" field.
func (stu *SysTablesUpdate) ClearCrud() *SysTablesUpdate {
	stu.mutation.ClearCrud()
	return stu
}

// SetRemark sets the "remark" field.
func (stu *SysTablesUpdate) SetRemark(s string) *SysTablesUpdate {
	stu.mutation.SetRemark(s)
	return stu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableRemark(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetRemark(*s)
	}
	return stu
}

// ClearRemark clears the value of the "remark" field.
func (stu *SysTablesUpdate) ClearRemark() *SysTablesUpdate {
	stu.mutation.ClearRemark()
	return stu
}

// SetIsDataScope sets the "isDataScope" field.
func (stu *SysTablesUpdate) SetIsDataScope(i int32) *SysTablesUpdate {
	stu.mutation.ResetIsDataScope()
	stu.mutation.SetIsDataScope(i)
	return stu
}

// SetNillableIsDataScope sets the "isDataScope" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableIsDataScope(i *int32) *SysTablesUpdate {
	if i != nil {
		stu.SetIsDataScope(*i)
	}
	return stu
}

// AddIsDataScope adds i to the "isDataScope" field.
func (stu *SysTablesUpdate) AddIsDataScope(i int32) *SysTablesUpdate {
	stu.mutation.AddIsDataScope(i)
	return stu
}

// ClearIsDataScope clears the value of the "isDataScope" field.
func (stu *SysTablesUpdate) ClearIsDataScope() *SysTablesUpdate {
	stu.mutation.ClearIsDataScope()
	return stu
}

// SetIsActions sets the "isActions" field.
func (stu *SysTablesUpdate) SetIsActions(i int32) *SysTablesUpdate {
	stu.mutation.ResetIsActions()
	stu.mutation.SetIsActions(i)
	return stu
}

// SetNillableIsActions sets the "isActions" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableIsActions(i *int32) *SysTablesUpdate {
	if i != nil {
		stu.SetIsActions(*i)
	}
	return stu
}

// AddIsActions adds i to the "isActions" field.
func (stu *SysTablesUpdate) AddIsActions(i int32) *SysTablesUpdate {
	stu.mutation.AddIsActions(i)
	return stu
}

// ClearIsActions clears the value of the "isActions" field.
func (stu *SysTablesUpdate) ClearIsActions() *SysTablesUpdate {
	stu.mutation.ClearIsActions()
	return stu
}

// SetIsAuth sets the "isAuth" field.
func (stu *SysTablesUpdate) SetIsAuth(i int32) *SysTablesUpdate {
	stu.mutation.ResetIsAuth()
	stu.mutation.SetIsAuth(i)
	return stu
}

// SetNillableIsAuth sets the "isAuth" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableIsAuth(i *int32) *SysTablesUpdate {
	if i != nil {
		stu.SetIsAuth(*i)
	}
	return stu
}

// AddIsAuth adds i to the "isAuth" field.
func (stu *SysTablesUpdate) AddIsAuth(i int32) *SysTablesUpdate {
	stu.mutation.AddIsAuth(i)
	return stu
}

// ClearIsAuth clears the value of the "isAuth" field.
func (stu *SysTablesUpdate) ClearIsAuth() *SysTablesUpdate {
	stu.mutation.ClearIsAuth()
	return stu
}

// SetIsLogicalDelete sets the "isLogicalDelete" field.
func (stu *SysTablesUpdate) SetIsLogicalDelete(s string) *SysTablesUpdate {
	stu.mutation.SetIsLogicalDelete(s)
	return stu
}

// SetNillableIsLogicalDelete sets the "isLogicalDelete" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableIsLogicalDelete(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetIsLogicalDelete(*s)
	}
	return stu
}

// ClearIsLogicalDelete clears the value of the "isLogicalDelete" field.
func (stu *SysTablesUpdate) ClearIsLogicalDelete() *SysTablesUpdate {
	stu.mutation.ClearIsLogicalDelete()
	return stu
}

// SetLogicalDelete sets the "logicalDelete" field.
func (stu *SysTablesUpdate) SetLogicalDelete(b bool) *SysTablesUpdate {
	stu.mutation.SetLogicalDelete(b)
	return stu
}

// SetNillableLogicalDelete sets the "logicalDelete" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableLogicalDelete(b *bool) *SysTablesUpdate {
	if b != nil {
		stu.SetLogicalDelete(*b)
	}
	return stu
}

// ClearLogicalDelete clears the value of the "logicalDelete" field.
func (stu *SysTablesUpdate) ClearLogicalDelete() *SysTablesUpdate {
	stu.mutation.ClearLogicalDelete()
	return stu
}

// SetLogicalDeleteColumn sets the "logicalDeleteColumn" field.
func (stu *SysTablesUpdate) SetLogicalDeleteColumn(s string) *SysTablesUpdate {
	stu.mutation.SetLogicalDeleteColumn(s)
	return stu
}

// SetNillableLogicalDeleteColumn sets the "logicalDeleteColumn" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableLogicalDeleteColumn(s *string) *SysTablesUpdate {
	if s != nil {
		stu.SetLogicalDeleteColumn(*s)
	}
	return stu
}

// ClearLogicalDeleteColumn clears the value of the "logicalDeleteColumn" field.
func (stu *SysTablesUpdate) ClearLogicalDeleteColumn() *SysTablesUpdate {
	stu.mutation.ClearLogicalDeleteColumn()
	return stu
}

// SetUpdatedAt sets the "updatedAt" field.
func (stu *SysTablesUpdate) SetUpdatedAt(t time.Time) *SysTablesUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// SetCreateBy sets the "createBy" field.
func (stu *SysTablesUpdate) SetCreateBy(i int64) *SysTablesUpdate {
	stu.mutation.ResetCreateBy()
	stu.mutation.SetCreateBy(i)
	return stu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableCreateBy(i *int64) *SysTablesUpdate {
	if i != nil {
		stu.SetCreateBy(*i)
	}
	return stu
}

// AddCreateBy adds i to the "createBy" field.
func (stu *SysTablesUpdate) AddCreateBy(i int64) *SysTablesUpdate {
	stu.mutation.AddCreateBy(i)
	return stu
}

// SetUpdateBy sets the "updateBy" field.
func (stu *SysTablesUpdate) SetUpdateBy(i int64) *SysTablesUpdate {
	stu.mutation.ResetUpdateBy()
	stu.mutation.SetUpdateBy(i)
	return stu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableUpdateBy(i *int64) *SysTablesUpdate {
	if i != nil {
		stu.SetUpdateBy(*i)
	}
	return stu
}

// AddUpdateBy adds i to the "updateBy" field.
func (stu *SysTablesUpdate) AddUpdateBy(i int64) *SysTablesUpdate {
	stu.mutation.AddUpdateBy(i)
	return stu
}

// SetTenantId sets the "tenantId" field.
func (stu *SysTablesUpdate) SetTenantId(i int64) *SysTablesUpdate {
	stu.mutation.ResetTenantId()
	stu.mutation.SetTenantId(i)
	return stu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (stu *SysTablesUpdate) SetNillableTenantId(i *int64) *SysTablesUpdate {
	if i != nil {
		stu.SetTenantId(*i)
	}
	return stu
}

// AddTenantId adds i to the "tenantId" field.
func (stu *SysTablesUpdate) AddTenantId(i int64) *SysTablesUpdate {
	stu.mutation.AddTenantId(i)
	return stu
}

// Mutation returns the SysTablesMutation object of the builder.
func (stu *SysTablesUpdate) Mutation() *SysTablesMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SysTablesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	stu.defaults()
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysTablesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SysTablesUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SysTablesUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SysTablesUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SysTablesUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		v := systables.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
}

func (stu *SysTablesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systables.Table,
			Columns: systables.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: systables.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.TableName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTableName,
		})
	}
	if stu.mutation.TableNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTableName,
		})
	}
	if value, ok := stu.mutation.TableComment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTableComment,
		})
	}
	if stu.mutation.TableCommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTableComment,
		})
	}
	if value, ok := stu.mutation.ClassName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldClassName,
		})
	}
	if stu.mutation.ClassNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldClassName,
		})
	}
	if value, ok := stu.mutation.TplCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTplCategory,
		})
	}
	if stu.mutation.TplCategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTplCategory,
		})
	}
	if value, ok := stu.mutation.PackageName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldPackageName,
		})
	}
	if stu.mutation.PackageNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldPackageName,
		})
	}
	if value, ok := stu.mutation.ModuleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldModuleName,
		})
	}
	if stu.mutation.ModuleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldModuleName,
		})
	}
	if value, ok := stu.mutation.ModuleFrontName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldModuleFrontName,
		})
	}
	if stu.mutation.ModuleFrontNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldModuleFrontName,
		})
	}
	if value, ok := stu.mutation.BusinessName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldBusinessName,
		})
	}
	if stu.mutation.BusinessNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldBusinessName,
		})
	}
	if value, ok := stu.mutation.FunctionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldFunctionName,
		})
	}
	if stu.mutation.FunctionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldFunctionName,
		})
	}
	if value, ok := stu.mutation.FunctionAuthor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldFunctionAuthor,
		})
	}
	if stu.mutation.FunctionAuthorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldFunctionAuthor,
		})
	}
	if value, ok := stu.mutation.PkColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldPkColumn,
		})
	}
	if stu.mutation.PkColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldPkColumn,
		})
	}
	if value, ok := stu.mutation.PkGoField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldPkGoField,
		})
	}
	if stu.mutation.PkGoFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldPkGoField,
		})
	}
	if value, ok := stu.mutation.PkJsonField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldPkJsonField,
		})
	}
	if stu.mutation.PkJsonFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldPkJsonField,
		})
	}
	if value, ok := stu.mutation.Options(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldOptions,
		})
	}
	if stu.mutation.OptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldOptions,
		})
	}
	if value, ok := stu.mutation.TreeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTreeCode,
		})
	}
	if stu.mutation.TreeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTreeCode,
		})
	}
	if value, ok := stu.mutation.TreeParentCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTreeParentCode,
		})
	}
	if stu.mutation.TreeParentCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTreeParentCode,
		})
	}
	if value, ok := stu.mutation.TreeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTreeName,
		})
	}
	if stu.mutation.TreeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTreeName,
		})
	}
	if value, ok := stu.mutation.Tree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: systables.FieldTree,
		})
	}
	if stu.mutation.TreeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: systables.FieldTree,
		})
	}
	if value, ok := stu.mutation.Crud(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: systables.FieldCrud,
		})
	}
	if stu.mutation.CrudCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: systables.FieldCrud,
		})
	}
	if value, ok := stu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldRemark,
		})
	}
	if stu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldRemark,
		})
	}
	if value, ok := stu.mutation.IsDataScope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsDataScope,
		})
	}
	if value, ok := stu.mutation.AddedIsDataScope(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsDataScope,
		})
	}
	if stu.mutation.IsDataScopeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: systables.FieldIsDataScope,
		})
	}
	if value, ok := stu.mutation.IsActions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsActions,
		})
	}
	if value, ok := stu.mutation.AddedIsActions(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsActions,
		})
	}
	if stu.mutation.IsActionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: systables.FieldIsActions,
		})
	}
	if value, ok := stu.mutation.IsAuth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsAuth,
		})
	}
	if value, ok := stu.mutation.AddedIsAuth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsAuth,
		})
	}
	if stu.mutation.IsAuthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: systables.FieldIsAuth,
		})
	}
	if value, ok := stu.mutation.IsLogicalDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldIsLogicalDelete,
		})
	}
	if stu.mutation.IsLogicalDeleteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldIsLogicalDelete,
		})
	}
	if value, ok := stu.mutation.LogicalDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: systables.FieldLogicalDelete,
		})
	}
	if stu.mutation.LogicalDeleteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: systables.FieldLogicalDelete,
		})
	}
	if value, ok := stu.mutation.LogicalDeleteColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldLogicalDeleteColumn,
		})
	}
	if stu.mutation.LogicalDeleteColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldLogicalDeleteColumn,
		})
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systables.FieldUpdatedAt,
		})
	}
	if value, ok := stu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldCreateBy,
		})
	}
	if value, ok := stu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldCreateBy,
		})
	}
	if value, ok := stu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldUpdateBy,
		})
	}
	if value, ok := stu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldUpdateBy,
		})
	}
	if value, ok := stu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldTenantId,
		})
	}
	if value, ok := stu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systables.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysTablesUpdateOne is the builder for updating a single SysTables entity.
type SysTablesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysTablesMutation
}

// SetTableName sets the "tableName" field.
func (stuo *SysTablesUpdateOne) SetTableName(s string) *SysTablesUpdateOne {
	stuo.mutation.SetTableName(s)
	return stuo
}

// SetNillableTableName sets the "tableName" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableTableName(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetTableName(*s)
	}
	return stuo
}

// ClearTableName clears the value of the "tableName" field.
func (stuo *SysTablesUpdateOne) ClearTableName() *SysTablesUpdateOne {
	stuo.mutation.ClearTableName()
	return stuo
}

// SetTableComment sets the "tableComment" field.
func (stuo *SysTablesUpdateOne) SetTableComment(s string) *SysTablesUpdateOne {
	stuo.mutation.SetTableComment(s)
	return stuo
}

// SetNillableTableComment sets the "tableComment" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableTableComment(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetTableComment(*s)
	}
	return stuo
}

// ClearTableComment clears the value of the "tableComment" field.
func (stuo *SysTablesUpdateOne) ClearTableComment() *SysTablesUpdateOne {
	stuo.mutation.ClearTableComment()
	return stuo
}

// SetClassName sets the "className" field.
func (stuo *SysTablesUpdateOne) SetClassName(s string) *SysTablesUpdateOne {
	stuo.mutation.SetClassName(s)
	return stuo
}

// SetNillableClassName sets the "className" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableClassName(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetClassName(*s)
	}
	return stuo
}

// ClearClassName clears the value of the "className" field.
func (stuo *SysTablesUpdateOne) ClearClassName() *SysTablesUpdateOne {
	stuo.mutation.ClearClassName()
	return stuo
}

// SetTplCategory sets the "tplCategory" field.
func (stuo *SysTablesUpdateOne) SetTplCategory(s string) *SysTablesUpdateOne {
	stuo.mutation.SetTplCategory(s)
	return stuo
}

// SetNillableTplCategory sets the "tplCategory" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableTplCategory(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetTplCategory(*s)
	}
	return stuo
}

// ClearTplCategory clears the value of the "tplCategory" field.
func (stuo *SysTablesUpdateOne) ClearTplCategory() *SysTablesUpdateOne {
	stuo.mutation.ClearTplCategory()
	return stuo
}

// SetPackageName sets the "packageName" field.
func (stuo *SysTablesUpdateOne) SetPackageName(s string) *SysTablesUpdateOne {
	stuo.mutation.SetPackageName(s)
	return stuo
}

// SetNillablePackageName sets the "packageName" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillablePackageName(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetPackageName(*s)
	}
	return stuo
}

// ClearPackageName clears the value of the "packageName" field.
func (stuo *SysTablesUpdateOne) ClearPackageName() *SysTablesUpdateOne {
	stuo.mutation.ClearPackageName()
	return stuo
}

// SetModuleName sets the "moduleName" field.
func (stuo *SysTablesUpdateOne) SetModuleName(s string) *SysTablesUpdateOne {
	stuo.mutation.SetModuleName(s)
	return stuo
}

// SetNillableModuleName sets the "moduleName" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableModuleName(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetModuleName(*s)
	}
	return stuo
}

// ClearModuleName clears the value of the "moduleName" field.
func (stuo *SysTablesUpdateOne) ClearModuleName() *SysTablesUpdateOne {
	stuo.mutation.ClearModuleName()
	return stuo
}

// SetModuleFrontName sets the "moduleFrontName" field.
func (stuo *SysTablesUpdateOne) SetModuleFrontName(s string) *SysTablesUpdateOne {
	stuo.mutation.SetModuleFrontName(s)
	return stuo
}

// SetNillableModuleFrontName sets the "moduleFrontName" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableModuleFrontName(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetModuleFrontName(*s)
	}
	return stuo
}

// ClearModuleFrontName clears the value of the "moduleFrontName" field.
func (stuo *SysTablesUpdateOne) ClearModuleFrontName() *SysTablesUpdateOne {
	stuo.mutation.ClearModuleFrontName()
	return stuo
}

// SetBusinessName sets the "businessName" field.
func (stuo *SysTablesUpdateOne) SetBusinessName(s string) *SysTablesUpdateOne {
	stuo.mutation.SetBusinessName(s)
	return stuo
}

// SetNillableBusinessName sets the "businessName" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableBusinessName(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetBusinessName(*s)
	}
	return stuo
}

// ClearBusinessName clears the value of the "businessName" field.
func (stuo *SysTablesUpdateOne) ClearBusinessName() *SysTablesUpdateOne {
	stuo.mutation.ClearBusinessName()
	return stuo
}

// SetFunctionName sets the "functionName" field.
func (stuo *SysTablesUpdateOne) SetFunctionName(s string) *SysTablesUpdateOne {
	stuo.mutation.SetFunctionName(s)
	return stuo
}

// SetNillableFunctionName sets the "functionName" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableFunctionName(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetFunctionName(*s)
	}
	return stuo
}

// ClearFunctionName clears the value of the "functionName" field.
func (stuo *SysTablesUpdateOne) ClearFunctionName() *SysTablesUpdateOne {
	stuo.mutation.ClearFunctionName()
	return stuo
}

// SetFunctionAuthor sets the "functionAuthor" field.
func (stuo *SysTablesUpdateOne) SetFunctionAuthor(s string) *SysTablesUpdateOne {
	stuo.mutation.SetFunctionAuthor(s)
	return stuo
}

// SetNillableFunctionAuthor sets the "functionAuthor" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableFunctionAuthor(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetFunctionAuthor(*s)
	}
	return stuo
}

// ClearFunctionAuthor clears the value of the "functionAuthor" field.
func (stuo *SysTablesUpdateOne) ClearFunctionAuthor() *SysTablesUpdateOne {
	stuo.mutation.ClearFunctionAuthor()
	return stuo
}

// SetPkColumn sets the "pkColumn" field.
func (stuo *SysTablesUpdateOne) SetPkColumn(s string) *SysTablesUpdateOne {
	stuo.mutation.SetPkColumn(s)
	return stuo
}

// SetNillablePkColumn sets the "pkColumn" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillablePkColumn(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetPkColumn(*s)
	}
	return stuo
}

// ClearPkColumn clears the value of the "pkColumn" field.
func (stuo *SysTablesUpdateOne) ClearPkColumn() *SysTablesUpdateOne {
	stuo.mutation.ClearPkColumn()
	return stuo
}

// SetPkGoField sets the "pkGoField" field.
func (stuo *SysTablesUpdateOne) SetPkGoField(s string) *SysTablesUpdateOne {
	stuo.mutation.SetPkGoField(s)
	return stuo
}

// SetNillablePkGoField sets the "pkGoField" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillablePkGoField(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetPkGoField(*s)
	}
	return stuo
}

// ClearPkGoField clears the value of the "pkGoField" field.
func (stuo *SysTablesUpdateOne) ClearPkGoField() *SysTablesUpdateOne {
	stuo.mutation.ClearPkGoField()
	return stuo
}

// SetPkJsonField sets the "pkJsonField" field.
func (stuo *SysTablesUpdateOne) SetPkJsonField(s string) *SysTablesUpdateOne {
	stuo.mutation.SetPkJsonField(s)
	return stuo
}

// SetNillablePkJsonField sets the "pkJsonField" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillablePkJsonField(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetPkJsonField(*s)
	}
	return stuo
}

// ClearPkJsonField clears the value of the "pkJsonField" field.
func (stuo *SysTablesUpdateOne) ClearPkJsonField() *SysTablesUpdateOne {
	stuo.mutation.ClearPkJsonField()
	return stuo
}

// SetOptions sets the "options" field.
func (stuo *SysTablesUpdateOne) SetOptions(s string) *SysTablesUpdateOne {
	stuo.mutation.SetOptions(s)
	return stuo
}

// SetNillableOptions sets the "options" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableOptions(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetOptions(*s)
	}
	return stuo
}

// ClearOptions clears the value of the "options" field.
func (stuo *SysTablesUpdateOne) ClearOptions() *SysTablesUpdateOne {
	stuo.mutation.ClearOptions()
	return stuo
}

// SetTreeCode sets the "treeCode" field.
func (stuo *SysTablesUpdateOne) SetTreeCode(s string) *SysTablesUpdateOne {
	stuo.mutation.SetTreeCode(s)
	return stuo
}

// SetNillableTreeCode sets the "treeCode" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableTreeCode(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetTreeCode(*s)
	}
	return stuo
}

// ClearTreeCode clears the value of the "treeCode" field.
func (stuo *SysTablesUpdateOne) ClearTreeCode() *SysTablesUpdateOne {
	stuo.mutation.ClearTreeCode()
	return stuo
}

// SetTreeParentCode sets the "treeParentCode" field.
func (stuo *SysTablesUpdateOne) SetTreeParentCode(s string) *SysTablesUpdateOne {
	stuo.mutation.SetTreeParentCode(s)
	return stuo
}

// SetNillableTreeParentCode sets the "treeParentCode" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableTreeParentCode(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetTreeParentCode(*s)
	}
	return stuo
}

// ClearTreeParentCode clears the value of the "treeParentCode" field.
func (stuo *SysTablesUpdateOne) ClearTreeParentCode() *SysTablesUpdateOne {
	stuo.mutation.ClearTreeParentCode()
	return stuo
}

// SetTreeName sets the "treeName" field.
func (stuo *SysTablesUpdateOne) SetTreeName(s string) *SysTablesUpdateOne {
	stuo.mutation.SetTreeName(s)
	return stuo
}

// SetNillableTreeName sets the "treeName" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableTreeName(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetTreeName(*s)
	}
	return stuo
}

// ClearTreeName clears the value of the "treeName" field.
func (stuo *SysTablesUpdateOne) ClearTreeName() *SysTablesUpdateOne {
	stuo.mutation.ClearTreeName()
	return stuo
}

// SetTree sets the "tree" field.
func (stuo *SysTablesUpdateOne) SetTree(b bool) *SysTablesUpdateOne {
	stuo.mutation.SetTree(b)
	return stuo
}

// SetNillableTree sets the "tree" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableTree(b *bool) *SysTablesUpdateOne {
	if b != nil {
		stuo.SetTree(*b)
	}
	return stuo
}

// ClearTree clears the value of the "tree" field.
func (stuo *SysTablesUpdateOne) ClearTree() *SysTablesUpdateOne {
	stuo.mutation.ClearTree()
	return stuo
}

// SetCrud sets the "crud" field.
func (stuo *SysTablesUpdateOne) SetCrud(b bool) *SysTablesUpdateOne {
	stuo.mutation.SetCrud(b)
	return stuo
}

// SetNillableCrud sets the "crud" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableCrud(b *bool) *SysTablesUpdateOne {
	if b != nil {
		stuo.SetCrud(*b)
	}
	return stuo
}

// ClearCrud clears the value of the "crud" field.
func (stuo *SysTablesUpdateOne) ClearCrud() *SysTablesUpdateOne {
	stuo.mutation.ClearCrud()
	return stuo
}

// SetRemark sets the "remark" field.
func (stuo *SysTablesUpdateOne) SetRemark(s string) *SysTablesUpdateOne {
	stuo.mutation.SetRemark(s)
	return stuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableRemark(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetRemark(*s)
	}
	return stuo
}

// ClearRemark clears the value of the "remark" field.
func (stuo *SysTablesUpdateOne) ClearRemark() *SysTablesUpdateOne {
	stuo.mutation.ClearRemark()
	return stuo
}

// SetIsDataScope sets the "isDataScope" field.
func (stuo *SysTablesUpdateOne) SetIsDataScope(i int32) *SysTablesUpdateOne {
	stuo.mutation.ResetIsDataScope()
	stuo.mutation.SetIsDataScope(i)
	return stuo
}

// SetNillableIsDataScope sets the "isDataScope" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableIsDataScope(i *int32) *SysTablesUpdateOne {
	if i != nil {
		stuo.SetIsDataScope(*i)
	}
	return stuo
}

// AddIsDataScope adds i to the "isDataScope" field.
func (stuo *SysTablesUpdateOne) AddIsDataScope(i int32) *SysTablesUpdateOne {
	stuo.mutation.AddIsDataScope(i)
	return stuo
}

// ClearIsDataScope clears the value of the "isDataScope" field.
func (stuo *SysTablesUpdateOne) ClearIsDataScope() *SysTablesUpdateOne {
	stuo.mutation.ClearIsDataScope()
	return stuo
}

// SetIsActions sets the "isActions" field.
func (stuo *SysTablesUpdateOne) SetIsActions(i int32) *SysTablesUpdateOne {
	stuo.mutation.ResetIsActions()
	stuo.mutation.SetIsActions(i)
	return stuo
}

// SetNillableIsActions sets the "isActions" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableIsActions(i *int32) *SysTablesUpdateOne {
	if i != nil {
		stuo.SetIsActions(*i)
	}
	return stuo
}

// AddIsActions adds i to the "isActions" field.
func (stuo *SysTablesUpdateOne) AddIsActions(i int32) *SysTablesUpdateOne {
	stuo.mutation.AddIsActions(i)
	return stuo
}

// ClearIsActions clears the value of the "isActions" field.
func (stuo *SysTablesUpdateOne) ClearIsActions() *SysTablesUpdateOne {
	stuo.mutation.ClearIsActions()
	return stuo
}

// SetIsAuth sets the "isAuth" field.
func (stuo *SysTablesUpdateOne) SetIsAuth(i int32) *SysTablesUpdateOne {
	stuo.mutation.ResetIsAuth()
	stuo.mutation.SetIsAuth(i)
	return stuo
}

// SetNillableIsAuth sets the "isAuth" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableIsAuth(i *int32) *SysTablesUpdateOne {
	if i != nil {
		stuo.SetIsAuth(*i)
	}
	return stuo
}

// AddIsAuth adds i to the "isAuth" field.
func (stuo *SysTablesUpdateOne) AddIsAuth(i int32) *SysTablesUpdateOne {
	stuo.mutation.AddIsAuth(i)
	return stuo
}

// ClearIsAuth clears the value of the "isAuth" field.
func (stuo *SysTablesUpdateOne) ClearIsAuth() *SysTablesUpdateOne {
	stuo.mutation.ClearIsAuth()
	return stuo
}

// SetIsLogicalDelete sets the "isLogicalDelete" field.
func (stuo *SysTablesUpdateOne) SetIsLogicalDelete(s string) *SysTablesUpdateOne {
	stuo.mutation.SetIsLogicalDelete(s)
	return stuo
}

// SetNillableIsLogicalDelete sets the "isLogicalDelete" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableIsLogicalDelete(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetIsLogicalDelete(*s)
	}
	return stuo
}

// ClearIsLogicalDelete clears the value of the "isLogicalDelete" field.
func (stuo *SysTablesUpdateOne) ClearIsLogicalDelete() *SysTablesUpdateOne {
	stuo.mutation.ClearIsLogicalDelete()
	return stuo
}

// SetLogicalDelete sets the "logicalDelete" field.
func (stuo *SysTablesUpdateOne) SetLogicalDelete(b bool) *SysTablesUpdateOne {
	stuo.mutation.SetLogicalDelete(b)
	return stuo
}

// SetNillableLogicalDelete sets the "logicalDelete" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableLogicalDelete(b *bool) *SysTablesUpdateOne {
	if b != nil {
		stuo.SetLogicalDelete(*b)
	}
	return stuo
}

// ClearLogicalDelete clears the value of the "logicalDelete" field.
func (stuo *SysTablesUpdateOne) ClearLogicalDelete() *SysTablesUpdateOne {
	stuo.mutation.ClearLogicalDelete()
	return stuo
}

// SetLogicalDeleteColumn sets the "logicalDeleteColumn" field.
func (stuo *SysTablesUpdateOne) SetLogicalDeleteColumn(s string) *SysTablesUpdateOne {
	stuo.mutation.SetLogicalDeleteColumn(s)
	return stuo
}

// SetNillableLogicalDeleteColumn sets the "logicalDeleteColumn" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableLogicalDeleteColumn(s *string) *SysTablesUpdateOne {
	if s != nil {
		stuo.SetLogicalDeleteColumn(*s)
	}
	return stuo
}

// ClearLogicalDeleteColumn clears the value of the "logicalDeleteColumn" field.
func (stuo *SysTablesUpdateOne) ClearLogicalDeleteColumn() *SysTablesUpdateOne {
	stuo.mutation.ClearLogicalDeleteColumn()
	return stuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (stuo *SysTablesUpdateOne) SetUpdatedAt(t time.Time) *SysTablesUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// SetCreateBy sets the "createBy" field.
func (stuo *SysTablesUpdateOne) SetCreateBy(i int64) *SysTablesUpdateOne {
	stuo.mutation.ResetCreateBy()
	stuo.mutation.SetCreateBy(i)
	return stuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableCreateBy(i *int64) *SysTablesUpdateOne {
	if i != nil {
		stuo.SetCreateBy(*i)
	}
	return stuo
}

// AddCreateBy adds i to the "createBy" field.
func (stuo *SysTablesUpdateOne) AddCreateBy(i int64) *SysTablesUpdateOne {
	stuo.mutation.AddCreateBy(i)
	return stuo
}

// SetUpdateBy sets the "updateBy" field.
func (stuo *SysTablesUpdateOne) SetUpdateBy(i int64) *SysTablesUpdateOne {
	stuo.mutation.ResetUpdateBy()
	stuo.mutation.SetUpdateBy(i)
	return stuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableUpdateBy(i *int64) *SysTablesUpdateOne {
	if i != nil {
		stuo.SetUpdateBy(*i)
	}
	return stuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (stuo *SysTablesUpdateOne) AddUpdateBy(i int64) *SysTablesUpdateOne {
	stuo.mutation.AddUpdateBy(i)
	return stuo
}

// SetTenantId sets the "tenantId" field.
func (stuo *SysTablesUpdateOne) SetTenantId(i int64) *SysTablesUpdateOne {
	stuo.mutation.ResetTenantId()
	stuo.mutation.SetTenantId(i)
	return stuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (stuo *SysTablesUpdateOne) SetNillableTenantId(i *int64) *SysTablesUpdateOne {
	if i != nil {
		stuo.SetTenantId(*i)
	}
	return stuo
}

// AddTenantId adds i to the "tenantId" field.
func (stuo *SysTablesUpdateOne) AddTenantId(i int64) *SysTablesUpdateOne {
	stuo.mutation.AddTenantId(i)
	return stuo
}

// Mutation returns the SysTablesMutation object of the builder.
func (stuo *SysTablesUpdateOne) Mutation() *SysTablesMutation {
	return stuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SysTablesUpdateOne) Select(field string, fields ...string) *SysTablesUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SysTables entity.
func (stuo *SysTablesUpdateOne) Save(ctx context.Context) (*SysTables, error) {
	var (
		err  error
		node *SysTables
	)
	stuo.defaults()
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysTablesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SysTablesUpdateOne) SaveX(ctx context.Context) *SysTables {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SysTablesUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SysTablesUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SysTablesUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		v := systables.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
}

func (stuo *SysTablesUpdateOne) sqlSave(ctx context.Context) (_node *SysTables, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systables.Table,
			Columns: systables.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: systables.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysTables.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systables.FieldID)
		for _, f := range fields {
			if !systables.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systables.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.TableName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTableName,
		})
	}
	if stuo.mutation.TableNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTableName,
		})
	}
	if value, ok := stuo.mutation.TableComment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTableComment,
		})
	}
	if stuo.mutation.TableCommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTableComment,
		})
	}
	if value, ok := stuo.mutation.ClassName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldClassName,
		})
	}
	if stuo.mutation.ClassNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldClassName,
		})
	}
	if value, ok := stuo.mutation.TplCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTplCategory,
		})
	}
	if stuo.mutation.TplCategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTplCategory,
		})
	}
	if value, ok := stuo.mutation.PackageName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldPackageName,
		})
	}
	if stuo.mutation.PackageNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldPackageName,
		})
	}
	if value, ok := stuo.mutation.ModuleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldModuleName,
		})
	}
	if stuo.mutation.ModuleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldModuleName,
		})
	}
	if value, ok := stuo.mutation.ModuleFrontName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldModuleFrontName,
		})
	}
	if stuo.mutation.ModuleFrontNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldModuleFrontName,
		})
	}
	if value, ok := stuo.mutation.BusinessName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldBusinessName,
		})
	}
	if stuo.mutation.BusinessNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldBusinessName,
		})
	}
	if value, ok := stuo.mutation.FunctionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldFunctionName,
		})
	}
	if stuo.mutation.FunctionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldFunctionName,
		})
	}
	if value, ok := stuo.mutation.FunctionAuthor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldFunctionAuthor,
		})
	}
	if stuo.mutation.FunctionAuthorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldFunctionAuthor,
		})
	}
	if value, ok := stuo.mutation.PkColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldPkColumn,
		})
	}
	if stuo.mutation.PkColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldPkColumn,
		})
	}
	if value, ok := stuo.mutation.PkGoField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldPkGoField,
		})
	}
	if stuo.mutation.PkGoFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldPkGoField,
		})
	}
	if value, ok := stuo.mutation.PkJsonField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldPkJsonField,
		})
	}
	if stuo.mutation.PkJsonFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldPkJsonField,
		})
	}
	if value, ok := stuo.mutation.Options(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldOptions,
		})
	}
	if stuo.mutation.OptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldOptions,
		})
	}
	if value, ok := stuo.mutation.TreeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTreeCode,
		})
	}
	if stuo.mutation.TreeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTreeCode,
		})
	}
	if value, ok := stuo.mutation.TreeParentCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTreeParentCode,
		})
	}
	if stuo.mutation.TreeParentCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTreeParentCode,
		})
	}
	if value, ok := stuo.mutation.TreeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldTreeName,
		})
	}
	if stuo.mutation.TreeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldTreeName,
		})
	}
	if value, ok := stuo.mutation.Tree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: systables.FieldTree,
		})
	}
	if stuo.mutation.TreeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: systables.FieldTree,
		})
	}
	if value, ok := stuo.mutation.Crud(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: systables.FieldCrud,
		})
	}
	if stuo.mutation.CrudCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: systables.FieldCrud,
		})
	}
	if value, ok := stuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldRemark,
		})
	}
	if stuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldRemark,
		})
	}
	if value, ok := stuo.mutation.IsDataScope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsDataScope,
		})
	}
	if value, ok := stuo.mutation.AddedIsDataScope(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsDataScope,
		})
	}
	if stuo.mutation.IsDataScopeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: systables.FieldIsDataScope,
		})
	}
	if value, ok := stuo.mutation.IsActions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsActions,
		})
	}
	if value, ok := stuo.mutation.AddedIsActions(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsActions,
		})
	}
	if stuo.mutation.IsActionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: systables.FieldIsActions,
		})
	}
	if value, ok := stuo.mutation.IsAuth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsAuth,
		})
	}
	if value, ok := stuo.mutation.AddedIsAuth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systables.FieldIsAuth,
		})
	}
	if stuo.mutation.IsAuthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: systables.FieldIsAuth,
		})
	}
	if value, ok := stuo.mutation.IsLogicalDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldIsLogicalDelete,
		})
	}
	if stuo.mutation.IsLogicalDeleteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldIsLogicalDelete,
		})
	}
	if value, ok := stuo.mutation.LogicalDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: systables.FieldLogicalDelete,
		})
	}
	if stuo.mutation.LogicalDeleteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: systables.FieldLogicalDelete,
		})
	}
	if value, ok := stuo.mutation.LogicalDeleteColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systables.FieldLogicalDeleteColumn,
		})
	}
	if stuo.mutation.LogicalDeleteColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: systables.FieldLogicalDeleteColumn,
		})
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systables.FieldUpdatedAt,
		})
	}
	if value, ok := stuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldCreateBy,
		})
	}
	if value, ok := stuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldCreateBy,
		})
	}
	if value, ok := stuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldUpdateBy,
		})
	}
	if value, ok := stuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldUpdateBy,
		})
	}
	if value, ok := stuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldTenantId,
		})
	}
	if value, ok := stuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systables.FieldTenantId,
		})
	}
	_node = &SysTables{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systables.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
