// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/predicate"
	"hope/apps/param/internal/data/ent/userresourcerecord"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserResourceRecordUpdate is the builder for updating UserResourceRecord entities.
type UserResourceRecordUpdate struct {
	config
	hooks    []Hook
	mutation *UserResourceRecordMutation
}

// Where appends a list predicates to the UserResourceRecordUpdate builder.
func (urru *UserResourceRecordUpdate) Where(ps ...predicate.UserResourceRecord) *UserResourceRecordUpdate {
	urru.mutation.Where(ps...)
	return urru
}

// SetUserId sets the "userId" field.
func (urru *UserResourceRecordUpdate) SetUserId(i int64) *UserResourceRecordUpdate {
	urru.mutation.ResetUserId()
	urru.mutation.SetUserId(i)
	return urru
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableUserId(i *int64) *UserResourceRecordUpdate {
	if i != nil {
		urru.SetUserId(*i)
	}
	return urru
}

// AddUserId adds i to the "userId" field.
func (urru *UserResourceRecordUpdate) AddUserId(i int64) *UserResourceRecordUpdate {
	urru.mutation.AddUserId(i)
	return urru
}

// ClearUserId clears the value of the "userId" field.
func (urru *UserResourceRecordUpdate) ClearUserId() *UserResourceRecordUpdate {
	urru.mutation.ClearUserId()
	return urru
}

// SetResId sets the "resId" field.
func (urru *UserResourceRecordUpdate) SetResId(i int64) *UserResourceRecordUpdate {
	urru.mutation.ResetResId()
	urru.mutation.SetResId(i)
	return urru
}

// SetNillableResId sets the "resId" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableResId(i *int64) *UserResourceRecordUpdate {
	if i != nil {
		urru.SetResId(*i)
	}
	return urru
}

// AddResId adds i to the "resId" field.
func (urru *UserResourceRecordUpdate) AddResId(i int64) *UserResourceRecordUpdate {
	urru.mutation.AddResId(i)
	return urru
}

// ClearResId clears the value of the "resId" field.
func (urru *UserResourceRecordUpdate) ClearResId() *UserResourceRecordUpdate {
	urru.mutation.ClearResId()
	return urru
}

// SetDef sets the "def" field.
func (urru *UserResourceRecordUpdate) SetDef(b bool) *UserResourceRecordUpdate {
	urru.mutation.SetDef(b)
	return urru
}

// SetNillableDef sets the "def" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableDef(b *bool) *UserResourceRecordUpdate {
	if b != nil {
		urru.SetDef(*b)
	}
	return urru
}

// ClearDef clears the value of the "def" field.
func (urru *UserResourceRecordUpdate) ClearDef() *UserResourceRecordUpdate {
	urru.mutation.ClearDef()
	return urru
}

// SetName sets the "name" field.
func (urru *UserResourceRecordUpdate) SetName(s string) *UserResourceRecordUpdate {
	urru.mutation.SetName(s)
	return urru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableName(s *string) *UserResourceRecordUpdate {
	if s != nil {
		urru.SetName(*s)
	}
	return urru
}

// ClearName clears the value of the "name" field.
func (urru *UserResourceRecordUpdate) ClearName() *UserResourceRecordUpdate {
	urru.mutation.ClearName()
	return urru
}

// SetURL sets the "url" field.
func (urru *UserResourceRecordUpdate) SetURL(s string) *UserResourceRecordUpdate {
	urru.mutation.SetURL(s)
	return urru
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableURL(s *string) *UserResourceRecordUpdate {
	if s != nil {
		urru.SetURL(*s)
	}
	return urru
}

// ClearURL clears the value of the "url" field.
func (urru *UserResourceRecordUpdate) ClearURL() *UserResourceRecordUpdate {
	urru.mutation.ClearURL()
	return urru
}

// SetResType sets the "resType" field.
func (urru *UserResourceRecordUpdate) SetResType(s string) *UserResourceRecordUpdate {
	urru.mutation.SetResType(s)
	return urru
}

// SetNillableResType sets the "resType" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableResType(s *string) *UserResourceRecordUpdate {
	if s != nil {
		urru.SetResType(*s)
	}
	return urru
}

// ClearResType clears the value of the "resType" field.
func (urru *UserResourceRecordUpdate) ClearResType() *UserResourceRecordUpdate {
	urru.mutation.ClearResType()
	return urru
}

// SetRemark sets the "remark" field.
func (urru *UserResourceRecordUpdate) SetRemark(s string) *UserResourceRecordUpdate {
	urru.mutation.SetRemark(s)
	return urru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableRemark(s *string) *UserResourceRecordUpdate {
	if s != nil {
		urru.SetRemark(*s)
	}
	return urru
}

// ClearRemark clears the value of the "remark" field.
func (urru *UserResourceRecordUpdate) ClearRemark() *UserResourceRecordUpdate {
	urru.mutation.ClearRemark()
	return urru
}

// SetState sets the "state" field.
func (urru *UserResourceRecordUpdate) SetState(i int32) *UserResourceRecordUpdate {
	urru.mutation.ResetState()
	urru.mutation.SetState(i)
	return urru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableState(i *int32) *UserResourceRecordUpdate {
	if i != nil {
		urru.SetState(*i)
	}
	return urru
}

// AddState adds i to the "state" field.
func (urru *UserResourceRecordUpdate) AddState(i int32) *UserResourceRecordUpdate {
	urru.mutation.AddState(i)
	return urru
}

// ClearState clears the value of the "state" field.
func (urru *UserResourceRecordUpdate) ClearState() *UserResourceRecordUpdate {
	urru.mutation.ClearState()
	return urru
}

// SetEffectTime sets the "effectTime" field.
func (urru *UserResourceRecordUpdate) SetEffectTime(t time.Time) *UserResourceRecordUpdate {
	urru.mutation.SetEffectTime(t)
	return urru
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableEffectTime(t *time.Time) *UserResourceRecordUpdate {
	if t != nil {
		urru.SetEffectTime(*t)
	}
	return urru
}

// SetExpiredTime sets the "expiredTime" field.
func (urru *UserResourceRecordUpdate) SetExpiredTime(t time.Time) *UserResourceRecordUpdate {
	urru.mutation.SetExpiredTime(t)
	return urru
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableExpiredTime(t *time.Time) *UserResourceRecordUpdate {
	if t != nil {
		urru.SetExpiredTime(*t)
	}
	return urru
}

// SetUpdatedAt sets the "updatedAt" field.
func (urru *UserResourceRecordUpdate) SetUpdatedAt(t time.Time) *UserResourceRecordUpdate {
	urru.mutation.SetUpdatedAt(t)
	return urru
}

// SetCreateBy sets the "createBy" field.
func (urru *UserResourceRecordUpdate) SetCreateBy(i int64) *UserResourceRecordUpdate {
	urru.mutation.ResetCreateBy()
	urru.mutation.SetCreateBy(i)
	return urru
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableCreateBy(i *int64) *UserResourceRecordUpdate {
	if i != nil {
		urru.SetCreateBy(*i)
	}
	return urru
}

// AddCreateBy adds i to the "createBy" field.
func (urru *UserResourceRecordUpdate) AddCreateBy(i int64) *UserResourceRecordUpdate {
	urru.mutation.AddCreateBy(i)
	return urru
}

// SetUpdateBy sets the "updateBy" field.
func (urru *UserResourceRecordUpdate) SetUpdateBy(i int64) *UserResourceRecordUpdate {
	urru.mutation.ResetUpdateBy()
	urru.mutation.SetUpdateBy(i)
	return urru
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableUpdateBy(i *int64) *UserResourceRecordUpdate {
	if i != nil {
		urru.SetUpdateBy(*i)
	}
	return urru
}

// AddUpdateBy adds i to the "updateBy" field.
func (urru *UserResourceRecordUpdate) AddUpdateBy(i int64) *UserResourceRecordUpdate {
	urru.mutation.AddUpdateBy(i)
	return urru
}

// SetTenantId sets the "tenantId" field.
func (urru *UserResourceRecordUpdate) SetTenantId(i int64) *UserResourceRecordUpdate {
	urru.mutation.ResetTenantId()
	urru.mutation.SetTenantId(i)
	return urru
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (urru *UserResourceRecordUpdate) SetNillableTenantId(i *int64) *UserResourceRecordUpdate {
	if i != nil {
		urru.SetTenantId(*i)
	}
	return urru
}

// AddTenantId adds i to the "tenantId" field.
func (urru *UserResourceRecordUpdate) AddTenantId(i int64) *UserResourceRecordUpdate {
	urru.mutation.AddTenantId(i)
	return urru
}

// Mutation returns the UserResourceRecordMutation object of the builder.
func (urru *UserResourceRecordUpdate) Mutation() *UserResourceRecordMutation {
	return urru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (urru *UserResourceRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	urru.defaults()
	if len(urru.hooks) == 0 {
		affected, err = urru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserResourceRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			urru.mutation = mutation
			affected, err = urru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(urru.hooks) - 1; i >= 0; i-- {
			if urru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = urru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, urru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (urru *UserResourceRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := urru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (urru *UserResourceRecordUpdate) Exec(ctx context.Context) error {
	_, err := urru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urru *UserResourceRecordUpdate) ExecX(ctx context.Context) {
	if err := urru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urru *UserResourceRecordUpdate) defaults() {
	if _, ok := urru.mutation.UpdatedAt(); !ok {
		v := userresourcerecord.UpdateDefaultUpdatedAt()
		urru.mutation.SetUpdatedAt(v)
	}
}

func (urru *UserResourceRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userresourcerecord.Table,
			Columns: userresourcerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userresourcerecord.FieldID,
			},
		},
	}
	if ps := urru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := urru.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUserId,
		})
	}
	if value, ok := urru.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUserId,
		})
	}
	if urru.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userresourcerecord.FieldUserId,
		})
	}
	if value, ok := urru.mutation.ResId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldResId,
		})
	}
	if value, ok := urru.mutation.AddedResId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldResId,
		})
	}
	if urru.mutation.ResIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userresourcerecord.FieldResId,
		})
	}
	if value, ok := urru.mutation.Def(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userresourcerecord.FieldDef,
		})
	}
	if urru.mutation.DefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: userresourcerecord.FieldDef,
		})
	}
	if value, ok := urru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldName,
		})
	}
	if urru.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userresourcerecord.FieldName,
		})
	}
	if value, ok := urru.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldURL,
		})
	}
	if urru.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userresourcerecord.FieldURL,
		})
	}
	if value, ok := urru.mutation.ResType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldResType,
		})
	}
	if urru.mutation.ResTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userresourcerecord.FieldResType,
		})
	}
	if value, ok := urru.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldRemark,
		})
	}
	if urru.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userresourcerecord.FieldRemark,
		})
	}
	if value, ok := urru.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userresourcerecord.FieldState,
		})
	}
	if value, ok := urru.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userresourcerecord.FieldState,
		})
	}
	if urru.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: userresourcerecord.FieldState,
		})
	}
	if value, ok := urru.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldEffectTime,
		})
	}
	if value, ok := urru.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldExpiredTime,
		})
	}
	if value, ok := urru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldUpdatedAt,
		})
	}
	if value, ok := urru.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldCreateBy,
		})
	}
	if value, ok := urru.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldCreateBy,
		})
	}
	if value, ok := urru.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUpdateBy,
		})
	}
	if value, ok := urru.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUpdateBy,
		})
	}
	if value, ok := urru.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldTenantId,
		})
	}
	if value, ok := urru.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, urru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userresourcerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserResourceRecordUpdateOne is the builder for updating a single UserResourceRecord entity.
type UserResourceRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserResourceRecordMutation
}

// SetUserId sets the "userId" field.
func (urruo *UserResourceRecordUpdateOne) SetUserId(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.ResetUserId()
	urruo.mutation.SetUserId(i)
	return urruo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableUserId(i *int64) *UserResourceRecordUpdateOne {
	if i != nil {
		urruo.SetUserId(*i)
	}
	return urruo
}

// AddUserId adds i to the "userId" field.
func (urruo *UserResourceRecordUpdateOne) AddUserId(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.AddUserId(i)
	return urruo
}

// ClearUserId clears the value of the "userId" field.
func (urruo *UserResourceRecordUpdateOne) ClearUserId() *UserResourceRecordUpdateOne {
	urruo.mutation.ClearUserId()
	return urruo
}

// SetResId sets the "resId" field.
func (urruo *UserResourceRecordUpdateOne) SetResId(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.ResetResId()
	urruo.mutation.SetResId(i)
	return urruo
}

// SetNillableResId sets the "resId" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableResId(i *int64) *UserResourceRecordUpdateOne {
	if i != nil {
		urruo.SetResId(*i)
	}
	return urruo
}

// AddResId adds i to the "resId" field.
func (urruo *UserResourceRecordUpdateOne) AddResId(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.AddResId(i)
	return urruo
}

// ClearResId clears the value of the "resId" field.
func (urruo *UserResourceRecordUpdateOne) ClearResId() *UserResourceRecordUpdateOne {
	urruo.mutation.ClearResId()
	return urruo
}

// SetDef sets the "def" field.
func (urruo *UserResourceRecordUpdateOne) SetDef(b bool) *UserResourceRecordUpdateOne {
	urruo.mutation.SetDef(b)
	return urruo
}

// SetNillableDef sets the "def" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableDef(b *bool) *UserResourceRecordUpdateOne {
	if b != nil {
		urruo.SetDef(*b)
	}
	return urruo
}

// ClearDef clears the value of the "def" field.
func (urruo *UserResourceRecordUpdateOne) ClearDef() *UserResourceRecordUpdateOne {
	urruo.mutation.ClearDef()
	return urruo
}

// SetName sets the "name" field.
func (urruo *UserResourceRecordUpdateOne) SetName(s string) *UserResourceRecordUpdateOne {
	urruo.mutation.SetName(s)
	return urruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableName(s *string) *UserResourceRecordUpdateOne {
	if s != nil {
		urruo.SetName(*s)
	}
	return urruo
}

// ClearName clears the value of the "name" field.
func (urruo *UserResourceRecordUpdateOne) ClearName() *UserResourceRecordUpdateOne {
	urruo.mutation.ClearName()
	return urruo
}

// SetURL sets the "url" field.
func (urruo *UserResourceRecordUpdateOne) SetURL(s string) *UserResourceRecordUpdateOne {
	urruo.mutation.SetURL(s)
	return urruo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableURL(s *string) *UserResourceRecordUpdateOne {
	if s != nil {
		urruo.SetURL(*s)
	}
	return urruo
}

// ClearURL clears the value of the "url" field.
func (urruo *UserResourceRecordUpdateOne) ClearURL() *UserResourceRecordUpdateOne {
	urruo.mutation.ClearURL()
	return urruo
}

// SetResType sets the "resType" field.
func (urruo *UserResourceRecordUpdateOne) SetResType(s string) *UserResourceRecordUpdateOne {
	urruo.mutation.SetResType(s)
	return urruo
}

// SetNillableResType sets the "resType" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableResType(s *string) *UserResourceRecordUpdateOne {
	if s != nil {
		urruo.SetResType(*s)
	}
	return urruo
}

// ClearResType clears the value of the "resType" field.
func (urruo *UserResourceRecordUpdateOne) ClearResType() *UserResourceRecordUpdateOne {
	urruo.mutation.ClearResType()
	return urruo
}

// SetRemark sets the "remark" field.
func (urruo *UserResourceRecordUpdateOne) SetRemark(s string) *UserResourceRecordUpdateOne {
	urruo.mutation.SetRemark(s)
	return urruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableRemark(s *string) *UserResourceRecordUpdateOne {
	if s != nil {
		urruo.SetRemark(*s)
	}
	return urruo
}

// ClearRemark clears the value of the "remark" field.
func (urruo *UserResourceRecordUpdateOne) ClearRemark() *UserResourceRecordUpdateOne {
	urruo.mutation.ClearRemark()
	return urruo
}

// SetState sets the "state" field.
func (urruo *UserResourceRecordUpdateOne) SetState(i int32) *UserResourceRecordUpdateOne {
	urruo.mutation.ResetState()
	urruo.mutation.SetState(i)
	return urruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableState(i *int32) *UserResourceRecordUpdateOne {
	if i != nil {
		urruo.SetState(*i)
	}
	return urruo
}

// AddState adds i to the "state" field.
func (urruo *UserResourceRecordUpdateOne) AddState(i int32) *UserResourceRecordUpdateOne {
	urruo.mutation.AddState(i)
	return urruo
}

// ClearState clears the value of the "state" field.
func (urruo *UserResourceRecordUpdateOne) ClearState() *UserResourceRecordUpdateOne {
	urruo.mutation.ClearState()
	return urruo
}

// SetEffectTime sets the "effectTime" field.
func (urruo *UserResourceRecordUpdateOne) SetEffectTime(t time.Time) *UserResourceRecordUpdateOne {
	urruo.mutation.SetEffectTime(t)
	return urruo
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableEffectTime(t *time.Time) *UserResourceRecordUpdateOne {
	if t != nil {
		urruo.SetEffectTime(*t)
	}
	return urruo
}

// SetExpiredTime sets the "expiredTime" field.
func (urruo *UserResourceRecordUpdateOne) SetExpiredTime(t time.Time) *UserResourceRecordUpdateOne {
	urruo.mutation.SetExpiredTime(t)
	return urruo
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableExpiredTime(t *time.Time) *UserResourceRecordUpdateOne {
	if t != nil {
		urruo.SetExpiredTime(*t)
	}
	return urruo
}

// SetUpdatedAt sets the "updatedAt" field.
func (urruo *UserResourceRecordUpdateOne) SetUpdatedAt(t time.Time) *UserResourceRecordUpdateOne {
	urruo.mutation.SetUpdatedAt(t)
	return urruo
}

// SetCreateBy sets the "createBy" field.
func (urruo *UserResourceRecordUpdateOne) SetCreateBy(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.ResetCreateBy()
	urruo.mutation.SetCreateBy(i)
	return urruo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableCreateBy(i *int64) *UserResourceRecordUpdateOne {
	if i != nil {
		urruo.SetCreateBy(*i)
	}
	return urruo
}

// AddCreateBy adds i to the "createBy" field.
func (urruo *UserResourceRecordUpdateOne) AddCreateBy(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.AddCreateBy(i)
	return urruo
}

// SetUpdateBy sets the "updateBy" field.
func (urruo *UserResourceRecordUpdateOne) SetUpdateBy(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.ResetUpdateBy()
	urruo.mutation.SetUpdateBy(i)
	return urruo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableUpdateBy(i *int64) *UserResourceRecordUpdateOne {
	if i != nil {
		urruo.SetUpdateBy(*i)
	}
	return urruo
}

// AddUpdateBy adds i to the "updateBy" field.
func (urruo *UserResourceRecordUpdateOne) AddUpdateBy(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.AddUpdateBy(i)
	return urruo
}

// SetTenantId sets the "tenantId" field.
func (urruo *UserResourceRecordUpdateOne) SetTenantId(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.ResetTenantId()
	urruo.mutation.SetTenantId(i)
	return urruo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (urruo *UserResourceRecordUpdateOne) SetNillableTenantId(i *int64) *UserResourceRecordUpdateOne {
	if i != nil {
		urruo.SetTenantId(*i)
	}
	return urruo
}

// AddTenantId adds i to the "tenantId" field.
func (urruo *UserResourceRecordUpdateOne) AddTenantId(i int64) *UserResourceRecordUpdateOne {
	urruo.mutation.AddTenantId(i)
	return urruo
}

// Mutation returns the UserResourceRecordMutation object of the builder.
func (urruo *UserResourceRecordUpdateOne) Mutation() *UserResourceRecordMutation {
	return urruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (urruo *UserResourceRecordUpdateOne) Select(field string, fields ...string) *UserResourceRecordUpdateOne {
	urruo.fields = append([]string{field}, fields...)
	return urruo
}

// Save executes the query and returns the updated UserResourceRecord entity.
func (urruo *UserResourceRecordUpdateOne) Save(ctx context.Context) (*UserResourceRecord, error) {
	var (
		err  error
		node *UserResourceRecord
	)
	urruo.defaults()
	if len(urruo.hooks) == 0 {
		node, err = urruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserResourceRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			urruo.mutation = mutation
			node, err = urruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(urruo.hooks) - 1; i >= 0; i-- {
			if urruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = urruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, urruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (urruo *UserResourceRecordUpdateOne) SaveX(ctx context.Context) *UserResourceRecord {
	node, err := urruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (urruo *UserResourceRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := urruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urruo *UserResourceRecordUpdateOne) ExecX(ctx context.Context) {
	if err := urruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urruo *UserResourceRecordUpdateOne) defaults() {
	if _, ok := urruo.mutation.UpdatedAt(); !ok {
		v := userresourcerecord.UpdateDefaultUpdatedAt()
		urruo.mutation.SetUpdatedAt(v)
	}
}

func (urruo *UserResourceRecordUpdateOne) sqlSave(ctx context.Context) (_node *UserResourceRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userresourcerecord.Table,
			Columns: userresourcerecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userresourcerecord.FieldID,
			},
		},
	}
	id, ok := urruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserResourceRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := urruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userresourcerecord.FieldID)
		for _, f := range fields {
			if !userresourcerecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userresourcerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := urruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := urruo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUserId,
		})
	}
	if value, ok := urruo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUserId,
		})
	}
	if urruo.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userresourcerecord.FieldUserId,
		})
	}
	if value, ok := urruo.mutation.ResId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldResId,
		})
	}
	if value, ok := urruo.mutation.AddedResId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldResId,
		})
	}
	if urruo.mutation.ResIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userresourcerecord.FieldResId,
		})
	}
	if value, ok := urruo.mutation.Def(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userresourcerecord.FieldDef,
		})
	}
	if urruo.mutation.DefCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: userresourcerecord.FieldDef,
		})
	}
	if value, ok := urruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldName,
		})
	}
	if urruo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userresourcerecord.FieldName,
		})
	}
	if value, ok := urruo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldURL,
		})
	}
	if urruo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userresourcerecord.FieldURL,
		})
	}
	if value, ok := urruo.mutation.ResType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldResType,
		})
	}
	if urruo.mutation.ResTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userresourcerecord.FieldResType,
		})
	}
	if value, ok := urruo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userresourcerecord.FieldRemark,
		})
	}
	if urruo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userresourcerecord.FieldRemark,
		})
	}
	if value, ok := urruo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userresourcerecord.FieldState,
		})
	}
	if value, ok := urruo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: userresourcerecord.FieldState,
		})
	}
	if urruo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: userresourcerecord.FieldState,
		})
	}
	if value, ok := urruo.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldEffectTime,
		})
	}
	if value, ok := urruo.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldExpiredTime,
		})
	}
	if value, ok := urruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userresourcerecord.FieldUpdatedAt,
		})
	}
	if value, ok := urruo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldCreateBy,
		})
	}
	if value, ok := urruo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldCreateBy,
		})
	}
	if value, ok := urruo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUpdateBy,
		})
	}
	if value, ok := urruo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldUpdateBy,
		})
	}
	if value, ok := urruo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldTenantId,
		})
	}
	if value, ok := urruo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userresourcerecord.FieldTenantId,
		})
	}
	_node = &UserResourceRecord{config: urruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, urruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userresourcerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
