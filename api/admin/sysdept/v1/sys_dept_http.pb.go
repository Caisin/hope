// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysDeptHTTPServer interface {
	BatchDeleteSysDept(context.Context, *SysDeptBatchDeleteReq) (*SysDeptDeleteReply, error)
	CreateSysDept(context.Context, *SysDeptCreateReq) (*SysDeptCreateReply, error)
	DeleteSysDept(context.Context, *SysDeptDeleteReq) (*SysDeptDeleteReply, error)
	GetPageSysDept(context.Context, *SysDeptPageReq) (*SysDeptPageReply, error)
	GetSysDept(context.Context, *SysDeptReq) (*SysDeptReply, error)
	UpdateSysDept(context.Context, *SysDeptUpdateReq) (*SysDeptUpdateReply, error)
}

func RegisterSysDeptHTTPServer(s *http.Server, srv SysDeptHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sys/dept/page", _SysDept_GetPageSysDept0_HTTP_Handler(srv))
	r.GET("/v1/sys/dept/{id}", _SysDept_GetSysDept0_HTTP_Handler(srv))
	r.PUT("/v1/sys/dept/{id}", _SysDept_UpdateSysDept0_HTTP_Handler(srv))
	r.POST("/v1/sys/dept", _SysDept_CreateSysDept0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/dept/{id}", _SysDept_DeleteSysDept0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/dept", _SysDept_BatchDeleteSysDept0_HTTP_Handler(srv))
}

func _SysDept_GetPageSysDept0_HTTP_Handler(srv SysDeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdept.v1.SysDept/GetPageSysDept")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageSysDept(ctx, req.(*SysDeptPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptPageReply)
		return ctx.Result(200, reply)
	}
}

func _SysDept_GetSysDept0_HTTP_Handler(srv SysDeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdept.v1.SysDept/GetSysDept")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysDept(ctx, req.(*SysDeptReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptReply)
		return ctx.Result(200, reply)
	}
}

func _SysDept_UpdateSysDept0_HTTP_Handler(srv SysDeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdept.v1.SysDept/UpdateSysDept")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysDept(ctx, req.(*SysDeptUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysDept_CreateSysDept0_HTTP_Handler(srv SysDeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdept.v1.SysDept/CreateSysDept")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysDept(ctx, req.(*SysDeptCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysDept_DeleteSysDept0_HTTP_Handler(srv SysDeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdept.v1.SysDept/DeleteSysDept")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysDept(ctx, req.(*SysDeptDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysDept_BatchDeleteSysDept0_HTTP_Handler(srv SysDeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDeptBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdept.v1.SysDept/BatchDeleteSysDept")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysDept(ctx, req.(*SysDeptBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDeptDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysDeptHTTPClient interface {
	BatchDeleteSysDept(ctx context.Context, req *SysDeptBatchDeleteReq, opts ...http.CallOption) (rsp *SysDeptDeleteReply, err error)
	CreateSysDept(ctx context.Context, req *SysDeptCreateReq, opts ...http.CallOption) (rsp *SysDeptCreateReply, err error)
	DeleteSysDept(ctx context.Context, req *SysDeptDeleteReq, opts ...http.CallOption) (rsp *SysDeptDeleteReply, err error)
	GetPageSysDept(ctx context.Context, req *SysDeptPageReq, opts ...http.CallOption) (rsp *SysDeptPageReply, err error)
	GetSysDept(ctx context.Context, req *SysDeptReq, opts ...http.CallOption) (rsp *SysDeptReply, err error)
	UpdateSysDept(ctx context.Context, req *SysDeptUpdateReq, opts ...http.CallOption) (rsp *SysDeptUpdateReply, err error)
}

type SysDeptHTTPClientImpl struct {
	cc *http.Client
}

func NewSysDeptHTTPClient(client *http.Client) SysDeptHTTPClient {
	return &SysDeptHTTPClientImpl{client}
}

func (c *SysDeptHTTPClientImpl) BatchDeleteSysDept(ctx context.Context, in *SysDeptBatchDeleteReq, opts ...http.CallOption) (*SysDeptDeleteReply, error) {
	var out SysDeptDeleteReply
	pattern := "/v1/sys/dept"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdept.v1.SysDept/BatchDeleteSysDept"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDeptHTTPClientImpl) CreateSysDept(ctx context.Context, in *SysDeptCreateReq, opts ...http.CallOption) (*SysDeptCreateReply, error) {
	var out SysDeptCreateReply
	pattern := "/v1/sys/dept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysdept.v1.SysDept/CreateSysDept"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDeptHTTPClientImpl) DeleteSysDept(ctx context.Context, in *SysDeptDeleteReq, opts ...http.CallOption) (*SysDeptDeleteReply, error) {
	var out SysDeptDeleteReply
	pattern := "/v1/sys/dept/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdept.v1.SysDept/DeleteSysDept"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDeptHTTPClientImpl) GetPageSysDept(ctx context.Context, in *SysDeptPageReq, opts ...http.CallOption) (*SysDeptPageReply, error) {
	var out SysDeptPageReply
	pattern := "/v1/sys/dept/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdept.v1.SysDept/GetPageSysDept"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDeptHTTPClientImpl) GetSysDept(ctx context.Context, in *SysDeptReq, opts ...http.CallOption) (*SysDeptReply, error) {
	var out SysDeptReply
	pattern := "/v1/sys/dept/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdept.v1.SysDept/GetSysDept"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDeptHTTPClientImpl) UpdateSysDept(ctx context.Context, in *SysDeptUpdateReq, opts ...http.CallOption) (*SysDeptUpdateReply, error) {
	var out SysDeptUpdateReply
	pattern := "/v1/sys/dept/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysdept.v1.SysDept/UpdateSysDept"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
