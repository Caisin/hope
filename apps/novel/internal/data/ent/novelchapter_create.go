// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/novel"
	"hope/apps/novel/internal/data/ent/novelchapter"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelChapterCreate is the builder for creating a NovelChapter entity.
type NovelChapterCreate struct {
	config
	mutation *NovelChapterMutation
	hooks    []Hook
}

// SetNovelId sets the "novelId" field.
func (ncc *NovelChapterCreate) SetNovelId(i int64) *NovelChapterCreate {
	ncc.mutation.SetNovelId(i)
	return ncc
}

// SetOrderNum sets the "orderNum" field.
func (ncc *NovelChapterCreate) SetOrderNum(i int32) *NovelChapterCreate {
	ncc.mutation.SetOrderNum(i)
	return ncc
}

// SetNillableOrderNum sets the "orderNum" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableOrderNum(i *int32) *NovelChapterCreate {
	if i != nil {
		ncc.SetOrderNum(*i)
	}
	return ncc
}

// SetChapterName sets the "chapterName" field.
func (ncc *NovelChapterCreate) SetChapterName(s string) *NovelChapterCreate {
	ncc.mutation.SetChapterName(s)
	return ncc
}

// SetNillableChapterName sets the "chapterName" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableChapterName(s *string) *NovelChapterCreate {
	if s != nil {
		ncc.SetChapterName(*s)
	}
	return ncc
}

// SetContent sets the "content" field.
func (ncc *NovelChapterCreate) SetContent(s string) *NovelChapterCreate {
	ncc.mutation.SetContent(s)
	return ncc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableContent(s *string) *NovelChapterCreate {
	if s != nil {
		ncc.SetContent(*s)
	}
	return ncc
}

// SetMediaKey sets the "mediaKey" field.
func (ncc *NovelChapterCreate) SetMediaKey(s string) *NovelChapterCreate {
	ncc.mutation.SetMediaKey(s)
	return ncc
}

// SetNillableMediaKey sets the "mediaKey" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableMediaKey(s *string) *NovelChapterCreate {
	if s != nil {
		ncc.SetMediaKey(*s)
	}
	return ncc
}

// SetDuration sets the "duration" field.
func (ncc *NovelChapterCreate) SetDuration(s string) *NovelChapterCreate {
	ncc.mutation.SetDuration(s)
	return ncc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableDuration(s *string) *NovelChapterCreate {
	if s != nil {
		ncc.SetDuration(*s)
	}
	return ncc
}

// SetPublishTime sets the "publishTime" field.
func (ncc *NovelChapterCreate) SetPublishTime(t time.Time) *NovelChapterCreate {
	ncc.mutation.SetPublishTime(t)
	return ncc
}

// SetNillablePublishTime sets the "publishTime" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillablePublishTime(t *time.Time) *NovelChapterCreate {
	if t != nil {
		ncc.SetPublishTime(*t)
	}
	return ncc
}

// SetStatus sets the "status" field.
func (ncc *NovelChapterCreate) SetStatus(i int32) *NovelChapterCreate {
	ncc.mutation.SetStatus(i)
	return ncc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableStatus(i *int32) *NovelChapterCreate {
	if i != nil {
		ncc.SetStatus(*i)
	}
	return ncc
}

// SetIsFree sets the "isFree" field.
func (ncc *NovelChapterCreate) SetIsFree(b bool) *NovelChapterCreate {
	ncc.mutation.SetIsFree(b)
	return ncc
}

// SetNillableIsFree sets the "isFree" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableIsFree(b *bool) *NovelChapterCreate {
	if b != nil {
		ncc.SetIsFree(*b)
	}
	return ncc
}

// SetPrice sets the "price" field.
func (ncc *NovelChapterCreate) SetPrice(i int64) *NovelChapterCreate {
	ncc.mutation.SetPrice(i)
	return ncc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillablePrice(i *int64) *NovelChapterCreate {
	if i != nil {
		ncc.SetPrice(*i)
	}
	return ncc
}

// SetWordNum sets the "wordNum" field.
func (ncc *NovelChapterCreate) SetWordNum(i int32) *NovelChapterCreate {
	ncc.mutation.SetWordNum(i)
	return ncc
}

// SetNillableWordNum sets the "wordNum" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableWordNum(i *int32) *NovelChapterCreate {
	if i != nil {
		ncc.SetWordNum(*i)
	}
	return ncc
}

// SetRemark sets the "remark" field.
func (ncc *NovelChapterCreate) SetRemark(s string) *NovelChapterCreate {
	ncc.mutation.SetRemark(s)
	return ncc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableRemark(s *string) *NovelChapterCreate {
	if s != nil {
		ncc.SetRemark(*s)
	}
	return ncc
}

// SetCreatedAt sets the "createdAt" field.
func (ncc *NovelChapterCreate) SetCreatedAt(t time.Time) *NovelChapterCreate {
	ncc.mutation.SetCreatedAt(t)
	return ncc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableCreatedAt(t *time.Time) *NovelChapterCreate {
	if t != nil {
		ncc.SetCreatedAt(*t)
	}
	return ncc
}

// SetUpdatedAt sets the "updatedAt" field.
func (ncc *NovelChapterCreate) SetUpdatedAt(t time.Time) *NovelChapterCreate {
	ncc.mutation.SetUpdatedAt(t)
	return ncc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableUpdatedAt(t *time.Time) *NovelChapterCreate {
	if t != nil {
		ncc.SetUpdatedAt(*t)
	}
	return ncc
}

// SetCreateBy sets the "createBy" field.
func (ncc *NovelChapterCreate) SetCreateBy(i int64) *NovelChapterCreate {
	ncc.mutation.SetCreateBy(i)
	return ncc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableCreateBy(i *int64) *NovelChapterCreate {
	if i != nil {
		ncc.SetCreateBy(*i)
	}
	return ncc
}

// SetUpdateBy sets the "updateBy" field.
func (ncc *NovelChapterCreate) SetUpdateBy(i int64) *NovelChapterCreate {
	ncc.mutation.SetUpdateBy(i)
	return ncc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableUpdateBy(i *int64) *NovelChapterCreate {
	if i != nil {
		ncc.SetUpdateBy(*i)
	}
	return ncc
}

// SetTenantId sets the "tenantId" field.
func (ncc *NovelChapterCreate) SetTenantId(i int64) *NovelChapterCreate {
	ncc.mutation.SetTenantId(i)
	return ncc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableTenantId(i *int64) *NovelChapterCreate {
	if i != nil {
		ncc.SetTenantId(*i)
	}
	return ncc
}

// SetPrevID sets the "prev" edge to the NovelChapter entity by ID.
func (ncc *NovelChapterCreate) SetPrevID(id int64) *NovelChapterCreate {
	ncc.mutation.SetPrevID(id)
	return ncc
}

// SetNillablePrevID sets the "prev" edge to the NovelChapter entity by ID if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillablePrevID(id *int64) *NovelChapterCreate {
	if id != nil {
		ncc = ncc.SetPrevID(*id)
	}
	return ncc
}

// SetPrev sets the "prev" edge to the NovelChapter entity.
func (ncc *NovelChapterCreate) SetPrev(n *NovelChapter) *NovelChapterCreate {
	return ncc.SetPrevID(n.ID)
}

// SetNextID sets the "next" edge to the NovelChapter entity by ID.
func (ncc *NovelChapterCreate) SetNextID(id int64) *NovelChapterCreate {
	ncc.mutation.SetNextID(id)
	return ncc
}

// SetNillableNextID sets the "next" edge to the NovelChapter entity by ID if the given value is not nil.
func (ncc *NovelChapterCreate) SetNillableNextID(id *int64) *NovelChapterCreate {
	if id != nil {
		ncc = ncc.SetNextID(*id)
	}
	return ncc
}

// SetNext sets the "next" edge to the NovelChapter entity.
func (ncc *NovelChapterCreate) SetNext(n *NovelChapter) *NovelChapterCreate {
	return ncc.SetNextID(n.ID)
}

// SetNovelID sets the "novel" edge to the Novel entity by ID.
func (ncc *NovelChapterCreate) SetNovelID(id int64) *NovelChapterCreate {
	ncc.mutation.SetNovelID(id)
	return ncc
}

// SetNovel sets the "novel" edge to the Novel entity.
func (ncc *NovelChapterCreate) SetNovel(n *Novel) *NovelChapterCreate {
	return ncc.SetNovelID(n.ID)
}

// Mutation returns the NovelChapterMutation object of the builder.
func (ncc *NovelChapterCreate) Mutation() *NovelChapterMutation {
	return ncc.mutation
}

// Save creates the NovelChapter in the database.
func (ncc *NovelChapterCreate) Save(ctx context.Context) (*NovelChapter, error) {
	var (
		err  error
		node *NovelChapter
	)
	ncc.defaults()
	if len(ncc.hooks) == 0 {
		if err = ncc.check(); err != nil {
			return nil, err
		}
		node, err = ncc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ncc.check(); err != nil {
				return nil, err
			}
			ncc.mutation = mutation
			if node, err = ncc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ncc.hooks) - 1; i >= 0; i-- {
			if ncc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NovelChapterCreate) SaveX(ctx context.Context) *NovelChapter {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NovelChapterCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NovelChapterCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncc *NovelChapterCreate) defaults() {
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		v := novelchapter.DefaultCreatedAt()
		ncc.mutation.SetCreatedAt(v)
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		v := novelchapter.DefaultUpdatedAt()
		ncc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ncc.mutation.CreateBy(); !ok {
		v := novelchapter.DefaultCreateBy
		ncc.mutation.SetCreateBy(v)
	}
	if _, ok := ncc.mutation.UpdateBy(); !ok {
		v := novelchapter.DefaultUpdateBy
		ncc.mutation.SetUpdateBy(v)
	}
	if _, ok := ncc.mutation.TenantId(); !ok {
		v := novelchapter.DefaultTenantId
		ncc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NovelChapterCreate) check() error {
	if _, ok := ncc.mutation.NovelId(); !ok {
		return &ValidationError{Name: "novelId", err: errors.New(`ent: missing required field "novelId"`)}
	}
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := ncc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := ncc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := ncc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	if _, ok := ncc.mutation.NovelID(); !ok {
		return &ValidationError{Name: "novel", err: errors.New("ent: missing required edge \"novel\"")}
	}
	return nil
}

func (ncc *NovelChapterCreate) sqlSave(ctx context.Context) (*NovelChapter, error) {
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ncc *NovelChapterCreate) createSpec() (*NovelChapter, *sqlgraph.CreateSpec) {
	var (
		_node = &NovelChapter{config: ncc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: novelchapter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelchapter.FieldID,
			},
		}
	)
	if value, ok := ncc.mutation.OrderNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldOrderNum,
		})
		_node.OrderNum = value
	}
	if value, ok := ncc.mutation.ChapterName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldChapterName,
		})
		_node.ChapterName = value
	}
	if value, ok := ncc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := ncc.mutation.MediaKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldMediaKey,
		})
		_node.MediaKey = value
	}
	if value, ok := ncc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := ncc.mutation.PublishTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelchapter.FieldPublishTime,
		})
		_node.PublishTime = value
	}
	if value, ok := ncc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ncc.mutation.IsFree(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelchapter.FieldIsFree,
		})
		_node.IsFree = value
	}
	if value, ok := ncc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := ncc.mutation.WordNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldWordNum,
		})
		_node.WordNum = value
	}
	if value, ok := ncc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ncc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelchapter.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ncc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelchapter.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ncc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := ncc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := ncc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := ncc.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   novelchapter.PrevTable,
			Columns: []string{novelchapter.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.novel_chapter_next = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ncc.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   novelchapter.NextTable,
			Columns: []string{novelchapter.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ncc.mutation.NovelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelchapter.NovelTable,
			Columns: []string{novelchapter.NovelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NovelId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NovelChapterCreateBulk is the builder for creating many NovelChapter entities in bulk.
type NovelChapterCreateBulk struct {
	config
	builders []*NovelChapterCreate
}

// Save creates the NovelChapter entities in the database.
func (nccb *NovelChapterCreateBulk) Save(ctx context.Context) ([]*NovelChapter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NovelChapter, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NovelChapterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NovelChapterCreateBulk) SaveX(ctx context.Context) []*NovelChapter {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NovelChapterCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NovelChapterCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}
