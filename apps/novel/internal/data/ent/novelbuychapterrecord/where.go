// Code generated by entc, DO NOT EDIT.

package novelbuychapterrecord

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// ChapterId applies equality check predicate on the "chapterId" field. It's identical to ChapterIdEQ.
func ChapterId(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterId), v))
	})
}

// ChapterOrderNum applies equality check predicate on the "chapterOrderNum" field. It's identical to ChapterOrderNumEQ.
func ChapterOrderNum(v int32) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterOrderNum), v))
	})
}

// NovelId applies equality check predicate on the "novelId" field. It's identical to NovelIdEQ.
func NovelId(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// NovelName applies equality check predicate on the "novelName" field. It's identical to NovelNameEQ.
func NovelName(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelName), v))
	})
}

// ChapterName applies equality check predicate on the "chapterName" field. It's identical to ChapterNameEQ.
func ChapterName(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterName), v))
	})
}

// IsSvip applies equality check predicate on the "isSvip" field. It's identical to IsSvipEQ.
func IsSvip(v bool) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSvip), v))
	})
}

// Coin applies equality check predicate on the "coin" field. It's identical to CoinEQ.
func Coin(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoin), v))
	})
}

// Coupon applies equality check predicate on the "coupon" field. It's identical to CouponEQ.
func Coupon(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoupon), v))
	})
}

// Discount applies equality check predicate on the "discount" field. It's identical to DiscountEQ.
func Discount(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscount), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameIsNil applies the IsNil predicate on the "userName" field.
func UserNameIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserName)))
	})
}

// UserNameNotNil applies the NotNil predicate on the "userName" field.
func UserNameNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserName)))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// ChapterIdEQ applies the EQ predicate on the "chapterId" field.
func ChapterIdEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterId), v))
	})
}

// ChapterIdNEQ applies the NEQ predicate on the "chapterId" field.
func ChapterIdNEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterId), v))
	})
}

// ChapterIdIn applies the In predicate on the "chapterId" field.
func ChapterIdIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterId), v...))
	})
}

// ChapterIdNotIn applies the NotIn predicate on the "chapterId" field.
func ChapterIdNotIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterId), v...))
	})
}

// ChapterIdGT applies the GT predicate on the "chapterId" field.
func ChapterIdGT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterId), v))
	})
}

// ChapterIdGTE applies the GTE predicate on the "chapterId" field.
func ChapterIdGTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterId), v))
	})
}

// ChapterIdLT applies the LT predicate on the "chapterId" field.
func ChapterIdLT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterId), v))
	})
}

// ChapterIdLTE applies the LTE predicate on the "chapterId" field.
func ChapterIdLTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterId), v))
	})
}

// ChapterIdIsNil applies the IsNil predicate on the "chapterId" field.
func ChapterIdIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterId)))
	})
}

// ChapterIdNotNil applies the NotNil predicate on the "chapterId" field.
func ChapterIdNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterId)))
	})
}

// ChapterOrderNumEQ applies the EQ predicate on the "chapterOrderNum" field.
func ChapterOrderNumEQ(v int32) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterOrderNum), v))
	})
}

// ChapterOrderNumNEQ applies the NEQ predicate on the "chapterOrderNum" field.
func ChapterOrderNumNEQ(v int32) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterOrderNum), v))
	})
}

// ChapterOrderNumIn applies the In predicate on the "chapterOrderNum" field.
func ChapterOrderNumIn(vs ...int32) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterOrderNum), v...))
	})
}

// ChapterOrderNumNotIn applies the NotIn predicate on the "chapterOrderNum" field.
func ChapterOrderNumNotIn(vs ...int32) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterOrderNum), v...))
	})
}

// ChapterOrderNumGT applies the GT predicate on the "chapterOrderNum" field.
func ChapterOrderNumGT(v int32) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterOrderNum), v))
	})
}

// ChapterOrderNumGTE applies the GTE predicate on the "chapterOrderNum" field.
func ChapterOrderNumGTE(v int32) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterOrderNum), v))
	})
}

// ChapterOrderNumLT applies the LT predicate on the "chapterOrderNum" field.
func ChapterOrderNumLT(v int32) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterOrderNum), v))
	})
}

// ChapterOrderNumLTE applies the LTE predicate on the "chapterOrderNum" field.
func ChapterOrderNumLTE(v int32) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterOrderNum), v))
	})
}

// ChapterOrderNumIsNil applies the IsNil predicate on the "chapterOrderNum" field.
func ChapterOrderNumIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterOrderNum)))
	})
}

// ChapterOrderNumNotNil applies the NotNil predicate on the "chapterOrderNum" field.
func ChapterOrderNumNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterOrderNum)))
	})
}

// NovelIdEQ applies the EQ predicate on the "novelId" field.
func NovelIdEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// NovelIdNEQ applies the NEQ predicate on the "novelId" field.
func NovelIdNEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelId), v))
	})
}

// NovelIdIn applies the In predicate on the "novelId" field.
func NovelIdIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelId), v...))
	})
}

// NovelIdNotIn applies the NotIn predicate on the "novelId" field.
func NovelIdNotIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelId), v...))
	})
}

// NovelIdGT applies the GT predicate on the "novelId" field.
func NovelIdGT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNovelId), v))
	})
}

// NovelIdGTE applies the GTE predicate on the "novelId" field.
func NovelIdGTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNovelId), v))
	})
}

// NovelIdLT applies the LT predicate on the "novelId" field.
func NovelIdLT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNovelId), v))
	})
}

// NovelIdLTE applies the LTE predicate on the "novelId" field.
func NovelIdLTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNovelId), v))
	})
}

// NovelIdIsNil applies the IsNil predicate on the "novelId" field.
func NovelIdIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNovelId)))
	})
}

// NovelIdNotNil applies the NotNil predicate on the "novelId" field.
func NovelIdNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNovelId)))
	})
}

// NovelNameEQ applies the EQ predicate on the "novelName" field.
func NovelNameEQ(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelName), v))
	})
}

// NovelNameNEQ applies the NEQ predicate on the "novelName" field.
func NovelNameNEQ(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelName), v))
	})
}

// NovelNameIn applies the In predicate on the "novelName" field.
func NovelNameIn(vs ...string) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelName), v...))
	})
}

// NovelNameNotIn applies the NotIn predicate on the "novelName" field.
func NovelNameNotIn(vs ...string) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelName), v...))
	})
}

// NovelNameGT applies the GT predicate on the "novelName" field.
func NovelNameGT(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNovelName), v))
	})
}

// NovelNameGTE applies the GTE predicate on the "novelName" field.
func NovelNameGTE(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNovelName), v))
	})
}

// NovelNameLT applies the LT predicate on the "novelName" field.
func NovelNameLT(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNovelName), v))
	})
}

// NovelNameLTE applies the LTE predicate on the "novelName" field.
func NovelNameLTE(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNovelName), v))
	})
}

// NovelNameContains applies the Contains predicate on the "novelName" field.
func NovelNameContains(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNovelName), v))
	})
}

// NovelNameHasPrefix applies the HasPrefix predicate on the "novelName" field.
func NovelNameHasPrefix(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNovelName), v))
	})
}

// NovelNameHasSuffix applies the HasSuffix predicate on the "novelName" field.
func NovelNameHasSuffix(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNovelName), v))
	})
}

// NovelNameIsNil applies the IsNil predicate on the "novelName" field.
func NovelNameIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNovelName)))
	})
}

// NovelNameNotNil applies the NotNil predicate on the "novelName" field.
func NovelNameNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNovelName)))
	})
}

// NovelNameEqualFold applies the EqualFold predicate on the "novelName" field.
func NovelNameEqualFold(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNovelName), v))
	})
}

// NovelNameContainsFold applies the ContainsFold predicate on the "novelName" field.
func NovelNameContainsFold(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNovelName), v))
	})
}

// ChapterNameEQ applies the EQ predicate on the "chapterName" field.
func ChapterNameEQ(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterName), v))
	})
}

// ChapterNameNEQ applies the NEQ predicate on the "chapterName" field.
func ChapterNameNEQ(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterName), v))
	})
}

// ChapterNameIn applies the In predicate on the "chapterName" field.
func ChapterNameIn(vs ...string) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterName), v...))
	})
}

// ChapterNameNotIn applies the NotIn predicate on the "chapterName" field.
func ChapterNameNotIn(vs ...string) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterName), v...))
	})
}

// ChapterNameGT applies the GT predicate on the "chapterName" field.
func ChapterNameGT(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterName), v))
	})
}

// ChapterNameGTE applies the GTE predicate on the "chapterName" field.
func ChapterNameGTE(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterName), v))
	})
}

// ChapterNameLT applies the LT predicate on the "chapterName" field.
func ChapterNameLT(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterName), v))
	})
}

// ChapterNameLTE applies the LTE predicate on the "chapterName" field.
func ChapterNameLTE(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterName), v))
	})
}

// ChapterNameContains applies the Contains predicate on the "chapterName" field.
func ChapterNameContains(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChapterName), v))
	})
}

// ChapterNameHasPrefix applies the HasPrefix predicate on the "chapterName" field.
func ChapterNameHasPrefix(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChapterName), v))
	})
}

// ChapterNameHasSuffix applies the HasSuffix predicate on the "chapterName" field.
func ChapterNameHasSuffix(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChapterName), v))
	})
}

// ChapterNameIsNil applies the IsNil predicate on the "chapterName" field.
func ChapterNameIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterName)))
	})
}

// ChapterNameNotNil applies the NotNil predicate on the "chapterName" field.
func ChapterNameNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterName)))
	})
}

// ChapterNameEqualFold applies the EqualFold predicate on the "chapterName" field.
func ChapterNameEqualFold(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChapterName), v))
	})
}

// ChapterNameContainsFold applies the ContainsFold predicate on the "chapterName" field.
func ChapterNameContainsFold(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChapterName), v))
	})
}

// IsSvipEQ applies the EQ predicate on the "isSvip" field.
func IsSvipEQ(v bool) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsSvip), v))
	})
}

// IsSvipNEQ applies the NEQ predicate on the "isSvip" field.
func IsSvipNEQ(v bool) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsSvip), v))
	})
}

// IsSvipIsNil applies the IsNil predicate on the "isSvip" field.
func IsSvipIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsSvip)))
	})
}

// IsSvipNotNil applies the NotNil predicate on the "isSvip" field.
func IsSvipNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsSvip)))
	})
}

// CoinEQ applies the EQ predicate on the "coin" field.
func CoinEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoin), v))
	})
}

// CoinNEQ applies the NEQ predicate on the "coin" field.
func CoinNEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoin), v))
	})
}

// CoinIn applies the In predicate on the "coin" field.
func CoinIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoin), v...))
	})
}

// CoinNotIn applies the NotIn predicate on the "coin" field.
func CoinNotIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoin), v...))
	})
}

// CoinGT applies the GT predicate on the "coin" field.
func CoinGT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoin), v))
	})
}

// CoinGTE applies the GTE predicate on the "coin" field.
func CoinGTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoin), v))
	})
}

// CoinLT applies the LT predicate on the "coin" field.
func CoinLT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoin), v))
	})
}

// CoinLTE applies the LTE predicate on the "coin" field.
func CoinLTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoin), v))
	})
}

// CoinIsNil applies the IsNil predicate on the "coin" field.
func CoinIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoin)))
	})
}

// CoinNotNil applies the NotNil predicate on the "coin" field.
func CoinNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoin)))
	})
}

// CouponEQ applies the EQ predicate on the "coupon" field.
func CouponEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoupon), v))
	})
}

// CouponNEQ applies the NEQ predicate on the "coupon" field.
func CouponNEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoupon), v))
	})
}

// CouponIn applies the In predicate on the "coupon" field.
func CouponIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoupon), v...))
	})
}

// CouponNotIn applies the NotIn predicate on the "coupon" field.
func CouponNotIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoupon), v...))
	})
}

// CouponGT applies the GT predicate on the "coupon" field.
func CouponGT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoupon), v))
	})
}

// CouponGTE applies the GTE predicate on the "coupon" field.
func CouponGTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoupon), v))
	})
}

// CouponLT applies the LT predicate on the "coupon" field.
func CouponLT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoupon), v))
	})
}

// CouponLTE applies the LTE predicate on the "coupon" field.
func CouponLTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoupon), v))
	})
}

// CouponIsNil applies the IsNil predicate on the "coupon" field.
func CouponIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoupon)))
	})
}

// CouponNotNil applies the NotNil predicate on the "coupon" field.
func CouponNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoupon)))
	})
}

// DiscountEQ applies the EQ predicate on the "discount" field.
func DiscountEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscount), v))
	})
}

// DiscountNEQ applies the NEQ predicate on the "discount" field.
func DiscountNEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscount), v))
	})
}

// DiscountIn applies the In predicate on the "discount" field.
func DiscountIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscount), v...))
	})
}

// DiscountNotIn applies the NotIn predicate on the "discount" field.
func DiscountNotIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscount), v...))
	})
}

// DiscountGT applies the GT predicate on the "discount" field.
func DiscountGT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscount), v))
	})
}

// DiscountGTE applies the GTE predicate on the "discount" field.
func DiscountGTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscount), v))
	})
}

// DiscountLT applies the LT predicate on the "discount" field.
func DiscountLT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscount), v))
	})
}

// DiscountLTE applies the LTE predicate on the "discount" field.
func DiscountLTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscount), v))
	})
}

// DiscountIsNil applies the IsNil predicate on the "discount" field.
func DiscountIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDiscount)))
	})
}

// DiscountNotNil applies the NotNil predicate on the "discount" field.
func DiscountNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDiscount)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.NovelBuyChapterRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.SocialUser) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NovelBuyChapterRecord) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NovelBuyChapterRecord) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NovelBuyChapterRecord) predicate.NovelBuyChapterRecord {
	return predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
