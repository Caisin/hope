// Code generated by entc, DO NOT EDIT.

package useranalysisstatistics

import (
	"hope/apps/param/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StatisticsDate applies equality check predicate on the "statisticsDate" field. It's identical to StatisticsDateEQ.
func StatisticsDate(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatisticsDate), v))
	})
}

// AllUserNum applies equality check predicate on the "allUserNum" field. It's identical to AllUserNumEQ.
func AllUserNum(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllUserNum), v))
	})
}

// AllPayment applies equality check predicate on the "allPayment" field. It's identical to AllPaymentEQ.
func AllPayment(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllPayment), v))
	})
}

// AllPayUser applies equality check predicate on the "allPayUser" field. It's identical to AllPayUserEQ.
func AllPayUser(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllPayUser), v))
	})
}

// AllOrderNum applies equality check predicate on the "allOrderNum" field. It's identical to AllOrderNumEQ.
func AllOrderNum(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllOrderNum), v))
	})
}

// DayUserNum applies equality check predicate on the "dayUserNum" field. It's identical to DayUserNumEQ.
func DayUserNum(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayUserNum), v))
	})
}

// DayPayment applies equality check predicate on the "dayPayment" field. It's identical to DayPaymentEQ.
func DayPayment(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayPayment), v))
	})
}

// DayOrderNum applies equality check predicate on the "dayOrderNum" field. It's identical to DayOrderNumEQ.
func DayOrderNum(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayOrderNum), v))
	})
}

// DayPayUser applies equality check predicate on the "dayPayUser" field. It's identical to DayPayUserEQ.
func DayPayUser(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayPayUser), v))
	})
}

// DayRegPayment applies equality check predicate on the "dayRegPayment" field. It's identical to DayRegPaymentEQ.
func DayRegPayment(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayRegPayment), v))
	})
}

// DayRegUserNum applies equality check predicate on the "dayRegUserNum" field. It's identical to DayRegUserNumEQ.
func DayRegUserNum(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayRegUserNum), v))
	})
}

// DayRegOrderNum applies equality check predicate on the "dayRegOrderNum" field. It's identical to DayRegOrderNumEQ.
func DayRegOrderNum(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayRegOrderNum), v))
	})
}

// OldRegPayment applies equality check predicate on the "oldRegPayment" field. It's identical to OldRegPaymentEQ.
func OldRegPayment(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldRegPayment), v))
	})
}

// OldRegUserNum applies equality check predicate on the "oldRegUserNum" field. It's identical to OldRegUserNumEQ.
func OldRegUserNum(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldRegUserNum), v))
	})
}

// OldRegOrderNum applies equality check predicate on the "oldRegOrderNum" field. It's identical to OldRegOrderNumEQ.
func OldRegOrderNum(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldRegOrderNum), v))
	})
}

// PayRate applies equality check predicate on the "payRate" field. It's identical to PayRateEQ.
func PayRate(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayRate), v))
	})
}

// Arpu applies equality check predicate on the "arpu" field. It's identical to ArpuEQ.
func Arpu(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArpu), v))
	})
}

// DayRegArpu applies equality check predicate on the "dayRegArpu" field. It's identical to DayRegArpuEQ.
func DayRegArpu(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayRegArpu), v))
	})
}

// DayArpu applies equality check predicate on the "dayArpu" field. It's identical to DayArpuEQ.
func DayArpu(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayArpu), v))
	})
}

// DayOldArpu applies equality check predicate on the "dayOldArpu" field. It's identical to DayOldArpuEQ.
func DayOldArpu(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayOldArpu), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// StatisticsDateEQ applies the EQ predicate on the "statisticsDate" field.
func StatisticsDateEQ(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateNEQ applies the NEQ predicate on the "statisticsDate" field.
func StatisticsDateNEQ(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateIn applies the In predicate on the "statisticsDate" field.
func StatisticsDateIn(vs ...string) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatisticsDate), v...))
	})
}

// StatisticsDateNotIn applies the NotIn predicate on the "statisticsDate" field.
func StatisticsDateNotIn(vs ...string) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatisticsDate), v...))
	})
}

// StatisticsDateGT applies the GT predicate on the "statisticsDate" field.
func StatisticsDateGT(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateGTE applies the GTE predicate on the "statisticsDate" field.
func StatisticsDateGTE(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateLT applies the LT predicate on the "statisticsDate" field.
func StatisticsDateLT(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateLTE applies the LTE predicate on the "statisticsDate" field.
func StatisticsDateLTE(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateContains applies the Contains predicate on the "statisticsDate" field.
func StatisticsDateContains(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateHasPrefix applies the HasPrefix predicate on the "statisticsDate" field.
func StatisticsDateHasPrefix(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateHasSuffix applies the HasSuffix predicate on the "statisticsDate" field.
func StatisticsDateHasSuffix(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateEqualFold applies the EqualFold predicate on the "statisticsDate" field.
func StatisticsDateEqualFold(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatisticsDate), v))
	})
}

// StatisticsDateContainsFold applies the ContainsFold predicate on the "statisticsDate" field.
func StatisticsDateContainsFold(v string) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatisticsDate), v))
	})
}

// AllUserNumEQ applies the EQ predicate on the "allUserNum" field.
func AllUserNumEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllUserNum), v))
	})
}

// AllUserNumNEQ applies the NEQ predicate on the "allUserNum" field.
func AllUserNumNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllUserNum), v))
	})
}

// AllUserNumIn applies the In predicate on the "allUserNum" field.
func AllUserNumIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllUserNum), v...))
	})
}

// AllUserNumNotIn applies the NotIn predicate on the "allUserNum" field.
func AllUserNumNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllUserNum), v...))
	})
}

// AllUserNumGT applies the GT predicate on the "allUserNum" field.
func AllUserNumGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllUserNum), v))
	})
}

// AllUserNumGTE applies the GTE predicate on the "allUserNum" field.
func AllUserNumGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllUserNum), v))
	})
}

// AllUserNumLT applies the LT predicate on the "allUserNum" field.
func AllUserNumLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllUserNum), v))
	})
}

// AllUserNumLTE applies the LTE predicate on the "allUserNum" field.
func AllUserNumLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllUserNum), v))
	})
}

// AllUserNumIsNil applies the IsNil predicate on the "allUserNum" field.
func AllUserNumIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllUserNum)))
	})
}

// AllUserNumNotNil applies the NotNil predicate on the "allUserNum" field.
func AllUserNumNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllUserNum)))
	})
}

// AllPaymentEQ applies the EQ predicate on the "allPayment" field.
func AllPaymentEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllPayment), v))
	})
}

// AllPaymentNEQ applies the NEQ predicate on the "allPayment" field.
func AllPaymentNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllPayment), v))
	})
}

// AllPaymentIn applies the In predicate on the "allPayment" field.
func AllPaymentIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllPayment), v...))
	})
}

// AllPaymentNotIn applies the NotIn predicate on the "allPayment" field.
func AllPaymentNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllPayment), v...))
	})
}

// AllPaymentGT applies the GT predicate on the "allPayment" field.
func AllPaymentGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllPayment), v))
	})
}

// AllPaymentGTE applies the GTE predicate on the "allPayment" field.
func AllPaymentGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllPayment), v))
	})
}

// AllPaymentLT applies the LT predicate on the "allPayment" field.
func AllPaymentLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllPayment), v))
	})
}

// AllPaymentLTE applies the LTE predicate on the "allPayment" field.
func AllPaymentLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllPayment), v))
	})
}

// AllPaymentIsNil applies the IsNil predicate on the "allPayment" field.
func AllPaymentIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllPayment)))
	})
}

// AllPaymentNotNil applies the NotNil predicate on the "allPayment" field.
func AllPaymentNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllPayment)))
	})
}

// AllPayUserEQ applies the EQ predicate on the "allPayUser" field.
func AllPayUserEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllPayUser), v))
	})
}

// AllPayUserNEQ applies the NEQ predicate on the "allPayUser" field.
func AllPayUserNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllPayUser), v))
	})
}

// AllPayUserIn applies the In predicate on the "allPayUser" field.
func AllPayUserIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllPayUser), v...))
	})
}

// AllPayUserNotIn applies the NotIn predicate on the "allPayUser" field.
func AllPayUserNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllPayUser), v...))
	})
}

// AllPayUserGT applies the GT predicate on the "allPayUser" field.
func AllPayUserGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllPayUser), v))
	})
}

// AllPayUserGTE applies the GTE predicate on the "allPayUser" field.
func AllPayUserGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllPayUser), v))
	})
}

// AllPayUserLT applies the LT predicate on the "allPayUser" field.
func AllPayUserLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllPayUser), v))
	})
}

// AllPayUserLTE applies the LTE predicate on the "allPayUser" field.
func AllPayUserLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllPayUser), v))
	})
}

// AllPayUserIsNil applies the IsNil predicate on the "allPayUser" field.
func AllPayUserIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllPayUser)))
	})
}

// AllPayUserNotNil applies the NotNil predicate on the "allPayUser" field.
func AllPayUserNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllPayUser)))
	})
}

// AllOrderNumEQ applies the EQ predicate on the "allOrderNum" field.
func AllOrderNumEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllOrderNum), v))
	})
}

// AllOrderNumNEQ applies the NEQ predicate on the "allOrderNum" field.
func AllOrderNumNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllOrderNum), v))
	})
}

// AllOrderNumIn applies the In predicate on the "allOrderNum" field.
func AllOrderNumIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllOrderNum), v...))
	})
}

// AllOrderNumNotIn applies the NotIn predicate on the "allOrderNum" field.
func AllOrderNumNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllOrderNum), v...))
	})
}

// AllOrderNumGT applies the GT predicate on the "allOrderNum" field.
func AllOrderNumGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllOrderNum), v))
	})
}

// AllOrderNumGTE applies the GTE predicate on the "allOrderNum" field.
func AllOrderNumGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllOrderNum), v))
	})
}

// AllOrderNumLT applies the LT predicate on the "allOrderNum" field.
func AllOrderNumLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllOrderNum), v))
	})
}

// AllOrderNumLTE applies the LTE predicate on the "allOrderNum" field.
func AllOrderNumLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllOrderNum), v))
	})
}

// AllOrderNumIsNil applies the IsNil predicate on the "allOrderNum" field.
func AllOrderNumIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllOrderNum)))
	})
}

// AllOrderNumNotNil applies the NotNil predicate on the "allOrderNum" field.
func AllOrderNumNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllOrderNum)))
	})
}

// DayUserNumEQ applies the EQ predicate on the "dayUserNum" field.
func DayUserNumEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayUserNum), v))
	})
}

// DayUserNumNEQ applies the NEQ predicate on the "dayUserNum" field.
func DayUserNumNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayUserNum), v))
	})
}

// DayUserNumIn applies the In predicate on the "dayUserNum" field.
func DayUserNumIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayUserNum), v...))
	})
}

// DayUserNumNotIn applies the NotIn predicate on the "dayUserNum" field.
func DayUserNumNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayUserNum), v...))
	})
}

// DayUserNumGT applies the GT predicate on the "dayUserNum" field.
func DayUserNumGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayUserNum), v))
	})
}

// DayUserNumGTE applies the GTE predicate on the "dayUserNum" field.
func DayUserNumGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayUserNum), v))
	})
}

// DayUserNumLT applies the LT predicate on the "dayUserNum" field.
func DayUserNumLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayUserNum), v))
	})
}

// DayUserNumLTE applies the LTE predicate on the "dayUserNum" field.
func DayUserNumLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayUserNum), v))
	})
}

// DayUserNumIsNil applies the IsNil predicate on the "dayUserNum" field.
func DayUserNumIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayUserNum)))
	})
}

// DayUserNumNotNil applies the NotNil predicate on the "dayUserNum" field.
func DayUserNumNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayUserNum)))
	})
}

// DayPaymentEQ applies the EQ predicate on the "dayPayment" field.
func DayPaymentEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayPayment), v))
	})
}

// DayPaymentNEQ applies the NEQ predicate on the "dayPayment" field.
func DayPaymentNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayPayment), v))
	})
}

// DayPaymentIn applies the In predicate on the "dayPayment" field.
func DayPaymentIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayPayment), v...))
	})
}

// DayPaymentNotIn applies the NotIn predicate on the "dayPayment" field.
func DayPaymentNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayPayment), v...))
	})
}

// DayPaymentGT applies the GT predicate on the "dayPayment" field.
func DayPaymentGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayPayment), v))
	})
}

// DayPaymentGTE applies the GTE predicate on the "dayPayment" field.
func DayPaymentGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayPayment), v))
	})
}

// DayPaymentLT applies the LT predicate on the "dayPayment" field.
func DayPaymentLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayPayment), v))
	})
}

// DayPaymentLTE applies the LTE predicate on the "dayPayment" field.
func DayPaymentLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayPayment), v))
	})
}

// DayPaymentIsNil applies the IsNil predicate on the "dayPayment" field.
func DayPaymentIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayPayment)))
	})
}

// DayPaymentNotNil applies the NotNil predicate on the "dayPayment" field.
func DayPaymentNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayPayment)))
	})
}

// DayOrderNumEQ applies the EQ predicate on the "dayOrderNum" field.
func DayOrderNumEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayOrderNum), v))
	})
}

// DayOrderNumNEQ applies the NEQ predicate on the "dayOrderNum" field.
func DayOrderNumNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayOrderNum), v))
	})
}

// DayOrderNumIn applies the In predicate on the "dayOrderNum" field.
func DayOrderNumIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayOrderNum), v...))
	})
}

// DayOrderNumNotIn applies the NotIn predicate on the "dayOrderNum" field.
func DayOrderNumNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayOrderNum), v...))
	})
}

// DayOrderNumGT applies the GT predicate on the "dayOrderNum" field.
func DayOrderNumGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayOrderNum), v))
	})
}

// DayOrderNumGTE applies the GTE predicate on the "dayOrderNum" field.
func DayOrderNumGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayOrderNum), v))
	})
}

// DayOrderNumLT applies the LT predicate on the "dayOrderNum" field.
func DayOrderNumLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayOrderNum), v))
	})
}

// DayOrderNumLTE applies the LTE predicate on the "dayOrderNum" field.
func DayOrderNumLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayOrderNum), v))
	})
}

// DayOrderNumIsNil applies the IsNil predicate on the "dayOrderNum" field.
func DayOrderNumIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayOrderNum)))
	})
}

// DayOrderNumNotNil applies the NotNil predicate on the "dayOrderNum" field.
func DayOrderNumNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayOrderNum)))
	})
}

// DayPayUserEQ applies the EQ predicate on the "dayPayUser" field.
func DayPayUserEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayPayUser), v))
	})
}

// DayPayUserNEQ applies the NEQ predicate on the "dayPayUser" field.
func DayPayUserNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayPayUser), v))
	})
}

// DayPayUserIn applies the In predicate on the "dayPayUser" field.
func DayPayUserIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayPayUser), v...))
	})
}

// DayPayUserNotIn applies the NotIn predicate on the "dayPayUser" field.
func DayPayUserNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayPayUser), v...))
	})
}

// DayPayUserGT applies the GT predicate on the "dayPayUser" field.
func DayPayUserGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayPayUser), v))
	})
}

// DayPayUserGTE applies the GTE predicate on the "dayPayUser" field.
func DayPayUserGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayPayUser), v))
	})
}

// DayPayUserLT applies the LT predicate on the "dayPayUser" field.
func DayPayUserLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayPayUser), v))
	})
}

// DayPayUserLTE applies the LTE predicate on the "dayPayUser" field.
func DayPayUserLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayPayUser), v))
	})
}

// DayPayUserIsNil applies the IsNil predicate on the "dayPayUser" field.
func DayPayUserIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayPayUser)))
	})
}

// DayPayUserNotNil applies the NotNil predicate on the "dayPayUser" field.
func DayPayUserNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayPayUser)))
	})
}

// DayRegPaymentEQ applies the EQ predicate on the "dayRegPayment" field.
func DayRegPaymentEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayRegPayment), v))
	})
}

// DayRegPaymentNEQ applies the NEQ predicate on the "dayRegPayment" field.
func DayRegPaymentNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayRegPayment), v))
	})
}

// DayRegPaymentIn applies the In predicate on the "dayRegPayment" field.
func DayRegPaymentIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayRegPayment), v...))
	})
}

// DayRegPaymentNotIn applies the NotIn predicate on the "dayRegPayment" field.
func DayRegPaymentNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayRegPayment), v...))
	})
}

// DayRegPaymentGT applies the GT predicate on the "dayRegPayment" field.
func DayRegPaymentGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayRegPayment), v))
	})
}

// DayRegPaymentGTE applies the GTE predicate on the "dayRegPayment" field.
func DayRegPaymentGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayRegPayment), v))
	})
}

// DayRegPaymentLT applies the LT predicate on the "dayRegPayment" field.
func DayRegPaymentLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayRegPayment), v))
	})
}

// DayRegPaymentLTE applies the LTE predicate on the "dayRegPayment" field.
func DayRegPaymentLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayRegPayment), v))
	})
}

// DayRegPaymentIsNil applies the IsNil predicate on the "dayRegPayment" field.
func DayRegPaymentIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayRegPayment)))
	})
}

// DayRegPaymentNotNil applies the NotNil predicate on the "dayRegPayment" field.
func DayRegPaymentNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayRegPayment)))
	})
}

// DayRegUserNumEQ applies the EQ predicate on the "dayRegUserNum" field.
func DayRegUserNumEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayRegUserNum), v))
	})
}

// DayRegUserNumNEQ applies the NEQ predicate on the "dayRegUserNum" field.
func DayRegUserNumNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayRegUserNum), v))
	})
}

// DayRegUserNumIn applies the In predicate on the "dayRegUserNum" field.
func DayRegUserNumIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayRegUserNum), v...))
	})
}

// DayRegUserNumNotIn applies the NotIn predicate on the "dayRegUserNum" field.
func DayRegUserNumNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayRegUserNum), v...))
	})
}

// DayRegUserNumGT applies the GT predicate on the "dayRegUserNum" field.
func DayRegUserNumGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayRegUserNum), v))
	})
}

// DayRegUserNumGTE applies the GTE predicate on the "dayRegUserNum" field.
func DayRegUserNumGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayRegUserNum), v))
	})
}

// DayRegUserNumLT applies the LT predicate on the "dayRegUserNum" field.
func DayRegUserNumLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayRegUserNum), v))
	})
}

// DayRegUserNumLTE applies the LTE predicate on the "dayRegUserNum" field.
func DayRegUserNumLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayRegUserNum), v))
	})
}

// DayRegUserNumIsNil applies the IsNil predicate on the "dayRegUserNum" field.
func DayRegUserNumIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayRegUserNum)))
	})
}

// DayRegUserNumNotNil applies the NotNil predicate on the "dayRegUserNum" field.
func DayRegUserNumNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayRegUserNum)))
	})
}

// DayRegOrderNumEQ applies the EQ predicate on the "dayRegOrderNum" field.
func DayRegOrderNumEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayRegOrderNum), v))
	})
}

// DayRegOrderNumNEQ applies the NEQ predicate on the "dayRegOrderNum" field.
func DayRegOrderNumNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayRegOrderNum), v))
	})
}

// DayRegOrderNumIn applies the In predicate on the "dayRegOrderNum" field.
func DayRegOrderNumIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayRegOrderNum), v...))
	})
}

// DayRegOrderNumNotIn applies the NotIn predicate on the "dayRegOrderNum" field.
func DayRegOrderNumNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayRegOrderNum), v...))
	})
}

// DayRegOrderNumGT applies the GT predicate on the "dayRegOrderNum" field.
func DayRegOrderNumGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayRegOrderNum), v))
	})
}

// DayRegOrderNumGTE applies the GTE predicate on the "dayRegOrderNum" field.
func DayRegOrderNumGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayRegOrderNum), v))
	})
}

// DayRegOrderNumLT applies the LT predicate on the "dayRegOrderNum" field.
func DayRegOrderNumLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayRegOrderNum), v))
	})
}

// DayRegOrderNumLTE applies the LTE predicate on the "dayRegOrderNum" field.
func DayRegOrderNumLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayRegOrderNum), v))
	})
}

// DayRegOrderNumIsNil applies the IsNil predicate on the "dayRegOrderNum" field.
func DayRegOrderNumIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayRegOrderNum)))
	})
}

// DayRegOrderNumNotNil applies the NotNil predicate on the "dayRegOrderNum" field.
func DayRegOrderNumNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayRegOrderNum)))
	})
}

// OldRegPaymentEQ applies the EQ predicate on the "oldRegPayment" field.
func OldRegPaymentEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldRegPayment), v))
	})
}

// OldRegPaymentNEQ applies the NEQ predicate on the "oldRegPayment" field.
func OldRegPaymentNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOldRegPayment), v))
	})
}

// OldRegPaymentIn applies the In predicate on the "oldRegPayment" field.
func OldRegPaymentIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOldRegPayment), v...))
	})
}

// OldRegPaymentNotIn applies the NotIn predicate on the "oldRegPayment" field.
func OldRegPaymentNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOldRegPayment), v...))
	})
}

// OldRegPaymentGT applies the GT predicate on the "oldRegPayment" field.
func OldRegPaymentGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOldRegPayment), v))
	})
}

// OldRegPaymentGTE applies the GTE predicate on the "oldRegPayment" field.
func OldRegPaymentGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOldRegPayment), v))
	})
}

// OldRegPaymentLT applies the LT predicate on the "oldRegPayment" field.
func OldRegPaymentLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOldRegPayment), v))
	})
}

// OldRegPaymentLTE applies the LTE predicate on the "oldRegPayment" field.
func OldRegPaymentLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOldRegPayment), v))
	})
}

// OldRegPaymentIsNil applies the IsNil predicate on the "oldRegPayment" field.
func OldRegPaymentIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOldRegPayment)))
	})
}

// OldRegPaymentNotNil applies the NotNil predicate on the "oldRegPayment" field.
func OldRegPaymentNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOldRegPayment)))
	})
}

// OldRegUserNumEQ applies the EQ predicate on the "oldRegUserNum" field.
func OldRegUserNumEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldRegUserNum), v))
	})
}

// OldRegUserNumNEQ applies the NEQ predicate on the "oldRegUserNum" field.
func OldRegUserNumNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOldRegUserNum), v))
	})
}

// OldRegUserNumIn applies the In predicate on the "oldRegUserNum" field.
func OldRegUserNumIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOldRegUserNum), v...))
	})
}

// OldRegUserNumNotIn applies the NotIn predicate on the "oldRegUserNum" field.
func OldRegUserNumNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOldRegUserNum), v...))
	})
}

// OldRegUserNumGT applies the GT predicate on the "oldRegUserNum" field.
func OldRegUserNumGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOldRegUserNum), v))
	})
}

// OldRegUserNumGTE applies the GTE predicate on the "oldRegUserNum" field.
func OldRegUserNumGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOldRegUserNum), v))
	})
}

// OldRegUserNumLT applies the LT predicate on the "oldRegUserNum" field.
func OldRegUserNumLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOldRegUserNum), v))
	})
}

// OldRegUserNumLTE applies the LTE predicate on the "oldRegUserNum" field.
func OldRegUserNumLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOldRegUserNum), v))
	})
}

// OldRegUserNumIsNil applies the IsNil predicate on the "oldRegUserNum" field.
func OldRegUserNumIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOldRegUserNum)))
	})
}

// OldRegUserNumNotNil applies the NotNil predicate on the "oldRegUserNum" field.
func OldRegUserNumNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOldRegUserNum)))
	})
}

// OldRegOrderNumEQ applies the EQ predicate on the "oldRegOrderNum" field.
func OldRegOrderNumEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOldRegOrderNum), v))
	})
}

// OldRegOrderNumNEQ applies the NEQ predicate on the "oldRegOrderNum" field.
func OldRegOrderNumNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOldRegOrderNum), v))
	})
}

// OldRegOrderNumIn applies the In predicate on the "oldRegOrderNum" field.
func OldRegOrderNumIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOldRegOrderNum), v...))
	})
}

// OldRegOrderNumNotIn applies the NotIn predicate on the "oldRegOrderNum" field.
func OldRegOrderNumNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOldRegOrderNum), v...))
	})
}

// OldRegOrderNumGT applies the GT predicate on the "oldRegOrderNum" field.
func OldRegOrderNumGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOldRegOrderNum), v))
	})
}

// OldRegOrderNumGTE applies the GTE predicate on the "oldRegOrderNum" field.
func OldRegOrderNumGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOldRegOrderNum), v))
	})
}

// OldRegOrderNumLT applies the LT predicate on the "oldRegOrderNum" field.
func OldRegOrderNumLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOldRegOrderNum), v))
	})
}

// OldRegOrderNumLTE applies the LTE predicate on the "oldRegOrderNum" field.
func OldRegOrderNumLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOldRegOrderNum), v))
	})
}

// OldRegOrderNumIsNil applies the IsNil predicate on the "oldRegOrderNum" field.
func OldRegOrderNumIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOldRegOrderNum)))
	})
}

// OldRegOrderNumNotNil applies the NotNil predicate on the "oldRegOrderNum" field.
func OldRegOrderNumNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOldRegOrderNum)))
	})
}

// PayRateEQ applies the EQ predicate on the "payRate" field.
func PayRateEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayRate), v))
	})
}

// PayRateNEQ applies the NEQ predicate on the "payRate" field.
func PayRateNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayRate), v))
	})
}

// PayRateIn applies the In predicate on the "payRate" field.
func PayRateIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayRate), v...))
	})
}

// PayRateNotIn applies the NotIn predicate on the "payRate" field.
func PayRateNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayRate), v...))
	})
}

// PayRateGT applies the GT predicate on the "payRate" field.
func PayRateGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayRate), v))
	})
}

// PayRateGTE applies the GTE predicate on the "payRate" field.
func PayRateGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayRate), v))
	})
}

// PayRateLT applies the LT predicate on the "payRate" field.
func PayRateLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayRate), v))
	})
}

// PayRateLTE applies the LTE predicate on the "payRate" field.
func PayRateLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayRate), v))
	})
}

// PayRateIsNil applies the IsNil predicate on the "payRate" field.
func PayRateIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayRate)))
	})
}

// PayRateNotNil applies the NotNil predicate on the "payRate" field.
func PayRateNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayRate)))
	})
}

// ArpuEQ applies the EQ predicate on the "arpu" field.
func ArpuEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArpu), v))
	})
}

// ArpuNEQ applies the NEQ predicate on the "arpu" field.
func ArpuNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArpu), v))
	})
}

// ArpuIn applies the In predicate on the "arpu" field.
func ArpuIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArpu), v...))
	})
}

// ArpuNotIn applies the NotIn predicate on the "arpu" field.
func ArpuNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArpu), v...))
	})
}

// ArpuGT applies the GT predicate on the "arpu" field.
func ArpuGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArpu), v))
	})
}

// ArpuGTE applies the GTE predicate on the "arpu" field.
func ArpuGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArpu), v))
	})
}

// ArpuLT applies the LT predicate on the "arpu" field.
func ArpuLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArpu), v))
	})
}

// ArpuLTE applies the LTE predicate on the "arpu" field.
func ArpuLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArpu), v))
	})
}

// ArpuIsNil applies the IsNil predicate on the "arpu" field.
func ArpuIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArpu)))
	})
}

// ArpuNotNil applies the NotNil predicate on the "arpu" field.
func ArpuNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArpu)))
	})
}

// DayRegArpuEQ applies the EQ predicate on the "dayRegArpu" field.
func DayRegArpuEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayRegArpu), v))
	})
}

// DayRegArpuNEQ applies the NEQ predicate on the "dayRegArpu" field.
func DayRegArpuNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayRegArpu), v))
	})
}

// DayRegArpuIn applies the In predicate on the "dayRegArpu" field.
func DayRegArpuIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayRegArpu), v...))
	})
}

// DayRegArpuNotIn applies the NotIn predicate on the "dayRegArpu" field.
func DayRegArpuNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayRegArpu), v...))
	})
}

// DayRegArpuGT applies the GT predicate on the "dayRegArpu" field.
func DayRegArpuGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayRegArpu), v))
	})
}

// DayRegArpuGTE applies the GTE predicate on the "dayRegArpu" field.
func DayRegArpuGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayRegArpu), v))
	})
}

// DayRegArpuLT applies the LT predicate on the "dayRegArpu" field.
func DayRegArpuLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayRegArpu), v))
	})
}

// DayRegArpuLTE applies the LTE predicate on the "dayRegArpu" field.
func DayRegArpuLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayRegArpu), v))
	})
}

// DayRegArpuIsNil applies the IsNil predicate on the "dayRegArpu" field.
func DayRegArpuIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayRegArpu)))
	})
}

// DayRegArpuNotNil applies the NotNil predicate on the "dayRegArpu" field.
func DayRegArpuNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayRegArpu)))
	})
}

// DayArpuEQ applies the EQ predicate on the "dayArpu" field.
func DayArpuEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayArpu), v))
	})
}

// DayArpuNEQ applies the NEQ predicate on the "dayArpu" field.
func DayArpuNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayArpu), v))
	})
}

// DayArpuIn applies the In predicate on the "dayArpu" field.
func DayArpuIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayArpu), v...))
	})
}

// DayArpuNotIn applies the NotIn predicate on the "dayArpu" field.
func DayArpuNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayArpu), v...))
	})
}

// DayArpuGT applies the GT predicate on the "dayArpu" field.
func DayArpuGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayArpu), v))
	})
}

// DayArpuGTE applies the GTE predicate on the "dayArpu" field.
func DayArpuGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayArpu), v))
	})
}

// DayArpuLT applies the LT predicate on the "dayArpu" field.
func DayArpuLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayArpu), v))
	})
}

// DayArpuLTE applies the LTE predicate on the "dayArpu" field.
func DayArpuLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayArpu), v))
	})
}

// DayArpuIsNil applies the IsNil predicate on the "dayArpu" field.
func DayArpuIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayArpu)))
	})
}

// DayArpuNotNil applies the NotNil predicate on the "dayArpu" field.
func DayArpuNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayArpu)))
	})
}

// DayOldArpuEQ applies the EQ predicate on the "dayOldArpu" field.
func DayOldArpuEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayOldArpu), v))
	})
}

// DayOldArpuNEQ applies the NEQ predicate on the "dayOldArpu" field.
func DayOldArpuNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayOldArpu), v))
	})
}

// DayOldArpuIn applies the In predicate on the "dayOldArpu" field.
func DayOldArpuIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayOldArpu), v...))
	})
}

// DayOldArpuNotIn applies the NotIn predicate on the "dayOldArpu" field.
func DayOldArpuNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayOldArpu), v...))
	})
}

// DayOldArpuGT applies the GT predicate on the "dayOldArpu" field.
func DayOldArpuGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayOldArpu), v))
	})
}

// DayOldArpuGTE applies the GTE predicate on the "dayOldArpu" field.
func DayOldArpuGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayOldArpu), v))
	})
}

// DayOldArpuLT applies the LT predicate on the "dayOldArpu" field.
func DayOldArpuLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayOldArpu), v))
	})
}

// DayOldArpuLTE applies the LTE predicate on the "dayOldArpu" field.
func DayOldArpuLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayOldArpu), v))
	})
}

// DayOldArpuIsNil applies the IsNil predicate on the "dayOldArpu" field.
func DayOldArpuIsNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayOldArpu)))
	})
}

// DayOldArpuNotNil applies the NotNil predicate on the "dayOldArpu" field.
func DayOldArpuNotNil() predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayOldArpu)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.UserAnalysisStatistics {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAnalysisStatistics) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAnalysisStatistics) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAnalysisStatistics) predicate.UserAnalysisStatistics {
	return predicate.UserAnalysisStatistics(func(s *sql.Selector) {
		p(s.Not())
	})
}
