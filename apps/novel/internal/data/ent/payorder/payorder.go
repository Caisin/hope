// Code generated by entc, DO NOT EDIT.

package payorder

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/schema"
	"time"
)

const (
	// Label holds the string label denoting the payorder type in the database.
	Label = "pay_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrderId holds the string denoting the orderid field in the database.
	FieldOrderId = "order_id"
	// FieldLastRead holds the string denoting the lastread field in the database.
	FieldLastRead = "last_read"
	// FieldLastChapter holds the string denoting the lastchapter field in the database.
	FieldLastChapter = "last_chapter"
	// FieldPaymentName holds the string denoting the paymentname field in the database.
	FieldPaymentName = "payment_name"
	// FieldPaymentId holds the string denoting the paymentid field in the database.
	FieldPaymentId = "payment_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldPayment holds the string denoting the payment field in the database.
	FieldPayment = "payment"
	// FieldPaymentTime holds the string denoting the paymenttime field in the database.
	FieldPaymentTime = "payment_time"
	// FieldCloseTime holds the string denoting the closetime field in the database.
	FieldCloseTime = "close_time"
	// FieldPayType holds the string denoting the paytype field in the database.
	FieldPayType = "pay_type"
	// FieldCoin holds the string denoting the coin field in the database.
	FieldCoin = "coin"
	// FieldCoupon holds the string denoting the coupon field in the database.
	FieldCoupon = "coupon"
	// FieldVipDays holds the string denoting the vipdays field in the database.
	FieldVipDays = "vip_days"
	// FieldVipType holds the string denoting the viptype field in the database.
	FieldVipType = "vip_type"
	// FieldVipName holds the string denoting the vipname field in the database.
	FieldVipName = "vip_name"
	// FieldTimes holds the string denoting the times field in the database.
	FieldTimes = "times"
	// FieldOtherOrderId holds the string denoting the otherorderid field in the database.
	FieldOtherOrderId = "other_order_id"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeChannel holds the string denoting the channel edge name in mutations.
	EdgeChannel = "channel"
	// EdgeAgreement holds the string denoting the agreement edge name in mutations.
	EdgeAgreement = "agreement"
	// Table holds the table name of the payorder in the database.
	Table = "pay_orders"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "pay_orders"
	// UserInverseTable is the table name for the SocialUser entity.
	// It exists in this package in order to avoid circular dependency with the "socialuser" package.
	UserInverseTable = "social_users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "social_user_orders"
	// ChannelTable is the table that holds the channel relation/edge.
	ChannelTable = "pay_orders"
	// ChannelInverseTable is the table name for the AdChannel entity.
	// It exists in this package in order to avoid circular dependency with the "adchannel" package.
	ChannelInverseTable = "ad_channels"
	// ChannelColumn is the table column denoting the channel relation/edge.
	ChannelColumn = "ad_channel_orders"
	// AgreementTable is the table that holds the agreement relation/edge.
	AgreementTable = "pay_orders"
	// AgreementInverseTable is the table name for the AgreementLog entity.
	// It exists in this package in order to avoid circular dependency with the "agreementlog" package.
	AgreementInverseTable = "agreement_logs"
	// AgreementColumn is the table column denoting the agreement relation/edge.
	AgreementColumn = "agreement_log_orders"
)

// Columns holds all SQL columns for payorder fields.
var Columns = []string{
	FieldID,
	FieldOrderId,
	FieldLastRead,
	FieldLastChapter,
	FieldPaymentName,
	FieldPaymentId,
	FieldState,
	FieldPayment,
	FieldPaymentTime,
	FieldCloseTime,
	FieldPayType,
	FieldCoin,
	FieldCoupon,
	FieldVipDays,
	FieldVipType,
	FieldVipName,
	FieldTimes,
	FieldOtherOrderId,
	FieldRemark,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreateBy,
	FieldUpdateBy,
	FieldTenantId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pay_orders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ad_channel_orders",
	"agreement_log_orders",
	"social_user_orders",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState schema.OrderState
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(int32) error
	// PaymentValidator is a validator for the "payment" field. It is called by the builders before save.
	PaymentValidator func(int64) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateBy holds the default value on creation for the "createBy" field.
	DefaultCreateBy int64
	// DefaultUpdateBy holds the default value on creation for the "updateBy" field.
	DefaultUpdateBy int64
	// DefaultTenantId holds the default value on creation for the "tenantId" field.
	DefaultTenantId int64
)

// PayType defines the type for the "payType" enum field.
type PayType string

// PayType values.
const (
	PayTypeGoogle PayType = "Google"
	PayTypeWeChat PayType = "WeChat"
	PayTypeAlipay PayType = "Alipay"
	PayTypeApple  PayType = "Apple"
)

func (pt PayType) String() string {
	return string(pt)
}

// PayTypeValidator is a validator for the "payType" field enum values. It is called by the builders before save.
func PayTypeValidator(pt PayType) error {
	switch pt {
	case PayTypeGoogle, PayTypeWeChat, PayTypeAlipay, PayTypeApple:
		return nil
	default:
		return fmt.Errorf("payorder: invalid enum value for payType field: %q", pt)
	}
}
