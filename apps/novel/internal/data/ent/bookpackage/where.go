// Code generated by entc, DO NOT EDIT.

package bookpackage

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ActivityCode applies equality check predicate on the "activityCode" field. It's identical to ActivityCodeEQ.
func ActivityCode(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityCode), v))
	})
}

// PackageName applies equality check predicate on the "packageName" field. It's identical to PackageNameEQ.
func PackageName(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageName), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// DailyPrice applies equality check predicate on the "dailyPrice" field. It's identical to DailyPriceEQ.
func DailyPrice(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDailyPrice), v))
	})
}

// NovelIds applies equality check predicate on the "novelIds" field. It's identical to NovelIdsEQ.
func NovelIds(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelIds), v))
	})
}

// EffectTime applies equality check predicate on the "effectTime" field. It's identical to EffectTimeEQ.
func EffectTime(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// ExpiredTime applies equality check predicate on the "expiredTime" field. It's identical to ExpiredTimeEQ.
func ExpiredTime(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// ActivityCodeEQ applies the EQ predicate on the "activityCode" field.
func ActivityCodeEQ(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeNEQ applies the NEQ predicate on the "activityCode" field.
func ActivityCodeNEQ(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeIn applies the In predicate on the "activityCode" field.
func ActivityCodeIn(vs ...string) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivityCode), v...))
	})
}

// ActivityCodeNotIn applies the NotIn predicate on the "activityCode" field.
func ActivityCodeNotIn(vs ...string) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivityCode), v...))
	})
}

// ActivityCodeGT applies the GT predicate on the "activityCode" field.
func ActivityCodeGT(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeGTE applies the GTE predicate on the "activityCode" field.
func ActivityCodeGTE(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeLT applies the LT predicate on the "activityCode" field.
func ActivityCodeLT(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeLTE applies the LTE predicate on the "activityCode" field.
func ActivityCodeLTE(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeContains applies the Contains predicate on the "activityCode" field.
func ActivityCodeContains(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeHasPrefix applies the HasPrefix predicate on the "activityCode" field.
func ActivityCodeHasPrefix(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeHasSuffix applies the HasSuffix predicate on the "activityCode" field.
func ActivityCodeHasSuffix(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeIsNil applies the IsNil predicate on the "activityCode" field.
func ActivityCodeIsNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActivityCode)))
	})
}

// ActivityCodeNotNil applies the NotNil predicate on the "activityCode" field.
func ActivityCodeNotNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActivityCode)))
	})
}

// ActivityCodeEqualFold applies the EqualFold predicate on the "activityCode" field.
func ActivityCodeEqualFold(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeContainsFold applies the ContainsFold predicate on the "activityCode" field.
func ActivityCodeContainsFold(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActivityCode), v))
	})
}

// PackageNameEQ applies the EQ predicate on the "packageName" field.
func PackageNameEQ(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageName), v))
	})
}

// PackageNameNEQ applies the NEQ predicate on the "packageName" field.
func PackageNameNEQ(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPackageName), v))
	})
}

// PackageNameIn applies the In predicate on the "packageName" field.
func PackageNameIn(vs ...string) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPackageName), v...))
	})
}

// PackageNameNotIn applies the NotIn predicate on the "packageName" field.
func PackageNameNotIn(vs ...string) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPackageName), v...))
	})
}

// PackageNameGT applies the GT predicate on the "packageName" field.
func PackageNameGT(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPackageName), v))
	})
}

// PackageNameGTE applies the GTE predicate on the "packageName" field.
func PackageNameGTE(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPackageName), v))
	})
}

// PackageNameLT applies the LT predicate on the "packageName" field.
func PackageNameLT(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPackageName), v))
	})
}

// PackageNameLTE applies the LTE predicate on the "packageName" field.
func PackageNameLTE(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPackageName), v))
	})
}

// PackageNameContains applies the Contains predicate on the "packageName" field.
func PackageNameContains(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPackageName), v))
	})
}

// PackageNameHasPrefix applies the HasPrefix predicate on the "packageName" field.
func PackageNameHasPrefix(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPackageName), v))
	})
}

// PackageNameHasSuffix applies the HasSuffix predicate on the "packageName" field.
func PackageNameHasSuffix(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPackageName), v))
	})
}

// PackageNameIsNil applies the IsNil predicate on the "packageName" field.
func PackageNameIsNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPackageName)))
	})
}

// PackageNameNotNil applies the NotNil predicate on the "packageName" field.
func PackageNameNotNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPackageName)))
	})
}

// PackageNameEqualFold applies the EqualFold predicate on the "packageName" field.
func PackageNameEqualFold(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPackageName), v))
	})
}

// PackageNameContainsFold applies the ContainsFold predicate on the "packageName" field.
func PackageNameContainsFold(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPackageName), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrice)))
	})
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrice)))
	})
}

// DailyPriceEQ applies the EQ predicate on the "dailyPrice" field.
func DailyPriceEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDailyPrice), v))
	})
}

// DailyPriceNEQ applies the NEQ predicate on the "dailyPrice" field.
func DailyPriceNEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDailyPrice), v))
	})
}

// DailyPriceIn applies the In predicate on the "dailyPrice" field.
func DailyPriceIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDailyPrice), v...))
	})
}

// DailyPriceNotIn applies the NotIn predicate on the "dailyPrice" field.
func DailyPriceNotIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDailyPrice), v...))
	})
}

// DailyPriceGT applies the GT predicate on the "dailyPrice" field.
func DailyPriceGT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDailyPrice), v))
	})
}

// DailyPriceGTE applies the GTE predicate on the "dailyPrice" field.
func DailyPriceGTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDailyPrice), v))
	})
}

// DailyPriceLT applies the LT predicate on the "dailyPrice" field.
func DailyPriceLT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDailyPrice), v))
	})
}

// DailyPriceLTE applies the LTE predicate on the "dailyPrice" field.
func DailyPriceLTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDailyPrice), v))
	})
}

// DailyPriceIsNil applies the IsNil predicate on the "dailyPrice" field.
func DailyPriceIsNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDailyPrice)))
	})
}

// DailyPriceNotNil applies the NotNil predicate on the "dailyPrice" field.
func DailyPriceNotNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDailyPrice)))
	})
}

// NovelIdsEQ applies the EQ predicate on the "novelIds" field.
func NovelIdsEQ(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelIds), v))
	})
}

// NovelIdsNEQ applies the NEQ predicate on the "novelIds" field.
func NovelIdsNEQ(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelIds), v))
	})
}

// NovelIdsIn applies the In predicate on the "novelIds" field.
func NovelIdsIn(vs ...string) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelIds), v...))
	})
}

// NovelIdsNotIn applies the NotIn predicate on the "novelIds" field.
func NovelIdsNotIn(vs ...string) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelIds), v...))
	})
}

// NovelIdsGT applies the GT predicate on the "novelIds" field.
func NovelIdsGT(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNovelIds), v))
	})
}

// NovelIdsGTE applies the GTE predicate on the "novelIds" field.
func NovelIdsGTE(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNovelIds), v))
	})
}

// NovelIdsLT applies the LT predicate on the "novelIds" field.
func NovelIdsLT(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNovelIds), v))
	})
}

// NovelIdsLTE applies the LTE predicate on the "novelIds" field.
func NovelIdsLTE(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNovelIds), v))
	})
}

// NovelIdsContains applies the Contains predicate on the "novelIds" field.
func NovelIdsContains(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNovelIds), v))
	})
}

// NovelIdsHasPrefix applies the HasPrefix predicate on the "novelIds" field.
func NovelIdsHasPrefix(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNovelIds), v))
	})
}

// NovelIdsHasSuffix applies the HasSuffix predicate on the "novelIds" field.
func NovelIdsHasSuffix(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNovelIds), v))
	})
}

// NovelIdsIsNil applies the IsNil predicate on the "novelIds" field.
func NovelIdsIsNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNovelIds)))
	})
}

// NovelIdsNotNil applies the NotNil predicate on the "novelIds" field.
func NovelIdsNotNil() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNovelIds)))
	})
}

// NovelIdsEqualFold applies the EqualFold predicate on the "novelIds" field.
func NovelIdsEqualFold(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNovelIds), v))
	})
}

// NovelIdsContainsFold applies the ContainsFold predicate on the "novelIds" field.
func NovelIdsContainsFold(v string) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNovelIds), v))
	})
}

// EffectTimeEQ applies the EQ predicate on the "effectTime" field.
func EffectTimeEQ(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeNEQ applies the NEQ predicate on the "effectTime" field.
func EffectTimeNEQ(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeIn applies the In predicate on the "effectTime" field.
func EffectTimeIn(vs ...time.Time) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeNotIn applies the NotIn predicate on the "effectTime" field.
func EffectTimeNotIn(vs ...time.Time) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeGT applies the GT predicate on the "effectTime" field.
func EffectTimeGT(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeGTE applies the GTE predicate on the "effectTime" field.
func EffectTimeGTE(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLT applies the LT predicate on the "effectTime" field.
func EffectTimeLT(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLTE applies the LTE predicate on the "effectTime" field.
func EffectTimeLTE(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEffectTime), v))
	})
}

// ExpiredTimeEQ applies the EQ predicate on the "expiredTime" field.
func ExpiredTimeEQ(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeNEQ applies the NEQ predicate on the "expiredTime" field.
func ExpiredTimeNEQ(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeIn applies the In predicate on the "expiredTime" field.
func ExpiredTimeIn(vs ...time.Time) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeNotIn applies the NotIn predicate on the "expiredTime" field.
func ExpiredTimeNotIn(vs ...time.Time) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeGT applies the GT predicate on the "expiredTime" field.
func ExpiredTimeGT(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeGTE applies the GTE predicate on the "expiredTime" field.
func ExpiredTimeGTE(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLT applies the LT predicate on the "expiredTime" field.
func ExpiredTimeLT(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLTE applies the LTE predicate on the "expiredTime" field.
func ExpiredTimeLTE(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiredTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.BookPackage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BookPackage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasBooks applies the HasEdge predicate on the "books" edge.
func HasBooks() predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BooksTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BooksTable, BooksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBooksWith applies the HasEdge predicate on the "books" edge with a given conditions (other predicates).
func HasBooksWith(preds ...predicate.Novel) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BooksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BooksTable, BooksPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BookPackage) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BookPackage) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BookPackage) predicate.BookPackage {
	return predicate.BookPackage(func(s *sql.Selector) {
		p(s.Not())
	})
}
