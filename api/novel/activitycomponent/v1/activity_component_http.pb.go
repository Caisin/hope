// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ActivityComponentHTTPServer interface {
	BatchDeleteActivityComponent(context.Context, *ActivityComponentBatchDeleteReq) (*ActivityComponentDeleteReply, error)
	CreateActivityComponent(context.Context, *ActivityComponentCreateReq) (*ActivityComponentCreateReply, error)
	DeleteActivityComponent(context.Context, *ActivityComponentDeleteReq) (*ActivityComponentDeleteReply, error)
	GetActivityComponent(context.Context, *ActivityComponentReq) (*ActivityComponentReply, error)
	GetActivityComponentPage(context.Context, *ActivityComponentPageReq) (*ActivityComponentPageReply, error)
	UpdateActivityComponent(context.Context, *ActivityComponentUpdateReq) (*ActivityComponentUpdateReply, error)
}

func RegisterActivityComponentHTTPServer(s *http.Server, srv ActivityComponentHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/activity/component/page", _ActivityComponent_GetActivityComponentPage0_HTTP_Handler(srv))
	r.GET("/v1/activity/component/{id}", _ActivityComponent_GetActivityComponent0_HTTP_Handler(srv))
	r.PUT("/v1/activity/component/{id}", _ActivityComponent_UpdateActivityComponent0_HTTP_Handler(srv))
	r.POST("/v1/activity/component", _ActivityComponent_CreateActivityComponent0_HTTP_Handler(srv))
	r.DELETE("/v1/activity/component/{id}", _ActivityComponent_DeleteActivityComponent0_HTTP_Handler(srv))
	r.DELETE("/v1/activity/component", _ActivityComponent_BatchDeleteActivityComponent0_HTTP_Handler(srv))
}

func _ActivityComponent_GetActivityComponentPage0_HTTP_Handler(srv ActivityComponentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivityComponentPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/activitycomponent.v1.ActivityComponent/GetActivityComponentPage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetActivityComponentPage(ctx, req.(*ActivityComponentPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActivityComponentPageReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityComponent_GetActivityComponent0_HTTP_Handler(srv ActivityComponentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivityComponentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/activitycomponent.v1.ActivityComponent/GetActivityComponent")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetActivityComponent(ctx, req.(*ActivityComponentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActivityComponentReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityComponent_UpdateActivityComponent0_HTTP_Handler(srv ActivityComponentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivityComponentUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/activitycomponent.v1.ActivityComponent/UpdateActivityComponent")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateActivityComponent(ctx, req.(*ActivityComponentUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActivityComponentUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityComponent_CreateActivityComponent0_HTTP_Handler(srv ActivityComponentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivityComponentCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/activitycomponent.v1.ActivityComponent/CreateActivityComponent")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateActivityComponent(ctx, req.(*ActivityComponentCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActivityComponentCreateReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityComponent_DeleteActivityComponent0_HTTP_Handler(srv ActivityComponentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivityComponentDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/activitycomponent.v1.ActivityComponent/DeleteActivityComponent")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteActivityComponent(ctx, req.(*ActivityComponentDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActivityComponentDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityComponent_BatchDeleteActivityComponent0_HTTP_Handler(srv ActivityComponentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivityComponentBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/activitycomponent.v1.ActivityComponent/BatchDeleteActivityComponent")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteActivityComponent(ctx, req.(*ActivityComponentBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActivityComponentDeleteReply)
		return ctx.Result(200, reply)
	}
}

type ActivityComponentHTTPClient interface {
	BatchDeleteActivityComponent(ctx context.Context, req *ActivityComponentBatchDeleteReq, opts ...http.CallOption) (rsp *ActivityComponentDeleteReply, err error)
	CreateActivityComponent(ctx context.Context, req *ActivityComponentCreateReq, opts ...http.CallOption) (rsp *ActivityComponentCreateReply, err error)
	DeleteActivityComponent(ctx context.Context, req *ActivityComponentDeleteReq, opts ...http.CallOption) (rsp *ActivityComponentDeleteReply, err error)
	GetActivityComponent(ctx context.Context, req *ActivityComponentReq, opts ...http.CallOption) (rsp *ActivityComponentReply, err error)
	GetActivityComponentPage(ctx context.Context, req *ActivityComponentPageReq, opts ...http.CallOption) (rsp *ActivityComponentPageReply, err error)
	UpdateActivityComponent(ctx context.Context, req *ActivityComponentUpdateReq, opts ...http.CallOption) (rsp *ActivityComponentUpdateReply, err error)
}

type ActivityComponentHTTPClientImpl struct {
	cc *http.Client
}

func NewActivityComponentHTTPClient(client *http.Client) ActivityComponentHTTPClient {
	return &ActivityComponentHTTPClientImpl{client}
}

func (c *ActivityComponentHTTPClientImpl) BatchDeleteActivityComponent(ctx context.Context, in *ActivityComponentBatchDeleteReq, opts ...http.CallOption) (*ActivityComponentDeleteReply, error) {
	var out ActivityComponentDeleteReply
	pattern := "/v1/activity/component"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/activitycomponent.v1.ActivityComponent/BatchDeleteActivityComponent"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityComponentHTTPClientImpl) CreateActivityComponent(ctx context.Context, in *ActivityComponentCreateReq, opts ...http.CallOption) (*ActivityComponentCreateReply, error) {
	var out ActivityComponentCreateReply
	pattern := "/v1/activity/component"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/activitycomponent.v1.ActivityComponent/CreateActivityComponent"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityComponentHTTPClientImpl) DeleteActivityComponent(ctx context.Context, in *ActivityComponentDeleteReq, opts ...http.CallOption) (*ActivityComponentDeleteReply, error) {
	var out ActivityComponentDeleteReply
	pattern := "/v1/activity/component/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/activitycomponent.v1.ActivityComponent/DeleteActivityComponent"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityComponentHTTPClientImpl) GetActivityComponent(ctx context.Context, in *ActivityComponentReq, opts ...http.CallOption) (*ActivityComponentReply, error) {
	var out ActivityComponentReply
	pattern := "/v1/activity/component/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/activitycomponent.v1.ActivityComponent/GetActivityComponent"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityComponentHTTPClientImpl) GetActivityComponentPage(ctx context.Context, in *ActivityComponentPageReq, opts ...http.CallOption) (*ActivityComponentPageReply, error) {
	var out ActivityComponentPageReply
	pattern := "/v1/activity/component/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/activitycomponent.v1.ActivityComponent/GetActivityComponentPage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityComponentHTTPClientImpl) UpdateActivityComponent(ctx context.Context, in *ActivityComponentUpdateReq, opts ...http.CallOption) (*ActivityComponentUpdateReply, error) {
	var out ActivityComponentUpdateReply
	pattern := "/v1/activity/component/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/activitycomponent.v1.ActivityComponent/UpdateActivityComponent"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
