// Code generated by entc, DO NOT EDIT.

package novel

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ClassifyId applies equality check predicate on the "classifyId" field. It's identical to ClassifyIdEQ.
func ClassifyId(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassifyId), v))
	})
}

// ClassifyName applies equality check predicate on the "classifyName" field. It's identical to ClassifyNameEQ.
func ClassifyName(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassifyName), v))
	})
}

// AuthorId applies equality check predicate on the "authorId" field. It's identical to AuthorIdEQ.
func AuthorId(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorId), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthor), v))
	})
}

// Anchor applies equality check predicate on the "anchor" field. It's identical to AnchorEQ.
func Anchor(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnchor), v))
	})
}

// Hits applies equality check predicate on the "hits" field. It's identical to HitsEQ.
func Hits(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHits), v))
	})
}

// Keywords applies equality check predicate on the "keywords" field. It's identical to KeywordsEQ.
func Keywords(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeywords), v))
	})
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// Cover applies equality check predicate on the "cover" field. It's identical to CoverEQ.
func Cover(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCover), v))
	})
}

// TagIds applies equality check predicate on the "tagIds" field. It's identical to TagIdsEQ.
func TagIds(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTagIds), v))
	})
}

// WordNum applies equality check predicate on the "wordNum" field. It's identical to WordNumEQ.
func WordNum(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWordNum), v))
	})
}

// FreeNum applies equality check predicate on the "freeNum" field. It's identical to FreeNumEQ.
func FreeNum(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeNum), v))
	})
}

// OnlineState applies equality check predicate on the "onlineState" field. It's identical to OnlineStateEQ.
func OnlineState(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnlineState), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// Publish applies equality check predicate on the "publish" field. It's identical to PublishEQ.
func Publish(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublish), v))
	})
}

// OriginalPrice applies equality check predicate on the "originalPrice" field. It's identical to OriginalPriceEQ.
func OriginalPrice(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalPrice), v))
	})
}

// ChapterPrice applies equality check predicate on the "chapterPrice" field. It's identical to ChapterPriceEQ.
func ChapterPrice(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterPrice), v))
	})
}

// ChapterCount applies equality check predicate on the "chapterCount" field. It's identical to ChapterCountEQ.
func ChapterCount(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterCount), v))
	})
}

// SignType applies equality check predicate on the "signType" field. It's identical to SignTypeEQ.
func SignType(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignType), v))
	})
}

// SignDate applies equality check predicate on the "signDate" field. It's identical to SignDateEQ.
func SignDate(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignDate), v))
	})
}

// LeadingMan applies equality check predicate on the "leadingMan" field. It's identical to LeadingManEQ.
func LeadingMan(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeadingMan), v))
	})
}

// LeadingLady applies equality check predicate on the "leadingLady" field. It's identical to LeadingLadyEQ.
func LeadingLady(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeadingLady), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// MediaKey applies equality check predicate on the "mediaKey" field. It's identical to MediaKeyEQ.
func MediaKey(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaKey), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// ClassifyIdEQ applies the EQ predicate on the "classifyId" field.
func ClassifyIdEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassifyId), v))
	})
}

// ClassifyIdNEQ applies the NEQ predicate on the "classifyId" field.
func ClassifyIdNEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassifyId), v))
	})
}

// ClassifyIdIn applies the In predicate on the "classifyId" field.
func ClassifyIdIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassifyId), v...))
	})
}

// ClassifyIdNotIn applies the NotIn predicate on the "classifyId" field.
func ClassifyIdNotIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassifyId), v...))
	})
}

// ClassifyIdGT applies the GT predicate on the "classifyId" field.
func ClassifyIdGT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassifyId), v))
	})
}

// ClassifyIdGTE applies the GTE predicate on the "classifyId" field.
func ClassifyIdGTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassifyId), v))
	})
}

// ClassifyIdLT applies the LT predicate on the "classifyId" field.
func ClassifyIdLT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassifyId), v))
	})
}

// ClassifyIdLTE applies the LTE predicate on the "classifyId" field.
func ClassifyIdLTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassifyId), v))
	})
}

// ClassifyIdIsNil applies the IsNil predicate on the "classifyId" field.
func ClassifyIdIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassifyId)))
	})
}

// ClassifyIdNotNil applies the NotNil predicate on the "classifyId" field.
func ClassifyIdNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassifyId)))
	})
}

// ClassifyNameEQ applies the EQ predicate on the "classifyName" field.
func ClassifyNameEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameNEQ applies the NEQ predicate on the "classifyName" field.
func ClassifyNameNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameIn applies the In predicate on the "classifyName" field.
func ClassifyNameIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassifyName), v...))
	})
}

// ClassifyNameNotIn applies the NotIn predicate on the "classifyName" field.
func ClassifyNameNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassifyName), v...))
	})
}

// ClassifyNameGT applies the GT predicate on the "classifyName" field.
func ClassifyNameGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameGTE applies the GTE predicate on the "classifyName" field.
func ClassifyNameGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameLT applies the LT predicate on the "classifyName" field.
func ClassifyNameLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameLTE applies the LTE predicate on the "classifyName" field.
func ClassifyNameLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameContains applies the Contains predicate on the "classifyName" field.
func ClassifyNameContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameHasPrefix applies the HasPrefix predicate on the "classifyName" field.
func ClassifyNameHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameHasSuffix applies the HasSuffix predicate on the "classifyName" field.
func ClassifyNameHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameIsNil applies the IsNil predicate on the "classifyName" field.
func ClassifyNameIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassifyName)))
	})
}

// ClassifyNameNotNil applies the NotNil predicate on the "classifyName" field.
func ClassifyNameNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassifyName)))
	})
}

// ClassifyNameEqualFold applies the EqualFold predicate on the "classifyName" field.
func ClassifyNameEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassifyName), v))
	})
}

// ClassifyNameContainsFold applies the ContainsFold predicate on the "classifyName" field.
func ClassifyNameContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassifyName), v))
	})
}

// AuthorIdEQ applies the EQ predicate on the "authorId" field.
func AuthorIdEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorId), v))
	})
}

// AuthorIdNEQ applies the NEQ predicate on the "authorId" field.
func AuthorIdNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthorId), v))
	})
}

// AuthorIdIn applies the In predicate on the "authorId" field.
func AuthorIdIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthorId), v...))
	})
}

// AuthorIdNotIn applies the NotIn predicate on the "authorId" field.
func AuthorIdNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthorId), v...))
	})
}

// AuthorIdGT applies the GT predicate on the "authorId" field.
func AuthorIdGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthorId), v))
	})
}

// AuthorIdGTE applies the GTE predicate on the "authorId" field.
func AuthorIdGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthorId), v))
	})
}

// AuthorIdLT applies the LT predicate on the "authorId" field.
func AuthorIdLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthorId), v))
	})
}

// AuthorIdLTE applies the LTE predicate on the "authorId" field.
func AuthorIdLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthorId), v))
	})
}

// AuthorIdContains applies the Contains predicate on the "authorId" field.
func AuthorIdContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthorId), v))
	})
}

// AuthorIdHasPrefix applies the HasPrefix predicate on the "authorId" field.
func AuthorIdHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthorId), v))
	})
}

// AuthorIdHasSuffix applies the HasSuffix predicate on the "authorId" field.
func AuthorIdHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthorId), v))
	})
}

// AuthorIdIsNil applies the IsNil predicate on the "authorId" field.
func AuthorIdIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAuthorId)))
	})
}

// AuthorIdNotNil applies the NotNil predicate on the "authorId" field.
func AuthorIdNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAuthorId)))
	})
}

// AuthorIdEqualFold applies the EqualFold predicate on the "authorId" field.
func AuthorIdEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthorId), v))
	})
}

// AuthorIdContainsFold applies the ContainsFold predicate on the "authorId" field.
func AuthorIdContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthorId), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSummary)))
	})
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSummary)))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthor), v))
	})
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthor), v))
	})
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthor), v...))
	})
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthor), v...))
	})
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthor), v))
	})
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthor), v))
	})
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthor), v))
	})
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthor), v))
	})
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthor), v))
	})
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthor), v))
	})
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthor), v))
	})
}

// AuthorIsNil applies the IsNil predicate on the "author" field.
func AuthorIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAuthor)))
	})
}

// AuthorNotNil applies the NotNil predicate on the "author" field.
func AuthorNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAuthor)))
	})
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthor), v))
	})
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthor), v))
	})
}

// AnchorEQ applies the EQ predicate on the "anchor" field.
func AnchorEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnchor), v))
	})
}

// AnchorNEQ applies the NEQ predicate on the "anchor" field.
func AnchorNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnchor), v))
	})
}

// AnchorIn applies the In predicate on the "anchor" field.
func AnchorIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnchor), v...))
	})
}

// AnchorNotIn applies the NotIn predicate on the "anchor" field.
func AnchorNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnchor), v...))
	})
}

// AnchorGT applies the GT predicate on the "anchor" field.
func AnchorGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnchor), v))
	})
}

// AnchorGTE applies the GTE predicate on the "anchor" field.
func AnchorGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnchor), v))
	})
}

// AnchorLT applies the LT predicate on the "anchor" field.
func AnchorLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnchor), v))
	})
}

// AnchorLTE applies the LTE predicate on the "anchor" field.
func AnchorLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnchor), v))
	})
}

// AnchorContains applies the Contains predicate on the "anchor" field.
func AnchorContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAnchor), v))
	})
}

// AnchorHasPrefix applies the HasPrefix predicate on the "anchor" field.
func AnchorHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAnchor), v))
	})
}

// AnchorHasSuffix applies the HasSuffix predicate on the "anchor" field.
func AnchorHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAnchor), v))
	})
}

// AnchorIsNil applies the IsNil predicate on the "anchor" field.
func AnchorIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAnchor)))
	})
}

// AnchorNotNil applies the NotNil predicate on the "anchor" field.
func AnchorNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAnchor)))
	})
}

// AnchorEqualFold applies the EqualFold predicate on the "anchor" field.
func AnchorEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAnchor), v))
	})
}

// AnchorContainsFold applies the ContainsFold predicate on the "anchor" field.
func AnchorContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAnchor), v))
	})
}

// HitsEQ applies the EQ predicate on the "hits" field.
func HitsEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHits), v))
	})
}

// HitsNEQ applies the NEQ predicate on the "hits" field.
func HitsNEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHits), v))
	})
}

// HitsIn applies the In predicate on the "hits" field.
func HitsIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHits), v...))
	})
}

// HitsNotIn applies the NotIn predicate on the "hits" field.
func HitsNotIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHits), v...))
	})
}

// HitsGT applies the GT predicate on the "hits" field.
func HitsGT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHits), v))
	})
}

// HitsGTE applies the GTE predicate on the "hits" field.
func HitsGTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHits), v))
	})
}

// HitsLT applies the LT predicate on the "hits" field.
func HitsLT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHits), v))
	})
}

// HitsLTE applies the LTE predicate on the "hits" field.
func HitsLTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHits), v))
	})
}

// HitsIsNil applies the IsNil predicate on the "hits" field.
func HitsIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHits)))
	})
}

// HitsNotNil applies the NotNil predicate on the "hits" field.
func HitsNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHits)))
	})
}

// KeywordsEQ applies the EQ predicate on the "keywords" field.
func KeywordsEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeywords), v))
	})
}

// KeywordsNEQ applies the NEQ predicate on the "keywords" field.
func KeywordsNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKeywords), v))
	})
}

// KeywordsIn applies the In predicate on the "keywords" field.
func KeywordsIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKeywords), v...))
	})
}

// KeywordsNotIn applies the NotIn predicate on the "keywords" field.
func KeywordsNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKeywords), v...))
	})
}

// KeywordsGT applies the GT predicate on the "keywords" field.
func KeywordsGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKeywords), v))
	})
}

// KeywordsGTE applies the GTE predicate on the "keywords" field.
func KeywordsGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKeywords), v))
	})
}

// KeywordsLT applies the LT predicate on the "keywords" field.
func KeywordsLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKeywords), v))
	})
}

// KeywordsLTE applies the LTE predicate on the "keywords" field.
func KeywordsLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKeywords), v))
	})
}

// KeywordsContains applies the Contains predicate on the "keywords" field.
func KeywordsContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKeywords), v))
	})
}

// KeywordsHasPrefix applies the HasPrefix predicate on the "keywords" field.
func KeywordsHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKeywords), v))
	})
}

// KeywordsHasSuffix applies the HasSuffix predicate on the "keywords" field.
func KeywordsHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKeywords), v))
	})
}

// KeywordsIsNil applies the IsNil predicate on the "keywords" field.
func KeywordsIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKeywords)))
	})
}

// KeywordsNotNil applies the NotNil predicate on the "keywords" field.
func KeywordsNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKeywords)))
	})
}

// KeywordsEqualFold applies the EqualFold predicate on the "keywords" field.
func KeywordsEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKeywords), v))
	})
}

// KeywordsContainsFold applies the ContainsFold predicate on the "keywords" field.
func KeywordsContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKeywords), v))
	})
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSource), v))
	})
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSource), v...))
	})
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSource), v...))
	})
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSource), v))
	})
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSource), v))
	})
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSource), v))
	})
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSource), v))
	})
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSource), v))
	})
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSource), v))
	})
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSource), v))
	})
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSource)))
	})
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSource)))
	})
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSource), v))
	})
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSource), v))
	})
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScore), v))
	})
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScore), v...))
	})
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScore), v...))
	})
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScore), v))
	})
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScore), v))
	})
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScore), v))
	})
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScore), v))
	})
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldScore)))
	})
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldScore)))
	})
}

// CoverEQ applies the EQ predicate on the "cover" field.
func CoverEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCover), v))
	})
}

// CoverNEQ applies the NEQ predicate on the "cover" field.
func CoverNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCover), v))
	})
}

// CoverIn applies the In predicate on the "cover" field.
func CoverIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCover), v...))
	})
}

// CoverNotIn applies the NotIn predicate on the "cover" field.
func CoverNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCover), v...))
	})
}

// CoverGT applies the GT predicate on the "cover" field.
func CoverGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCover), v))
	})
}

// CoverGTE applies the GTE predicate on the "cover" field.
func CoverGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCover), v))
	})
}

// CoverLT applies the LT predicate on the "cover" field.
func CoverLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCover), v))
	})
}

// CoverLTE applies the LTE predicate on the "cover" field.
func CoverLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCover), v))
	})
}

// CoverContains applies the Contains predicate on the "cover" field.
func CoverContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCover), v))
	})
}

// CoverHasPrefix applies the HasPrefix predicate on the "cover" field.
func CoverHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCover), v))
	})
}

// CoverHasSuffix applies the HasSuffix predicate on the "cover" field.
func CoverHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCover), v))
	})
}

// CoverIsNil applies the IsNil predicate on the "cover" field.
func CoverIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCover)))
	})
}

// CoverNotNil applies the NotNil predicate on the "cover" field.
func CoverNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCover)))
	})
}

// CoverEqualFold applies the EqualFold predicate on the "cover" field.
func CoverEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCover), v))
	})
}

// CoverContainsFold applies the ContainsFold predicate on the "cover" field.
func CoverContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCover), v))
	})
}

// TagIdsEQ applies the EQ predicate on the "tagIds" field.
func TagIdsEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTagIds), v))
	})
}

// TagIdsNEQ applies the NEQ predicate on the "tagIds" field.
func TagIdsNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTagIds), v))
	})
}

// TagIdsIn applies the In predicate on the "tagIds" field.
func TagIdsIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTagIds), v...))
	})
}

// TagIdsNotIn applies the NotIn predicate on the "tagIds" field.
func TagIdsNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTagIds), v...))
	})
}

// TagIdsGT applies the GT predicate on the "tagIds" field.
func TagIdsGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTagIds), v))
	})
}

// TagIdsGTE applies the GTE predicate on the "tagIds" field.
func TagIdsGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTagIds), v))
	})
}

// TagIdsLT applies the LT predicate on the "tagIds" field.
func TagIdsLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTagIds), v))
	})
}

// TagIdsLTE applies the LTE predicate on the "tagIds" field.
func TagIdsLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTagIds), v))
	})
}

// TagIdsContains applies the Contains predicate on the "tagIds" field.
func TagIdsContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTagIds), v))
	})
}

// TagIdsHasPrefix applies the HasPrefix predicate on the "tagIds" field.
func TagIdsHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTagIds), v))
	})
}

// TagIdsHasSuffix applies the HasSuffix predicate on the "tagIds" field.
func TagIdsHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTagIds), v))
	})
}

// TagIdsIsNil applies the IsNil predicate on the "tagIds" field.
func TagIdsIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTagIds)))
	})
}

// TagIdsNotNil applies the NotNil predicate on the "tagIds" field.
func TagIdsNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTagIds)))
	})
}

// TagIdsEqualFold applies the EqualFold predicate on the "tagIds" field.
func TagIdsEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTagIds), v))
	})
}

// TagIdsContainsFold applies the ContainsFold predicate on the "tagIds" field.
func TagIdsContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTagIds), v))
	})
}

// WordNumEQ applies the EQ predicate on the "wordNum" field.
func WordNumEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWordNum), v))
	})
}

// WordNumNEQ applies the NEQ predicate on the "wordNum" field.
func WordNumNEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWordNum), v))
	})
}

// WordNumIn applies the In predicate on the "wordNum" field.
func WordNumIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWordNum), v...))
	})
}

// WordNumNotIn applies the NotIn predicate on the "wordNum" field.
func WordNumNotIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWordNum), v...))
	})
}

// WordNumGT applies the GT predicate on the "wordNum" field.
func WordNumGT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWordNum), v))
	})
}

// WordNumGTE applies the GTE predicate on the "wordNum" field.
func WordNumGTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWordNum), v))
	})
}

// WordNumLT applies the LT predicate on the "wordNum" field.
func WordNumLT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWordNum), v))
	})
}

// WordNumLTE applies the LTE predicate on the "wordNum" field.
func WordNumLTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWordNum), v))
	})
}

// WordNumIsNil applies the IsNil predicate on the "wordNum" field.
func WordNumIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWordNum)))
	})
}

// WordNumNotNil applies the NotNil predicate on the "wordNum" field.
func WordNumNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWordNum)))
	})
}

// FreeNumEQ applies the EQ predicate on the "freeNum" field.
func FreeNumEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeNum), v))
	})
}

// FreeNumNEQ applies the NEQ predicate on the "freeNum" field.
func FreeNumNEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFreeNum), v))
	})
}

// FreeNumIn applies the In predicate on the "freeNum" field.
func FreeNumIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFreeNum), v...))
	})
}

// FreeNumNotIn applies the NotIn predicate on the "freeNum" field.
func FreeNumNotIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFreeNum), v...))
	})
}

// FreeNumGT applies the GT predicate on the "freeNum" field.
func FreeNumGT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFreeNum), v))
	})
}

// FreeNumGTE applies the GTE predicate on the "freeNum" field.
func FreeNumGTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFreeNum), v))
	})
}

// FreeNumLT applies the LT predicate on the "freeNum" field.
func FreeNumLT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFreeNum), v))
	})
}

// FreeNumLTE applies the LTE predicate on the "freeNum" field.
func FreeNumLTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFreeNum), v))
	})
}

// FreeNumIsNil applies the IsNil predicate on the "freeNum" field.
func FreeNumIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFreeNum)))
	})
}

// FreeNumNotNil applies the NotNil predicate on the "freeNum" field.
func FreeNumNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFreeNum)))
	})
}

// OnlineStateEQ applies the EQ predicate on the "onlineState" field.
func OnlineStateEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnlineState), v))
	})
}

// OnlineStateNEQ applies the NEQ predicate on the "onlineState" field.
func OnlineStateNEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnlineState), v))
	})
}

// OnlineStateIn applies the In predicate on the "onlineState" field.
func OnlineStateIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOnlineState), v...))
	})
}

// OnlineStateNotIn applies the NotIn predicate on the "onlineState" field.
func OnlineStateNotIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOnlineState), v...))
	})
}

// OnlineStateGT applies the GT predicate on the "onlineState" field.
func OnlineStateGT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOnlineState), v))
	})
}

// OnlineStateGTE applies the GTE predicate on the "onlineState" field.
func OnlineStateGTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOnlineState), v))
	})
}

// OnlineStateLT applies the LT predicate on the "onlineState" field.
func OnlineStateLT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOnlineState), v))
	})
}

// OnlineStateLTE applies the LTE predicate on the "onlineState" field.
func OnlineStateLTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOnlineState), v))
	})
}

// OnlineStateIsNil applies the IsNil predicate on the "onlineState" field.
func OnlineStateIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOnlineState)))
	})
}

// OnlineStateNotNil applies the NotNil predicate on the "onlineState" field.
func OnlineStateNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOnlineState)))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrice)))
	})
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrice)))
	})
}

// PublishEQ applies the EQ predicate on the "publish" field.
func PublishEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublish), v))
	})
}

// PublishNEQ applies the NEQ predicate on the "publish" field.
func PublishNEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublish), v))
	})
}

// PublishIn applies the In predicate on the "publish" field.
func PublishIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublish), v...))
	})
}

// PublishNotIn applies the NotIn predicate on the "publish" field.
func PublishNotIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublish), v...))
	})
}

// PublishGT applies the GT predicate on the "publish" field.
func PublishGT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublish), v))
	})
}

// PublishGTE applies the GTE predicate on the "publish" field.
func PublishGTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublish), v))
	})
}

// PublishLT applies the LT predicate on the "publish" field.
func PublishLT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublish), v))
	})
}

// PublishLTE applies the LTE predicate on the "publish" field.
func PublishLTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublish), v))
	})
}

// PublishIsNil applies the IsNil predicate on the "publish" field.
func PublishIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPublish)))
	})
}

// PublishNotNil applies the NotNil predicate on the "publish" field.
func PublishNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPublish)))
	})
}

// OriginalPriceEQ applies the EQ predicate on the "originalPrice" field.
func OriginalPriceEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceNEQ applies the NEQ predicate on the "originalPrice" field.
func OriginalPriceNEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceIn applies the In predicate on the "originalPrice" field.
func OriginalPriceIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginalPrice), v...))
	})
}

// OriginalPriceNotIn applies the NotIn predicate on the "originalPrice" field.
func OriginalPriceNotIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginalPrice), v...))
	})
}

// OriginalPriceGT applies the GT predicate on the "originalPrice" field.
func OriginalPriceGT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceGTE applies the GTE predicate on the "originalPrice" field.
func OriginalPriceGTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceLT applies the LT predicate on the "originalPrice" field.
func OriginalPriceLT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceLTE applies the LTE predicate on the "originalPrice" field.
func OriginalPriceLTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginalPrice), v))
	})
}

// OriginalPriceIsNil applies the IsNil predicate on the "originalPrice" field.
func OriginalPriceIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOriginalPrice)))
	})
}

// OriginalPriceNotNil applies the NotNil predicate on the "originalPrice" field.
func OriginalPriceNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOriginalPrice)))
	})
}

// ChapterPriceEQ applies the EQ predicate on the "chapterPrice" field.
func ChapterPriceEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterPrice), v))
	})
}

// ChapterPriceNEQ applies the NEQ predicate on the "chapterPrice" field.
func ChapterPriceNEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterPrice), v))
	})
}

// ChapterPriceIn applies the In predicate on the "chapterPrice" field.
func ChapterPriceIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterPrice), v...))
	})
}

// ChapterPriceNotIn applies the NotIn predicate on the "chapterPrice" field.
func ChapterPriceNotIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterPrice), v...))
	})
}

// ChapterPriceGT applies the GT predicate on the "chapterPrice" field.
func ChapterPriceGT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterPrice), v))
	})
}

// ChapterPriceGTE applies the GTE predicate on the "chapterPrice" field.
func ChapterPriceGTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterPrice), v))
	})
}

// ChapterPriceLT applies the LT predicate on the "chapterPrice" field.
func ChapterPriceLT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterPrice), v))
	})
}

// ChapterPriceLTE applies the LTE predicate on the "chapterPrice" field.
func ChapterPriceLTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterPrice), v))
	})
}

// ChapterPriceIsNil applies the IsNil predicate on the "chapterPrice" field.
func ChapterPriceIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterPrice)))
	})
}

// ChapterPriceNotNil applies the NotNil predicate on the "chapterPrice" field.
func ChapterPriceNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterPrice)))
	})
}

// ChapterCountEQ applies the EQ predicate on the "chapterCount" field.
func ChapterCountEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterCount), v))
	})
}

// ChapterCountNEQ applies the NEQ predicate on the "chapterCount" field.
func ChapterCountNEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterCount), v))
	})
}

// ChapterCountIn applies the In predicate on the "chapterCount" field.
func ChapterCountIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterCount), v...))
	})
}

// ChapterCountNotIn applies the NotIn predicate on the "chapterCount" field.
func ChapterCountNotIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterCount), v...))
	})
}

// ChapterCountGT applies the GT predicate on the "chapterCount" field.
func ChapterCountGT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterCount), v))
	})
}

// ChapterCountGTE applies the GTE predicate on the "chapterCount" field.
func ChapterCountGTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterCount), v))
	})
}

// ChapterCountLT applies the LT predicate on the "chapterCount" field.
func ChapterCountLT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterCount), v))
	})
}

// ChapterCountLTE applies the LTE predicate on the "chapterCount" field.
func ChapterCountLTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterCount), v))
	})
}

// ChapterCountIsNil applies the IsNil predicate on the "chapterCount" field.
func ChapterCountIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterCount)))
	})
}

// ChapterCountNotNil applies the NotNil predicate on the "chapterCount" field.
func ChapterCountNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterCount)))
	})
}

// SignTypeEQ applies the EQ predicate on the "signType" field.
func SignTypeEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignType), v))
	})
}

// SignTypeNEQ applies the NEQ predicate on the "signType" field.
func SignTypeNEQ(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSignType), v))
	})
}

// SignTypeIn applies the In predicate on the "signType" field.
func SignTypeIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSignType), v...))
	})
}

// SignTypeNotIn applies the NotIn predicate on the "signType" field.
func SignTypeNotIn(vs ...int32) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSignType), v...))
	})
}

// SignTypeGT applies the GT predicate on the "signType" field.
func SignTypeGT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSignType), v))
	})
}

// SignTypeGTE applies the GTE predicate on the "signType" field.
func SignTypeGTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSignType), v))
	})
}

// SignTypeLT applies the LT predicate on the "signType" field.
func SignTypeLT(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSignType), v))
	})
}

// SignTypeLTE applies the LTE predicate on the "signType" field.
func SignTypeLTE(v int32) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSignType), v))
	})
}

// SignTypeIsNil applies the IsNil predicate on the "signType" field.
func SignTypeIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSignType)))
	})
}

// SignTypeNotNil applies the NotNil predicate on the "signType" field.
func SignTypeNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSignType)))
	})
}

// SignDateEQ applies the EQ predicate on the "signDate" field.
func SignDateEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignDate), v))
	})
}

// SignDateNEQ applies the NEQ predicate on the "signDate" field.
func SignDateNEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSignDate), v))
	})
}

// SignDateIn applies the In predicate on the "signDate" field.
func SignDateIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSignDate), v...))
	})
}

// SignDateNotIn applies the NotIn predicate on the "signDate" field.
func SignDateNotIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSignDate), v...))
	})
}

// SignDateGT applies the GT predicate on the "signDate" field.
func SignDateGT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSignDate), v))
	})
}

// SignDateGTE applies the GTE predicate on the "signDate" field.
func SignDateGTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSignDate), v))
	})
}

// SignDateLT applies the LT predicate on the "signDate" field.
func SignDateLT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSignDate), v))
	})
}

// SignDateLTE applies the LTE predicate on the "signDate" field.
func SignDateLTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSignDate), v))
	})
}

// SignDateIsNil applies the IsNil predicate on the "signDate" field.
func SignDateIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSignDate)))
	})
}

// SignDateNotNil applies the NotNil predicate on the "signDate" field.
func SignDateNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSignDate)))
	})
}

// LeadingManEQ applies the EQ predicate on the "leadingMan" field.
func LeadingManEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeadingMan), v))
	})
}

// LeadingManNEQ applies the NEQ predicate on the "leadingMan" field.
func LeadingManNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeadingMan), v))
	})
}

// LeadingManIn applies the In predicate on the "leadingMan" field.
func LeadingManIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLeadingMan), v...))
	})
}

// LeadingManNotIn applies the NotIn predicate on the "leadingMan" field.
func LeadingManNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLeadingMan), v...))
	})
}

// LeadingManGT applies the GT predicate on the "leadingMan" field.
func LeadingManGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeadingMan), v))
	})
}

// LeadingManGTE applies the GTE predicate on the "leadingMan" field.
func LeadingManGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeadingMan), v))
	})
}

// LeadingManLT applies the LT predicate on the "leadingMan" field.
func LeadingManLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeadingMan), v))
	})
}

// LeadingManLTE applies the LTE predicate on the "leadingMan" field.
func LeadingManLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeadingMan), v))
	})
}

// LeadingManContains applies the Contains predicate on the "leadingMan" field.
func LeadingManContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLeadingMan), v))
	})
}

// LeadingManHasPrefix applies the HasPrefix predicate on the "leadingMan" field.
func LeadingManHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLeadingMan), v))
	})
}

// LeadingManHasSuffix applies the HasSuffix predicate on the "leadingMan" field.
func LeadingManHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLeadingMan), v))
	})
}

// LeadingManIsNil applies the IsNil predicate on the "leadingMan" field.
func LeadingManIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLeadingMan)))
	})
}

// LeadingManNotNil applies the NotNil predicate on the "leadingMan" field.
func LeadingManNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLeadingMan)))
	})
}

// LeadingManEqualFold applies the EqualFold predicate on the "leadingMan" field.
func LeadingManEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLeadingMan), v))
	})
}

// LeadingManContainsFold applies the ContainsFold predicate on the "leadingMan" field.
func LeadingManContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLeadingMan), v))
	})
}

// LeadingLadyEQ applies the EQ predicate on the "leadingLady" field.
func LeadingLadyEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyNEQ applies the NEQ predicate on the "leadingLady" field.
func LeadingLadyNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyIn applies the In predicate on the "leadingLady" field.
func LeadingLadyIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLeadingLady), v...))
	})
}

// LeadingLadyNotIn applies the NotIn predicate on the "leadingLady" field.
func LeadingLadyNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLeadingLady), v...))
	})
}

// LeadingLadyGT applies the GT predicate on the "leadingLady" field.
func LeadingLadyGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyGTE applies the GTE predicate on the "leadingLady" field.
func LeadingLadyGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyLT applies the LT predicate on the "leadingLady" field.
func LeadingLadyLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyLTE applies the LTE predicate on the "leadingLady" field.
func LeadingLadyLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyContains applies the Contains predicate on the "leadingLady" field.
func LeadingLadyContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyHasPrefix applies the HasPrefix predicate on the "leadingLady" field.
func LeadingLadyHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyHasSuffix applies the HasSuffix predicate on the "leadingLady" field.
func LeadingLadyHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyIsNil applies the IsNil predicate on the "leadingLady" field.
func LeadingLadyIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLeadingLady)))
	})
}

// LeadingLadyNotNil applies the NotNil predicate on the "leadingLady" field.
func LeadingLadyNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLeadingLady)))
	})
}

// LeadingLadyEqualFold applies the EqualFold predicate on the "leadingLady" field.
func LeadingLadyEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLeadingLady), v))
	})
}

// LeadingLadyContainsFold applies the ContainsFold predicate on the "leadingLady" field.
func LeadingLadyContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLeadingLady), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// MediaKeyEQ applies the EQ predicate on the "mediaKey" field.
func MediaKeyEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaKey), v))
	})
}

// MediaKeyNEQ applies the NEQ predicate on the "mediaKey" field.
func MediaKeyNEQ(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediaKey), v))
	})
}

// MediaKeyIn applies the In predicate on the "mediaKey" field.
func MediaKeyIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMediaKey), v...))
	})
}

// MediaKeyNotIn applies the NotIn predicate on the "mediaKey" field.
func MediaKeyNotIn(vs ...string) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMediaKey), v...))
	})
}

// MediaKeyGT applies the GT predicate on the "mediaKey" field.
func MediaKeyGT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMediaKey), v))
	})
}

// MediaKeyGTE applies the GTE predicate on the "mediaKey" field.
func MediaKeyGTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMediaKey), v))
	})
}

// MediaKeyLT applies the LT predicate on the "mediaKey" field.
func MediaKeyLT(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMediaKey), v))
	})
}

// MediaKeyLTE applies the LTE predicate on the "mediaKey" field.
func MediaKeyLTE(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMediaKey), v))
	})
}

// MediaKeyContains applies the Contains predicate on the "mediaKey" field.
func MediaKeyContains(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMediaKey), v))
	})
}

// MediaKeyHasPrefix applies the HasPrefix predicate on the "mediaKey" field.
func MediaKeyHasPrefix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMediaKey), v))
	})
}

// MediaKeyHasSuffix applies the HasSuffix predicate on the "mediaKey" field.
func MediaKeyHasSuffix(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMediaKey), v))
	})
}

// MediaKeyIsNil applies the IsNil predicate on the "mediaKey" field.
func MediaKeyIsNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaKey)))
	})
}

// MediaKeyNotNil applies the NotNil predicate on the "mediaKey" field.
func MediaKeyNotNil() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaKey)))
	})
}

// MediaKeyEqualFold applies the EqualFold predicate on the "mediaKey" field.
func MediaKeyEqualFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMediaKey), v))
	})
}

// MediaKeyContainsFold applies the ContainsFold predicate on the "mediaKey" field.
func MediaKeyContainsFold(v string) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMediaKey), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Novel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Novel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasChapters applies the HasEdge predicate on the "chapters" edge.
func HasChapters() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChaptersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChaptersWith applies the HasEdge predicate on the "chapters" edge with a given conditions (other predicates).
func HasChaptersWith(preds ...predicate.NovelChapter) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChaptersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaptersTable, ChaptersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPkgs applies the HasEdge predicate on the "pkgs" edge.
func HasPkgs() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PkgsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PkgsTable, PkgsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPkgsWith applies the HasEdge predicate on the "pkgs" edge with a given conditions (other predicates).
func HasPkgsWith(preds ...predicate.BookPackage) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PkgsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PkgsTable, PkgsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClassify applies the HasEdge predicate on the "classify" edge.
func HasClassify() predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassifyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassifyTable, ClassifyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassifyWith applies the HasEdge predicate on the "classify" edge with a given conditions (other predicates).
func HasClassifyWith(preds ...predicate.NovelClassify) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassifyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassifyTable, ClassifyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Novel) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Novel) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Novel) predicate.Novel {
	return predicate.Novel(func(s *sql.Selector) {
		p(s.Not())
	})
}
