// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/customernovels"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CustomerNovels is the model entity for the CustomerNovels schema.
type CustomerNovels struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// NovelId holds the value of the "novelId" field.
	// 小说编码
	NovelId int64 `json:"novelId,omitempty"`
	// TypeId holds the value of the "typeId" field.
	// 类型编号,见参数表sys_dic_data,dicType=customer_type,dic_sort值
	TypeId int32 `json:"typeId,omitempty"`
	// TypeCode holds the value of the "typeCode" field.
	// 类型编码,见参数表sys_dic_data,dicType=customer_type,dic_type值
	TypeCode string `json:"typeCode,omitempty"`
	// GroupCode holds the value of the "groupCode" field.
	// 分组编码
	GroupCode string `json:"groupCode,omitempty"`
	// FieldName holds the value of the "fieldName" field.
	// 字段
	FieldName string `json:"fieldName,omitempty"`
	// Cover holds the value of the "cover" field.
	// 封面,无值使用小说封面
	Cover string `json:"cover,omitempty"`
	// OrderNum holds the value of the "orderNum" field.
	// 排序字段,值越大,越靠前
	OrderNum int32 `json:"orderNum,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// EffectTime holds the value of the "effectTime" field.
	// 生效时间
	EffectTime time.Time `json:"effectTime,omitempty"`
	// ExpiredTime holds the value of the "expiredTime" field.
	// 失效时间
	ExpiredTime time.Time `json:"expiredTime,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerNovels) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case customernovels.FieldID, customernovels.FieldNovelId, customernovels.FieldTypeId, customernovels.FieldOrderNum, customernovels.FieldCreateBy, customernovels.FieldUpdateBy, customernovels.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case customernovels.FieldTypeCode, customernovels.FieldGroupCode, customernovels.FieldFieldName, customernovels.FieldCover, customernovels.FieldRemark:
			values[i] = new(sql.NullString)
		case customernovels.FieldEffectTime, customernovels.FieldExpiredTime, customernovels.FieldCreatedAt, customernovels.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CustomerNovels", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerNovels fields.
func (cn *CustomerNovels) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customernovels.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cn.ID = int64(value.Int64)
		case customernovels.FieldNovelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field novelId", values[i])
			} else if value.Valid {
				cn.NovelId = value.Int64
			}
		case customernovels.FieldTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field typeId", values[i])
			} else if value.Valid {
				cn.TypeId = int32(value.Int64)
			}
		case customernovels.FieldTypeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field typeCode", values[i])
			} else if value.Valid {
				cn.TypeCode = value.String
			}
		case customernovels.FieldGroupCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field groupCode", values[i])
			} else if value.Valid {
				cn.GroupCode = value.String
			}
		case customernovels.FieldFieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fieldName", values[i])
			} else if value.Valid {
				cn.FieldName = value.String
			}
		case customernovels.FieldCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover", values[i])
			} else if value.Valid {
				cn.Cover = value.String
			}
		case customernovels.FieldOrderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field orderNum", values[i])
			} else if value.Valid {
				cn.OrderNum = int32(value.Int64)
			}
		case customernovels.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				cn.Remark = value.String
			}
		case customernovels.FieldEffectTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effectTime", values[i])
			} else if value.Valid {
				cn.EffectTime = value.Time
			}
		case customernovels.FieldExpiredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiredTime", values[i])
			} else if value.Valid {
				cn.ExpiredTime = value.Time
			}
		case customernovels.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cn.CreatedAt = value.Time
			}
		case customernovels.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cn.UpdatedAt = value.Time
			}
		case customernovels.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				cn.CreateBy = value.Int64
			}
		case customernovels.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				cn.UpdateBy = value.Int64
			}
		case customernovels.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cn.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CustomerNovels.
// Note that you need to call CustomerNovels.Unwrap() before calling this method if this CustomerNovels
// was returned from a transaction, and the transaction was committed or rolled back.
func (cn *CustomerNovels) Update() *CustomerNovelsUpdateOne {
	return (&CustomerNovelsClient{config: cn.config}).UpdateOne(cn)
}

// Unwrap unwraps the CustomerNovels entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cn *CustomerNovels) Unwrap() *CustomerNovels {
	tx, ok := cn.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerNovels is not a transactional entity")
	}
	cn.config.driver = tx.drv
	return cn
}

// String implements the fmt.Stringer.
func (cn *CustomerNovels) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerNovels(")
	builder.WriteString(fmt.Sprintf("id=%v", cn.ID))
	builder.WriteString(", novelId=")
	builder.WriteString(fmt.Sprintf("%v", cn.NovelId))
	builder.WriteString(", typeId=")
	builder.WriteString(fmt.Sprintf("%v", cn.TypeId))
	builder.WriteString(", typeCode=")
	builder.WriteString(cn.TypeCode)
	builder.WriteString(", groupCode=")
	builder.WriteString(cn.GroupCode)
	builder.WriteString(", fieldName=")
	builder.WriteString(cn.FieldName)
	builder.WriteString(", cover=")
	builder.WriteString(cn.Cover)
	builder.WriteString(", orderNum=")
	builder.WriteString(fmt.Sprintf("%v", cn.OrderNum))
	builder.WriteString(", remark=")
	builder.WriteString(cn.Remark)
	builder.WriteString(", effectTime=")
	builder.WriteString(cn.EffectTime.Format(time.ANSIC))
	builder.WriteString(", expiredTime=")
	builder.WriteString(cn.ExpiredTime.Format(time.ANSIC))
	builder.WriteString(", createdAt=")
	builder.WriteString(cn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(cn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", cn.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", cn.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cn.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// CustomerNovelsSlice is a parsable slice of CustomerNovels.
type CustomerNovelsSlice []*CustomerNovels

func (cn CustomerNovelsSlice) config(cfg config) {
	for _i := range cn {
		cn[_i].config = cfg
	}
}
