// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/customernovelconfig"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerNovelConfigUpdate is the builder for updating CustomerNovelConfig entities.
type CustomerNovelConfigUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerNovelConfigMutation
}

// Where appends a list predicates to the CustomerNovelConfigUpdate builder.
func (cncu *CustomerNovelConfigUpdate) Where(ps ...predicate.CustomerNovelConfig) *CustomerNovelConfigUpdate {
	cncu.mutation.Where(ps...)
	return cncu
}

// SetGroupCode sets the "groupCode" field.
func (cncu *CustomerNovelConfigUpdate) SetGroupCode(s string) *CustomerNovelConfigUpdate {
	cncu.mutation.SetGroupCode(s)
	return cncu
}

// SetNillableGroupCode sets the "groupCode" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableGroupCode(s *string) *CustomerNovelConfigUpdate {
	if s != nil {
		cncu.SetGroupCode(*s)
	}
	return cncu
}

// ClearGroupCode clears the value of the "groupCode" field.
func (cncu *CustomerNovelConfigUpdate) ClearGroupCode() *CustomerNovelConfigUpdate {
	cncu.mutation.ClearGroupCode()
	return cncu
}

// SetInnerGroupCode sets the "innerGroupCode" field.
func (cncu *CustomerNovelConfigUpdate) SetInnerGroupCode(s string) *CustomerNovelConfigUpdate {
	cncu.mutation.SetInnerGroupCode(s)
	return cncu
}

// SetNillableInnerGroupCode sets the "innerGroupCode" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableInnerGroupCode(s *string) *CustomerNovelConfigUpdate {
	if s != nil {
		cncu.SetInnerGroupCode(*s)
	}
	return cncu
}

// ClearInnerGroupCode clears the value of the "innerGroupCode" field.
func (cncu *CustomerNovelConfigUpdate) ClearInnerGroupCode() *CustomerNovelConfigUpdate {
	cncu.mutation.ClearInnerGroupCode()
	return cncu
}

// SetGroupName sets the "groupName" field.
func (cncu *CustomerNovelConfigUpdate) SetGroupName(s string) *CustomerNovelConfigUpdate {
	cncu.mutation.SetGroupName(s)
	return cncu
}

// SetNillableGroupName sets the "groupName" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableGroupName(s *string) *CustomerNovelConfigUpdate {
	if s != nil {
		cncu.SetGroupName(*s)
	}
	return cncu
}

// ClearGroupName clears the value of the "groupName" field.
func (cncu *CustomerNovelConfigUpdate) ClearGroupName() *CustomerNovelConfigUpdate {
	cncu.mutation.ClearGroupName()
	return cncu
}

// SetTypeId sets the "typeId" field.
func (cncu *CustomerNovelConfigUpdate) SetTypeId(i int32) *CustomerNovelConfigUpdate {
	cncu.mutation.ResetTypeId()
	cncu.mutation.SetTypeId(i)
	return cncu
}

// SetNillableTypeId sets the "typeId" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableTypeId(i *int32) *CustomerNovelConfigUpdate {
	if i != nil {
		cncu.SetTypeId(*i)
	}
	return cncu
}

// AddTypeId adds i to the "typeId" field.
func (cncu *CustomerNovelConfigUpdate) AddTypeId(i int32) *CustomerNovelConfigUpdate {
	cncu.mutation.AddTypeId(i)
	return cncu
}

// ClearTypeId clears the value of the "typeId" field.
func (cncu *CustomerNovelConfigUpdate) ClearTypeId() *CustomerNovelConfigUpdate {
	cncu.mutation.ClearTypeId()
	return cncu
}

// SetTypeCode sets the "TypeCode" field.
func (cncu *CustomerNovelConfigUpdate) SetTypeCode(s string) *CustomerNovelConfigUpdate {
	cncu.mutation.SetTypeCode(s)
	return cncu
}

// SetNillableTypeCode sets the "TypeCode" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableTypeCode(s *string) *CustomerNovelConfigUpdate {
	if s != nil {
		cncu.SetTypeCode(*s)
	}
	return cncu
}

// ClearTypeCode clears the value of the "TypeCode" field.
func (cncu *CustomerNovelConfigUpdate) ClearTypeCode() *CustomerNovelConfigUpdate {
	cncu.mutation.ClearTypeCode()
	return cncu
}

// SetTypeName sets the "typeName" field.
func (cncu *CustomerNovelConfigUpdate) SetTypeName(s string) *CustomerNovelConfigUpdate {
	cncu.mutation.SetTypeName(s)
	return cncu
}

// SetNillableTypeName sets the "typeName" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableTypeName(s *string) *CustomerNovelConfigUpdate {
	if s != nil {
		cncu.SetTypeName(*s)
	}
	return cncu
}

// ClearTypeName clears the value of the "typeName" field.
func (cncu *CustomerNovelConfigUpdate) ClearTypeName() *CustomerNovelConfigUpdate {
	cncu.mutation.ClearTypeName()
	return cncu
}

// SetFieldName sets the "fieldName" field.
func (cncu *CustomerNovelConfigUpdate) SetFieldName(s string) *CustomerNovelConfigUpdate {
	cncu.mutation.SetFieldName(s)
	return cncu
}

// SetNillableFieldName sets the "fieldName" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableFieldName(s *string) *CustomerNovelConfigUpdate {
	if s != nil {
		cncu.SetFieldName(*s)
	}
	return cncu
}

// ClearFieldName clears the value of the "fieldName" field.
func (cncu *CustomerNovelConfigUpdate) ClearFieldName() *CustomerNovelConfigUpdate {
	cncu.mutation.ClearFieldName()
	return cncu
}

// SetDefaultNum sets the "defaultNum" field.
func (cncu *CustomerNovelConfigUpdate) SetDefaultNum(i int32) *CustomerNovelConfigUpdate {
	cncu.mutation.ResetDefaultNum()
	cncu.mutation.SetDefaultNum(i)
	return cncu
}

// SetNillableDefaultNum sets the "defaultNum" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableDefaultNum(i *int32) *CustomerNovelConfigUpdate {
	if i != nil {
		cncu.SetDefaultNum(*i)
	}
	return cncu
}

// AddDefaultNum adds i to the "defaultNum" field.
func (cncu *CustomerNovelConfigUpdate) AddDefaultNum(i int32) *CustomerNovelConfigUpdate {
	cncu.mutation.AddDefaultNum(i)
	return cncu
}

// ClearDefaultNum clears the value of the "defaultNum" field.
func (cncu *CustomerNovelConfigUpdate) ClearDefaultNum() *CustomerNovelConfigUpdate {
	cncu.mutation.ClearDefaultNum()
	return cncu
}

// SetState sets the "state" field.
func (cncu *CustomerNovelConfigUpdate) SetState(b bool) *CustomerNovelConfigUpdate {
	cncu.mutation.SetState(b)
	return cncu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableState(b *bool) *CustomerNovelConfigUpdate {
	if b != nil {
		cncu.SetState(*b)
	}
	return cncu
}

// ClearState clears the value of the "state" field.
func (cncu *CustomerNovelConfigUpdate) ClearState() *CustomerNovelConfigUpdate {
	cncu.mutation.ClearState()
	return cncu
}

// SetUpdatedAt sets the "updatedAt" field.
func (cncu *CustomerNovelConfigUpdate) SetUpdatedAt(t time.Time) *CustomerNovelConfigUpdate {
	cncu.mutation.SetUpdatedAt(t)
	return cncu
}

// SetCreateBy sets the "createBy" field.
func (cncu *CustomerNovelConfigUpdate) SetCreateBy(i int64) *CustomerNovelConfigUpdate {
	cncu.mutation.ResetCreateBy()
	cncu.mutation.SetCreateBy(i)
	return cncu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableCreateBy(i *int64) *CustomerNovelConfigUpdate {
	if i != nil {
		cncu.SetCreateBy(*i)
	}
	return cncu
}

// AddCreateBy adds i to the "createBy" field.
func (cncu *CustomerNovelConfigUpdate) AddCreateBy(i int64) *CustomerNovelConfigUpdate {
	cncu.mutation.AddCreateBy(i)
	return cncu
}

// SetUpdateBy sets the "updateBy" field.
func (cncu *CustomerNovelConfigUpdate) SetUpdateBy(i int64) *CustomerNovelConfigUpdate {
	cncu.mutation.ResetUpdateBy()
	cncu.mutation.SetUpdateBy(i)
	return cncu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableUpdateBy(i *int64) *CustomerNovelConfigUpdate {
	if i != nil {
		cncu.SetUpdateBy(*i)
	}
	return cncu
}

// AddUpdateBy adds i to the "updateBy" field.
func (cncu *CustomerNovelConfigUpdate) AddUpdateBy(i int64) *CustomerNovelConfigUpdate {
	cncu.mutation.AddUpdateBy(i)
	return cncu
}

// SetTenantId sets the "tenantId" field.
func (cncu *CustomerNovelConfigUpdate) SetTenantId(i int64) *CustomerNovelConfigUpdate {
	cncu.mutation.ResetTenantId()
	cncu.mutation.SetTenantId(i)
	return cncu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (cncu *CustomerNovelConfigUpdate) SetNillableTenantId(i *int64) *CustomerNovelConfigUpdate {
	if i != nil {
		cncu.SetTenantId(*i)
	}
	return cncu
}

// AddTenantId adds i to the "tenantId" field.
func (cncu *CustomerNovelConfigUpdate) AddTenantId(i int64) *CustomerNovelConfigUpdate {
	cncu.mutation.AddTenantId(i)
	return cncu
}

// Mutation returns the CustomerNovelConfigMutation object of the builder.
func (cncu *CustomerNovelConfigUpdate) Mutation() *CustomerNovelConfigMutation {
	return cncu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cncu *CustomerNovelConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cncu.defaults()
	if len(cncu.hooks) == 0 {
		affected, err = cncu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerNovelConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cncu.mutation = mutation
			affected, err = cncu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cncu.hooks) - 1; i >= 0; i-- {
			if cncu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cncu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cncu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cncu *CustomerNovelConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := cncu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cncu *CustomerNovelConfigUpdate) Exec(ctx context.Context) error {
	_, err := cncu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cncu *CustomerNovelConfigUpdate) ExecX(ctx context.Context) {
	if err := cncu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cncu *CustomerNovelConfigUpdate) defaults() {
	if _, ok := cncu.mutation.UpdatedAt(); !ok {
		v := customernovelconfig.UpdateDefaultUpdatedAt()
		cncu.mutation.SetUpdatedAt(v)
	}
}

func (cncu *CustomerNovelConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customernovelconfig.Table,
			Columns: customernovelconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: customernovelconfig.FieldID,
			},
		},
	}
	if ps := cncu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cncu.mutation.GroupCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldGroupCode,
		})
	}
	if cncu.mutation.GroupCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldGroupCode,
		})
	}
	if value, ok := cncu.mutation.InnerGroupCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldInnerGroupCode,
		})
	}
	if cncu.mutation.InnerGroupCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldInnerGroupCode,
		})
	}
	if value, ok := cncu.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldGroupName,
		})
	}
	if cncu.mutation.GroupNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldGroupName,
		})
	}
	if value, ok := cncu.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldTypeId,
		})
	}
	if value, ok := cncu.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldTypeId,
		})
	}
	if cncu.mutation.TypeIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: customernovelconfig.FieldTypeId,
		})
	}
	if value, ok := cncu.mutation.TypeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldTypeCode,
		})
	}
	if cncu.mutation.TypeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldTypeCode,
		})
	}
	if value, ok := cncu.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldTypeName,
		})
	}
	if cncu.mutation.TypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldTypeName,
		})
	}
	if value, ok := cncu.mutation.FieldName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldFieldName,
		})
	}
	if cncu.mutation.FieldNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldFieldName,
		})
	}
	if value, ok := cncu.mutation.DefaultNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldDefaultNum,
		})
	}
	if value, ok := cncu.mutation.AddedDefaultNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldDefaultNum,
		})
	}
	if cncu.mutation.DefaultNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: customernovelconfig.FieldDefaultNum,
		})
	}
	if value, ok := cncu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customernovelconfig.FieldState,
		})
	}
	if cncu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: customernovelconfig.FieldState,
		})
	}
	if value, ok := cncu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customernovelconfig.FieldUpdatedAt,
		})
	}
	if value, ok := cncu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldCreateBy,
		})
	}
	if value, ok := cncu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldCreateBy,
		})
	}
	if value, ok := cncu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldUpdateBy,
		})
	}
	if value, ok := cncu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldUpdateBy,
		})
	}
	if value, ok := cncu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldTenantId,
		})
	}
	if value, ok := cncu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cncu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customernovelconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CustomerNovelConfigUpdateOne is the builder for updating a single CustomerNovelConfig entity.
type CustomerNovelConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerNovelConfigMutation
}

// SetGroupCode sets the "groupCode" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetGroupCode(s string) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.SetGroupCode(s)
	return cncuo
}

// SetNillableGroupCode sets the "groupCode" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableGroupCode(s *string) *CustomerNovelConfigUpdateOne {
	if s != nil {
		cncuo.SetGroupCode(*s)
	}
	return cncuo
}

// ClearGroupCode clears the value of the "groupCode" field.
func (cncuo *CustomerNovelConfigUpdateOne) ClearGroupCode() *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ClearGroupCode()
	return cncuo
}

// SetInnerGroupCode sets the "innerGroupCode" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetInnerGroupCode(s string) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.SetInnerGroupCode(s)
	return cncuo
}

// SetNillableInnerGroupCode sets the "innerGroupCode" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableInnerGroupCode(s *string) *CustomerNovelConfigUpdateOne {
	if s != nil {
		cncuo.SetInnerGroupCode(*s)
	}
	return cncuo
}

// ClearInnerGroupCode clears the value of the "innerGroupCode" field.
func (cncuo *CustomerNovelConfigUpdateOne) ClearInnerGroupCode() *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ClearInnerGroupCode()
	return cncuo
}

// SetGroupName sets the "groupName" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetGroupName(s string) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.SetGroupName(s)
	return cncuo
}

// SetNillableGroupName sets the "groupName" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableGroupName(s *string) *CustomerNovelConfigUpdateOne {
	if s != nil {
		cncuo.SetGroupName(*s)
	}
	return cncuo
}

// ClearGroupName clears the value of the "groupName" field.
func (cncuo *CustomerNovelConfigUpdateOne) ClearGroupName() *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ClearGroupName()
	return cncuo
}

// SetTypeId sets the "typeId" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetTypeId(i int32) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ResetTypeId()
	cncuo.mutation.SetTypeId(i)
	return cncuo
}

// SetNillableTypeId sets the "typeId" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableTypeId(i *int32) *CustomerNovelConfigUpdateOne {
	if i != nil {
		cncuo.SetTypeId(*i)
	}
	return cncuo
}

// AddTypeId adds i to the "typeId" field.
func (cncuo *CustomerNovelConfigUpdateOne) AddTypeId(i int32) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.AddTypeId(i)
	return cncuo
}

// ClearTypeId clears the value of the "typeId" field.
func (cncuo *CustomerNovelConfigUpdateOne) ClearTypeId() *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ClearTypeId()
	return cncuo
}

// SetTypeCode sets the "TypeCode" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetTypeCode(s string) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.SetTypeCode(s)
	return cncuo
}

// SetNillableTypeCode sets the "TypeCode" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableTypeCode(s *string) *CustomerNovelConfigUpdateOne {
	if s != nil {
		cncuo.SetTypeCode(*s)
	}
	return cncuo
}

// ClearTypeCode clears the value of the "TypeCode" field.
func (cncuo *CustomerNovelConfigUpdateOne) ClearTypeCode() *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ClearTypeCode()
	return cncuo
}

// SetTypeName sets the "typeName" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetTypeName(s string) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.SetTypeName(s)
	return cncuo
}

// SetNillableTypeName sets the "typeName" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableTypeName(s *string) *CustomerNovelConfigUpdateOne {
	if s != nil {
		cncuo.SetTypeName(*s)
	}
	return cncuo
}

// ClearTypeName clears the value of the "typeName" field.
func (cncuo *CustomerNovelConfigUpdateOne) ClearTypeName() *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ClearTypeName()
	return cncuo
}

// SetFieldName sets the "fieldName" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetFieldName(s string) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.SetFieldName(s)
	return cncuo
}

// SetNillableFieldName sets the "fieldName" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableFieldName(s *string) *CustomerNovelConfigUpdateOne {
	if s != nil {
		cncuo.SetFieldName(*s)
	}
	return cncuo
}

// ClearFieldName clears the value of the "fieldName" field.
func (cncuo *CustomerNovelConfigUpdateOne) ClearFieldName() *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ClearFieldName()
	return cncuo
}

// SetDefaultNum sets the "defaultNum" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetDefaultNum(i int32) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ResetDefaultNum()
	cncuo.mutation.SetDefaultNum(i)
	return cncuo
}

// SetNillableDefaultNum sets the "defaultNum" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableDefaultNum(i *int32) *CustomerNovelConfigUpdateOne {
	if i != nil {
		cncuo.SetDefaultNum(*i)
	}
	return cncuo
}

// AddDefaultNum adds i to the "defaultNum" field.
func (cncuo *CustomerNovelConfigUpdateOne) AddDefaultNum(i int32) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.AddDefaultNum(i)
	return cncuo
}

// ClearDefaultNum clears the value of the "defaultNum" field.
func (cncuo *CustomerNovelConfigUpdateOne) ClearDefaultNum() *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ClearDefaultNum()
	return cncuo
}

// SetState sets the "state" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetState(b bool) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.SetState(b)
	return cncuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableState(b *bool) *CustomerNovelConfigUpdateOne {
	if b != nil {
		cncuo.SetState(*b)
	}
	return cncuo
}

// ClearState clears the value of the "state" field.
func (cncuo *CustomerNovelConfigUpdateOne) ClearState() *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ClearState()
	return cncuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetUpdatedAt(t time.Time) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.SetUpdatedAt(t)
	return cncuo
}

// SetCreateBy sets the "createBy" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetCreateBy(i int64) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ResetCreateBy()
	cncuo.mutation.SetCreateBy(i)
	return cncuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableCreateBy(i *int64) *CustomerNovelConfigUpdateOne {
	if i != nil {
		cncuo.SetCreateBy(*i)
	}
	return cncuo
}

// AddCreateBy adds i to the "createBy" field.
func (cncuo *CustomerNovelConfigUpdateOne) AddCreateBy(i int64) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.AddCreateBy(i)
	return cncuo
}

// SetUpdateBy sets the "updateBy" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetUpdateBy(i int64) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ResetUpdateBy()
	cncuo.mutation.SetUpdateBy(i)
	return cncuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableUpdateBy(i *int64) *CustomerNovelConfigUpdateOne {
	if i != nil {
		cncuo.SetUpdateBy(*i)
	}
	return cncuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (cncuo *CustomerNovelConfigUpdateOne) AddUpdateBy(i int64) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.AddUpdateBy(i)
	return cncuo
}

// SetTenantId sets the "tenantId" field.
func (cncuo *CustomerNovelConfigUpdateOne) SetTenantId(i int64) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.ResetTenantId()
	cncuo.mutation.SetTenantId(i)
	return cncuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (cncuo *CustomerNovelConfigUpdateOne) SetNillableTenantId(i *int64) *CustomerNovelConfigUpdateOne {
	if i != nil {
		cncuo.SetTenantId(*i)
	}
	return cncuo
}

// AddTenantId adds i to the "tenantId" field.
func (cncuo *CustomerNovelConfigUpdateOne) AddTenantId(i int64) *CustomerNovelConfigUpdateOne {
	cncuo.mutation.AddTenantId(i)
	return cncuo
}

// Mutation returns the CustomerNovelConfigMutation object of the builder.
func (cncuo *CustomerNovelConfigUpdateOne) Mutation() *CustomerNovelConfigMutation {
	return cncuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cncuo *CustomerNovelConfigUpdateOne) Select(field string, fields ...string) *CustomerNovelConfigUpdateOne {
	cncuo.fields = append([]string{field}, fields...)
	return cncuo
}

// Save executes the query and returns the updated CustomerNovelConfig entity.
func (cncuo *CustomerNovelConfigUpdateOne) Save(ctx context.Context) (*CustomerNovelConfig, error) {
	var (
		err  error
		node *CustomerNovelConfig
	)
	cncuo.defaults()
	if len(cncuo.hooks) == 0 {
		node, err = cncuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerNovelConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cncuo.mutation = mutation
			node, err = cncuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cncuo.hooks) - 1; i >= 0; i-- {
			if cncuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cncuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cncuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cncuo *CustomerNovelConfigUpdateOne) SaveX(ctx context.Context) *CustomerNovelConfig {
	node, err := cncuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cncuo *CustomerNovelConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := cncuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cncuo *CustomerNovelConfigUpdateOne) ExecX(ctx context.Context) {
	if err := cncuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cncuo *CustomerNovelConfigUpdateOne) defaults() {
	if _, ok := cncuo.mutation.UpdatedAt(); !ok {
		v := customernovelconfig.UpdateDefaultUpdatedAt()
		cncuo.mutation.SetUpdatedAt(v)
	}
}

func (cncuo *CustomerNovelConfigUpdateOne) sqlSave(ctx context.Context) (_node *CustomerNovelConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customernovelconfig.Table,
			Columns: customernovelconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: customernovelconfig.FieldID,
			},
		},
	}
	id, ok := cncuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerNovelConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cncuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customernovelconfig.FieldID)
		for _, f := range fields {
			if !customernovelconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customernovelconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cncuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cncuo.mutation.GroupCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldGroupCode,
		})
	}
	if cncuo.mutation.GroupCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldGroupCode,
		})
	}
	if value, ok := cncuo.mutation.InnerGroupCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldInnerGroupCode,
		})
	}
	if cncuo.mutation.InnerGroupCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldInnerGroupCode,
		})
	}
	if value, ok := cncuo.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldGroupName,
		})
	}
	if cncuo.mutation.GroupNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldGroupName,
		})
	}
	if value, ok := cncuo.mutation.TypeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldTypeId,
		})
	}
	if value, ok := cncuo.mutation.AddedTypeId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldTypeId,
		})
	}
	if cncuo.mutation.TypeIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: customernovelconfig.FieldTypeId,
		})
	}
	if value, ok := cncuo.mutation.TypeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldTypeCode,
		})
	}
	if cncuo.mutation.TypeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldTypeCode,
		})
	}
	if value, ok := cncuo.mutation.TypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldTypeName,
		})
	}
	if cncuo.mutation.TypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldTypeName,
		})
	}
	if value, ok := cncuo.mutation.FieldName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customernovelconfig.FieldFieldName,
		})
	}
	if cncuo.mutation.FieldNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customernovelconfig.FieldFieldName,
		})
	}
	if value, ok := cncuo.mutation.DefaultNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldDefaultNum,
		})
	}
	if value, ok := cncuo.mutation.AddedDefaultNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: customernovelconfig.FieldDefaultNum,
		})
	}
	if cncuo.mutation.DefaultNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: customernovelconfig.FieldDefaultNum,
		})
	}
	if value, ok := cncuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customernovelconfig.FieldState,
		})
	}
	if cncuo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: customernovelconfig.FieldState,
		})
	}
	if value, ok := cncuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customernovelconfig.FieldUpdatedAt,
		})
	}
	if value, ok := cncuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldCreateBy,
		})
	}
	if value, ok := cncuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldCreateBy,
		})
	}
	if value, ok := cncuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldUpdateBy,
		})
	}
	if value, ok := cncuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldUpdateBy,
		})
	}
	if value, ok := cncuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldTenantId,
		})
	}
	if value, ok := cncuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: customernovelconfig.FieldTenantId,
		})
	}
	_node = &CustomerNovelConfig{config: cncuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cncuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customernovelconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
