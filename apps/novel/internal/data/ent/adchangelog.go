// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/adchangelog"
	"hope/apps/novel/internal/data/ent/socialuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AdChangeLog is the model entity for the AdChangeLog schema.
type AdChangeLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	// 用户ID
	UserId int64 `json:"userId,omitempty"`
	// AdId holds the value of the "adId" field.
	// 广告ID
	AdId string `json:"adId,omitempty"`
	// ChId holds the value of the "chId" field.
	// 渠道ID
	ChId int64 `json:"chId,omitempty"`
	// DeviceId holds the value of the "deviceId" field.
	// 设备号
	DeviceId string `json:"deviceId,omitempty"`
	// ExtInfo holds the value of the "extInfo" field.
	// 手机拓展信息
	ExtInfo string `json:"extInfo,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdChangeLogQuery when eager-loading is set.
	Edges AdChangeLogEdges `json:"edges"`
}

// AdChangeLogEdges holds the relations/edges for other nodes in the graph.
type AdChangeLogEdges struct {
	// User holds the value of the user edge.
	User *SocialUser `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdChangeLogEdges) UserOrErr() (*SocialUser, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: socialuser.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdChangeLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case adchangelog.FieldID, adchangelog.FieldUserId, adchangelog.FieldChId, adchangelog.FieldCreateBy, adchangelog.FieldUpdateBy, adchangelog.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case adchangelog.FieldAdId, adchangelog.FieldDeviceId, adchangelog.FieldExtInfo:
			values[i] = new(sql.NullString)
		case adchangelog.FieldCreatedAt, adchangelog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdChangeLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdChangeLog fields.
func (acl *AdChangeLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adchangelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			acl.ID = int64(value.Int64)
		case adchangelog.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				acl.UserId = value.Int64
			}
		case adchangelog.FieldAdId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field adId", values[i])
			} else if value.Valid {
				acl.AdId = value.String
			}
		case adchangelog.FieldChId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chId", values[i])
			} else if value.Valid {
				acl.ChId = value.Int64
			}
		case adchangelog.FieldDeviceId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deviceId", values[i])
			} else if value.Valid {
				acl.DeviceId = value.String
			}
		case adchangelog.FieldExtInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extInfo", values[i])
			} else if value.Valid {
				acl.ExtInfo = value.String
			}
		case adchangelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				acl.CreatedAt = value.Time
			}
		case adchangelog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				acl.UpdatedAt = value.Time
			}
		case adchangelog.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				acl.CreateBy = value.Int64
			}
		case adchangelog.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				acl.UpdateBy = value.Int64
			}
		case adchangelog.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				acl.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the AdChangeLog entity.
func (acl *AdChangeLog) QueryUser() *SocialUserQuery {
	return (&AdChangeLogClient{config: acl.config}).QueryUser(acl)
}

// Update returns a builder for updating this AdChangeLog.
// Note that you need to call AdChangeLog.Unwrap() before calling this method if this AdChangeLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (acl *AdChangeLog) Update() *AdChangeLogUpdateOne {
	return (&AdChangeLogClient{config: acl.config}).UpdateOne(acl)
}

// Unwrap unwraps the AdChangeLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (acl *AdChangeLog) Unwrap() *AdChangeLog {
	tx, ok := acl.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdChangeLog is not a transactional entity")
	}
	acl.config.driver = tx.drv
	return acl
}

// String implements the fmt.Stringer.
func (acl *AdChangeLog) String() string {
	var builder strings.Builder
	builder.WriteString("AdChangeLog(")
	builder.WriteString(fmt.Sprintf("id=%v", acl.ID))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", acl.UserId))
	builder.WriteString(", adId=")
	builder.WriteString(acl.AdId)
	builder.WriteString(", chId=")
	builder.WriteString(fmt.Sprintf("%v", acl.ChId))
	builder.WriteString(", deviceId=")
	builder.WriteString(acl.DeviceId)
	builder.WriteString(", extInfo=")
	builder.WriteString(acl.ExtInfo)
	builder.WriteString(", createdAt=")
	builder.WriteString(acl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(acl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", acl.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", acl.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", acl.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// AdChangeLogs is a parsable slice of AdChangeLog.
type AdChangeLogs []*AdChangeLog

func (acl AdChangeLogs) config(cfg config) {
	for _i := range acl {
		acl[_i].config = cfg
	}
}
