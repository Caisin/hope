// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/admin/internal/data/ent/casbinrule"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysapi"
	"hope/apps/admin/internal/data/ent/syscolumns"
	"hope/apps/admin/internal/data/ent/sysconfig"
	"hope/apps/admin/internal/data/ent/sysdept"
	"hope/apps/admin/internal/data/ent/sysdictdata"
	"hope/apps/admin/internal/data/ent/sysdicttype"
	"hope/apps/admin/internal/data/ent/sysjob"
	"hope/apps/admin/internal/data/ent/sysjoblog"
	"hope/apps/admin/internal/data/ent/sysloginlog"
	"hope/apps/admin/internal/data/ent/sysmenu"
	"hope/apps/admin/internal/data/ent/sysoperalog"
	"hope/apps/admin/internal/data/ent/syspost"
	"hope/apps/admin/internal/data/ent/sysrole"
	"hope/apps/admin/internal/data/ent/systables"
	"hope/apps/admin/internal/data/ent/sysuser"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCasbinRule  = "CasbinRule"
	TypeSysApi      = "SysApi"
	TypeSysColumns  = "SysColumns"
	TypeSysConfig   = "SysConfig"
	TypeSysDept     = "SysDept"
	TypeSysDictData = "SysDictData"
	TypeSysDictType = "SysDictType"
	TypeSysJob      = "SysJob"
	TypeSysJobLog   = "SysJobLog"
	TypeSysLoginLog = "SysLoginLog"
	TypeSysMenu     = "SysMenu"
	TypeSysOperaLog = "SysOperaLog"
	TypeSysPost     = "SysPost"
	TypeSysRole     = "SysRole"
	TypeSysTables   = "SysTables"
	TypeSysUser     = "SysUser"
)

// CasbinRuleMutation represents an operation that mutates the CasbinRule nodes in the graph.
type CasbinRuleMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	p_type        *string
	v0            *string
	v1            *string
	v2            *string
	v3            *string
	v4            *string
	v5            *string
	createdAt     *time.Time
	updatedAt     *time.Time
	createBy      *int64
	addcreateBy   *int64
	updateBy      *int64
	addupdateBy   *int64
	tenantId      *int64
	addtenantId   *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CasbinRule, error)
	predicates    []predicate.CasbinRule
}

var _ ent.Mutation = (*CasbinRuleMutation)(nil)

// casbinruleOption allows management of the mutation configuration using functional options.
type casbinruleOption func(*CasbinRuleMutation)

// newCasbinRuleMutation creates new mutation for the CasbinRule entity.
func newCasbinRuleMutation(c config, op Op, opts ...casbinruleOption) *CasbinRuleMutation {
	m := &CasbinRuleMutation{
		config:        c,
		op:            op,
		typ:           TypeCasbinRule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCasbinRuleID sets the ID field of the mutation.
func withCasbinRuleID(id int64) casbinruleOption {
	return func(m *CasbinRuleMutation) {
		var (
			err   error
			once  sync.Once
			value *CasbinRule
		)
		m.oldValue = func(ctx context.Context) (*CasbinRule, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CasbinRule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCasbinRule sets the old CasbinRule of the mutation.
func withCasbinRule(node *CasbinRule) casbinruleOption {
	return func(m *CasbinRuleMutation) {
		m.oldValue = func(context.Context) (*CasbinRule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CasbinRuleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CasbinRuleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CasbinRuleMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPType sets the "p_type" field.
func (m *CasbinRuleMutation) SetPType(s string) {
	m.p_type = &s
}

// PType returns the value of the "p_type" field in the mutation.
func (m *CasbinRuleMutation) PType() (r string, exists bool) {
	v := m.p_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPType returns the old "p_type" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldPType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPType: %w", err)
	}
	return oldValue.PType, nil
}

// ClearPType clears the value of the "p_type" field.
func (m *CasbinRuleMutation) ClearPType() {
	m.p_type = nil
	m.clearedFields[casbinrule.FieldPType] = struct{}{}
}

// PTypeCleared returns if the "p_type" field was cleared in this mutation.
func (m *CasbinRuleMutation) PTypeCleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldPType]
	return ok
}

// ResetPType resets all changes to the "p_type" field.
func (m *CasbinRuleMutation) ResetPType() {
	m.p_type = nil
	delete(m.clearedFields, casbinrule.FieldPType)
}

// SetV0 sets the "v0" field.
func (m *CasbinRuleMutation) SetV0(s string) {
	m.v0 = &s
}

// V0 returns the value of the "v0" field in the mutation.
func (m *CasbinRuleMutation) V0() (r string, exists bool) {
	v := m.v0
	if v == nil {
		return
	}
	return *v, true
}

// OldV0 returns the old "v0" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldV0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldV0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV0: %w", err)
	}
	return oldValue.V0, nil
}

// ClearV0 clears the value of the "v0" field.
func (m *CasbinRuleMutation) ClearV0() {
	m.v0 = nil
	m.clearedFields[casbinrule.FieldV0] = struct{}{}
}

// V0Cleared returns if the "v0" field was cleared in this mutation.
func (m *CasbinRuleMutation) V0Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV0]
	return ok
}

// ResetV0 resets all changes to the "v0" field.
func (m *CasbinRuleMutation) ResetV0() {
	m.v0 = nil
	delete(m.clearedFields, casbinrule.FieldV0)
}

// SetV1 sets the "v1" field.
func (m *CasbinRuleMutation) SetV1(s string) {
	m.v1 = &s
}

// V1 returns the value of the "v1" field in the mutation.
func (m *CasbinRuleMutation) V1() (r string, exists bool) {
	v := m.v1
	if v == nil {
		return
	}
	return *v, true
}

// OldV1 returns the old "v1" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldV1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldV1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV1: %w", err)
	}
	return oldValue.V1, nil
}

// ClearV1 clears the value of the "v1" field.
func (m *CasbinRuleMutation) ClearV1() {
	m.v1 = nil
	m.clearedFields[casbinrule.FieldV1] = struct{}{}
}

// V1Cleared returns if the "v1" field was cleared in this mutation.
func (m *CasbinRuleMutation) V1Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV1]
	return ok
}

// ResetV1 resets all changes to the "v1" field.
func (m *CasbinRuleMutation) ResetV1() {
	m.v1 = nil
	delete(m.clearedFields, casbinrule.FieldV1)
}

// SetV2 sets the "v2" field.
func (m *CasbinRuleMutation) SetV2(s string) {
	m.v2 = &s
}

// V2 returns the value of the "v2" field in the mutation.
func (m *CasbinRuleMutation) V2() (r string, exists bool) {
	v := m.v2
	if v == nil {
		return
	}
	return *v, true
}

// OldV2 returns the old "v2" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldV2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldV2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV2: %w", err)
	}
	return oldValue.V2, nil
}

// ClearV2 clears the value of the "v2" field.
func (m *CasbinRuleMutation) ClearV2() {
	m.v2 = nil
	m.clearedFields[casbinrule.FieldV2] = struct{}{}
}

// V2Cleared returns if the "v2" field was cleared in this mutation.
func (m *CasbinRuleMutation) V2Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV2]
	return ok
}

// ResetV2 resets all changes to the "v2" field.
func (m *CasbinRuleMutation) ResetV2() {
	m.v2 = nil
	delete(m.clearedFields, casbinrule.FieldV2)
}

// SetV3 sets the "v3" field.
func (m *CasbinRuleMutation) SetV3(s string) {
	m.v3 = &s
}

// V3 returns the value of the "v3" field in the mutation.
func (m *CasbinRuleMutation) V3() (r string, exists bool) {
	v := m.v3
	if v == nil {
		return
	}
	return *v, true
}

// OldV3 returns the old "v3" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldV3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldV3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV3: %w", err)
	}
	return oldValue.V3, nil
}

// ClearV3 clears the value of the "v3" field.
func (m *CasbinRuleMutation) ClearV3() {
	m.v3 = nil
	m.clearedFields[casbinrule.FieldV3] = struct{}{}
}

// V3Cleared returns if the "v3" field was cleared in this mutation.
func (m *CasbinRuleMutation) V3Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV3]
	return ok
}

// ResetV3 resets all changes to the "v3" field.
func (m *CasbinRuleMutation) ResetV3() {
	m.v3 = nil
	delete(m.clearedFields, casbinrule.FieldV3)
}

// SetV4 sets the "v4" field.
func (m *CasbinRuleMutation) SetV4(s string) {
	m.v4 = &s
}

// V4 returns the value of the "v4" field in the mutation.
func (m *CasbinRuleMutation) V4() (r string, exists bool) {
	v := m.v4
	if v == nil {
		return
	}
	return *v, true
}

// OldV4 returns the old "v4" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldV4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldV4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV4: %w", err)
	}
	return oldValue.V4, nil
}

// ClearV4 clears the value of the "v4" field.
func (m *CasbinRuleMutation) ClearV4() {
	m.v4 = nil
	m.clearedFields[casbinrule.FieldV4] = struct{}{}
}

// V4Cleared returns if the "v4" field was cleared in this mutation.
func (m *CasbinRuleMutation) V4Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV4]
	return ok
}

// ResetV4 resets all changes to the "v4" field.
func (m *CasbinRuleMutation) ResetV4() {
	m.v4 = nil
	delete(m.clearedFields, casbinrule.FieldV4)
}

// SetV5 sets the "v5" field.
func (m *CasbinRuleMutation) SetV5(s string) {
	m.v5 = &s
}

// V5 returns the value of the "v5" field in the mutation.
func (m *CasbinRuleMutation) V5() (r string, exists bool) {
	v := m.v5
	if v == nil {
		return
	}
	return *v, true
}

// OldV5 returns the old "v5" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldV5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldV5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldV5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV5: %w", err)
	}
	return oldValue.V5, nil
}

// ClearV5 clears the value of the "v5" field.
func (m *CasbinRuleMutation) ClearV5() {
	m.v5 = nil
	m.clearedFields[casbinrule.FieldV5] = struct{}{}
}

// V5Cleared returns if the "v5" field was cleared in this mutation.
func (m *CasbinRuleMutation) V5Cleared() bool {
	_, ok := m.clearedFields[casbinrule.FieldV5]
	return ok
}

// ResetV5 resets all changes to the "v5" field.
func (m *CasbinRuleMutation) ResetV5() {
	m.v5 = nil
	delete(m.clearedFields, casbinrule.FieldV5)
}

// SetCreatedAt sets the "createdAt" field.
func (m *CasbinRuleMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *CasbinRuleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *CasbinRuleMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *CasbinRuleMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *CasbinRuleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *CasbinRuleMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *CasbinRuleMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *CasbinRuleMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *CasbinRuleMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *CasbinRuleMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *CasbinRuleMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *CasbinRuleMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *CasbinRuleMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *CasbinRuleMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *CasbinRuleMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *CasbinRuleMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *CasbinRuleMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *CasbinRuleMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the CasbinRule entity.
// If the CasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CasbinRuleMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *CasbinRuleMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *CasbinRuleMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *CasbinRuleMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// Where appends a list predicates to the CasbinRuleMutation builder.
func (m *CasbinRuleMutation) Where(ps ...predicate.CasbinRule) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CasbinRuleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CasbinRule).
func (m *CasbinRuleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CasbinRuleMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.p_type != nil {
		fields = append(fields, casbinrule.FieldPType)
	}
	if m.v0 != nil {
		fields = append(fields, casbinrule.FieldV0)
	}
	if m.v1 != nil {
		fields = append(fields, casbinrule.FieldV1)
	}
	if m.v2 != nil {
		fields = append(fields, casbinrule.FieldV2)
	}
	if m.v3 != nil {
		fields = append(fields, casbinrule.FieldV3)
	}
	if m.v4 != nil {
		fields = append(fields, casbinrule.FieldV4)
	}
	if m.v5 != nil {
		fields = append(fields, casbinrule.FieldV5)
	}
	if m.createdAt != nil {
		fields = append(fields, casbinrule.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, casbinrule.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, casbinrule.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, casbinrule.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, casbinrule.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CasbinRuleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case casbinrule.FieldPType:
		return m.PType()
	case casbinrule.FieldV0:
		return m.V0()
	case casbinrule.FieldV1:
		return m.V1()
	case casbinrule.FieldV2:
		return m.V2()
	case casbinrule.FieldV3:
		return m.V3()
	case casbinrule.FieldV4:
		return m.V4()
	case casbinrule.FieldV5:
		return m.V5()
	case casbinrule.FieldCreatedAt:
		return m.CreatedAt()
	case casbinrule.FieldUpdatedAt:
		return m.UpdatedAt()
	case casbinrule.FieldCreateBy:
		return m.CreateBy()
	case casbinrule.FieldUpdateBy:
		return m.UpdateBy()
	case casbinrule.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CasbinRuleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case casbinrule.FieldPType:
		return m.OldPType(ctx)
	case casbinrule.FieldV0:
		return m.OldV0(ctx)
	case casbinrule.FieldV1:
		return m.OldV1(ctx)
	case casbinrule.FieldV2:
		return m.OldV2(ctx)
	case casbinrule.FieldV3:
		return m.OldV3(ctx)
	case casbinrule.FieldV4:
		return m.OldV4(ctx)
	case casbinrule.FieldV5:
		return m.OldV5(ctx)
	case casbinrule.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case casbinrule.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case casbinrule.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case casbinrule.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case casbinrule.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown CasbinRule field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CasbinRuleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case casbinrule.FieldPType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPType(v)
		return nil
	case casbinrule.FieldV0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV0(v)
		return nil
	case casbinrule.FieldV1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV1(v)
		return nil
	case casbinrule.FieldV2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV2(v)
		return nil
	case casbinrule.FieldV3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV3(v)
		return nil
	case casbinrule.FieldV4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV4(v)
		return nil
	case casbinrule.FieldV5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV5(v)
		return nil
	case casbinrule.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case casbinrule.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case casbinrule.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case casbinrule.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case casbinrule.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown CasbinRule field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CasbinRuleMutation) AddedFields() []string {
	var fields []string
	if m.addcreateBy != nil {
		fields = append(fields, casbinrule.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, casbinrule.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, casbinrule.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CasbinRuleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case casbinrule.FieldCreateBy:
		return m.AddedCreateBy()
	case casbinrule.FieldUpdateBy:
		return m.AddedUpdateBy()
	case casbinrule.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CasbinRuleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case casbinrule.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case casbinrule.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case casbinrule.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown CasbinRule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CasbinRuleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(casbinrule.FieldPType) {
		fields = append(fields, casbinrule.FieldPType)
	}
	if m.FieldCleared(casbinrule.FieldV0) {
		fields = append(fields, casbinrule.FieldV0)
	}
	if m.FieldCleared(casbinrule.FieldV1) {
		fields = append(fields, casbinrule.FieldV1)
	}
	if m.FieldCleared(casbinrule.FieldV2) {
		fields = append(fields, casbinrule.FieldV2)
	}
	if m.FieldCleared(casbinrule.FieldV3) {
		fields = append(fields, casbinrule.FieldV3)
	}
	if m.FieldCleared(casbinrule.FieldV4) {
		fields = append(fields, casbinrule.FieldV4)
	}
	if m.FieldCleared(casbinrule.FieldV5) {
		fields = append(fields, casbinrule.FieldV5)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CasbinRuleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CasbinRuleMutation) ClearField(name string) error {
	switch name {
	case casbinrule.FieldPType:
		m.ClearPType()
		return nil
	case casbinrule.FieldV0:
		m.ClearV0()
		return nil
	case casbinrule.FieldV1:
		m.ClearV1()
		return nil
	case casbinrule.FieldV2:
		m.ClearV2()
		return nil
	case casbinrule.FieldV3:
		m.ClearV3()
		return nil
	case casbinrule.FieldV4:
		m.ClearV4()
		return nil
	case casbinrule.FieldV5:
		m.ClearV5()
		return nil
	}
	return fmt.Errorf("unknown CasbinRule nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CasbinRuleMutation) ResetField(name string) error {
	switch name {
	case casbinrule.FieldPType:
		m.ResetPType()
		return nil
	case casbinrule.FieldV0:
		m.ResetV0()
		return nil
	case casbinrule.FieldV1:
		m.ResetV1()
		return nil
	case casbinrule.FieldV2:
		m.ResetV2()
		return nil
	case casbinrule.FieldV3:
		m.ResetV3()
		return nil
	case casbinrule.FieldV4:
		m.ResetV4()
		return nil
	case casbinrule.FieldV5:
		m.ResetV5()
		return nil
	case casbinrule.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case casbinrule.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case casbinrule.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case casbinrule.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case casbinrule.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown CasbinRule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CasbinRuleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CasbinRuleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CasbinRuleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CasbinRuleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CasbinRuleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CasbinRuleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CasbinRuleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CasbinRule unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CasbinRuleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CasbinRule edge %s", name)
}

// SysApiMutation represents an operation that mutates the SysApi nodes in the graph.
type SysApiMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	handle        *string
	title         *string
	_path         *string
	action        *string
	_type         *string
	createdAt     *time.Time
	updatedAt     *time.Time
	createBy      *int64
	addcreateBy   *int64
	updateBy      *int64
	addupdateBy   *int64
	tenantId      *int64
	addtenantId   *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysApi, error)
	predicates    []predicate.SysApi
}

var _ ent.Mutation = (*SysApiMutation)(nil)

// sysapiOption allows management of the mutation configuration using functional options.
type sysapiOption func(*SysApiMutation)

// newSysApiMutation creates new mutation for the SysApi entity.
func newSysApiMutation(c config, op Op, opts ...sysapiOption) *SysApiMutation {
	m := &SysApiMutation{
		config:        c,
		op:            op,
		typ:           TypeSysApi,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysApiID sets the ID field of the mutation.
func withSysApiID(id int64) sysapiOption {
	return func(m *SysApiMutation) {
		var (
			err   error
			once  sync.Once
			value *SysApi
		)
		m.oldValue = func(ctx context.Context) (*SysApi, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysApi.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysApi sets the old SysApi of the mutation.
func withSysApi(node *SysApi) sysapiOption {
	return func(m *SysApiMutation) {
		m.oldValue = func(context.Context) (*SysApi, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysApiMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysApiMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysApiMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetHandle sets the "handle" field.
func (m *SysApiMutation) SetHandle(s string) {
	m.handle = &s
}

// Handle returns the value of the "handle" field in the mutation.
func (m *SysApiMutation) Handle() (r string, exists bool) {
	v := m.handle
	if v == nil {
		return
	}
	return *v, true
}

// OldHandle returns the old "handle" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldHandle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHandle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHandle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHandle: %w", err)
	}
	return oldValue.Handle, nil
}

// ClearHandle clears the value of the "handle" field.
func (m *SysApiMutation) ClearHandle() {
	m.handle = nil
	m.clearedFields[sysapi.FieldHandle] = struct{}{}
}

// HandleCleared returns if the "handle" field was cleared in this mutation.
func (m *SysApiMutation) HandleCleared() bool {
	_, ok := m.clearedFields[sysapi.FieldHandle]
	return ok
}

// ResetHandle resets all changes to the "handle" field.
func (m *SysApiMutation) ResetHandle() {
	m.handle = nil
	delete(m.clearedFields, sysapi.FieldHandle)
}

// SetTitle sets the "title" field.
func (m *SysApiMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SysApiMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *SysApiMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[sysapi.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *SysApiMutation) TitleCleared() bool {
	_, ok := m.clearedFields[sysapi.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *SysApiMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, sysapi.FieldTitle)
}

// SetPath sets the "path" field.
func (m *SysApiMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *SysApiMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *SysApiMutation) ClearPath() {
	m._path = nil
	m.clearedFields[sysapi.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *SysApiMutation) PathCleared() bool {
	_, ok := m.clearedFields[sysapi.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *SysApiMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, sysapi.FieldPath)
}

// SetAction sets the "action" field.
func (m *SysApiMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *SysApiMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ClearAction clears the value of the "action" field.
func (m *SysApiMutation) ClearAction() {
	m.action = nil
	m.clearedFields[sysapi.FieldAction] = struct{}{}
}

// ActionCleared returns if the "action" field was cleared in this mutation.
func (m *SysApiMutation) ActionCleared() bool {
	_, ok := m.clearedFields[sysapi.FieldAction]
	return ok
}

// ResetAction resets all changes to the "action" field.
func (m *SysApiMutation) ResetAction() {
	m.action = nil
	delete(m.clearedFields, sysapi.FieldAction)
}

// SetType sets the "type" field.
func (m *SysApiMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *SysApiMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *SysApiMutation) ClearType() {
	m._type = nil
	m.clearedFields[sysapi.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *SysApiMutation) TypeCleared() bool {
	_, ok := m.clearedFields[sysapi.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *SysApiMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, sysapi.FieldType)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysApiMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysApiMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysApiMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysApiMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysApiMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysApiMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysApiMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysApiMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysApiMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysApiMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysApiMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysApiMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysApiMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysApiMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysApiMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysApiMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysApiMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysApiMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysApi entity.
// If the SysApi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysApiMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysApiMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysApiMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysApiMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// Where appends a list predicates to the SysApiMutation builder.
func (m *SysApiMutation) Where(ps ...predicate.SysApi) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysApiMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysApi).
func (m *SysApiMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysApiMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.handle != nil {
		fields = append(fields, sysapi.FieldHandle)
	}
	if m.title != nil {
		fields = append(fields, sysapi.FieldTitle)
	}
	if m._path != nil {
		fields = append(fields, sysapi.FieldPath)
	}
	if m.action != nil {
		fields = append(fields, sysapi.FieldAction)
	}
	if m._type != nil {
		fields = append(fields, sysapi.FieldType)
	}
	if m.createdAt != nil {
		fields = append(fields, sysapi.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysapi.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysapi.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysapi.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysapi.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysApiMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysapi.FieldHandle:
		return m.Handle()
	case sysapi.FieldTitle:
		return m.Title()
	case sysapi.FieldPath:
		return m.Path()
	case sysapi.FieldAction:
		return m.Action()
	case sysapi.FieldType:
		return m.GetType()
	case sysapi.FieldCreatedAt:
		return m.CreatedAt()
	case sysapi.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysapi.FieldCreateBy:
		return m.CreateBy()
	case sysapi.FieldUpdateBy:
		return m.UpdateBy()
	case sysapi.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysApiMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysapi.FieldHandle:
		return m.OldHandle(ctx)
	case sysapi.FieldTitle:
		return m.OldTitle(ctx)
	case sysapi.FieldPath:
		return m.OldPath(ctx)
	case sysapi.FieldAction:
		return m.OldAction(ctx)
	case sysapi.FieldType:
		return m.OldType(ctx)
	case sysapi.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysapi.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysapi.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysapi.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysapi.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysApi field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysApiMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysapi.FieldHandle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHandle(v)
		return nil
	case sysapi.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case sysapi.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case sysapi.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case sysapi.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case sysapi.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysapi.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysapi.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysapi.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysapi.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysApi field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysApiMutation) AddedFields() []string {
	var fields []string
	if m.addcreateBy != nil {
		fields = append(fields, sysapi.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysapi.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysapi.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysApiMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysapi.FieldCreateBy:
		return m.AddedCreateBy()
	case sysapi.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysapi.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysApiMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysapi.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysapi.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysapi.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysApi numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysApiMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysapi.FieldHandle) {
		fields = append(fields, sysapi.FieldHandle)
	}
	if m.FieldCleared(sysapi.FieldTitle) {
		fields = append(fields, sysapi.FieldTitle)
	}
	if m.FieldCleared(sysapi.FieldPath) {
		fields = append(fields, sysapi.FieldPath)
	}
	if m.FieldCleared(sysapi.FieldAction) {
		fields = append(fields, sysapi.FieldAction)
	}
	if m.FieldCleared(sysapi.FieldType) {
		fields = append(fields, sysapi.FieldType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysApiMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysApiMutation) ClearField(name string) error {
	switch name {
	case sysapi.FieldHandle:
		m.ClearHandle()
		return nil
	case sysapi.FieldTitle:
		m.ClearTitle()
		return nil
	case sysapi.FieldPath:
		m.ClearPath()
		return nil
	case sysapi.FieldAction:
		m.ClearAction()
		return nil
	case sysapi.FieldType:
		m.ClearType()
		return nil
	}
	return fmt.Errorf("unknown SysApi nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysApiMutation) ResetField(name string) error {
	switch name {
	case sysapi.FieldHandle:
		m.ResetHandle()
		return nil
	case sysapi.FieldTitle:
		m.ResetTitle()
		return nil
	case sysapi.FieldPath:
		m.ResetPath()
		return nil
	case sysapi.FieldAction:
		m.ResetAction()
		return nil
	case sysapi.FieldType:
		m.ResetType()
		return nil
	case sysapi.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysapi.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysapi.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysapi.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysapi.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysApi field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysApiMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysApiMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysApiMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysApiMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysApiMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysApiMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysApiMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysApi unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysApiMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysApi edge %s", name)
}

// SysColumnsMutation represents an operation that mutates the SysColumns nodes in the graph.
type SysColumnsMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	columnId      *int32
	addcolumnId   *int32
	columnName    *string
	columnComment *string
	columnType    *string
	goType        *string
	goField       *string
	jsonField     *string
	isPk          *string
	isIncrement   *string
	isRequired    *string
	isInsert      *string
	isEdit        *string
	isList        *string
	isQuery       *string
	queryType     *string
	htmlType      *string
	dictType      *string
	sort          *int32
	addsort       *int32
	list          *string
	pk            *bool
	required      *bool
	superColumn   *bool
	usableColumn  *bool
	increment     *bool
	insert        *bool
	edit          *bool
	query         *bool
	remark        *string
	fkLabelName   *string
	createdAt     *time.Time
	updatedAt     *time.Time
	createBy      *int64
	addcreateBy   *int64
	updateBy      *int64
	addupdateBy   *int64
	tenantId      *int64
	addtenantId   *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysColumns, error)
	predicates    []predicate.SysColumns
}

var _ ent.Mutation = (*SysColumnsMutation)(nil)

// syscolumnsOption allows management of the mutation configuration using functional options.
type syscolumnsOption func(*SysColumnsMutation)

// newSysColumnsMutation creates new mutation for the SysColumns entity.
func newSysColumnsMutation(c config, op Op, opts ...syscolumnsOption) *SysColumnsMutation {
	m := &SysColumnsMutation{
		config:        c,
		op:            op,
		typ:           TypeSysColumns,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysColumnsID sets the ID field of the mutation.
func withSysColumnsID(id int64) syscolumnsOption {
	return func(m *SysColumnsMutation) {
		var (
			err   error
			once  sync.Once
			value *SysColumns
		)
		m.oldValue = func(ctx context.Context) (*SysColumns, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysColumns.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysColumns sets the old SysColumns of the mutation.
func withSysColumns(node *SysColumns) syscolumnsOption {
	return func(m *SysColumnsMutation) {
		m.oldValue = func(context.Context) (*SysColumns, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysColumnsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysColumnsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysColumnsMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetColumnId sets the "columnId" field.
func (m *SysColumnsMutation) SetColumnId(i int32) {
	m.columnId = &i
	m.addcolumnId = nil
}

// ColumnId returns the value of the "columnId" field in the mutation.
func (m *SysColumnsMutation) ColumnId() (r int32, exists bool) {
	v := m.columnId
	if v == nil {
		return
	}
	return *v, true
}

// OldColumnId returns the old "columnId" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldColumnId(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColumnId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColumnId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColumnId: %w", err)
	}
	return oldValue.ColumnId, nil
}

// AddColumnId adds i to the "columnId" field.
func (m *SysColumnsMutation) AddColumnId(i int32) {
	if m.addcolumnId != nil {
		*m.addcolumnId += i
	} else {
		m.addcolumnId = &i
	}
}

// AddedColumnId returns the value that was added to the "columnId" field in this mutation.
func (m *SysColumnsMutation) AddedColumnId() (r int32, exists bool) {
	v := m.addcolumnId
	if v == nil {
		return
	}
	return *v, true
}

// ResetColumnId resets all changes to the "columnId" field.
func (m *SysColumnsMutation) ResetColumnId() {
	m.columnId = nil
	m.addcolumnId = nil
}

// SetColumnName sets the "columnName" field.
func (m *SysColumnsMutation) SetColumnName(s string) {
	m.columnName = &s
}

// ColumnName returns the value of the "columnName" field in the mutation.
func (m *SysColumnsMutation) ColumnName() (r string, exists bool) {
	v := m.columnName
	if v == nil {
		return
	}
	return *v, true
}

// OldColumnName returns the old "columnName" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldColumnName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColumnName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColumnName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColumnName: %w", err)
	}
	return oldValue.ColumnName, nil
}

// ClearColumnName clears the value of the "columnName" field.
func (m *SysColumnsMutation) ClearColumnName() {
	m.columnName = nil
	m.clearedFields[syscolumns.FieldColumnName] = struct{}{}
}

// ColumnNameCleared returns if the "columnName" field was cleared in this mutation.
func (m *SysColumnsMutation) ColumnNameCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldColumnName]
	return ok
}

// ResetColumnName resets all changes to the "columnName" field.
func (m *SysColumnsMutation) ResetColumnName() {
	m.columnName = nil
	delete(m.clearedFields, syscolumns.FieldColumnName)
}

// SetColumnComment sets the "columnComment" field.
func (m *SysColumnsMutation) SetColumnComment(s string) {
	m.columnComment = &s
}

// ColumnComment returns the value of the "columnComment" field in the mutation.
func (m *SysColumnsMutation) ColumnComment() (r string, exists bool) {
	v := m.columnComment
	if v == nil {
		return
	}
	return *v, true
}

// OldColumnComment returns the old "columnComment" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldColumnComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColumnComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColumnComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColumnComment: %w", err)
	}
	return oldValue.ColumnComment, nil
}

// ClearColumnComment clears the value of the "columnComment" field.
func (m *SysColumnsMutation) ClearColumnComment() {
	m.columnComment = nil
	m.clearedFields[syscolumns.FieldColumnComment] = struct{}{}
}

// ColumnCommentCleared returns if the "columnComment" field was cleared in this mutation.
func (m *SysColumnsMutation) ColumnCommentCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldColumnComment]
	return ok
}

// ResetColumnComment resets all changes to the "columnComment" field.
func (m *SysColumnsMutation) ResetColumnComment() {
	m.columnComment = nil
	delete(m.clearedFields, syscolumns.FieldColumnComment)
}

// SetColumnType sets the "columnType" field.
func (m *SysColumnsMutation) SetColumnType(s string) {
	m.columnType = &s
}

// ColumnType returns the value of the "columnType" field in the mutation.
func (m *SysColumnsMutation) ColumnType() (r string, exists bool) {
	v := m.columnType
	if v == nil {
		return
	}
	return *v, true
}

// OldColumnType returns the old "columnType" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldColumnType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColumnType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColumnType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColumnType: %w", err)
	}
	return oldValue.ColumnType, nil
}

// ClearColumnType clears the value of the "columnType" field.
func (m *SysColumnsMutation) ClearColumnType() {
	m.columnType = nil
	m.clearedFields[syscolumns.FieldColumnType] = struct{}{}
}

// ColumnTypeCleared returns if the "columnType" field was cleared in this mutation.
func (m *SysColumnsMutation) ColumnTypeCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldColumnType]
	return ok
}

// ResetColumnType resets all changes to the "columnType" field.
func (m *SysColumnsMutation) ResetColumnType() {
	m.columnType = nil
	delete(m.clearedFields, syscolumns.FieldColumnType)
}

// SetGoType sets the "goType" field.
func (m *SysColumnsMutation) SetGoType(s string) {
	m.goType = &s
}

// GoType returns the value of the "goType" field in the mutation.
func (m *SysColumnsMutation) GoType() (r string, exists bool) {
	v := m.goType
	if v == nil {
		return
	}
	return *v, true
}

// OldGoType returns the old "goType" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldGoType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoType: %w", err)
	}
	return oldValue.GoType, nil
}

// ClearGoType clears the value of the "goType" field.
func (m *SysColumnsMutation) ClearGoType() {
	m.goType = nil
	m.clearedFields[syscolumns.FieldGoType] = struct{}{}
}

// GoTypeCleared returns if the "goType" field was cleared in this mutation.
func (m *SysColumnsMutation) GoTypeCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldGoType]
	return ok
}

// ResetGoType resets all changes to the "goType" field.
func (m *SysColumnsMutation) ResetGoType() {
	m.goType = nil
	delete(m.clearedFields, syscolumns.FieldGoType)
}

// SetGoField sets the "goField" field.
func (m *SysColumnsMutation) SetGoField(s string) {
	m.goField = &s
}

// GoField returns the value of the "goField" field in the mutation.
func (m *SysColumnsMutation) GoField() (r string, exists bool) {
	v := m.goField
	if v == nil {
		return
	}
	return *v, true
}

// OldGoField returns the old "goField" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldGoField(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoField is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoField requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoField: %w", err)
	}
	return oldValue.GoField, nil
}

// ClearGoField clears the value of the "goField" field.
func (m *SysColumnsMutation) ClearGoField() {
	m.goField = nil
	m.clearedFields[syscolumns.FieldGoField] = struct{}{}
}

// GoFieldCleared returns if the "goField" field was cleared in this mutation.
func (m *SysColumnsMutation) GoFieldCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldGoField]
	return ok
}

// ResetGoField resets all changes to the "goField" field.
func (m *SysColumnsMutation) ResetGoField() {
	m.goField = nil
	delete(m.clearedFields, syscolumns.FieldGoField)
}

// SetJsonField sets the "jsonField" field.
func (m *SysColumnsMutation) SetJsonField(s string) {
	m.jsonField = &s
}

// JsonField returns the value of the "jsonField" field in the mutation.
func (m *SysColumnsMutation) JsonField() (r string, exists bool) {
	v := m.jsonField
	if v == nil {
		return
	}
	return *v, true
}

// OldJsonField returns the old "jsonField" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldJsonField(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJsonField is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJsonField requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJsonField: %w", err)
	}
	return oldValue.JsonField, nil
}

// ClearJsonField clears the value of the "jsonField" field.
func (m *SysColumnsMutation) ClearJsonField() {
	m.jsonField = nil
	m.clearedFields[syscolumns.FieldJsonField] = struct{}{}
}

// JsonFieldCleared returns if the "jsonField" field was cleared in this mutation.
func (m *SysColumnsMutation) JsonFieldCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldJsonField]
	return ok
}

// ResetJsonField resets all changes to the "jsonField" field.
func (m *SysColumnsMutation) ResetJsonField() {
	m.jsonField = nil
	delete(m.clearedFields, syscolumns.FieldJsonField)
}

// SetIsPk sets the "isPk" field.
func (m *SysColumnsMutation) SetIsPk(s string) {
	m.isPk = &s
}

// IsPk returns the value of the "isPk" field in the mutation.
func (m *SysColumnsMutation) IsPk() (r string, exists bool) {
	v := m.isPk
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPk returns the old "isPk" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldIsPk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsPk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsPk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPk: %w", err)
	}
	return oldValue.IsPk, nil
}

// ClearIsPk clears the value of the "isPk" field.
func (m *SysColumnsMutation) ClearIsPk() {
	m.isPk = nil
	m.clearedFields[syscolumns.FieldIsPk] = struct{}{}
}

// IsPkCleared returns if the "isPk" field was cleared in this mutation.
func (m *SysColumnsMutation) IsPkCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldIsPk]
	return ok
}

// ResetIsPk resets all changes to the "isPk" field.
func (m *SysColumnsMutation) ResetIsPk() {
	m.isPk = nil
	delete(m.clearedFields, syscolumns.FieldIsPk)
}

// SetIsIncrement sets the "isIncrement" field.
func (m *SysColumnsMutation) SetIsIncrement(s string) {
	m.isIncrement = &s
}

// IsIncrement returns the value of the "isIncrement" field in the mutation.
func (m *SysColumnsMutation) IsIncrement() (r string, exists bool) {
	v := m.isIncrement
	if v == nil {
		return
	}
	return *v, true
}

// OldIsIncrement returns the old "isIncrement" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldIsIncrement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsIncrement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsIncrement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsIncrement: %w", err)
	}
	return oldValue.IsIncrement, nil
}

// ClearIsIncrement clears the value of the "isIncrement" field.
func (m *SysColumnsMutation) ClearIsIncrement() {
	m.isIncrement = nil
	m.clearedFields[syscolumns.FieldIsIncrement] = struct{}{}
}

// IsIncrementCleared returns if the "isIncrement" field was cleared in this mutation.
func (m *SysColumnsMutation) IsIncrementCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldIsIncrement]
	return ok
}

// ResetIsIncrement resets all changes to the "isIncrement" field.
func (m *SysColumnsMutation) ResetIsIncrement() {
	m.isIncrement = nil
	delete(m.clearedFields, syscolumns.FieldIsIncrement)
}

// SetIsRequired sets the "isRequired" field.
func (m *SysColumnsMutation) SetIsRequired(s string) {
	m.isRequired = &s
}

// IsRequired returns the value of the "isRequired" field in the mutation.
func (m *SysColumnsMutation) IsRequired() (r string, exists bool) {
	v := m.isRequired
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRequired returns the old "isRequired" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldIsRequired(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsRequired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRequired: %w", err)
	}
	return oldValue.IsRequired, nil
}

// ClearIsRequired clears the value of the "isRequired" field.
func (m *SysColumnsMutation) ClearIsRequired() {
	m.isRequired = nil
	m.clearedFields[syscolumns.FieldIsRequired] = struct{}{}
}

// IsRequiredCleared returns if the "isRequired" field was cleared in this mutation.
func (m *SysColumnsMutation) IsRequiredCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldIsRequired]
	return ok
}

// ResetIsRequired resets all changes to the "isRequired" field.
func (m *SysColumnsMutation) ResetIsRequired() {
	m.isRequired = nil
	delete(m.clearedFields, syscolumns.FieldIsRequired)
}

// SetIsInsert sets the "isInsert" field.
func (m *SysColumnsMutation) SetIsInsert(s string) {
	m.isInsert = &s
}

// IsInsert returns the value of the "isInsert" field in the mutation.
func (m *SysColumnsMutation) IsInsert() (r string, exists bool) {
	v := m.isInsert
	if v == nil {
		return
	}
	return *v, true
}

// OldIsInsert returns the old "isInsert" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldIsInsert(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsInsert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsInsert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsInsert: %w", err)
	}
	return oldValue.IsInsert, nil
}

// ClearIsInsert clears the value of the "isInsert" field.
func (m *SysColumnsMutation) ClearIsInsert() {
	m.isInsert = nil
	m.clearedFields[syscolumns.FieldIsInsert] = struct{}{}
}

// IsInsertCleared returns if the "isInsert" field was cleared in this mutation.
func (m *SysColumnsMutation) IsInsertCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldIsInsert]
	return ok
}

// ResetIsInsert resets all changes to the "isInsert" field.
func (m *SysColumnsMutation) ResetIsInsert() {
	m.isInsert = nil
	delete(m.clearedFields, syscolumns.FieldIsInsert)
}

// SetIsEdit sets the "isEdit" field.
func (m *SysColumnsMutation) SetIsEdit(s string) {
	m.isEdit = &s
}

// IsEdit returns the value of the "isEdit" field in the mutation.
func (m *SysColumnsMutation) IsEdit() (r string, exists bool) {
	v := m.isEdit
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEdit returns the old "isEdit" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldIsEdit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsEdit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsEdit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEdit: %w", err)
	}
	return oldValue.IsEdit, nil
}

// ClearIsEdit clears the value of the "isEdit" field.
func (m *SysColumnsMutation) ClearIsEdit() {
	m.isEdit = nil
	m.clearedFields[syscolumns.FieldIsEdit] = struct{}{}
}

// IsEditCleared returns if the "isEdit" field was cleared in this mutation.
func (m *SysColumnsMutation) IsEditCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldIsEdit]
	return ok
}

// ResetIsEdit resets all changes to the "isEdit" field.
func (m *SysColumnsMutation) ResetIsEdit() {
	m.isEdit = nil
	delete(m.clearedFields, syscolumns.FieldIsEdit)
}

// SetIsList sets the "isList" field.
func (m *SysColumnsMutation) SetIsList(s string) {
	m.isList = &s
}

// IsList returns the value of the "isList" field in the mutation.
func (m *SysColumnsMutation) IsList() (r string, exists bool) {
	v := m.isList
	if v == nil {
		return
	}
	return *v, true
}

// OldIsList returns the old "isList" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldIsList(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsList: %w", err)
	}
	return oldValue.IsList, nil
}

// ClearIsList clears the value of the "isList" field.
func (m *SysColumnsMutation) ClearIsList() {
	m.isList = nil
	m.clearedFields[syscolumns.FieldIsList] = struct{}{}
}

// IsListCleared returns if the "isList" field was cleared in this mutation.
func (m *SysColumnsMutation) IsListCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldIsList]
	return ok
}

// ResetIsList resets all changes to the "isList" field.
func (m *SysColumnsMutation) ResetIsList() {
	m.isList = nil
	delete(m.clearedFields, syscolumns.FieldIsList)
}

// SetIsQuery sets the "isQuery" field.
func (m *SysColumnsMutation) SetIsQuery(s string) {
	m.isQuery = &s
}

// IsQuery returns the value of the "isQuery" field in the mutation.
func (m *SysColumnsMutation) IsQuery() (r string, exists bool) {
	v := m.isQuery
	if v == nil {
		return
	}
	return *v, true
}

// OldIsQuery returns the old "isQuery" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldIsQuery(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsQuery: %w", err)
	}
	return oldValue.IsQuery, nil
}

// ClearIsQuery clears the value of the "isQuery" field.
func (m *SysColumnsMutation) ClearIsQuery() {
	m.isQuery = nil
	m.clearedFields[syscolumns.FieldIsQuery] = struct{}{}
}

// IsQueryCleared returns if the "isQuery" field was cleared in this mutation.
func (m *SysColumnsMutation) IsQueryCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldIsQuery]
	return ok
}

// ResetIsQuery resets all changes to the "isQuery" field.
func (m *SysColumnsMutation) ResetIsQuery() {
	m.isQuery = nil
	delete(m.clearedFields, syscolumns.FieldIsQuery)
}

// SetQueryType sets the "queryType" field.
func (m *SysColumnsMutation) SetQueryType(s string) {
	m.queryType = &s
}

// QueryType returns the value of the "queryType" field in the mutation.
func (m *SysColumnsMutation) QueryType() (r string, exists bool) {
	v := m.queryType
	if v == nil {
		return
	}
	return *v, true
}

// OldQueryType returns the old "queryType" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldQueryType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQueryType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQueryType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQueryType: %w", err)
	}
	return oldValue.QueryType, nil
}

// ClearQueryType clears the value of the "queryType" field.
func (m *SysColumnsMutation) ClearQueryType() {
	m.queryType = nil
	m.clearedFields[syscolumns.FieldQueryType] = struct{}{}
}

// QueryTypeCleared returns if the "queryType" field was cleared in this mutation.
func (m *SysColumnsMutation) QueryTypeCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldQueryType]
	return ok
}

// ResetQueryType resets all changes to the "queryType" field.
func (m *SysColumnsMutation) ResetQueryType() {
	m.queryType = nil
	delete(m.clearedFields, syscolumns.FieldQueryType)
}

// SetHtmlType sets the "htmlType" field.
func (m *SysColumnsMutation) SetHtmlType(s string) {
	m.htmlType = &s
}

// HtmlType returns the value of the "htmlType" field in the mutation.
func (m *SysColumnsMutation) HtmlType() (r string, exists bool) {
	v := m.htmlType
	if v == nil {
		return
	}
	return *v, true
}

// OldHtmlType returns the old "htmlType" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldHtmlType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHtmlType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHtmlType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHtmlType: %w", err)
	}
	return oldValue.HtmlType, nil
}

// ClearHtmlType clears the value of the "htmlType" field.
func (m *SysColumnsMutation) ClearHtmlType() {
	m.htmlType = nil
	m.clearedFields[syscolumns.FieldHtmlType] = struct{}{}
}

// HtmlTypeCleared returns if the "htmlType" field was cleared in this mutation.
func (m *SysColumnsMutation) HtmlTypeCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldHtmlType]
	return ok
}

// ResetHtmlType resets all changes to the "htmlType" field.
func (m *SysColumnsMutation) ResetHtmlType() {
	m.htmlType = nil
	delete(m.clearedFields, syscolumns.FieldHtmlType)
}

// SetDictType sets the "dictType" field.
func (m *SysColumnsMutation) SetDictType(s string) {
	m.dictType = &s
}

// DictType returns the value of the "dictType" field in the mutation.
func (m *SysColumnsMutation) DictType() (r string, exists bool) {
	v := m.dictType
	if v == nil {
		return
	}
	return *v, true
}

// OldDictType returns the old "dictType" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldDictType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDictType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDictType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictType: %w", err)
	}
	return oldValue.DictType, nil
}

// ClearDictType clears the value of the "dictType" field.
func (m *SysColumnsMutation) ClearDictType() {
	m.dictType = nil
	m.clearedFields[syscolumns.FieldDictType] = struct{}{}
}

// DictTypeCleared returns if the "dictType" field was cleared in this mutation.
func (m *SysColumnsMutation) DictTypeCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldDictType]
	return ok
}

// ResetDictType resets all changes to the "dictType" field.
func (m *SysColumnsMutation) ResetDictType() {
	m.dictType = nil
	delete(m.clearedFields, syscolumns.FieldDictType)
}

// SetSort sets the "sort" field.
func (m *SysColumnsMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysColumnsMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysColumnsMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysColumnsMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ClearSort clears the value of the "sort" field.
func (m *SysColumnsMutation) ClearSort() {
	m.sort = nil
	m.addsort = nil
	m.clearedFields[syscolumns.FieldSort] = struct{}{}
}

// SortCleared returns if the "sort" field was cleared in this mutation.
func (m *SysColumnsMutation) SortCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldSort]
	return ok
}

// ResetSort resets all changes to the "sort" field.
func (m *SysColumnsMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
	delete(m.clearedFields, syscolumns.FieldSort)
}

// SetList sets the "list" field.
func (m *SysColumnsMutation) SetList(s string) {
	m.list = &s
}

// List returns the value of the "list" field in the mutation.
func (m *SysColumnsMutation) List() (r string, exists bool) {
	v := m.list
	if v == nil {
		return
	}
	return *v, true
}

// OldList returns the old "list" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldList(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldList: %w", err)
	}
	return oldValue.List, nil
}

// ClearList clears the value of the "list" field.
func (m *SysColumnsMutation) ClearList() {
	m.list = nil
	m.clearedFields[syscolumns.FieldList] = struct{}{}
}

// ListCleared returns if the "list" field was cleared in this mutation.
func (m *SysColumnsMutation) ListCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldList]
	return ok
}

// ResetList resets all changes to the "list" field.
func (m *SysColumnsMutation) ResetList() {
	m.list = nil
	delete(m.clearedFields, syscolumns.FieldList)
}

// SetPk sets the "pk" field.
func (m *SysColumnsMutation) SetPk(b bool) {
	m.pk = &b
}

// Pk returns the value of the "pk" field in the mutation.
func (m *SysColumnsMutation) Pk() (r bool, exists bool) {
	v := m.pk
	if v == nil {
		return
	}
	return *v, true
}

// OldPk returns the old "pk" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldPk(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPk: %w", err)
	}
	return oldValue.Pk, nil
}

// ClearPk clears the value of the "pk" field.
func (m *SysColumnsMutation) ClearPk() {
	m.pk = nil
	m.clearedFields[syscolumns.FieldPk] = struct{}{}
}

// PkCleared returns if the "pk" field was cleared in this mutation.
func (m *SysColumnsMutation) PkCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldPk]
	return ok
}

// ResetPk resets all changes to the "pk" field.
func (m *SysColumnsMutation) ResetPk() {
	m.pk = nil
	delete(m.clearedFields, syscolumns.FieldPk)
}

// SetRequired sets the "required" field.
func (m *SysColumnsMutation) SetRequired(b bool) {
	m.required = &b
}

// Required returns the value of the "required" field in the mutation.
func (m *SysColumnsMutation) Required() (r bool, exists bool) {
	v := m.required
	if v == nil {
		return
	}
	return *v, true
}

// OldRequired returns the old "required" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldRequired(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRequired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequired: %w", err)
	}
	return oldValue.Required, nil
}

// ClearRequired clears the value of the "required" field.
func (m *SysColumnsMutation) ClearRequired() {
	m.required = nil
	m.clearedFields[syscolumns.FieldRequired] = struct{}{}
}

// RequiredCleared returns if the "required" field was cleared in this mutation.
func (m *SysColumnsMutation) RequiredCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldRequired]
	return ok
}

// ResetRequired resets all changes to the "required" field.
func (m *SysColumnsMutation) ResetRequired() {
	m.required = nil
	delete(m.clearedFields, syscolumns.FieldRequired)
}

// SetSuperColumn sets the "superColumn" field.
func (m *SysColumnsMutation) SetSuperColumn(b bool) {
	m.superColumn = &b
}

// SuperColumn returns the value of the "superColumn" field in the mutation.
func (m *SysColumnsMutation) SuperColumn() (r bool, exists bool) {
	v := m.superColumn
	if v == nil {
		return
	}
	return *v, true
}

// OldSuperColumn returns the old "superColumn" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldSuperColumn(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSuperColumn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSuperColumn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuperColumn: %w", err)
	}
	return oldValue.SuperColumn, nil
}

// ClearSuperColumn clears the value of the "superColumn" field.
func (m *SysColumnsMutation) ClearSuperColumn() {
	m.superColumn = nil
	m.clearedFields[syscolumns.FieldSuperColumn] = struct{}{}
}

// SuperColumnCleared returns if the "superColumn" field was cleared in this mutation.
func (m *SysColumnsMutation) SuperColumnCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldSuperColumn]
	return ok
}

// ResetSuperColumn resets all changes to the "superColumn" field.
func (m *SysColumnsMutation) ResetSuperColumn() {
	m.superColumn = nil
	delete(m.clearedFields, syscolumns.FieldSuperColumn)
}

// SetUsableColumn sets the "usableColumn" field.
func (m *SysColumnsMutation) SetUsableColumn(b bool) {
	m.usableColumn = &b
}

// UsableColumn returns the value of the "usableColumn" field in the mutation.
func (m *SysColumnsMutation) UsableColumn() (r bool, exists bool) {
	v := m.usableColumn
	if v == nil {
		return
	}
	return *v, true
}

// OldUsableColumn returns the old "usableColumn" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldUsableColumn(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsableColumn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsableColumn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsableColumn: %w", err)
	}
	return oldValue.UsableColumn, nil
}

// ClearUsableColumn clears the value of the "usableColumn" field.
func (m *SysColumnsMutation) ClearUsableColumn() {
	m.usableColumn = nil
	m.clearedFields[syscolumns.FieldUsableColumn] = struct{}{}
}

// UsableColumnCleared returns if the "usableColumn" field was cleared in this mutation.
func (m *SysColumnsMutation) UsableColumnCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldUsableColumn]
	return ok
}

// ResetUsableColumn resets all changes to the "usableColumn" field.
func (m *SysColumnsMutation) ResetUsableColumn() {
	m.usableColumn = nil
	delete(m.clearedFields, syscolumns.FieldUsableColumn)
}

// SetIncrement sets the "increment" field.
func (m *SysColumnsMutation) SetIncrement(b bool) {
	m.increment = &b
}

// Increment returns the value of the "increment" field in the mutation.
func (m *SysColumnsMutation) Increment() (r bool, exists bool) {
	v := m.increment
	if v == nil {
		return
	}
	return *v, true
}

// OldIncrement returns the old "increment" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldIncrement(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIncrement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIncrement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIncrement: %w", err)
	}
	return oldValue.Increment, nil
}

// ClearIncrement clears the value of the "increment" field.
func (m *SysColumnsMutation) ClearIncrement() {
	m.increment = nil
	m.clearedFields[syscolumns.FieldIncrement] = struct{}{}
}

// IncrementCleared returns if the "increment" field was cleared in this mutation.
func (m *SysColumnsMutation) IncrementCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldIncrement]
	return ok
}

// ResetIncrement resets all changes to the "increment" field.
func (m *SysColumnsMutation) ResetIncrement() {
	m.increment = nil
	delete(m.clearedFields, syscolumns.FieldIncrement)
}

// SetInsert sets the "insert" field.
func (m *SysColumnsMutation) SetInsert(b bool) {
	m.insert = &b
}

// Insert returns the value of the "insert" field in the mutation.
func (m *SysColumnsMutation) Insert() (r bool, exists bool) {
	v := m.insert
	if v == nil {
		return
	}
	return *v, true
}

// OldInsert returns the old "insert" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldInsert(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInsert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInsert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInsert: %w", err)
	}
	return oldValue.Insert, nil
}

// ClearInsert clears the value of the "insert" field.
func (m *SysColumnsMutation) ClearInsert() {
	m.insert = nil
	m.clearedFields[syscolumns.FieldInsert] = struct{}{}
}

// InsertCleared returns if the "insert" field was cleared in this mutation.
func (m *SysColumnsMutation) InsertCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldInsert]
	return ok
}

// ResetInsert resets all changes to the "insert" field.
func (m *SysColumnsMutation) ResetInsert() {
	m.insert = nil
	delete(m.clearedFields, syscolumns.FieldInsert)
}

// SetEdit sets the "edit" field.
func (m *SysColumnsMutation) SetEdit(b bool) {
	m.edit = &b
}

// Edit returns the value of the "edit" field in the mutation.
func (m *SysColumnsMutation) Edit() (r bool, exists bool) {
	v := m.edit
	if v == nil {
		return
	}
	return *v, true
}

// OldEdit returns the old "edit" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldEdit(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEdit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEdit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEdit: %w", err)
	}
	return oldValue.Edit, nil
}

// ClearEdit clears the value of the "edit" field.
func (m *SysColumnsMutation) ClearEdit() {
	m.edit = nil
	m.clearedFields[syscolumns.FieldEdit] = struct{}{}
}

// EditCleared returns if the "edit" field was cleared in this mutation.
func (m *SysColumnsMutation) EditCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldEdit]
	return ok
}

// ResetEdit resets all changes to the "edit" field.
func (m *SysColumnsMutation) ResetEdit() {
	m.edit = nil
	delete(m.clearedFields, syscolumns.FieldEdit)
}

// SetQuery sets the "query" field.
func (m *SysColumnsMutation) SetQuery(b bool) {
	m.query = &b
}

// Query returns the value of the "query" field in the mutation.
func (m *SysColumnsMutation) Query() (r bool, exists bool) {
	v := m.query
	if v == nil {
		return
	}
	return *v, true
}

// OldQuery returns the old "query" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldQuery(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuery: %w", err)
	}
	return oldValue.Query, nil
}

// ClearQuery clears the value of the "query" field.
func (m *SysColumnsMutation) ClearQuery() {
	m.query = nil
	m.clearedFields[syscolumns.FieldQuery] = struct{}{}
}

// QueryCleared returns if the "query" field was cleared in this mutation.
func (m *SysColumnsMutation) QueryCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldQuery]
	return ok
}

// ResetQuery resets all changes to the "query" field.
func (m *SysColumnsMutation) ResetQuery() {
	m.query = nil
	delete(m.clearedFields, syscolumns.FieldQuery)
}

// SetRemark sets the "remark" field.
func (m *SysColumnsMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysColumnsMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysColumnsMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[syscolumns.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysColumnsMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysColumnsMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, syscolumns.FieldRemark)
}

// SetFkLabelName sets the "fkLabelName" field.
func (m *SysColumnsMutation) SetFkLabelName(s string) {
	m.fkLabelName = &s
}

// FkLabelName returns the value of the "fkLabelName" field in the mutation.
func (m *SysColumnsMutation) FkLabelName() (r string, exists bool) {
	v := m.fkLabelName
	if v == nil {
		return
	}
	return *v, true
}

// OldFkLabelName returns the old "fkLabelName" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldFkLabelName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFkLabelName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFkLabelName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkLabelName: %w", err)
	}
	return oldValue.FkLabelName, nil
}

// ClearFkLabelName clears the value of the "fkLabelName" field.
func (m *SysColumnsMutation) ClearFkLabelName() {
	m.fkLabelName = nil
	m.clearedFields[syscolumns.FieldFkLabelName] = struct{}{}
}

// FkLabelNameCleared returns if the "fkLabelName" field was cleared in this mutation.
func (m *SysColumnsMutation) FkLabelNameCleared() bool {
	_, ok := m.clearedFields[syscolumns.FieldFkLabelName]
	return ok
}

// ResetFkLabelName resets all changes to the "fkLabelName" field.
func (m *SysColumnsMutation) ResetFkLabelName() {
	m.fkLabelName = nil
	delete(m.clearedFields, syscolumns.FieldFkLabelName)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysColumnsMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysColumnsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysColumnsMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysColumnsMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysColumnsMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysColumnsMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysColumnsMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysColumnsMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysColumnsMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysColumnsMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysColumnsMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysColumnsMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysColumnsMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysColumnsMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysColumnsMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysColumnsMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysColumnsMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysColumnsMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysColumns entity.
// If the SysColumns object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysColumnsMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysColumnsMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysColumnsMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysColumnsMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// Where appends a list predicates to the SysColumnsMutation builder.
func (m *SysColumnsMutation) Where(ps ...predicate.SysColumns) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysColumnsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysColumns).
func (m *SysColumnsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysColumnsMutation) Fields() []string {
	fields := make([]string, 0, 34)
	if m.columnId != nil {
		fields = append(fields, syscolumns.FieldColumnId)
	}
	if m.columnName != nil {
		fields = append(fields, syscolumns.FieldColumnName)
	}
	if m.columnComment != nil {
		fields = append(fields, syscolumns.FieldColumnComment)
	}
	if m.columnType != nil {
		fields = append(fields, syscolumns.FieldColumnType)
	}
	if m.goType != nil {
		fields = append(fields, syscolumns.FieldGoType)
	}
	if m.goField != nil {
		fields = append(fields, syscolumns.FieldGoField)
	}
	if m.jsonField != nil {
		fields = append(fields, syscolumns.FieldJsonField)
	}
	if m.isPk != nil {
		fields = append(fields, syscolumns.FieldIsPk)
	}
	if m.isIncrement != nil {
		fields = append(fields, syscolumns.FieldIsIncrement)
	}
	if m.isRequired != nil {
		fields = append(fields, syscolumns.FieldIsRequired)
	}
	if m.isInsert != nil {
		fields = append(fields, syscolumns.FieldIsInsert)
	}
	if m.isEdit != nil {
		fields = append(fields, syscolumns.FieldIsEdit)
	}
	if m.isList != nil {
		fields = append(fields, syscolumns.FieldIsList)
	}
	if m.isQuery != nil {
		fields = append(fields, syscolumns.FieldIsQuery)
	}
	if m.queryType != nil {
		fields = append(fields, syscolumns.FieldQueryType)
	}
	if m.htmlType != nil {
		fields = append(fields, syscolumns.FieldHtmlType)
	}
	if m.dictType != nil {
		fields = append(fields, syscolumns.FieldDictType)
	}
	if m.sort != nil {
		fields = append(fields, syscolumns.FieldSort)
	}
	if m.list != nil {
		fields = append(fields, syscolumns.FieldList)
	}
	if m.pk != nil {
		fields = append(fields, syscolumns.FieldPk)
	}
	if m.required != nil {
		fields = append(fields, syscolumns.FieldRequired)
	}
	if m.superColumn != nil {
		fields = append(fields, syscolumns.FieldSuperColumn)
	}
	if m.usableColumn != nil {
		fields = append(fields, syscolumns.FieldUsableColumn)
	}
	if m.increment != nil {
		fields = append(fields, syscolumns.FieldIncrement)
	}
	if m.insert != nil {
		fields = append(fields, syscolumns.FieldInsert)
	}
	if m.edit != nil {
		fields = append(fields, syscolumns.FieldEdit)
	}
	if m.query != nil {
		fields = append(fields, syscolumns.FieldQuery)
	}
	if m.remark != nil {
		fields = append(fields, syscolumns.FieldRemark)
	}
	if m.fkLabelName != nil {
		fields = append(fields, syscolumns.FieldFkLabelName)
	}
	if m.createdAt != nil {
		fields = append(fields, syscolumns.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, syscolumns.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, syscolumns.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, syscolumns.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, syscolumns.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysColumnsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case syscolumns.FieldColumnId:
		return m.ColumnId()
	case syscolumns.FieldColumnName:
		return m.ColumnName()
	case syscolumns.FieldColumnComment:
		return m.ColumnComment()
	case syscolumns.FieldColumnType:
		return m.ColumnType()
	case syscolumns.FieldGoType:
		return m.GoType()
	case syscolumns.FieldGoField:
		return m.GoField()
	case syscolumns.FieldJsonField:
		return m.JsonField()
	case syscolumns.FieldIsPk:
		return m.IsPk()
	case syscolumns.FieldIsIncrement:
		return m.IsIncrement()
	case syscolumns.FieldIsRequired:
		return m.IsRequired()
	case syscolumns.FieldIsInsert:
		return m.IsInsert()
	case syscolumns.FieldIsEdit:
		return m.IsEdit()
	case syscolumns.FieldIsList:
		return m.IsList()
	case syscolumns.FieldIsQuery:
		return m.IsQuery()
	case syscolumns.FieldQueryType:
		return m.QueryType()
	case syscolumns.FieldHtmlType:
		return m.HtmlType()
	case syscolumns.FieldDictType:
		return m.DictType()
	case syscolumns.FieldSort:
		return m.Sort()
	case syscolumns.FieldList:
		return m.List()
	case syscolumns.FieldPk:
		return m.Pk()
	case syscolumns.FieldRequired:
		return m.Required()
	case syscolumns.FieldSuperColumn:
		return m.SuperColumn()
	case syscolumns.FieldUsableColumn:
		return m.UsableColumn()
	case syscolumns.FieldIncrement:
		return m.Increment()
	case syscolumns.FieldInsert:
		return m.Insert()
	case syscolumns.FieldEdit:
		return m.Edit()
	case syscolumns.FieldQuery:
		return m.Query()
	case syscolumns.FieldRemark:
		return m.Remark()
	case syscolumns.FieldFkLabelName:
		return m.FkLabelName()
	case syscolumns.FieldCreatedAt:
		return m.CreatedAt()
	case syscolumns.FieldUpdatedAt:
		return m.UpdatedAt()
	case syscolumns.FieldCreateBy:
		return m.CreateBy()
	case syscolumns.FieldUpdateBy:
		return m.UpdateBy()
	case syscolumns.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysColumnsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case syscolumns.FieldColumnId:
		return m.OldColumnId(ctx)
	case syscolumns.FieldColumnName:
		return m.OldColumnName(ctx)
	case syscolumns.FieldColumnComment:
		return m.OldColumnComment(ctx)
	case syscolumns.FieldColumnType:
		return m.OldColumnType(ctx)
	case syscolumns.FieldGoType:
		return m.OldGoType(ctx)
	case syscolumns.FieldGoField:
		return m.OldGoField(ctx)
	case syscolumns.FieldJsonField:
		return m.OldJsonField(ctx)
	case syscolumns.FieldIsPk:
		return m.OldIsPk(ctx)
	case syscolumns.FieldIsIncrement:
		return m.OldIsIncrement(ctx)
	case syscolumns.FieldIsRequired:
		return m.OldIsRequired(ctx)
	case syscolumns.FieldIsInsert:
		return m.OldIsInsert(ctx)
	case syscolumns.FieldIsEdit:
		return m.OldIsEdit(ctx)
	case syscolumns.FieldIsList:
		return m.OldIsList(ctx)
	case syscolumns.FieldIsQuery:
		return m.OldIsQuery(ctx)
	case syscolumns.FieldQueryType:
		return m.OldQueryType(ctx)
	case syscolumns.FieldHtmlType:
		return m.OldHtmlType(ctx)
	case syscolumns.FieldDictType:
		return m.OldDictType(ctx)
	case syscolumns.FieldSort:
		return m.OldSort(ctx)
	case syscolumns.FieldList:
		return m.OldList(ctx)
	case syscolumns.FieldPk:
		return m.OldPk(ctx)
	case syscolumns.FieldRequired:
		return m.OldRequired(ctx)
	case syscolumns.FieldSuperColumn:
		return m.OldSuperColumn(ctx)
	case syscolumns.FieldUsableColumn:
		return m.OldUsableColumn(ctx)
	case syscolumns.FieldIncrement:
		return m.OldIncrement(ctx)
	case syscolumns.FieldInsert:
		return m.OldInsert(ctx)
	case syscolumns.FieldEdit:
		return m.OldEdit(ctx)
	case syscolumns.FieldQuery:
		return m.OldQuery(ctx)
	case syscolumns.FieldRemark:
		return m.OldRemark(ctx)
	case syscolumns.FieldFkLabelName:
		return m.OldFkLabelName(ctx)
	case syscolumns.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case syscolumns.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case syscolumns.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case syscolumns.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case syscolumns.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysColumns field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysColumnsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case syscolumns.FieldColumnId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColumnId(v)
		return nil
	case syscolumns.FieldColumnName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColumnName(v)
		return nil
	case syscolumns.FieldColumnComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColumnComment(v)
		return nil
	case syscolumns.FieldColumnType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColumnType(v)
		return nil
	case syscolumns.FieldGoType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoType(v)
		return nil
	case syscolumns.FieldGoField:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoField(v)
		return nil
	case syscolumns.FieldJsonField:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJsonField(v)
		return nil
	case syscolumns.FieldIsPk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPk(v)
		return nil
	case syscolumns.FieldIsIncrement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsIncrement(v)
		return nil
	case syscolumns.FieldIsRequired:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRequired(v)
		return nil
	case syscolumns.FieldIsInsert:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsInsert(v)
		return nil
	case syscolumns.FieldIsEdit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEdit(v)
		return nil
	case syscolumns.FieldIsList:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsList(v)
		return nil
	case syscolumns.FieldIsQuery:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsQuery(v)
		return nil
	case syscolumns.FieldQueryType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQueryType(v)
		return nil
	case syscolumns.FieldHtmlType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHtmlType(v)
		return nil
	case syscolumns.FieldDictType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictType(v)
		return nil
	case syscolumns.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case syscolumns.FieldList:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetList(v)
		return nil
	case syscolumns.FieldPk:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPk(v)
		return nil
	case syscolumns.FieldRequired:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequired(v)
		return nil
	case syscolumns.FieldSuperColumn:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuperColumn(v)
		return nil
	case syscolumns.FieldUsableColumn:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsableColumn(v)
		return nil
	case syscolumns.FieldIncrement:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIncrement(v)
		return nil
	case syscolumns.FieldInsert:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInsert(v)
		return nil
	case syscolumns.FieldEdit:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEdit(v)
		return nil
	case syscolumns.FieldQuery:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuery(v)
		return nil
	case syscolumns.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case syscolumns.FieldFkLabelName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkLabelName(v)
		return nil
	case syscolumns.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case syscolumns.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case syscolumns.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case syscolumns.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case syscolumns.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysColumns field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysColumnsMutation) AddedFields() []string {
	var fields []string
	if m.addcolumnId != nil {
		fields = append(fields, syscolumns.FieldColumnId)
	}
	if m.addsort != nil {
		fields = append(fields, syscolumns.FieldSort)
	}
	if m.addcreateBy != nil {
		fields = append(fields, syscolumns.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, syscolumns.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, syscolumns.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysColumnsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case syscolumns.FieldColumnId:
		return m.AddedColumnId()
	case syscolumns.FieldSort:
		return m.AddedSort()
	case syscolumns.FieldCreateBy:
		return m.AddedCreateBy()
	case syscolumns.FieldUpdateBy:
		return m.AddedUpdateBy()
	case syscolumns.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysColumnsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case syscolumns.FieldColumnId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddColumnId(v)
		return nil
	case syscolumns.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case syscolumns.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case syscolumns.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case syscolumns.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysColumns numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysColumnsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(syscolumns.FieldColumnName) {
		fields = append(fields, syscolumns.FieldColumnName)
	}
	if m.FieldCleared(syscolumns.FieldColumnComment) {
		fields = append(fields, syscolumns.FieldColumnComment)
	}
	if m.FieldCleared(syscolumns.FieldColumnType) {
		fields = append(fields, syscolumns.FieldColumnType)
	}
	if m.FieldCleared(syscolumns.FieldGoType) {
		fields = append(fields, syscolumns.FieldGoType)
	}
	if m.FieldCleared(syscolumns.FieldGoField) {
		fields = append(fields, syscolumns.FieldGoField)
	}
	if m.FieldCleared(syscolumns.FieldJsonField) {
		fields = append(fields, syscolumns.FieldJsonField)
	}
	if m.FieldCleared(syscolumns.FieldIsPk) {
		fields = append(fields, syscolumns.FieldIsPk)
	}
	if m.FieldCleared(syscolumns.FieldIsIncrement) {
		fields = append(fields, syscolumns.FieldIsIncrement)
	}
	if m.FieldCleared(syscolumns.FieldIsRequired) {
		fields = append(fields, syscolumns.FieldIsRequired)
	}
	if m.FieldCleared(syscolumns.FieldIsInsert) {
		fields = append(fields, syscolumns.FieldIsInsert)
	}
	if m.FieldCleared(syscolumns.FieldIsEdit) {
		fields = append(fields, syscolumns.FieldIsEdit)
	}
	if m.FieldCleared(syscolumns.FieldIsList) {
		fields = append(fields, syscolumns.FieldIsList)
	}
	if m.FieldCleared(syscolumns.FieldIsQuery) {
		fields = append(fields, syscolumns.FieldIsQuery)
	}
	if m.FieldCleared(syscolumns.FieldQueryType) {
		fields = append(fields, syscolumns.FieldQueryType)
	}
	if m.FieldCleared(syscolumns.FieldHtmlType) {
		fields = append(fields, syscolumns.FieldHtmlType)
	}
	if m.FieldCleared(syscolumns.FieldDictType) {
		fields = append(fields, syscolumns.FieldDictType)
	}
	if m.FieldCleared(syscolumns.FieldSort) {
		fields = append(fields, syscolumns.FieldSort)
	}
	if m.FieldCleared(syscolumns.FieldList) {
		fields = append(fields, syscolumns.FieldList)
	}
	if m.FieldCleared(syscolumns.FieldPk) {
		fields = append(fields, syscolumns.FieldPk)
	}
	if m.FieldCleared(syscolumns.FieldRequired) {
		fields = append(fields, syscolumns.FieldRequired)
	}
	if m.FieldCleared(syscolumns.FieldSuperColumn) {
		fields = append(fields, syscolumns.FieldSuperColumn)
	}
	if m.FieldCleared(syscolumns.FieldUsableColumn) {
		fields = append(fields, syscolumns.FieldUsableColumn)
	}
	if m.FieldCleared(syscolumns.FieldIncrement) {
		fields = append(fields, syscolumns.FieldIncrement)
	}
	if m.FieldCleared(syscolumns.FieldInsert) {
		fields = append(fields, syscolumns.FieldInsert)
	}
	if m.FieldCleared(syscolumns.FieldEdit) {
		fields = append(fields, syscolumns.FieldEdit)
	}
	if m.FieldCleared(syscolumns.FieldQuery) {
		fields = append(fields, syscolumns.FieldQuery)
	}
	if m.FieldCleared(syscolumns.FieldRemark) {
		fields = append(fields, syscolumns.FieldRemark)
	}
	if m.FieldCleared(syscolumns.FieldFkLabelName) {
		fields = append(fields, syscolumns.FieldFkLabelName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysColumnsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysColumnsMutation) ClearField(name string) error {
	switch name {
	case syscolumns.FieldColumnName:
		m.ClearColumnName()
		return nil
	case syscolumns.FieldColumnComment:
		m.ClearColumnComment()
		return nil
	case syscolumns.FieldColumnType:
		m.ClearColumnType()
		return nil
	case syscolumns.FieldGoType:
		m.ClearGoType()
		return nil
	case syscolumns.FieldGoField:
		m.ClearGoField()
		return nil
	case syscolumns.FieldJsonField:
		m.ClearJsonField()
		return nil
	case syscolumns.FieldIsPk:
		m.ClearIsPk()
		return nil
	case syscolumns.FieldIsIncrement:
		m.ClearIsIncrement()
		return nil
	case syscolumns.FieldIsRequired:
		m.ClearIsRequired()
		return nil
	case syscolumns.FieldIsInsert:
		m.ClearIsInsert()
		return nil
	case syscolumns.FieldIsEdit:
		m.ClearIsEdit()
		return nil
	case syscolumns.FieldIsList:
		m.ClearIsList()
		return nil
	case syscolumns.FieldIsQuery:
		m.ClearIsQuery()
		return nil
	case syscolumns.FieldQueryType:
		m.ClearQueryType()
		return nil
	case syscolumns.FieldHtmlType:
		m.ClearHtmlType()
		return nil
	case syscolumns.FieldDictType:
		m.ClearDictType()
		return nil
	case syscolumns.FieldSort:
		m.ClearSort()
		return nil
	case syscolumns.FieldList:
		m.ClearList()
		return nil
	case syscolumns.FieldPk:
		m.ClearPk()
		return nil
	case syscolumns.FieldRequired:
		m.ClearRequired()
		return nil
	case syscolumns.FieldSuperColumn:
		m.ClearSuperColumn()
		return nil
	case syscolumns.FieldUsableColumn:
		m.ClearUsableColumn()
		return nil
	case syscolumns.FieldIncrement:
		m.ClearIncrement()
		return nil
	case syscolumns.FieldInsert:
		m.ClearInsert()
		return nil
	case syscolumns.FieldEdit:
		m.ClearEdit()
		return nil
	case syscolumns.FieldQuery:
		m.ClearQuery()
		return nil
	case syscolumns.FieldRemark:
		m.ClearRemark()
		return nil
	case syscolumns.FieldFkLabelName:
		m.ClearFkLabelName()
		return nil
	}
	return fmt.Errorf("unknown SysColumns nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysColumnsMutation) ResetField(name string) error {
	switch name {
	case syscolumns.FieldColumnId:
		m.ResetColumnId()
		return nil
	case syscolumns.FieldColumnName:
		m.ResetColumnName()
		return nil
	case syscolumns.FieldColumnComment:
		m.ResetColumnComment()
		return nil
	case syscolumns.FieldColumnType:
		m.ResetColumnType()
		return nil
	case syscolumns.FieldGoType:
		m.ResetGoType()
		return nil
	case syscolumns.FieldGoField:
		m.ResetGoField()
		return nil
	case syscolumns.FieldJsonField:
		m.ResetJsonField()
		return nil
	case syscolumns.FieldIsPk:
		m.ResetIsPk()
		return nil
	case syscolumns.FieldIsIncrement:
		m.ResetIsIncrement()
		return nil
	case syscolumns.FieldIsRequired:
		m.ResetIsRequired()
		return nil
	case syscolumns.FieldIsInsert:
		m.ResetIsInsert()
		return nil
	case syscolumns.FieldIsEdit:
		m.ResetIsEdit()
		return nil
	case syscolumns.FieldIsList:
		m.ResetIsList()
		return nil
	case syscolumns.FieldIsQuery:
		m.ResetIsQuery()
		return nil
	case syscolumns.FieldQueryType:
		m.ResetQueryType()
		return nil
	case syscolumns.FieldHtmlType:
		m.ResetHtmlType()
		return nil
	case syscolumns.FieldDictType:
		m.ResetDictType()
		return nil
	case syscolumns.FieldSort:
		m.ResetSort()
		return nil
	case syscolumns.FieldList:
		m.ResetList()
		return nil
	case syscolumns.FieldPk:
		m.ResetPk()
		return nil
	case syscolumns.FieldRequired:
		m.ResetRequired()
		return nil
	case syscolumns.FieldSuperColumn:
		m.ResetSuperColumn()
		return nil
	case syscolumns.FieldUsableColumn:
		m.ResetUsableColumn()
		return nil
	case syscolumns.FieldIncrement:
		m.ResetIncrement()
		return nil
	case syscolumns.FieldInsert:
		m.ResetInsert()
		return nil
	case syscolumns.FieldEdit:
		m.ResetEdit()
		return nil
	case syscolumns.FieldQuery:
		m.ResetQuery()
		return nil
	case syscolumns.FieldRemark:
		m.ResetRemark()
		return nil
	case syscolumns.FieldFkLabelName:
		m.ResetFkLabelName()
		return nil
	case syscolumns.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case syscolumns.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case syscolumns.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case syscolumns.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case syscolumns.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysColumns field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysColumnsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysColumnsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysColumnsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysColumnsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysColumnsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysColumnsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysColumnsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysColumns unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysColumnsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysColumns edge %s", name)
}

// SysConfigMutation represents an operation that mutates the SysConfig nodes in the graph.
type SysConfigMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	configName    *string
	configKey     *string
	configValue   *string
	configType    *string
	isFrontend    *int32
	addisFrontend *int32
	state         *sysconfig.State
	remark        *string
	createdAt     *time.Time
	updatedAt     *time.Time
	createBy      *int64
	addcreateBy   *int64
	updateBy      *int64
	addupdateBy   *int64
	tenantId      *int64
	addtenantId   *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysConfig, error)
	predicates    []predicate.SysConfig
}

var _ ent.Mutation = (*SysConfigMutation)(nil)

// sysconfigOption allows management of the mutation configuration using functional options.
type sysconfigOption func(*SysConfigMutation)

// newSysConfigMutation creates new mutation for the SysConfig entity.
func newSysConfigMutation(c config, op Op, opts ...sysconfigOption) *SysConfigMutation {
	m := &SysConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeSysConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysConfigID sets the ID field of the mutation.
func withSysConfigID(id int64) sysconfigOption {
	return func(m *SysConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *SysConfig
		)
		m.oldValue = func(ctx context.Context) (*SysConfig, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysConfig sets the old SysConfig of the mutation.
func withSysConfig(node *SysConfig) sysconfigOption {
	return func(m *SysConfigMutation) {
		m.oldValue = func(context.Context) (*SysConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysConfigMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetConfigName sets the "configName" field.
func (m *SysConfigMutation) SetConfigName(s string) {
	m.configName = &s
}

// ConfigName returns the value of the "configName" field in the mutation.
func (m *SysConfigMutation) ConfigName() (r string, exists bool) {
	v := m.configName
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigName returns the old "configName" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldConfigName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfigName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfigName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigName: %w", err)
	}
	return oldValue.ConfigName, nil
}

// ClearConfigName clears the value of the "configName" field.
func (m *SysConfigMutation) ClearConfigName() {
	m.configName = nil
	m.clearedFields[sysconfig.FieldConfigName] = struct{}{}
}

// ConfigNameCleared returns if the "configName" field was cleared in this mutation.
func (m *SysConfigMutation) ConfigNameCleared() bool {
	_, ok := m.clearedFields[sysconfig.FieldConfigName]
	return ok
}

// ResetConfigName resets all changes to the "configName" field.
func (m *SysConfigMutation) ResetConfigName() {
	m.configName = nil
	delete(m.clearedFields, sysconfig.FieldConfigName)
}

// SetConfigKey sets the "configKey" field.
func (m *SysConfigMutation) SetConfigKey(s string) {
	m.configKey = &s
}

// ConfigKey returns the value of the "configKey" field in the mutation.
func (m *SysConfigMutation) ConfigKey() (r string, exists bool) {
	v := m.configKey
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigKey returns the old "configKey" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldConfigKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfigKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfigKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigKey: %w", err)
	}
	return oldValue.ConfigKey, nil
}

// ClearConfigKey clears the value of the "configKey" field.
func (m *SysConfigMutation) ClearConfigKey() {
	m.configKey = nil
	m.clearedFields[sysconfig.FieldConfigKey] = struct{}{}
}

// ConfigKeyCleared returns if the "configKey" field was cleared in this mutation.
func (m *SysConfigMutation) ConfigKeyCleared() bool {
	_, ok := m.clearedFields[sysconfig.FieldConfigKey]
	return ok
}

// ResetConfigKey resets all changes to the "configKey" field.
func (m *SysConfigMutation) ResetConfigKey() {
	m.configKey = nil
	delete(m.clearedFields, sysconfig.FieldConfigKey)
}

// SetConfigValue sets the "configValue" field.
func (m *SysConfigMutation) SetConfigValue(s string) {
	m.configValue = &s
}

// ConfigValue returns the value of the "configValue" field in the mutation.
func (m *SysConfigMutation) ConfigValue() (r string, exists bool) {
	v := m.configValue
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigValue returns the old "configValue" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldConfigValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfigValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfigValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigValue: %w", err)
	}
	return oldValue.ConfigValue, nil
}

// ClearConfigValue clears the value of the "configValue" field.
func (m *SysConfigMutation) ClearConfigValue() {
	m.configValue = nil
	m.clearedFields[sysconfig.FieldConfigValue] = struct{}{}
}

// ConfigValueCleared returns if the "configValue" field was cleared in this mutation.
func (m *SysConfigMutation) ConfigValueCleared() bool {
	_, ok := m.clearedFields[sysconfig.FieldConfigValue]
	return ok
}

// ResetConfigValue resets all changes to the "configValue" field.
func (m *SysConfigMutation) ResetConfigValue() {
	m.configValue = nil
	delete(m.clearedFields, sysconfig.FieldConfigValue)
}

// SetConfigType sets the "configType" field.
func (m *SysConfigMutation) SetConfigType(s string) {
	m.configType = &s
}

// ConfigType returns the value of the "configType" field in the mutation.
func (m *SysConfigMutation) ConfigType() (r string, exists bool) {
	v := m.configType
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigType returns the old "configType" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldConfigType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfigType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfigType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigType: %w", err)
	}
	return oldValue.ConfigType, nil
}

// ClearConfigType clears the value of the "configType" field.
func (m *SysConfigMutation) ClearConfigType() {
	m.configType = nil
	m.clearedFields[sysconfig.FieldConfigType] = struct{}{}
}

// ConfigTypeCleared returns if the "configType" field was cleared in this mutation.
func (m *SysConfigMutation) ConfigTypeCleared() bool {
	_, ok := m.clearedFields[sysconfig.FieldConfigType]
	return ok
}

// ResetConfigType resets all changes to the "configType" field.
func (m *SysConfigMutation) ResetConfigType() {
	m.configType = nil
	delete(m.clearedFields, sysconfig.FieldConfigType)
}

// SetIsFrontend sets the "isFrontend" field.
func (m *SysConfigMutation) SetIsFrontend(i int32) {
	m.isFrontend = &i
	m.addisFrontend = nil
}

// IsFrontend returns the value of the "isFrontend" field in the mutation.
func (m *SysConfigMutation) IsFrontend() (r int32, exists bool) {
	v := m.isFrontend
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFrontend returns the old "isFrontend" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldIsFrontend(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsFrontend is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsFrontend requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFrontend: %w", err)
	}
	return oldValue.IsFrontend, nil
}

// AddIsFrontend adds i to the "isFrontend" field.
func (m *SysConfigMutation) AddIsFrontend(i int32) {
	if m.addisFrontend != nil {
		*m.addisFrontend += i
	} else {
		m.addisFrontend = &i
	}
}

// AddedIsFrontend returns the value that was added to the "isFrontend" field in this mutation.
func (m *SysConfigMutation) AddedIsFrontend() (r int32, exists bool) {
	v := m.addisFrontend
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsFrontend clears the value of the "isFrontend" field.
func (m *SysConfigMutation) ClearIsFrontend() {
	m.isFrontend = nil
	m.addisFrontend = nil
	m.clearedFields[sysconfig.FieldIsFrontend] = struct{}{}
}

// IsFrontendCleared returns if the "isFrontend" field was cleared in this mutation.
func (m *SysConfigMutation) IsFrontendCleared() bool {
	_, ok := m.clearedFields[sysconfig.FieldIsFrontend]
	return ok
}

// ResetIsFrontend resets all changes to the "isFrontend" field.
func (m *SysConfigMutation) ResetIsFrontend() {
	m.isFrontend = nil
	m.addisFrontend = nil
	delete(m.clearedFields, sysconfig.FieldIsFrontend)
}

// SetState sets the "state" field.
func (m *SysConfigMutation) SetState(s sysconfig.State) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *SysConfigMutation) State() (r sysconfig.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldState(ctx context.Context) (v sysconfig.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *SysConfigMutation) ResetState() {
	m.state = nil
}

// SetRemark sets the "remark" field.
func (m *SysConfigMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysConfigMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysConfigMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysconfig.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysConfigMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysconfig.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysConfigMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysconfig.FieldRemark)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysConfigMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysConfigMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysConfigMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysConfigMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysConfigMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysConfigMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysConfigMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysConfigMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysConfigMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysConfigMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysConfigMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysConfigMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysConfigMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysConfigMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysConfigMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysConfigMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysConfigMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysConfigMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysConfig entity.
// If the SysConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysConfigMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysConfigMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysConfigMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysConfigMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// Where appends a list predicates to the SysConfigMutation builder.
func (m *SysConfigMutation) Where(ps ...predicate.SysConfig) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysConfig).
func (m *SysConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysConfigMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.configName != nil {
		fields = append(fields, sysconfig.FieldConfigName)
	}
	if m.configKey != nil {
		fields = append(fields, sysconfig.FieldConfigKey)
	}
	if m.configValue != nil {
		fields = append(fields, sysconfig.FieldConfigValue)
	}
	if m.configType != nil {
		fields = append(fields, sysconfig.FieldConfigType)
	}
	if m.isFrontend != nil {
		fields = append(fields, sysconfig.FieldIsFrontend)
	}
	if m.state != nil {
		fields = append(fields, sysconfig.FieldState)
	}
	if m.remark != nil {
		fields = append(fields, sysconfig.FieldRemark)
	}
	if m.createdAt != nil {
		fields = append(fields, sysconfig.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysconfig.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysconfig.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysconfig.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysconfig.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysconfig.FieldConfigName:
		return m.ConfigName()
	case sysconfig.FieldConfigKey:
		return m.ConfigKey()
	case sysconfig.FieldConfigValue:
		return m.ConfigValue()
	case sysconfig.FieldConfigType:
		return m.ConfigType()
	case sysconfig.FieldIsFrontend:
		return m.IsFrontend()
	case sysconfig.FieldState:
		return m.State()
	case sysconfig.FieldRemark:
		return m.Remark()
	case sysconfig.FieldCreatedAt:
		return m.CreatedAt()
	case sysconfig.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysconfig.FieldCreateBy:
		return m.CreateBy()
	case sysconfig.FieldUpdateBy:
		return m.UpdateBy()
	case sysconfig.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysconfig.FieldConfigName:
		return m.OldConfigName(ctx)
	case sysconfig.FieldConfigKey:
		return m.OldConfigKey(ctx)
	case sysconfig.FieldConfigValue:
		return m.OldConfigValue(ctx)
	case sysconfig.FieldConfigType:
		return m.OldConfigType(ctx)
	case sysconfig.FieldIsFrontend:
		return m.OldIsFrontend(ctx)
	case sysconfig.FieldState:
		return m.OldState(ctx)
	case sysconfig.FieldRemark:
		return m.OldRemark(ctx)
	case sysconfig.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysconfig.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysconfig.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysconfig.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysconfig.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysconfig.FieldConfigName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigName(v)
		return nil
	case sysconfig.FieldConfigKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigKey(v)
		return nil
	case sysconfig.FieldConfigValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigValue(v)
		return nil
	case sysconfig.FieldConfigType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigType(v)
		return nil
	case sysconfig.FieldIsFrontend:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFrontend(v)
		return nil
	case sysconfig.FieldState:
		v, ok := value.(sysconfig.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case sysconfig.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysconfig.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysconfig.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysconfig.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysconfig.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysconfig.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysConfigMutation) AddedFields() []string {
	var fields []string
	if m.addisFrontend != nil {
		fields = append(fields, sysconfig.FieldIsFrontend)
	}
	if m.addcreateBy != nil {
		fields = append(fields, sysconfig.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysconfig.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysconfig.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysconfig.FieldIsFrontend:
		return m.AddedIsFrontend()
	case sysconfig.FieldCreateBy:
		return m.AddedCreateBy()
	case sysconfig.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysconfig.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysconfig.FieldIsFrontend:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsFrontend(v)
		return nil
	case sysconfig.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysconfig.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysconfig.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysConfigMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysconfig.FieldConfigName) {
		fields = append(fields, sysconfig.FieldConfigName)
	}
	if m.FieldCleared(sysconfig.FieldConfigKey) {
		fields = append(fields, sysconfig.FieldConfigKey)
	}
	if m.FieldCleared(sysconfig.FieldConfigValue) {
		fields = append(fields, sysconfig.FieldConfigValue)
	}
	if m.FieldCleared(sysconfig.FieldConfigType) {
		fields = append(fields, sysconfig.FieldConfigType)
	}
	if m.FieldCleared(sysconfig.FieldIsFrontend) {
		fields = append(fields, sysconfig.FieldIsFrontend)
	}
	if m.FieldCleared(sysconfig.FieldRemark) {
		fields = append(fields, sysconfig.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysConfigMutation) ClearField(name string) error {
	switch name {
	case sysconfig.FieldConfigName:
		m.ClearConfigName()
		return nil
	case sysconfig.FieldConfigKey:
		m.ClearConfigKey()
		return nil
	case sysconfig.FieldConfigValue:
		m.ClearConfigValue()
		return nil
	case sysconfig.FieldConfigType:
		m.ClearConfigType()
		return nil
	case sysconfig.FieldIsFrontend:
		m.ClearIsFrontend()
		return nil
	case sysconfig.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown SysConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysConfigMutation) ResetField(name string) error {
	switch name {
	case sysconfig.FieldConfigName:
		m.ResetConfigName()
		return nil
	case sysconfig.FieldConfigKey:
		m.ResetConfigKey()
		return nil
	case sysconfig.FieldConfigValue:
		m.ResetConfigValue()
		return nil
	case sysconfig.FieldConfigType:
		m.ResetConfigType()
		return nil
	case sysconfig.FieldIsFrontend:
		m.ResetIsFrontend()
		return nil
	case sysconfig.FieldState:
		m.ResetState()
		return nil
	case sysconfig.FieldRemark:
		m.ResetRemark()
		return nil
	case sysconfig.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysconfig.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysconfig.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysconfig.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysconfig.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysConfig edge %s", name)
}

// SysDeptMutation represents an operation that mutates the SysDept nodes in the graph.
type SysDeptMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	deptPath       *string
	deptName       *string
	sort           *int32
	addsort        *int32
	leader         *string
	phone          *string
	email          *string
	status         *int32
	addstatus      *int32
	createdAt      *time.Time
	updatedAt      *time.Time
	createBy       *int64
	addcreateBy    *int64
	updateBy       *int64
	addupdateBy    *int64
	tenantId       *int64
	addtenantId    *int64
	clearedFields  map[string]struct{}
	parent         *int64
	clearedparent  bool
	childes        map[int64]struct{}
	removedchildes map[int64]struct{}
	clearedchildes bool
	users          map[int64]struct{}
	removedusers   map[int64]struct{}
	clearedusers   bool
	done           bool
	oldValue       func(context.Context) (*SysDept, error)
	predicates     []predicate.SysDept
}

var _ ent.Mutation = (*SysDeptMutation)(nil)

// sysdeptOption allows management of the mutation configuration using functional options.
type sysdeptOption func(*SysDeptMutation)

// newSysDeptMutation creates new mutation for the SysDept entity.
func newSysDeptMutation(c config, op Op, opts ...sysdeptOption) *SysDeptMutation {
	m := &SysDeptMutation{
		config:        c,
		op:            op,
		typ:           TypeSysDept,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysDeptID sets the ID field of the mutation.
func withSysDeptID(id int64) sysdeptOption {
	return func(m *SysDeptMutation) {
		var (
			err   error
			once  sync.Once
			value *SysDept
		)
		m.oldValue = func(ctx context.Context) (*SysDept, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysDept.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysDept sets the old SysDept of the mutation.
func withSysDept(node *SysDept) sysdeptOption {
	return func(m *SysDeptMutation) {
		m.oldValue = func(context.Context) (*SysDept, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysDeptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysDeptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysDeptMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDeptPath sets the "deptPath" field.
func (m *SysDeptMutation) SetDeptPath(s string) {
	m.deptPath = &s
}

// DeptPath returns the value of the "deptPath" field in the mutation.
func (m *SysDeptMutation) DeptPath() (r string, exists bool) {
	v := m.deptPath
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptPath returns the old "deptPath" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldDeptPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeptPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeptPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptPath: %w", err)
	}
	return oldValue.DeptPath, nil
}

// ClearDeptPath clears the value of the "deptPath" field.
func (m *SysDeptMutation) ClearDeptPath() {
	m.deptPath = nil
	m.clearedFields[sysdept.FieldDeptPath] = struct{}{}
}

// DeptPathCleared returns if the "deptPath" field was cleared in this mutation.
func (m *SysDeptMutation) DeptPathCleared() bool {
	_, ok := m.clearedFields[sysdept.FieldDeptPath]
	return ok
}

// ResetDeptPath resets all changes to the "deptPath" field.
func (m *SysDeptMutation) ResetDeptPath() {
	m.deptPath = nil
	delete(m.clearedFields, sysdept.FieldDeptPath)
}

// SetDeptName sets the "deptName" field.
func (m *SysDeptMutation) SetDeptName(s string) {
	m.deptName = &s
}

// DeptName returns the value of the "deptName" field in the mutation.
func (m *SysDeptMutation) DeptName() (r string, exists bool) {
	v := m.deptName
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptName returns the old "deptName" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldDeptName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeptName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeptName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptName: %w", err)
	}
	return oldValue.DeptName, nil
}

// ClearDeptName clears the value of the "deptName" field.
func (m *SysDeptMutation) ClearDeptName() {
	m.deptName = nil
	m.clearedFields[sysdept.FieldDeptName] = struct{}{}
}

// DeptNameCleared returns if the "deptName" field was cleared in this mutation.
func (m *SysDeptMutation) DeptNameCleared() bool {
	_, ok := m.clearedFields[sysdept.FieldDeptName]
	return ok
}

// ResetDeptName resets all changes to the "deptName" field.
func (m *SysDeptMutation) ResetDeptName() {
	m.deptName = nil
	delete(m.clearedFields, sysdept.FieldDeptName)
}

// SetSort sets the "sort" field.
func (m *SysDeptMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysDeptMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysDeptMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysDeptMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ClearSort clears the value of the "sort" field.
func (m *SysDeptMutation) ClearSort() {
	m.sort = nil
	m.addsort = nil
	m.clearedFields[sysdept.FieldSort] = struct{}{}
}

// SortCleared returns if the "sort" field was cleared in this mutation.
func (m *SysDeptMutation) SortCleared() bool {
	_, ok := m.clearedFields[sysdept.FieldSort]
	return ok
}

// ResetSort resets all changes to the "sort" field.
func (m *SysDeptMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
	delete(m.clearedFields, sysdept.FieldSort)
}

// SetLeader sets the "leader" field.
func (m *SysDeptMutation) SetLeader(s string) {
	m.leader = &s
}

// Leader returns the value of the "leader" field in the mutation.
func (m *SysDeptMutation) Leader() (r string, exists bool) {
	v := m.leader
	if v == nil {
		return
	}
	return *v, true
}

// OldLeader returns the old "leader" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldLeader(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLeader is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLeader requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeader: %w", err)
	}
	return oldValue.Leader, nil
}

// ClearLeader clears the value of the "leader" field.
func (m *SysDeptMutation) ClearLeader() {
	m.leader = nil
	m.clearedFields[sysdept.FieldLeader] = struct{}{}
}

// LeaderCleared returns if the "leader" field was cleared in this mutation.
func (m *SysDeptMutation) LeaderCleared() bool {
	_, ok := m.clearedFields[sysdept.FieldLeader]
	return ok
}

// ResetLeader resets all changes to the "leader" field.
func (m *SysDeptMutation) ResetLeader() {
	m.leader = nil
	delete(m.clearedFields, sysdept.FieldLeader)
}

// SetPhone sets the "phone" field.
func (m *SysDeptMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *SysDeptMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *SysDeptMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[sysdept.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *SysDeptMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[sysdept.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *SysDeptMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, sysdept.FieldPhone)
}

// SetEmail sets the "email" field.
func (m *SysDeptMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *SysDeptMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *SysDeptMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[sysdept.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *SysDeptMutation) EmailCleared() bool {
	_, ok := m.clearedFields[sysdept.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *SysDeptMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, sysdept.FieldEmail)
}

// SetStatus sets the "status" field.
func (m *SysDeptMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *SysDeptMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *SysDeptMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *SysDeptMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *SysDeptMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[sysdept.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysDeptMutation) StatusCleared() bool {
	_, ok := m.clearedFields[sysdept.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysDeptMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, sysdept.FieldStatus)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysDeptMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysDeptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysDeptMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysDeptMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysDeptMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysDeptMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysDeptMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysDeptMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysDeptMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysDeptMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysDeptMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysDeptMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysDeptMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysDeptMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysDeptMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysDeptMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysDeptMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysDeptMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysDept entity.
// If the SysDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDeptMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysDeptMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysDeptMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysDeptMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// SetParentID sets the "parent" edge to the SysDept entity by id.
func (m *SysDeptMutation) SetParentID(id int64) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the SysDept entity.
func (m *SysDeptMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the SysDept entity was cleared.
func (m *SysDeptMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *SysDeptMutation) ParentID() (id int64, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *SysDeptMutation) ParentIDs() (ids []int64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *SysDeptMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildeIDs adds the "childes" edge to the SysDept entity by ids.
func (m *SysDeptMutation) AddChildeIDs(ids ...int64) {
	if m.childes == nil {
		m.childes = make(map[int64]struct{})
	}
	for i := range ids {
		m.childes[ids[i]] = struct{}{}
	}
}

// ClearChildes clears the "childes" edge to the SysDept entity.
func (m *SysDeptMutation) ClearChildes() {
	m.clearedchildes = true
}

// ChildesCleared reports if the "childes" edge to the SysDept entity was cleared.
func (m *SysDeptMutation) ChildesCleared() bool {
	return m.clearedchildes
}

// RemoveChildeIDs removes the "childes" edge to the SysDept entity by IDs.
func (m *SysDeptMutation) RemoveChildeIDs(ids ...int64) {
	if m.removedchildes == nil {
		m.removedchildes = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.childes, ids[i])
		m.removedchildes[ids[i]] = struct{}{}
	}
}

// RemovedChildes returns the removed IDs of the "childes" edge to the SysDept entity.
func (m *SysDeptMutation) RemovedChildesIDs() (ids []int64) {
	for id := range m.removedchildes {
		ids = append(ids, id)
	}
	return
}

// ChildesIDs returns the "childes" edge IDs in the mutation.
func (m *SysDeptMutation) ChildesIDs() (ids []int64) {
	for id := range m.childes {
		ids = append(ids, id)
	}
	return
}

// ResetChildes resets all changes to the "childes" edge.
func (m *SysDeptMutation) ResetChildes() {
	m.childes = nil
	m.clearedchildes = false
	m.removedchildes = nil
}

// AddUserIDs adds the "users" edge to the SysUser entity by ids.
func (m *SysDeptMutation) AddUserIDs(ids ...int64) {
	if m.users == nil {
		m.users = make(map[int64]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the SysUser entity.
func (m *SysDeptMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the SysUser entity was cleared.
func (m *SysDeptMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the SysUser entity by IDs.
func (m *SysDeptMutation) RemoveUserIDs(ids ...int64) {
	if m.removedusers == nil {
		m.removedusers = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the SysUser entity.
func (m *SysDeptMutation) RemovedUsersIDs() (ids []int64) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *SysDeptMutation) UsersIDs() (ids []int64) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *SysDeptMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the SysDeptMutation builder.
func (m *SysDeptMutation) Where(ps ...predicate.SysDept) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysDeptMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysDept).
func (m *SysDeptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysDeptMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.deptPath != nil {
		fields = append(fields, sysdept.FieldDeptPath)
	}
	if m.deptName != nil {
		fields = append(fields, sysdept.FieldDeptName)
	}
	if m.sort != nil {
		fields = append(fields, sysdept.FieldSort)
	}
	if m.leader != nil {
		fields = append(fields, sysdept.FieldLeader)
	}
	if m.phone != nil {
		fields = append(fields, sysdept.FieldPhone)
	}
	if m.email != nil {
		fields = append(fields, sysdept.FieldEmail)
	}
	if m.status != nil {
		fields = append(fields, sysdept.FieldStatus)
	}
	if m.createdAt != nil {
		fields = append(fields, sysdept.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysdept.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysdept.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysdept.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysdept.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysDeptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysdept.FieldDeptPath:
		return m.DeptPath()
	case sysdept.FieldDeptName:
		return m.DeptName()
	case sysdept.FieldSort:
		return m.Sort()
	case sysdept.FieldLeader:
		return m.Leader()
	case sysdept.FieldPhone:
		return m.Phone()
	case sysdept.FieldEmail:
		return m.Email()
	case sysdept.FieldStatus:
		return m.Status()
	case sysdept.FieldCreatedAt:
		return m.CreatedAt()
	case sysdept.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysdept.FieldCreateBy:
		return m.CreateBy()
	case sysdept.FieldUpdateBy:
		return m.UpdateBy()
	case sysdept.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysDeptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysdept.FieldDeptPath:
		return m.OldDeptPath(ctx)
	case sysdept.FieldDeptName:
		return m.OldDeptName(ctx)
	case sysdept.FieldSort:
		return m.OldSort(ctx)
	case sysdept.FieldLeader:
		return m.OldLeader(ctx)
	case sysdept.FieldPhone:
		return m.OldPhone(ctx)
	case sysdept.FieldEmail:
		return m.OldEmail(ctx)
	case sysdept.FieldStatus:
		return m.OldStatus(ctx)
	case sysdept.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysdept.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysdept.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysdept.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysdept.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysDept field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDeptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysdept.FieldDeptPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptPath(v)
		return nil
	case sysdept.FieldDeptName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptName(v)
		return nil
	case sysdept.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysdept.FieldLeader:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeader(v)
		return nil
	case sysdept.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case sysdept.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case sysdept.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysdept.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysdept.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysdept.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysdept.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysdept.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysDept field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysDeptMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysdept.FieldSort)
	}
	if m.addstatus != nil {
		fields = append(fields, sysdept.FieldStatus)
	}
	if m.addcreateBy != nil {
		fields = append(fields, sysdept.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysdept.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysdept.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysDeptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysdept.FieldSort:
		return m.AddedSort()
	case sysdept.FieldStatus:
		return m.AddedStatus()
	case sysdept.FieldCreateBy:
		return m.AddedCreateBy()
	case sysdept.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysdept.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDeptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysdept.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case sysdept.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case sysdept.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysdept.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysdept.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysDept numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysDeptMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysdept.FieldDeptPath) {
		fields = append(fields, sysdept.FieldDeptPath)
	}
	if m.FieldCleared(sysdept.FieldDeptName) {
		fields = append(fields, sysdept.FieldDeptName)
	}
	if m.FieldCleared(sysdept.FieldSort) {
		fields = append(fields, sysdept.FieldSort)
	}
	if m.FieldCleared(sysdept.FieldLeader) {
		fields = append(fields, sysdept.FieldLeader)
	}
	if m.FieldCleared(sysdept.FieldPhone) {
		fields = append(fields, sysdept.FieldPhone)
	}
	if m.FieldCleared(sysdept.FieldEmail) {
		fields = append(fields, sysdept.FieldEmail)
	}
	if m.FieldCleared(sysdept.FieldStatus) {
		fields = append(fields, sysdept.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysDeptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysDeptMutation) ClearField(name string) error {
	switch name {
	case sysdept.FieldDeptPath:
		m.ClearDeptPath()
		return nil
	case sysdept.FieldDeptName:
		m.ClearDeptName()
		return nil
	case sysdept.FieldSort:
		m.ClearSort()
		return nil
	case sysdept.FieldLeader:
		m.ClearLeader()
		return nil
	case sysdept.FieldPhone:
		m.ClearPhone()
		return nil
	case sysdept.FieldEmail:
		m.ClearEmail()
		return nil
	case sysdept.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown SysDept nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysDeptMutation) ResetField(name string) error {
	switch name {
	case sysdept.FieldDeptPath:
		m.ResetDeptPath()
		return nil
	case sysdept.FieldDeptName:
		m.ResetDeptName()
		return nil
	case sysdept.FieldSort:
		m.ResetSort()
		return nil
	case sysdept.FieldLeader:
		m.ResetLeader()
		return nil
	case sysdept.FieldPhone:
		m.ResetPhone()
		return nil
	case sysdept.FieldEmail:
		m.ResetEmail()
		return nil
	case sysdept.FieldStatus:
		m.ResetStatus()
		return nil
	case sysdept.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysdept.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysdept.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysdept.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysdept.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysDept field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysDeptMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.parent != nil {
		edges = append(edges, sysdept.EdgeParent)
	}
	if m.childes != nil {
		edges = append(edges, sysdept.EdgeChildes)
	}
	if m.users != nil {
		edges = append(edges, sysdept.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysDeptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysdept.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case sysdept.EdgeChildes:
		ids := make([]ent.Value, 0, len(m.childes))
		for id := range m.childes {
			ids = append(ids, id)
		}
		return ids
	case sysdept.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysDeptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchildes != nil {
		edges = append(edges, sysdept.EdgeChildes)
	}
	if m.removedusers != nil {
		edges = append(edges, sysdept.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysDeptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sysdept.EdgeChildes:
		ids := make([]ent.Value, 0, len(m.removedchildes))
		for id := range m.removedchildes {
			ids = append(ids, id)
		}
		return ids
	case sysdept.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysDeptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedparent {
		edges = append(edges, sysdept.EdgeParent)
	}
	if m.clearedchildes {
		edges = append(edges, sysdept.EdgeChildes)
	}
	if m.clearedusers {
		edges = append(edges, sysdept.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysDeptMutation) EdgeCleared(name string) bool {
	switch name {
	case sysdept.EdgeParent:
		return m.clearedparent
	case sysdept.EdgeChildes:
		return m.clearedchildes
	case sysdept.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysDeptMutation) ClearEdge(name string) error {
	switch name {
	case sysdept.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown SysDept unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysDeptMutation) ResetEdge(name string) error {
	switch name {
	case sysdept.EdgeParent:
		m.ResetParent()
		return nil
	case sysdept.EdgeChildes:
		m.ResetChildes()
		return nil
	case sysdept.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown SysDept edge %s", name)
}

// SysDictDataMutation represents an operation that mutates the SysDictData nodes in the graph.
type SysDictDataMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	typeCode        *string
	dictSort        *int32
	adddictSort     *int32
	dictLabel       *string
	dictValue       *string
	isDefault       *string
	status          *int32
	addstatus       *int32
	_default        *string
	remark          *string
	createdAt       *time.Time
	updatedAt       *time.Time
	createBy        *int64
	addcreateBy     *int64
	updateBy        *int64
	addupdateBy     *int64
	tenantId        *int64
	addtenantId     *int64
	clearedFields   map[string]struct{}
	dictType        *int64
	cleareddictType bool
	done            bool
	oldValue        func(context.Context) (*SysDictData, error)
	predicates      []predicate.SysDictData
}

var _ ent.Mutation = (*SysDictDataMutation)(nil)

// sysdictdataOption allows management of the mutation configuration using functional options.
type sysdictdataOption func(*SysDictDataMutation)

// newSysDictDataMutation creates new mutation for the SysDictData entity.
func newSysDictDataMutation(c config, op Op, opts ...sysdictdataOption) *SysDictDataMutation {
	m := &SysDictDataMutation{
		config:        c,
		op:            op,
		typ:           TypeSysDictData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysDictDataID sets the ID field of the mutation.
func withSysDictDataID(id int64) sysdictdataOption {
	return func(m *SysDictDataMutation) {
		var (
			err   error
			once  sync.Once
			value *SysDictData
		)
		m.oldValue = func(ctx context.Context) (*SysDictData, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysDictData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysDictData sets the old SysDictData of the mutation.
func withSysDictData(node *SysDictData) sysdictdataOption {
	return func(m *SysDictDataMutation) {
		m.oldValue = func(context.Context) (*SysDictData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysDictDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysDictDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysDictDataMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTypeId sets the "typeId" field.
func (m *SysDictDataMutation) SetTypeId(i int64) {
	m.dictType = &i
}

// TypeId returns the value of the "typeId" field in the mutation.
func (m *SysDictDataMutation) TypeId() (r int64, exists bool) {
	v := m.dictType
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeId returns the old "typeId" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldTypeId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTypeId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTypeId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeId: %w", err)
	}
	return oldValue.TypeId, nil
}

// ResetTypeId resets all changes to the "typeId" field.
func (m *SysDictDataMutation) ResetTypeId() {
	m.dictType = nil
}

// SetTypeCode sets the "typeCode" field.
func (m *SysDictDataMutation) SetTypeCode(s string) {
	m.typeCode = &s
}

// TypeCode returns the value of the "typeCode" field in the mutation.
func (m *SysDictDataMutation) TypeCode() (r string, exists bool) {
	v := m.typeCode
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeCode returns the old "typeCode" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldTypeCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTypeCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTypeCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeCode: %w", err)
	}
	return oldValue.TypeCode, nil
}

// ResetTypeCode resets all changes to the "typeCode" field.
func (m *SysDictDataMutation) ResetTypeCode() {
	m.typeCode = nil
}

// SetDictSort sets the "dictSort" field.
func (m *SysDictDataMutation) SetDictSort(i int32) {
	m.dictSort = &i
	m.adddictSort = nil
}

// DictSort returns the value of the "dictSort" field in the mutation.
func (m *SysDictDataMutation) DictSort() (r int32, exists bool) {
	v := m.dictSort
	if v == nil {
		return
	}
	return *v, true
}

// OldDictSort returns the old "dictSort" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldDictSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDictSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDictSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictSort: %w", err)
	}
	return oldValue.DictSort, nil
}

// AddDictSort adds i to the "dictSort" field.
func (m *SysDictDataMutation) AddDictSort(i int32) {
	if m.adddictSort != nil {
		*m.adddictSort += i
	} else {
		m.adddictSort = &i
	}
}

// AddedDictSort returns the value that was added to the "dictSort" field in this mutation.
func (m *SysDictDataMutation) AddedDictSort() (r int32, exists bool) {
	v := m.adddictSort
	if v == nil {
		return
	}
	return *v, true
}

// ClearDictSort clears the value of the "dictSort" field.
func (m *SysDictDataMutation) ClearDictSort() {
	m.dictSort = nil
	m.adddictSort = nil
	m.clearedFields[sysdictdata.FieldDictSort] = struct{}{}
}

// DictSortCleared returns if the "dictSort" field was cleared in this mutation.
func (m *SysDictDataMutation) DictSortCleared() bool {
	_, ok := m.clearedFields[sysdictdata.FieldDictSort]
	return ok
}

// ResetDictSort resets all changes to the "dictSort" field.
func (m *SysDictDataMutation) ResetDictSort() {
	m.dictSort = nil
	m.adddictSort = nil
	delete(m.clearedFields, sysdictdata.FieldDictSort)
}

// SetDictLabel sets the "dictLabel" field.
func (m *SysDictDataMutation) SetDictLabel(s string) {
	m.dictLabel = &s
}

// DictLabel returns the value of the "dictLabel" field in the mutation.
func (m *SysDictDataMutation) DictLabel() (r string, exists bool) {
	v := m.dictLabel
	if v == nil {
		return
	}
	return *v, true
}

// OldDictLabel returns the old "dictLabel" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldDictLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDictLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDictLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictLabel: %w", err)
	}
	return oldValue.DictLabel, nil
}

// ClearDictLabel clears the value of the "dictLabel" field.
func (m *SysDictDataMutation) ClearDictLabel() {
	m.dictLabel = nil
	m.clearedFields[sysdictdata.FieldDictLabel] = struct{}{}
}

// DictLabelCleared returns if the "dictLabel" field was cleared in this mutation.
func (m *SysDictDataMutation) DictLabelCleared() bool {
	_, ok := m.clearedFields[sysdictdata.FieldDictLabel]
	return ok
}

// ResetDictLabel resets all changes to the "dictLabel" field.
func (m *SysDictDataMutation) ResetDictLabel() {
	m.dictLabel = nil
	delete(m.clearedFields, sysdictdata.FieldDictLabel)
}

// SetDictValue sets the "dictValue" field.
func (m *SysDictDataMutation) SetDictValue(s string) {
	m.dictValue = &s
}

// DictValue returns the value of the "dictValue" field in the mutation.
func (m *SysDictDataMutation) DictValue() (r string, exists bool) {
	v := m.dictValue
	if v == nil {
		return
	}
	return *v, true
}

// OldDictValue returns the old "dictValue" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldDictValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDictValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDictValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictValue: %w", err)
	}
	return oldValue.DictValue, nil
}

// ClearDictValue clears the value of the "dictValue" field.
func (m *SysDictDataMutation) ClearDictValue() {
	m.dictValue = nil
	m.clearedFields[sysdictdata.FieldDictValue] = struct{}{}
}

// DictValueCleared returns if the "dictValue" field was cleared in this mutation.
func (m *SysDictDataMutation) DictValueCleared() bool {
	_, ok := m.clearedFields[sysdictdata.FieldDictValue]
	return ok
}

// ResetDictValue resets all changes to the "dictValue" field.
func (m *SysDictDataMutation) ResetDictValue() {
	m.dictValue = nil
	delete(m.clearedFields, sysdictdata.FieldDictValue)
}

// SetIsDefault sets the "isDefault" field.
func (m *SysDictDataMutation) SetIsDefault(s string) {
	m.isDefault = &s
}

// IsDefault returns the value of the "isDefault" field in the mutation.
func (m *SysDictDataMutation) IsDefault() (r string, exists bool) {
	v := m.isDefault
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDefault returns the old "isDefault" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldIsDefault(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDefault: %w", err)
	}
	return oldValue.IsDefault, nil
}

// ClearIsDefault clears the value of the "isDefault" field.
func (m *SysDictDataMutation) ClearIsDefault() {
	m.isDefault = nil
	m.clearedFields[sysdictdata.FieldIsDefault] = struct{}{}
}

// IsDefaultCleared returns if the "isDefault" field was cleared in this mutation.
func (m *SysDictDataMutation) IsDefaultCleared() bool {
	_, ok := m.clearedFields[sysdictdata.FieldIsDefault]
	return ok
}

// ResetIsDefault resets all changes to the "isDefault" field.
func (m *SysDictDataMutation) ResetIsDefault() {
	m.isDefault = nil
	delete(m.clearedFields, sysdictdata.FieldIsDefault)
}

// SetStatus sets the "status" field.
func (m *SysDictDataMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *SysDictDataMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *SysDictDataMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *SysDictDataMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *SysDictDataMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[sysdictdata.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysDictDataMutation) StatusCleared() bool {
	_, ok := m.clearedFields[sysdictdata.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysDictDataMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, sysdictdata.FieldStatus)
}

// SetDefault sets the "default" field.
func (m *SysDictDataMutation) SetDefault(s string) {
	m._default = &s
}

// Default returns the value of the "default" field in the mutation.
func (m *SysDictDataMutation) Default() (r string, exists bool) {
	v := m._default
	if v == nil {
		return
	}
	return *v, true
}

// OldDefault returns the old "default" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldDefault(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefault: %w", err)
	}
	return oldValue.Default, nil
}

// ClearDefault clears the value of the "default" field.
func (m *SysDictDataMutation) ClearDefault() {
	m._default = nil
	m.clearedFields[sysdictdata.FieldDefault] = struct{}{}
}

// DefaultCleared returns if the "default" field was cleared in this mutation.
func (m *SysDictDataMutation) DefaultCleared() bool {
	_, ok := m.clearedFields[sysdictdata.FieldDefault]
	return ok
}

// ResetDefault resets all changes to the "default" field.
func (m *SysDictDataMutation) ResetDefault() {
	m._default = nil
	delete(m.clearedFields, sysdictdata.FieldDefault)
}

// SetRemark sets the "remark" field.
func (m *SysDictDataMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysDictDataMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysDictDataMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysdictdata.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysDictDataMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysdictdata.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysDictDataMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysdictdata.FieldRemark)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysDictDataMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysDictDataMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysDictDataMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysDictDataMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysDictDataMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysDictDataMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysDictDataMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysDictDataMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysDictDataMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysDictDataMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysDictDataMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysDictDataMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysDictDataMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysDictDataMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysDictDataMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysDictDataMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysDictDataMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysDictDataMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysDictData entity.
// If the SysDictData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictDataMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysDictDataMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysDictDataMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysDictDataMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// SetDictTypeID sets the "dictType" edge to the SysDictType entity by id.
func (m *SysDictDataMutation) SetDictTypeID(id int64) {
	m.dictType = &id
}

// ClearDictType clears the "dictType" edge to the SysDictType entity.
func (m *SysDictDataMutation) ClearDictType() {
	m.cleareddictType = true
}

// DictTypeCleared reports if the "dictType" edge to the SysDictType entity was cleared.
func (m *SysDictDataMutation) DictTypeCleared() bool {
	return m.cleareddictType
}

// DictTypeID returns the "dictType" edge ID in the mutation.
func (m *SysDictDataMutation) DictTypeID() (id int64, exists bool) {
	if m.dictType != nil {
		return *m.dictType, true
	}
	return
}

// DictTypeIDs returns the "dictType" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DictTypeID instead. It exists only for internal usage by the builders.
func (m *SysDictDataMutation) DictTypeIDs() (ids []int64) {
	if id := m.dictType; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDictType resets all changes to the "dictType" edge.
func (m *SysDictDataMutation) ResetDictType() {
	m.dictType = nil
	m.cleareddictType = false
}

// Where appends a list predicates to the SysDictDataMutation builder.
func (m *SysDictDataMutation) Where(ps ...predicate.SysDictData) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysDictDataMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysDictData).
func (m *SysDictDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysDictDataMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.dictType != nil {
		fields = append(fields, sysdictdata.FieldTypeId)
	}
	if m.typeCode != nil {
		fields = append(fields, sysdictdata.FieldTypeCode)
	}
	if m.dictSort != nil {
		fields = append(fields, sysdictdata.FieldDictSort)
	}
	if m.dictLabel != nil {
		fields = append(fields, sysdictdata.FieldDictLabel)
	}
	if m.dictValue != nil {
		fields = append(fields, sysdictdata.FieldDictValue)
	}
	if m.isDefault != nil {
		fields = append(fields, sysdictdata.FieldIsDefault)
	}
	if m.status != nil {
		fields = append(fields, sysdictdata.FieldStatus)
	}
	if m._default != nil {
		fields = append(fields, sysdictdata.FieldDefault)
	}
	if m.remark != nil {
		fields = append(fields, sysdictdata.FieldRemark)
	}
	if m.createdAt != nil {
		fields = append(fields, sysdictdata.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysdictdata.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysdictdata.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysdictdata.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysdictdata.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysDictDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysdictdata.FieldTypeId:
		return m.TypeId()
	case sysdictdata.FieldTypeCode:
		return m.TypeCode()
	case sysdictdata.FieldDictSort:
		return m.DictSort()
	case sysdictdata.FieldDictLabel:
		return m.DictLabel()
	case sysdictdata.FieldDictValue:
		return m.DictValue()
	case sysdictdata.FieldIsDefault:
		return m.IsDefault()
	case sysdictdata.FieldStatus:
		return m.Status()
	case sysdictdata.FieldDefault:
		return m.Default()
	case sysdictdata.FieldRemark:
		return m.Remark()
	case sysdictdata.FieldCreatedAt:
		return m.CreatedAt()
	case sysdictdata.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysdictdata.FieldCreateBy:
		return m.CreateBy()
	case sysdictdata.FieldUpdateBy:
		return m.UpdateBy()
	case sysdictdata.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysDictDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysdictdata.FieldTypeId:
		return m.OldTypeId(ctx)
	case sysdictdata.FieldTypeCode:
		return m.OldTypeCode(ctx)
	case sysdictdata.FieldDictSort:
		return m.OldDictSort(ctx)
	case sysdictdata.FieldDictLabel:
		return m.OldDictLabel(ctx)
	case sysdictdata.FieldDictValue:
		return m.OldDictValue(ctx)
	case sysdictdata.FieldIsDefault:
		return m.OldIsDefault(ctx)
	case sysdictdata.FieldStatus:
		return m.OldStatus(ctx)
	case sysdictdata.FieldDefault:
		return m.OldDefault(ctx)
	case sysdictdata.FieldRemark:
		return m.OldRemark(ctx)
	case sysdictdata.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysdictdata.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysdictdata.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysdictdata.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysdictdata.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysDictData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysdictdata.FieldTypeId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeId(v)
		return nil
	case sysdictdata.FieldTypeCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeCode(v)
		return nil
	case sysdictdata.FieldDictSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictSort(v)
		return nil
	case sysdictdata.FieldDictLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictLabel(v)
		return nil
	case sysdictdata.FieldDictValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictValue(v)
		return nil
	case sysdictdata.FieldIsDefault:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDefault(v)
		return nil
	case sysdictdata.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysdictdata.FieldDefault:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefault(v)
		return nil
	case sysdictdata.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysdictdata.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysdictdata.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysdictdata.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysdictdata.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysdictdata.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysDictData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysDictDataMutation) AddedFields() []string {
	var fields []string
	if m.adddictSort != nil {
		fields = append(fields, sysdictdata.FieldDictSort)
	}
	if m.addstatus != nil {
		fields = append(fields, sysdictdata.FieldStatus)
	}
	if m.addcreateBy != nil {
		fields = append(fields, sysdictdata.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysdictdata.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysdictdata.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysDictDataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysdictdata.FieldDictSort:
		return m.AddedDictSort()
	case sysdictdata.FieldStatus:
		return m.AddedStatus()
	case sysdictdata.FieldCreateBy:
		return m.AddedCreateBy()
	case sysdictdata.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysdictdata.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysdictdata.FieldDictSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDictSort(v)
		return nil
	case sysdictdata.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case sysdictdata.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysdictdata.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysdictdata.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysDictData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysDictDataMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysdictdata.FieldDictSort) {
		fields = append(fields, sysdictdata.FieldDictSort)
	}
	if m.FieldCleared(sysdictdata.FieldDictLabel) {
		fields = append(fields, sysdictdata.FieldDictLabel)
	}
	if m.FieldCleared(sysdictdata.FieldDictValue) {
		fields = append(fields, sysdictdata.FieldDictValue)
	}
	if m.FieldCleared(sysdictdata.FieldIsDefault) {
		fields = append(fields, sysdictdata.FieldIsDefault)
	}
	if m.FieldCleared(sysdictdata.FieldStatus) {
		fields = append(fields, sysdictdata.FieldStatus)
	}
	if m.FieldCleared(sysdictdata.FieldDefault) {
		fields = append(fields, sysdictdata.FieldDefault)
	}
	if m.FieldCleared(sysdictdata.FieldRemark) {
		fields = append(fields, sysdictdata.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysDictDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysDictDataMutation) ClearField(name string) error {
	switch name {
	case sysdictdata.FieldDictSort:
		m.ClearDictSort()
		return nil
	case sysdictdata.FieldDictLabel:
		m.ClearDictLabel()
		return nil
	case sysdictdata.FieldDictValue:
		m.ClearDictValue()
		return nil
	case sysdictdata.FieldIsDefault:
		m.ClearIsDefault()
		return nil
	case sysdictdata.FieldStatus:
		m.ClearStatus()
		return nil
	case sysdictdata.FieldDefault:
		m.ClearDefault()
		return nil
	case sysdictdata.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown SysDictData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysDictDataMutation) ResetField(name string) error {
	switch name {
	case sysdictdata.FieldTypeId:
		m.ResetTypeId()
		return nil
	case sysdictdata.FieldTypeCode:
		m.ResetTypeCode()
		return nil
	case sysdictdata.FieldDictSort:
		m.ResetDictSort()
		return nil
	case sysdictdata.FieldDictLabel:
		m.ResetDictLabel()
		return nil
	case sysdictdata.FieldDictValue:
		m.ResetDictValue()
		return nil
	case sysdictdata.FieldIsDefault:
		m.ResetIsDefault()
		return nil
	case sysdictdata.FieldStatus:
		m.ResetStatus()
		return nil
	case sysdictdata.FieldDefault:
		m.ResetDefault()
		return nil
	case sysdictdata.FieldRemark:
		m.ResetRemark()
		return nil
	case sysdictdata.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysdictdata.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysdictdata.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysdictdata.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysdictdata.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysDictData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysDictDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dictType != nil {
		edges = append(edges, sysdictdata.EdgeDictType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysDictDataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysdictdata.EdgeDictType:
		if id := m.dictType; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysDictDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysDictDataMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysDictDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddictType {
		edges = append(edges, sysdictdata.EdgeDictType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysDictDataMutation) EdgeCleared(name string) bool {
	switch name {
	case sysdictdata.EdgeDictType:
		return m.cleareddictType
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysDictDataMutation) ClearEdge(name string) error {
	switch name {
	case sysdictdata.EdgeDictType:
		m.ClearDictType()
		return nil
	}
	return fmt.Errorf("unknown SysDictData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysDictDataMutation) ResetEdge(name string) error {
	switch name {
	case sysdictdata.EdgeDictType:
		m.ResetDictType()
		return nil
	}
	return fmt.Errorf("unknown SysDictData edge %s", name)
}

// SysDictTypeMutation represents an operation that mutates the SysDictType nodes in the graph.
type SysDictTypeMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	dictName        *string
	typeCode        *string
	status          *int32
	addstatus       *int32
	remark          *string
	createdAt       *time.Time
	updatedAt       *time.Time
	createBy        *int64
	addcreateBy     *int64
	updateBy        *int64
	addupdateBy     *int64
	tenantId        *int64
	addtenantId     *int64
	clearedFields   map[string]struct{}
	dataList        map[int64]struct{}
	removeddataList map[int64]struct{}
	cleareddataList bool
	done            bool
	oldValue        func(context.Context) (*SysDictType, error)
	predicates      []predicate.SysDictType
}

var _ ent.Mutation = (*SysDictTypeMutation)(nil)

// sysdicttypeOption allows management of the mutation configuration using functional options.
type sysdicttypeOption func(*SysDictTypeMutation)

// newSysDictTypeMutation creates new mutation for the SysDictType entity.
func newSysDictTypeMutation(c config, op Op, opts ...sysdicttypeOption) *SysDictTypeMutation {
	m := &SysDictTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeSysDictType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysDictTypeID sets the ID field of the mutation.
func withSysDictTypeID(id int64) sysdicttypeOption {
	return func(m *SysDictTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *SysDictType
		)
		m.oldValue = func(ctx context.Context) (*SysDictType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysDictType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysDictType sets the old SysDictType of the mutation.
func withSysDictType(node *SysDictType) sysdicttypeOption {
	return func(m *SysDictTypeMutation) {
		m.oldValue = func(context.Context) (*SysDictType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysDictTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysDictTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysDictTypeMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDictName sets the "dictName" field.
func (m *SysDictTypeMutation) SetDictName(s string) {
	m.dictName = &s
}

// DictName returns the value of the "dictName" field in the mutation.
func (m *SysDictTypeMutation) DictName() (r string, exists bool) {
	v := m.dictName
	if v == nil {
		return
	}
	return *v, true
}

// OldDictName returns the old "dictName" field's value of the SysDictType entity.
// If the SysDictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictTypeMutation) OldDictName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDictName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDictName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictName: %w", err)
	}
	return oldValue.DictName, nil
}

// ClearDictName clears the value of the "dictName" field.
func (m *SysDictTypeMutation) ClearDictName() {
	m.dictName = nil
	m.clearedFields[sysdicttype.FieldDictName] = struct{}{}
}

// DictNameCleared returns if the "dictName" field was cleared in this mutation.
func (m *SysDictTypeMutation) DictNameCleared() bool {
	_, ok := m.clearedFields[sysdicttype.FieldDictName]
	return ok
}

// ResetDictName resets all changes to the "dictName" field.
func (m *SysDictTypeMutation) ResetDictName() {
	m.dictName = nil
	delete(m.clearedFields, sysdicttype.FieldDictName)
}

// SetTypeCode sets the "typeCode" field.
func (m *SysDictTypeMutation) SetTypeCode(s string) {
	m.typeCode = &s
}

// TypeCode returns the value of the "typeCode" field in the mutation.
func (m *SysDictTypeMutation) TypeCode() (r string, exists bool) {
	v := m.typeCode
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeCode returns the old "typeCode" field's value of the SysDictType entity.
// If the SysDictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictTypeMutation) OldTypeCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTypeCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTypeCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeCode: %w", err)
	}
	return oldValue.TypeCode, nil
}

// ResetTypeCode resets all changes to the "typeCode" field.
func (m *SysDictTypeMutation) ResetTypeCode() {
	m.typeCode = nil
}

// SetStatus sets the "status" field.
func (m *SysDictTypeMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *SysDictTypeMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysDictType entity.
// If the SysDictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictTypeMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *SysDictTypeMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *SysDictTypeMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *SysDictTypeMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[sysdicttype.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysDictTypeMutation) StatusCleared() bool {
	_, ok := m.clearedFields[sysdicttype.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysDictTypeMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, sysdicttype.FieldStatus)
}

// SetRemark sets the "remark" field.
func (m *SysDictTypeMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysDictTypeMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysDictType entity.
// If the SysDictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictTypeMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysDictTypeMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysdicttype.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysDictTypeMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysdicttype.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysDictTypeMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysdicttype.FieldRemark)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysDictTypeMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysDictTypeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysDictType entity.
// If the SysDictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictTypeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysDictTypeMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysDictTypeMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysDictTypeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysDictType entity.
// If the SysDictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictTypeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysDictTypeMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysDictTypeMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysDictTypeMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysDictType entity.
// If the SysDictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictTypeMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysDictTypeMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysDictTypeMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysDictTypeMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysDictTypeMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysDictTypeMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysDictType entity.
// If the SysDictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictTypeMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysDictTypeMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysDictTypeMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysDictTypeMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysDictTypeMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysDictTypeMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysDictType entity.
// If the SysDictType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictTypeMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysDictTypeMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysDictTypeMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysDictTypeMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// AddDataListIDs adds the "dataList" edge to the SysDictData entity by ids.
func (m *SysDictTypeMutation) AddDataListIDs(ids ...int64) {
	if m.dataList == nil {
		m.dataList = make(map[int64]struct{})
	}
	for i := range ids {
		m.dataList[ids[i]] = struct{}{}
	}
}

// ClearDataList clears the "dataList" edge to the SysDictData entity.
func (m *SysDictTypeMutation) ClearDataList() {
	m.cleareddataList = true
}

// DataListCleared reports if the "dataList" edge to the SysDictData entity was cleared.
func (m *SysDictTypeMutation) DataListCleared() bool {
	return m.cleareddataList
}

// RemoveDataListIDs removes the "dataList" edge to the SysDictData entity by IDs.
func (m *SysDictTypeMutation) RemoveDataListIDs(ids ...int64) {
	if m.removeddataList == nil {
		m.removeddataList = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.dataList, ids[i])
		m.removeddataList[ids[i]] = struct{}{}
	}
}

// RemovedDataList returns the removed IDs of the "dataList" edge to the SysDictData entity.
func (m *SysDictTypeMutation) RemovedDataListIDs() (ids []int64) {
	for id := range m.removeddataList {
		ids = append(ids, id)
	}
	return
}

// DataListIDs returns the "dataList" edge IDs in the mutation.
func (m *SysDictTypeMutation) DataListIDs() (ids []int64) {
	for id := range m.dataList {
		ids = append(ids, id)
	}
	return
}

// ResetDataList resets all changes to the "dataList" edge.
func (m *SysDictTypeMutation) ResetDataList() {
	m.dataList = nil
	m.cleareddataList = false
	m.removeddataList = nil
}

// Where appends a list predicates to the SysDictTypeMutation builder.
func (m *SysDictTypeMutation) Where(ps ...predicate.SysDictType) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysDictTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysDictType).
func (m *SysDictTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysDictTypeMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.dictName != nil {
		fields = append(fields, sysdicttype.FieldDictName)
	}
	if m.typeCode != nil {
		fields = append(fields, sysdicttype.FieldTypeCode)
	}
	if m.status != nil {
		fields = append(fields, sysdicttype.FieldStatus)
	}
	if m.remark != nil {
		fields = append(fields, sysdicttype.FieldRemark)
	}
	if m.createdAt != nil {
		fields = append(fields, sysdicttype.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysdicttype.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysdicttype.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysdicttype.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysdicttype.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysDictTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysdicttype.FieldDictName:
		return m.DictName()
	case sysdicttype.FieldTypeCode:
		return m.TypeCode()
	case sysdicttype.FieldStatus:
		return m.Status()
	case sysdicttype.FieldRemark:
		return m.Remark()
	case sysdicttype.FieldCreatedAt:
		return m.CreatedAt()
	case sysdicttype.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysdicttype.FieldCreateBy:
		return m.CreateBy()
	case sysdicttype.FieldUpdateBy:
		return m.UpdateBy()
	case sysdicttype.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysDictTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysdicttype.FieldDictName:
		return m.OldDictName(ctx)
	case sysdicttype.FieldTypeCode:
		return m.OldTypeCode(ctx)
	case sysdicttype.FieldStatus:
		return m.OldStatus(ctx)
	case sysdicttype.FieldRemark:
		return m.OldRemark(ctx)
	case sysdicttype.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysdicttype.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysdicttype.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysdicttype.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysdicttype.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysDictType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysdicttype.FieldDictName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictName(v)
		return nil
	case sysdicttype.FieldTypeCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeCode(v)
		return nil
	case sysdicttype.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysdicttype.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysdicttype.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysdicttype.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysdicttype.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysdicttype.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysdicttype.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysDictType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysDictTypeMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, sysdicttype.FieldStatus)
	}
	if m.addcreateBy != nil {
		fields = append(fields, sysdicttype.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysdicttype.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysdicttype.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysDictTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysdicttype.FieldStatus:
		return m.AddedStatus()
	case sysdicttype.FieldCreateBy:
		return m.AddedCreateBy()
	case sysdicttype.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysdicttype.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysdicttype.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case sysdicttype.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysdicttype.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysdicttype.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysDictType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysDictTypeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysdicttype.FieldDictName) {
		fields = append(fields, sysdicttype.FieldDictName)
	}
	if m.FieldCleared(sysdicttype.FieldStatus) {
		fields = append(fields, sysdicttype.FieldStatus)
	}
	if m.FieldCleared(sysdicttype.FieldRemark) {
		fields = append(fields, sysdicttype.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysDictTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysDictTypeMutation) ClearField(name string) error {
	switch name {
	case sysdicttype.FieldDictName:
		m.ClearDictName()
		return nil
	case sysdicttype.FieldStatus:
		m.ClearStatus()
		return nil
	case sysdicttype.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown SysDictType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysDictTypeMutation) ResetField(name string) error {
	switch name {
	case sysdicttype.FieldDictName:
		m.ResetDictName()
		return nil
	case sysdicttype.FieldTypeCode:
		m.ResetTypeCode()
		return nil
	case sysdicttype.FieldStatus:
		m.ResetStatus()
		return nil
	case sysdicttype.FieldRemark:
		m.ResetRemark()
		return nil
	case sysdicttype.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysdicttype.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysdicttype.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysdicttype.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysdicttype.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysDictType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysDictTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dataList != nil {
		edges = append(edges, sysdicttype.EdgeDataList)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysDictTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysdicttype.EdgeDataList:
		ids := make([]ent.Value, 0, len(m.dataList))
		for id := range m.dataList {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysDictTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddataList != nil {
		edges = append(edges, sysdicttype.EdgeDataList)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysDictTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sysdicttype.EdgeDataList:
		ids := make([]ent.Value, 0, len(m.removeddataList))
		for id := range m.removeddataList {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysDictTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddataList {
		edges = append(edges, sysdicttype.EdgeDataList)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysDictTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case sysdicttype.EdgeDataList:
		return m.cleareddataList
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysDictTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SysDictType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysDictTypeMutation) ResetEdge(name string) error {
	switch name {
	case sysdicttype.EdgeDataList:
		m.ResetDataList()
		return nil
	}
	return fmt.Errorf("unknown SysDictType edge %s", name)
}

// SysJobMutation represents an operation that mutates the SysJob nodes in the graph.
type SysJobMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	jobName        *string
	jobGroup       *string
	jobType        *int32
	addjobType     *int32
	cronExpression *string
	invokeTarget   *string
	args           *string
	execPolicy     *int32
	addexecPolicy  *int32
	concurrent     *int32
	addconcurrent  *int32
	state          *sysjob.State
	entryId        *int32
	addentryId     *int32
	createdAt      *time.Time
	updatedAt      *time.Time
	createBy       *int64
	addcreateBy    *int64
	updateBy       *int64
	addupdateBy    *int64
	tenantId       *int64
	addtenantId    *int64
	clearedFields  map[string]struct{}
	logs           map[int64]struct{}
	removedlogs    map[int64]struct{}
	clearedlogs    bool
	done           bool
	oldValue       func(context.Context) (*SysJob, error)
	predicates     []predicate.SysJob
}

var _ ent.Mutation = (*SysJobMutation)(nil)

// sysjobOption allows management of the mutation configuration using functional options.
type sysjobOption func(*SysJobMutation)

// newSysJobMutation creates new mutation for the SysJob entity.
func newSysJobMutation(c config, op Op, opts ...sysjobOption) *SysJobMutation {
	m := &SysJobMutation{
		config:        c,
		op:            op,
		typ:           TypeSysJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysJobID sets the ID field of the mutation.
func withSysJobID(id int64) sysjobOption {
	return func(m *SysJobMutation) {
		var (
			err   error
			once  sync.Once
			value *SysJob
		)
		m.oldValue = func(ctx context.Context) (*SysJob, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysJob.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysJob sets the old SysJob of the mutation.
func withSysJob(node *SysJob) sysjobOption {
	return func(m *SysJobMutation) {
		m.oldValue = func(context.Context) (*SysJob, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysJobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysJobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysJobMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetJobName sets the "jobName" field.
func (m *SysJobMutation) SetJobName(s string) {
	m.jobName = &s
}

// JobName returns the value of the "jobName" field in the mutation.
func (m *SysJobMutation) JobName() (r string, exists bool) {
	v := m.jobName
	if v == nil {
		return
	}
	return *v, true
}

// OldJobName returns the old "jobName" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldJobName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJobName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJobName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobName: %w", err)
	}
	return oldValue.JobName, nil
}

// ClearJobName clears the value of the "jobName" field.
func (m *SysJobMutation) ClearJobName() {
	m.jobName = nil
	m.clearedFields[sysjob.FieldJobName] = struct{}{}
}

// JobNameCleared returns if the "jobName" field was cleared in this mutation.
func (m *SysJobMutation) JobNameCleared() bool {
	_, ok := m.clearedFields[sysjob.FieldJobName]
	return ok
}

// ResetJobName resets all changes to the "jobName" field.
func (m *SysJobMutation) ResetJobName() {
	m.jobName = nil
	delete(m.clearedFields, sysjob.FieldJobName)
}

// SetJobGroup sets the "jobGroup" field.
func (m *SysJobMutation) SetJobGroup(s string) {
	m.jobGroup = &s
}

// JobGroup returns the value of the "jobGroup" field in the mutation.
func (m *SysJobMutation) JobGroup() (r string, exists bool) {
	v := m.jobGroup
	if v == nil {
		return
	}
	return *v, true
}

// OldJobGroup returns the old "jobGroup" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldJobGroup(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJobGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJobGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobGroup: %w", err)
	}
	return oldValue.JobGroup, nil
}

// ClearJobGroup clears the value of the "jobGroup" field.
func (m *SysJobMutation) ClearJobGroup() {
	m.jobGroup = nil
	m.clearedFields[sysjob.FieldJobGroup] = struct{}{}
}

// JobGroupCleared returns if the "jobGroup" field was cleared in this mutation.
func (m *SysJobMutation) JobGroupCleared() bool {
	_, ok := m.clearedFields[sysjob.FieldJobGroup]
	return ok
}

// ResetJobGroup resets all changes to the "jobGroup" field.
func (m *SysJobMutation) ResetJobGroup() {
	m.jobGroup = nil
	delete(m.clearedFields, sysjob.FieldJobGroup)
}

// SetJobType sets the "jobType" field.
func (m *SysJobMutation) SetJobType(i int32) {
	m.jobType = &i
	m.addjobType = nil
}

// JobType returns the value of the "jobType" field in the mutation.
func (m *SysJobMutation) JobType() (r int32, exists bool) {
	v := m.jobType
	if v == nil {
		return
	}
	return *v, true
}

// OldJobType returns the old "jobType" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldJobType(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJobType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJobType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobType: %w", err)
	}
	return oldValue.JobType, nil
}

// AddJobType adds i to the "jobType" field.
func (m *SysJobMutation) AddJobType(i int32) {
	if m.addjobType != nil {
		*m.addjobType += i
	} else {
		m.addjobType = &i
	}
}

// AddedJobType returns the value that was added to the "jobType" field in this mutation.
func (m *SysJobMutation) AddedJobType() (r int32, exists bool) {
	v := m.addjobType
	if v == nil {
		return
	}
	return *v, true
}

// ClearJobType clears the value of the "jobType" field.
func (m *SysJobMutation) ClearJobType() {
	m.jobType = nil
	m.addjobType = nil
	m.clearedFields[sysjob.FieldJobType] = struct{}{}
}

// JobTypeCleared returns if the "jobType" field was cleared in this mutation.
func (m *SysJobMutation) JobTypeCleared() bool {
	_, ok := m.clearedFields[sysjob.FieldJobType]
	return ok
}

// ResetJobType resets all changes to the "jobType" field.
func (m *SysJobMutation) ResetJobType() {
	m.jobType = nil
	m.addjobType = nil
	delete(m.clearedFields, sysjob.FieldJobType)
}

// SetCronExpression sets the "cronExpression" field.
func (m *SysJobMutation) SetCronExpression(s string) {
	m.cronExpression = &s
}

// CronExpression returns the value of the "cronExpression" field in the mutation.
func (m *SysJobMutation) CronExpression() (r string, exists bool) {
	v := m.cronExpression
	if v == nil {
		return
	}
	return *v, true
}

// OldCronExpression returns the old "cronExpression" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldCronExpression(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCronExpression is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCronExpression requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCronExpression: %w", err)
	}
	return oldValue.CronExpression, nil
}

// ClearCronExpression clears the value of the "cronExpression" field.
func (m *SysJobMutation) ClearCronExpression() {
	m.cronExpression = nil
	m.clearedFields[sysjob.FieldCronExpression] = struct{}{}
}

// CronExpressionCleared returns if the "cronExpression" field was cleared in this mutation.
func (m *SysJobMutation) CronExpressionCleared() bool {
	_, ok := m.clearedFields[sysjob.FieldCronExpression]
	return ok
}

// ResetCronExpression resets all changes to the "cronExpression" field.
func (m *SysJobMutation) ResetCronExpression() {
	m.cronExpression = nil
	delete(m.clearedFields, sysjob.FieldCronExpression)
}

// SetInvokeTarget sets the "invokeTarget" field.
func (m *SysJobMutation) SetInvokeTarget(s string) {
	m.invokeTarget = &s
}

// InvokeTarget returns the value of the "invokeTarget" field in the mutation.
func (m *SysJobMutation) InvokeTarget() (r string, exists bool) {
	v := m.invokeTarget
	if v == nil {
		return
	}
	return *v, true
}

// OldInvokeTarget returns the old "invokeTarget" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldInvokeTarget(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInvokeTarget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInvokeTarget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvokeTarget: %w", err)
	}
	return oldValue.InvokeTarget, nil
}

// ClearInvokeTarget clears the value of the "invokeTarget" field.
func (m *SysJobMutation) ClearInvokeTarget() {
	m.invokeTarget = nil
	m.clearedFields[sysjob.FieldInvokeTarget] = struct{}{}
}

// InvokeTargetCleared returns if the "invokeTarget" field was cleared in this mutation.
func (m *SysJobMutation) InvokeTargetCleared() bool {
	_, ok := m.clearedFields[sysjob.FieldInvokeTarget]
	return ok
}

// ResetInvokeTarget resets all changes to the "invokeTarget" field.
func (m *SysJobMutation) ResetInvokeTarget() {
	m.invokeTarget = nil
	delete(m.clearedFields, sysjob.FieldInvokeTarget)
}

// SetArgs sets the "args" field.
func (m *SysJobMutation) SetArgs(s string) {
	m.args = &s
}

// Args returns the value of the "args" field in the mutation.
func (m *SysJobMutation) Args() (r string, exists bool) {
	v := m.args
	if v == nil {
		return
	}
	return *v, true
}

// OldArgs returns the old "args" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldArgs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldArgs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldArgs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArgs: %w", err)
	}
	return oldValue.Args, nil
}

// ClearArgs clears the value of the "args" field.
func (m *SysJobMutation) ClearArgs() {
	m.args = nil
	m.clearedFields[sysjob.FieldArgs] = struct{}{}
}

// ArgsCleared returns if the "args" field was cleared in this mutation.
func (m *SysJobMutation) ArgsCleared() bool {
	_, ok := m.clearedFields[sysjob.FieldArgs]
	return ok
}

// ResetArgs resets all changes to the "args" field.
func (m *SysJobMutation) ResetArgs() {
	m.args = nil
	delete(m.clearedFields, sysjob.FieldArgs)
}

// SetExecPolicy sets the "execPolicy" field.
func (m *SysJobMutation) SetExecPolicy(i int32) {
	m.execPolicy = &i
	m.addexecPolicy = nil
}

// ExecPolicy returns the value of the "execPolicy" field in the mutation.
func (m *SysJobMutation) ExecPolicy() (r int32, exists bool) {
	v := m.execPolicy
	if v == nil {
		return
	}
	return *v, true
}

// OldExecPolicy returns the old "execPolicy" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldExecPolicy(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExecPolicy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExecPolicy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecPolicy: %w", err)
	}
	return oldValue.ExecPolicy, nil
}

// AddExecPolicy adds i to the "execPolicy" field.
func (m *SysJobMutation) AddExecPolicy(i int32) {
	if m.addexecPolicy != nil {
		*m.addexecPolicy += i
	} else {
		m.addexecPolicy = &i
	}
}

// AddedExecPolicy returns the value that was added to the "execPolicy" field in this mutation.
func (m *SysJobMutation) AddedExecPolicy() (r int32, exists bool) {
	v := m.addexecPolicy
	if v == nil {
		return
	}
	return *v, true
}

// ClearExecPolicy clears the value of the "execPolicy" field.
func (m *SysJobMutation) ClearExecPolicy() {
	m.execPolicy = nil
	m.addexecPolicy = nil
	m.clearedFields[sysjob.FieldExecPolicy] = struct{}{}
}

// ExecPolicyCleared returns if the "execPolicy" field was cleared in this mutation.
func (m *SysJobMutation) ExecPolicyCleared() bool {
	_, ok := m.clearedFields[sysjob.FieldExecPolicy]
	return ok
}

// ResetExecPolicy resets all changes to the "execPolicy" field.
func (m *SysJobMutation) ResetExecPolicy() {
	m.execPolicy = nil
	m.addexecPolicy = nil
	delete(m.clearedFields, sysjob.FieldExecPolicy)
}

// SetConcurrent sets the "concurrent" field.
func (m *SysJobMutation) SetConcurrent(i int32) {
	m.concurrent = &i
	m.addconcurrent = nil
}

// Concurrent returns the value of the "concurrent" field in the mutation.
func (m *SysJobMutation) Concurrent() (r int32, exists bool) {
	v := m.concurrent
	if v == nil {
		return
	}
	return *v, true
}

// OldConcurrent returns the old "concurrent" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldConcurrent(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConcurrent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConcurrent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConcurrent: %w", err)
	}
	return oldValue.Concurrent, nil
}

// AddConcurrent adds i to the "concurrent" field.
func (m *SysJobMutation) AddConcurrent(i int32) {
	if m.addconcurrent != nil {
		*m.addconcurrent += i
	} else {
		m.addconcurrent = &i
	}
}

// AddedConcurrent returns the value that was added to the "concurrent" field in this mutation.
func (m *SysJobMutation) AddedConcurrent() (r int32, exists bool) {
	v := m.addconcurrent
	if v == nil {
		return
	}
	return *v, true
}

// ClearConcurrent clears the value of the "concurrent" field.
func (m *SysJobMutation) ClearConcurrent() {
	m.concurrent = nil
	m.addconcurrent = nil
	m.clearedFields[sysjob.FieldConcurrent] = struct{}{}
}

// ConcurrentCleared returns if the "concurrent" field was cleared in this mutation.
func (m *SysJobMutation) ConcurrentCleared() bool {
	_, ok := m.clearedFields[sysjob.FieldConcurrent]
	return ok
}

// ResetConcurrent resets all changes to the "concurrent" field.
func (m *SysJobMutation) ResetConcurrent() {
	m.concurrent = nil
	m.addconcurrent = nil
	delete(m.clearedFields, sysjob.FieldConcurrent)
}

// SetState sets the "state" field.
func (m *SysJobMutation) SetState(s sysjob.State) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *SysJobMutation) State() (r sysjob.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldState(ctx context.Context) (v sysjob.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *SysJobMutation) ResetState() {
	m.state = nil
}

// SetEntryId sets the "entryId" field.
func (m *SysJobMutation) SetEntryId(i int32) {
	m.entryId = &i
	m.addentryId = nil
}

// EntryId returns the value of the "entryId" field in the mutation.
func (m *SysJobMutation) EntryId() (r int32, exists bool) {
	v := m.entryId
	if v == nil {
		return
	}
	return *v, true
}

// OldEntryId returns the old "entryId" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldEntryId(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEntryId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEntryId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntryId: %w", err)
	}
	return oldValue.EntryId, nil
}

// AddEntryId adds i to the "entryId" field.
func (m *SysJobMutation) AddEntryId(i int32) {
	if m.addentryId != nil {
		*m.addentryId += i
	} else {
		m.addentryId = &i
	}
}

// AddedEntryId returns the value that was added to the "entryId" field in this mutation.
func (m *SysJobMutation) AddedEntryId() (r int32, exists bool) {
	v := m.addentryId
	if v == nil {
		return
	}
	return *v, true
}

// ClearEntryId clears the value of the "entryId" field.
func (m *SysJobMutation) ClearEntryId() {
	m.entryId = nil
	m.addentryId = nil
	m.clearedFields[sysjob.FieldEntryId] = struct{}{}
}

// EntryIdCleared returns if the "entryId" field was cleared in this mutation.
func (m *SysJobMutation) EntryIdCleared() bool {
	_, ok := m.clearedFields[sysjob.FieldEntryId]
	return ok
}

// ResetEntryId resets all changes to the "entryId" field.
func (m *SysJobMutation) ResetEntryId() {
	m.entryId = nil
	m.addentryId = nil
	delete(m.clearedFields, sysjob.FieldEntryId)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysJobMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysJobMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysJobMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysJobMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysJobMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysJobMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysJobMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysJobMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysJobMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysJobMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysJobMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysJobMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysJobMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysJobMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysJobMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysJobMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysJobMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysJobMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysJob entity.
// If the SysJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysJobMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysJobMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysJobMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// AddLogIDs adds the "logs" edge to the SysJobLog entity by ids.
func (m *SysJobMutation) AddLogIDs(ids ...int64) {
	if m.logs == nil {
		m.logs = make(map[int64]struct{})
	}
	for i := range ids {
		m.logs[ids[i]] = struct{}{}
	}
}

// ClearLogs clears the "logs" edge to the SysJobLog entity.
func (m *SysJobMutation) ClearLogs() {
	m.clearedlogs = true
}

// LogsCleared reports if the "logs" edge to the SysJobLog entity was cleared.
func (m *SysJobMutation) LogsCleared() bool {
	return m.clearedlogs
}

// RemoveLogIDs removes the "logs" edge to the SysJobLog entity by IDs.
func (m *SysJobMutation) RemoveLogIDs(ids ...int64) {
	if m.removedlogs == nil {
		m.removedlogs = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.logs, ids[i])
		m.removedlogs[ids[i]] = struct{}{}
	}
}

// RemovedLogs returns the removed IDs of the "logs" edge to the SysJobLog entity.
func (m *SysJobMutation) RemovedLogsIDs() (ids []int64) {
	for id := range m.removedlogs {
		ids = append(ids, id)
	}
	return
}

// LogsIDs returns the "logs" edge IDs in the mutation.
func (m *SysJobMutation) LogsIDs() (ids []int64) {
	for id := range m.logs {
		ids = append(ids, id)
	}
	return
}

// ResetLogs resets all changes to the "logs" edge.
func (m *SysJobMutation) ResetLogs() {
	m.logs = nil
	m.clearedlogs = false
	m.removedlogs = nil
}

// Where appends a list predicates to the SysJobMutation builder.
func (m *SysJobMutation) Where(ps ...predicate.SysJob) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysJobMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysJob).
func (m *SysJobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysJobMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.jobName != nil {
		fields = append(fields, sysjob.FieldJobName)
	}
	if m.jobGroup != nil {
		fields = append(fields, sysjob.FieldJobGroup)
	}
	if m.jobType != nil {
		fields = append(fields, sysjob.FieldJobType)
	}
	if m.cronExpression != nil {
		fields = append(fields, sysjob.FieldCronExpression)
	}
	if m.invokeTarget != nil {
		fields = append(fields, sysjob.FieldInvokeTarget)
	}
	if m.args != nil {
		fields = append(fields, sysjob.FieldArgs)
	}
	if m.execPolicy != nil {
		fields = append(fields, sysjob.FieldExecPolicy)
	}
	if m.concurrent != nil {
		fields = append(fields, sysjob.FieldConcurrent)
	}
	if m.state != nil {
		fields = append(fields, sysjob.FieldState)
	}
	if m.entryId != nil {
		fields = append(fields, sysjob.FieldEntryId)
	}
	if m.createdAt != nil {
		fields = append(fields, sysjob.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysjob.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysjob.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysjob.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysjob.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysJobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysjob.FieldJobName:
		return m.JobName()
	case sysjob.FieldJobGroup:
		return m.JobGroup()
	case sysjob.FieldJobType:
		return m.JobType()
	case sysjob.FieldCronExpression:
		return m.CronExpression()
	case sysjob.FieldInvokeTarget:
		return m.InvokeTarget()
	case sysjob.FieldArgs:
		return m.Args()
	case sysjob.FieldExecPolicy:
		return m.ExecPolicy()
	case sysjob.FieldConcurrent:
		return m.Concurrent()
	case sysjob.FieldState:
		return m.State()
	case sysjob.FieldEntryId:
		return m.EntryId()
	case sysjob.FieldCreatedAt:
		return m.CreatedAt()
	case sysjob.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysjob.FieldCreateBy:
		return m.CreateBy()
	case sysjob.FieldUpdateBy:
		return m.UpdateBy()
	case sysjob.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysJobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysjob.FieldJobName:
		return m.OldJobName(ctx)
	case sysjob.FieldJobGroup:
		return m.OldJobGroup(ctx)
	case sysjob.FieldJobType:
		return m.OldJobType(ctx)
	case sysjob.FieldCronExpression:
		return m.OldCronExpression(ctx)
	case sysjob.FieldInvokeTarget:
		return m.OldInvokeTarget(ctx)
	case sysjob.FieldArgs:
		return m.OldArgs(ctx)
	case sysjob.FieldExecPolicy:
		return m.OldExecPolicy(ctx)
	case sysjob.FieldConcurrent:
		return m.OldConcurrent(ctx)
	case sysjob.FieldState:
		return m.OldState(ctx)
	case sysjob.FieldEntryId:
		return m.OldEntryId(ctx)
	case sysjob.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysjob.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysjob.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysjob.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysjob.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysJob field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysJobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysjob.FieldJobName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobName(v)
		return nil
	case sysjob.FieldJobGroup:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobGroup(v)
		return nil
	case sysjob.FieldJobType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobType(v)
		return nil
	case sysjob.FieldCronExpression:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCronExpression(v)
		return nil
	case sysjob.FieldInvokeTarget:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvokeTarget(v)
		return nil
	case sysjob.FieldArgs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArgs(v)
		return nil
	case sysjob.FieldExecPolicy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecPolicy(v)
		return nil
	case sysjob.FieldConcurrent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConcurrent(v)
		return nil
	case sysjob.FieldState:
		v, ok := value.(sysjob.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case sysjob.FieldEntryId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntryId(v)
		return nil
	case sysjob.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysjob.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysjob.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysjob.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysjob.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysJob field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysJobMutation) AddedFields() []string {
	var fields []string
	if m.addjobType != nil {
		fields = append(fields, sysjob.FieldJobType)
	}
	if m.addexecPolicy != nil {
		fields = append(fields, sysjob.FieldExecPolicy)
	}
	if m.addconcurrent != nil {
		fields = append(fields, sysjob.FieldConcurrent)
	}
	if m.addentryId != nil {
		fields = append(fields, sysjob.FieldEntryId)
	}
	if m.addcreateBy != nil {
		fields = append(fields, sysjob.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysjob.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysjob.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysJobMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysjob.FieldJobType:
		return m.AddedJobType()
	case sysjob.FieldExecPolicy:
		return m.AddedExecPolicy()
	case sysjob.FieldConcurrent:
		return m.AddedConcurrent()
	case sysjob.FieldEntryId:
		return m.AddedEntryId()
	case sysjob.FieldCreateBy:
		return m.AddedCreateBy()
	case sysjob.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysjob.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysJobMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysjob.FieldJobType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddJobType(v)
		return nil
	case sysjob.FieldExecPolicy:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExecPolicy(v)
		return nil
	case sysjob.FieldConcurrent:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConcurrent(v)
		return nil
	case sysjob.FieldEntryId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEntryId(v)
		return nil
	case sysjob.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysjob.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysjob.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysJob numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysJobMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysjob.FieldJobName) {
		fields = append(fields, sysjob.FieldJobName)
	}
	if m.FieldCleared(sysjob.FieldJobGroup) {
		fields = append(fields, sysjob.FieldJobGroup)
	}
	if m.FieldCleared(sysjob.FieldJobType) {
		fields = append(fields, sysjob.FieldJobType)
	}
	if m.FieldCleared(sysjob.FieldCronExpression) {
		fields = append(fields, sysjob.FieldCronExpression)
	}
	if m.FieldCleared(sysjob.FieldInvokeTarget) {
		fields = append(fields, sysjob.FieldInvokeTarget)
	}
	if m.FieldCleared(sysjob.FieldArgs) {
		fields = append(fields, sysjob.FieldArgs)
	}
	if m.FieldCleared(sysjob.FieldExecPolicy) {
		fields = append(fields, sysjob.FieldExecPolicy)
	}
	if m.FieldCleared(sysjob.FieldConcurrent) {
		fields = append(fields, sysjob.FieldConcurrent)
	}
	if m.FieldCleared(sysjob.FieldEntryId) {
		fields = append(fields, sysjob.FieldEntryId)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysJobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysJobMutation) ClearField(name string) error {
	switch name {
	case sysjob.FieldJobName:
		m.ClearJobName()
		return nil
	case sysjob.FieldJobGroup:
		m.ClearJobGroup()
		return nil
	case sysjob.FieldJobType:
		m.ClearJobType()
		return nil
	case sysjob.FieldCronExpression:
		m.ClearCronExpression()
		return nil
	case sysjob.FieldInvokeTarget:
		m.ClearInvokeTarget()
		return nil
	case sysjob.FieldArgs:
		m.ClearArgs()
		return nil
	case sysjob.FieldExecPolicy:
		m.ClearExecPolicy()
		return nil
	case sysjob.FieldConcurrent:
		m.ClearConcurrent()
		return nil
	case sysjob.FieldEntryId:
		m.ClearEntryId()
		return nil
	}
	return fmt.Errorf("unknown SysJob nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysJobMutation) ResetField(name string) error {
	switch name {
	case sysjob.FieldJobName:
		m.ResetJobName()
		return nil
	case sysjob.FieldJobGroup:
		m.ResetJobGroup()
		return nil
	case sysjob.FieldJobType:
		m.ResetJobType()
		return nil
	case sysjob.FieldCronExpression:
		m.ResetCronExpression()
		return nil
	case sysjob.FieldInvokeTarget:
		m.ResetInvokeTarget()
		return nil
	case sysjob.FieldArgs:
		m.ResetArgs()
		return nil
	case sysjob.FieldExecPolicy:
		m.ResetExecPolicy()
		return nil
	case sysjob.FieldConcurrent:
		m.ResetConcurrent()
		return nil
	case sysjob.FieldState:
		m.ResetState()
		return nil
	case sysjob.FieldEntryId:
		m.ResetEntryId()
		return nil
	case sysjob.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysjob.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysjob.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysjob.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysjob.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysJob field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysJobMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.logs != nil {
		edges = append(edges, sysjob.EdgeLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysJobMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysjob.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.logs))
		for id := range m.logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysJobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlogs != nil {
		edges = append(edges, sysjob.EdgeLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysJobMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sysjob.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.removedlogs))
		for id := range m.removedlogs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysJobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlogs {
		edges = append(edges, sysjob.EdgeLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysJobMutation) EdgeCleared(name string) bool {
	switch name {
	case sysjob.EdgeLogs:
		return m.clearedlogs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysJobMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SysJob unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysJobMutation) ResetEdge(name string) error {
	switch name {
	case sysjob.EdgeLogs:
		m.ResetLogs()
		return nil
	}
	return fmt.Errorf("unknown SysJob edge %s", name)
}

// SysJobLogMutation represents an operation that mutates the SysJobLog nodes in the graph.
type SysJobLogMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	jobName       *string
	entryId       *int32
	addentryId    *int32
	status        *bool
	duration      *time.Duration
	addduration   *time.Duration
	info          *string
	createdAt     *time.Time
	updatedAt     *time.Time
	createBy      *int64
	addcreateBy   *int64
	updateBy      *int64
	addupdateBy   *int64
	tenantId      *int64
	addtenantId   *int64
	clearedFields map[string]struct{}
	job           *int64
	clearedjob    bool
	done          bool
	oldValue      func(context.Context) (*SysJobLog, error)
	predicates    []predicate.SysJobLog
}

var _ ent.Mutation = (*SysJobLogMutation)(nil)

// sysjoblogOption allows management of the mutation configuration using functional options.
type sysjoblogOption func(*SysJobLogMutation)

// newSysJobLogMutation creates new mutation for the SysJobLog entity.
func newSysJobLogMutation(c config, op Op, opts ...sysjoblogOption) *SysJobLogMutation {
	m := &SysJobLogMutation{
		config:        c,
		op:            op,
		typ:           TypeSysJobLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysJobLogID sets the ID field of the mutation.
func withSysJobLogID(id int64) sysjoblogOption {
	return func(m *SysJobLogMutation) {
		var (
			err   error
			once  sync.Once
			value *SysJobLog
		)
		m.oldValue = func(ctx context.Context) (*SysJobLog, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysJobLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysJobLog sets the old SysJobLog of the mutation.
func withSysJobLog(node *SysJobLog) sysjoblogOption {
	return func(m *SysJobLogMutation) {
		m.oldValue = func(context.Context) (*SysJobLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysJobLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysJobLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysJobLogMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetJobId sets the "jobId" field.
func (m *SysJobLogMutation) SetJobId(i int64) {
	m.job = &i
}

// JobId returns the value of the "jobId" field in the mutation.
func (m *SysJobLogMutation) JobId() (r int64, exists bool) {
	v := m.job
	if v == nil {
		return
	}
	return *v, true
}

// OldJobId returns the old "jobId" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldJobId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJobId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJobId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobId: %w", err)
	}
	return oldValue.JobId, nil
}

// ClearJobId clears the value of the "jobId" field.
func (m *SysJobLogMutation) ClearJobId() {
	m.job = nil
	m.clearedFields[sysjoblog.FieldJobId] = struct{}{}
}

// JobIdCleared returns if the "jobId" field was cleared in this mutation.
func (m *SysJobLogMutation) JobIdCleared() bool {
	_, ok := m.clearedFields[sysjoblog.FieldJobId]
	return ok
}

// ResetJobId resets all changes to the "jobId" field.
func (m *SysJobLogMutation) ResetJobId() {
	m.job = nil
	delete(m.clearedFields, sysjoblog.FieldJobId)
}

// SetJobName sets the "jobName" field.
func (m *SysJobLogMutation) SetJobName(s string) {
	m.jobName = &s
}

// JobName returns the value of the "jobName" field in the mutation.
func (m *SysJobLogMutation) JobName() (r string, exists bool) {
	v := m.jobName
	if v == nil {
		return
	}
	return *v, true
}

// OldJobName returns the old "jobName" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldJobName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJobName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJobName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobName: %w", err)
	}
	return oldValue.JobName, nil
}

// ClearJobName clears the value of the "jobName" field.
func (m *SysJobLogMutation) ClearJobName() {
	m.jobName = nil
	m.clearedFields[sysjoblog.FieldJobName] = struct{}{}
}

// JobNameCleared returns if the "jobName" field was cleared in this mutation.
func (m *SysJobLogMutation) JobNameCleared() bool {
	_, ok := m.clearedFields[sysjoblog.FieldJobName]
	return ok
}

// ResetJobName resets all changes to the "jobName" field.
func (m *SysJobLogMutation) ResetJobName() {
	m.jobName = nil
	delete(m.clearedFields, sysjoblog.FieldJobName)
}

// SetEntryId sets the "entryId" field.
func (m *SysJobLogMutation) SetEntryId(i int32) {
	m.entryId = &i
	m.addentryId = nil
}

// EntryId returns the value of the "entryId" field in the mutation.
func (m *SysJobLogMutation) EntryId() (r int32, exists bool) {
	v := m.entryId
	if v == nil {
		return
	}
	return *v, true
}

// OldEntryId returns the old "entryId" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldEntryId(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEntryId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEntryId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntryId: %w", err)
	}
	return oldValue.EntryId, nil
}

// AddEntryId adds i to the "entryId" field.
func (m *SysJobLogMutation) AddEntryId(i int32) {
	if m.addentryId != nil {
		*m.addentryId += i
	} else {
		m.addentryId = &i
	}
}

// AddedEntryId returns the value that was added to the "entryId" field in this mutation.
func (m *SysJobLogMutation) AddedEntryId() (r int32, exists bool) {
	v := m.addentryId
	if v == nil {
		return
	}
	return *v, true
}

// ClearEntryId clears the value of the "entryId" field.
func (m *SysJobLogMutation) ClearEntryId() {
	m.entryId = nil
	m.addentryId = nil
	m.clearedFields[sysjoblog.FieldEntryId] = struct{}{}
}

// EntryIdCleared returns if the "entryId" field was cleared in this mutation.
func (m *SysJobLogMutation) EntryIdCleared() bool {
	_, ok := m.clearedFields[sysjoblog.FieldEntryId]
	return ok
}

// ResetEntryId resets all changes to the "entryId" field.
func (m *SysJobLogMutation) ResetEntryId() {
	m.entryId = nil
	m.addentryId = nil
	delete(m.clearedFields, sysjoblog.FieldEntryId)
}

// SetStatus sets the "status" field.
func (m *SysJobLogMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *SysJobLogMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *SysJobLogMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[sysjoblog.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysJobLogMutation) StatusCleared() bool {
	_, ok := m.clearedFields[sysjoblog.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysJobLogMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, sysjoblog.FieldStatus)
}

// SetDuration sets the "duration" field.
func (m *SysJobLogMutation) SetDuration(t time.Duration) {
	m.duration = &t
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *SysJobLogMutation) Duration() (r time.Duration, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldDuration(ctx context.Context) (v time.Duration, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds t to the "duration" field.
func (m *SysJobLogMutation) AddDuration(t time.Duration) {
	if m.addduration != nil {
		*m.addduration += t
	} else {
		m.addduration = &t
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *SysJobLogMutation) AddedDuration() (r time.Duration, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *SysJobLogMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[sysjoblog.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *SysJobLogMutation) DurationCleared() bool {
	_, ok := m.clearedFields[sysjoblog.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *SysJobLogMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, sysjoblog.FieldDuration)
}

// SetInfo sets the "info" field.
func (m *SysJobLogMutation) SetInfo(s string) {
	m.info = &s
}

// Info returns the value of the "info" field in the mutation.
func (m *SysJobLogMutation) Info() (r string, exists bool) {
	v := m.info
	if v == nil {
		return
	}
	return *v, true
}

// OldInfo returns the old "info" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfo: %w", err)
	}
	return oldValue.Info, nil
}

// ClearInfo clears the value of the "info" field.
func (m *SysJobLogMutation) ClearInfo() {
	m.info = nil
	m.clearedFields[sysjoblog.FieldInfo] = struct{}{}
}

// InfoCleared returns if the "info" field was cleared in this mutation.
func (m *SysJobLogMutation) InfoCleared() bool {
	_, ok := m.clearedFields[sysjoblog.FieldInfo]
	return ok
}

// ResetInfo resets all changes to the "info" field.
func (m *SysJobLogMutation) ResetInfo() {
	m.info = nil
	delete(m.clearedFields, sysjoblog.FieldInfo)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysJobLogMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysJobLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysJobLogMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysJobLogMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysJobLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysJobLogMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysJobLogMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysJobLogMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysJobLogMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysJobLogMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysJobLogMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysJobLogMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysJobLogMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysJobLogMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysJobLogMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysJobLogMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysJobLogMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysJobLogMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysJobLog entity.
// If the SysJobLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJobLogMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysJobLogMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysJobLogMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysJobLogMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// SetJobID sets the "job" edge to the SysJob entity by id.
func (m *SysJobLogMutation) SetJobID(id int64) {
	m.job = &id
}

// ClearJob clears the "job" edge to the SysJob entity.
func (m *SysJobLogMutation) ClearJob() {
	m.clearedjob = true
}

// JobCleared reports if the "job" edge to the SysJob entity was cleared.
func (m *SysJobLogMutation) JobCleared() bool {
	return m.JobIdCleared() || m.clearedjob
}

// JobID returns the "job" edge ID in the mutation.
func (m *SysJobLogMutation) JobID() (id int64, exists bool) {
	if m.job != nil {
		return *m.job, true
	}
	return
}

// JobIDs returns the "job" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// JobID instead. It exists only for internal usage by the builders.
func (m *SysJobLogMutation) JobIDs() (ids []int64) {
	if id := m.job; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetJob resets all changes to the "job" edge.
func (m *SysJobLogMutation) ResetJob() {
	m.job = nil
	m.clearedjob = false
}

// Where appends a list predicates to the SysJobLogMutation builder.
func (m *SysJobLogMutation) Where(ps ...predicate.SysJobLog) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysJobLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysJobLog).
func (m *SysJobLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysJobLogMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.job != nil {
		fields = append(fields, sysjoblog.FieldJobId)
	}
	if m.jobName != nil {
		fields = append(fields, sysjoblog.FieldJobName)
	}
	if m.entryId != nil {
		fields = append(fields, sysjoblog.FieldEntryId)
	}
	if m.status != nil {
		fields = append(fields, sysjoblog.FieldStatus)
	}
	if m.duration != nil {
		fields = append(fields, sysjoblog.FieldDuration)
	}
	if m.info != nil {
		fields = append(fields, sysjoblog.FieldInfo)
	}
	if m.createdAt != nil {
		fields = append(fields, sysjoblog.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysjoblog.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysjoblog.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysjoblog.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysjoblog.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysJobLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysjoblog.FieldJobId:
		return m.JobId()
	case sysjoblog.FieldJobName:
		return m.JobName()
	case sysjoblog.FieldEntryId:
		return m.EntryId()
	case sysjoblog.FieldStatus:
		return m.Status()
	case sysjoblog.FieldDuration:
		return m.Duration()
	case sysjoblog.FieldInfo:
		return m.Info()
	case sysjoblog.FieldCreatedAt:
		return m.CreatedAt()
	case sysjoblog.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysjoblog.FieldCreateBy:
		return m.CreateBy()
	case sysjoblog.FieldUpdateBy:
		return m.UpdateBy()
	case sysjoblog.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysJobLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysjoblog.FieldJobId:
		return m.OldJobId(ctx)
	case sysjoblog.FieldJobName:
		return m.OldJobName(ctx)
	case sysjoblog.FieldEntryId:
		return m.OldEntryId(ctx)
	case sysjoblog.FieldStatus:
		return m.OldStatus(ctx)
	case sysjoblog.FieldDuration:
		return m.OldDuration(ctx)
	case sysjoblog.FieldInfo:
		return m.OldInfo(ctx)
	case sysjoblog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysjoblog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysjoblog.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysjoblog.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysjoblog.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysJobLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysJobLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysjoblog.FieldJobId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobId(v)
		return nil
	case sysjoblog.FieldJobName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobName(v)
		return nil
	case sysjoblog.FieldEntryId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntryId(v)
		return nil
	case sysjoblog.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysjoblog.FieldDuration:
		v, ok := value.(time.Duration)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case sysjoblog.FieldInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfo(v)
		return nil
	case sysjoblog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysjoblog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysjoblog.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysjoblog.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysjoblog.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysJobLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysJobLogMutation) AddedFields() []string {
	var fields []string
	if m.addentryId != nil {
		fields = append(fields, sysjoblog.FieldEntryId)
	}
	if m.addduration != nil {
		fields = append(fields, sysjoblog.FieldDuration)
	}
	if m.addcreateBy != nil {
		fields = append(fields, sysjoblog.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysjoblog.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysjoblog.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysJobLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysjoblog.FieldEntryId:
		return m.AddedEntryId()
	case sysjoblog.FieldDuration:
		return m.AddedDuration()
	case sysjoblog.FieldCreateBy:
		return m.AddedCreateBy()
	case sysjoblog.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysjoblog.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysJobLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysjoblog.FieldEntryId:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEntryId(v)
		return nil
	case sysjoblog.FieldDuration:
		v, ok := value.(time.Duration)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case sysjoblog.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysjoblog.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysjoblog.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysJobLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysJobLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysjoblog.FieldJobId) {
		fields = append(fields, sysjoblog.FieldJobId)
	}
	if m.FieldCleared(sysjoblog.FieldJobName) {
		fields = append(fields, sysjoblog.FieldJobName)
	}
	if m.FieldCleared(sysjoblog.FieldEntryId) {
		fields = append(fields, sysjoblog.FieldEntryId)
	}
	if m.FieldCleared(sysjoblog.FieldStatus) {
		fields = append(fields, sysjoblog.FieldStatus)
	}
	if m.FieldCleared(sysjoblog.FieldDuration) {
		fields = append(fields, sysjoblog.FieldDuration)
	}
	if m.FieldCleared(sysjoblog.FieldInfo) {
		fields = append(fields, sysjoblog.FieldInfo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysJobLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysJobLogMutation) ClearField(name string) error {
	switch name {
	case sysjoblog.FieldJobId:
		m.ClearJobId()
		return nil
	case sysjoblog.FieldJobName:
		m.ClearJobName()
		return nil
	case sysjoblog.FieldEntryId:
		m.ClearEntryId()
		return nil
	case sysjoblog.FieldStatus:
		m.ClearStatus()
		return nil
	case sysjoblog.FieldDuration:
		m.ClearDuration()
		return nil
	case sysjoblog.FieldInfo:
		m.ClearInfo()
		return nil
	}
	return fmt.Errorf("unknown SysJobLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysJobLogMutation) ResetField(name string) error {
	switch name {
	case sysjoblog.FieldJobId:
		m.ResetJobId()
		return nil
	case sysjoblog.FieldJobName:
		m.ResetJobName()
		return nil
	case sysjoblog.FieldEntryId:
		m.ResetEntryId()
		return nil
	case sysjoblog.FieldStatus:
		m.ResetStatus()
		return nil
	case sysjoblog.FieldDuration:
		m.ResetDuration()
		return nil
	case sysjoblog.FieldInfo:
		m.ResetInfo()
		return nil
	case sysjoblog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysjoblog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysjoblog.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysjoblog.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysjoblog.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysJobLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysJobLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.job != nil {
		edges = append(edges, sysjoblog.EdgeJob)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysJobLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysjoblog.EdgeJob:
		if id := m.job; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysJobLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysJobLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysJobLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedjob {
		edges = append(edges, sysjoblog.EdgeJob)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysJobLogMutation) EdgeCleared(name string) bool {
	switch name {
	case sysjoblog.EdgeJob:
		return m.clearedjob
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysJobLogMutation) ClearEdge(name string) error {
	switch name {
	case sysjoblog.EdgeJob:
		m.ClearJob()
		return nil
	}
	return fmt.Errorf("unknown SysJobLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysJobLogMutation) ResetEdge(name string) error {
	switch name {
	case sysjoblog.EdgeJob:
		m.ResetJob()
		return nil
	}
	return fmt.Errorf("unknown SysJobLog edge %s", name)
}

// SysLoginLogMutation represents an operation that mutates the SysLoginLog nodes in the graph.
type SysLoginLogMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	status        *string
	ipaddr        *string
	loginLocation *string
	browser       *string
	os            *string
	platform      *string
	loginTime     *time.Time
	remark        *string
	msg           *string
	createdAt     *time.Time
	updatedAt     *time.Time
	createBy      *int64
	addcreateBy   *int64
	updateBy      *int64
	addupdateBy   *int64
	tenantId      *int64
	addtenantId   *int64
	clearedFields map[string]struct{}
	user          *int64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*SysLoginLog, error)
	predicates    []predicate.SysLoginLog
}

var _ ent.Mutation = (*SysLoginLogMutation)(nil)

// sysloginlogOption allows management of the mutation configuration using functional options.
type sysloginlogOption func(*SysLoginLogMutation)

// newSysLoginLogMutation creates new mutation for the SysLoginLog entity.
func newSysLoginLogMutation(c config, op Op, opts ...sysloginlogOption) *SysLoginLogMutation {
	m := &SysLoginLogMutation{
		config:        c,
		op:            op,
		typ:           TypeSysLoginLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysLoginLogID sets the ID field of the mutation.
func withSysLoginLogID(id int64) sysloginlogOption {
	return func(m *SysLoginLogMutation) {
		var (
			err   error
			once  sync.Once
			value *SysLoginLog
		)
		m.oldValue = func(ctx context.Context) (*SysLoginLog, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysLoginLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysLoginLog sets the old SysLoginLog of the mutation.
func withSysLoginLog(node *SysLoginLog) sysloginlogOption {
	return func(m *SysLoginLogMutation) {
		m.oldValue = func(context.Context) (*SysLoginLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysLoginLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysLoginLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysLoginLogMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserId sets the "userId" field.
func (m *SysLoginLogMutation) SetUserId(i int64) {
	m.user = &i
}

// UserId returns the value of the "userId" field in the mutation.
func (m *SysLoginLogMutation) UserId() (r int64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old "userId" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldUserId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// ClearUserId clears the value of the "userId" field.
func (m *SysLoginLogMutation) ClearUserId() {
	m.user = nil
	m.clearedFields[sysloginlog.FieldUserId] = struct{}{}
}

// UserIdCleared returns if the "userId" field was cleared in this mutation.
func (m *SysLoginLogMutation) UserIdCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldUserId]
	return ok
}

// ResetUserId resets all changes to the "userId" field.
func (m *SysLoginLogMutation) ResetUserId() {
	m.user = nil
	delete(m.clearedFields, sysloginlog.FieldUserId)
}

// SetStatus sets the "status" field.
func (m *SysLoginLogMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SysLoginLogMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *SysLoginLogMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[sysloginlog.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysLoginLogMutation) StatusCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysLoginLogMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, sysloginlog.FieldStatus)
}

// SetIpaddr sets the "ipaddr" field.
func (m *SysLoginLogMutation) SetIpaddr(s string) {
	m.ipaddr = &s
}

// Ipaddr returns the value of the "ipaddr" field in the mutation.
func (m *SysLoginLogMutation) Ipaddr() (r string, exists bool) {
	v := m.ipaddr
	if v == nil {
		return
	}
	return *v, true
}

// OldIpaddr returns the old "ipaddr" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldIpaddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIpaddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIpaddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIpaddr: %w", err)
	}
	return oldValue.Ipaddr, nil
}

// ClearIpaddr clears the value of the "ipaddr" field.
func (m *SysLoginLogMutation) ClearIpaddr() {
	m.ipaddr = nil
	m.clearedFields[sysloginlog.FieldIpaddr] = struct{}{}
}

// IpaddrCleared returns if the "ipaddr" field was cleared in this mutation.
func (m *SysLoginLogMutation) IpaddrCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldIpaddr]
	return ok
}

// ResetIpaddr resets all changes to the "ipaddr" field.
func (m *SysLoginLogMutation) ResetIpaddr() {
	m.ipaddr = nil
	delete(m.clearedFields, sysloginlog.FieldIpaddr)
}

// SetLoginLocation sets the "loginLocation" field.
func (m *SysLoginLogMutation) SetLoginLocation(s string) {
	m.loginLocation = &s
}

// LoginLocation returns the value of the "loginLocation" field in the mutation.
func (m *SysLoginLogMutation) LoginLocation() (r string, exists bool) {
	v := m.loginLocation
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginLocation returns the old "loginLocation" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldLoginLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLoginLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLoginLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginLocation: %w", err)
	}
	return oldValue.LoginLocation, nil
}

// ClearLoginLocation clears the value of the "loginLocation" field.
func (m *SysLoginLogMutation) ClearLoginLocation() {
	m.loginLocation = nil
	m.clearedFields[sysloginlog.FieldLoginLocation] = struct{}{}
}

// LoginLocationCleared returns if the "loginLocation" field was cleared in this mutation.
func (m *SysLoginLogMutation) LoginLocationCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldLoginLocation]
	return ok
}

// ResetLoginLocation resets all changes to the "loginLocation" field.
func (m *SysLoginLogMutation) ResetLoginLocation() {
	m.loginLocation = nil
	delete(m.clearedFields, sysloginlog.FieldLoginLocation)
}

// SetBrowser sets the "browser" field.
func (m *SysLoginLogMutation) SetBrowser(s string) {
	m.browser = &s
}

// Browser returns the value of the "browser" field in the mutation.
func (m *SysLoginLogMutation) Browser() (r string, exists bool) {
	v := m.browser
	if v == nil {
		return
	}
	return *v, true
}

// OldBrowser returns the old "browser" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldBrowser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBrowser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBrowser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrowser: %w", err)
	}
	return oldValue.Browser, nil
}

// ClearBrowser clears the value of the "browser" field.
func (m *SysLoginLogMutation) ClearBrowser() {
	m.browser = nil
	m.clearedFields[sysloginlog.FieldBrowser] = struct{}{}
}

// BrowserCleared returns if the "browser" field was cleared in this mutation.
func (m *SysLoginLogMutation) BrowserCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldBrowser]
	return ok
}

// ResetBrowser resets all changes to the "browser" field.
func (m *SysLoginLogMutation) ResetBrowser() {
	m.browser = nil
	delete(m.clearedFields, sysloginlog.FieldBrowser)
}

// SetOs sets the "os" field.
func (m *SysLoginLogMutation) SetOs(s string) {
	m.os = &s
}

// Os returns the value of the "os" field in the mutation.
func (m *SysLoginLogMutation) Os() (r string, exists bool) {
	v := m.os
	if v == nil {
		return
	}
	return *v, true
}

// OldOs returns the old "os" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldOs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOs: %w", err)
	}
	return oldValue.Os, nil
}

// ClearOs clears the value of the "os" field.
func (m *SysLoginLogMutation) ClearOs() {
	m.os = nil
	m.clearedFields[sysloginlog.FieldOs] = struct{}{}
}

// OsCleared returns if the "os" field was cleared in this mutation.
func (m *SysLoginLogMutation) OsCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldOs]
	return ok
}

// ResetOs resets all changes to the "os" field.
func (m *SysLoginLogMutation) ResetOs() {
	m.os = nil
	delete(m.clearedFields, sysloginlog.FieldOs)
}

// SetPlatform sets the "platform" field.
func (m *SysLoginLogMutation) SetPlatform(s string) {
	m.platform = &s
}

// Platform returns the value of the "platform" field in the mutation.
func (m *SysLoginLogMutation) Platform() (r string, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldPlatform(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ClearPlatform clears the value of the "platform" field.
func (m *SysLoginLogMutation) ClearPlatform() {
	m.platform = nil
	m.clearedFields[sysloginlog.FieldPlatform] = struct{}{}
}

// PlatformCleared returns if the "platform" field was cleared in this mutation.
func (m *SysLoginLogMutation) PlatformCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldPlatform]
	return ok
}

// ResetPlatform resets all changes to the "platform" field.
func (m *SysLoginLogMutation) ResetPlatform() {
	m.platform = nil
	delete(m.clearedFields, sysloginlog.FieldPlatform)
}

// SetLoginTime sets the "loginTime" field.
func (m *SysLoginLogMutation) SetLoginTime(t time.Time) {
	m.loginTime = &t
}

// LoginTime returns the value of the "loginTime" field in the mutation.
func (m *SysLoginLogMutation) LoginTime() (r time.Time, exists bool) {
	v := m.loginTime
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginTime returns the old "loginTime" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldLoginTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginTime: %w", err)
	}
	return oldValue.LoginTime, nil
}

// ClearLoginTime clears the value of the "loginTime" field.
func (m *SysLoginLogMutation) ClearLoginTime() {
	m.loginTime = nil
	m.clearedFields[sysloginlog.FieldLoginTime] = struct{}{}
}

// LoginTimeCleared returns if the "loginTime" field was cleared in this mutation.
func (m *SysLoginLogMutation) LoginTimeCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldLoginTime]
	return ok
}

// ResetLoginTime resets all changes to the "loginTime" field.
func (m *SysLoginLogMutation) ResetLoginTime() {
	m.loginTime = nil
	delete(m.clearedFields, sysloginlog.FieldLoginTime)
}

// SetRemark sets the "remark" field.
func (m *SysLoginLogMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysLoginLogMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysLoginLogMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysloginlog.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysLoginLogMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysLoginLogMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysloginlog.FieldRemark)
}

// SetMsg sets the "msg" field.
func (m *SysLoginLogMutation) SetMsg(s string) {
	m.msg = &s
}

// Msg returns the value of the "msg" field in the mutation.
func (m *SysLoginLogMutation) Msg() (r string, exists bool) {
	v := m.msg
	if v == nil {
		return
	}
	return *v, true
}

// OldMsg returns the old "msg" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldMsg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMsg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMsg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMsg: %w", err)
	}
	return oldValue.Msg, nil
}

// ClearMsg clears the value of the "msg" field.
func (m *SysLoginLogMutation) ClearMsg() {
	m.msg = nil
	m.clearedFields[sysloginlog.FieldMsg] = struct{}{}
}

// MsgCleared returns if the "msg" field was cleared in this mutation.
func (m *SysLoginLogMutation) MsgCleared() bool {
	_, ok := m.clearedFields[sysloginlog.FieldMsg]
	return ok
}

// ResetMsg resets all changes to the "msg" field.
func (m *SysLoginLogMutation) ResetMsg() {
	m.msg = nil
	delete(m.clearedFields, sysloginlog.FieldMsg)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysLoginLogMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysLoginLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysLoginLogMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysLoginLogMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysLoginLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysLoginLogMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysLoginLogMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysLoginLogMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysLoginLogMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysLoginLogMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysLoginLogMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysLoginLogMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysLoginLogMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysLoginLogMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysLoginLogMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysLoginLogMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysLoginLogMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysLoginLogMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysLoginLog entity.
// If the SysLoginLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoginLogMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysLoginLogMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysLoginLogMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysLoginLogMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// SetUserID sets the "user" edge to the SysUser entity by id.
func (m *SysLoginLogMutation) SetUserID(id int64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the SysUser entity.
func (m *SysLoginLogMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the SysUser entity was cleared.
func (m *SysLoginLogMutation) UserCleared() bool {
	return m.UserIdCleared() || m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SysLoginLogMutation) UserID() (id int64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SysLoginLogMutation) UserIDs() (ids []int64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SysLoginLogMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SysLoginLogMutation builder.
func (m *SysLoginLogMutation) Where(ps ...predicate.SysLoginLog) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysLoginLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysLoginLog).
func (m *SysLoginLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysLoginLogMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.user != nil {
		fields = append(fields, sysloginlog.FieldUserId)
	}
	if m.status != nil {
		fields = append(fields, sysloginlog.FieldStatus)
	}
	if m.ipaddr != nil {
		fields = append(fields, sysloginlog.FieldIpaddr)
	}
	if m.loginLocation != nil {
		fields = append(fields, sysloginlog.FieldLoginLocation)
	}
	if m.browser != nil {
		fields = append(fields, sysloginlog.FieldBrowser)
	}
	if m.os != nil {
		fields = append(fields, sysloginlog.FieldOs)
	}
	if m.platform != nil {
		fields = append(fields, sysloginlog.FieldPlatform)
	}
	if m.loginTime != nil {
		fields = append(fields, sysloginlog.FieldLoginTime)
	}
	if m.remark != nil {
		fields = append(fields, sysloginlog.FieldRemark)
	}
	if m.msg != nil {
		fields = append(fields, sysloginlog.FieldMsg)
	}
	if m.createdAt != nil {
		fields = append(fields, sysloginlog.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysloginlog.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysloginlog.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysloginlog.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysloginlog.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysLoginLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysloginlog.FieldUserId:
		return m.UserId()
	case sysloginlog.FieldStatus:
		return m.Status()
	case sysloginlog.FieldIpaddr:
		return m.Ipaddr()
	case sysloginlog.FieldLoginLocation:
		return m.LoginLocation()
	case sysloginlog.FieldBrowser:
		return m.Browser()
	case sysloginlog.FieldOs:
		return m.Os()
	case sysloginlog.FieldPlatform:
		return m.Platform()
	case sysloginlog.FieldLoginTime:
		return m.LoginTime()
	case sysloginlog.FieldRemark:
		return m.Remark()
	case sysloginlog.FieldMsg:
		return m.Msg()
	case sysloginlog.FieldCreatedAt:
		return m.CreatedAt()
	case sysloginlog.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysloginlog.FieldCreateBy:
		return m.CreateBy()
	case sysloginlog.FieldUpdateBy:
		return m.UpdateBy()
	case sysloginlog.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysLoginLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysloginlog.FieldUserId:
		return m.OldUserId(ctx)
	case sysloginlog.FieldStatus:
		return m.OldStatus(ctx)
	case sysloginlog.FieldIpaddr:
		return m.OldIpaddr(ctx)
	case sysloginlog.FieldLoginLocation:
		return m.OldLoginLocation(ctx)
	case sysloginlog.FieldBrowser:
		return m.OldBrowser(ctx)
	case sysloginlog.FieldOs:
		return m.OldOs(ctx)
	case sysloginlog.FieldPlatform:
		return m.OldPlatform(ctx)
	case sysloginlog.FieldLoginTime:
		return m.OldLoginTime(ctx)
	case sysloginlog.FieldRemark:
		return m.OldRemark(ctx)
	case sysloginlog.FieldMsg:
		return m.OldMsg(ctx)
	case sysloginlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysloginlog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysloginlog.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysloginlog.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysloginlog.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysLoginLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysLoginLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysloginlog.FieldUserId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case sysloginlog.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysloginlog.FieldIpaddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIpaddr(v)
		return nil
	case sysloginlog.FieldLoginLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginLocation(v)
		return nil
	case sysloginlog.FieldBrowser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrowser(v)
		return nil
	case sysloginlog.FieldOs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOs(v)
		return nil
	case sysloginlog.FieldPlatform:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case sysloginlog.FieldLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginTime(v)
		return nil
	case sysloginlog.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysloginlog.FieldMsg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMsg(v)
		return nil
	case sysloginlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysloginlog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysloginlog.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysloginlog.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysloginlog.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysLoginLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysLoginLogMutation) AddedFields() []string {
	var fields []string
	if m.addcreateBy != nil {
		fields = append(fields, sysloginlog.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysloginlog.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysloginlog.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysLoginLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysloginlog.FieldCreateBy:
		return m.AddedCreateBy()
	case sysloginlog.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysloginlog.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysLoginLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysloginlog.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysloginlog.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysloginlog.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysLoginLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysLoginLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysloginlog.FieldUserId) {
		fields = append(fields, sysloginlog.FieldUserId)
	}
	if m.FieldCleared(sysloginlog.FieldStatus) {
		fields = append(fields, sysloginlog.FieldStatus)
	}
	if m.FieldCleared(sysloginlog.FieldIpaddr) {
		fields = append(fields, sysloginlog.FieldIpaddr)
	}
	if m.FieldCleared(sysloginlog.FieldLoginLocation) {
		fields = append(fields, sysloginlog.FieldLoginLocation)
	}
	if m.FieldCleared(sysloginlog.FieldBrowser) {
		fields = append(fields, sysloginlog.FieldBrowser)
	}
	if m.FieldCleared(sysloginlog.FieldOs) {
		fields = append(fields, sysloginlog.FieldOs)
	}
	if m.FieldCleared(sysloginlog.FieldPlatform) {
		fields = append(fields, sysloginlog.FieldPlatform)
	}
	if m.FieldCleared(sysloginlog.FieldLoginTime) {
		fields = append(fields, sysloginlog.FieldLoginTime)
	}
	if m.FieldCleared(sysloginlog.FieldRemark) {
		fields = append(fields, sysloginlog.FieldRemark)
	}
	if m.FieldCleared(sysloginlog.FieldMsg) {
		fields = append(fields, sysloginlog.FieldMsg)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysLoginLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysLoginLogMutation) ClearField(name string) error {
	switch name {
	case sysloginlog.FieldUserId:
		m.ClearUserId()
		return nil
	case sysloginlog.FieldStatus:
		m.ClearStatus()
		return nil
	case sysloginlog.FieldIpaddr:
		m.ClearIpaddr()
		return nil
	case sysloginlog.FieldLoginLocation:
		m.ClearLoginLocation()
		return nil
	case sysloginlog.FieldBrowser:
		m.ClearBrowser()
		return nil
	case sysloginlog.FieldOs:
		m.ClearOs()
		return nil
	case sysloginlog.FieldPlatform:
		m.ClearPlatform()
		return nil
	case sysloginlog.FieldLoginTime:
		m.ClearLoginTime()
		return nil
	case sysloginlog.FieldRemark:
		m.ClearRemark()
		return nil
	case sysloginlog.FieldMsg:
		m.ClearMsg()
		return nil
	}
	return fmt.Errorf("unknown SysLoginLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysLoginLogMutation) ResetField(name string) error {
	switch name {
	case sysloginlog.FieldUserId:
		m.ResetUserId()
		return nil
	case sysloginlog.FieldStatus:
		m.ResetStatus()
		return nil
	case sysloginlog.FieldIpaddr:
		m.ResetIpaddr()
		return nil
	case sysloginlog.FieldLoginLocation:
		m.ResetLoginLocation()
		return nil
	case sysloginlog.FieldBrowser:
		m.ResetBrowser()
		return nil
	case sysloginlog.FieldOs:
		m.ResetOs()
		return nil
	case sysloginlog.FieldPlatform:
		m.ResetPlatform()
		return nil
	case sysloginlog.FieldLoginTime:
		m.ResetLoginTime()
		return nil
	case sysloginlog.FieldRemark:
		m.ResetRemark()
		return nil
	case sysloginlog.FieldMsg:
		m.ResetMsg()
		return nil
	case sysloginlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysloginlog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysloginlog.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysloginlog.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysloginlog.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysLoginLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysLoginLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, sysloginlog.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysLoginLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysloginlog.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysLoginLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysLoginLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysLoginLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, sysloginlog.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysLoginLogMutation) EdgeCleared(name string) bool {
	switch name {
	case sysloginlog.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysLoginLogMutation) ClearEdge(name string) error {
	switch name {
	case sysloginlog.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown SysLoginLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysLoginLogMutation) ResetEdge(name string) error {
	switch name {
	case sysloginlog.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown SysLoginLog edge %s", name)
}

// SysMenuMutation represents an operation that mutates the SysMenu nodes in the graph.
type SysMenuMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	menuName       *string
	title          *string
	icon           *string
	_path          *string
	paths          *string
	menuType       *string
	action         *string
	permission     *string
	noCache        *bool
	breadcrumb     *string
	component      *string
	sort           *int32
	addsort        *int32
	visible        *bool
	isFrame        *bool
	sysApi         *string
	createdAt      *time.Time
	updatedAt      *time.Time
	createBy       *int64
	addcreateBy    *int64
	updateBy       *int64
	addupdateBy    *int64
	tenantId       *int64
	addtenantId    *int64
	clearedFields  map[string]struct{}
	role           map[int64]struct{}
	removedrole    map[int64]struct{}
	clearedrole    bool
	parent         *int64
	clearedparent  bool
	childes        map[int64]struct{}
	removedchildes map[int64]struct{}
	clearedchildes bool
	done           bool
	oldValue       func(context.Context) (*SysMenu, error)
	predicates     []predicate.SysMenu
}

var _ ent.Mutation = (*SysMenuMutation)(nil)

// sysmenuOption allows management of the mutation configuration using functional options.
type sysmenuOption func(*SysMenuMutation)

// newSysMenuMutation creates new mutation for the SysMenu entity.
func newSysMenuMutation(c config, op Op, opts ...sysmenuOption) *SysMenuMutation {
	m := &SysMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeSysMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysMenuID sets the ID field of the mutation.
func withSysMenuID(id int64) sysmenuOption {
	return func(m *SysMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *SysMenu
		)
		m.oldValue = func(ctx context.Context) (*SysMenu, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysMenu sets the old SysMenu of the mutation.
func withSysMenu(node *SysMenu) sysmenuOption {
	return func(m *SysMenuMutation) {
		m.oldValue = func(context.Context) (*SysMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysMenuMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMenuName sets the "menuName" field.
func (m *SysMenuMutation) SetMenuName(s string) {
	m.menuName = &s
}

// MenuName returns the value of the "menuName" field in the mutation.
func (m *SysMenuMutation) MenuName() (r string, exists bool) {
	v := m.menuName
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuName returns the old "menuName" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldMenuName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMenuName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMenuName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuName: %w", err)
	}
	return oldValue.MenuName, nil
}

// ClearMenuName clears the value of the "menuName" field.
func (m *SysMenuMutation) ClearMenuName() {
	m.menuName = nil
	m.clearedFields[sysmenu.FieldMenuName] = struct{}{}
}

// MenuNameCleared returns if the "menuName" field was cleared in this mutation.
func (m *SysMenuMutation) MenuNameCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldMenuName]
	return ok
}

// ResetMenuName resets all changes to the "menuName" field.
func (m *SysMenuMutation) ResetMenuName() {
	m.menuName = nil
	delete(m.clearedFields, sysmenu.FieldMenuName)
}

// SetTitle sets the "title" field.
func (m *SysMenuMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SysMenuMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *SysMenuMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[sysmenu.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *SysMenuMutation) TitleCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *SysMenuMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, sysmenu.FieldTitle)
}

// SetIcon sets the "icon" field.
func (m *SysMenuMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *SysMenuMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *SysMenuMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[sysmenu.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *SysMenuMutation) IconCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *SysMenuMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, sysmenu.FieldIcon)
}

// SetPath sets the "path" field.
func (m *SysMenuMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *SysMenuMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *SysMenuMutation) ClearPath() {
	m._path = nil
	m.clearedFields[sysmenu.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *SysMenuMutation) PathCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *SysMenuMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, sysmenu.FieldPath)
}

// SetPaths sets the "paths" field.
func (m *SysMenuMutation) SetPaths(s string) {
	m.paths = &s
}

// Paths returns the value of the "paths" field in the mutation.
func (m *SysMenuMutation) Paths() (r string, exists bool) {
	v := m.paths
	if v == nil {
		return
	}
	return *v, true
}

// OldPaths returns the old "paths" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldPaths(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPaths is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPaths requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaths: %w", err)
	}
	return oldValue.Paths, nil
}

// ClearPaths clears the value of the "paths" field.
func (m *SysMenuMutation) ClearPaths() {
	m.paths = nil
	m.clearedFields[sysmenu.FieldPaths] = struct{}{}
}

// PathsCleared returns if the "paths" field was cleared in this mutation.
func (m *SysMenuMutation) PathsCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldPaths]
	return ok
}

// ResetPaths resets all changes to the "paths" field.
func (m *SysMenuMutation) ResetPaths() {
	m.paths = nil
	delete(m.clearedFields, sysmenu.FieldPaths)
}

// SetMenuType sets the "menuType" field.
func (m *SysMenuMutation) SetMenuType(s string) {
	m.menuType = &s
}

// MenuType returns the value of the "menuType" field in the mutation.
func (m *SysMenuMutation) MenuType() (r string, exists bool) {
	v := m.menuType
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuType returns the old "menuType" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldMenuType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMenuType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMenuType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuType: %w", err)
	}
	return oldValue.MenuType, nil
}

// ClearMenuType clears the value of the "menuType" field.
func (m *SysMenuMutation) ClearMenuType() {
	m.menuType = nil
	m.clearedFields[sysmenu.FieldMenuType] = struct{}{}
}

// MenuTypeCleared returns if the "menuType" field was cleared in this mutation.
func (m *SysMenuMutation) MenuTypeCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldMenuType]
	return ok
}

// ResetMenuType resets all changes to the "menuType" field.
func (m *SysMenuMutation) ResetMenuType() {
	m.menuType = nil
	delete(m.clearedFields, sysmenu.FieldMenuType)
}

// SetAction sets the "action" field.
func (m *SysMenuMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *SysMenuMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ClearAction clears the value of the "action" field.
func (m *SysMenuMutation) ClearAction() {
	m.action = nil
	m.clearedFields[sysmenu.FieldAction] = struct{}{}
}

// ActionCleared returns if the "action" field was cleared in this mutation.
func (m *SysMenuMutation) ActionCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldAction]
	return ok
}

// ResetAction resets all changes to the "action" field.
func (m *SysMenuMutation) ResetAction() {
	m.action = nil
	delete(m.clearedFields, sysmenu.FieldAction)
}

// SetPermission sets the "permission" field.
func (m *SysMenuMutation) SetPermission(s string) {
	m.permission = &s
}

// Permission returns the value of the "permission" field in the mutation.
func (m *SysMenuMutation) Permission() (r string, exists bool) {
	v := m.permission
	if v == nil {
		return
	}
	return *v, true
}

// OldPermission returns the old "permission" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldPermission(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPermission is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPermission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermission: %w", err)
	}
	return oldValue.Permission, nil
}

// ClearPermission clears the value of the "permission" field.
func (m *SysMenuMutation) ClearPermission() {
	m.permission = nil
	m.clearedFields[sysmenu.FieldPermission] = struct{}{}
}

// PermissionCleared returns if the "permission" field was cleared in this mutation.
func (m *SysMenuMutation) PermissionCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldPermission]
	return ok
}

// ResetPermission resets all changes to the "permission" field.
func (m *SysMenuMutation) ResetPermission() {
	m.permission = nil
	delete(m.clearedFields, sysmenu.FieldPermission)
}

// SetNoCache sets the "noCache" field.
func (m *SysMenuMutation) SetNoCache(b bool) {
	m.noCache = &b
}

// NoCache returns the value of the "noCache" field in the mutation.
func (m *SysMenuMutation) NoCache() (r bool, exists bool) {
	v := m.noCache
	if v == nil {
		return
	}
	return *v, true
}

// OldNoCache returns the old "noCache" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldNoCache(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNoCache is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNoCache requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNoCache: %w", err)
	}
	return oldValue.NoCache, nil
}

// ClearNoCache clears the value of the "noCache" field.
func (m *SysMenuMutation) ClearNoCache() {
	m.noCache = nil
	m.clearedFields[sysmenu.FieldNoCache] = struct{}{}
}

// NoCacheCleared returns if the "noCache" field was cleared in this mutation.
func (m *SysMenuMutation) NoCacheCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldNoCache]
	return ok
}

// ResetNoCache resets all changes to the "noCache" field.
func (m *SysMenuMutation) ResetNoCache() {
	m.noCache = nil
	delete(m.clearedFields, sysmenu.FieldNoCache)
}

// SetBreadcrumb sets the "breadcrumb" field.
func (m *SysMenuMutation) SetBreadcrumb(s string) {
	m.breadcrumb = &s
}

// Breadcrumb returns the value of the "breadcrumb" field in the mutation.
func (m *SysMenuMutation) Breadcrumb() (r string, exists bool) {
	v := m.breadcrumb
	if v == nil {
		return
	}
	return *v, true
}

// OldBreadcrumb returns the old "breadcrumb" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldBreadcrumb(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBreadcrumb is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBreadcrumb requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBreadcrumb: %w", err)
	}
	return oldValue.Breadcrumb, nil
}

// ClearBreadcrumb clears the value of the "breadcrumb" field.
func (m *SysMenuMutation) ClearBreadcrumb() {
	m.breadcrumb = nil
	m.clearedFields[sysmenu.FieldBreadcrumb] = struct{}{}
}

// BreadcrumbCleared returns if the "breadcrumb" field was cleared in this mutation.
func (m *SysMenuMutation) BreadcrumbCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldBreadcrumb]
	return ok
}

// ResetBreadcrumb resets all changes to the "breadcrumb" field.
func (m *SysMenuMutation) ResetBreadcrumb() {
	m.breadcrumb = nil
	delete(m.clearedFields, sysmenu.FieldBreadcrumb)
}

// SetComponent sets the "component" field.
func (m *SysMenuMutation) SetComponent(s string) {
	m.component = &s
}

// Component returns the value of the "component" field in the mutation.
func (m *SysMenuMutation) Component() (r string, exists bool) {
	v := m.component
	if v == nil {
		return
	}
	return *v, true
}

// OldComponent returns the old "component" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldComponent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldComponent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldComponent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponent: %w", err)
	}
	return oldValue.Component, nil
}

// ClearComponent clears the value of the "component" field.
func (m *SysMenuMutation) ClearComponent() {
	m.component = nil
	m.clearedFields[sysmenu.FieldComponent] = struct{}{}
}

// ComponentCleared returns if the "component" field was cleared in this mutation.
func (m *SysMenuMutation) ComponentCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldComponent]
	return ok
}

// ResetComponent resets all changes to the "component" field.
func (m *SysMenuMutation) ResetComponent() {
	m.component = nil
	delete(m.clearedFields, sysmenu.FieldComponent)
}

// SetSort sets the "sort" field.
func (m *SysMenuMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysMenuMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysMenuMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysMenuMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ClearSort clears the value of the "sort" field.
func (m *SysMenuMutation) ClearSort() {
	m.sort = nil
	m.addsort = nil
	m.clearedFields[sysmenu.FieldSort] = struct{}{}
}

// SortCleared returns if the "sort" field was cleared in this mutation.
func (m *SysMenuMutation) SortCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldSort]
	return ok
}

// ResetSort resets all changes to the "sort" field.
func (m *SysMenuMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
	delete(m.clearedFields, sysmenu.FieldSort)
}

// SetVisible sets the "visible" field.
func (m *SysMenuMutation) SetVisible(b bool) {
	m.visible = &b
}

// Visible returns the value of the "visible" field in the mutation.
func (m *SysMenuMutation) Visible() (r bool, exists bool) {
	v := m.visible
	if v == nil {
		return
	}
	return *v, true
}

// OldVisible returns the old "visible" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldVisible(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVisible is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVisible requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisible: %w", err)
	}
	return oldValue.Visible, nil
}

// ClearVisible clears the value of the "visible" field.
func (m *SysMenuMutation) ClearVisible() {
	m.visible = nil
	m.clearedFields[sysmenu.FieldVisible] = struct{}{}
}

// VisibleCleared returns if the "visible" field was cleared in this mutation.
func (m *SysMenuMutation) VisibleCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldVisible]
	return ok
}

// ResetVisible resets all changes to the "visible" field.
func (m *SysMenuMutation) ResetVisible() {
	m.visible = nil
	delete(m.clearedFields, sysmenu.FieldVisible)
}

// SetIsFrame sets the "isFrame" field.
func (m *SysMenuMutation) SetIsFrame(b bool) {
	m.isFrame = &b
}

// IsFrame returns the value of the "isFrame" field in the mutation.
func (m *SysMenuMutation) IsFrame() (r bool, exists bool) {
	v := m.isFrame
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFrame returns the old "isFrame" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsFrame(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsFrame is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsFrame requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsFrame: %w", err)
	}
	return oldValue.IsFrame, nil
}

// ClearIsFrame clears the value of the "isFrame" field.
func (m *SysMenuMutation) ClearIsFrame() {
	m.isFrame = nil
	m.clearedFields[sysmenu.FieldIsFrame] = struct{}{}
}

// IsFrameCleared returns if the "isFrame" field was cleared in this mutation.
func (m *SysMenuMutation) IsFrameCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIsFrame]
	return ok
}

// ResetIsFrame resets all changes to the "isFrame" field.
func (m *SysMenuMutation) ResetIsFrame() {
	m.isFrame = nil
	delete(m.clearedFields, sysmenu.FieldIsFrame)
}

// SetSysApi sets the "sysApi" field.
func (m *SysMenuMutation) SetSysApi(s string) {
	m.sysApi = &s
}

// SysApi returns the value of the "sysApi" field in the mutation.
func (m *SysMenuMutation) SysApi() (r string, exists bool) {
	v := m.sysApi
	if v == nil {
		return
	}
	return *v, true
}

// OldSysApi returns the old "sysApi" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldSysApi(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSysApi is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSysApi requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSysApi: %w", err)
	}
	return oldValue.SysApi, nil
}

// ClearSysApi clears the value of the "sysApi" field.
func (m *SysMenuMutation) ClearSysApi() {
	m.sysApi = nil
	m.clearedFields[sysmenu.FieldSysApi] = struct{}{}
}

// SysApiCleared returns if the "sysApi" field was cleared in this mutation.
func (m *SysMenuMutation) SysApiCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldSysApi]
	return ok
}

// ResetSysApi resets all changes to the "sysApi" field.
func (m *SysMenuMutation) ResetSysApi() {
	m.sysApi = nil
	delete(m.clearedFields, sysmenu.FieldSysApi)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysMenuMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysMenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysMenuMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysMenuMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysMenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysMenuMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysMenuMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysMenuMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysMenuMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysMenuMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysMenuMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysMenuMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysMenuMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysMenuMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysMenuMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysMenuMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysMenuMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysMenuMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysMenuMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysMenuMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysMenuMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// AddRoleIDs adds the "role" edge to the SysRole entity by ids.
func (m *SysMenuMutation) AddRoleIDs(ids ...int64) {
	if m.role == nil {
		m.role = make(map[int64]struct{})
	}
	for i := range ids {
		m.role[ids[i]] = struct{}{}
	}
}

// ClearRole clears the "role" edge to the SysRole entity.
func (m *SysMenuMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared reports if the "role" edge to the SysRole entity was cleared.
func (m *SysMenuMutation) RoleCleared() bool {
	return m.clearedrole
}

// RemoveRoleIDs removes the "role" edge to the SysRole entity by IDs.
func (m *SysMenuMutation) RemoveRoleIDs(ids ...int64) {
	if m.removedrole == nil {
		m.removedrole = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.role, ids[i])
		m.removedrole[ids[i]] = struct{}{}
	}
}

// RemovedRole returns the removed IDs of the "role" edge to the SysRole entity.
func (m *SysMenuMutation) RemovedRoleIDs() (ids []int64) {
	for id := range m.removedrole {
		ids = append(ids, id)
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
func (m *SysMenuMutation) RoleIDs() (ids []int64) {
	for id := range m.role {
		ids = append(ids, id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *SysMenuMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
	m.removedrole = nil
}

// SetParentID sets the "parent" edge to the SysMenu entity by id.
func (m *SysMenuMutation) SetParentID(id int64) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the SysMenu entity.
func (m *SysMenuMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the SysMenu entity was cleared.
func (m *SysMenuMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *SysMenuMutation) ParentID() (id int64, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *SysMenuMutation) ParentIDs() (ids []int64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *SysMenuMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildeIDs adds the "childes" edge to the SysMenu entity by ids.
func (m *SysMenuMutation) AddChildeIDs(ids ...int64) {
	if m.childes == nil {
		m.childes = make(map[int64]struct{})
	}
	for i := range ids {
		m.childes[ids[i]] = struct{}{}
	}
}

// ClearChildes clears the "childes" edge to the SysMenu entity.
func (m *SysMenuMutation) ClearChildes() {
	m.clearedchildes = true
}

// ChildesCleared reports if the "childes" edge to the SysMenu entity was cleared.
func (m *SysMenuMutation) ChildesCleared() bool {
	return m.clearedchildes
}

// RemoveChildeIDs removes the "childes" edge to the SysMenu entity by IDs.
func (m *SysMenuMutation) RemoveChildeIDs(ids ...int64) {
	if m.removedchildes == nil {
		m.removedchildes = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.childes, ids[i])
		m.removedchildes[ids[i]] = struct{}{}
	}
}

// RemovedChildes returns the removed IDs of the "childes" edge to the SysMenu entity.
func (m *SysMenuMutation) RemovedChildesIDs() (ids []int64) {
	for id := range m.removedchildes {
		ids = append(ids, id)
	}
	return
}

// ChildesIDs returns the "childes" edge IDs in the mutation.
func (m *SysMenuMutation) ChildesIDs() (ids []int64) {
	for id := range m.childes {
		ids = append(ids, id)
	}
	return
}

// ResetChildes resets all changes to the "childes" edge.
func (m *SysMenuMutation) ResetChildes() {
	m.childes = nil
	m.clearedchildes = false
	m.removedchildes = nil
}

// Where appends a list predicates to the SysMenuMutation builder.
func (m *SysMenuMutation) Where(ps ...predicate.SysMenu) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysMenuMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysMenu).
func (m *SysMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysMenuMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.menuName != nil {
		fields = append(fields, sysmenu.FieldMenuName)
	}
	if m.title != nil {
		fields = append(fields, sysmenu.FieldTitle)
	}
	if m.icon != nil {
		fields = append(fields, sysmenu.FieldIcon)
	}
	if m._path != nil {
		fields = append(fields, sysmenu.FieldPath)
	}
	if m.paths != nil {
		fields = append(fields, sysmenu.FieldPaths)
	}
	if m.menuType != nil {
		fields = append(fields, sysmenu.FieldMenuType)
	}
	if m.action != nil {
		fields = append(fields, sysmenu.FieldAction)
	}
	if m.permission != nil {
		fields = append(fields, sysmenu.FieldPermission)
	}
	if m.noCache != nil {
		fields = append(fields, sysmenu.FieldNoCache)
	}
	if m.breadcrumb != nil {
		fields = append(fields, sysmenu.FieldBreadcrumb)
	}
	if m.component != nil {
		fields = append(fields, sysmenu.FieldComponent)
	}
	if m.sort != nil {
		fields = append(fields, sysmenu.FieldSort)
	}
	if m.visible != nil {
		fields = append(fields, sysmenu.FieldVisible)
	}
	if m.isFrame != nil {
		fields = append(fields, sysmenu.FieldIsFrame)
	}
	if m.sysApi != nil {
		fields = append(fields, sysmenu.FieldSysApi)
	}
	if m.createdAt != nil {
		fields = append(fields, sysmenu.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysmenu.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysmenu.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysmenu.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysmenu.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldMenuName:
		return m.MenuName()
	case sysmenu.FieldTitle:
		return m.Title()
	case sysmenu.FieldIcon:
		return m.Icon()
	case sysmenu.FieldPath:
		return m.Path()
	case sysmenu.FieldPaths:
		return m.Paths()
	case sysmenu.FieldMenuType:
		return m.MenuType()
	case sysmenu.FieldAction:
		return m.Action()
	case sysmenu.FieldPermission:
		return m.Permission()
	case sysmenu.FieldNoCache:
		return m.NoCache()
	case sysmenu.FieldBreadcrumb:
		return m.Breadcrumb()
	case sysmenu.FieldComponent:
		return m.Component()
	case sysmenu.FieldSort:
		return m.Sort()
	case sysmenu.FieldVisible:
		return m.Visible()
	case sysmenu.FieldIsFrame:
		return m.IsFrame()
	case sysmenu.FieldSysApi:
		return m.SysApi()
	case sysmenu.FieldCreatedAt:
		return m.CreatedAt()
	case sysmenu.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysmenu.FieldCreateBy:
		return m.CreateBy()
	case sysmenu.FieldUpdateBy:
		return m.UpdateBy()
	case sysmenu.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysmenu.FieldMenuName:
		return m.OldMenuName(ctx)
	case sysmenu.FieldTitle:
		return m.OldTitle(ctx)
	case sysmenu.FieldIcon:
		return m.OldIcon(ctx)
	case sysmenu.FieldPath:
		return m.OldPath(ctx)
	case sysmenu.FieldPaths:
		return m.OldPaths(ctx)
	case sysmenu.FieldMenuType:
		return m.OldMenuType(ctx)
	case sysmenu.FieldAction:
		return m.OldAction(ctx)
	case sysmenu.FieldPermission:
		return m.OldPermission(ctx)
	case sysmenu.FieldNoCache:
		return m.OldNoCache(ctx)
	case sysmenu.FieldBreadcrumb:
		return m.OldBreadcrumb(ctx)
	case sysmenu.FieldComponent:
		return m.OldComponent(ctx)
	case sysmenu.FieldSort:
		return m.OldSort(ctx)
	case sysmenu.FieldVisible:
		return m.OldVisible(ctx)
	case sysmenu.FieldIsFrame:
		return m.OldIsFrame(ctx)
	case sysmenu.FieldSysApi:
		return m.OldSysApi(ctx)
	case sysmenu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysmenu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysmenu.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysmenu.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysmenu.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldMenuName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuName(v)
		return nil
	case sysmenu.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case sysmenu.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case sysmenu.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case sysmenu.FieldPaths:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaths(v)
		return nil
	case sysmenu.FieldMenuType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuType(v)
		return nil
	case sysmenu.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case sysmenu.FieldPermission:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermission(v)
		return nil
	case sysmenu.FieldNoCache:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNoCache(v)
		return nil
	case sysmenu.FieldBreadcrumb:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBreadcrumb(v)
		return nil
	case sysmenu.FieldComponent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponent(v)
		return nil
	case sysmenu.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysmenu.FieldVisible:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisible(v)
		return nil
	case sysmenu.FieldIsFrame:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsFrame(v)
		return nil
	case sysmenu.FieldSysApi:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSysApi(v)
		return nil
	case sysmenu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysmenu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysmenu.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysmenu.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysmenu.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysMenuMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysmenu.FieldSort)
	}
	if m.addcreateBy != nil {
		fields = append(fields, sysmenu.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysmenu.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysmenu.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysMenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldSort:
		return m.AddedSort()
	case sysmenu.FieldCreateBy:
		return m.AddedCreateBy()
	case sysmenu.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysmenu.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case sysmenu.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysmenu.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysmenu.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysMenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysmenu.FieldMenuName) {
		fields = append(fields, sysmenu.FieldMenuName)
	}
	if m.FieldCleared(sysmenu.FieldTitle) {
		fields = append(fields, sysmenu.FieldTitle)
	}
	if m.FieldCleared(sysmenu.FieldIcon) {
		fields = append(fields, sysmenu.FieldIcon)
	}
	if m.FieldCleared(sysmenu.FieldPath) {
		fields = append(fields, sysmenu.FieldPath)
	}
	if m.FieldCleared(sysmenu.FieldPaths) {
		fields = append(fields, sysmenu.FieldPaths)
	}
	if m.FieldCleared(sysmenu.FieldMenuType) {
		fields = append(fields, sysmenu.FieldMenuType)
	}
	if m.FieldCleared(sysmenu.FieldAction) {
		fields = append(fields, sysmenu.FieldAction)
	}
	if m.FieldCleared(sysmenu.FieldPermission) {
		fields = append(fields, sysmenu.FieldPermission)
	}
	if m.FieldCleared(sysmenu.FieldNoCache) {
		fields = append(fields, sysmenu.FieldNoCache)
	}
	if m.FieldCleared(sysmenu.FieldBreadcrumb) {
		fields = append(fields, sysmenu.FieldBreadcrumb)
	}
	if m.FieldCleared(sysmenu.FieldComponent) {
		fields = append(fields, sysmenu.FieldComponent)
	}
	if m.FieldCleared(sysmenu.FieldSort) {
		fields = append(fields, sysmenu.FieldSort)
	}
	if m.FieldCleared(sysmenu.FieldVisible) {
		fields = append(fields, sysmenu.FieldVisible)
	}
	if m.FieldCleared(sysmenu.FieldIsFrame) {
		fields = append(fields, sysmenu.FieldIsFrame)
	}
	if m.FieldCleared(sysmenu.FieldSysApi) {
		fields = append(fields, sysmenu.FieldSysApi)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysMenuMutation) ClearField(name string) error {
	switch name {
	case sysmenu.FieldMenuName:
		m.ClearMenuName()
		return nil
	case sysmenu.FieldTitle:
		m.ClearTitle()
		return nil
	case sysmenu.FieldIcon:
		m.ClearIcon()
		return nil
	case sysmenu.FieldPath:
		m.ClearPath()
		return nil
	case sysmenu.FieldPaths:
		m.ClearPaths()
		return nil
	case sysmenu.FieldMenuType:
		m.ClearMenuType()
		return nil
	case sysmenu.FieldAction:
		m.ClearAction()
		return nil
	case sysmenu.FieldPermission:
		m.ClearPermission()
		return nil
	case sysmenu.FieldNoCache:
		m.ClearNoCache()
		return nil
	case sysmenu.FieldBreadcrumb:
		m.ClearBreadcrumb()
		return nil
	case sysmenu.FieldComponent:
		m.ClearComponent()
		return nil
	case sysmenu.FieldSort:
		m.ClearSort()
		return nil
	case sysmenu.FieldVisible:
		m.ClearVisible()
		return nil
	case sysmenu.FieldIsFrame:
		m.ClearIsFrame()
		return nil
	case sysmenu.FieldSysApi:
		m.ClearSysApi()
		return nil
	}
	return fmt.Errorf("unknown SysMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysMenuMutation) ResetField(name string) error {
	switch name {
	case sysmenu.FieldMenuName:
		m.ResetMenuName()
		return nil
	case sysmenu.FieldTitle:
		m.ResetTitle()
		return nil
	case sysmenu.FieldIcon:
		m.ResetIcon()
		return nil
	case sysmenu.FieldPath:
		m.ResetPath()
		return nil
	case sysmenu.FieldPaths:
		m.ResetPaths()
		return nil
	case sysmenu.FieldMenuType:
		m.ResetMenuType()
		return nil
	case sysmenu.FieldAction:
		m.ResetAction()
		return nil
	case sysmenu.FieldPermission:
		m.ResetPermission()
		return nil
	case sysmenu.FieldNoCache:
		m.ResetNoCache()
		return nil
	case sysmenu.FieldBreadcrumb:
		m.ResetBreadcrumb()
		return nil
	case sysmenu.FieldComponent:
		m.ResetComponent()
		return nil
	case sysmenu.FieldSort:
		m.ResetSort()
		return nil
	case sysmenu.FieldVisible:
		m.ResetVisible()
		return nil
	case sysmenu.FieldIsFrame:
		m.ResetIsFrame()
		return nil
	case sysmenu.FieldSysApi:
		m.ResetSysApi()
		return nil
	case sysmenu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysmenu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysmenu.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysmenu.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysmenu.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.role != nil {
		edges = append(edges, sysmenu.EdgeRole)
	}
	if m.parent != nil {
		edges = append(edges, sysmenu.EdgeParent)
	}
	if m.childes != nil {
		edges = append(edges, sysmenu.EdgeChildes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysMenuMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysmenu.EdgeRole:
		ids := make([]ent.Value, 0, len(m.role))
		for id := range m.role {
			ids = append(ids, id)
		}
		return ids
	case sysmenu.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case sysmenu.EdgeChildes:
		ids := make([]ent.Value, 0, len(m.childes))
		for id := range m.childes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedrole != nil {
		edges = append(edges, sysmenu.EdgeRole)
	}
	if m.removedchildes != nil {
		edges = append(edges, sysmenu.EdgeChildes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysMenuMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sysmenu.EdgeRole:
		ids := make([]ent.Value, 0, len(m.removedrole))
		for id := range m.removedrole {
			ids = append(ids, id)
		}
		return ids
	case sysmenu.EdgeChildes:
		ids := make([]ent.Value, 0, len(m.removedchildes))
		for id := range m.removedchildes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedrole {
		edges = append(edges, sysmenu.EdgeRole)
	}
	if m.clearedparent {
		edges = append(edges, sysmenu.EdgeParent)
	}
	if m.clearedchildes {
		edges = append(edges, sysmenu.EdgeChildes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysMenuMutation) EdgeCleared(name string) bool {
	switch name {
	case sysmenu.EdgeRole:
		return m.clearedrole
	case sysmenu.EdgeParent:
		return m.clearedparent
	case sysmenu.EdgeChildes:
		return m.clearedchildes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysMenuMutation) ClearEdge(name string) error {
	switch name {
	case sysmenu.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown SysMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysMenuMutation) ResetEdge(name string) error {
	switch name {
	case sysmenu.EdgeRole:
		m.ResetRole()
		return nil
	case sysmenu.EdgeParent:
		m.ResetParent()
		return nil
	case sysmenu.EdgeChildes:
		m.ResetChildes()
		return nil
	}
	return fmt.Errorf("unknown SysMenu edge %s", name)
}

// SysOperaLogMutation represents an operation that mutates the SysOperaLog nodes in the graph.
type SysOperaLogMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	title         *string
	requestId     *string
	businessType  *string
	businessTypes *string
	method        *string
	requestMethod *string
	operatorType  *string
	operName      *string
	deptName      *string
	operUrl       *string
	operIp        *string
	browser       *string
	os            *string
	platform      *string
	operLocation  *string
	operParam     *string
	status        *string
	operTime      *time.Time
	jsonResult    *string
	remark        *string
	latencyTime   *string
	userAgent     *string
	createdAt     *time.Time
	updatedAt     *time.Time
	createBy      *int64
	addcreateBy   *int64
	updateBy      *int64
	addupdateBy   *int64
	tenantId      *int64
	addtenantId   *int64
	clearedFields map[string]struct{}
	user          *int64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*SysOperaLog, error)
	predicates    []predicate.SysOperaLog
}

var _ ent.Mutation = (*SysOperaLogMutation)(nil)

// sysoperalogOption allows management of the mutation configuration using functional options.
type sysoperalogOption func(*SysOperaLogMutation)

// newSysOperaLogMutation creates new mutation for the SysOperaLog entity.
func newSysOperaLogMutation(c config, op Op, opts ...sysoperalogOption) *SysOperaLogMutation {
	m := &SysOperaLogMutation{
		config:        c,
		op:            op,
		typ:           TypeSysOperaLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysOperaLogID sets the ID field of the mutation.
func withSysOperaLogID(id int64) sysoperalogOption {
	return func(m *SysOperaLogMutation) {
		var (
			err   error
			once  sync.Once
			value *SysOperaLog
		)
		m.oldValue = func(ctx context.Context) (*SysOperaLog, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysOperaLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysOperaLog sets the old SysOperaLog of the mutation.
func withSysOperaLog(node *SysOperaLog) sysoperalogOption {
	return func(m *SysOperaLogMutation) {
		m.oldValue = func(context.Context) (*SysOperaLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysOperaLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysOperaLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysOperaLogMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserId sets the "userId" field.
func (m *SysOperaLogMutation) SetUserId(i int64) {
	m.user = &i
}

// UserId returns the value of the "userId" field in the mutation.
func (m *SysOperaLogMutation) UserId() (r int64, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old "userId" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldUserId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// ClearUserId clears the value of the "userId" field.
func (m *SysOperaLogMutation) ClearUserId() {
	m.user = nil
	m.clearedFields[sysoperalog.FieldUserId] = struct{}{}
}

// UserIdCleared returns if the "userId" field was cleared in this mutation.
func (m *SysOperaLogMutation) UserIdCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldUserId]
	return ok
}

// ResetUserId resets all changes to the "userId" field.
func (m *SysOperaLogMutation) ResetUserId() {
	m.user = nil
	delete(m.clearedFields, sysoperalog.FieldUserId)
}

// SetTitle sets the "title" field.
func (m *SysOperaLogMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SysOperaLogMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *SysOperaLogMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[sysoperalog.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *SysOperaLogMutation) TitleCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *SysOperaLogMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, sysoperalog.FieldTitle)
}

// SetRequestId sets the "requestId" field.
func (m *SysOperaLogMutation) SetRequestId(s string) {
	m.requestId = &s
}

// RequestId returns the value of the "requestId" field in the mutation.
func (m *SysOperaLogMutation) RequestId() (r string, exists bool) {
	v := m.requestId
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestId returns the old "requestId" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldRequestId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRequestId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRequestId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestId: %w", err)
	}
	return oldValue.RequestId, nil
}

// ClearRequestId clears the value of the "requestId" field.
func (m *SysOperaLogMutation) ClearRequestId() {
	m.requestId = nil
	m.clearedFields[sysoperalog.FieldRequestId] = struct{}{}
}

// RequestIdCleared returns if the "requestId" field was cleared in this mutation.
func (m *SysOperaLogMutation) RequestIdCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldRequestId]
	return ok
}

// ResetRequestId resets all changes to the "requestId" field.
func (m *SysOperaLogMutation) ResetRequestId() {
	m.requestId = nil
	delete(m.clearedFields, sysoperalog.FieldRequestId)
}

// SetBusinessType sets the "businessType" field.
func (m *SysOperaLogMutation) SetBusinessType(s string) {
	m.businessType = &s
}

// BusinessType returns the value of the "businessType" field in the mutation.
func (m *SysOperaLogMutation) BusinessType() (r string, exists bool) {
	v := m.businessType
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessType returns the old "businessType" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldBusinessType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBusinessType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBusinessType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessType: %w", err)
	}
	return oldValue.BusinessType, nil
}

// ClearBusinessType clears the value of the "businessType" field.
func (m *SysOperaLogMutation) ClearBusinessType() {
	m.businessType = nil
	m.clearedFields[sysoperalog.FieldBusinessType] = struct{}{}
}

// BusinessTypeCleared returns if the "businessType" field was cleared in this mutation.
func (m *SysOperaLogMutation) BusinessTypeCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldBusinessType]
	return ok
}

// ResetBusinessType resets all changes to the "businessType" field.
func (m *SysOperaLogMutation) ResetBusinessType() {
	m.businessType = nil
	delete(m.clearedFields, sysoperalog.FieldBusinessType)
}

// SetBusinessTypes sets the "businessTypes" field.
func (m *SysOperaLogMutation) SetBusinessTypes(s string) {
	m.businessTypes = &s
}

// BusinessTypes returns the value of the "businessTypes" field in the mutation.
func (m *SysOperaLogMutation) BusinessTypes() (r string, exists bool) {
	v := m.businessTypes
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessTypes returns the old "businessTypes" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldBusinessTypes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBusinessTypes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBusinessTypes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessTypes: %w", err)
	}
	return oldValue.BusinessTypes, nil
}

// ClearBusinessTypes clears the value of the "businessTypes" field.
func (m *SysOperaLogMutation) ClearBusinessTypes() {
	m.businessTypes = nil
	m.clearedFields[sysoperalog.FieldBusinessTypes] = struct{}{}
}

// BusinessTypesCleared returns if the "businessTypes" field was cleared in this mutation.
func (m *SysOperaLogMutation) BusinessTypesCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldBusinessTypes]
	return ok
}

// ResetBusinessTypes resets all changes to the "businessTypes" field.
func (m *SysOperaLogMutation) ResetBusinessTypes() {
	m.businessTypes = nil
	delete(m.clearedFields, sysoperalog.FieldBusinessTypes)
}

// SetMethod sets the "method" field.
func (m *SysOperaLogMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *SysOperaLogMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ClearMethod clears the value of the "method" field.
func (m *SysOperaLogMutation) ClearMethod() {
	m.method = nil
	m.clearedFields[sysoperalog.FieldMethod] = struct{}{}
}

// MethodCleared returns if the "method" field was cleared in this mutation.
func (m *SysOperaLogMutation) MethodCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldMethod]
	return ok
}

// ResetMethod resets all changes to the "method" field.
func (m *SysOperaLogMutation) ResetMethod() {
	m.method = nil
	delete(m.clearedFields, sysoperalog.FieldMethod)
}

// SetRequestMethod sets the "requestMethod" field.
func (m *SysOperaLogMutation) SetRequestMethod(s string) {
	m.requestMethod = &s
}

// RequestMethod returns the value of the "requestMethod" field in the mutation.
func (m *SysOperaLogMutation) RequestMethod() (r string, exists bool) {
	v := m.requestMethod
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestMethod returns the old "requestMethod" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldRequestMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRequestMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRequestMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestMethod: %w", err)
	}
	return oldValue.RequestMethod, nil
}

// ClearRequestMethod clears the value of the "requestMethod" field.
func (m *SysOperaLogMutation) ClearRequestMethod() {
	m.requestMethod = nil
	m.clearedFields[sysoperalog.FieldRequestMethod] = struct{}{}
}

// RequestMethodCleared returns if the "requestMethod" field was cleared in this mutation.
func (m *SysOperaLogMutation) RequestMethodCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldRequestMethod]
	return ok
}

// ResetRequestMethod resets all changes to the "requestMethod" field.
func (m *SysOperaLogMutation) ResetRequestMethod() {
	m.requestMethod = nil
	delete(m.clearedFields, sysoperalog.FieldRequestMethod)
}

// SetOperatorType sets the "operatorType" field.
func (m *SysOperaLogMutation) SetOperatorType(s string) {
	m.operatorType = &s
}

// OperatorType returns the value of the "operatorType" field in the mutation.
func (m *SysOperaLogMutation) OperatorType() (r string, exists bool) {
	v := m.operatorType
	if v == nil {
		return
	}
	return *v, true
}

// OldOperatorType returns the old "operatorType" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldOperatorType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperatorType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperatorType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperatorType: %w", err)
	}
	return oldValue.OperatorType, nil
}

// ClearOperatorType clears the value of the "operatorType" field.
func (m *SysOperaLogMutation) ClearOperatorType() {
	m.operatorType = nil
	m.clearedFields[sysoperalog.FieldOperatorType] = struct{}{}
}

// OperatorTypeCleared returns if the "operatorType" field was cleared in this mutation.
func (m *SysOperaLogMutation) OperatorTypeCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldOperatorType]
	return ok
}

// ResetOperatorType resets all changes to the "operatorType" field.
func (m *SysOperaLogMutation) ResetOperatorType() {
	m.operatorType = nil
	delete(m.clearedFields, sysoperalog.FieldOperatorType)
}

// SetOperName sets the "operName" field.
func (m *SysOperaLogMutation) SetOperName(s string) {
	m.operName = &s
}

// OperName returns the value of the "operName" field in the mutation.
func (m *SysOperaLogMutation) OperName() (r string, exists bool) {
	v := m.operName
	if v == nil {
		return
	}
	return *v, true
}

// OldOperName returns the old "operName" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldOperName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperName: %w", err)
	}
	return oldValue.OperName, nil
}

// ClearOperName clears the value of the "operName" field.
func (m *SysOperaLogMutation) ClearOperName() {
	m.operName = nil
	m.clearedFields[sysoperalog.FieldOperName] = struct{}{}
}

// OperNameCleared returns if the "operName" field was cleared in this mutation.
func (m *SysOperaLogMutation) OperNameCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldOperName]
	return ok
}

// ResetOperName resets all changes to the "operName" field.
func (m *SysOperaLogMutation) ResetOperName() {
	m.operName = nil
	delete(m.clearedFields, sysoperalog.FieldOperName)
}

// SetDeptName sets the "deptName" field.
func (m *SysOperaLogMutation) SetDeptName(s string) {
	m.deptName = &s
}

// DeptName returns the value of the "deptName" field in the mutation.
func (m *SysOperaLogMutation) DeptName() (r string, exists bool) {
	v := m.deptName
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptName returns the old "deptName" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldDeptName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeptName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeptName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptName: %w", err)
	}
	return oldValue.DeptName, nil
}

// ClearDeptName clears the value of the "deptName" field.
func (m *SysOperaLogMutation) ClearDeptName() {
	m.deptName = nil
	m.clearedFields[sysoperalog.FieldDeptName] = struct{}{}
}

// DeptNameCleared returns if the "deptName" field was cleared in this mutation.
func (m *SysOperaLogMutation) DeptNameCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldDeptName]
	return ok
}

// ResetDeptName resets all changes to the "deptName" field.
func (m *SysOperaLogMutation) ResetDeptName() {
	m.deptName = nil
	delete(m.clearedFields, sysoperalog.FieldDeptName)
}

// SetOperUrl sets the "operUrl" field.
func (m *SysOperaLogMutation) SetOperUrl(s string) {
	m.operUrl = &s
}

// OperUrl returns the value of the "operUrl" field in the mutation.
func (m *SysOperaLogMutation) OperUrl() (r string, exists bool) {
	v := m.operUrl
	if v == nil {
		return
	}
	return *v, true
}

// OldOperUrl returns the old "operUrl" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldOperUrl(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperUrl is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperUrl requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperUrl: %w", err)
	}
	return oldValue.OperUrl, nil
}

// ClearOperUrl clears the value of the "operUrl" field.
func (m *SysOperaLogMutation) ClearOperUrl() {
	m.operUrl = nil
	m.clearedFields[sysoperalog.FieldOperUrl] = struct{}{}
}

// OperUrlCleared returns if the "operUrl" field was cleared in this mutation.
func (m *SysOperaLogMutation) OperUrlCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldOperUrl]
	return ok
}

// ResetOperUrl resets all changes to the "operUrl" field.
func (m *SysOperaLogMutation) ResetOperUrl() {
	m.operUrl = nil
	delete(m.clearedFields, sysoperalog.FieldOperUrl)
}

// SetOperIp sets the "operIp" field.
func (m *SysOperaLogMutation) SetOperIp(s string) {
	m.operIp = &s
}

// OperIp returns the value of the "operIp" field in the mutation.
func (m *SysOperaLogMutation) OperIp() (r string, exists bool) {
	v := m.operIp
	if v == nil {
		return
	}
	return *v, true
}

// OldOperIp returns the old "operIp" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldOperIp(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperIp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperIp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperIp: %w", err)
	}
	return oldValue.OperIp, nil
}

// ClearOperIp clears the value of the "operIp" field.
func (m *SysOperaLogMutation) ClearOperIp() {
	m.operIp = nil
	m.clearedFields[sysoperalog.FieldOperIp] = struct{}{}
}

// OperIpCleared returns if the "operIp" field was cleared in this mutation.
func (m *SysOperaLogMutation) OperIpCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldOperIp]
	return ok
}

// ResetOperIp resets all changes to the "operIp" field.
func (m *SysOperaLogMutation) ResetOperIp() {
	m.operIp = nil
	delete(m.clearedFields, sysoperalog.FieldOperIp)
}

// SetBrowser sets the "browser" field.
func (m *SysOperaLogMutation) SetBrowser(s string) {
	m.browser = &s
}

// Browser returns the value of the "browser" field in the mutation.
func (m *SysOperaLogMutation) Browser() (r string, exists bool) {
	v := m.browser
	if v == nil {
		return
	}
	return *v, true
}

// OldBrowser returns the old "browser" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldBrowser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBrowser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBrowser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrowser: %w", err)
	}
	return oldValue.Browser, nil
}

// ClearBrowser clears the value of the "browser" field.
func (m *SysOperaLogMutation) ClearBrowser() {
	m.browser = nil
	m.clearedFields[sysoperalog.FieldBrowser] = struct{}{}
}

// BrowserCleared returns if the "browser" field was cleared in this mutation.
func (m *SysOperaLogMutation) BrowserCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldBrowser]
	return ok
}

// ResetBrowser resets all changes to the "browser" field.
func (m *SysOperaLogMutation) ResetBrowser() {
	m.browser = nil
	delete(m.clearedFields, sysoperalog.FieldBrowser)
}

// SetOs sets the "os" field.
func (m *SysOperaLogMutation) SetOs(s string) {
	m.os = &s
}

// Os returns the value of the "os" field in the mutation.
func (m *SysOperaLogMutation) Os() (r string, exists bool) {
	v := m.os
	if v == nil {
		return
	}
	return *v, true
}

// OldOs returns the old "os" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldOs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOs: %w", err)
	}
	return oldValue.Os, nil
}

// ClearOs clears the value of the "os" field.
func (m *SysOperaLogMutation) ClearOs() {
	m.os = nil
	m.clearedFields[sysoperalog.FieldOs] = struct{}{}
}

// OsCleared returns if the "os" field was cleared in this mutation.
func (m *SysOperaLogMutation) OsCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldOs]
	return ok
}

// ResetOs resets all changes to the "os" field.
func (m *SysOperaLogMutation) ResetOs() {
	m.os = nil
	delete(m.clearedFields, sysoperalog.FieldOs)
}

// SetPlatform sets the "platform" field.
func (m *SysOperaLogMutation) SetPlatform(s string) {
	m.platform = &s
}

// Platform returns the value of the "platform" field in the mutation.
func (m *SysOperaLogMutation) Platform() (r string, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldPlatform(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ClearPlatform clears the value of the "platform" field.
func (m *SysOperaLogMutation) ClearPlatform() {
	m.platform = nil
	m.clearedFields[sysoperalog.FieldPlatform] = struct{}{}
}

// PlatformCleared returns if the "platform" field was cleared in this mutation.
func (m *SysOperaLogMutation) PlatformCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldPlatform]
	return ok
}

// ResetPlatform resets all changes to the "platform" field.
func (m *SysOperaLogMutation) ResetPlatform() {
	m.platform = nil
	delete(m.clearedFields, sysoperalog.FieldPlatform)
}

// SetOperLocation sets the "operLocation" field.
func (m *SysOperaLogMutation) SetOperLocation(s string) {
	m.operLocation = &s
}

// OperLocation returns the value of the "operLocation" field in the mutation.
func (m *SysOperaLogMutation) OperLocation() (r string, exists bool) {
	v := m.operLocation
	if v == nil {
		return
	}
	return *v, true
}

// OldOperLocation returns the old "operLocation" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldOperLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperLocation: %w", err)
	}
	return oldValue.OperLocation, nil
}

// ClearOperLocation clears the value of the "operLocation" field.
func (m *SysOperaLogMutation) ClearOperLocation() {
	m.operLocation = nil
	m.clearedFields[sysoperalog.FieldOperLocation] = struct{}{}
}

// OperLocationCleared returns if the "operLocation" field was cleared in this mutation.
func (m *SysOperaLogMutation) OperLocationCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldOperLocation]
	return ok
}

// ResetOperLocation resets all changes to the "operLocation" field.
func (m *SysOperaLogMutation) ResetOperLocation() {
	m.operLocation = nil
	delete(m.clearedFields, sysoperalog.FieldOperLocation)
}

// SetOperParam sets the "operParam" field.
func (m *SysOperaLogMutation) SetOperParam(s string) {
	m.operParam = &s
}

// OperParam returns the value of the "operParam" field in the mutation.
func (m *SysOperaLogMutation) OperParam() (r string, exists bool) {
	v := m.operParam
	if v == nil {
		return
	}
	return *v, true
}

// OldOperParam returns the old "operParam" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldOperParam(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperParam is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperParam requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperParam: %w", err)
	}
	return oldValue.OperParam, nil
}

// ClearOperParam clears the value of the "operParam" field.
func (m *SysOperaLogMutation) ClearOperParam() {
	m.operParam = nil
	m.clearedFields[sysoperalog.FieldOperParam] = struct{}{}
}

// OperParamCleared returns if the "operParam" field was cleared in this mutation.
func (m *SysOperaLogMutation) OperParamCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldOperParam]
	return ok
}

// ResetOperParam resets all changes to the "operParam" field.
func (m *SysOperaLogMutation) ResetOperParam() {
	m.operParam = nil
	delete(m.clearedFields, sysoperalog.FieldOperParam)
}

// SetStatus sets the "status" field.
func (m *SysOperaLogMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SysOperaLogMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *SysOperaLogMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[sysoperalog.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysOperaLogMutation) StatusCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysOperaLogMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, sysoperalog.FieldStatus)
}

// SetOperTime sets the "operTime" field.
func (m *SysOperaLogMutation) SetOperTime(t time.Time) {
	m.operTime = &t
}

// OperTime returns the value of the "operTime" field in the mutation.
func (m *SysOperaLogMutation) OperTime() (r time.Time, exists bool) {
	v := m.operTime
	if v == nil {
		return
	}
	return *v, true
}

// OldOperTime returns the old "operTime" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldOperTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperTime: %w", err)
	}
	return oldValue.OperTime, nil
}

// ClearOperTime clears the value of the "operTime" field.
func (m *SysOperaLogMutation) ClearOperTime() {
	m.operTime = nil
	m.clearedFields[sysoperalog.FieldOperTime] = struct{}{}
}

// OperTimeCleared returns if the "operTime" field was cleared in this mutation.
func (m *SysOperaLogMutation) OperTimeCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldOperTime]
	return ok
}

// ResetOperTime resets all changes to the "operTime" field.
func (m *SysOperaLogMutation) ResetOperTime() {
	m.operTime = nil
	delete(m.clearedFields, sysoperalog.FieldOperTime)
}

// SetJsonResult sets the "jsonResult" field.
func (m *SysOperaLogMutation) SetJsonResult(s string) {
	m.jsonResult = &s
}

// JsonResult returns the value of the "jsonResult" field in the mutation.
func (m *SysOperaLogMutation) JsonResult() (r string, exists bool) {
	v := m.jsonResult
	if v == nil {
		return
	}
	return *v, true
}

// OldJsonResult returns the old "jsonResult" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldJsonResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJsonResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJsonResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJsonResult: %w", err)
	}
	return oldValue.JsonResult, nil
}

// ClearJsonResult clears the value of the "jsonResult" field.
func (m *SysOperaLogMutation) ClearJsonResult() {
	m.jsonResult = nil
	m.clearedFields[sysoperalog.FieldJsonResult] = struct{}{}
}

// JsonResultCleared returns if the "jsonResult" field was cleared in this mutation.
func (m *SysOperaLogMutation) JsonResultCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldJsonResult]
	return ok
}

// ResetJsonResult resets all changes to the "jsonResult" field.
func (m *SysOperaLogMutation) ResetJsonResult() {
	m.jsonResult = nil
	delete(m.clearedFields, sysoperalog.FieldJsonResult)
}

// SetRemark sets the "remark" field.
func (m *SysOperaLogMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysOperaLogMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysOperaLogMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysoperalog.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysOperaLogMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysOperaLogMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysoperalog.FieldRemark)
}

// SetLatencyTime sets the "latencyTime" field.
func (m *SysOperaLogMutation) SetLatencyTime(s string) {
	m.latencyTime = &s
}

// LatencyTime returns the value of the "latencyTime" field in the mutation.
func (m *SysOperaLogMutation) LatencyTime() (r string, exists bool) {
	v := m.latencyTime
	if v == nil {
		return
	}
	return *v, true
}

// OldLatencyTime returns the old "latencyTime" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldLatencyTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLatencyTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLatencyTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatencyTime: %w", err)
	}
	return oldValue.LatencyTime, nil
}

// ClearLatencyTime clears the value of the "latencyTime" field.
func (m *SysOperaLogMutation) ClearLatencyTime() {
	m.latencyTime = nil
	m.clearedFields[sysoperalog.FieldLatencyTime] = struct{}{}
}

// LatencyTimeCleared returns if the "latencyTime" field was cleared in this mutation.
func (m *SysOperaLogMutation) LatencyTimeCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldLatencyTime]
	return ok
}

// ResetLatencyTime resets all changes to the "latencyTime" field.
func (m *SysOperaLogMutation) ResetLatencyTime() {
	m.latencyTime = nil
	delete(m.clearedFields, sysoperalog.FieldLatencyTime)
}

// SetUserAgent sets the "userAgent" field.
func (m *SysOperaLogMutation) SetUserAgent(s string) {
	m.userAgent = &s
}

// UserAgent returns the value of the "userAgent" field in the mutation.
func (m *SysOperaLogMutation) UserAgent() (r string, exists bool) {
	v := m.userAgent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "userAgent" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ClearUserAgent clears the value of the "userAgent" field.
func (m *SysOperaLogMutation) ClearUserAgent() {
	m.userAgent = nil
	m.clearedFields[sysoperalog.FieldUserAgent] = struct{}{}
}

// UserAgentCleared returns if the "userAgent" field was cleared in this mutation.
func (m *SysOperaLogMutation) UserAgentCleared() bool {
	_, ok := m.clearedFields[sysoperalog.FieldUserAgent]
	return ok
}

// ResetUserAgent resets all changes to the "userAgent" field.
func (m *SysOperaLogMutation) ResetUserAgent() {
	m.userAgent = nil
	delete(m.clearedFields, sysoperalog.FieldUserAgent)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysOperaLogMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysOperaLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysOperaLogMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysOperaLogMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysOperaLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysOperaLogMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysOperaLogMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysOperaLogMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysOperaLogMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysOperaLogMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysOperaLogMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysOperaLogMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysOperaLogMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysOperaLogMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysOperaLogMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysOperaLogMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysOperaLogMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysOperaLogMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysOperaLog entity.
// If the SysOperaLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysOperaLogMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysOperaLogMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysOperaLogMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysOperaLogMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// SetUserID sets the "user" edge to the SysUser entity by id.
func (m *SysOperaLogMutation) SetUserID(id int64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the SysUser entity.
func (m *SysOperaLogMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the SysUser entity was cleared.
func (m *SysOperaLogMutation) UserCleared() bool {
	return m.UserIdCleared() || m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SysOperaLogMutation) UserID() (id int64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SysOperaLogMutation) UserIDs() (ids []int64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SysOperaLogMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SysOperaLogMutation builder.
func (m *SysOperaLogMutation) Where(ps ...predicate.SysOperaLog) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysOperaLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysOperaLog).
func (m *SysOperaLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysOperaLogMutation) Fields() []string {
	fields := make([]string, 0, 28)
	if m.user != nil {
		fields = append(fields, sysoperalog.FieldUserId)
	}
	if m.title != nil {
		fields = append(fields, sysoperalog.FieldTitle)
	}
	if m.requestId != nil {
		fields = append(fields, sysoperalog.FieldRequestId)
	}
	if m.businessType != nil {
		fields = append(fields, sysoperalog.FieldBusinessType)
	}
	if m.businessTypes != nil {
		fields = append(fields, sysoperalog.FieldBusinessTypes)
	}
	if m.method != nil {
		fields = append(fields, sysoperalog.FieldMethod)
	}
	if m.requestMethod != nil {
		fields = append(fields, sysoperalog.FieldRequestMethod)
	}
	if m.operatorType != nil {
		fields = append(fields, sysoperalog.FieldOperatorType)
	}
	if m.operName != nil {
		fields = append(fields, sysoperalog.FieldOperName)
	}
	if m.deptName != nil {
		fields = append(fields, sysoperalog.FieldDeptName)
	}
	if m.operUrl != nil {
		fields = append(fields, sysoperalog.FieldOperUrl)
	}
	if m.operIp != nil {
		fields = append(fields, sysoperalog.FieldOperIp)
	}
	if m.browser != nil {
		fields = append(fields, sysoperalog.FieldBrowser)
	}
	if m.os != nil {
		fields = append(fields, sysoperalog.FieldOs)
	}
	if m.platform != nil {
		fields = append(fields, sysoperalog.FieldPlatform)
	}
	if m.operLocation != nil {
		fields = append(fields, sysoperalog.FieldOperLocation)
	}
	if m.operParam != nil {
		fields = append(fields, sysoperalog.FieldOperParam)
	}
	if m.status != nil {
		fields = append(fields, sysoperalog.FieldStatus)
	}
	if m.operTime != nil {
		fields = append(fields, sysoperalog.FieldOperTime)
	}
	if m.jsonResult != nil {
		fields = append(fields, sysoperalog.FieldJsonResult)
	}
	if m.remark != nil {
		fields = append(fields, sysoperalog.FieldRemark)
	}
	if m.latencyTime != nil {
		fields = append(fields, sysoperalog.FieldLatencyTime)
	}
	if m.userAgent != nil {
		fields = append(fields, sysoperalog.FieldUserAgent)
	}
	if m.createdAt != nil {
		fields = append(fields, sysoperalog.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysoperalog.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysoperalog.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysoperalog.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysoperalog.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysOperaLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysoperalog.FieldUserId:
		return m.UserId()
	case sysoperalog.FieldTitle:
		return m.Title()
	case sysoperalog.FieldRequestId:
		return m.RequestId()
	case sysoperalog.FieldBusinessType:
		return m.BusinessType()
	case sysoperalog.FieldBusinessTypes:
		return m.BusinessTypes()
	case sysoperalog.FieldMethod:
		return m.Method()
	case sysoperalog.FieldRequestMethod:
		return m.RequestMethod()
	case sysoperalog.FieldOperatorType:
		return m.OperatorType()
	case sysoperalog.FieldOperName:
		return m.OperName()
	case sysoperalog.FieldDeptName:
		return m.DeptName()
	case sysoperalog.FieldOperUrl:
		return m.OperUrl()
	case sysoperalog.FieldOperIp:
		return m.OperIp()
	case sysoperalog.FieldBrowser:
		return m.Browser()
	case sysoperalog.FieldOs:
		return m.Os()
	case sysoperalog.FieldPlatform:
		return m.Platform()
	case sysoperalog.FieldOperLocation:
		return m.OperLocation()
	case sysoperalog.FieldOperParam:
		return m.OperParam()
	case sysoperalog.FieldStatus:
		return m.Status()
	case sysoperalog.FieldOperTime:
		return m.OperTime()
	case sysoperalog.FieldJsonResult:
		return m.JsonResult()
	case sysoperalog.FieldRemark:
		return m.Remark()
	case sysoperalog.FieldLatencyTime:
		return m.LatencyTime()
	case sysoperalog.FieldUserAgent:
		return m.UserAgent()
	case sysoperalog.FieldCreatedAt:
		return m.CreatedAt()
	case sysoperalog.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysoperalog.FieldCreateBy:
		return m.CreateBy()
	case sysoperalog.FieldUpdateBy:
		return m.UpdateBy()
	case sysoperalog.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysOperaLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysoperalog.FieldUserId:
		return m.OldUserId(ctx)
	case sysoperalog.FieldTitle:
		return m.OldTitle(ctx)
	case sysoperalog.FieldRequestId:
		return m.OldRequestId(ctx)
	case sysoperalog.FieldBusinessType:
		return m.OldBusinessType(ctx)
	case sysoperalog.FieldBusinessTypes:
		return m.OldBusinessTypes(ctx)
	case sysoperalog.FieldMethod:
		return m.OldMethod(ctx)
	case sysoperalog.FieldRequestMethod:
		return m.OldRequestMethod(ctx)
	case sysoperalog.FieldOperatorType:
		return m.OldOperatorType(ctx)
	case sysoperalog.FieldOperName:
		return m.OldOperName(ctx)
	case sysoperalog.FieldDeptName:
		return m.OldDeptName(ctx)
	case sysoperalog.FieldOperUrl:
		return m.OldOperUrl(ctx)
	case sysoperalog.FieldOperIp:
		return m.OldOperIp(ctx)
	case sysoperalog.FieldBrowser:
		return m.OldBrowser(ctx)
	case sysoperalog.FieldOs:
		return m.OldOs(ctx)
	case sysoperalog.FieldPlatform:
		return m.OldPlatform(ctx)
	case sysoperalog.FieldOperLocation:
		return m.OldOperLocation(ctx)
	case sysoperalog.FieldOperParam:
		return m.OldOperParam(ctx)
	case sysoperalog.FieldStatus:
		return m.OldStatus(ctx)
	case sysoperalog.FieldOperTime:
		return m.OldOperTime(ctx)
	case sysoperalog.FieldJsonResult:
		return m.OldJsonResult(ctx)
	case sysoperalog.FieldRemark:
		return m.OldRemark(ctx)
	case sysoperalog.FieldLatencyTime:
		return m.OldLatencyTime(ctx)
	case sysoperalog.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case sysoperalog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysoperalog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysoperalog.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysoperalog.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysoperalog.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysOperaLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysOperaLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysoperalog.FieldUserId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case sysoperalog.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case sysoperalog.FieldRequestId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestId(v)
		return nil
	case sysoperalog.FieldBusinessType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessType(v)
		return nil
	case sysoperalog.FieldBusinessTypes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessTypes(v)
		return nil
	case sysoperalog.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case sysoperalog.FieldRequestMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestMethod(v)
		return nil
	case sysoperalog.FieldOperatorType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperatorType(v)
		return nil
	case sysoperalog.FieldOperName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperName(v)
		return nil
	case sysoperalog.FieldDeptName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptName(v)
		return nil
	case sysoperalog.FieldOperUrl:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperUrl(v)
		return nil
	case sysoperalog.FieldOperIp:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperIp(v)
		return nil
	case sysoperalog.FieldBrowser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrowser(v)
		return nil
	case sysoperalog.FieldOs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOs(v)
		return nil
	case sysoperalog.FieldPlatform:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case sysoperalog.FieldOperLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperLocation(v)
		return nil
	case sysoperalog.FieldOperParam:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperParam(v)
		return nil
	case sysoperalog.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysoperalog.FieldOperTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperTime(v)
		return nil
	case sysoperalog.FieldJsonResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJsonResult(v)
		return nil
	case sysoperalog.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysoperalog.FieldLatencyTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatencyTime(v)
		return nil
	case sysoperalog.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case sysoperalog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysoperalog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysoperalog.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysoperalog.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysoperalog.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysOperaLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysOperaLogMutation) AddedFields() []string {
	var fields []string
	if m.addcreateBy != nil {
		fields = append(fields, sysoperalog.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysoperalog.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysoperalog.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysOperaLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysoperalog.FieldCreateBy:
		return m.AddedCreateBy()
	case sysoperalog.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysoperalog.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysOperaLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysoperalog.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysoperalog.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysoperalog.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysOperaLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysOperaLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysoperalog.FieldUserId) {
		fields = append(fields, sysoperalog.FieldUserId)
	}
	if m.FieldCleared(sysoperalog.FieldTitle) {
		fields = append(fields, sysoperalog.FieldTitle)
	}
	if m.FieldCleared(sysoperalog.FieldRequestId) {
		fields = append(fields, sysoperalog.FieldRequestId)
	}
	if m.FieldCleared(sysoperalog.FieldBusinessType) {
		fields = append(fields, sysoperalog.FieldBusinessType)
	}
	if m.FieldCleared(sysoperalog.FieldBusinessTypes) {
		fields = append(fields, sysoperalog.FieldBusinessTypes)
	}
	if m.FieldCleared(sysoperalog.FieldMethod) {
		fields = append(fields, sysoperalog.FieldMethod)
	}
	if m.FieldCleared(sysoperalog.FieldRequestMethod) {
		fields = append(fields, sysoperalog.FieldRequestMethod)
	}
	if m.FieldCleared(sysoperalog.FieldOperatorType) {
		fields = append(fields, sysoperalog.FieldOperatorType)
	}
	if m.FieldCleared(sysoperalog.FieldOperName) {
		fields = append(fields, sysoperalog.FieldOperName)
	}
	if m.FieldCleared(sysoperalog.FieldDeptName) {
		fields = append(fields, sysoperalog.FieldDeptName)
	}
	if m.FieldCleared(sysoperalog.FieldOperUrl) {
		fields = append(fields, sysoperalog.FieldOperUrl)
	}
	if m.FieldCleared(sysoperalog.FieldOperIp) {
		fields = append(fields, sysoperalog.FieldOperIp)
	}
	if m.FieldCleared(sysoperalog.FieldBrowser) {
		fields = append(fields, sysoperalog.FieldBrowser)
	}
	if m.FieldCleared(sysoperalog.FieldOs) {
		fields = append(fields, sysoperalog.FieldOs)
	}
	if m.FieldCleared(sysoperalog.FieldPlatform) {
		fields = append(fields, sysoperalog.FieldPlatform)
	}
	if m.FieldCleared(sysoperalog.FieldOperLocation) {
		fields = append(fields, sysoperalog.FieldOperLocation)
	}
	if m.FieldCleared(sysoperalog.FieldOperParam) {
		fields = append(fields, sysoperalog.FieldOperParam)
	}
	if m.FieldCleared(sysoperalog.FieldStatus) {
		fields = append(fields, sysoperalog.FieldStatus)
	}
	if m.FieldCleared(sysoperalog.FieldOperTime) {
		fields = append(fields, sysoperalog.FieldOperTime)
	}
	if m.FieldCleared(sysoperalog.FieldJsonResult) {
		fields = append(fields, sysoperalog.FieldJsonResult)
	}
	if m.FieldCleared(sysoperalog.FieldRemark) {
		fields = append(fields, sysoperalog.FieldRemark)
	}
	if m.FieldCleared(sysoperalog.FieldLatencyTime) {
		fields = append(fields, sysoperalog.FieldLatencyTime)
	}
	if m.FieldCleared(sysoperalog.FieldUserAgent) {
		fields = append(fields, sysoperalog.FieldUserAgent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysOperaLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysOperaLogMutation) ClearField(name string) error {
	switch name {
	case sysoperalog.FieldUserId:
		m.ClearUserId()
		return nil
	case sysoperalog.FieldTitle:
		m.ClearTitle()
		return nil
	case sysoperalog.FieldRequestId:
		m.ClearRequestId()
		return nil
	case sysoperalog.FieldBusinessType:
		m.ClearBusinessType()
		return nil
	case sysoperalog.FieldBusinessTypes:
		m.ClearBusinessTypes()
		return nil
	case sysoperalog.FieldMethod:
		m.ClearMethod()
		return nil
	case sysoperalog.FieldRequestMethod:
		m.ClearRequestMethod()
		return nil
	case sysoperalog.FieldOperatorType:
		m.ClearOperatorType()
		return nil
	case sysoperalog.FieldOperName:
		m.ClearOperName()
		return nil
	case sysoperalog.FieldDeptName:
		m.ClearDeptName()
		return nil
	case sysoperalog.FieldOperUrl:
		m.ClearOperUrl()
		return nil
	case sysoperalog.FieldOperIp:
		m.ClearOperIp()
		return nil
	case sysoperalog.FieldBrowser:
		m.ClearBrowser()
		return nil
	case sysoperalog.FieldOs:
		m.ClearOs()
		return nil
	case sysoperalog.FieldPlatform:
		m.ClearPlatform()
		return nil
	case sysoperalog.FieldOperLocation:
		m.ClearOperLocation()
		return nil
	case sysoperalog.FieldOperParam:
		m.ClearOperParam()
		return nil
	case sysoperalog.FieldStatus:
		m.ClearStatus()
		return nil
	case sysoperalog.FieldOperTime:
		m.ClearOperTime()
		return nil
	case sysoperalog.FieldJsonResult:
		m.ClearJsonResult()
		return nil
	case sysoperalog.FieldRemark:
		m.ClearRemark()
		return nil
	case sysoperalog.FieldLatencyTime:
		m.ClearLatencyTime()
		return nil
	case sysoperalog.FieldUserAgent:
		m.ClearUserAgent()
		return nil
	}
	return fmt.Errorf("unknown SysOperaLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysOperaLogMutation) ResetField(name string) error {
	switch name {
	case sysoperalog.FieldUserId:
		m.ResetUserId()
		return nil
	case sysoperalog.FieldTitle:
		m.ResetTitle()
		return nil
	case sysoperalog.FieldRequestId:
		m.ResetRequestId()
		return nil
	case sysoperalog.FieldBusinessType:
		m.ResetBusinessType()
		return nil
	case sysoperalog.FieldBusinessTypes:
		m.ResetBusinessTypes()
		return nil
	case sysoperalog.FieldMethod:
		m.ResetMethod()
		return nil
	case sysoperalog.FieldRequestMethod:
		m.ResetRequestMethod()
		return nil
	case sysoperalog.FieldOperatorType:
		m.ResetOperatorType()
		return nil
	case sysoperalog.FieldOperName:
		m.ResetOperName()
		return nil
	case sysoperalog.FieldDeptName:
		m.ResetDeptName()
		return nil
	case sysoperalog.FieldOperUrl:
		m.ResetOperUrl()
		return nil
	case sysoperalog.FieldOperIp:
		m.ResetOperIp()
		return nil
	case sysoperalog.FieldBrowser:
		m.ResetBrowser()
		return nil
	case sysoperalog.FieldOs:
		m.ResetOs()
		return nil
	case sysoperalog.FieldPlatform:
		m.ResetPlatform()
		return nil
	case sysoperalog.FieldOperLocation:
		m.ResetOperLocation()
		return nil
	case sysoperalog.FieldOperParam:
		m.ResetOperParam()
		return nil
	case sysoperalog.FieldStatus:
		m.ResetStatus()
		return nil
	case sysoperalog.FieldOperTime:
		m.ResetOperTime()
		return nil
	case sysoperalog.FieldJsonResult:
		m.ResetJsonResult()
		return nil
	case sysoperalog.FieldRemark:
		m.ResetRemark()
		return nil
	case sysoperalog.FieldLatencyTime:
		m.ResetLatencyTime()
		return nil
	case sysoperalog.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case sysoperalog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysoperalog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysoperalog.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysoperalog.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysoperalog.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysOperaLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysOperaLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, sysoperalog.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysOperaLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysoperalog.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysOperaLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysOperaLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysOperaLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, sysoperalog.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysOperaLogMutation) EdgeCleared(name string) bool {
	switch name {
	case sysoperalog.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysOperaLogMutation) ClearEdge(name string) error {
	switch name {
	case sysoperalog.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown SysOperaLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysOperaLogMutation) ResetEdge(name string) error {
	switch name {
	case sysoperalog.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown SysOperaLog edge %s", name)
}

// SysPostMutation represents an operation that mutates the SysPost nodes in the graph.
type SysPostMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	postName      *string
	postCode      *string
	sort          *int32
	addsort       *int32
	status        *int32
	addstatus     *int32
	remark        *string
	createdAt     *time.Time
	updatedAt     *time.Time
	createBy      *int64
	addcreateBy   *int64
	updateBy      *int64
	addupdateBy   *int64
	tenantId      *int64
	addtenantId   *int64
	clearedFields map[string]struct{}
	users         map[int64]struct{}
	removedusers  map[int64]struct{}
	clearedusers  bool
	done          bool
	oldValue      func(context.Context) (*SysPost, error)
	predicates    []predicate.SysPost
}

var _ ent.Mutation = (*SysPostMutation)(nil)

// syspostOption allows management of the mutation configuration using functional options.
type syspostOption func(*SysPostMutation)

// newSysPostMutation creates new mutation for the SysPost entity.
func newSysPostMutation(c config, op Op, opts ...syspostOption) *SysPostMutation {
	m := &SysPostMutation{
		config:        c,
		op:            op,
		typ:           TypeSysPost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysPostID sets the ID field of the mutation.
func withSysPostID(id int64) syspostOption {
	return func(m *SysPostMutation) {
		var (
			err   error
			once  sync.Once
			value *SysPost
		)
		m.oldValue = func(ctx context.Context) (*SysPost, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysPost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysPost sets the old SysPost of the mutation.
func withSysPost(node *SysPost) syspostOption {
	return func(m *SysPostMutation) {
		m.oldValue = func(context.Context) (*SysPost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysPostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysPostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysPostMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPostName sets the "postName" field.
func (m *SysPostMutation) SetPostName(s string) {
	m.postName = &s
}

// PostName returns the value of the "postName" field in the mutation.
func (m *SysPostMutation) PostName() (r string, exists bool) {
	v := m.postName
	if v == nil {
		return
	}
	return *v, true
}

// OldPostName returns the old "postName" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldPostName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPostName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPostName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostName: %w", err)
	}
	return oldValue.PostName, nil
}

// ClearPostName clears the value of the "postName" field.
func (m *SysPostMutation) ClearPostName() {
	m.postName = nil
	m.clearedFields[syspost.FieldPostName] = struct{}{}
}

// PostNameCleared returns if the "postName" field was cleared in this mutation.
func (m *SysPostMutation) PostNameCleared() bool {
	_, ok := m.clearedFields[syspost.FieldPostName]
	return ok
}

// ResetPostName resets all changes to the "postName" field.
func (m *SysPostMutation) ResetPostName() {
	m.postName = nil
	delete(m.clearedFields, syspost.FieldPostName)
}

// SetPostCode sets the "postCode" field.
func (m *SysPostMutation) SetPostCode(s string) {
	m.postCode = &s
}

// PostCode returns the value of the "postCode" field in the mutation.
func (m *SysPostMutation) PostCode() (r string, exists bool) {
	v := m.postCode
	if v == nil {
		return
	}
	return *v, true
}

// OldPostCode returns the old "postCode" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldPostCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPostCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPostCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostCode: %w", err)
	}
	return oldValue.PostCode, nil
}

// ClearPostCode clears the value of the "postCode" field.
func (m *SysPostMutation) ClearPostCode() {
	m.postCode = nil
	m.clearedFields[syspost.FieldPostCode] = struct{}{}
}

// PostCodeCleared returns if the "postCode" field was cleared in this mutation.
func (m *SysPostMutation) PostCodeCleared() bool {
	_, ok := m.clearedFields[syspost.FieldPostCode]
	return ok
}

// ResetPostCode resets all changes to the "postCode" field.
func (m *SysPostMutation) ResetPostCode() {
	m.postCode = nil
	delete(m.clearedFields, syspost.FieldPostCode)
}

// SetSort sets the "sort" field.
func (m *SysPostMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysPostMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysPostMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysPostMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ClearSort clears the value of the "sort" field.
func (m *SysPostMutation) ClearSort() {
	m.sort = nil
	m.addsort = nil
	m.clearedFields[syspost.FieldSort] = struct{}{}
}

// SortCleared returns if the "sort" field was cleared in this mutation.
func (m *SysPostMutation) SortCleared() bool {
	_, ok := m.clearedFields[syspost.FieldSort]
	return ok
}

// ResetSort resets all changes to the "sort" field.
func (m *SysPostMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
	delete(m.clearedFields, syspost.FieldSort)
}

// SetStatus sets the "status" field.
func (m *SysPostMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *SysPostMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *SysPostMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *SysPostMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *SysPostMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[syspost.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysPostMutation) StatusCleared() bool {
	_, ok := m.clearedFields[syspost.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysPostMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, syspost.FieldStatus)
}

// SetRemark sets the "remark" field.
func (m *SysPostMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysPostMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysPostMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[syspost.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysPostMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[syspost.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysPostMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, syspost.FieldRemark)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysPostMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysPostMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysPostMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysPostMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysPostMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysPostMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysPostMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysPostMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysPostMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysPostMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysPostMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysPostMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysPostMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysPostMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysPostMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysPostMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysPostMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysPostMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysPost entity.
// If the SysPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPostMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysPostMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysPostMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysPostMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// AddUserIDs adds the "users" edge to the SysUser entity by ids.
func (m *SysPostMutation) AddUserIDs(ids ...int64) {
	if m.users == nil {
		m.users = make(map[int64]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the SysUser entity.
func (m *SysPostMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the SysUser entity was cleared.
func (m *SysPostMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the SysUser entity by IDs.
func (m *SysPostMutation) RemoveUserIDs(ids ...int64) {
	if m.removedusers == nil {
		m.removedusers = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the SysUser entity.
func (m *SysPostMutation) RemovedUsersIDs() (ids []int64) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *SysPostMutation) UsersIDs() (ids []int64) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *SysPostMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the SysPostMutation builder.
func (m *SysPostMutation) Where(ps ...predicate.SysPost) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysPostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysPost).
func (m *SysPostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysPostMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.postName != nil {
		fields = append(fields, syspost.FieldPostName)
	}
	if m.postCode != nil {
		fields = append(fields, syspost.FieldPostCode)
	}
	if m.sort != nil {
		fields = append(fields, syspost.FieldSort)
	}
	if m.status != nil {
		fields = append(fields, syspost.FieldStatus)
	}
	if m.remark != nil {
		fields = append(fields, syspost.FieldRemark)
	}
	if m.createdAt != nil {
		fields = append(fields, syspost.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, syspost.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, syspost.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, syspost.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, syspost.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysPostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case syspost.FieldPostName:
		return m.PostName()
	case syspost.FieldPostCode:
		return m.PostCode()
	case syspost.FieldSort:
		return m.Sort()
	case syspost.FieldStatus:
		return m.Status()
	case syspost.FieldRemark:
		return m.Remark()
	case syspost.FieldCreatedAt:
		return m.CreatedAt()
	case syspost.FieldUpdatedAt:
		return m.UpdatedAt()
	case syspost.FieldCreateBy:
		return m.CreateBy()
	case syspost.FieldUpdateBy:
		return m.UpdateBy()
	case syspost.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysPostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case syspost.FieldPostName:
		return m.OldPostName(ctx)
	case syspost.FieldPostCode:
		return m.OldPostCode(ctx)
	case syspost.FieldSort:
		return m.OldSort(ctx)
	case syspost.FieldStatus:
		return m.OldStatus(ctx)
	case syspost.FieldRemark:
		return m.OldRemark(ctx)
	case syspost.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case syspost.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case syspost.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case syspost.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case syspost.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysPost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysPostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case syspost.FieldPostName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostName(v)
		return nil
	case syspost.FieldPostCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostCode(v)
		return nil
	case syspost.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case syspost.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case syspost.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case syspost.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case syspost.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case syspost.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case syspost.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case syspost.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysPost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysPostMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, syspost.FieldSort)
	}
	if m.addstatus != nil {
		fields = append(fields, syspost.FieldStatus)
	}
	if m.addcreateBy != nil {
		fields = append(fields, syspost.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, syspost.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, syspost.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysPostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case syspost.FieldSort:
		return m.AddedSort()
	case syspost.FieldStatus:
		return m.AddedStatus()
	case syspost.FieldCreateBy:
		return m.AddedCreateBy()
	case syspost.FieldUpdateBy:
		return m.AddedUpdateBy()
	case syspost.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysPostMutation) AddField(name string, value ent.Value) error {
	switch name {
	case syspost.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case syspost.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case syspost.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case syspost.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case syspost.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysPost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysPostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(syspost.FieldPostName) {
		fields = append(fields, syspost.FieldPostName)
	}
	if m.FieldCleared(syspost.FieldPostCode) {
		fields = append(fields, syspost.FieldPostCode)
	}
	if m.FieldCleared(syspost.FieldSort) {
		fields = append(fields, syspost.FieldSort)
	}
	if m.FieldCleared(syspost.FieldStatus) {
		fields = append(fields, syspost.FieldStatus)
	}
	if m.FieldCleared(syspost.FieldRemark) {
		fields = append(fields, syspost.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysPostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysPostMutation) ClearField(name string) error {
	switch name {
	case syspost.FieldPostName:
		m.ClearPostName()
		return nil
	case syspost.FieldPostCode:
		m.ClearPostCode()
		return nil
	case syspost.FieldSort:
		m.ClearSort()
		return nil
	case syspost.FieldStatus:
		m.ClearStatus()
		return nil
	case syspost.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown SysPost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysPostMutation) ResetField(name string) error {
	switch name {
	case syspost.FieldPostName:
		m.ResetPostName()
		return nil
	case syspost.FieldPostCode:
		m.ResetPostCode()
		return nil
	case syspost.FieldSort:
		m.ResetSort()
		return nil
	case syspost.FieldStatus:
		m.ResetStatus()
		return nil
	case syspost.FieldRemark:
		m.ResetRemark()
		return nil
	case syspost.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case syspost.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case syspost.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case syspost.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case syspost.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysPost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysPostMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, syspost.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysPostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case syspost.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysPostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusers != nil {
		edges = append(edges, syspost.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysPostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case syspost.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysPostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedusers {
		edges = append(edges, syspost.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysPostMutation) EdgeCleared(name string) bool {
	switch name {
	case syspost.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysPostMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SysPost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysPostMutation) ResetEdge(name string) error {
	switch name {
	case syspost.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown SysPost edge %s", name)
}

// SysRoleMutation represents an operation that mutates the SysRole nodes in the graph.
type SysRoleMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	roleName      *string
	status        *string
	roleKey       *string
	roleSort      *int32
	addroleSort   *int32
	flag          *string
	remark        *string
	admin         *bool
	dataScope     *string
	sysDept       *string
	sysMenu       *string
	createdAt     *time.Time
	updatedAt     *time.Time
	createBy      *int64
	addcreateBy   *int64
	updateBy      *int64
	addupdateBy   *int64
	tenantId      *int64
	addtenantId   *int64
	clearedFields map[string]struct{}
	menus         map[int64]struct{}
	removedmenus  map[int64]struct{}
	clearedmenus  bool
	users         map[int64]struct{}
	removedusers  map[int64]struct{}
	clearedusers  bool
	done          bool
	oldValue      func(context.Context) (*SysRole, error)
	predicates    []predicate.SysRole
}

var _ ent.Mutation = (*SysRoleMutation)(nil)

// sysroleOption allows management of the mutation configuration using functional options.
type sysroleOption func(*SysRoleMutation)

// newSysRoleMutation creates new mutation for the SysRole entity.
func newSysRoleMutation(c config, op Op, opts ...sysroleOption) *SysRoleMutation {
	m := &SysRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRoleID sets the ID field of the mutation.
func withSysRoleID(id int64) sysroleOption {
	return func(m *SysRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRole
		)
		m.oldValue = func(ctx context.Context) (*SysRole, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRole sets the old SysRole of the mutation.
func withSysRole(node *SysRole) sysroleOption {
	return func(m *SysRoleMutation) {
		m.oldValue = func(context.Context) (*SysRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRoleMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoleName sets the "roleName" field.
func (m *SysRoleMutation) SetRoleName(s string) {
	m.roleName = &s
}

// RoleName returns the value of the "roleName" field in the mutation.
func (m *SysRoleMutation) RoleName() (r string, exists bool) {
	v := m.roleName
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleName returns the old "roleName" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldRoleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleName: %w", err)
	}
	return oldValue.RoleName, nil
}

// ClearRoleName clears the value of the "roleName" field.
func (m *SysRoleMutation) ClearRoleName() {
	m.roleName = nil
	m.clearedFields[sysrole.FieldRoleName] = struct{}{}
}

// RoleNameCleared returns if the "roleName" field was cleared in this mutation.
func (m *SysRoleMutation) RoleNameCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldRoleName]
	return ok
}

// ResetRoleName resets all changes to the "roleName" field.
func (m *SysRoleMutation) ResetRoleName() {
	m.roleName = nil
	delete(m.clearedFields, sysrole.FieldRoleName)
}

// SetStatus sets the "status" field.
func (m *SysRoleMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SysRoleMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *SysRoleMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[sysrole.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysRoleMutation) StatusCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysRoleMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, sysrole.FieldStatus)
}

// SetRoleKey sets the "roleKey" field.
func (m *SysRoleMutation) SetRoleKey(s string) {
	m.roleKey = &s
}

// RoleKey returns the value of the "roleKey" field in the mutation.
func (m *SysRoleMutation) RoleKey() (r string, exists bool) {
	v := m.roleKey
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleKey returns the old "roleKey" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldRoleKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoleKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoleKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleKey: %w", err)
	}
	return oldValue.RoleKey, nil
}

// ClearRoleKey clears the value of the "roleKey" field.
func (m *SysRoleMutation) ClearRoleKey() {
	m.roleKey = nil
	m.clearedFields[sysrole.FieldRoleKey] = struct{}{}
}

// RoleKeyCleared returns if the "roleKey" field was cleared in this mutation.
func (m *SysRoleMutation) RoleKeyCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldRoleKey]
	return ok
}

// ResetRoleKey resets all changes to the "roleKey" field.
func (m *SysRoleMutation) ResetRoleKey() {
	m.roleKey = nil
	delete(m.clearedFields, sysrole.FieldRoleKey)
}

// SetRoleSort sets the "roleSort" field.
func (m *SysRoleMutation) SetRoleSort(i int32) {
	m.roleSort = &i
	m.addroleSort = nil
}

// RoleSort returns the value of the "roleSort" field in the mutation.
func (m *SysRoleMutation) RoleSort() (r int32, exists bool) {
	v := m.roleSort
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleSort returns the old "roleSort" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldRoleSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoleSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoleSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleSort: %w", err)
	}
	return oldValue.RoleSort, nil
}

// AddRoleSort adds i to the "roleSort" field.
func (m *SysRoleMutation) AddRoleSort(i int32) {
	if m.addroleSort != nil {
		*m.addroleSort += i
	} else {
		m.addroleSort = &i
	}
}

// AddedRoleSort returns the value that was added to the "roleSort" field in this mutation.
func (m *SysRoleMutation) AddedRoleSort() (r int32, exists bool) {
	v := m.addroleSort
	if v == nil {
		return
	}
	return *v, true
}

// ClearRoleSort clears the value of the "roleSort" field.
func (m *SysRoleMutation) ClearRoleSort() {
	m.roleSort = nil
	m.addroleSort = nil
	m.clearedFields[sysrole.FieldRoleSort] = struct{}{}
}

// RoleSortCleared returns if the "roleSort" field was cleared in this mutation.
func (m *SysRoleMutation) RoleSortCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldRoleSort]
	return ok
}

// ResetRoleSort resets all changes to the "roleSort" field.
func (m *SysRoleMutation) ResetRoleSort() {
	m.roleSort = nil
	m.addroleSort = nil
	delete(m.clearedFields, sysrole.FieldRoleSort)
}

// SetFlag sets the "flag" field.
func (m *SysRoleMutation) SetFlag(s string) {
	m.flag = &s
}

// Flag returns the value of the "flag" field in the mutation.
func (m *SysRoleMutation) Flag() (r string, exists bool) {
	v := m.flag
	if v == nil {
		return
	}
	return *v, true
}

// OldFlag returns the old "flag" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldFlag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFlag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFlag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlag: %w", err)
	}
	return oldValue.Flag, nil
}

// ClearFlag clears the value of the "flag" field.
func (m *SysRoleMutation) ClearFlag() {
	m.flag = nil
	m.clearedFields[sysrole.FieldFlag] = struct{}{}
}

// FlagCleared returns if the "flag" field was cleared in this mutation.
func (m *SysRoleMutation) FlagCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldFlag]
	return ok
}

// ResetFlag resets all changes to the "flag" field.
func (m *SysRoleMutation) ResetFlag() {
	m.flag = nil
	delete(m.clearedFields, sysrole.FieldFlag)
}

// SetRemark sets the "remark" field.
func (m *SysRoleMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysRoleMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysRoleMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysrole.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysRoleMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysRoleMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysrole.FieldRemark)
}

// SetAdmin sets the "admin" field.
func (m *SysRoleMutation) SetAdmin(b bool) {
	m.admin = &b
}

// Admin returns the value of the "admin" field in the mutation.
func (m *SysRoleMutation) Admin() (r bool, exists bool) {
	v := m.admin
	if v == nil {
		return
	}
	return *v, true
}

// OldAdmin returns the old "admin" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdmin: %w", err)
	}
	return oldValue.Admin, nil
}

// ClearAdmin clears the value of the "admin" field.
func (m *SysRoleMutation) ClearAdmin() {
	m.admin = nil
	m.clearedFields[sysrole.FieldAdmin] = struct{}{}
}

// AdminCleared returns if the "admin" field was cleared in this mutation.
func (m *SysRoleMutation) AdminCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldAdmin]
	return ok
}

// ResetAdmin resets all changes to the "admin" field.
func (m *SysRoleMutation) ResetAdmin() {
	m.admin = nil
	delete(m.clearedFields, sysrole.FieldAdmin)
}

// SetDataScope sets the "dataScope" field.
func (m *SysRoleMutation) SetDataScope(s string) {
	m.dataScope = &s
}

// DataScope returns the value of the "dataScope" field in the mutation.
func (m *SysRoleMutation) DataScope() (r string, exists bool) {
	v := m.dataScope
	if v == nil {
		return
	}
	return *v, true
}

// OldDataScope returns the old "dataScope" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldDataScope(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDataScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDataScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataScope: %w", err)
	}
	return oldValue.DataScope, nil
}

// ClearDataScope clears the value of the "dataScope" field.
func (m *SysRoleMutation) ClearDataScope() {
	m.dataScope = nil
	m.clearedFields[sysrole.FieldDataScope] = struct{}{}
}

// DataScopeCleared returns if the "dataScope" field was cleared in this mutation.
func (m *SysRoleMutation) DataScopeCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldDataScope]
	return ok
}

// ResetDataScope resets all changes to the "dataScope" field.
func (m *SysRoleMutation) ResetDataScope() {
	m.dataScope = nil
	delete(m.clearedFields, sysrole.FieldDataScope)
}

// SetSysDept sets the "sysDept" field.
func (m *SysRoleMutation) SetSysDept(s string) {
	m.sysDept = &s
}

// SysDept returns the value of the "sysDept" field in the mutation.
func (m *SysRoleMutation) SysDept() (r string, exists bool) {
	v := m.sysDept
	if v == nil {
		return
	}
	return *v, true
}

// OldSysDept returns the old "sysDept" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldSysDept(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSysDept is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSysDept requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSysDept: %w", err)
	}
	return oldValue.SysDept, nil
}

// ClearSysDept clears the value of the "sysDept" field.
func (m *SysRoleMutation) ClearSysDept() {
	m.sysDept = nil
	m.clearedFields[sysrole.FieldSysDept] = struct{}{}
}

// SysDeptCleared returns if the "sysDept" field was cleared in this mutation.
func (m *SysRoleMutation) SysDeptCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldSysDept]
	return ok
}

// ResetSysDept resets all changes to the "sysDept" field.
func (m *SysRoleMutation) ResetSysDept() {
	m.sysDept = nil
	delete(m.clearedFields, sysrole.FieldSysDept)
}

// SetSysMenu sets the "sysMenu" field.
func (m *SysRoleMutation) SetSysMenu(s string) {
	m.sysMenu = &s
}

// SysMenu returns the value of the "sysMenu" field in the mutation.
func (m *SysRoleMutation) SysMenu() (r string, exists bool) {
	v := m.sysMenu
	if v == nil {
		return
	}
	return *v, true
}

// OldSysMenu returns the old "sysMenu" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldSysMenu(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSysMenu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSysMenu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSysMenu: %w", err)
	}
	return oldValue.SysMenu, nil
}

// ClearSysMenu clears the value of the "sysMenu" field.
func (m *SysRoleMutation) ClearSysMenu() {
	m.sysMenu = nil
	m.clearedFields[sysrole.FieldSysMenu] = struct{}{}
}

// SysMenuCleared returns if the "sysMenu" field was cleared in this mutation.
func (m *SysRoleMutation) SysMenuCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldSysMenu]
	return ok
}

// ResetSysMenu resets all changes to the "sysMenu" field.
func (m *SysRoleMutation) ResetSysMenu() {
	m.sysMenu = nil
	delete(m.clearedFields, sysrole.FieldSysMenu)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysRoleMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysRoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysRoleMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysRoleMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysRoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysRoleMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysRoleMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysRoleMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysRoleMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysRoleMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysRoleMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysRoleMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysRoleMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysRoleMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysRoleMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysRoleMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysRoleMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysRoleMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysRoleMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysRoleMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysRoleMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// AddMenuIDs adds the "menus" edge to the SysMenu entity by ids.
func (m *SysRoleMutation) AddMenuIDs(ids ...int64) {
	if m.menus == nil {
		m.menus = make(map[int64]struct{})
	}
	for i := range ids {
		m.menus[ids[i]] = struct{}{}
	}
}

// ClearMenus clears the "menus" edge to the SysMenu entity.
func (m *SysRoleMutation) ClearMenus() {
	m.clearedmenus = true
}

// MenusCleared reports if the "menus" edge to the SysMenu entity was cleared.
func (m *SysRoleMutation) MenusCleared() bool {
	return m.clearedmenus
}

// RemoveMenuIDs removes the "menus" edge to the SysMenu entity by IDs.
func (m *SysRoleMutation) RemoveMenuIDs(ids ...int64) {
	if m.removedmenus == nil {
		m.removedmenus = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.menus, ids[i])
		m.removedmenus[ids[i]] = struct{}{}
	}
}

// RemovedMenus returns the removed IDs of the "menus" edge to the SysMenu entity.
func (m *SysRoleMutation) RemovedMenusIDs() (ids []int64) {
	for id := range m.removedmenus {
		ids = append(ids, id)
	}
	return
}

// MenusIDs returns the "menus" edge IDs in the mutation.
func (m *SysRoleMutation) MenusIDs() (ids []int64) {
	for id := range m.menus {
		ids = append(ids, id)
	}
	return
}

// ResetMenus resets all changes to the "menus" edge.
func (m *SysRoleMutation) ResetMenus() {
	m.menus = nil
	m.clearedmenus = false
	m.removedmenus = nil
}

// AddUserIDs adds the "users" edge to the SysUser entity by ids.
func (m *SysRoleMutation) AddUserIDs(ids ...int64) {
	if m.users == nil {
		m.users = make(map[int64]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the SysUser entity.
func (m *SysRoleMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the SysUser entity was cleared.
func (m *SysRoleMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the SysUser entity by IDs.
func (m *SysRoleMutation) RemoveUserIDs(ids ...int64) {
	if m.removedusers == nil {
		m.removedusers = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the SysUser entity.
func (m *SysRoleMutation) RemovedUsersIDs() (ids []int64) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *SysRoleMutation) UsersIDs() (ids []int64) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *SysRoleMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the SysRoleMutation builder.
func (m *SysRoleMutation) Where(ps ...predicate.SysRole) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysRoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysRole).
func (m *SysRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRoleMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.roleName != nil {
		fields = append(fields, sysrole.FieldRoleName)
	}
	if m.status != nil {
		fields = append(fields, sysrole.FieldStatus)
	}
	if m.roleKey != nil {
		fields = append(fields, sysrole.FieldRoleKey)
	}
	if m.roleSort != nil {
		fields = append(fields, sysrole.FieldRoleSort)
	}
	if m.flag != nil {
		fields = append(fields, sysrole.FieldFlag)
	}
	if m.remark != nil {
		fields = append(fields, sysrole.FieldRemark)
	}
	if m.admin != nil {
		fields = append(fields, sysrole.FieldAdmin)
	}
	if m.dataScope != nil {
		fields = append(fields, sysrole.FieldDataScope)
	}
	if m.sysDept != nil {
		fields = append(fields, sysrole.FieldSysDept)
	}
	if m.sysMenu != nil {
		fields = append(fields, sysrole.FieldSysMenu)
	}
	if m.createdAt != nil {
		fields = append(fields, sysrole.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysrole.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysrole.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysrole.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysrole.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysrole.FieldRoleName:
		return m.RoleName()
	case sysrole.FieldStatus:
		return m.Status()
	case sysrole.FieldRoleKey:
		return m.RoleKey()
	case sysrole.FieldRoleSort:
		return m.RoleSort()
	case sysrole.FieldFlag:
		return m.Flag()
	case sysrole.FieldRemark:
		return m.Remark()
	case sysrole.FieldAdmin:
		return m.Admin()
	case sysrole.FieldDataScope:
		return m.DataScope()
	case sysrole.FieldSysDept:
		return m.SysDept()
	case sysrole.FieldSysMenu:
		return m.SysMenu()
	case sysrole.FieldCreatedAt:
		return m.CreatedAt()
	case sysrole.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysrole.FieldCreateBy:
		return m.CreateBy()
	case sysrole.FieldUpdateBy:
		return m.UpdateBy()
	case sysrole.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysrole.FieldRoleName:
		return m.OldRoleName(ctx)
	case sysrole.FieldStatus:
		return m.OldStatus(ctx)
	case sysrole.FieldRoleKey:
		return m.OldRoleKey(ctx)
	case sysrole.FieldRoleSort:
		return m.OldRoleSort(ctx)
	case sysrole.FieldFlag:
		return m.OldFlag(ctx)
	case sysrole.FieldRemark:
		return m.OldRemark(ctx)
	case sysrole.FieldAdmin:
		return m.OldAdmin(ctx)
	case sysrole.FieldDataScope:
		return m.OldDataScope(ctx)
	case sysrole.FieldSysDept:
		return m.OldSysDept(ctx)
	case sysrole.FieldSysMenu:
		return m.OldSysMenu(ctx)
	case sysrole.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysrole.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysrole.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysrole.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysrole.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysrole.FieldRoleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleName(v)
		return nil
	case sysrole.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysrole.FieldRoleKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleKey(v)
		return nil
	case sysrole.FieldRoleSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleSort(v)
		return nil
	case sysrole.FieldFlag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlag(v)
		return nil
	case sysrole.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysrole.FieldAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdmin(v)
		return nil
	case sysrole.FieldDataScope:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataScope(v)
		return nil
	case sysrole.FieldSysDept:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSysDept(v)
		return nil
	case sysrole.FieldSysMenu:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSysMenu(v)
		return nil
	case sysrole.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysrole.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysrole.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysrole.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysrole.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRoleMutation) AddedFields() []string {
	var fields []string
	if m.addroleSort != nil {
		fields = append(fields, sysrole.FieldRoleSort)
	}
	if m.addcreateBy != nil {
		fields = append(fields, sysrole.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysrole.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysrole.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysrole.FieldRoleSort:
		return m.AddedRoleSort()
	case sysrole.FieldCreateBy:
		return m.AddedCreateBy()
	case sysrole.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysrole.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysrole.FieldRoleSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleSort(v)
		return nil
	case sysrole.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysrole.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysrole.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysrole.FieldRoleName) {
		fields = append(fields, sysrole.FieldRoleName)
	}
	if m.FieldCleared(sysrole.FieldStatus) {
		fields = append(fields, sysrole.FieldStatus)
	}
	if m.FieldCleared(sysrole.FieldRoleKey) {
		fields = append(fields, sysrole.FieldRoleKey)
	}
	if m.FieldCleared(sysrole.FieldRoleSort) {
		fields = append(fields, sysrole.FieldRoleSort)
	}
	if m.FieldCleared(sysrole.FieldFlag) {
		fields = append(fields, sysrole.FieldFlag)
	}
	if m.FieldCleared(sysrole.FieldRemark) {
		fields = append(fields, sysrole.FieldRemark)
	}
	if m.FieldCleared(sysrole.FieldAdmin) {
		fields = append(fields, sysrole.FieldAdmin)
	}
	if m.FieldCleared(sysrole.FieldDataScope) {
		fields = append(fields, sysrole.FieldDataScope)
	}
	if m.FieldCleared(sysrole.FieldSysDept) {
		fields = append(fields, sysrole.FieldSysDept)
	}
	if m.FieldCleared(sysrole.FieldSysMenu) {
		fields = append(fields, sysrole.FieldSysMenu)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRoleMutation) ClearField(name string) error {
	switch name {
	case sysrole.FieldRoleName:
		m.ClearRoleName()
		return nil
	case sysrole.FieldStatus:
		m.ClearStatus()
		return nil
	case sysrole.FieldRoleKey:
		m.ClearRoleKey()
		return nil
	case sysrole.FieldRoleSort:
		m.ClearRoleSort()
		return nil
	case sysrole.FieldFlag:
		m.ClearFlag()
		return nil
	case sysrole.FieldRemark:
		m.ClearRemark()
		return nil
	case sysrole.FieldAdmin:
		m.ClearAdmin()
		return nil
	case sysrole.FieldDataScope:
		m.ClearDataScope()
		return nil
	case sysrole.FieldSysDept:
		m.ClearSysDept()
		return nil
	case sysrole.FieldSysMenu:
		m.ClearSysMenu()
		return nil
	}
	return fmt.Errorf("unknown SysRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRoleMutation) ResetField(name string) error {
	switch name {
	case sysrole.FieldRoleName:
		m.ResetRoleName()
		return nil
	case sysrole.FieldStatus:
		m.ResetStatus()
		return nil
	case sysrole.FieldRoleKey:
		m.ResetRoleKey()
		return nil
	case sysrole.FieldRoleSort:
		m.ResetRoleSort()
		return nil
	case sysrole.FieldFlag:
		m.ResetFlag()
		return nil
	case sysrole.FieldRemark:
		m.ResetRemark()
		return nil
	case sysrole.FieldAdmin:
		m.ResetAdmin()
		return nil
	case sysrole.FieldDataScope:
		m.ResetDataScope()
		return nil
	case sysrole.FieldSysDept:
		m.ResetSysDept()
		return nil
	case sysrole.FieldSysMenu:
		m.ResetSysMenu()
		return nil
	case sysrole.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysrole.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysrole.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysrole.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysrole.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.menus != nil {
		edges = append(edges, sysrole.EdgeMenus)
	}
	if m.users != nil {
		edges = append(edges, sysrole.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysrole.EdgeMenus:
		ids := make([]ent.Value, 0, len(m.menus))
		for id := range m.menus {
			ids = append(ids, id)
		}
		return ids
	case sysrole.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmenus != nil {
		edges = append(edges, sysrole.EdgeMenus)
	}
	if m.removedusers != nil {
		edges = append(edges, sysrole.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sysrole.EdgeMenus:
		ids := make([]ent.Value, 0, len(m.removedmenus))
		for id := range m.removedmenus {
			ids = append(ids, id)
		}
		return ids
	case sysrole.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmenus {
		edges = append(edges, sysrole.EdgeMenus)
	}
	if m.clearedusers {
		edges = append(edges, sysrole.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRoleMutation) EdgeCleared(name string) bool {
	switch name {
	case sysrole.EdgeMenus:
		return m.clearedmenus
	case sysrole.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SysRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRoleMutation) ResetEdge(name string) error {
	switch name {
	case sysrole.EdgeMenus:
		m.ResetMenus()
		return nil
	case sysrole.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown SysRole edge %s", name)
}

// SysTablesMutation represents an operation that mutates the SysTables nodes in the graph.
type SysTablesMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int64
	tableName           *string
	tableComment        *string
	className           *string
	tplCategory         *string
	packageName         *string
	moduleName          *string
	moduleFrontName     *string
	businessName        *string
	functionName        *string
	functionAuthor      *string
	pkColumn            *string
	pkGoField           *string
	pkJsonField         *string
	options             *string
	treeCode            *string
	treeParentCode      *string
	treeName            *string
	tree                *bool
	crud                *bool
	remark              *string
	isDataScope         *int32
	addisDataScope      *int32
	isActions           *int32
	addisActions        *int32
	isAuth              *int32
	addisAuth           *int32
	isLogicalDelete     *string
	logicalDelete       *bool
	logicalDeleteColumn *string
	createdAt           *time.Time
	updatedAt           *time.Time
	createBy            *int64
	addcreateBy         *int64
	updateBy            *int64
	addupdateBy         *int64
	tenantId            *int64
	addtenantId         *int64
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*SysTables, error)
	predicates          []predicate.SysTables
}

var _ ent.Mutation = (*SysTablesMutation)(nil)

// systablesOption allows management of the mutation configuration using functional options.
type systablesOption func(*SysTablesMutation)

// newSysTablesMutation creates new mutation for the SysTables entity.
func newSysTablesMutation(c config, op Op, opts ...systablesOption) *SysTablesMutation {
	m := &SysTablesMutation{
		config:        c,
		op:            op,
		typ:           TypeSysTables,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysTablesID sets the ID field of the mutation.
func withSysTablesID(id int64) systablesOption {
	return func(m *SysTablesMutation) {
		var (
			err   error
			once  sync.Once
			value *SysTables
		)
		m.oldValue = func(ctx context.Context) (*SysTables, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysTables.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysTables sets the old SysTables of the mutation.
func withSysTables(node *SysTables) systablesOption {
	return func(m *SysTablesMutation) {
		m.oldValue = func(context.Context) (*SysTables, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysTablesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysTablesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysTablesMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTableName sets the "tableName" field.
func (m *SysTablesMutation) SetTableName(s string) {
	m.tableName = &s
}

// TableName returns the value of the "tableName" field in the mutation.
func (m *SysTablesMutation) TableName() (r string, exists bool) {
	v := m.tableName
	if v == nil {
		return
	}
	return *v, true
}

// OldTableName returns the old "tableName" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldTableName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTableName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTableName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableName: %w", err)
	}
	return oldValue.TableName, nil
}

// ClearTableName clears the value of the "tableName" field.
func (m *SysTablesMutation) ClearTableName() {
	m.tableName = nil
	m.clearedFields[systables.FieldTableName] = struct{}{}
}

// TableNameCleared returns if the "tableName" field was cleared in this mutation.
func (m *SysTablesMutation) TableNameCleared() bool {
	_, ok := m.clearedFields[systables.FieldTableName]
	return ok
}

// ResetTableName resets all changes to the "tableName" field.
func (m *SysTablesMutation) ResetTableName() {
	m.tableName = nil
	delete(m.clearedFields, systables.FieldTableName)
}

// SetTableComment sets the "tableComment" field.
func (m *SysTablesMutation) SetTableComment(s string) {
	m.tableComment = &s
}

// TableComment returns the value of the "tableComment" field in the mutation.
func (m *SysTablesMutation) TableComment() (r string, exists bool) {
	v := m.tableComment
	if v == nil {
		return
	}
	return *v, true
}

// OldTableComment returns the old "tableComment" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldTableComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTableComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTableComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTableComment: %w", err)
	}
	return oldValue.TableComment, nil
}

// ClearTableComment clears the value of the "tableComment" field.
func (m *SysTablesMutation) ClearTableComment() {
	m.tableComment = nil
	m.clearedFields[systables.FieldTableComment] = struct{}{}
}

// TableCommentCleared returns if the "tableComment" field was cleared in this mutation.
func (m *SysTablesMutation) TableCommentCleared() bool {
	_, ok := m.clearedFields[systables.FieldTableComment]
	return ok
}

// ResetTableComment resets all changes to the "tableComment" field.
func (m *SysTablesMutation) ResetTableComment() {
	m.tableComment = nil
	delete(m.clearedFields, systables.FieldTableComment)
}

// SetClassName sets the "className" field.
func (m *SysTablesMutation) SetClassName(s string) {
	m.className = &s
}

// ClassName returns the value of the "className" field in the mutation.
func (m *SysTablesMutation) ClassName() (r string, exists bool) {
	v := m.className
	if v == nil {
		return
	}
	return *v, true
}

// OldClassName returns the old "className" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldClassName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClassName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClassName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClassName: %w", err)
	}
	return oldValue.ClassName, nil
}

// ClearClassName clears the value of the "className" field.
func (m *SysTablesMutation) ClearClassName() {
	m.className = nil
	m.clearedFields[systables.FieldClassName] = struct{}{}
}

// ClassNameCleared returns if the "className" field was cleared in this mutation.
func (m *SysTablesMutation) ClassNameCleared() bool {
	_, ok := m.clearedFields[systables.FieldClassName]
	return ok
}

// ResetClassName resets all changes to the "className" field.
func (m *SysTablesMutation) ResetClassName() {
	m.className = nil
	delete(m.clearedFields, systables.FieldClassName)
}

// SetTplCategory sets the "tplCategory" field.
func (m *SysTablesMutation) SetTplCategory(s string) {
	m.tplCategory = &s
}

// TplCategory returns the value of the "tplCategory" field in the mutation.
func (m *SysTablesMutation) TplCategory() (r string, exists bool) {
	v := m.tplCategory
	if v == nil {
		return
	}
	return *v, true
}

// OldTplCategory returns the old "tplCategory" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldTplCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTplCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTplCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTplCategory: %w", err)
	}
	return oldValue.TplCategory, nil
}

// ClearTplCategory clears the value of the "tplCategory" field.
func (m *SysTablesMutation) ClearTplCategory() {
	m.tplCategory = nil
	m.clearedFields[systables.FieldTplCategory] = struct{}{}
}

// TplCategoryCleared returns if the "tplCategory" field was cleared in this mutation.
func (m *SysTablesMutation) TplCategoryCleared() bool {
	_, ok := m.clearedFields[systables.FieldTplCategory]
	return ok
}

// ResetTplCategory resets all changes to the "tplCategory" field.
func (m *SysTablesMutation) ResetTplCategory() {
	m.tplCategory = nil
	delete(m.clearedFields, systables.FieldTplCategory)
}

// SetPackageName sets the "packageName" field.
func (m *SysTablesMutation) SetPackageName(s string) {
	m.packageName = &s
}

// PackageName returns the value of the "packageName" field in the mutation.
func (m *SysTablesMutation) PackageName() (r string, exists bool) {
	v := m.packageName
	if v == nil {
		return
	}
	return *v, true
}

// OldPackageName returns the old "packageName" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldPackageName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPackageName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPackageName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPackageName: %w", err)
	}
	return oldValue.PackageName, nil
}

// ClearPackageName clears the value of the "packageName" field.
func (m *SysTablesMutation) ClearPackageName() {
	m.packageName = nil
	m.clearedFields[systables.FieldPackageName] = struct{}{}
}

// PackageNameCleared returns if the "packageName" field was cleared in this mutation.
func (m *SysTablesMutation) PackageNameCleared() bool {
	_, ok := m.clearedFields[systables.FieldPackageName]
	return ok
}

// ResetPackageName resets all changes to the "packageName" field.
func (m *SysTablesMutation) ResetPackageName() {
	m.packageName = nil
	delete(m.clearedFields, systables.FieldPackageName)
}

// SetModuleName sets the "moduleName" field.
func (m *SysTablesMutation) SetModuleName(s string) {
	m.moduleName = &s
}

// ModuleName returns the value of the "moduleName" field in the mutation.
func (m *SysTablesMutation) ModuleName() (r string, exists bool) {
	v := m.moduleName
	if v == nil {
		return
	}
	return *v, true
}

// OldModuleName returns the old "moduleName" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldModuleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModuleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModuleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModuleName: %w", err)
	}
	return oldValue.ModuleName, nil
}

// ClearModuleName clears the value of the "moduleName" field.
func (m *SysTablesMutation) ClearModuleName() {
	m.moduleName = nil
	m.clearedFields[systables.FieldModuleName] = struct{}{}
}

// ModuleNameCleared returns if the "moduleName" field was cleared in this mutation.
func (m *SysTablesMutation) ModuleNameCleared() bool {
	_, ok := m.clearedFields[systables.FieldModuleName]
	return ok
}

// ResetModuleName resets all changes to the "moduleName" field.
func (m *SysTablesMutation) ResetModuleName() {
	m.moduleName = nil
	delete(m.clearedFields, systables.FieldModuleName)
}

// SetModuleFrontName sets the "moduleFrontName" field.
func (m *SysTablesMutation) SetModuleFrontName(s string) {
	m.moduleFrontName = &s
}

// ModuleFrontName returns the value of the "moduleFrontName" field in the mutation.
func (m *SysTablesMutation) ModuleFrontName() (r string, exists bool) {
	v := m.moduleFrontName
	if v == nil {
		return
	}
	return *v, true
}

// OldModuleFrontName returns the old "moduleFrontName" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldModuleFrontName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModuleFrontName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModuleFrontName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModuleFrontName: %w", err)
	}
	return oldValue.ModuleFrontName, nil
}

// ClearModuleFrontName clears the value of the "moduleFrontName" field.
func (m *SysTablesMutation) ClearModuleFrontName() {
	m.moduleFrontName = nil
	m.clearedFields[systables.FieldModuleFrontName] = struct{}{}
}

// ModuleFrontNameCleared returns if the "moduleFrontName" field was cleared in this mutation.
func (m *SysTablesMutation) ModuleFrontNameCleared() bool {
	_, ok := m.clearedFields[systables.FieldModuleFrontName]
	return ok
}

// ResetModuleFrontName resets all changes to the "moduleFrontName" field.
func (m *SysTablesMutation) ResetModuleFrontName() {
	m.moduleFrontName = nil
	delete(m.clearedFields, systables.FieldModuleFrontName)
}

// SetBusinessName sets the "businessName" field.
func (m *SysTablesMutation) SetBusinessName(s string) {
	m.businessName = &s
}

// BusinessName returns the value of the "businessName" field in the mutation.
func (m *SysTablesMutation) BusinessName() (r string, exists bool) {
	v := m.businessName
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessName returns the old "businessName" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldBusinessName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBusinessName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBusinessName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessName: %w", err)
	}
	return oldValue.BusinessName, nil
}

// ClearBusinessName clears the value of the "businessName" field.
func (m *SysTablesMutation) ClearBusinessName() {
	m.businessName = nil
	m.clearedFields[systables.FieldBusinessName] = struct{}{}
}

// BusinessNameCleared returns if the "businessName" field was cleared in this mutation.
func (m *SysTablesMutation) BusinessNameCleared() bool {
	_, ok := m.clearedFields[systables.FieldBusinessName]
	return ok
}

// ResetBusinessName resets all changes to the "businessName" field.
func (m *SysTablesMutation) ResetBusinessName() {
	m.businessName = nil
	delete(m.clearedFields, systables.FieldBusinessName)
}

// SetFunctionName sets the "functionName" field.
func (m *SysTablesMutation) SetFunctionName(s string) {
	m.functionName = &s
}

// FunctionName returns the value of the "functionName" field in the mutation.
func (m *SysTablesMutation) FunctionName() (r string, exists bool) {
	v := m.functionName
	if v == nil {
		return
	}
	return *v, true
}

// OldFunctionName returns the old "functionName" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldFunctionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFunctionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFunctionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFunctionName: %w", err)
	}
	return oldValue.FunctionName, nil
}

// ClearFunctionName clears the value of the "functionName" field.
func (m *SysTablesMutation) ClearFunctionName() {
	m.functionName = nil
	m.clearedFields[systables.FieldFunctionName] = struct{}{}
}

// FunctionNameCleared returns if the "functionName" field was cleared in this mutation.
func (m *SysTablesMutation) FunctionNameCleared() bool {
	_, ok := m.clearedFields[systables.FieldFunctionName]
	return ok
}

// ResetFunctionName resets all changes to the "functionName" field.
func (m *SysTablesMutation) ResetFunctionName() {
	m.functionName = nil
	delete(m.clearedFields, systables.FieldFunctionName)
}

// SetFunctionAuthor sets the "functionAuthor" field.
func (m *SysTablesMutation) SetFunctionAuthor(s string) {
	m.functionAuthor = &s
}

// FunctionAuthor returns the value of the "functionAuthor" field in the mutation.
func (m *SysTablesMutation) FunctionAuthor() (r string, exists bool) {
	v := m.functionAuthor
	if v == nil {
		return
	}
	return *v, true
}

// OldFunctionAuthor returns the old "functionAuthor" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldFunctionAuthor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFunctionAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFunctionAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFunctionAuthor: %w", err)
	}
	return oldValue.FunctionAuthor, nil
}

// ClearFunctionAuthor clears the value of the "functionAuthor" field.
func (m *SysTablesMutation) ClearFunctionAuthor() {
	m.functionAuthor = nil
	m.clearedFields[systables.FieldFunctionAuthor] = struct{}{}
}

// FunctionAuthorCleared returns if the "functionAuthor" field was cleared in this mutation.
func (m *SysTablesMutation) FunctionAuthorCleared() bool {
	_, ok := m.clearedFields[systables.FieldFunctionAuthor]
	return ok
}

// ResetFunctionAuthor resets all changes to the "functionAuthor" field.
func (m *SysTablesMutation) ResetFunctionAuthor() {
	m.functionAuthor = nil
	delete(m.clearedFields, systables.FieldFunctionAuthor)
}

// SetPkColumn sets the "pkColumn" field.
func (m *SysTablesMutation) SetPkColumn(s string) {
	m.pkColumn = &s
}

// PkColumn returns the value of the "pkColumn" field in the mutation.
func (m *SysTablesMutation) PkColumn() (r string, exists bool) {
	v := m.pkColumn
	if v == nil {
		return
	}
	return *v, true
}

// OldPkColumn returns the old "pkColumn" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldPkColumn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPkColumn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPkColumn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPkColumn: %w", err)
	}
	return oldValue.PkColumn, nil
}

// ClearPkColumn clears the value of the "pkColumn" field.
func (m *SysTablesMutation) ClearPkColumn() {
	m.pkColumn = nil
	m.clearedFields[systables.FieldPkColumn] = struct{}{}
}

// PkColumnCleared returns if the "pkColumn" field was cleared in this mutation.
func (m *SysTablesMutation) PkColumnCleared() bool {
	_, ok := m.clearedFields[systables.FieldPkColumn]
	return ok
}

// ResetPkColumn resets all changes to the "pkColumn" field.
func (m *SysTablesMutation) ResetPkColumn() {
	m.pkColumn = nil
	delete(m.clearedFields, systables.FieldPkColumn)
}

// SetPkGoField sets the "pkGoField" field.
func (m *SysTablesMutation) SetPkGoField(s string) {
	m.pkGoField = &s
}

// PkGoField returns the value of the "pkGoField" field in the mutation.
func (m *SysTablesMutation) PkGoField() (r string, exists bool) {
	v := m.pkGoField
	if v == nil {
		return
	}
	return *v, true
}

// OldPkGoField returns the old "pkGoField" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldPkGoField(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPkGoField is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPkGoField requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPkGoField: %w", err)
	}
	return oldValue.PkGoField, nil
}

// ClearPkGoField clears the value of the "pkGoField" field.
func (m *SysTablesMutation) ClearPkGoField() {
	m.pkGoField = nil
	m.clearedFields[systables.FieldPkGoField] = struct{}{}
}

// PkGoFieldCleared returns if the "pkGoField" field was cleared in this mutation.
func (m *SysTablesMutation) PkGoFieldCleared() bool {
	_, ok := m.clearedFields[systables.FieldPkGoField]
	return ok
}

// ResetPkGoField resets all changes to the "pkGoField" field.
func (m *SysTablesMutation) ResetPkGoField() {
	m.pkGoField = nil
	delete(m.clearedFields, systables.FieldPkGoField)
}

// SetPkJsonField sets the "pkJsonField" field.
func (m *SysTablesMutation) SetPkJsonField(s string) {
	m.pkJsonField = &s
}

// PkJsonField returns the value of the "pkJsonField" field in the mutation.
func (m *SysTablesMutation) PkJsonField() (r string, exists bool) {
	v := m.pkJsonField
	if v == nil {
		return
	}
	return *v, true
}

// OldPkJsonField returns the old "pkJsonField" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldPkJsonField(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPkJsonField is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPkJsonField requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPkJsonField: %w", err)
	}
	return oldValue.PkJsonField, nil
}

// ClearPkJsonField clears the value of the "pkJsonField" field.
func (m *SysTablesMutation) ClearPkJsonField() {
	m.pkJsonField = nil
	m.clearedFields[systables.FieldPkJsonField] = struct{}{}
}

// PkJsonFieldCleared returns if the "pkJsonField" field was cleared in this mutation.
func (m *SysTablesMutation) PkJsonFieldCleared() bool {
	_, ok := m.clearedFields[systables.FieldPkJsonField]
	return ok
}

// ResetPkJsonField resets all changes to the "pkJsonField" field.
func (m *SysTablesMutation) ResetPkJsonField() {
	m.pkJsonField = nil
	delete(m.clearedFields, systables.FieldPkJsonField)
}

// SetOptions sets the "options" field.
func (m *SysTablesMutation) SetOptions(s string) {
	m.options = &s
}

// Options returns the value of the "options" field in the mutation.
func (m *SysTablesMutation) Options() (r string, exists bool) {
	v := m.options
	if v == nil {
		return
	}
	return *v, true
}

// OldOptions returns the old "options" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldOptions(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOptions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptions: %w", err)
	}
	return oldValue.Options, nil
}

// ClearOptions clears the value of the "options" field.
func (m *SysTablesMutation) ClearOptions() {
	m.options = nil
	m.clearedFields[systables.FieldOptions] = struct{}{}
}

// OptionsCleared returns if the "options" field was cleared in this mutation.
func (m *SysTablesMutation) OptionsCleared() bool {
	_, ok := m.clearedFields[systables.FieldOptions]
	return ok
}

// ResetOptions resets all changes to the "options" field.
func (m *SysTablesMutation) ResetOptions() {
	m.options = nil
	delete(m.clearedFields, systables.FieldOptions)
}

// SetTreeCode sets the "treeCode" field.
func (m *SysTablesMutation) SetTreeCode(s string) {
	m.treeCode = &s
}

// TreeCode returns the value of the "treeCode" field in the mutation.
func (m *SysTablesMutation) TreeCode() (r string, exists bool) {
	v := m.treeCode
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeCode returns the old "treeCode" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldTreeCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTreeCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTreeCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeCode: %w", err)
	}
	return oldValue.TreeCode, nil
}

// ClearTreeCode clears the value of the "treeCode" field.
func (m *SysTablesMutation) ClearTreeCode() {
	m.treeCode = nil
	m.clearedFields[systables.FieldTreeCode] = struct{}{}
}

// TreeCodeCleared returns if the "treeCode" field was cleared in this mutation.
func (m *SysTablesMutation) TreeCodeCleared() bool {
	_, ok := m.clearedFields[systables.FieldTreeCode]
	return ok
}

// ResetTreeCode resets all changes to the "treeCode" field.
func (m *SysTablesMutation) ResetTreeCode() {
	m.treeCode = nil
	delete(m.clearedFields, systables.FieldTreeCode)
}

// SetTreeParentCode sets the "treeParentCode" field.
func (m *SysTablesMutation) SetTreeParentCode(s string) {
	m.treeParentCode = &s
}

// TreeParentCode returns the value of the "treeParentCode" field in the mutation.
func (m *SysTablesMutation) TreeParentCode() (r string, exists bool) {
	v := m.treeParentCode
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeParentCode returns the old "treeParentCode" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldTreeParentCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTreeParentCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTreeParentCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeParentCode: %w", err)
	}
	return oldValue.TreeParentCode, nil
}

// ClearTreeParentCode clears the value of the "treeParentCode" field.
func (m *SysTablesMutation) ClearTreeParentCode() {
	m.treeParentCode = nil
	m.clearedFields[systables.FieldTreeParentCode] = struct{}{}
}

// TreeParentCodeCleared returns if the "treeParentCode" field was cleared in this mutation.
func (m *SysTablesMutation) TreeParentCodeCleared() bool {
	_, ok := m.clearedFields[systables.FieldTreeParentCode]
	return ok
}

// ResetTreeParentCode resets all changes to the "treeParentCode" field.
func (m *SysTablesMutation) ResetTreeParentCode() {
	m.treeParentCode = nil
	delete(m.clearedFields, systables.FieldTreeParentCode)
}

// SetTreeName sets the "treeName" field.
func (m *SysTablesMutation) SetTreeName(s string) {
	m.treeName = &s
}

// TreeName returns the value of the "treeName" field in the mutation.
func (m *SysTablesMutation) TreeName() (r string, exists bool) {
	v := m.treeName
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeName returns the old "treeName" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldTreeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTreeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTreeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeName: %w", err)
	}
	return oldValue.TreeName, nil
}

// ClearTreeName clears the value of the "treeName" field.
func (m *SysTablesMutation) ClearTreeName() {
	m.treeName = nil
	m.clearedFields[systables.FieldTreeName] = struct{}{}
}

// TreeNameCleared returns if the "treeName" field was cleared in this mutation.
func (m *SysTablesMutation) TreeNameCleared() bool {
	_, ok := m.clearedFields[systables.FieldTreeName]
	return ok
}

// ResetTreeName resets all changes to the "treeName" field.
func (m *SysTablesMutation) ResetTreeName() {
	m.treeName = nil
	delete(m.clearedFields, systables.FieldTreeName)
}

// SetTree sets the "tree" field.
func (m *SysTablesMutation) SetTree(b bool) {
	m.tree = &b
}

// Tree returns the value of the "tree" field in the mutation.
func (m *SysTablesMutation) Tree() (r bool, exists bool) {
	v := m.tree
	if v == nil {
		return
	}
	return *v, true
}

// OldTree returns the old "tree" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldTree(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTree is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTree requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTree: %w", err)
	}
	return oldValue.Tree, nil
}

// ClearTree clears the value of the "tree" field.
func (m *SysTablesMutation) ClearTree() {
	m.tree = nil
	m.clearedFields[systables.FieldTree] = struct{}{}
}

// TreeCleared returns if the "tree" field was cleared in this mutation.
func (m *SysTablesMutation) TreeCleared() bool {
	_, ok := m.clearedFields[systables.FieldTree]
	return ok
}

// ResetTree resets all changes to the "tree" field.
func (m *SysTablesMutation) ResetTree() {
	m.tree = nil
	delete(m.clearedFields, systables.FieldTree)
}

// SetCrud sets the "crud" field.
func (m *SysTablesMutation) SetCrud(b bool) {
	m.crud = &b
}

// Crud returns the value of the "crud" field in the mutation.
func (m *SysTablesMutation) Crud() (r bool, exists bool) {
	v := m.crud
	if v == nil {
		return
	}
	return *v, true
}

// OldCrud returns the old "crud" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldCrud(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCrud is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCrud requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrud: %w", err)
	}
	return oldValue.Crud, nil
}

// ClearCrud clears the value of the "crud" field.
func (m *SysTablesMutation) ClearCrud() {
	m.crud = nil
	m.clearedFields[systables.FieldCrud] = struct{}{}
}

// CrudCleared returns if the "crud" field was cleared in this mutation.
func (m *SysTablesMutation) CrudCleared() bool {
	_, ok := m.clearedFields[systables.FieldCrud]
	return ok
}

// ResetCrud resets all changes to the "crud" field.
func (m *SysTablesMutation) ResetCrud() {
	m.crud = nil
	delete(m.clearedFields, systables.FieldCrud)
}

// SetRemark sets the "remark" field.
func (m *SysTablesMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysTablesMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysTablesMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[systables.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysTablesMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[systables.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysTablesMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, systables.FieldRemark)
}

// SetIsDataScope sets the "isDataScope" field.
func (m *SysTablesMutation) SetIsDataScope(i int32) {
	m.isDataScope = &i
	m.addisDataScope = nil
}

// IsDataScope returns the value of the "isDataScope" field in the mutation.
func (m *SysTablesMutation) IsDataScope() (r int32, exists bool) {
	v := m.isDataScope
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDataScope returns the old "isDataScope" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldIsDataScope(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsDataScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsDataScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDataScope: %w", err)
	}
	return oldValue.IsDataScope, nil
}

// AddIsDataScope adds i to the "isDataScope" field.
func (m *SysTablesMutation) AddIsDataScope(i int32) {
	if m.addisDataScope != nil {
		*m.addisDataScope += i
	} else {
		m.addisDataScope = &i
	}
}

// AddedIsDataScope returns the value that was added to the "isDataScope" field in this mutation.
func (m *SysTablesMutation) AddedIsDataScope() (r int32, exists bool) {
	v := m.addisDataScope
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsDataScope clears the value of the "isDataScope" field.
func (m *SysTablesMutation) ClearIsDataScope() {
	m.isDataScope = nil
	m.addisDataScope = nil
	m.clearedFields[systables.FieldIsDataScope] = struct{}{}
}

// IsDataScopeCleared returns if the "isDataScope" field was cleared in this mutation.
func (m *SysTablesMutation) IsDataScopeCleared() bool {
	_, ok := m.clearedFields[systables.FieldIsDataScope]
	return ok
}

// ResetIsDataScope resets all changes to the "isDataScope" field.
func (m *SysTablesMutation) ResetIsDataScope() {
	m.isDataScope = nil
	m.addisDataScope = nil
	delete(m.clearedFields, systables.FieldIsDataScope)
}

// SetIsActions sets the "isActions" field.
func (m *SysTablesMutation) SetIsActions(i int32) {
	m.isActions = &i
	m.addisActions = nil
}

// IsActions returns the value of the "isActions" field in the mutation.
func (m *SysTablesMutation) IsActions() (r int32, exists bool) {
	v := m.isActions
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActions returns the old "isActions" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldIsActions(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsActions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsActions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActions: %w", err)
	}
	return oldValue.IsActions, nil
}

// AddIsActions adds i to the "isActions" field.
func (m *SysTablesMutation) AddIsActions(i int32) {
	if m.addisActions != nil {
		*m.addisActions += i
	} else {
		m.addisActions = &i
	}
}

// AddedIsActions returns the value that was added to the "isActions" field in this mutation.
func (m *SysTablesMutation) AddedIsActions() (r int32, exists bool) {
	v := m.addisActions
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsActions clears the value of the "isActions" field.
func (m *SysTablesMutation) ClearIsActions() {
	m.isActions = nil
	m.addisActions = nil
	m.clearedFields[systables.FieldIsActions] = struct{}{}
}

// IsActionsCleared returns if the "isActions" field was cleared in this mutation.
func (m *SysTablesMutation) IsActionsCleared() bool {
	_, ok := m.clearedFields[systables.FieldIsActions]
	return ok
}

// ResetIsActions resets all changes to the "isActions" field.
func (m *SysTablesMutation) ResetIsActions() {
	m.isActions = nil
	m.addisActions = nil
	delete(m.clearedFields, systables.FieldIsActions)
}

// SetIsAuth sets the "isAuth" field.
func (m *SysTablesMutation) SetIsAuth(i int32) {
	m.isAuth = &i
	m.addisAuth = nil
}

// IsAuth returns the value of the "isAuth" field in the mutation.
func (m *SysTablesMutation) IsAuth() (r int32, exists bool) {
	v := m.isAuth
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAuth returns the old "isAuth" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldIsAuth(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsAuth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsAuth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAuth: %w", err)
	}
	return oldValue.IsAuth, nil
}

// AddIsAuth adds i to the "isAuth" field.
func (m *SysTablesMutation) AddIsAuth(i int32) {
	if m.addisAuth != nil {
		*m.addisAuth += i
	} else {
		m.addisAuth = &i
	}
}

// AddedIsAuth returns the value that was added to the "isAuth" field in this mutation.
func (m *SysTablesMutation) AddedIsAuth() (r int32, exists bool) {
	v := m.addisAuth
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsAuth clears the value of the "isAuth" field.
func (m *SysTablesMutation) ClearIsAuth() {
	m.isAuth = nil
	m.addisAuth = nil
	m.clearedFields[systables.FieldIsAuth] = struct{}{}
}

// IsAuthCleared returns if the "isAuth" field was cleared in this mutation.
func (m *SysTablesMutation) IsAuthCleared() bool {
	_, ok := m.clearedFields[systables.FieldIsAuth]
	return ok
}

// ResetIsAuth resets all changes to the "isAuth" field.
func (m *SysTablesMutation) ResetIsAuth() {
	m.isAuth = nil
	m.addisAuth = nil
	delete(m.clearedFields, systables.FieldIsAuth)
}

// SetIsLogicalDelete sets the "isLogicalDelete" field.
func (m *SysTablesMutation) SetIsLogicalDelete(s string) {
	m.isLogicalDelete = &s
}

// IsLogicalDelete returns the value of the "isLogicalDelete" field in the mutation.
func (m *SysTablesMutation) IsLogicalDelete() (r string, exists bool) {
	v := m.isLogicalDelete
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLogicalDelete returns the old "isLogicalDelete" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldIsLogicalDelete(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsLogicalDelete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsLogicalDelete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLogicalDelete: %w", err)
	}
	return oldValue.IsLogicalDelete, nil
}

// ClearIsLogicalDelete clears the value of the "isLogicalDelete" field.
func (m *SysTablesMutation) ClearIsLogicalDelete() {
	m.isLogicalDelete = nil
	m.clearedFields[systables.FieldIsLogicalDelete] = struct{}{}
}

// IsLogicalDeleteCleared returns if the "isLogicalDelete" field was cleared in this mutation.
func (m *SysTablesMutation) IsLogicalDeleteCleared() bool {
	_, ok := m.clearedFields[systables.FieldIsLogicalDelete]
	return ok
}

// ResetIsLogicalDelete resets all changes to the "isLogicalDelete" field.
func (m *SysTablesMutation) ResetIsLogicalDelete() {
	m.isLogicalDelete = nil
	delete(m.clearedFields, systables.FieldIsLogicalDelete)
}

// SetLogicalDelete sets the "logicalDelete" field.
func (m *SysTablesMutation) SetLogicalDelete(b bool) {
	m.logicalDelete = &b
}

// LogicalDelete returns the value of the "logicalDelete" field in the mutation.
func (m *SysTablesMutation) LogicalDelete() (r bool, exists bool) {
	v := m.logicalDelete
	if v == nil {
		return
	}
	return *v, true
}

// OldLogicalDelete returns the old "logicalDelete" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldLogicalDelete(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLogicalDelete is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLogicalDelete requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogicalDelete: %w", err)
	}
	return oldValue.LogicalDelete, nil
}

// ClearLogicalDelete clears the value of the "logicalDelete" field.
func (m *SysTablesMutation) ClearLogicalDelete() {
	m.logicalDelete = nil
	m.clearedFields[systables.FieldLogicalDelete] = struct{}{}
}

// LogicalDeleteCleared returns if the "logicalDelete" field was cleared in this mutation.
func (m *SysTablesMutation) LogicalDeleteCleared() bool {
	_, ok := m.clearedFields[systables.FieldLogicalDelete]
	return ok
}

// ResetLogicalDelete resets all changes to the "logicalDelete" field.
func (m *SysTablesMutation) ResetLogicalDelete() {
	m.logicalDelete = nil
	delete(m.clearedFields, systables.FieldLogicalDelete)
}

// SetLogicalDeleteColumn sets the "logicalDeleteColumn" field.
func (m *SysTablesMutation) SetLogicalDeleteColumn(s string) {
	m.logicalDeleteColumn = &s
}

// LogicalDeleteColumn returns the value of the "logicalDeleteColumn" field in the mutation.
func (m *SysTablesMutation) LogicalDeleteColumn() (r string, exists bool) {
	v := m.logicalDeleteColumn
	if v == nil {
		return
	}
	return *v, true
}

// OldLogicalDeleteColumn returns the old "logicalDeleteColumn" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldLogicalDeleteColumn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLogicalDeleteColumn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLogicalDeleteColumn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogicalDeleteColumn: %w", err)
	}
	return oldValue.LogicalDeleteColumn, nil
}

// ClearLogicalDeleteColumn clears the value of the "logicalDeleteColumn" field.
func (m *SysTablesMutation) ClearLogicalDeleteColumn() {
	m.logicalDeleteColumn = nil
	m.clearedFields[systables.FieldLogicalDeleteColumn] = struct{}{}
}

// LogicalDeleteColumnCleared returns if the "logicalDeleteColumn" field was cleared in this mutation.
func (m *SysTablesMutation) LogicalDeleteColumnCleared() bool {
	_, ok := m.clearedFields[systables.FieldLogicalDeleteColumn]
	return ok
}

// ResetLogicalDeleteColumn resets all changes to the "logicalDeleteColumn" field.
func (m *SysTablesMutation) ResetLogicalDeleteColumn() {
	m.logicalDeleteColumn = nil
	delete(m.clearedFields, systables.FieldLogicalDeleteColumn)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysTablesMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysTablesMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysTablesMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysTablesMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysTablesMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysTablesMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysTablesMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysTablesMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysTablesMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysTablesMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysTablesMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysTablesMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysTablesMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysTablesMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysTablesMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysTablesMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysTablesMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysTablesMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysTables entity.
// If the SysTables object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysTablesMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysTablesMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysTablesMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysTablesMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// Where appends a list predicates to the SysTablesMutation builder.
func (m *SysTablesMutation) Where(ps ...predicate.SysTables) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysTablesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysTables).
func (m *SysTablesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysTablesMutation) Fields() []string {
	fields := make([]string, 0, 31)
	if m.tableName != nil {
		fields = append(fields, systables.FieldTableName)
	}
	if m.tableComment != nil {
		fields = append(fields, systables.FieldTableComment)
	}
	if m.className != nil {
		fields = append(fields, systables.FieldClassName)
	}
	if m.tplCategory != nil {
		fields = append(fields, systables.FieldTplCategory)
	}
	if m.packageName != nil {
		fields = append(fields, systables.FieldPackageName)
	}
	if m.moduleName != nil {
		fields = append(fields, systables.FieldModuleName)
	}
	if m.moduleFrontName != nil {
		fields = append(fields, systables.FieldModuleFrontName)
	}
	if m.businessName != nil {
		fields = append(fields, systables.FieldBusinessName)
	}
	if m.functionName != nil {
		fields = append(fields, systables.FieldFunctionName)
	}
	if m.functionAuthor != nil {
		fields = append(fields, systables.FieldFunctionAuthor)
	}
	if m.pkColumn != nil {
		fields = append(fields, systables.FieldPkColumn)
	}
	if m.pkGoField != nil {
		fields = append(fields, systables.FieldPkGoField)
	}
	if m.pkJsonField != nil {
		fields = append(fields, systables.FieldPkJsonField)
	}
	if m.options != nil {
		fields = append(fields, systables.FieldOptions)
	}
	if m.treeCode != nil {
		fields = append(fields, systables.FieldTreeCode)
	}
	if m.treeParentCode != nil {
		fields = append(fields, systables.FieldTreeParentCode)
	}
	if m.treeName != nil {
		fields = append(fields, systables.FieldTreeName)
	}
	if m.tree != nil {
		fields = append(fields, systables.FieldTree)
	}
	if m.crud != nil {
		fields = append(fields, systables.FieldCrud)
	}
	if m.remark != nil {
		fields = append(fields, systables.FieldRemark)
	}
	if m.isDataScope != nil {
		fields = append(fields, systables.FieldIsDataScope)
	}
	if m.isActions != nil {
		fields = append(fields, systables.FieldIsActions)
	}
	if m.isAuth != nil {
		fields = append(fields, systables.FieldIsAuth)
	}
	if m.isLogicalDelete != nil {
		fields = append(fields, systables.FieldIsLogicalDelete)
	}
	if m.logicalDelete != nil {
		fields = append(fields, systables.FieldLogicalDelete)
	}
	if m.logicalDeleteColumn != nil {
		fields = append(fields, systables.FieldLogicalDeleteColumn)
	}
	if m.createdAt != nil {
		fields = append(fields, systables.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, systables.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, systables.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, systables.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, systables.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysTablesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case systables.FieldTableName:
		return m.TableName()
	case systables.FieldTableComment:
		return m.TableComment()
	case systables.FieldClassName:
		return m.ClassName()
	case systables.FieldTplCategory:
		return m.TplCategory()
	case systables.FieldPackageName:
		return m.PackageName()
	case systables.FieldModuleName:
		return m.ModuleName()
	case systables.FieldModuleFrontName:
		return m.ModuleFrontName()
	case systables.FieldBusinessName:
		return m.BusinessName()
	case systables.FieldFunctionName:
		return m.FunctionName()
	case systables.FieldFunctionAuthor:
		return m.FunctionAuthor()
	case systables.FieldPkColumn:
		return m.PkColumn()
	case systables.FieldPkGoField:
		return m.PkGoField()
	case systables.FieldPkJsonField:
		return m.PkJsonField()
	case systables.FieldOptions:
		return m.Options()
	case systables.FieldTreeCode:
		return m.TreeCode()
	case systables.FieldTreeParentCode:
		return m.TreeParentCode()
	case systables.FieldTreeName:
		return m.TreeName()
	case systables.FieldTree:
		return m.Tree()
	case systables.FieldCrud:
		return m.Crud()
	case systables.FieldRemark:
		return m.Remark()
	case systables.FieldIsDataScope:
		return m.IsDataScope()
	case systables.FieldIsActions:
		return m.IsActions()
	case systables.FieldIsAuth:
		return m.IsAuth()
	case systables.FieldIsLogicalDelete:
		return m.IsLogicalDelete()
	case systables.FieldLogicalDelete:
		return m.LogicalDelete()
	case systables.FieldLogicalDeleteColumn:
		return m.LogicalDeleteColumn()
	case systables.FieldCreatedAt:
		return m.CreatedAt()
	case systables.FieldUpdatedAt:
		return m.UpdatedAt()
	case systables.FieldCreateBy:
		return m.CreateBy()
	case systables.FieldUpdateBy:
		return m.UpdateBy()
	case systables.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysTablesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case systables.FieldTableName:
		return m.OldTableName(ctx)
	case systables.FieldTableComment:
		return m.OldTableComment(ctx)
	case systables.FieldClassName:
		return m.OldClassName(ctx)
	case systables.FieldTplCategory:
		return m.OldTplCategory(ctx)
	case systables.FieldPackageName:
		return m.OldPackageName(ctx)
	case systables.FieldModuleName:
		return m.OldModuleName(ctx)
	case systables.FieldModuleFrontName:
		return m.OldModuleFrontName(ctx)
	case systables.FieldBusinessName:
		return m.OldBusinessName(ctx)
	case systables.FieldFunctionName:
		return m.OldFunctionName(ctx)
	case systables.FieldFunctionAuthor:
		return m.OldFunctionAuthor(ctx)
	case systables.FieldPkColumn:
		return m.OldPkColumn(ctx)
	case systables.FieldPkGoField:
		return m.OldPkGoField(ctx)
	case systables.FieldPkJsonField:
		return m.OldPkJsonField(ctx)
	case systables.FieldOptions:
		return m.OldOptions(ctx)
	case systables.FieldTreeCode:
		return m.OldTreeCode(ctx)
	case systables.FieldTreeParentCode:
		return m.OldTreeParentCode(ctx)
	case systables.FieldTreeName:
		return m.OldTreeName(ctx)
	case systables.FieldTree:
		return m.OldTree(ctx)
	case systables.FieldCrud:
		return m.OldCrud(ctx)
	case systables.FieldRemark:
		return m.OldRemark(ctx)
	case systables.FieldIsDataScope:
		return m.OldIsDataScope(ctx)
	case systables.FieldIsActions:
		return m.OldIsActions(ctx)
	case systables.FieldIsAuth:
		return m.OldIsAuth(ctx)
	case systables.FieldIsLogicalDelete:
		return m.OldIsLogicalDelete(ctx)
	case systables.FieldLogicalDelete:
		return m.OldLogicalDelete(ctx)
	case systables.FieldLogicalDeleteColumn:
		return m.OldLogicalDeleteColumn(ctx)
	case systables.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case systables.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case systables.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case systables.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case systables.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysTables field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysTablesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case systables.FieldTableName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableName(v)
		return nil
	case systables.FieldTableComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTableComment(v)
		return nil
	case systables.FieldClassName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClassName(v)
		return nil
	case systables.FieldTplCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTplCategory(v)
		return nil
	case systables.FieldPackageName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPackageName(v)
		return nil
	case systables.FieldModuleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModuleName(v)
		return nil
	case systables.FieldModuleFrontName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModuleFrontName(v)
		return nil
	case systables.FieldBusinessName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessName(v)
		return nil
	case systables.FieldFunctionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFunctionName(v)
		return nil
	case systables.FieldFunctionAuthor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFunctionAuthor(v)
		return nil
	case systables.FieldPkColumn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPkColumn(v)
		return nil
	case systables.FieldPkGoField:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPkGoField(v)
		return nil
	case systables.FieldPkJsonField:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPkJsonField(v)
		return nil
	case systables.FieldOptions:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptions(v)
		return nil
	case systables.FieldTreeCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeCode(v)
		return nil
	case systables.FieldTreeParentCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeParentCode(v)
		return nil
	case systables.FieldTreeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeName(v)
		return nil
	case systables.FieldTree:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTree(v)
		return nil
	case systables.FieldCrud:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrud(v)
		return nil
	case systables.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case systables.FieldIsDataScope:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDataScope(v)
		return nil
	case systables.FieldIsActions:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActions(v)
		return nil
	case systables.FieldIsAuth:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAuth(v)
		return nil
	case systables.FieldIsLogicalDelete:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLogicalDelete(v)
		return nil
	case systables.FieldLogicalDelete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogicalDelete(v)
		return nil
	case systables.FieldLogicalDeleteColumn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogicalDeleteColumn(v)
		return nil
	case systables.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case systables.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case systables.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case systables.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case systables.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysTables field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysTablesMutation) AddedFields() []string {
	var fields []string
	if m.addisDataScope != nil {
		fields = append(fields, systables.FieldIsDataScope)
	}
	if m.addisActions != nil {
		fields = append(fields, systables.FieldIsActions)
	}
	if m.addisAuth != nil {
		fields = append(fields, systables.FieldIsAuth)
	}
	if m.addcreateBy != nil {
		fields = append(fields, systables.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, systables.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, systables.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysTablesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case systables.FieldIsDataScope:
		return m.AddedIsDataScope()
	case systables.FieldIsActions:
		return m.AddedIsActions()
	case systables.FieldIsAuth:
		return m.AddedIsAuth()
	case systables.FieldCreateBy:
		return m.AddedCreateBy()
	case systables.FieldUpdateBy:
		return m.AddedUpdateBy()
	case systables.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysTablesMutation) AddField(name string, value ent.Value) error {
	switch name {
	case systables.FieldIsDataScope:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsDataScope(v)
		return nil
	case systables.FieldIsActions:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsActions(v)
		return nil
	case systables.FieldIsAuth:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsAuth(v)
		return nil
	case systables.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case systables.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case systables.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysTables numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysTablesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(systables.FieldTableName) {
		fields = append(fields, systables.FieldTableName)
	}
	if m.FieldCleared(systables.FieldTableComment) {
		fields = append(fields, systables.FieldTableComment)
	}
	if m.FieldCleared(systables.FieldClassName) {
		fields = append(fields, systables.FieldClassName)
	}
	if m.FieldCleared(systables.FieldTplCategory) {
		fields = append(fields, systables.FieldTplCategory)
	}
	if m.FieldCleared(systables.FieldPackageName) {
		fields = append(fields, systables.FieldPackageName)
	}
	if m.FieldCleared(systables.FieldModuleName) {
		fields = append(fields, systables.FieldModuleName)
	}
	if m.FieldCleared(systables.FieldModuleFrontName) {
		fields = append(fields, systables.FieldModuleFrontName)
	}
	if m.FieldCleared(systables.FieldBusinessName) {
		fields = append(fields, systables.FieldBusinessName)
	}
	if m.FieldCleared(systables.FieldFunctionName) {
		fields = append(fields, systables.FieldFunctionName)
	}
	if m.FieldCleared(systables.FieldFunctionAuthor) {
		fields = append(fields, systables.FieldFunctionAuthor)
	}
	if m.FieldCleared(systables.FieldPkColumn) {
		fields = append(fields, systables.FieldPkColumn)
	}
	if m.FieldCleared(systables.FieldPkGoField) {
		fields = append(fields, systables.FieldPkGoField)
	}
	if m.FieldCleared(systables.FieldPkJsonField) {
		fields = append(fields, systables.FieldPkJsonField)
	}
	if m.FieldCleared(systables.FieldOptions) {
		fields = append(fields, systables.FieldOptions)
	}
	if m.FieldCleared(systables.FieldTreeCode) {
		fields = append(fields, systables.FieldTreeCode)
	}
	if m.FieldCleared(systables.FieldTreeParentCode) {
		fields = append(fields, systables.FieldTreeParentCode)
	}
	if m.FieldCleared(systables.FieldTreeName) {
		fields = append(fields, systables.FieldTreeName)
	}
	if m.FieldCleared(systables.FieldTree) {
		fields = append(fields, systables.FieldTree)
	}
	if m.FieldCleared(systables.FieldCrud) {
		fields = append(fields, systables.FieldCrud)
	}
	if m.FieldCleared(systables.FieldRemark) {
		fields = append(fields, systables.FieldRemark)
	}
	if m.FieldCleared(systables.FieldIsDataScope) {
		fields = append(fields, systables.FieldIsDataScope)
	}
	if m.FieldCleared(systables.FieldIsActions) {
		fields = append(fields, systables.FieldIsActions)
	}
	if m.FieldCleared(systables.FieldIsAuth) {
		fields = append(fields, systables.FieldIsAuth)
	}
	if m.FieldCleared(systables.FieldIsLogicalDelete) {
		fields = append(fields, systables.FieldIsLogicalDelete)
	}
	if m.FieldCleared(systables.FieldLogicalDelete) {
		fields = append(fields, systables.FieldLogicalDelete)
	}
	if m.FieldCleared(systables.FieldLogicalDeleteColumn) {
		fields = append(fields, systables.FieldLogicalDeleteColumn)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysTablesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysTablesMutation) ClearField(name string) error {
	switch name {
	case systables.FieldTableName:
		m.ClearTableName()
		return nil
	case systables.FieldTableComment:
		m.ClearTableComment()
		return nil
	case systables.FieldClassName:
		m.ClearClassName()
		return nil
	case systables.FieldTplCategory:
		m.ClearTplCategory()
		return nil
	case systables.FieldPackageName:
		m.ClearPackageName()
		return nil
	case systables.FieldModuleName:
		m.ClearModuleName()
		return nil
	case systables.FieldModuleFrontName:
		m.ClearModuleFrontName()
		return nil
	case systables.FieldBusinessName:
		m.ClearBusinessName()
		return nil
	case systables.FieldFunctionName:
		m.ClearFunctionName()
		return nil
	case systables.FieldFunctionAuthor:
		m.ClearFunctionAuthor()
		return nil
	case systables.FieldPkColumn:
		m.ClearPkColumn()
		return nil
	case systables.FieldPkGoField:
		m.ClearPkGoField()
		return nil
	case systables.FieldPkJsonField:
		m.ClearPkJsonField()
		return nil
	case systables.FieldOptions:
		m.ClearOptions()
		return nil
	case systables.FieldTreeCode:
		m.ClearTreeCode()
		return nil
	case systables.FieldTreeParentCode:
		m.ClearTreeParentCode()
		return nil
	case systables.FieldTreeName:
		m.ClearTreeName()
		return nil
	case systables.FieldTree:
		m.ClearTree()
		return nil
	case systables.FieldCrud:
		m.ClearCrud()
		return nil
	case systables.FieldRemark:
		m.ClearRemark()
		return nil
	case systables.FieldIsDataScope:
		m.ClearIsDataScope()
		return nil
	case systables.FieldIsActions:
		m.ClearIsActions()
		return nil
	case systables.FieldIsAuth:
		m.ClearIsAuth()
		return nil
	case systables.FieldIsLogicalDelete:
		m.ClearIsLogicalDelete()
		return nil
	case systables.FieldLogicalDelete:
		m.ClearLogicalDelete()
		return nil
	case systables.FieldLogicalDeleteColumn:
		m.ClearLogicalDeleteColumn()
		return nil
	}
	return fmt.Errorf("unknown SysTables nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysTablesMutation) ResetField(name string) error {
	switch name {
	case systables.FieldTableName:
		m.ResetTableName()
		return nil
	case systables.FieldTableComment:
		m.ResetTableComment()
		return nil
	case systables.FieldClassName:
		m.ResetClassName()
		return nil
	case systables.FieldTplCategory:
		m.ResetTplCategory()
		return nil
	case systables.FieldPackageName:
		m.ResetPackageName()
		return nil
	case systables.FieldModuleName:
		m.ResetModuleName()
		return nil
	case systables.FieldModuleFrontName:
		m.ResetModuleFrontName()
		return nil
	case systables.FieldBusinessName:
		m.ResetBusinessName()
		return nil
	case systables.FieldFunctionName:
		m.ResetFunctionName()
		return nil
	case systables.FieldFunctionAuthor:
		m.ResetFunctionAuthor()
		return nil
	case systables.FieldPkColumn:
		m.ResetPkColumn()
		return nil
	case systables.FieldPkGoField:
		m.ResetPkGoField()
		return nil
	case systables.FieldPkJsonField:
		m.ResetPkJsonField()
		return nil
	case systables.FieldOptions:
		m.ResetOptions()
		return nil
	case systables.FieldTreeCode:
		m.ResetTreeCode()
		return nil
	case systables.FieldTreeParentCode:
		m.ResetTreeParentCode()
		return nil
	case systables.FieldTreeName:
		m.ResetTreeName()
		return nil
	case systables.FieldTree:
		m.ResetTree()
		return nil
	case systables.FieldCrud:
		m.ResetCrud()
		return nil
	case systables.FieldRemark:
		m.ResetRemark()
		return nil
	case systables.FieldIsDataScope:
		m.ResetIsDataScope()
		return nil
	case systables.FieldIsActions:
		m.ResetIsActions()
		return nil
	case systables.FieldIsAuth:
		m.ResetIsAuth()
		return nil
	case systables.FieldIsLogicalDelete:
		m.ResetIsLogicalDelete()
		return nil
	case systables.FieldLogicalDelete:
		m.ResetLogicalDelete()
		return nil
	case systables.FieldLogicalDeleteColumn:
		m.ResetLogicalDeleteColumn()
		return nil
	case systables.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case systables.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case systables.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case systables.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case systables.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysTables field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysTablesMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysTablesMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysTablesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysTablesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysTablesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysTablesMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysTablesMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysTables unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysTablesMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysTables edge %s", name)
}

// SysUserMutation represents an operation that mutates the SysUser nodes in the graph.
type SysUserMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	username         *string
	nickName         *string
	phone            *string
	roleId           *int64
	addroleId        *int64
	avatar           *string
	sex              *int32
	addsex           *int32
	email            *string
	remark           *string
	status           *string
	extInfo          *string
	createdAt        *time.Time
	updatedAt        *time.Time
	createBy         *int64
	addcreateBy      *int64
	updateBy         *int64
	addupdateBy      *int64
	tenantId         *int64
	addtenantId      *int64
	clearedFields    map[string]struct{}
	dept             *int64
	cleareddept      bool
	post             *int64
	clearedpost      bool
	role             map[int64]struct{}
	removedrole      map[int64]struct{}
	clearedrole      bool
	loginLogs        map[int64]struct{}
	removedloginLogs map[int64]struct{}
	clearedloginLogs bool
	operaLogs        map[int64]struct{}
	removedoperaLogs map[int64]struct{}
	clearedoperaLogs bool
	done             bool
	oldValue         func(context.Context) (*SysUser, error)
	predicates       []predicate.SysUser
}

var _ ent.Mutation = (*SysUserMutation)(nil)

// sysuserOption allows management of the mutation configuration using functional options.
type sysuserOption func(*SysUserMutation)

// newSysUserMutation creates new mutation for the SysUser entity.
func newSysUserMutation(c config, op Op, opts ...sysuserOption) *SysUserMutation {
	m := &SysUserMutation{
		config:        c,
		op:            op,
		typ:           TypeSysUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysUserID sets the ID field of the mutation.
func withSysUserID(id int64) sysuserOption {
	return func(m *SysUserMutation) {
		var (
			err   error
			once  sync.Once
			value *SysUser
		)
		m.oldValue = func(ctx context.Context) (*SysUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysUser sets the old SysUser of the mutation.
func withSysUser(node *SysUser) sysuserOption {
	return func(m *SysUserMutation) {
		m.oldValue = func(context.Context) (*SysUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysUserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *SysUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *SysUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *SysUserMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[sysuser.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *SysUserMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *SysUserMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, sysuser.FieldUsername)
}

// SetNickName sets the "nickName" field.
func (m *SysUserMutation) SetNickName(s string) {
	m.nickName = &s
}

// NickName returns the value of the "nickName" field in the mutation.
func (m *SysUserMutation) NickName() (r string, exists bool) {
	v := m.nickName
	if v == nil {
		return
	}
	return *v, true
}

// OldNickName returns the old "nickName" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldNickName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNickName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNickName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickName: %w", err)
	}
	return oldValue.NickName, nil
}

// ClearNickName clears the value of the "nickName" field.
func (m *SysUserMutation) ClearNickName() {
	m.nickName = nil
	m.clearedFields[sysuser.FieldNickName] = struct{}{}
}

// NickNameCleared returns if the "nickName" field was cleared in this mutation.
func (m *SysUserMutation) NickNameCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldNickName]
	return ok
}

// ResetNickName resets all changes to the "nickName" field.
func (m *SysUserMutation) ResetNickName() {
	m.nickName = nil
	delete(m.clearedFields, sysuser.FieldNickName)
}

// SetPhone sets the "phone" field.
func (m *SysUserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *SysUserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *SysUserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[sysuser.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *SysUserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *SysUserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, sysuser.FieldPhone)
}

// SetDeptId sets the "deptId" field.
func (m *SysUserMutation) SetDeptId(i int64) {
	m.dept = &i
}

// DeptId returns the value of the "deptId" field in the mutation.
func (m *SysUserMutation) DeptId() (r int64, exists bool) {
	v := m.dept
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptId returns the old "deptId" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldDeptId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeptId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeptId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptId: %w", err)
	}
	return oldValue.DeptId, nil
}

// ClearDeptId clears the value of the "deptId" field.
func (m *SysUserMutation) ClearDeptId() {
	m.dept = nil
	m.clearedFields[sysuser.FieldDeptId] = struct{}{}
}

// DeptIdCleared returns if the "deptId" field was cleared in this mutation.
func (m *SysUserMutation) DeptIdCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldDeptId]
	return ok
}

// ResetDeptId resets all changes to the "deptId" field.
func (m *SysUserMutation) ResetDeptId() {
	m.dept = nil
	delete(m.clearedFields, sysuser.FieldDeptId)
}

// SetPostId sets the "postId" field.
func (m *SysUserMutation) SetPostId(i int64) {
	m.post = &i
}

// PostId returns the value of the "postId" field in the mutation.
func (m *SysUserMutation) PostId() (r int64, exists bool) {
	v := m.post
	if v == nil {
		return
	}
	return *v, true
}

// OldPostId returns the old "postId" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldPostId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPostId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPostId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostId: %w", err)
	}
	return oldValue.PostId, nil
}

// ClearPostId clears the value of the "postId" field.
func (m *SysUserMutation) ClearPostId() {
	m.post = nil
	m.clearedFields[sysuser.FieldPostId] = struct{}{}
}

// PostIdCleared returns if the "postId" field was cleared in this mutation.
func (m *SysUserMutation) PostIdCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldPostId]
	return ok
}

// ResetPostId resets all changes to the "postId" field.
func (m *SysUserMutation) ResetPostId() {
	m.post = nil
	delete(m.clearedFields, sysuser.FieldPostId)
}

// SetRoleId sets the "roleId" field.
func (m *SysUserMutation) SetRoleId(i int64) {
	m.roleId = &i
	m.addroleId = nil
}

// RoleId returns the value of the "roleId" field in the mutation.
func (m *SysUserMutation) RoleId() (r int64, exists bool) {
	v := m.roleId
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleId returns the old "roleId" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldRoleId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoleId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoleId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleId: %w", err)
	}
	return oldValue.RoleId, nil
}

// AddRoleId adds i to the "roleId" field.
func (m *SysUserMutation) AddRoleId(i int64) {
	if m.addroleId != nil {
		*m.addroleId += i
	} else {
		m.addroleId = &i
	}
}

// AddedRoleId returns the value that was added to the "roleId" field in this mutation.
func (m *SysUserMutation) AddedRoleId() (r int64, exists bool) {
	v := m.addroleId
	if v == nil {
		return
	}
	return *v, true
}

// ClearRoleId clears the value of the "roleId" field.
func (m *SysUserMutation) ClearRoleId() {
	m.roleId = nil
	m.addroleId = nil
	m.clearedFields[sysuser.FieldRoleId] = struct{}{}
}

// RoleIdCleared returns if the "roleId" field was cleared in this mutation.
func (m *SysUserMutation) RoleIdCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldRoleId]
	return ok
}

// ResetRoleId resets all changes to the "roleId" field.
func (m *SysUserMutation) ResetRoleId() {
	m.roleId = nil
	m.addroleId = nil
	delete(m.clearedFields, sysuser.FieldRoleId)
}

// SetAvatar sets the "avatar" field.
func (m *SysUserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *SysUserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *SysUserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[sysuser.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *SysUserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *SysUserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, sysuser.FieldAvatar)
}

// SetSex sets the "sex" field.
func (m *SysUserMutation) SetSex(i int32) {
	m.sex = &i
	m.addsex = nil
}

// Sex returns the value of the "sex" field in the mutation.
func (m *SysUserMutation) Sex() (r int32, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldSex(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// AddSex adds i to the "sex" field.
func (m *SysUserMutation) AddSex(i int32) {
	if m.addsex != nil {
		*m.addsex += i
	} else {
		m.addsex = &i
	}
}

// AddedSex returns the value that was added to the "sex" field in this mutation.
func (m *SysUserMutation) AddedSex() (r int32, exists bool) {
	v := m.addsex
	if v == nil {
		return
	}
	return *v, true
}

// ClearSex clears the value of the "sex" field.
func (m *SysUserMutation) ClearSex() {
	m.sex = nil
	m.addsex = nil
	m.clearedFields[sysuser.FieldSex] = struct{}{}
}

// SexCleared returns if the "sex" field was cleared in this mutation.
func (m *SysUserMutation) SexCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldSex]
	return ok
}

// ResetSex resets all changes to the "sex" field.
func (m *SysUserMutation) ResetSex() {
	m.sex = nil
	m.addsex = nil
	delete(m.clearedFields, sysuser.FieldSex)
}

// SetEmail sets the "email" field.
func (m *SysUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *SysUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *SysUserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[sysuser.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *SysUserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *SysUserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, sysuser.FieldEmail)
}

// SetRemark sets the "remark" field.
func (m *SysUserMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysUserMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysUserMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysuser.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysUserMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysUserMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysuser.FieldRemark)
}

// SetStatus sets the "status" field.
func (m *SysUserMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SysUserMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *SysUserMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[sysuser.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysUserMutation) StatusCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysUserMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, sysuser.FieldStatus)
}

// SetExtInfo sets the "extInfo" field.
func (m *SysUserMutation) SetExtInfo(s string) {
	m.extInfo = &s
}

// ExtInfo returns the value of the "extInfo" field in the mutation.
func (m *SysUserMutation) ExtInfo() (r string, exists bool) {
	v := m.extInfo
	if v == nil {
		return
	}
	return *v, true
}

// OldExtInfo returns the old "extInfo" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldExtInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExtInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExtInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtInfo: %w", err)
	}
	return oldValue.ExtInfo, nil
}

// ClearExtInfo clears the value of the "extInfo" field.
func (m *SysUserMutation) ClearExtInfo() {
	m.extInfo = nil
	m.clearedFields[sysuser.FieldExtInfo] = struct{}{}
}

// ExtInfoCleared returns if the "extInfo" field was cleared in this mutation.
func (m *SysUserMutation) ExtInfoCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldExtInfo]
	return ok
}

// ResetExtInfo resets all changes to the "extInfo" field.
func (m *SysUserMutation) ResetExtInfo() {
	m.extInfo = nil
	delete(m.clearedFields, sysuser.FieldExtInfo)
}

// SetCreatedAt sets the "createdAt" field.
func (m *SysUserMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *SysUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *SysUserMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *SysUserMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *SysUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *SysUserMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetCreateBy sets the "createBy" field.
func (m *SysUserMutation) SetCreateBy(i int64) {
	m.createBy = &i
	m.addcreateBy = nil
}

// CreateBy returns the value of the "createBy" field in the mutation.
func (m *SysUserMutation) CreateBy() (r int64, exists bool) {
	v := m.createBy
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "createBy" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldCreateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// AddCreateBy adds i to the "createBy" field.
func (m *SysUserMutation) AddCreateBy(i int64) {
	if m.addcreateBy != nil {
		*m.addcreateBy += i
	} else {
		m.addcreateBy = &i
	}
}

// AddedCreateBy returns the value that was added to the "createBy" field in this mutation.
func (m *SysUserMutation) AddedCreateBy() (r int64, exists bool) {
	v := m.addcreateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateBy resets all changes to the "createBy" field.
func (m *SysUserMutation) ResetCreateBy() {
	m.createBy = nil
	m.addcreateBy = nil
}

// SetUpdateBy sets the "updateBy" field.
func (m *SysUserMutation) SetUpdateBy(i int64) {
	m.updateBy = &i
	m.addupdateBy = nil
}

// UpdateBy returns the value of the "updateBy" field in the mutation.
func (m *SysUserMutation) UpdateBy() (r int64, exists bool) {
	v := m.updateBy
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "updateBy" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUpdateBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// AddUpdateBy adds i to the "updateBy" field.
func (m *SysUserMutation) AddUpdateBy(i int64) {
	if m.addupdateBy != nil {
		*m.addupdateBy += i
	} else {
		m.addupdateBy = &i
	}
}

// AddedUpdateBy returns the value that was added to the "updateBy" field in this mutation.
func (m *SysUserMutation) AddedUpdateBy() (r int64, exists bool) {
	v := m.addupdateBy
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateBy resets all changes to the "updateBy" field.
func (m *SysUserMutation) ResetUpdateBy() {
	m.updateBy = nil
	m.addupdateBy = nil
}

// SetTenantId sets the "tenantId" field.
func (m *SysUserMutation) SetTenantId(i int64) {
	m.tenantId = &i
	m.addtenantId = nil
}

// TenantId returns the value of the "tenantId" field in the mutation.
func (m *SysUserMutation) TenantId() (r int64, exists bool) {
	v := m.tenantId
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantId returns the old "tenantId" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldTenantId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTenantId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTenantId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantId: %w", err)
	}
	return oldValue.TenantId, nil
}

// AddTenantId adds i to the "tenantId" field.
func (m *SysUserMutation) AddTenantId(i int64) {
	if m.addtenantId != nil {
		*m.addtenantId += i
	} else {
		m.addtenantId = &i
	}
}

// AddedTenantId returns the value that was added to the "tenantId" field in this mutation.
func (m *SysUserMutation) AddedTenantId() (r int64, exists bool) {
	v := m.addtenantId
	if v == nil {
		return
	}
	return *v, true
}

// ResetTenantId resets all changes to the "tenantId" field.
func (m *SysUserMutation) ResetTenantId() {
	m.tenantId = nil
	m.addtenantId = nil
}

// SetDeptID sets the "dept" edge to the SysDept entity by id.
func (m *SysUserMutation) SetDeptID(id int64) {
	m.dept = &id
}

// ClearDept clears the "dept" edge to the SysDept entity.
func (m *SysUserMutation) ClearDept() {
	m.cleareddept = true
}

// DeptCleared reports if the "dept" edge to the SysDept entity was cleared.
func (m *SysUserMutation) DeptCleared() bool {
	return m.DeptIdCleared() || m.cleareddept
}

// DeptID returns the "dept" edge ID in the mutation.
func (m *SysUserMutation) DeptID() (id int64, exists bool) {
	if m.dept != nil {
		return *m.dept, true
	}
	return
}

// DeptIDs returns the "dept" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeptID instead. It exists only for internal usage by the builders.
func (m *SysUserMutation) DeptIDs() (ids []int64) {
	if id := m.dept; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDept resets all changes to the "dept" edge.
func (m *SysUserMutation) ResetDept() {
	m.dept = nil
	m.cleareddept = false
}

// SetPostID sets the "post" edge to the SysPost entity by id.
func (m *SysUserMutation) SetPostID(id int64) {
	m.post = &id
}

// ClearPost clears the "post" edge to the SysPost entity.
func (m *SysUserMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the SysPost entity was cleared.
func (m *SysUserMutation) PostCleared() bool {
	return m.PostIdCleared() || m.clearedpost
}

// PostID returns the "post" edge ID in the mutation.
func (m *SysUserMutation) PostID() (id int64, exists bool) {
	if m.post != nil {
		return *m.post, true
	}
	return
}

// PostIDs returns the "post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostID instead. It exists only for internal usage by the builders.
func (m *SysUserMutation) PostIDs() (ids []int64) {
	if id := m.post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *SysUserMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
}

// AddRoleIDs adds the "role" edge to the SysRole entity by ids.
func (m *SysUserMutation) AddRoleIDs(ids ...int64) {
	if m.role == nil {
		m.role = make(map[int64]struct{})
	}
	for i := range ids {
		m.role[ids[i]] = struct{}{}
	}
}

// ClearRole clears the "role" edge to the SysRole entity.
func (m *SysUserMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared reports if the "role" edge to the SysRole entity was cleared.
func (m *SysUserMutation) RoleCleared() bool {
	return m.clearedrole
}

// RemoveRoleIDs removes the "role" edge to the SysRole entity by IDs.
func (m *SysUserMutation) RemoveRoleIDs(ids ...int64) {
	if m.removedrole == nil {
		m.removedrole = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.role, ids[i])
		m.removedrole[ids[i]] = struct{}{}
	}
}

// RemovedRole returns the removed IDs of the "role" edge to the SysRole entity.
func (m *SysUserMutation) RemovedRoleIDs() (ids []int64) {
	for id := range m.removedrole {
		ids = append(ids, id)
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
func (m *SysUserMutation) RoleIDs() (ids []int64) {
	for id := range m.role {
		ids = append(ids, id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *SysUserMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
	m.removedrole = nil
}

// AddLoginLogIDs adds the "loginLogs" edge to the SysLoginLog entity by ids.
func (m *SysUserMutation) AddLoginLogIDs(ids ...int64) {
	if m.loginLogs == nil {
		m.loginLogs = make(map[int64]struct{})
	}
	for i := range ids {
		m.loginLogs[ids[i]] = struct{}{}
	}
}

// ClearLoginLogs clears the "loginLogs" edge to the SysLoginLog entity.
func (m *SysUserMutation) ClearLoginLogs() {
	m.clearedloginLogs = true
}

// LoginLogsCleared reports if the "loginLogs" edge to the SysLoginLog entity was cleared.
func (m *SysUserMutation) LoginLogsCleared() bool {
	return m.clearedloginLogs
}

// RemoveLoginLogIDs removes the "loginLogs" edge to the SysLoginLog entity by IDs.
func (m *SysUserMutation) RemoveLoginLogIDs(ids ...int64) {
	if m.removedloginLogs == nil {
		m.removedloginLogs = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.loginLogs, ids[i])
		m.removedloginLogs[ids[i]] = struct{}{}
	}
}

// RemovedLoginLogs returns the removed IDs of the "loginLogs" edge to the SysLoginLog entity.
func (m *SysUserMutation) RemovedLoginLogsIDs() (ids []int64) {
	for id := range m.removedloginLogs {
		ids = append(ids, id)
	}
	return
}

// LoginLogsIDs returns the "loginLogs" edge IDs in the mutation.
func (m *SysUserMutation) LoginLogsIDs() (ids []int64) {
	for id := range m.loginLogs {
		ids = append(ids, id)
	}
	return
}

// ResetLoginLogs resets all changes to the "loginLogs" edge.
func (m *SysUserMutation) ResetLoginLogs() {
	m.loginLogs = nil
	m.clearedloginLogs = false
	m.removedloginLogs = nil
}

// AddOperaLogIDs adds the "operaLogs" edge to the SysOperaLog entity by ids.
func (m *SysUserMutation) AddOperaLogIDs(ids ...int64) {
	if m.operaLogs == nil {
		m.operaLogs = make(map[int64]struct{})
	}
	for i := range ids {
		m.operaLogs[ids[i]] = struct{}{}
	}
}

// ClearOperaLogs clears the "operaLogs" edge to the SysOperaLog entity.
func (m *SysUserMutation) ClearOperaLogs() {
	m.clearedoperaLogs = true
}

// OperaLogsCleared reports if the "operaLogs" edge to the SysOperaLog entity was cleared.
func (m *SysUserMutation) OperaLogsCleared() bool {
	return m.clearedoperaLogs
}

// RemoveOperaLogIDs removes the "operaLogs" edge to the SysOperaLog entity by IDs.
func (m *SysUserMutation) RemoveOperaLogIDs(ids ...int64) {
	if m.removedoperaLogs == nil {
		m.removedoperaLogs = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.operaLogs, ids[i])
		m.removedoperaLogs[ids[i]] = struct{}{}
	}
}

// RemovedOperaLogs returns the removed IDs of the "operaLogs" edge to the SysOperaLog entity.
func (m *SysUserMutation) RemovedOperaLogsIDs() (ids []int64) {
	for id := range m.removedoperaLogs {
		ids = append(ids, id)
	}
	return
}

// OperaLogsIDs returns the "operaLogs" edge IDs in the mutation.
func (m *SysUserMutation) OperaLogsIDs() (ids []int64) {
	for id := range m.operaLogs {
		ids = append(ids, id)
	}
	return
}

// ResetOperaLogs resets all changes to the "operaLogs" edge.
func (m *SysUserMutation) ResetOperaLogs() {
	m.operaLogs = nil
	m.clearedoperaLogs = false
	m.removedoperaLogs = nil
}

// Where appends a list predicates to the SysUserMutation builder.
func (m *SysUserMutation) Where(ps ...predicate.SysUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysUser).
func (m *SysUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysUserMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.username != nil {
		fields = append(fields, sysuser.FieldUsername)
	}
	if m.nickName != nil {
		fields = append(fields, sysuser.FieldNickName)
	}
	if m.phone != nil {
		fields = append(fields, sysuser.FieldPhone)
	}
	if m.dept != nil {
		fields = append(fields, sysuser.FieldDeptId)
	}
	if m.post != nil {
		fields = append(fields, sysuser.FieldPostId)
	}
	if m.roleId != nil {
		fields = append(fields, sysuser.FieldRoleId)
	}
	if m.avatar != nil {
		fields = append(fields, sysuser.FieldAvatar)
	}
	if m.sex != nil {
		fields = append(fields, sysuser.FieldSex)
	}
	if m.email != nil {
		fields = append(fields, sysuser.FieldEmail)
	}
	if m.remark != nil {
		fields = append(fields, sysuser.FieldRemark)
	}
	if m.status != nil {
		fields = append(fields, sysuser.FieldStatus)
	}
	if m.extInfo != nil {
		fields = append(fields, sysuser.FieldExtInfo)
	}
	if m.createdAt != nil {
		fields = append(fields, sysuser.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, sysuser.FieldUpdatedAt)
	}
	if m.createBy != nil {
		fields = append(fields, sysuser.FieldCreateBy)
	}
	if m.updateBy != nil {
		fields = append(fields, sysuser.FieldUpdateBy)
	}
	if m.tenantId != nil {
		fields = append(fields, sysuser.FieldTenantId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldUsername:
		return m.Username()
	case sysuser.FieldNickName:
		return m.NickName()
	case sysuser.FieldPhone:
		return m.Phone()
	case sysuser.FieldDeptId:
		return m.DeptId()
	case sysuser.FieldPostId:
		return m.PostId()
	case sysuser.FieldRoleId:
		return m.RoleId()
	case sysuser.FieldAvatar:
		return m.Avatar()
	case sysuser.FieldSex:
		return m.Sex()
	case sysuser.FieldEmail:
		return m.Email()
	case sysuser.FieldRemark:
		return m.Remark()
	case sysuser.FieldStatus:
		return m.Status()
	case sysuser.FieldExtInfo:
		return m.ExtInfo()
	case sysuser.FieldCreatedAt:
		return m.CreatedAt()
	case sysuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysuser.FieldCreateBy:
		return m.CreateBy()
	case sysuser.FieldUpdateBy:
		return m.UpdateBy()
	case sysuser.FieldTenantId:
		return m.TenantId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysuser.FieldUsername:
		return m.OldUsername(ctx)
	case sysuser.FieldNickName:
		return m.OldNickName(ctx)
	case sysuser.FieldPhone:
		return m.OldPhone(ctx)
	case sysuser.FieldDeptId:
		return m.OldDeptId(ctx)
	case sysuser.FieldPostId:
		return m.OldPostId(ctx)
	case sysuser.FieldRoleId:
		return m.OldRoleId(ctx)
	case sysuser.FieldAvatar:
		return m.OldAvatar(ctx)
	case sysuser.FieldSex:
		return m.OldSex(ctx)
	case sysuser.FieldEmail:
		return m.OldEmail(ctx)
	case sysuser.FieldRemark:
		return m.OldRemark(ctx)
	case sysuser.FieldStatus:
		return m.OldStatus(ctx)
	case sysuser.FieldExtInfo:
		return m.OldExtInfo(ctx)
	case sysuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysuser.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case sysuser.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	case sysuser.FieldTenantId:
		return m.OldTenantId(ctx)
	}
	return nil, fmt.Errorf("unknown SysUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case sysuser.FieldNickName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickName(v)
		return nil
	case sysuser.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case sysuser.FieldDeptId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptId(v)
		return nil
	case sysuser.FieldPostId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostId(v)
		return nil
	case sysuser.FieldRoleId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleId(v)
		return nil
	case sysuser.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case sysuser.FieldSex:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	case sysuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case sysuser.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysuser.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysuser.FieldExtInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtInfo(v)
		return nil
	case sysuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysuser.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case sysuser.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	case sysuser.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysUserMutation) AddedFields() []string {
	var fields []string
	if m.addroleId != nil {
		fields = append(fields, sysuser.FieldRoleId)
	}
	if m.addsex != nil {
		fields = append(fields, sysuser.FieldSex)
	}
	if m.addcreateBy != nil {
		fields = append(fields, sysuser.FieldCreateBy)
	}
	if m.addupdateBy != nil {
		fields = append(fields, sysuser.FieldUpdateBy)
	}
	if m.addtenantId != nil {
		fields = append(fields, sysuser.FieldTenantId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldRoleId:
		return m.AddedRoleId()
	case sysuser.FieldSex:
		return m.AddedSex()
	case sysuser.FieldCreateBy:
		return m.AddedCreateBy()
	case sysuser.FieldUpdateBy:
		return m.AddedUpdateBy()
	case sysuser.FieldTenantId:
		return m.AddedTenantId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldRoleId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleId(v)
		return nil
	case sysuser.FieldSex:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSex(v)
		return nil
	case sysuser.FieldCreateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateBy(v)
		return nil
	case sysuser.FieldUpdateBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateBy(v)
		return nil
	case sysuser.FieldTenantId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTenantId(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysuser.FieldUsername) {
		fields = append(fields, sysuser.FieldUsername)
	}
	if m.FieldCleared(sysuser.FieldNickName) {
		fields = append(fields, sysuser.FieldNickName)
	}
	if m.FieldCleared(sysuser.FieldPhone) {
		fields = append(fields, sysuser.FieldPhone)
	}
	if m.FieldCleared(sysuser.FieldDeptId) {
		fields = append(fields, sysuser.FieldDeptId)
	}
	if m.FieldCleared(sysuser.FieldPostId) {
		fields = append(fields, sysuser.FieldPostId)
	}
	if m.FieldCleared(sysuser.FieldRoleId) {
		fields = append(fields, sysuser.FieldRoleId)
	}
	if m.FieldCleared(sysuser.FieldAvatar) {
		fields = append(fields, sysuser.FieldAvatar)
	}
	if m.FieldCleared(sysuser.FieldSex) {
		fields = append(fields, sysuser.FieldSex)
	}
	if m.FieldCleared(sysuser.FieldEmail) {
		fields = append(fields, sysuser.FieldEmail)
	}
	if m.FieldCleared(sysuser.FieldRemark) {
		fields = append(fields, sysuser.FieldRemark)
	}
	if m.FieldCleared(sysuser.FieldStatus) {
		fields = append(fields, sysuser.FieldStatus)
	}
	if m.FieldCleared(sysuser.FieldExtInfo) {
		fields = append(fields, sysuser.FieldExtInfo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysUserMutation) ClearField(name string) error {
	switch name {
	case sysuser.FieldUsername:
		m.ClearUsername()
		return nil
	case sysuser.FieldNickName:
		m.ClearNickName()
		return nil
	case sysuser.FieldPhone:
		m.ClearPhone()
		return nil
	case sysuser.FieldDeptId:
		m.ClearDeptId()
		return nil
	case sysuser.FieldPostId:
		m.ClearPostId()
		return nil
	case sysuser.FieldRoleId:
		m.ClearRoleId()
		return nil
	case sysuser.FieldAvatar:
		m.ClearAvatar()
		return nil
	case sysuser.FieldSex:
		m.ClearSex()
		return nil
	case sysuser.FieldEmail:
		m.ClearEmail()
		return nil
	case sysuser.FieldRemark:
		m.ClearRemark()
		return nil
	case sysuser.FieldStatus:
		m.ClearStatus()
		return nil
	case sysuser.FieldExtInfo:
		m.ClearExtInfo()
		return nil
	}
	return fmt.Errorf("unknown SysUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysUserMutation) ResetField(name string) error {
	switch name {
	case sysuser.FieldUsername:
		m.ResetUsername()
		return nil
	case sysuser.FieldNickName:
		m.ResetNickName()
		return nil
	case sysuser.FieldPhone:
		m.ResetPhone()
		return nil
	case sysuser.FieldDeptId:
		m.ResetDeptId()
		return nil
	case sysuser.FieldPostId:
		m.ResetPostId()
		return nil
	case sysuser.FieldRoleId:
		m.ResetRoleId()
		return nil
	case sysuser.FieldAvatar:
		m.ResetAvatar()
		return nil
	case sysuser.FieldSex:
		m.ResetSex()
		return nil
	case sysuser.FieldEmail:
		m.ResetEmail()
		return nil
	case sysuser.FieldRemark:
		m.ResetRemark()
		return nil
	case sysuser.FieldStatus:
		m.ResetStatus()
		return nil
	case sysuser.FieldExtInfo:
		m.ResetExtInfo()
		return nil
	case sysuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysuser.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case sysuser.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	case sysuser.FieldTenantId:
		m.ResetTenantId()
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.dept != nil {
		edges = append(edges, sysuser.EdgeDept)
	}
	if m.post != nil {
		edges = append(edges, sysuser.EdgePost)
	}
	if m.role != nil {
		edges = append(edges, sysuser.EdgeRole)
	}
	if m.loginLogs != nil {
		edges = append(edges, sysuser.EdgeLoginLogs)
	}
	if m.operaLogs != nil {
		edges = append(edges, sysuser.EdgeOperaLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysuser.EdgeDept:
		if id := m.dept; id != nil {
			return []ent.Value{*id}
		}
	case sysuser.EdgePost:
		if id := m.post; id != nil {
			return []ent.Value{*id}
		}
	case sysuser.EdgeRole:
		ids := make([]ent.Value, 0, len(m.role))
		for id := range m.role {
			ids = append(ids, id)
		}
		return ids
	case sysuser.EdgeLoginLogs:
		ids := make([]ent.Value, 0, len(m.loginLogs))
		for id := range m.loginLogs {
			ids = append(ids, id)
		}
		return ids
	case sysuser.EdgeOperaLogs:
		ids := make([]ent.Value, 0, len(m.operaLogs))
		for id := range m.operaLogs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedrole != nil {
		edges = append(edges, sysuser.EdgeRole)
	}
	if m.removedloginLogs != nil {
		edges = append(edges, sysuser.EdgeLoginLogs)
	}
	if m.removedoperaLogs != nil {
		edges = append(edges, sysuser.EdgeOperaLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sysuser.EdgeRole:
		ids := make([]ent.Value, 0, len(m.removedrole))
		for id := range m.removedrole {
			ids = append(ids, id)
		}
		return ids
	case sysuser.EdgeLoginLogs:
		ids := make([]ent.Value, 0, len(m.removedloginLogs))
		for id := range m.removedloginLogs {
			ids = append(ids, id)
		}
		return ids
	case sysuser.EdgeOperaLogs:
		ids := make([]ent.Value, 0, len(m.removedoperaLogs))
		for id := range m.removedoperaLogs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.cleareddept {
		edges = append(edges, sysuser.EdgeDept)
	}
	if m.clearedpost {
		edges = append(edges, sysuser.EdgePost)
	}
	if m.clearedrole {
		edges = append(edges, sysuser.EdgeRole)
	}
	if m.clearedloginLogs {
		edges = append(edges, sysuser.EdgeLoginLogs)
	}
	if m.clearedoperaLogs {
		edges = append(edges, sysuser.EdgeOperaLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysUserMutation) EdgeCleared(name string) bool {
	switch name {
	case sysuser.EdgeDept:
		return m.cleareddept
	case sysuser.EdgePost:
		return m.clearedpost
	case sysuser.EdgeRole:
		return m.clearedrole
	case sysuser.EdgeLoginLogs:
		return m.clearedloginLogs
	case sysuser.EdgeOperaLogs:
		return m.clearedoperaLogs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysUserMutation) ClearEdge(name string) error {
	switch name {
	case sysuser.EdgeDept:
		m.ClearDept()
		return nil
	case sysuser.EdgePost:
		m.ClearPost()
		return nil
	}
	return fmt.Errorf("unknown SysUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysUserMutation) ResetEdge(name string) error {
	switch name {
	case sysuser.EdgeDept:
		m.ResetDept()
		return nil
	case sysuser.EdgePost:
		m.ResetPost()
		return nil
	case sysuser.EdgeRole:
		m.ResetRole()
		return nil
	case sysuser.EdgeLoginLogs:
		m.ResetLoginLogs()
		return nil
	case sysuser.EdgeOperaLogs:
		m.ResetOperaLogs()
		return nil
	}
	return fmt.Errorf("unknown SysUser edge %s", name)
}
