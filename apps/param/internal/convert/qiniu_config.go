// Code generated by Caisin. DO NOT EDIT.
// source: apps/param/internal/data/ent/schema/qiniu_config.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/param/qiniuconfig/v1"
	"hope/apps/param/internal/data/ent"
)

func QiniuConfigUpdateReq2Data(v *v1.QiniuConfigUpdateReq) *ent.QiniuConfig {
	if v == nil {
		return nil
	}
	return &ent.QiniuConfig{
		ID:        v.Id,
		AccessKey: v.AccessKey,
		Bucket:    v.Bucket,
		Host:      v.Host,
		SecretKey: v.SecretKey,
		Type:      v.Type,
	}
}

func QiniuConfigData2UpdateReq(v *ent.QiniuConfig) *v1.QiniuConfigUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.QiniuConfigUpdateReq{
		Id:        v.ID,
		AccessKey: v.AccessKey,
		Bucket:    v.Bucket,
		Host:      v.Host,
		SecretKey: v.SecretKey,
		Type:      v.Type,
	}
}

func QiniuConfigCreateReq2Data(v *v1.QiniuConfigCreateReq) *ent.QiniuConfig {
	if v == nil {
		return nil
	}
	return &ent.QiniuConfig{
		AccessKey: v.AccessKey,
		Bucket:    v.Bucket,
		Host:      v.Host,
		SecretKey: v.SecretKey,
		Type:      v.Type,
	}
}

func QiniuConfigData2CreateReq(v *ent.QiniuConfig) *v1.QiniuConfigCreateReq {
	if v == nil {
		return nil
	}
	return &v1.QiniuConfigCreateReq{
		AccessKey: v.AccessKey,
		Bucket:    v.Bucket,
		Host:      v.Host,
		SecretKey: v.SecretKey,
		Type:      v.Type,
	}
}

func QiniuConfigReq2Data(v *v1.QiniuConfigReq) *ent.QiniuConfig {
	if v == nil {
		return nil
	}
	return &ent.QiniuConfig{
		AccessKey: v.AccessKey,
		Bucket:    v.Bucket,
		Host:      v.Host,
		SecretKey: v.SecretKey,
		Type:      v.Type,
	}
}

func QiniuConfigData2Req(v *ent.QiniuConfig) *v1.QiniuConfigReq {
	if v == nil {
		return nil
	}
	return &v1.QiniuConfigReq{
		AccessKey: v.AccessKey,
		Bucket:    v.Bucket,
		Host:      v.Host,
		SecretKey: v.SecretKey,
		Type:      v.Type,
	}
}

func QiniuConfigData2Reply(v *ent.QiniuConfig) *v1.QiniuConfigData {
	if v == nil {
		return nil
	}
	return &v1.QiniuConfigData{
		Id:        v.ID,
		AccessKey: v.AccessKey,
		Bucket:    v.Bucket,
		Host:      v.Host,
		SecretKey: v.SecretKey,
		Type:      v.Type,
		Zone:      v.Zone,
		CreatedAt: timestamppb.New(v.CreatedAt),
		UpdatedAt: timestamppb.New(v.UpdatedAt),
		CreateBy:  v.CreateBy,
		UpdateBy:  v.UpdateBy,
		TenantId:  v.TenantId,
	}
}
