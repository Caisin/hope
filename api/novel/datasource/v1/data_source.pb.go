// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/datasource/v1/data_source.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询搜索请求
type DataSourcePageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *DataSourceReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *DataSourcePageReq) Reset() {
	*x = DataSourcePageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourcePageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourcePageReq) ProtoMessage() {}

func (x *DataSourcePageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourcePageReq.ProtoReflect.Descriptor instead.
func (*DataSourcePageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{0}
}

func (x *DataSourcePageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *DataSourcePageReq) GetParam() *DataSourceReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type DataSourcePageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条目
	Items []*DataSourceReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DataSourcePageReply) Reset() {
	*x = DataSourcePageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourcePageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourcePageReply) ProtoMessage() {}

func (x *DataSourcePageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourcePageReply.ProtoReflect.Descriptor instead.
func (*DataSourcePageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{1}
}

func (x *DataSourcePageReply) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *DataSourcePageReply) GetItems() []*DataSourceReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type DataSourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//数据源名称
	DbName string `protobuf:"bytes,2,opt,name=dbName,proto3" json:"dbName,omitempty"`
	//数据源名称
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	//数据源名称
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	//数据源名称
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,6,opt,name=userName,proto3" json:"userName,omitempty"`
	//密码
	Pwd string `protobuf:"bytes,7,opt,name=pwd,proto3" json:"pwd,omitempty"`
	//状态
	Status bool `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	//数据库类型
	DbType string `protobuf:"bytes,9,opt,name=dbType,proto3" json:"dbType,omitempty"`
	//最大空闲连接数
	ConnMaxIdleTime int32 `protobuf:"varint,10,opt,name=connMaxIdleTime,proto3" json:"connMaxIdleTime,omitempty"`
	//连接可重用的最大时间长度
	ConnMaxLifeTime int32 `protobuf:"varint,11,opt,name=connMaxLifeTime,proto3" json:"connMaxLifeTime,omitempty"`
	//最大空闲
	MaxIdleConns int32 `protobuf:"varint,12,opt,name=maxIdleConns,proto3" json:"maxIdleConns,omitempty"`
	//最大打开连接数
	MaxOpenConns int32 `protobuf:"varint,13,opt,name=maxOpenConns,proto3" json:"maxOpenConns,omitempty"`
	//备注
	Remark string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,17,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,18,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,19,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DataSourceReq) Reset() {
	*x = DataSourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceReq) ProtoMessage() {}

func (x *DataSourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceReq.ProtoReflect.Descriptor instead.
func (*DataSourceReq) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{2}
}

func (x *DataSourceReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataSourceReq) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DataSourceReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DataSourceReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataSourceReq) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DataSourceReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DataSourceReq) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *DataSourceReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DataSourceReq) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *DataSourceReq) GetConnMaxIdleTime() int32 {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return 0
}

func (x *DataSourceReq) GetConnMaxLifeTime() int32 {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return 0
}

func (x *DataSourceReq) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *DataSourceReq) GetMaxOpenConns() int32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *DataSourceReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DataSourceReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DataSourceReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DataSourceReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *DataSourceReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *DataSourceReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索返回
type DataSourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//数据源名称
	DbName string `protobuf:"bytes,2,opt,name=dbName,proto3" json:"dbName,omitempty"`
	//数据源名称
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	//数据源名称
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	//数据源名称
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,6,opt,name=userName,proto3" json:"userName,omitempty"`
	//密码
	Pwd string `protobuf:"bytes,7,opt,name=pwd,proto3" json:"pwd,omitempty"`
	//状态
	Status bool `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	//数据库类型
	DbType string `protobuf:"bytes,9,opt,name=dbType,proto3" json:"dbType,omitempty"`
	//最大空闲连接数
	ConnMaxIdleTime int32 `protobuf:"varint,10,opt,name=connMaxIdleTime,proto3" json:"connMaxIdleTime,omitempty"`
	//连接可重用的最大时间长度
	ConnMaxLifeTime int32 `protobuf:"varint,11,opt,name=connMaxLifeTime,proto3" json:"connMaxLifeTime,omitempty"`
	//最大空闲
	MaxIdleConns int32 `protobuf:"varint,12,opt,name=maxIdleConns,proto3" json:"maxIdleConns,omitempty"`
	//最大打开连接数
	MaxOpenConns int32 `protobuf:"varint,13,opt,name=maxOpenConns,proto3" json:"maxOpenConns,omitempty"`
	//备注
	Remark string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,17,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,18,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,19,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DataSourceReply) Reset() {
	*x = DataSourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceReply) ProtoMessage() {}

func (x *DataSourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceReply.ProtoReflect.Descriptor instead.
func (*DataSourceReply) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{3}
}

func (x *DataSourceReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataSourceReply) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DataSourceReply) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DataSourceReply) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataSourceReply) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DataSourceReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DataSourceReply) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *DataSourceReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DataSourceReply) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *DataSourceReply) GetConnMaxIdleTime() int32 {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return 0
}

func (x *DataSourceReply) GetConnMaxLifeTime() int32 {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return 0
}

func (x *DataSourceReply) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *DataSourceReply) GetMaxOpenConns() int32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *DataSourceReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DataSourceReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DataSourceReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DataSourceReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *DataSourceReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *DataSourceReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 创建DataSource请求
type DataSourceCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//数据源名称
	DbName string `protobuf:"bytes,1,opt,name=dbName,proto3" json:"dbName,omitempty"`
	//数据源名称
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	//数据源名称
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	//数据源名称
	Database string `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,5,opt,name=userName,proto3" json:"userName,omitempty"`
	//密码
	Pwd string `protobuf:"bytes,6,opt,name=pwd,proto3" json:"pwd,omitempty"`
	//状态
	Status bool `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	//数据库类型
	DbType string `protobuf:"bytes,8,opt,name=dbType,proto3" json:"dbType,omitempty"`
	//最大空闲连接数
	ConnMaxIdleTime int32 `protobuf:"varint,9,opt,name=connMaxIdleTime,proto3" json:"connMaxIdleTime,omitempty"`
	//连接可重用的最大时间长度
	ConnMaxLifeTime int32 `protobuf:"varint,10,opt,name=connMaxLifeTime,proto3" json:"connMaxLifeTime,omitempty"`
	//最大空闲
	MaxIdleConns int32 `protobuf:"varint,11,opt,name=maxIdleConns,proto3" json:"maxIdleConns,omitempty"`
	//最大打开连接数
	MaxOpenConns int32 `protobuf:"varint,12,opt,name=maxOpenConns,proto3" json:"maxOpenConns,omitempty"`
	//备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *DataSourceCreateReq) Reset() {
	*x = DataSourceCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceCreateReq) ProtoMessage() {}

func (x *DataSourceCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceCreateReq.ProtoReflect.Descriptor instead.
func (*DataSourceCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{4}
}

func (x *DataSourceCreateReq) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DataSourceCreateReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DataSourceCreateReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataSourceCreateReq) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DataSourceCreateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DataSourceCreateReq) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *DataSourceCreateReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DataSourceCreateReq) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *DataSourceCreateReq) GetConnMaxIdleTime() int32 {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return 0
}

func (x *DataSourceCreateReq) GetConnMaxLifeTime() int32 {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return 0
}

func (x *DataSourceCreateReq) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *DataSourceCreateReq) GetMaxOpenConns() int32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *DataSourceCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 创建DataSource返回
type DataSourceCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//数据源名称
	DbName string `protobuf:"bytes,2,opt,name=dbName,proto3" json:"dbName,omitempty"`
	//数据源名称
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	//数据源名称
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	//数据源名称
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,6,opt,name=userName,proto3" json:"userName,omitempty"`
	//密码
	Pwd string `protobuf:"bytes,7,opt,name=pwd,proto3" json:"pwd,omitempty"`
	//状态
	Status bool `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	//数据库类型
	DbType string `protobuf:"bytes,9,opt,name=dbType,proto3" json:"dbType,omitempty"`
	//最大空闲连接数
	ConnMaxIdleTime int32 `protobuf:"varint,10,opt,name=connMaxIdleTime,proto3" json:"connMaxIdleTime,omitempty"`
	//连接可重用的最大时间长度
	ConnMaxLifeTime int32 `protobuf:"varint,11,opt,name=connMaxLifeTime,proto3" json:"connMaxLifeTime,omitempty"`
	//最大空闲
	MaxIdleConns int32 `protobuf:"varint,12,opt,name=maxIdleConns,proto3" json:"maxIdleConns,omitempty"`
	//最大打开连接数
	MaxOpenConns int32 `protobuf:"varint,13,opt,name=maxOpenConns,proto3" json:"maxOpenConns,omitempty"`
	//备注
	Remark string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,17,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,18,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,19,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DataSourceCreateReply) Reset() {
	*x = DataSourceCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceCreateReply) ProtoMessage() {}

func (x *DataSourceCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceCreateReply.ProtoReflect.Descriptor instead.
func (*DataSourceCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{5}
}

func (x *DataSourceCreateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataSourceCreateReply) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DataSourceCreateReply) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DataSourceCreateReply) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataSourceCreateReply) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DataSourceCreateReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DataSourceCreateReply) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *DataSourceCreateReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DataSourceCreateReply) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *DataSourceCreateReply) GetConnMaxIdleTime() int32 {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return 0
}

func (x *DataSourceCreateReply) GetConnMaxLifeTime() int32 {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return 0
}

func (x *DataSourceCreateReply) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *DataSourceCreateReply) GetMaxOpenConns() int32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *DataSourceCreateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DataSourceCreateReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DataSourceCreateReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DataSourceCreateReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *DataSourceCreateReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *DataSourceCreateReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 更新DataSource请求
type DataSourceUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//数据源名称
	DbName string `protobuf:"bytes,2,opt,name=dbName,proto3" json:"dbName,omitempty"`
	//数据源名称
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	//数据源名称
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	//数据源名称
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,6,opt,name=userName,proto3" json:"userName,omitempty"`
	//密码
	Pwd string `protobuf:"bytes,7,opt,name=pwd,proto3" json:"pwd,omitempty"`
	//状态
	Status bool `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	//数据库类型
	DbType string `protobuf:"bytes,9,opt,name=dbType,proto3" json:"dbType,omitempty"`
	//最大空闲连接数
	ConnMaxIdleTime int32 `protobuf:"varint,10,opt,name=connMaxIdleTime,proto3" json:"connMaxIdleTime,omitempty"`
	//连接可重用的最大时间长度
	ConnMaxLifeTime int32 `protobuf:"varint,11,opt,name=connMaxLifeTime,proto3" json:"connMaxLifeTime,omitempty"`
	//最大空闲
	MaxIdleConns int32 `protobuf:"varint,12,opt,name=maxIdleConns,proto3" json:"maxIdleConns,omitempty"`
	//最大打开连接数
	MaxOpenConns int32 `protobuf:"varint,13,opt,name=maxOpenConns,proto3" json:"maxOpenConns,omitempty"`
	//备注
	Remark string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *DataSourceUpdateReq) Reset() {
	*x = DataSourceUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceUpdateReq) ProtoMessage() {}

func (x *DataSourceUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceUpdateReq.ProtoReflect.Descriptor instead.
func (*DataSourceUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{6}
}

func (x *DataSourceUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataSourceUpdateReq) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DataSourceUpdateReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DataSourceUpdateReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataSourceUpdateReq) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DataSourceUpdateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DataSourceUpdateReq) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *DataSourceUpdateReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DataSourceUpdateReq) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *DataSourceUpdateReq) GetConnMaxIdleTime() int32 {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return 0
}

func (x *DataSourceUpdateReq) GetConnMaxLifeTime() int32 {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return 0
}

func (x *DataSourceUpdateReq) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *DataSourceUpdateReq) GetMaxOpenConns() int32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *DataSourceUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 更新DataSource返回
type DataSourceUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//数据源名称
	DbName string `protobuf:"bytes,2,opt,name=dbName,proto3" json:"dbName,omitempty"`
	//数据源名称
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	//数据源名称
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	//数据源名称
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,6,opt,name=userName,proto3" json:"userName,omitempty"`
	//密码
	Pwd string `protobuf:"bytes,7,opt,name=pwd,proto3" json:"pwd,omitempty"`
	//状态
	Status bool `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	//数据库类型
	DbType string `protobuf:"bytes,9,opt,name=dbType,proto3" json:"dbType,omitempty"`
	//最大空闲连接数
	ConnMaxIdleTime int32 `protobuf:"varint,10,opt,name=connMaxIdleTime,proto3" json:"connMaxIdleTime,omitempty"`
	//连接可重用的最大时间长度
	ConnMaxLifeTime int32 `protobuf:"varint,11,opt,name=connMaxLifeTime,proto3" json:"connMaxLifeTime,omitempty"`
	//最大空闲
	MaxIdleConns int32 `protobuf:"varint,12,opt,name=maxIdleConns,proto3" json:"maxIdleConns,omitempty"`
	//最大打开连接数
	MaxOpenConns int32 `protobuf:"varint,13,opt,name=maxOpenConns,proto3" json:"maxOpenConns,omitempty"`
	//备注
	Remark string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *DataSourceUpdateReply) Reset() {
	*x = DataSourceUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceUpdateReply) ProtoMessage() {}

func (x *DataSourceUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceUpdateReply.ProtoReflect.Descriptor instead.
func (*DataSourceUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{7}
}

func (x *DataSourceUpdateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataSourceUpdateReply) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DataSourceUpdateReply) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DataSourceUpdateReply) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataSourceUpdateReply) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DataSourceUpdateReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DataSourceUpdateReply) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *DataSourceUpdateReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *DataSourceUpdateReply) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *DataSourceUpdateReply) GetConnMaxIdleTime() int32 {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return 0
}

func (x *DataSourceUpdateReply) GetConnMaxLifeTime() int32 {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return 0
}

func (x *DataSourceUpdateReply) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *DataSourceUpdateReply) GetMaxOpenConns() int32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *DataSourceUpdateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 删除DataSource请求
type DataSourceDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DataSourceDeleteReq) Reset() {
	*x = DataSourceDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceDeleteReq) ProtoMessage() {}

func (x *DataSourceDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceDeleteReq.ProtoReflect.Descriptor instead.
func (*DataSourceDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{8}
}

func (x *DataSourceDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除DataSource请求
type DataSourceBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DataSourceBatchDeleteReq) Reset() {
	*x = DataSourceBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceBatchDeleteReq) ProtoMessage() {}

func (x *DataSourceBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*DataSourceBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{9}
}

func (x *DataSourceBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除DataSource返回
type DataSourceDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DataSourceDeleteReply) Reset() {
	*x = DataSourceDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceDeleteReply) ProtoMessage() {}

func (x *DataSourceDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_datasource_v1_data_source_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceDeleteReply.ProtoReflect.Descriptor instead.
func (*DataSourceDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_datasource_v1_data_source_proto_rawDescGZIP(), []int{10}
}

func (x *DataSourceDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_datasource_v1_data_source_proto protoreflect.FileDescriptor

var file_api_novel_datasource_v1_data_source_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x74, 0x0a, 0x13, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xd5, 0x04, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61,
	0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd7, 0x04, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d,
	0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x83, 0x03, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49,
	0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78,
	0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49,
	0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xdd, 0x04, 0x0a, 0x15, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61,
	0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x93, 0x03, 0x0a, 0x13, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c,
	0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x95,
	0x03, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70,
	0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69,
	0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a,
	0x18, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xe8, 0x05, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x7d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0x78, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7f, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x21, 0x5a, 0x1f, 0x68, 0x6f, 0x70, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_novel_datasource_v1_data_source_proto_rawDescOnce sync.Once
	file_api_novel_datasource_v1_data_source_proto_rawDescData = file_api_novel_datasource_v1_data_source_proto_rawDesc
)

func file_api_novel_datasource_v1_data_source_proto_rawDescGZIP() []byte {
	file_api_novel_datasource_v1_data_source_proto_rawDescOnce.Do(func() {
		file_api_novel_datasource_v1_data_source_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_datasource_v1_data_source_proto_rawDescData)
	})
	return file_api_novel_datasource_v1_data_source_proto_rawDescData
}

var file_api_novel_datasource_v1_data_source_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_novel_datasource_v1_data_source_proto_goTypes = []interface{}{
	(*DataSourcePageReq)(nil),        // 0: datasource.v1.DataSourcePageReq
	(*DataSourcePageReply)(nil),      // 1: datasource.v1.DataSourcePageReply
	(*DataSourceReq)(nil),            // 2: datasource.v1.DataSourceReq
	(*DataSourceReply)(nil),          // 3: datasource.v1.DataSourceReply
	(*DataSourceCreateReq)(nil),      // 4: datasource.v1.DataSourceCreateReq
	(*DataSourceCreateReply)(nil),    // 5: datasource.v1.DataSourceCreateReply
	(*DataSourceUpdateReq)(nil),      // 6: datasource.v1.DataSourceUpdateReq
	(*DataSourceUpdateReply)(nil),    // 7: datasource.v1.DataSourceUpdateReply
	(*DataSourceDeleteReq)(nil),      // 8: datasource.v1.DataSourceDeleteReq
	(*DataSourceBatchDeleteReq)(nil), // 9: datasource.v1.DataSourceBatchDeleteReq
	(*DataSourceDeleteReply)(nil),    // 10: datasource.v1.DataSourceDeleteReply
	(*pagin.Pagination)(nil),         // 11: pagin.Pagination
	(*timestamppb.Timestamp)(nil),    // 12: google.protobuf.Timestamp
}
var file_api_novel_datasource_v1_data_source_proto_depIdxs = []int32{
	11, // 0: datasource.v1.DataSourcePageReq.pagin:type_name -> pagin.Pagination
	2,  // 1: datasource.v1.DataSourcePageReq.param:type_name -> datasource.v1.DataSourceReq
	11, // 2: datasource.v1.DataSourcePageReply.pagin:type_name -> pagin.Pagination
	3,  // 3: datasource.v1.DataSourcePageReply.items:type_name -> datasource.v1.DataSourceReply
	12, // 4: datasource.v1.DataSourceReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 5: datasource.v1.DataSourceReq.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 6: datasource.v1.DataSourceReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 7: datasource.v1.DataSourceReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 8: datasource.v1.DataSourceCreateReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 9: datasource.v1.DataSourceCreateReply.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 10: datasource.v1.DataSource.GetPageDataSource:input_type -> datasource.v1.DataSourcePageReq
	2,  // 11: datasource.v1.DataSource.GetDataSource:input_type -> datasource.v1.DataSourceReq
	6,  // 12: datasource.v1.DataSource.UpdateDataSource:input_type -> datasource.v1.DataSourceUpdateReq
	4,  // 13: datasource.v1.DataSource.CreateDataSource:input_type -> datasource.v1.DataSourceCreateReq
	8,  // 14: datasource.v1.DataSource.DeleteDataSource:input_type -> datasource.v1.DataSourceDeleteReq
	9,  // 15: datasource.v1.DataSource.BatchDeleteDataSource:input_type -> datasource.v1.DataSourceBatchDeleteReq
	1,  // 16: datasource.v1.DataSource.GetPageDataSource:output_type -> datasource.v1.DataSourcePageReply
	3,  // 17: datasource.v1.DataSource.GetDataSource:output_type -> datasource.v1.DataSourceReply
	7,  // 18: datasource.v1.DataSource.UpdateDataSource:output_type -> datasource.v1.DataSourceUpdateReply
	5,  // 19: datasource.v1.DataSource.CreateDataSource:output_type -> datasource.v1.DataSourceCreateReply
	10, // 20: datasource.v1.DataSource.DeleteDataSource:output_type -> datasource.v1.DataSourceDeleteReply
	10, // 21: datasource.v1.DataSource.BatchDeleteDataSource:output_type -> datasource.v1.DataSourceDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_novel_datasource_v1_data_source_proto_init() }
func file_api_novel_datasource_v1_data_source_proto_init() {
	if File_api_novel_datasource_v1_data_source_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_datasource_v1_data_source_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourcePageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourcePageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_datasource_v1_data_source_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_datasource_v1_data_source_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_datasource_v1_data_source_proto_goTypes,
		DependencyIndexes: file_api_novel_datasource_v1_data_source_proto_depIdxs,
		MessageInfos:      file_api_novel_datasource_v1_data_source_proto_msgTypes,
	}.Build()
	File_api_novel_datasource_v1_data_source_proto = out.File
	file_api_novel_datasource_v1_data_source_proto_rawDesc = nil
	file_api_novel_datasource_v1_data_source_proto_goTypes = nil
	file_api_novel_datasource_v1_data_source_proto_depIdxs = nil
}
