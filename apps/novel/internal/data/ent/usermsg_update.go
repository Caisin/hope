// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/usermsg"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserMsgUpdate is the builder for updating UserMsg entities.
type UserMsgUpdate struct {
	config
	hooks    []Hook
	mutation *UserMsgMutation
}

// Where appends a list predicates to the UserMsgUpdate builder.
func (umu *UserMsgUpdate) Where(ps ...predicate.UserMsg) *UserMsgUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetUserId sets the "userId" field.
func (umu *UserMsgUpdate) SetUserId(i int64) *UserMsgUpdate {
	umu.mutation.SetUserId(i)
	return umu
}

// SetMsgId sets the "msgId" field.
func (umu *UserMsgUpdate) SetMsgId(i int64) *UserMsgUpdate {
	umu.mutation.ResetMsgId()
	umu.mutation.SetMsgId(i)
	return umu
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (umu *UserMsgUpdate) SetNillableMsgId(i *int64) *UserMsgUpdate {
	if i != nil {
		umu.SetMsgId(*i)
	}
	return umu
}

// AddMsgId adds i to the "msgId" field.
func (umu *UserMsgUpdate) AddMsgId(i int64) *UserMsgUpdate {
	umu.mutation.AddMsgId(i)
	return umu
}

// ClearMsgId clears the value of the "msgId" field.
func (umu *UserMsgUpdate) ClearMsgId() *UserMsgUpdate {
	umu.mutation.ClearMsgId()
	return umu
}

// SetIsRead sets the "isRead" field.
func (umu *UserMsgUpdate) SetIsRead(b bool) *UserMsgUpdate {
	umu.mutation.SetIsRead(b)
	return umu
}

// SetNillableIsRead sets the "isRead" field if the given value is not nil.
func (umu *UserMsgUpdate) SetNillableIsRead(b *bool) *UserMsgUpdate {
	if b != nil {
		umu.SetIsRead(*b)
	}
	return umu
}

// ClearIsRead clears the value of the "isRead" field.
func (umu *UserMsgUpdate) ClearIsRead() *UserMsgUpdate {
	umu.mutation.ClearIsRead()
	return umu
}

// SetUpdatedAt sets the "updatedAt" field.
func (umu *UserMsgUpdate) SetUpdatedAt(t time.Time) *UserMsgUpdate {
	umu.mutation.SetUpdatedAt(t)
	return umu
}

// SetCreateBy sets the "createBy" field.
func (umu *UserMsgUpdate) SetCreateBy(i int64) *UserMsgUpdate {
	umu.mutation.ResetCreateBy()
	umu.mutation.SetCreateBy(i)
	return umu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (umu *UserMsgUpdate) SetNillableCreateBy(i *int64) *UserMsgUpdate {
	if i != nil {
		umu.SetCreateBy(*i)
	}
	return umu
}

// AddCreateBy adds i to the "createBy" field.
func (umu *UserMsgUpdate) AddCreateBy(i int64) *UserMsgUpdate {
	umu.mutation.AddCreateBy(i)
	return umu
}

// SetUpdateBy sets the "updateBy" field.
func (umu *UserMsgUpdate) SetUpdateBy(i int64) *UserMsgUpdate {
	umu.mutation.ResetUpdateBy()
	umu.mutation.SetUpdateBy(i)
	return umu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (umu *UserMsgUpdate) SetNillableUpdateBy(i *int64) *UserMsgUpdate {
	if i != nil {
		umu.SetUpdateBy(*i)
	}
	return umu
}

// AddUpdateBy adds i to the "updateBy" field.
func (umu *UserMsgUpdate) AddUpdateBy(i int64) *UserMsgUpdate {
	umu.mutation.AddUpdateBy(i)
	return umu
}

// SetTenantId sets the "tenantId" field.
func (umu *UserMsgUpdate) SetTenantId(i int64) *UserMsgUpdate {
	umu.mutation.ResetTenantId()
	umu.mutation.SetTenantId(i)
	return umu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (umu *UserMsgUpdate) SetNillableTenantId(i *int64) *UserMsgUpdate {
	if i != nil {
		umu.SetTenantId(*i)
	}
	return umu
}

// AddTenantId adds i to the "tenantId" field.
func (umu *UserMsgUpdate) AddTenantId(i int64) *UserMsgUpdate {
	umu.mutation.AddTenantId(i)
	return umu
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (umu *UserMsgUpdate) SetUserID(id int64) *UserMsgUpdate {
	umu.mutation.SetUserID(id)
	return umu
}

// SetUser sets the "user" edge to the SocialUser entity.
func (umu *UserMsgUpdate) SetUser(s *SocialUser) *UserMsgUpdate {
	return umu.SetUserID(s.ID)
}

// Mutation returns the UserMsgMutation object of the builder.
func (umu *UserMsgUpdate) Mutation() *UserMsgMutation {
	return umu.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (umu *UserMsgUpdate) ClearUser() *UserMsgUpdate {
	umu.mutation.ClearUser()
	return umu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserMsgUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	umu.defaults()
	if len(umu.hooks) == 0 {
		if err = umu.check(); err != nil {
			return 0, err
		}
		affected, err = umu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMsgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = umu.check(); err != nil {
				return 0, err
			}
			umu.mutation = mutation
			affected, err = umu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(umu.hooks) - 1; i >= 0; i-- {
			if umu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserMsgUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserMsgUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserMsgUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umu *UserMsgUpdate) defaults() {
	if _, ok := umu.mutation.UpdatedAt(); !ok {
		v := usermsg.UpdateDefaultUpdatedAt()
		umu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umu *UserMsgUpdate) check() error {
	if _, ok := umu.mutation.UserID(); umu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (umu *UserMsgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermsg.Table,
			Columns: usermsg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: usermsg.FieldID,
			},
		},
	}
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.MsgId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldMsgId,
		})
	}
	if value, ok := umu.mutation.AddedMsgId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldMsgId,
		})
	}
	if umu.mutation.MsgIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: usermsg.FieldMsgId,
		})
	}
	if value, ok := umu.mutation.IsRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: usermsg.FieldIsRead,
		})
	}
	if umu.mutation.IsReadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: usermsg.FieldIsRead,
		})
	}
	if value, ok := umu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermsg.FieldUpdatedAt,
		})
	}
	if value, ok := umu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldCreateBy,
		})
	}
	if value, ok := umu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldCreateBy,
		})
	}
	if value, ok := umu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldUpdateBy,
		})
	}
	if value, ok := umu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldUpdateBy,
		})
	}
	if value, ok := umu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldTenantId,
		})
	}
	if value, ok := umu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldTenantId,
		})
	}
	if umu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermsg.UserTable,
			Columns: []string{usermsg.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermsg.UserTable,
			Columns: []string{usermsg.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermsg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserMsgUpdateOne is the builder for updating a single UserMsg entity.
type UserMsgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMsgMutation
}

// SetUserId sets the "userId" field.
func (umuo *UserMsgUpdateOne) SetUserId(i int64) *UserMsgUpdateOne {
	umuo.mutation.SetUserId(i)
	return umuo
}

// SetMsgId sets the "msgId" field.
func (umuo *UserMsgUpdateOne) SetMsgId(i int64) *UserMsgUpdateOne {
	umuo.mutation.ResetMsgId()
	umuo.mutation.SetMsgId(i)
	return umuo
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (umuo *UserMsgUpdateOne) SetNillableMsgId(i *int64) *UserMsgUpdateOne {
	if i != nil {
		umuo.SetMsgId(*i)
	}
	return umuo
}

// AddMsgId adds i to the "msgId" field.
func (umuo *UserMsgUpdateOne) AddMsgId(i int64) *UserMsgUpdateOne {
	umuo.mutation.AddMsgId(i)
	return umuo
}

// ClearMsgId clears the value of the "msgId" field.
func (umuo *UserMsgUpdateOne) ClearMsgId() *UserMsgUpdateOne {
	umuo.mutation.ClearMsgId()
	return umuo
}

// SetIsRead sets the "isRead" field.
func (umuo *UserMsgUpdateOne) SetIsRead(b bool) *UserMsgUpdateOne {
	umuo.mutation.SetIsRead(b)
	return umuo
}

// SetNillableIsRead sets the "isRead" field if the given value is not nil.
func (umuo *UserMsgUpdateOne) SetNillableIsRead(b *bool) *UserMsgUpdateOne {
	if b != nil {
		umuo.SetIsRead(*b)
	}
	return umuo
}

// ClearIsRead clears the value of the "isRead" field.
func (umuo *UserMsgUpdateOne) ClearIsRead() *UserMsgUpdateOne {
	umuo.mutation.ClearIsRead()
	return umuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (umuo *UserMsgUpdateOne) SetUpdatedAt(t time.Time) *UserMsgUpdateOne {
	umuo.mutation.SetUpdatedAt(t)
	return umuo
}

// SetCreateBy sets the "createBy" field.
func (umuo *UserMsgUpdateOne) SetCreateBy(i int64) *UserMsgUpdateOne {
	umuo.mutation.ResetCreateBy()
	umuo.mutation.SetCreateBy(i)
	return umuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (umuo *UserMsgUpdateOne) SetNillableCreateBy(i *int64) *UserMsgUpdateOne {
	if i != nil {
		umuo.SetCreateBy(*i)
	}
	return umuo
}

// AddCreateBy adds i to the "createBy" field.
func (umuo *UserMsgUpdateOne) AddCreateBy(i int64) *UserMsgUpdateOne {
	umuo.mutation.AddCreateBy(i)
	return umuo
}

// SetUpdateBy sets the "updateBy" field.
func (umuo *UserMsgUpdateOne) SetUpdateBy(i int64) *UserMsgUpdateOne {
	umuo.mutation.ResetUpdateBy()
	umuo.mutation.SetUpdateBy(i)
	return umuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (umuo *UserMsgUpdateOne) SetNillableUpdateBy(i *int64) *UserMsgUpdateOne {
	if i != nil {
		umuo.SetUpdateBy(*i)
	}
	return umuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (umuo *UserMsgUpdateOne) AddUpdateBy(i int64) *UserMsgUpdateOne {
	umuo.mutation.AddUpdateBy(i)
	return umuo
}

// SetTenantId sets the "tenantId" field.
func (umuo *UserMsgUpdateOne) SetTenantId(i int64) *UserMsgUpdateOne {
	umuo.mutation.ResetTenantId()
	umuo.mutation.SetTenantId(i)
	return umuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (umuo *UserMsgUpdateOne) SetNillableTenantId(i *int64) *UserMsgUpdateOne {
	if i != nil {
		umuo.SetTenantId(*i)
	}
	return umuo
}

// AddTenantId adds i to the "tenantId" field.
func (umuo *UserMsgUpdateOne) AddTenantId(i int64) *UserMsgUpdateOne {
	umuo.mutation.AddTenantId(i)
	return umuo
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (umuo *UserMsgUpdateOne) SetUserID(id int64) *UserMsgUpdateOne {
	umuo.mutation.SetUserID(id)
	return umuo
}

// SetUser sets the "user" edge to the SocialUser entity.
func (umuo *UserMsgUpdateOne) SetUser(s *SocialUser) *UserMsgUpdateOne {
	return umuo.SetUserID(s.ID)
}

// Mutation returns the UserMsgMutation object of the builder.
func (umuo *UserMsgUpdateOne) Mutation() *UserMsgMutation {
	return umuo.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (umuo *UserMsgUpdateOne) ClearUser() *UserMsgUpdateOne {
	umuo.mutation.ClearUser()
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserMsgUpdateOne) Select(field string, fields ...string) *UserMsgUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserMsg entity.
func (umuo *UserMsgUpdateOne) Save(ctx context.Context) (*UserMsg, error) {
	var (
		err  error
		node *UserMsg
	)
	umuo.defaults()
	if len(umuo.hooks) == 0 {
		if err = umuo.check(); err != nil {
			return nil, err
		}
		node, err = umuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMsgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = umuo.check(); err != nil {
				return nil, err
			}
			umuo.mutation = mutation
			node, err = umuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(umuo.hooks) - 1; i >= 0; i-- {
			if umuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserMsgUpdateOne) SaveX(ctx context.Context) *UserMsg {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserMsgUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserMsgUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umuo *UserMsgUpdateOne) defaults() {
	if _, ok := umuo.mutation.UpdatedAt(); !ok {
		v := usermsg.UpdateDefaultUpdatedAt()
		umuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umuo *UserMsgUpdateOne) check() error {
	if _, ok := umuo.mutation.UserID(); umuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (umuo *UserMsgUpdateOne) sqlSave(ctx context.Context) (_node *UserMsg, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermsg.Table,
			Columns: usermsg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: usermsg.FieldID,
			},
		},
	}
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserMsg.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermsg.FieldID)
		for _, f := range fields {
			if !usermsg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermsg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.MsgId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldMsgId,
		})
	}
	if value, ok := umuo.mutation.AddedMsgId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldMsgId,
		})
	}
	if umuo.mutation.MsgIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: usermsg.FieldMsgId,
		})
	}
	if value, ok := umuo.mutation.IsRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: usermsg.FieldIsRead,
		})
	}
	if umuo.mutation.IsReadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: usermsg.FieldIsRead,
		})
	}
	if value, ok := umuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermsg.FieldUpdatedAt,
		})
	}
	if value, ok := umuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldCreateBy,
		})
	}
	if value, ok := umuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldCreateBy,
		})
	}
	if value, ok := umuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldUpdateBy,
		})
	}
	if value, ok := umuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldUpdateBy,
		})
	}
	if value, ok := umuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldTenantId,
		})
	}
	if value, ok := umuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldTenantId,
		})
	}
	if umuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermsg.UserTable,
			Columns: []string{usermsg.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermsg.UserTable,
			Columns: []string{usermsg.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserMsg{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermsg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
