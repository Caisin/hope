// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/usermsg"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserMsg is the model entity for the UserMsg schema.
type UserMsg struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	// 用户ID
	UserId int64 `json:"userId,omitempty"`
	// MsgId holds the value of the "msgId" field.
	// 消息编码
	MsgId int64 `json:"msgId,omitempty"`
	// IsRead holds the value of the "isRead" field.
	// 是否阅读
	IsRead bool `json:"isRead,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserMsgQuery when eager-loading is set.
	Edges UserMsgEdges `json:"edges"`
}

// UserMsgEdges holds the relations/edges for other nodes in the graph.
type UserMsgEdges struct {
	// User holds the value of the user edge.
	User *SocialUser `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserMsgEdges) UserOrErr() (*SocialUser, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: socialuser.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserMsg) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usermsg.FieldIsRead:
			values[i] = new(sql.NullBool)
		case usermsg.FieldID, usermsg.FieldUserId, usermsg.FieldMsgId, usermsg.FieldCreateBy, usermsg.FieldUpdateBy, usermsg.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case usermsg.FieldCreatedAt, usermsg.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserMsg", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserMsg fields.
func (um *UserMsg) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usermsg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			um.ID = int64(value.Int64)
		case usermsg.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				um.UserId = value.Int64
			}
		case usermsg.FieldMsgId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msgId", values[i])
			} else if value.Valid {
				um.MsgId = value.Int64
			}
		case usermsg.FieldIsRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isRead", values[i])
			} else if value.Valid {
				um.IsRead = value.Bool
			}
		case usermsg.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				um.CreatedAt = value.Time
			}
		case usermsg.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				um.UpdatedAt = value.Time
			}
		case usermsg.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				um.CreateBy = value.Int64
			}
		case usermsg.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				um.UpdateBy = value.Int64
			}
		case usermsg.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				um.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserMsg entity.
func (um *UserMsg) QueryUser() *SocialUserQuery {
	return (&UserMsgClient{config: um.config}).QueryUser(um)
}

// Update returns a builder for updating this UserMsg.
// Note that you need to call UserMsg.Unwrap() before calling this method if this UserMsg
// was returned from a transaction, and the transaction was committed or rolled back.
func (um *UserMsg) Update() *UserMsgUpdateOne {
	return (&UserMsgClient{config: um.config}).UpdateOne(um)
}

// Unwrap unwraps the UserMsg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (um *UserMsg) Unwrap() *UserMsg {
	tx, ok := um.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserMsg is not a transactional entity")
	}
	um.config.driver = tx.drv
	return um
}

// String implements the fmt.Stringer.
func (um *UserMsg) String() string {
	var builder strings.Builder
	builder.WriteString("UserMsg(")
	builder.WriteString(fmt.Sprintf("id=%v", um.ID))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", um.UserId))
	builder.WriteString(", msgId=")
	builder.WriteString(fmt.Sprintf("%v", um.MsgId))
	builder.WriteString(", isRead=")
	builder.WriteString(fmt.Sprintf("%v", um.IsRead))
	builder.WriteString(", createdAt=")
	builder.WriteString(um.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(um.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", um.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", um.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", um.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// UserMsgs is a parsable slice of UserMsg.
type UserMsgs []*UserMsg

func (um UserMsgs) config(cfg config) {
	for _i := range um {
		um[_i].config = cfg
	}
}
