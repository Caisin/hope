// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/param/internal/data/ent/viptype"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// VipType is the model entity for the VipType schema.
type VipType struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// VipName holds the value of the "vipName" field.
	// 账本名称
	VipName string `json:"vipName,omitempty"`
	// IsSuper holds the value of the "isSuper" field.
	// 是否超级vip
	IsSuper bool `json:"isSuper,omitempty"`
	// ValidDays holds the value of the "validDays" field.
	// 有效天数
	ValidDays int32 `json:"validDays,omitempty"`
	// DiscountRate holds the value of the "discountRate" field.
	// 折扣率
	DiscountRate int64 `json:"discountRate,omitempty"`
	// AvatarId holds the value of the "avatarId" field.
	// 头像ID
	AvatarId int64 `json:"avatarId,omitempty"`
	// Summary holds the value of the "summary" field.
	// 描述
	Summary string `json:"summary,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VipType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case viptype.FieldIsSuper:
			values[i] = new(sql.NullBool)
		case viptype.FieldID, viptype.FieldValidDays, viptype.FieldDiscountRate, viptype.FieldAvatarId, viptype.FieldCreateBy, viptype.FieldUpdateBy, viptype.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case viptype.FieldVipName, viptype.FieldSummary:
			values[i] = new(sql.NullString)
		case viptype.FieldCreatedAt, viptype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VipType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VipType fields.
func (vt *VipType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case viptype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vt.ID = int64(value.Int64)
		case viptype.FieldVipName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vipName", values[i])
			} else if value.Valid {
				vt.VipName = value.String
			}
		case viptype.FieldIsSuper:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isSuper", values[i])
			} else if value.Valid {
				vt.IsSuper = value.Bool
			}
		case viptype.FieldValidDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field validDays", values[i])
			} else if value.Valid {
				vt.ValidDays = int32(value.Int64)
			}
		case viptype.FieldDiscountRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discountRate", values[i])
			} else if value.Valid {
				vt.DiscountRate = value.Int64
			}
		case viptype.FieldAvatarId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field avatarId", values[i])
			} else if value.Valid {
				vt.AvatarId = value.Int64
			}
		case viptype.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				vt.Summary = value.String
			}
		case viptype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				vt.CreatedAt = value.Time
			}
		case viptype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				vt.UpdatedAt = value.Time
			}
		case viptype.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				vt.CreateBy = value.Int64
			}
		case viptype.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				vt.UpdateBy = value.Int64
			}
		case viptype.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				vt.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this VipType.
// Note that you need to call VipType.Unwrap() before calling this method if this VipType
// was returned from a transaction, and the transaction was committed or rolled back.
func (vt *VipType) Update() *VipTypeUpdateOne {
	return (&VipTypeClient{config: vt.config}).UpdateOne(vt)
}

// Unwrap unwraps the VipType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vt *VipType) Unwrap() *VipType {
	tx, ok := vt.config.driver.(*txDriver)
	if !ok {
		panic("ent: VipType is not a transactional entity")
	}
	vt.config.driver = tx.drv
	return vt
}

// String implements the fmt.Stringer.
func (vt *VipType) String() string {
	var builder strings.Builder
	builder.WriteString("VipType(")
	builder.WriteString(fmt.Sprintf("id=%v", vt.ID))
	builder.WriteString(", vipName=")
	builder.WriteString(vt.VipName)
	builder.WriteString(", isSuper=")
	builder.WriteString(fmt.Sprintf("%v", vt.IsSuper))
	builder.WriteString(", validDays=")
	builder.WriteString(fmt.Sprintf("%v", vt.ValidDays))
	builder.WriteString(", discountRate=")
	builder.WriteString(fmt.Sprintf("%v", vt.DiscountRate))
	builder.WriteString(", avatarId=")
	builder.WriteString(fmt.Sprintf("%v", vt.AvatarId))
	builder.WriteString(", summary=")
	builder.WriteString(vt.Summary)
	builder.WriteString(", createdAt=")
	builder.WriteString(vt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(vt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", vt.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", vt.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", vt.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// VipTypes is a parsable slice of VipType.
type VipTypes []*VipType

func (vt VipTypes) config(cfg config) {
	for _i := range vt {
		vt[_i].config = cfg
	}
}
