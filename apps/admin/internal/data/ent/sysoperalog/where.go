// Code generated by entc, DO NOT EDIT.

package sysoperalog

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// RequestId applies equality check predicate on the "requestId" field. It's identical to RequestIdEQ.
func RequestId(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestId), v))
	})
}

// BusinessType applies equality check predicate on the "businessType" field. It's identical to BusinessTypeEQ.
func BusinessType(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessType), v))
	})
}

// BusinessTypes applies equality check predicate on the "businessTypes" field. It's identical to BusinessTypesEQ.
func BusinessTypes(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessTypes), v))
	})
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// RequestMethod applies equality check predicate on the "requestMethod" field. It's identical to RequestMethodEQ.
func RequestMethod(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestMethod), v))
	})
}

// OperatorType applies equality check predicate on the "operatorType" field. It's identical to OperatorTypeEQ.
func OperatorType(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorType), v))
	})
}

// OperName applies equality check predicate on the "operName" field. It's identical to OperNameEQ.
func OperName(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperName), v))
	})
}

// DeptName applies equality check predicate on the "deptName" field. It's identical to DeptNameEQ.
func DeptName(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptName), v))
	})
}

// OperUrl applies equality check predicate on the "operUrl" field. It's identical to OperUrlEQ.
func OperUrl(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperUrl), v))
	})
}

// OperIp applies equality check predicate on the "operIp" field. It's identical to OperIpEQ.
func OperIp(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperIp), v))
	})
}

// Browser applies equality check predicate on the "browser" field. It's identical to BrowserEQ.
func Browser(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrowser), v))
	})
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// OperLocation applies equality check predicate on the "operLocation" field. It's identical to OperLocationEQ.
func OperLocation(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperLocation), v))
	})
}

// OperParam applies equality check predicate on the "operParam" field. It's identical to OperParamEQ.
func OperParam(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperParam), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// OperTime applies equality check predicate on the "operTime" field. It's identical to OperTimeEQ.
func OperTime(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperTime), v))
	})
}

// JsonResult applies equality check predicate on the "jsonResult" field. It's identical to JsonResultEQ.
func JsonResult(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJsonResult), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// LatencyTime applies equality check predicate on the "latencyTime" field. It's identical to LatencyTimeEQ.
func LatencyTime(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatencyTime), v))
	})
}

// UserAgent applies equality check predicate on the "userAgent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserAgent), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserId)))
	})
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserId)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// RequestIdEQ applies the EQ predicate on the "requestId" field.
func RequestIdEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestId), v))
	})
}

// RequestIdNEQ applies the NEQ predicate on the "requestId" field.
func RequestIdNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequestId), v))
	})
}

// RequestIdIn applies the In predicate on the "requestId" field.
func RequestIdIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRequestId), v...))
	})
}

// RequestIdNotIn applies the NotIn predicate on the "requestId" field.
func RequestIdNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRequestId), v...))
	})
}

// RequestIdGT applies the GT predicate on the "requestId" field.
func RequestIdGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequestId), v))
	})
}

// RequestIdGTE applies the GTE predicate on the "requestId" field.
func RequestIdGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequestId), v))
	})
}

// RequestIdLT applies the LT predicate on the "requestId" field.
func RequestIdLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequestId), v))
	})
}

// RequestIdLTE applies the LTE predicate on the "requestId" field.
func RequestIdLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequestId), v))
	})
}

// RequestIdContains applies the Contains predicate on the "requestId" field.
func RequestIdContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRequestId), v))
	})
}

// RequestIdHasPrefix applies the HasPrefix predicate on the "requestId" field.
func RequestIdHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRequestId), v))
	})
}

// RequestIdHasSuffix applies the HasSuffix predicate on the "requestId" field.
func RequestIdHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRequestId), v))
	})
}

// RequestIdIsNil applies the IsNil predicate on the "requestId" field.
func RequestIdIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequestId)))
	})
}

// RequestIdNotNil applies the NotNil predicate on the "requestId" field.
func RequestIdNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequestId)))
	})
}

// RequestIdEqualFold applies the EqualFold predicate on the "requestId" field.
func RequestIdEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRequestId), v))
	})
}

// RequestIdContainsFold applies the ContainsFold predicate on the "requestId" field.
func RequestIdContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRequestId), v))
	})
}

// BusinessTypeEQ applies the EQ predicate on the "businessType" field.
func BusinessTypeEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeNEQ applies the NEQ predicate on the "businessType" field.
func BusinessTypeNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeIn applies the In predicate on the "businessType" field.
func BusinessTypeIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBusinessType), v...))
	})
}

// BusinessTypeNotIn applies the NotIn predicate on the "businessType" field.
func BusinessTypeNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBusinessType), v...))
	})
}

// BusinessTypeGT applies the GT predicate on the "businessType" field.
func BusinessTypeGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeGTE applies the GTE predicate on the "businessType" field.
func BusinessTypeGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeLT applies the LT predicate on the "businessType" field.
func BusinessTypeLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeLTE applies the LTE predicate on the "businessType" field.
func BusinessTypeLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeContains applies the Contains predicate on the "businessType" field.
func BusinessTypeContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeHasPrefix applies the HasPrefix predicate on the "businessType" field.
func BusinessTypeHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeHasSuffix applies the HasSuffix predicate on the "businessType" field.
func BusinessTypeHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeIsNil applies the IsNil predicate on the "businessType" field.
func BusinessTypeIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBusinessType)))
	})
}

// BusinessTypeNotNil applies the NotNil predicate on the "businessType" field.
func BusinessTypeNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBusinessType)))
	})
}

// BusinessTypeEqualFold applies the EqualFold predicate on the "businessType" field.
func BusinessTypeEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBusinessType), v))
	})
}

// BusinessTypeContainsFold applies the ContainsFold predicate on the "businessType" field.
func BusinessTypeContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBusinessType), v))
	})
}

// BusinessTypesEQ applies the EQ predicate on the "businessTypes" field.
func BusinessTypesEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesNEQ applies the NEQ predicate on the "businessTypes" field.
func BusinessTypesNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesIn applies the In predicate on the "businessTypes" field.
func BusinessTypesIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBusinessTypes), v...))
	})
}

// BusinessTypesNotIn applies the NotIn predicate on the "businessTypes" field.
func BusinessTypesNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBusinessTypes), v...))
	})
}

// BusinessTypesGT applies the GT predicate on the "businessTypes" field.
func BusinessTypesGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesGTE applies the GTE predicate on the "businessTypes" field.
func BusinessTypesGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesLT applies the LT predicate on the "businessTypes" field.
func BusinessTypesLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesLTE applies the LTE predicate on the "businessTypes" field.
func BusinessTypesLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesContains applies the Contains predicate on the "businessTypes" field.
func BusinessTypesContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesHasPrefix applies the HasPrefix predicate on the "businessTypes" field.
func BusinessTypesHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesHasSuffix applies the HasSuffix predicate on the "businessTypes" field.
func BusinessTypesHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesIsNil applies the IsNil predicate on the "businessTypes" field.
func BusinessTypesIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBusinessTypes)))
	})
}

// BusinessTypesNotNil applies the NotNil predicate on the "businessTypes" field.
func BusinessTypesNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBusinessTypes)))
	})
}

// BusinessTypesEqualFold applies the EqualFold predicate on the "businessTypes" field.
func BusinessTypesEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBusinessTypes), v))
	})
}

// BusinessTypesContainsFold applies the ContainsFold predicate on the "businessTypes" field.
func BusinessTypesContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBusinessTypes), v))
	})
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethod), v))
	})
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMethod), v...))
	})
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMethod), v...))
	})
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMethod), v))
	})
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMethod), v))
	})
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMethod), v))
	})
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMethod), v))
	})
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMethod), v))
	})
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMethod), v))
	})
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMethod), v))
	})
}

// MethodIsNil applies the IsNil predicate on the "method" field.
func MethodIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMethod)))
	})
}

// MethodNotNil applies the NotNil predicate on the "method" field.
func MethodNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMethod)))
	})
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMethod), v))
	})
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMethod), v))
	})
}

// RequestMethodEQ applies the EQ predicate on the "requestMethod" field.
func RequestMethodEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodNEQ applies the NEQ predicate on the "requestMethod" field.
func RequestMethodNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodIn applies the In predicate on the "requestMethod" field.
func RequestMethodIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRequestMethod), v...))
	})
}

// RequestMethodNotIn applies the NotIn predicate on the "requestMethod" field.
func RequestMethodNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRequestMethod), v...))
	})
}

// RequestMethodGT applies the GT predicate on the "requestMethod" field.
func RequestMethodGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodGTE applies the GTE predicate on the "requestMethod" field.
func RequestMethodGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodLT applies the LT predicate on the "requestMethod" field.
func RequestMethodLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodLTE applies the LTE predicate on the "requestMethod" field.
func RequestMethodLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodContains applies the Contains predicate on the "requestMethod" field.
func RequestMethodContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodHasPrefix applies the HasPrefix predicate on the "requestMethod" field.
func RequestMethodHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodHasSuffix applies the HasSuffix predicate on the "requestMethod" field.
func RequestMethodHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodIsNil applies the IsNil predicate on the "requestMethod" field.
func RequestMethodIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequestMethod)))
	})
}

// RequestMethodNotNil applies the NotNil predicate on the "requestMethod" field.
func RequestMethodNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequestMethod)))
	})
}

// RequestMethodEqualFold applies the EqualFold predicate on the "requestMethod" field.
func RequestMethodEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRequestMethod), v))
	})
}

// RequestMethodContainsFold applies the ContainsFold predicate on the "requestMethod" field.
func RequestMethodContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRequestMethod), v))
	})
}

// OperatorTypeEQ applies the EQ predicate on the "operatorType" field.
func OperatorTypeEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeNEQ applies the NEQ predicate on the "operatorType" field.
func OperatorTypeNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeIn applies the In predicate on the "operatorType" field.
func OperatorTypeIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperatorType), v...))
	})
}

// OperatorTypeNotIn applies the NotIn predicate on the "operatorType" field.
func OperatorTypeNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperatorType), v...))
	})
}

// OperatorTypeGT applies the GT predicate on the "operatorType" field.
func OperatorTypeGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeGTE applies the GTE predicate on the "operatorType" field.
func OperatorTypeGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeLT applies the LT predicate on the "operatorType" field.
func OperatorTypeLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeLTE applies the LTE predicate on the "operatorType" field.
func OperatorTypeLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeContains applies the Contains predicate on the "operatorType" field.
func OperatorTypeContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeHasPrefix applies the HasPrefix predicate on the "operatorType" field.
func OperatorTypeHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeHasSuffix applies the HasSuffix predicate on the "operatorType" field.
func OperatorTypeHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeIsNil applies the IsNil predicate on the "operatorType" field.
func OperatorTypeIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperatorType)))
	})
}

// OperatorTypeNotNil applies the NotNil predicate on the "operatorType" field.
func OperatorTypeNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperatorType)))
	})
}

// OperatorTypeEqualFold applies the EqualFold predicate on the "operatorType" field.
func OperatorTypeEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperatorType), v))
	})
}

// OperatorTypeContainsFold applies the ContainsFold predicate on the "operatorType" field.
func OperatorTypeContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperatorType), v))
	})
}

// OperNameEQ applies the EQ predicate on the "operName" field.
func OperNameEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperName), v))
	})
}

// OperNameNEQ applies the NEQ predicate on the "operName" field.
func OperNameNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperName), v))
	})
}

// OperNameIn applies the In predicate on the "operName" field.
func OperNameIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperName), v...))
	})
}

// OperNameNotIn applies the NotIn predicate on the "operName" field.
func OperNameNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperName), v...))
	})
}

// OperNameGT applies the GT predicate on the "operName" field.
func OperNameGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperName), v))
	})
}

// OperNameGTE applies the GTE predicate on the "operName" field.
func OperNameGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperName), v))
	})
}

// OperNameLT applies the LT predicate on the "operName" field.
func OperNameLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperName), v))
	})
}

// OperNameLTE applies the LTE predicate on the "operName" field.
func OperNameLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperName), v))
	})
}

// OperNameContains applies the Contains predicate on the "operName" field.
func OperNameContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperName), v))
	})
}

// OperNameHasPrefix applies the HasPrefix predicate on the "operName" field.
func OperNameHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperName), v))
	})
}

// OperNameHasSuffix applies the HasSuffix predicate on the "operName" field.
func OperNameHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperName), v))
	})
}

// OperNameIsNil applies the IsNil predicate on the "operName" field.
func OperNameIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperName)))
	})
}

// OperNameNotNil applies the NotNil predicate on the "operName" field.
func OperNameNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperName)))
	})
}

// OperNameEqualFold applies the EqualFold predicate on the "operName" field.
func OperNameEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperName), v))
	})
}

// OperNameContainsFold applies the ContainsFold predicate on the "operName" field.
func OperNameContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperName), v))
	})
}

// DeptNameEQ applies the EQ predicate on the "deptName" field.
func DeptNameEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeptName), v))
	})
}

// DeptNameNEQ applies the NEQ predicate on the "deptName" field.
func DeptNameNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeptName), v))
	})
}

// DeptNameIn applies the In predicate on the "deptName" field.
func DeptNameIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeptName), v...))
	})
}

// DeptNameNotIn applies the NotIn predicate on the "deptName" field.
func DeptNameNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeptName), v...))
	})
}

// DeptNameGT applies the GT predicate on the "deptName" field.
func DeptNameGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeptName), v))
	})
}

// DeptNameGTE applies the GTE predicate on the "deptName" field.
func DeptNameGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeptName), v))
	})
}

// DeptNameLT applies the LT predicate on the "deptName" field.
func DeptNameLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeptName), v))
	})
}

// DeptNameLTE applies the LTE predicate on the "deptName" field.
func DeptNameLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeptName), v))
	})
}

// DeptNameContains applies the Contains predicate on the "deptName" field.
func DeptNameContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeptName), v))
	})
}

// DeptNameHasPrefix applies the HasPrefix predicate on the "deptName" field.
func DeptNameHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeptName), v))
	})
}

// DeptNameHasSuffix applies the HasSuffix predicate on the "deptName" field.
func DeptNameHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeptName), v))
	})
}

// DeptNameIsNil applies the IsNil predicate on the "deptName" field.
func DeptNameIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeptName)))
	})
}

// DeptNameNotNil applies the NotNil predicate on the "deptName" field.
func DeptNameNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeptName)))
	})
}

// DeptNameEqualFold applies the EqualFold predicate on the "deptName" field.
func DeptNameEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeptName), v))
	})
}

// DeptNameContainsFold applies the ContainsFold predicate on the "deptName" field.
func DeptNameContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeptName), v))
	})
}

// OperUrlEQ applies the EQ predicate on the "operUrl" field.
func OperUrlEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperUrl), v))
	})
}

// OperUrlNEQ applies the NEQ predicate on the "operUrl" field.
func OperUrlNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperUrl), v))
	})
}

// OperUrlIn applies the In predicate on the "operUrl" field.
func OperUrlIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperUrl), v...))
	})
}

// OperUrlNotIn applies the NotIn predicate on the "operUrl" field.
func OperUrlNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperUrl), v...))
	})
}

// OperUrlGT applies the GT predicate on the "operUrl" field.
func OperUrlGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperUrl), v))
	})
}

// OperUrlGTE applies the GTE predicate on the "operUrl" field.
func OperUrlGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperUrl), v))
	})
}

// OperUrlLT applies the LT predicate on the "operUrl" field.
func OperUrlLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperUrl), v))
	})
}

// OperUrlLTE applies the LTE predicate on the "operUrl" field.
func OperUrlLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperUrl), v))
	})
}

// OperUrlContains applies the Contains predicate on the "operUrl" field.
func OperUrlContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperUrl), v))
	})
}

// OperUrlHasPrefix applies the HasPrefix predicate on the "operUrl" field.
func OperUrlHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperUrl), v))
	})
}

// OperUrlHasSuffix applies the HasSuffix predicate on the "operUrl" field.
func OperUrlHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperUrl), v))
	})
}

// OperUrlIsNil applies the IsNil predicate on the "operUrl" field.
func OperUrlIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperUrl)))
	})
}

// OperUrlNotNil applies the NotNil predicate on the "operUrl" field.
func OperUrlNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperUrl)))
	})
}

// OperUrlEqualFold applies the EqualFold predicate on the "operUrl" field.
func OperUrlEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperUrl), v))
	})
}

// OperUrlContainsFold applies the ContainsFold predicate on the "operUrl" field.
func OperUrlContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperUrl), v))
	})
}

// OperIpEQ applies the EQ predicate on the "operIp" field.
func OperIpEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperIp), v))
	})
}

// OperIpNEQ applies the NEQ predicate on the "operIp" field.
func OperIpNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperIp), v))
	})
}

// OperIpIn applies the In predicate on the "operIp" field.
func OperIpIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperIp), v...))
	})
}

// OperIpNotIn applies the NotIn predicate on the "operIp" field.
func OperIpNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperIp), v...))
	})
}

// OperIpGT applies the GT predicate on the "operIp" field.
func OperIpGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperIp), v))
	})
}

// OperIpGTE applies the GTE predicate on the "operIp" field.
func OperIpGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperIp), v))
	})
}

// OperIpLT applies the LT predicate on the "operIp" field.
func OperIpLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperIp), v))
	})
}

// OperIpLTE applies the LTE predicate on the "operIp" field.
func OperIpLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperIp), v))
	})
}

// OperIpContains applies the Contains predicate on the "operIp" field.
func OperIpContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperIp), v))
	})
}

// OperIpHasPrefix applies the HasPrefix predicate on the "operIp" field.
func OperIpHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperIp), v))
	})
}

// OperIpHasSuffix applies the HasSuffix predicate on the "operIp" field.
func OperIpHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperIp), v))
	})
}

// OperIpIsNil applies the IsNil predicate on the "operIp" field.
func OperIpIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperIp)))
	})
}

// OperIpNotNil applies the NotNil predicate on the "operIp" field.
func OperIpNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperIp)))
	})
}

// OperIpEqualFold applies the EqualFold predicate on the "operIp" field.
func OperIpEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperIp), v))
	})
}

// OperIpContainsFold applies the ContainsFold predicate on the "operIp" field.
func OperIpContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperIp), v))
	})
}

// BrowserEQ applies the EQ predicate on the "browser" field.
func BrowserEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrowser), v))
	})
}

// BrowserNEQ applies the NEQ predicate on the "browser" field.
func BrowserNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrowser), v))
	})
}

// BrowserIn applies the In predicate on the "browser" field.
func BrowserIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBrowser), v...))
	})
}

// BrowserNotIn applies the NotIn predicate on the "browser" field.
func BrowserNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBrowser), v...))
	})
}

// BrowserGT applies the GT predicate on the "browser" field.
func BrowserGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrowser), v))
	})
}

// BrowserGTE applies the GTE predicate on the "browser" field.
func BrowserGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrowser), v))
	})
}

// BrowserLT applies the LT predicate on the "browser" field.
func BrowserLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrowser), v))
	})
}

// BrowserLTE applies the LTE predicate on the "browser" field.
func BrowserLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrowser), v))
	})
}

// BrowserContains applies the Contains predicate on the "browser" field.
func BrowserContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBrowser), v))
	})
}

// BrowserHasPrefix applies the HasPrefix predicate on the "browser" field.
func BrowserHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBrowser), v))
	})
}

// BrowserHasSuffix applies the HasSuffix predicate on the "browser" field.
func BrowserHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBrowser), v))
	})
}

// BrowserIsNil applies the IsNil predicate on the "browser" field.
func BrowserIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBrowser)))
	})
}

// BrowserNotNil applies the NotNil predicate on the "browser" field.
func BrowserNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBrowser)))
	})
}

// BrowserEqualFold applies the EqualFold predicate on the "browser" field.
func BrowserEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBrowser), v))
	})
}

// BrowserContainsFold applies the ContainsFold predicate on the "browser" field.
func BrowserContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBrowser), v))
	})
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOs), v))
	})
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOs), v))
	})
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOs), v...))
	})
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOs), v...))
	})
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOs), v))
	})
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOs), v))
	})
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOs), v))
	})
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOs), v))
	})
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOs), v))
	})
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOs), v))
	})
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOs), v))
	})
}

// OsIsNil applies the IsNil predicate on the "os" field.
func OsIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOs)))
	})
}

// OsNotNil applies the NotNil predicate on the "os" field.
func OsNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOs)))
	})
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOs), v))
	})
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOs), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlatform), v...))
	})
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlatform), v...))
	})
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlatform), v))
	})
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlatform), v))
	})
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlatform), v))
	})
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlatform), v))
	})
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlatform), v))
	})
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlatform), v))
	})
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlatform), v))
	})
}

// PlatformIsNil applies the IsNil predicate on the "platform" field.
func PlatformIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlatform)))
	})
}

// PlatformNotNil applies the NotNil predicate on the "platform" field.
func PlatformNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlatform)))
	})
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlatform), v))
	})
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlatform), v))
	})
}

// OperLocationEQ applies the EQ predicate on the "operLocation" field.
func OperLocationEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperLocation), v))
	})
}

// OperLocationNEQ applies the NEQ predicate on the "operLocation" field.
func OperLocationNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperLocation), v))
	})
}

// OperLocationIn applies the In predicate on the "operLocation" field.
func OperLocationIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperLocation), v...))
	})
}

// OperLocationNotIn applies the NotIn predicate on the "operLocation" field.
func OperLocationNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperLocation), v...))
	})
}

// OperLocationGT applies the GT predicate on the "operLocation" field.
func OperLocationGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperLocation), v))
	})
}

// OperLocationGTE applies the GTE predicate on the "operLocation" field.
func OperLocationGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperLocation), v))
	})
}

// OperLocationLT applies the LT predicate on the "operLocation" field.
func OperLocationLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperLocation), v))
	})
}

// OperLocationLTE applies the LTE predicate on the "operLocation" field.
func OperLocationLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperLocation), v))
	})
}

// OperLocationContains applies the Contains predicate on the "operLocation" field.
func OperLocationContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperLocation), v))
	})
}

// OperLocationHasPrefix applies the HasPrefix predicate on the "operLocation" field.
func OperLocationHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperLocation), v))
	})
}

// OperLocationHasSuffix applies the HasSuffix predicate on the "operLocation" field.
func OperLocationHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperLocation), v))
	})
}

// OperLocationIsNil applies the IsNil predicate on the "operLocation" field.
func OperLocationIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperLocation)))
	})
}

// OperLocationNotNil applies the NotNil predicate on the "operLocation" field.
func OperLocationNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperLocation)))
	})
}

// OperLocationEqualFold applies the EqualFold predicate on the "operLocation" field.
func OperLocationEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperLocation), v))
	})
}

// OperLocationContainsFold applies the ContainsFold predicate on the "operLocation" field.
func OperLocationContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperLocation), v))
	})
}

// OperParamEQ applies the EQ predicate on the "operParam" field.
func OperParamEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperParam), v))
	})
}

// OperParamNEQ applies the NEQ predicate on the "operParam" field.
func OperParamNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperParam), v))
	})
}

// OperParamIn applies the In predicate on the "operParam" field.
func OperParamIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperParam), v...))
	})
}

// OperParamNotIn applies the NotIn predicate on the "operParam" field.
func OperParamNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperParam), v...))
	})
}

// OperParamGT applies the GT predicate on the "operParam" field.
func OperParamGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperParam), v))
	})
}

// OperParamGTE applies the GTE predicate on the "operParam" field.
func OperParamGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperParam), v))
	})
}

// OperParamLT applies the LT predicate on the "operParam" field.
func OperParamLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperParam), v))
	})
}

// OperParamLTE applies the LTE predicate on the "operParam" field.
func OperParamLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperParam), v))
	})
}

// OperParamContains applies the Contains predicate on the "operParam" field.
func OperParamContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperParam), v))
	})
}

// OperParamHasPrefix applies the HasPrefix predicate on the "operParam" field.
func OperParamHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperParam), v))
	})
}

// OperParamHasSuffix applies the HasSuffix predicate on the "operParam" field.
func OperParamHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperParam), v))
	})
}

// OperParamIsNil applies the IsNil predicate on the "operParam" field.
func OperParamIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperParam)))
	})
}

// OperParamNotNil applies the NotNil predicate on the "operParam" field.
func OperParamNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperParam)))
	})
}

// OperParamEqualFold applies the EqualFold predicate on the "operParam" field.
func OperParamEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperParam), v))
	})
}

// OperParamContainsFold applies the ContainsFold predicate on the "operParam" field.
func OperParamContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperParam), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// OperTimeEQ applies the EQ predicate on the "operTime" field.
func OperTimeEQ(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperTime), v))
	})
}

// OperTimeNEQ applies the NEQ predicate on the "operTime" field.
func OperTimeNEQ(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperTime), v))
	})
}

// OperTimeIn applies the In predicate on the "operTime" field.
func OperTimeIn(vs ...time.Time) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperTime), v...))
	})
}

// OperTimeNotIn applies the NotIn predicate on the "operTime" field.
func OperTimeNotIn(vs ...time.Time) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperTime), v...))
	})
}

// OperTimeGT applies the GT predicate on the "operTime" field.
func OperTimeGT(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperTime), v))
	})
}

// OperTimeGTE applies the GTE predicate on the "operTime" field.
func OperTimeGTE(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperTime), v))
	})
}

// OperTimeLT applies the LT predicate on the "operTime" field.
func OperTimeLT(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperTime), v))
	})
}

// OperTimeLTE applies the LTE predicate on the "operTime" field.
func OperTimeLTE(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperTime), v))
	})
}

// OperTimeIsNil applies the IsNil predicate on the "operTime" field.
func OperTimeIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperTime)))
	})
}

// OperTimeNotNil applies the NotNil predicate on the "operTime" field.
func OperTimeNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperTime)))
	})
}

// JsonResultEQ applies the EQ predicate on the "jsonResult" field.
func JsonResultEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJsonResult), v))
	})
}

// JsonResultNEQ applies the NEQ predicate on the "jsonResult" field.
func JsonResultNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJsonResult), v))
	})
}

// JsonResultIn applies the In predicate on the "jsonResult" field.
func JsonResultIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJsonResult), v...))
	})
}

// JsonResultNotIn applies the NotIn predicate on the "jsonResult" field.
func JsonResultNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJsonResult), v...))
	})
}

// JsonResultGT applies the GT predicate on the "jsonResult" field.
func JsonResultGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJsonResult), v))
	})
}

// JsonResultGTE applies the GTE predicate on the "jsonResult" field.
func JsonResultGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJsonResult), v))
	})
}

// JsonResultLT applies the LT predicate on the "jsonResult" field.
func JsonResultLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJsonResult), v))
	})
}

// JsonResultLTE applies the LTE predicate on the "jsonResult" field.
func JsonResultLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJsonResult), v))
	})
}

// JsonResultContains applies the Contains predicate on the "jsonResult" field.
func JsonResultContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJsonResult), v))
	})
}

// JsonResultHasPrefix applies the HasPrefix predicate on the "jsonResult" field.
func JsonResultHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJsonResult), v))
	})
}

// JsonResultHasSuffix applies the HasSuffix predicate on the "jsonResult" field.
func JsonResultHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJsonResult), v))
	})
}

// JsonResultIsNil applies the IsNil predicate on the "jsonResult" field.
func JsonResultIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJsonResult)))
	})
}

// JsonResultNotNil applies the NotNil predicate on the "jsonResult" field.
func JsonResultNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJsonResult)))
	})
}

// JsonResultEqualFold applies the EqualFold predicate on the "jsonResult" field.
func JsonResultEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJsonResult), v))
	})
}

// JsonResultContainsFold applies the ContainsFold predicate on the "jsonResult" field.
func JsonResultContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJsonResult), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// LatencyTimeEQ applies the EQ predicate on the "latencyTime" field.
func LatencyTimeEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeNEQ applies the NEQ predicate on the "latencyTime" field.
func LatencyTimeNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeIn applies the In predicate on the "latencyTime" field.
func LatencyTimeIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLatencyTime), v...))
	})
}

// LatencyTimeNotIn applies the NotIn predicate on the "latencyTime" field.
func LatencyTimeNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLatencyTime), v...))
	})
}

// LatencyTimeGT applies the GT predicate on the "latencyTime" field.
func LatencyTimeGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeGTE applies the GTE predicate on the "latencyTime" field.
func LatencyTimeGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeLT applies the LT predicate on the "latencyTime" field.
func LatencyTimeLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeLTE applies the LTE predicate on the "latencyTime" field.
func LatencyTimeLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeContains applies the Contains predicate on the "latencyTime" field.
func LatencyTimeContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeHasPrefix applies the HasPrefix predicate on the "latencyTime" field.
func LatencyTimeHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeHasSuffix applies the HasSuffix predicate on the "latencyTime" field.
func LatencyTimeHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeIsNil applies the IsNil predicate on the "latencyTime" field.
func LatencyTimeIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLatencyTime)))
	})
}

// LatencyTimeNotNil applies the NotNil predicate on the "latencyTime" field.
func LatencyTimeNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLatencyTime)))
	})
}

// LatencyTimeEqualFold applies the EqualFold predicate on the "latencyTime" field.
func LatencyTimeEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLatencyTime), v))
	})
}

// LatencyTimeContainsFold applies the ContainsFold predicate on the "latencyTime" field.
func LatencyTimeContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLatencyTime), v))
	})
}

// UserAgentEQ applies the EQ predicate on the "userAgent" field.
func UserAgentEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserAgent), v))
	})
}

// UserAgentNEQ applies the NEQ predicate on the "userAgent" field.
func UserAgentNEQ(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserAgent), v))
	})
}

// UserAgentIn applies the In predicate on the "userAgent" field.
func UserAgentIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserAgent), v...))
	})
}

// UserAgentNotIn applies the NotIn predicate on the "userAgent" field.
func UserAgentNotIn(vs ...string) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserAgent), v...))
	})
}

// UserAgentGT applies the GT predicate on the "userAgent" field.
func UserAgentGT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserAgent), v))
	})
}

// UserAgentGTE applies the GTE predicate on the "userAgent" field.
func UserAgentGTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserAgent), v))
	})
}

// UserAgentLT applies the LT predicate on the "userAgent" field.
func UserAgentLT(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserAgent), v))
	})
}

// UserAgentLTE applies the LTE predicate on the "userAgent" field.
func UserAgentLTE(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserAgent), v))
	})
}

// UserAgentContains applies the Contains predicate on the "userAgent" field.
func UserAgentContains(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserAgent), v))
	})
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "userAgent" field.
func UserAgentHasPrefix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserAgent), v))
	})
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "userAgent" field.
func UserAgentHasSuffix(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserAgent), v))
	})
}

// UserAgentIsNil applies the IsNil predicate on the "userAgent" field.
func UserAgentIsNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserAgent)))
	})
}

// UserAgentNotNil applies the NotNil predicate on the "userAgent" field.
func UserAgentNotNil() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserAgent)))
	})
}

// UserAgentEqualFold applies the EqualFold predicate on the "userAgent" field.
func UserAgentEqualFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserAgent), v))
	})
}

// UserAgentContainsFold applies the ContainsFold predicate on the "userAgent" field.
func UserAgentContainsFold(v string) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserAgent), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysOperaLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysOperaLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.SysUser) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysOperaLog) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysOperaLog) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysOperaLog) predicate.SysOperaLog {
	return predicate.SysOperaLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
