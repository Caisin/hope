// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/param/useranalysisstatistics/v1/user_analysis_statistics.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type UserAnalysisStatisticsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//统计日期
	StatisticsDate string `protobuf:"bytes,2,opt,name=statisticsDate,proto3" json:"statisticsDate,omitempty"`
	//累计注册
	AllUserNum int64 `protobuf:"varint,3,opt,name=allUserNum,proto3" json:"allUserNum,omitempty"`
	//累计充值
	AllPayment int64 `protobuf:"varint,4,opt,name=allPayment,proto3" json:"allPayment,omitempty"`
	//总充值人数
	AllPayUser int64 `protobuf:"varint,5,opt,name=allPayUser,proto3" json:"allPayUser,omitempty"`
	//总订单数
	AllOrderNum int64 `protobuf:"varint,6,opt,name=allOrderNum,proto3" json:"allOrderNum,omitempty"`
	//当日注册人数
	DayUserNum int64 `protobuf:"varint,7,opt,name=dayUserNum,proto3" json:"dayUserNum,omitempty"`
	//当日订单金额
	DayPayment int64 `protobuf:"varint,8,opt,name=dayPayment,proto3" json:"dayPayment,omitempty"`
	//当日订单数
	DayOrderNum int64 `protobuf:"varint,9,opt,name=dayOrderNum,proto3" json:"dayOrderNum,omitempty"`
	//当日充值人数
	DayPayUser int64 `protobuf:"varint,10,opt,name=dayPayUser,proto3" json:"dayPayUser,omitempty"`
	//当日注册充值
	DayRegPayment int64 `protobuf:"varint,11,opt,name=dayRegPayment,proto3" json:"dayRegPayment,omitempty"`
	//当日注册充值人数
	DayRegUserNum int64 `protobuf:"varint,12,opt,name=dayRegUserNum,proto3" json:"dayRegUserNum,omitempty"`
	//当日注册充值笔数
	DayRegOrderNum int64 `protobuf:"varint,13,opt,name=dayRegOrderNum,proto3" json:"dayRegOrderNum,omitempty"`
	//当日老用户充值
	OldRegPayment int64 `protobuf:"varint,14,opt,name=oldRegPayment,proto3" json:"oldRegPayment,omitempty"`
	//当日老用户充值人数
	OldRegUserNum int64 `protobuf:"varint,15,opt,name=oldRegUserNum,proto3" json:"oldRegUserNum,omitempty"`
	//当日老用户充值笔数
	OldRegOrderNum int64 `protobuf:"varint,16,opt,name=oldRegOrderNum,proto3" json:"oldRegOrderNum,omitempty"`
	//付费率=当日充值笔数/当日注册
	PayRate int64 `protobuf:"varint,17,opt,name=payRate,proto3" json:"payRate,omitempty"`
	//ARPU(average revenue per user)=充值/注册
	Arpu int64 `protobuf:"varint,18,opt,name=arpu,proto3" json:"arpu,omitempty"`
	//当日注册充值客单价=当日注册充值/当日注册充值笔数
	DayRegArpu int64 `protobuf:"varint,19,opt,name=dayRegArpu,proto3" json:"dayRegArpu,omitempty"`
	//今日充值客单价=今日充值金额/充值笔数
	DayArpu int64 `protobuf:"varint,20,opt,name=dayArpu,proto3" json:"dayArpu,omitempty"`
	//老用户充值客单价=老用户充值/老用户充值笔数
	DayOldArpu int64 `protobuf:"varint,21,opt,name=dayOldArpu,proto3" json:"dayOldArpu,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,24,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,25,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,26,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *UserAnalysisStatisticsData) Reset() {
	*x = UserAnalysisStatisticsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsData) ProtoMessage() {}

func (x *UserAnalysisStatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsData.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsData) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{0}
}

func (x *UserAnalysisStatisticsData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetStatisticsDate() string {
	if x != nil {
		return x.StatisticsDate
	}
	return ""
}

func (x *UserAnalysisStatisticsData) GetAllUserNum() int64 {
	if x != nil {
		return x.AllUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetAllPayment() int64 {
	if x != nil {
		return x.AllPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetAllPayUser() int64 {
	if x != nil {
		return x.AllPayUser
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetAllOrderNum() int64 {
	if x != nil {
		return x.AllOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayUserNum() int64 {
	if x != nil {
		return x.DayUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayPayment() int64 {
	if x != nil {
		return x.DayPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayOrderNum() int64 {
	if x != nil {
		return x.DayOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayPayUser() int64 {
	if x != nil {
		return x.DayPayUser
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayRegPayment() int64 {
	if x != nil {
		return x.DayRegPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayRegUserNum() int64 {
	if x != nil {
		return x.DayRegUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayRegOrderNum() int64 {
	if x != nil {
		return x.DayRegOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetOldRegPayment() int64 {
	if x != nil {
		return x.OldRegPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetOldRegUserNum() int64 {
	if x != nil {
		return x.OldRegUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetOldRegOrderNum() int64 {
	if x != nil {
		return x.OldRegOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetPayRate() int64 {
	if x != nil {
		return x.PayRate
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetArpu() int64 {
	if x != nil {
		return x.Arpu
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayRegArpu() int64 {
	if x != nil {
		return x.DayRegArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayArpu() int64 {
	if x != nil {
		return x.DayArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetDayOldArpu() int64 {
	if x != nil {
		return x.DayOldArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserAnalysisStatisticsData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UserAnalysisStatisticsData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *UserAnalysisStatisticsData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type UserAnalysisStatisticsPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *UserAnalysisStatisticsReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *UserAnalysisStatisticsPageReq) Reset() {
	*x = UserAnalysisStatisticsPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsPageReq) ProtoMessage() {}

func (x *UserAnalysisStatisticsPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsPageReq.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsPageReq) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{1}
}

func (x *UserAnalysisStatisticsPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *UserAnalysisStatisticsPageReq) GetParam() *UserAnalysisStatisticsReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type UserAnalysisStatisticsPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*UserAnalysisStatisticsData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *UserAnalysisStatisticsPageReply) Reset() {
	*x = UserAnalysisStatisticsPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsPageReply) ProtoMessage() {}

func (x *UserAnalysisStatisticsPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsPageReply.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsPageReply) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{2}
}

func (x *UserAnalysisStatisticsPageReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAnalysisStatisticsPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserAnalysisStatisticsPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserAnalysisStatisticsPageReply) GetItems() []*UserAnalysisStatisticsData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type UserAnalysisStatisticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//统计日期
	StatisticsDate string `protobuf:"bytes,2,opt,name=statisticsDate,proto3" json:"statisticsDate,omitempty"`
	//累计注册
	AllUserNum int64 `protobuf:"varint,3,opt,name=allUserNum,proto3" json:"allUserNum,omitempty"`
	//累计充值
	AllPayment int64 `protobuf:"varint,4,opt,name=allPayment,proto3" json:"allPayment,omitempty"`
	//总充值人数
	AllPayUser int64 `protobuf:"varint,5,opt,name=allPayUser,proto3" json:"allPayUser,omitempty"`
	//总订单数
	AllOrderNum int64 `protobuf:"varint,6,opt,name=allOrderNum,proto3" json:"allOrderNum,omitempty"`
	//当日注册人数
	DayUserNum int64 `protobuf:"varint,7,opt,name=dayUserNum,proto3" json:"dayUserNum,omitempty"`
	//当日订单金额
	DayPayment int64 `protobuf:"varint,8,opt,name=dayPayment,proto3" json:"dayPayment,omitempty"`
	//当日订单数
	DayOrderNum int64 `protobuf:"varint,9,opt,name=dayOrderNum,proto3" json:"dayOrderNum,omitempty"`
	//当日充值人数
	DayPayUser int64 `protobuf:"varint,10,opt,name=dayPayUser,proto3" json:"dayPayUser,omitempty"`
	//当日注册充值
	DayRegPayment int64 `protobuf:"varint,11,opt,name=dayRegPayment,proto3" json:"dayRegPayment,omitempty"`
	//当日注册充值人数
	DayRegUserNum int64 `protobuf:"varint,12,opt,name=dayRegUserNum,proto3" json:"dayRegUserNum,omitempty"`
	//当日注册充值笔数
	DayRegOrderNum int64 `protobuf:"varint,13,opt,name=dayRegOrderNum,proto3" json:"dayRegOrderNum,omitempty"`
	//当日老用户充值
	OldRegPayment int64 `protobuf:"varint,14,opt,name=oldRegPayment,proto3" json:"oldRegPayment,omitempty"`
	//当日老用户充值人数
	OldRegUserNum int64 `protobuf:"varint,15,opt,name=oldRegUserNum,proto3" json:"oldRegUserNum,omitempty"`
	//当日老用户充值笔数
	OldRegOrderNum int64 `protobuf:"varint,16,opt,name=oldRegOrderNum,proto3" json:"oldRegOrderNum,omitempty"`
	//付费率=当日充值笔数/当日注册
	PayRate int64 `protobuf:"varint,17,opt,name=payRate,proto3" json:"payRate,omitempty"`
	//ARPU(average revenue per user)=充值/注册
	Arpu int64 `protobuf:"varint,18,opt,name=arpu,proto3" json:"arpu,omitempty"`
	//当日注册充值客单价=当日注册充值/当日注册充值笔数
	DayRegArpu int64 `protobuf:"varint,19,opt,name=dayRegArpu,proto3" json:"dayRegArpu,omitempty"`
	//今日充值客单价=今日充值金额/充值笔数
	DayArpu int64 `protobuf:"varint,20,opt,name=dayArpu,proto3" json:"dayArpu,omitempty"`
	//老用户充值客单价=老用户充值/老用户充值笔数
	DayOldArpu int64 `protobuf:"varint,21,opt,name=dayOldArpu,proto3" json:"dayOldArpu,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,24,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,25,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,26,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *UserAnalysisStatisticsReq) Reset() {
	*x = UserAnalysisStatisticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsReq) ProtoMessage() {}

func (x *UserAnalysisStatisticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsReq.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsReq) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{3}
}

func (x *UserAnalysisStatisticsReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetStatisticsDate() string {
	if x != nil {
		return x.StatisticsDate
	}
	return ""
}

func (x *UserAnalysisStatisticsReq) GetAllUserNum() int64 {
	if x != nil {
		return x.AllUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetAllPayment() int64 {
	if x != nil {
		return x.AllPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetAllPayUser() int64 {
	if x != nil {
		return x.AllPayUser
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetAllOrderNum() int64 {
	if x != nil {
		return x.AllOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayUserNum() int64 {
	if x != nil {
		return x.DayUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayPayment() int64 {
	if x != nil {
		return x.DayPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayOrderNum() int64 {
	if x != nil {
		return x.DayOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayPayUser() int64 {
	if x != nil {
		return x.DayPayUser
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayRegPayment() int64 {
	if x != nil {
		return x.DayRegPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayRegUserNum() int64 {
	if x != nil {
		return x.DayRegUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayRegOrderNum() int64 {
	if x != nil {
		return x.DayRegOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetOldRegPayment() int64 {
	if x != nil {
		return x.OldRegPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetOldRegUserNum() int64 {
	if x != nil {
		return x.OldRegUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetOldRegOrderNum() int64 {
	if x != nil {
		return x.OldRegOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetPayRate() int64 {
	if x != nil {
		return x.PayRate
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetArpu() int64 {
	if x != nil {
		return x.Arpu
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayRegArpu() int64 {
	if x != nil {
		return x.DayRegArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayArpu() int64 {
	if x != nil {
		return x.DayArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetDayOldArpu() int64 {
	if x != nil {
		return x.DayOldArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserAnalysisStatisticsReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UserAnalysisStatisticsReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *UserAnalysisStatisticsReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type UserAnalysisStatisticsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *UserAnalysisStatisticsData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UserAnalysisStatisticsReply) Reset() {
	*x = UserAnalysisStatisticsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsReply) ProtoMessage() {}

func (x *UserAnalysisStatisticsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsReply.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsReply) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{4}
}

func (x *UserAnalysisStatisticsReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAnalysisStatisticsReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserAnalysisStatisticsReply) GetResult() *UserAnalysisStatisticsData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建UserAnalysisStatistics请求
type UserAnalysisStatisticsCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//统计日期
	StatisticsDate string `protobuf:"bytes,1,opt,name=statisticsDate,proto3" json:"statisticsDate,omitempty"`
	//累计注册
	AllUserNum int64 `protobuf:"varint,2,opt,name=allUserNum,proto3" json:"allUserNum,omitempty"`
	//累计充值
	AllPayment int64 `protobuf:"varint,3,opt,name=allPayment,proto3" json:"allPayment,omitempty"`
	//总充值人数
	AllPayUser int64 `protobuf:"varint,4,opt,name=allPayUser,proto3" json:"allPayUser,omitempty"`
	//总订单数
	AllOrderNum int64 `protobuf:"varint,5,opt,name=allOrderNum,proto3" json:"allOrderNum,omitempty"`
	//当日注册人数
	DayUserNum int64 `protobuf:"varint,6,opt,name=dayUserNum,proto3" json:"dayUserNum,omitempty"`
	//当日订单金额
	DayPayment int64 `protobuf:"varint,7,opt,name=dayPayment,proto3" json:"dayPayment,omitempty"`
	//当日订单数
	DayOrderNum int64 `protobuf:"varint,8,opt,name=dayOrderNum,proto3" json:"dayOrderNum,omitempty"`
	//当日充值人数
	DayPayUser int64 `protobuf:"varint,9,opt,name=dayPayUser,proto3" json:"dayPayUser,omitempty"`
	//当日注册充值
	DayRegPayment int64 `protobuf:"varint,10,opt,name=dayRegPayment,proto3" json:"dayRegPayment,omitempty"`
	//当日注册充值人数
	DayRegUserNum int64 `protobuf:"varint,11,opt,name=dayRegUserNum,proto3" json:"dayRegUserNum,omitempty"`
	//当日注册充值笔数
	DayRegOrderNum int64 `protobuf:"varint,12,opt,name=dayRegOrderNum,proto3" json:"dayRegOrderNum,omitempty"`
	//当日老用户充值
	OldRegPayment int64 `protobuf:"varint,13,opt,name=oldRegPayment,proto3" json:"oldRegPayment,omitempty"`
	//当日老用户充值人数
	OldRegUserNum int64 `protobuf:"varint,14,opt,name=oldRegUserNum,proto3" json:"oldRegUserNum,omitempty"`
	//当日老用户充值笔数
	OldRegOrderNum int64 `protobuf:"varint,15,opt,name=oldRegOrderNum,proto3" json:"oldRegOrderNum,omitempty"`
	//付费率=当日充值笔数/当日注册
	PayRate int64 `protobuf:"varint,16,opt,name=payRate,proto3" json:"payRate,omitempty"`
	//ARPU(average revenue per user)=充值/注册
	Arpu int64 `protobuf:"varint,17,opt,name=arpu,proto3" json:"arpu,omitempty"`
	//当日注册充值客单价=当日注册充值/当日注册充值笔数
	DayRegArpu int64 `protobuf:"varint,18,opt,name=dayRegArpu,proto3" json:"dayRegArpu,omitempty"`
	//今日充值客单价=今日充值金额/充值笔数
	DayArpu int64 `protobuf:"varint,19,opt,name=dayArpu,proto3" json:"dayArpu,omitempty"`
	//老用户充值客单价=老用户充值/老用户充值笔数
	DayOldArpu int64 `protobuf:"varint,20,opt,name=dayOldArpu,proto3" json:"dayOldArpu,omitempty"`
}

func (x *UserAnalysisStatisticsCreateReq) Reset() {
	*x = UserAnalysisStatisticsCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsCreateReq) ProtoMessage() {}

func (x *UserAnalysisStatisticsCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsCreateReq.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsCreateReq) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{5}
}

func (x *UserAnalysisStatisticsCreateReq) GetStatisticsDate() string {
	if x != nil {
		return x.StatisticsDate
	}
	return ""
}

func (x *UserAnalysisStatisticsCreateReq) GetAllUserNum() int64 {
	if x != nil {
		return x.AllUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetAllPayment() int64 {
	if x != nil {
		return x.AllPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetAllPayUser() int64 {
	if x != nil {
		return x.AllPayUser
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetAllOrderNum() int64 {
	if x != nil {
		return x.AllOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayUserNum() int64 {
	if x != nil {
		return x.DayUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayPayment() int64 {
	if x != nil {
		return x.DayPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayOrderNum() int64 {
	if x != nil {
		return x.DayOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayPayUser() int64 {
	if x != nil {
		return x.DayPayUser
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayRegPayment() int64 {
	if x != nil {
		return x.DayRegPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayRegUserNum() int64 {
	if x != nil {
		return x.DayRegUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayRegOrderNum() int64 {
	if x != nil {
		return x.DayRegOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetOldRegPayment() int64 {
	if x != nil {
		return x.OldRegPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetOldRegUserNum() int64 {
	if x != nil {
		return x.OldRegUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetOldRegOrderNum() int64 {
	if x != nil {
		return x.OldRegOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetPayRate() int64 {
	if x != nil {
		return x.PayRate
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetArpu() int64 {
	if x != nil {
		return x.Arpu
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayRegArpu() int64 {
	if x != nil {
		return x.DayRegArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayArpu() int64 {
	if x != nil {
		return x.DayArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReq) GetDayOldArpu() int64 {
	if x != nil {
		return x.DayOldArpu
	}
	return 0
}

// 创建UserAnalysisStatistics返回
type UserAnalysisStatisticsCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *UserAnalysisStatisticsData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UserAnalysisStatisticsCreateReply) Reset() {
	*x = UserAnalysisStatisticsCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsCreateReply) ProtoMessage() {}

func (x *UserAnalysisStatisticsCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsCreateReply.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsCreateReply) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{6}
}

func (x *UserAnalysisStatisticsCreateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAnalysisStatisticsCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserAnalysisStatisticsCreateReply) GetResult() *UserAnalysisStatisticsData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新UserAnalysisStatistics请求
type UserAnalysisStatisticsUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//统计日期
	StatisticsDate string `protobuf:"bytes,2,opt,name=statisticsDate,proto3" json:"statisticsDate,omitempty"`
	//累计注册
	AllUserNum int64 `protobuf:"varint,3,opt,name=allUserNum,proto3" json:"allUserNum,omitempty"`
	//累计充值
	AllPayment int64 `protobuf:"varint,4,opt,name=allPayment,proto3" json:"allPayment,omitempty"`
	//总充值人数
	AllPayUser int64 `protobuf:"varint,5,opt,name=allPayUser,proto3" json:"allPayUser,omitempty"`
	//总订单数
	AllOrderNum int64 `protobuf:"varint,6,opt,name=allOrderNum,proto3" json:"allOrderNum,omitempty"`
	//当日注册人数
	DayUserNum int64 `protobuf:"varint,7,opt,name=dayUserNum,proto3" json:"dayUserNum,omitempty"`
	//当日订单金额
	DayPayment int64 `protobuf:"varint,8,opt,name=dayPayment,proto3" json:"dayPayment,omitempty"`
	//当日订单数
	DayOrderNum int64 `protobuf:"varint,9,opt,name=dayOrderNum,proto3" json:"dayOrderNum,omitempty"`
	//当日充值人数
	DayPayUser int64 `protobuf:"varint,10,opt,name=dayPayUser,proto3" json:"dayPayUser,omitempty"`
	//当日注册充值
	DayRegPayment int64 `protobuf:"varint,11,opt,name=dayRegPayment,proto3" json:"dayRegPayment,omitempty"`
	//当日注册充值人数
	DayRegUserNum int64 `protobuf:"varint,12,opt,name=dayRegUserNum,proto3" json:"dayRegUserNum,omitempty"`
	//当日注册充值笔数
	DayRegOrderNum int64 `protobuf:"varint,13,opt,name=dayRegOrderNum,proto3" json:"dayRegOrderNum,omitempty"`
	//当日老用户充值
	OldRegPayment int64 `protobuf:"varint,14,opt,name=oldRegPayment,proto3" json:"oldRegPayment,omitempty"`
	//当日老用户充值人数
	OldRegUserNum int64 `protobuf:"varint,15,opt,name=oldRegUserNum,proto3" json:"oldRegUserNum,omitempty"`
	//当日老用户充值笔数
	OldRegOrderNum int64 `protobuf:"varint,16,opt,name=oldRegOrderNum,proto3" json:"oldRegOrderNum,omitempty"`
	//付费率=当日充值笔数/当日注册
	PayRate int64 `protobuf:"varint,17,opt,name=payRate,proto3" json:"payRate,omitempty"`
	//ARPU(average revenue per user)=充值/注册
	Arpu int64 `protobuf:"varint,18,opt,name=arpu,proto3" json:"arpu,omitempty"`
	//当日注册充值客单价=当日注册充值/当日注册充值笔数
	DayRegArpu int64 `protobuf:"varint,19,opt,name=dayRegArpu,proto3" json:"dayRegArpu,omitempty"`
	//今日充值客单价=今日充值金额/充值笔数
	DayArpu int64 `protobuf:"varint,20,opt,name=dayArpu,proto3" json:"dayArpu,omitempty"`
	//老用户充值客单价=老用户充值/老用户充值笔数
	DayOldArpu int64 `protobuf:"varint,21,opt,name=dayOldArpu,proto3" json:"dayOldArpu,omitempty"`
}

func (x *UserAnalysisStatisticsUpdateReq) Reset() {
	*x = UserAnalysisStatisticsUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsUpdateReq) ProtoMessage() {}

func (x *UserAnalysisStatisticsUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsUpdateReq.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{7}
}

func (x *UserAnalysisStatisticsUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetStatisticsDate() string {
	if x != nil {
		return x.StatisticsDate
	}
	return ""
}

func (x *UserAnalysisStatisticsUpdateReq) GetAllUserNum() int64 {
	if x != nil {
		return x.AllUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetAllPayment() int64 {
	if x != nil {
		return x.AllPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetAllPayUser() int64 {
	if x != nil {
		return x.AllPayUser
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetAllOrderNum() int64 {
	if x != nil {
		return x.AllOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayUserNum() int64 {
	if x != nil {
		return x.DayUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayPayment() int64 {
	if x != nil {
		return x.DayPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayOrderNum() int64 {
	if x != nil {
		return x.DayOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayPayUser() int64 {
	if x != nil {
		return x.DayPayUser
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayRegPayment() int64 {
	if x != nil {
		return x.DayRegPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayRegUserNum() int64 {
	if x != nil {
		return x.DayRegUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayRegOrderNum() int64 {
	if x != nil {
		return x.DayRegOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetOldRegPayment() int64 {
	if x != nil {
		return x.OldRegPayment
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetOldRegUserNum() int64 {
	if x != nil {
		return x.OldRegUserNum
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetOldRegOrderNum() int64 {
	if x != nil {
		return x.OldRegOrderNum
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetPayRate() int64 {
	if x != nil {
		return x.PayRate
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetArpu() int64 {
	if x != nil {
		return x.Arpu
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayRegArpu() int64 {
	if x != nil {
		return x.DayRegArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayArpu() int64 {
	if x != nil {
		return x.DayArpu
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReq) GetDayOldArpu() int64 {
	if x != nil {
		return x.DayOldArpu
	}
	return 0
}

// 更新UserAnalysisStatistics返回
type UserAnalysisStatisticsUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *UserAnalysisStatisticsData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UserAnalysisStatisticsUpdateReply) Reset() {
	*x = UserAnalysisStatisticsUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsUpdateReply) ProtoMessage() {}

func (x *UserAnalysisStatisticsUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsUpdateReply.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{8}
}

func (x *UserAnalysisStatisticsUpdateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAnalysisStatisticsUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserAnalysisStatisticsUpdateReply) GetResult() *UserAnalysisStatisticsData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除UserAnalysisStatistics请求
type UserAnalysisStatisticsDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserAnalysisStatisticsDeleteReq) Reset() {
	*x = UserAnalysisStatisticsDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsDeleteReq) ProtoMessage() {}

func (x *UserAnalysisStatisticsDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsDeleteReq.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{9}
}

func (x *UserAnalysisStatisticsDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除UserAnalysisStatistics请求
type UserAnalysisStatisticsBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *UserAnalysisStatisticsBatchDeleteReq) Reset() {
	*x = UserAnalysisStatisticsBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsBatchDeleteReq) ProtoMessage() {}

func (x *UserAnalysisStatisticsBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{10}
}

func (x *UserAnalysisStatisticsBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除UserAnalysisStatistics返回
type UserAnalysisStatisticsDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UserAnalysisStatisticsDeleteReply) Reset() {
	*x = UserAnalysisStatisticsDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAnalysisStatisticsDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnalysisStatisticsDeleteReply) ProtoMessage() {}

func (x *UserAnalysisStatisticsDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnalysisStatisticsDeleteReply.ProtoReflect.Descriptor instead.
func (*UserAnalysisStatisticsDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP(), []int{11}
}

func (x *UserAnalysisStatisticsDeleteReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserAnalysisStatisticsDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserAnalysisStatisticsDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto protoreflect.FileDescriptor

var file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDesc = []byte{
	0x0a, 0x42, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x07,
	0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x50,
	0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61,
	0x79, 0x50, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x52,
	0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x61,
	0x79, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x70, 0x75, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x72, 0x70, 0x75, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x41, 0x72, 0x70, 0x75, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x41, 0x72, 0x70, 0x75, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x61, 0x79, 0x41, 0x72, 0x70, 0x75, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x64, 0x61, 0x79, 0x41, 0x72, 0x70, 0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x4f,
	0x6c, 0x64, 0x41, 0x72, 0x70, 0x75, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61,
	0x79, 0x4f, 0x6c, 0x64, 0x41, 0x72, 0x70, 0x75, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x94, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb2, 0x01, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x4b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8f, 0x07, 0x0a,
	0x19, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x50, 0x61, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x50,
	0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64,
	0x61, 0x79, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x79, 0x52,
	0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c,
	0x64, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x70, 0x75,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x72, 0x70, 0x75, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x41, 0x72, 0x70, 0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x41, 0x72, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x61, 0x79, 0x41, 0x72, 0x70, 0x75, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64,
	0x61, 0x79, 0x41, 0x72, 0x70, 0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x6c, 0x64,
	0x41, 0x72, 0x70, 0x75, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f,
	0x6c, 0x64, 0x41, 0x72, 0x70, 0x75, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9a,
	0x01, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbd, 0x05, 0x0a, 0x1f,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x6c,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x61, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x61, 0x79, 0x50, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x61, 0x79, 0x50, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x61, 0x79, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x52, 0x65,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6c,
	0x64, 0x52, 0x65, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x70, 0x75, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x72, 0x70,
	0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x41, 0x72, 0x70, 0x75, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x41, 0x72, 0x70,
	0x75, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x41, 0x72, 0x70, 0x75, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x64, 0x61, 0x79, 0x41, 0x72, 0x70, 0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x61, 0x79, 0x4f, 0x6c, 0x64, 0x41, 0x72, 0x70, 0x75, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x61, 0x79, 0x4f, 0x6c, 0x64, 0x41, 0x72, 0x70, 0x75, 0x22, 0xa0, 0x01, 0x0a, 0x21,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcd,
	0x05, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x50, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x61, 0x79, 0x50, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x50, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x79,
	0x52, 0x65, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61,
	0x79, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65,
	0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26,
	0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x70, 0x75, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x61, 0x72, 0x70, 0x75, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x41, 0x72,
	0x70, 0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67,
	0x41, 0x72, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x41, 0x72, 0x70, 0x75, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x61, 0x79, 0x41, 0x72, 0x70, 0x75, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x6c, 0x64, 0x41, 0x72, 0x70, 0x75, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x4f, 0x6c, 0x64, 0x41, 0x72, 0x70, 0x75, 0x22, 0xa0,
	0x01, 0x0a, 0x21, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x31, 0x0a, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x24, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x69,
	0x0a, 0x21, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xb0, 0x09, 0x0a, 0x16, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x38, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x3a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x34, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc6,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x3a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x1a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xc1, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x3c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xc3, 0x01, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x2d, 0x5a, 0x2b,
	0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescOnce sync.Once
	file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescData = file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDesc
)

func file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescGZIP() []byte {
	file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescOnce.Do(func() {
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescData)
	})
	return file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDescData
}

var file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_goTypes = []interface{}{
	(*UserAnalysisStatisticsData)(nil),           // 0: useranalysisstatistics.v1.UserAnalysisStatisticsData
	(*UserAnalysisStatisticsPageReq)(nil),        // 1: useranalysisstatistics.v1.UserAnalysisStatisticsPageReq
	(*UserAnalysisStatisticsPageReply)(nil),      // 2: useranalysisstatistics.v1.UserAnalysisStatisticsPageReply
	(*UserAnalysisStatisticsReq)(nil),            // 3: useranalysisstatistics.v1.UserAnalysisStatisticsReq
	(*UserAnalysisStatisticsReply)(nil),          // 4: useranalysisstatistics.v1.UserAnalysisStatisticsReply
	(*UserAnalysisStatisticsCreateReq)(nil),      // 5: useranalysisstatistics.v1.UserAnalysisStatisticsCreateReq
	(*UserAnalysisStatisticsCreateReply)(nil),    // 6: useranalysisstatistics.v1.UserAnalysisStatisticsCreateReply
	(*UserAnalysisStatisticsUpdateReq)(nil),      // 7: useranalysisstatistics.v1.UserAnalysisStatisticsUpdateReq
	(*UserAnalysisStatisticsUpdateReply)(nil),    // 8: useranalysisstatistics.v1.UserAnalysisStatisticsUpdateReply
	(*UserAnalysisStatisticsDeleteReq)(nil),      // 9: useranalysisstatistics.v1.UserAnalysisStatisticsDeleteReq
	(*UserAnalysisStatisticsBatchDeleteReq)(nil), // 10: useranalysisstatistics.v1.UserAnalysisStatisticsBatchDeleteReq
	(*UserAnalysisStatisticsDeleteReply)(nil),    // 11: useranalysisstatistics.v1.UserAnalysisStatisticsDeleteReply
	(*timestamppb.Timestamp)(nil),                // 12: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),                     // 13: pagin.Pagination
}
var file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_depIdxs = []int32{
	12, // 0: useranalysisstatistics.v1.UserAnalysisStatisticsData.createdAt:type_name -> google.protobuf.Timestamp
	12, // 1: useranalysisstatistics.v1.UserAnalysisStatisticsData.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 2: useranalysisstatistics.v1.UserAnalysisStatisticsPageReq.pagin:type_name -> pagin.Pagination
	3,  // 3: useranalysisstatistics.v1.UserAnalysisStatisticsPageReq.param:type_name -> useranalysisstatistics.v1.UserAnalysisStatisticsReq
	0,  // 4: useranalysisstatistics.v1.UserAnalysisStatisticsPageReply.items:type_name -> useranalysisstatistics.v1.UserAnalysisStatisticsData
	12, // 5: useranalysisstatistics.v1.UserAnalysisStatisticsReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 6: useranalysisstatistics.v1.UserAnalysisStatisticsReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 7: useranalysisstatistics.v1.UserAnalysisStatisticsReply.result:type_name -> useranalysisstatistics.v1.UserAnalysisStatisticsData
	0,  // 8: useranalysisstatistics.v1.UserAnalysisStatisticsCreateReply.result:type_name -> useranalysisstatistics.v1.UserAnalysisStatisticsData
	0,  // 9: useranalysisstatistics.v1.UserAnalysisStatisticsUpdateReply.result:type_name -> useranalysisstatistics.v1.UserAnalysisStatisticsData
	1,  // 10: useranalysisstatistics.v1.UserAnalysisStatistics.GetPageUserAnalysisStatistics:input_type -> useranalysisstatistics.v1.UserAnalysisStatisticsPageReq
	3,  // 11: useranalysisstatistics.v1.UserAnalysisStatistics.GetUserAnalysisStatistics:input_type -> useranalysisstatistics.v1.UserAnalysisStatisticsReq
	7,  // 12: useranalysisstatistics.v1.UserAnalysisStatistics.UpdateUserAnalysisStatistics:input_type -> useranalysisstatistics.v1.UserAnalysisStatisticsUpdateReq
	5,  // 13: useranalysisstatistics.v1.UserAnalysisStatistics.CreateUserAnalysisStatistics:input_type -> useranalysisstatistics.v1.UserAnalysisStatisticsCreateReq
	9,  // 14: useranalysisstatistics.v1.UserAnalysisStatistics.DeleteUserAnalysisStatistics:input_type -> useranalysisstatistics.v1.UserAnalysisStatisticsDeleteReq
	10, // 15: useranalysisstatistics.v1.UserAnalysisStatistics.BatchDeleteUserAnalysisStatistics:input_type -> useranalysisstatistics.v1.UserAnalysisStatisticsBatchDeleteReq
	2,  // 16: useranalysisstatistics.v1.UserAnalysisStatistics.GetPageUserAnalysisStatistics:output_type -> useranalysisstatistics.v1.UserAnalysisStatisticsPageReply
	4,  // 17: useranalysisstatistics.v1.UserAnalysisStatistics.GetUserAnalysisStatistics:output_type -> useranalysisstatistics.v1.UserAnalysisStatisticsReply
	8,  // 18: useranalysisstatistics.v1.UserAnalysisStatistics.UpdateUserAnalysisStatistics:output_type -> useranalysisstatistics.v1.UserAnalysisStatisticsUpdateReply
	6,  // 19: useranalysisstatistics.v1.UserAnalysisStatistics.CreateUserAnalysisStatistics:output_type -> useranalysisstatistics.v1.UserAnalysisStatisticsCreateReply
	11, // 20: useranalysisstatistics.v1.UserAnalysisStatistics.DeleteUserAnalysisStatistics:output_type -> useranalysisstatistics.v1.UserAnalysisStatisticsDeleteReply
	11, // 21: useranalysisstatistics.v1.UserAnalysisStatistics.BatchDeleteUserAnalysisStatistics:output_type -> useranalysisstatistics.v1.UserAnalysisStatisticsDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_init() }
func file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_init() {
	if File_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAnalysisStatisticsDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_goTypes,
		DependencyIndexes: file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_depIdxs,
		MessageInfos:      file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_msgTypes,
	}.Build()
	File_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto = out.File
	file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_rawDesc = nil
	file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_goTypes = nil
	file_api_param_useranalysisstatistics_v1_user_analysis_statistics_proto_depIdxs = nil
}
