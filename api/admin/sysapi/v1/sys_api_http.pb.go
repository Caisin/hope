// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysApiHTTPServer interface {
	BatchDeleteSysApi(context.Context, *SysApiBatchDeleteReq) (*SysApiDeleteReply, error)
	CreateSysApi(context.Context, *SysApiCreateReq) (*SysApiCreateReply, error)
	DeleteSysApi(context.Context, *SysApiDeleteReq) (*SysApiDeleteReply, error)
	GetSysApi(context.Context, *SysApiReq) (*SysApiReply, error)
	GetSysApiPage(context.Context, *SysApiPageReq) (*SysApiPageReply, error)
	UpdateSysApi(context.Context, *SysApiUpdateReq) (*SysApiUpdateReply, error)
}

func RegisterSysApiHTTPServer(s *http.Server, srv SysApiHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sys/api/page", _SysApi_GetSysApiPage0_HTTP_Handler(srv))
	r.GET("/v1/sys/api/{id}", _SysApi_GetSysApi0_HTTP_Handler(srv))
	r.PUT("/v1/sys/api/{id}", _SysApi_UpdateSysApi0_HTTP_Handler(srv))
	r.POST("/v1/sys/api", _SysApi_CreateSysApi0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/api/{id}", _SysApi_DeleteSysApi0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/api", _SysApi_BatchDeleteSysApi0_HTTP_Handler(srv))
}

func _SysApi_GetSysApiPage0_HTTP_Handler(srv SysApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysApiPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysapi.v1.SysApi/GetSysApiPage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysApiPage(ctx, req.(*SysApiPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysApiPageReply)
		return ctx.Result(200, reply)
	}
}

func _SysApi_GetSysApi0_HTTP_Handler(srv SysApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysApiReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysapi.v1.SysApi/GetSysApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysApi(ctx, req.(*SysApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysApiReply)
		return ctx.Result(200, reply)
	}
}

func _SysApi_UpdateSysApi0_HTTP_Handler(srv SysApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysApiUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysapi.v1.SysApi/UpdateSysApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysApi(ctx, req.(*SysApiUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysApiUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysApi_CreateSysApi0_HTTP_Handler(srv SysApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysApiCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysapi.v1.SysApi/CreateSysApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysApi(ctx, req.(*SysApiCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysApiCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysApi_DeleteSysApi0_HTTP_Handler(srv SysApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysApiDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysapi.v1.SysApi/DeleteSysApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysApi(ctx, req.(*SysApiDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysApiDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysApi_BatchDeleteSysApi0_HTTP_Handler(srv SysApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysApiBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysapi.v1.SysApi/BatchDeleteSysApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysApi(ctx, req.(*SysApiBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysApiDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysApiHTTPClient interface {
	BatchDeleteSysApi(ctx context.Context, req *SysApiBatchDeleteReq, opts ...http.CallOption) (rsp *SysApiDeleteReply, err error)
	CreateSysApi(ctx context.Context, req *SysApiCreateReq, opts ...http.CallOption) (rsp *SysApiCreateReply, err error)
	DeleteSysApi(ctx context.Context, req *SysApiDeleteReq, opts ...http.CallOption) (rsp *SysApiDeleteReply, err error)
	GetSysApi(ctx context.Context, req *SysApiReq, opts ...http.CallOption) (rsp *SysApiReply, err error)
	GetSysApiPage(ctx context.Context, req *SysApiPageReq, opts ...http.CallOption) (rsp *SysApiPageReply, err error)
	UpdateSysApi(ctx context.Context, req *SysApiUpdateReq, opts ...http.CallOption) (rsp *SysApiUpdateReply, err error)
}

type SysApiHTTPClientImpl struct {
	cc *http.Client
}

func NewSysApiHTTPClient(client *http.Client) SysApiHTTPClient {
	return &SysApiHTTPClientImpl{client}
}

func (c *SysApiHTTPClientImpl) BatchDeleteSysApi(ctx context.Context, in *SysApiBatchDeleteReq, opts ...http.CallOption) (*SysApiDeleteReply, error) {
	var out SysApiDeleteReply
	pattern := "/v1/sys/api"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysapi.v1.SysApi/BatchDeleteSysApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysApiHTTPClientImpl) CreateSysApi(ctx context.Context, in *SysApiCreateReq, opts ...http.CallOption) (*SysApiCreateReply, error) {
	var out SysApiCreateReply
	pattern := "/v1/sys/api"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysapi.v1.SysApi/CreateSysApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysApiHTTPClientImpl) DeleteSysApi(ctx context.Context, in *SysApiDeleteReq, opts ...http.CallOption) (*SysApiDeleteReply, error) {
	var out SysApiDeleteReply
	pattern := "/v1/sys/api/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysapi.v1.SysApi/DeleteSysApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysApiHTTPClientImpl) GetSysApi(ctx context.Context, in *SysApiReq, opts ...http.CallOption) (*SysApiReply, error) {
	var out SysApiReply
	pattern := "/v1/sys/api/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysapi.v1.SysApi/GetSysApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysApiHTTPClientImpl) GetSysApiPage(ctx context.Context, in *SysApiPageReq, opts ...http.CallOption) (*SysApiPageReply, error) {
	var out SysApiPageReply
	pattern := "/v1/sys/api/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysapi.v1.SysApi/GetSysApiPage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysApiHTTPClientImpl) UpdateSysApi(ctx context.Context, in *SysApiUpdateReq, opts ...http.CallOption) (*SysApiUpdateReply, error) {
	var out SysApiUpdateReply
	pattern := "/v1/sys/api/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysapi.v1.SysApi/UpdateSysApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
