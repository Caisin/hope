// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/admin/sysoperalog/v1/sys_opera_log.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type SysOperaLogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//操作模块
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	//请求ID
	RequestId string `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	//操作类型
	BusinessType string `protobuf:"bytes,5,opt,name=businessType,proto3" json:"businessType,omitempty"`
	//BusinessTypes
	BusinessTypes string `protobuf:"bytes,6,opt,name=businessTypes,proto3" json:"businessTypes,omitempty"`
	//函数
	Method string `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	//请求方式
	RequestMethod string `protobuf:"bytes,8,opt,name=requestMethod,proto3" json:"requestMethod,omitempty"`
	//操作类型
	OperatorType string `protobuf:"bytes,9,opt,name=operatorType,proto3" json:"operatorType,omitempty"`
	//操作者
	OperName string `protobuf:"bytes,10,opt,name=operName,proto3" json:"operName,omitempty"`
	//部门名称
	DeptName string `protobuf:"bytes,11,opt,name=deptName,proto3" json:"deptName,omitempty"`
	//访问地址
	OperUrl string `protobuf:"bytes,12,opt,name=operUrl,proto3" json:"operUrl,omitempty"`
	//客户端ip
	OperIp string `protobuf:"bytes,13,opt,name=operIp,proto3" json:"operIp,omitempty"`
	//浏览器
	Browser string `protobuf:"bytes,14,opt,name=browser,proto3" json:"browser,omitempty"`
	//系统
	Os string `protobuf:"bytes,15,opt,name=os,proto3" json:"os,omitempty"`
	//固件
	Platform string `protobuf:"bytes,16,opt,name=platform,proto3" json:"platform,omitempty"`
	//访问位置
	OperLocation string `protobuf:"bytes,17,opt,name=operLocation,proto3" json:"operLocation,omitempty"`
	//请求参数
	OperParam string `protobuf:"bytes,18,opt,name=operParam,proto3" json:"operParam,omitempty"`
	//操作状态
	Status string `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`
	//操作时间
	OperTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=operTime,proto3" json:"operTime,omitempty"`
	//返回数据
	JsonResult string `protobuf:"bytes,21,opt,name=jsonResult,proto3" json:"jsonResult,omitempty"`
	//备注
	Remark string `protobuf:"bytes,22,opt,name=remark,proto3" json:"remark,omitempty"`
	//耗时
	LatencyTime string `protobuf:"bytes,23,opt,name=latencyTime,proto3" json:"latencyTime,omitempty"`
	//ua
	UserAgent string `protobuf:"bytes,24,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,27,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,28,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,29,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysOperaLogData) Reset() {
	*x = SysOperaLogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogData) ProtoMessage() {}

func (x *SysOperaLogData) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogData.ProtoReflect.Descriptor instead.
func (*SysOperaLogData) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{0}
}

func (x *SysOperaLogData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysOperaLogData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SysOperaLogData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SysOperaLogData) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SysOperaLogData) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *SysOperaLogData) GetBusinessTypes() string {
	if x != nil {
		return x.BusinessTypes
	}
	return ""
}

func (x *SysOperaLogData) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SysOperaLogData) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *SysOperaLogData) GetOperatorType() string {
	if x != nil {
		return x.OperatorType
	}
	return ""
}

func (x *SysOperaLogData) GetOperName() string {
	if x != nil {
		return x.OperName
	}
	return ""
}

func (x *SysOperaLogData) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *SysOperaLogData) GetOperUrl() string {
	if x != nil {
		return x.OperUrl
	}
	return ""
}

func (x *SysOperaLogData) GetOperIp() string {
	if x != nil {
		return x.OperIp
	}
	return ""
}

func (x *SysOperaLogData) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *SysOperaLogData) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *SysOperaLogData) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SysOperaLogData) GetOperLocation() string {
	if x != nil {
		return x.OperLocation
	}
	return ""
}

func (x *SysOperaLogData) GetOperParam() string {
	if x != nil {
		return x.OperParam
	}
	return ""
}

func (x *SysOperaLogData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SysOperaLogData) GetOperTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OperTime
	}
	return nil
}

func (x *SysOperaLogData) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

func (x *SysOperaLogData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysOperaLogData) GetLatencyTime() string {
	if x != nil {
		return x.LatencyTime
	}
	return ""
}

func (x *SysOperaLogData) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *SysOperaLogData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysOperaLogData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysOperaLogData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysOperaLogData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysOperaLogData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type SysOperaLogPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *SysOperaLogReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *SysOperaLogPageReq) Reset() {
	*x = SysOperaLogPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogPageReq) ProtoMessage() {}

func (x *SysOperaLogPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogPageReq.ProtoReflect.Descriptor instead.
func (*SysOperaLogPageReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{1}
}

func (x *SysOperaLogPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *SysOperaLogPageReq) GetParam() *SysOperaLogReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type SysOperaLogPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*SysOperaLogData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SysOperaLogPageReply) Reset() {
	*x = SysOperaLogPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogPageReply) ProtoMessage() {}

func (x *SysOperaLogPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogPageReply.ProtoReflect.Descriptor instead.
func (*SysOperaLogPageReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{2}
}

func (x *SysOperaLogPageReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysOperaLogPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysOperaLogPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SysOperaLogPageReply) GetItems() []*SysOperaLogData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type SysOperaLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//操作模块
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	//请求ID
	RequestId string `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	//操作类型
	BusinessType string `protobuf:"bytes,5,opt,name=businessType,proto3" json:"businessType,omitempty"`
	//BusinessTypes
	BusinessTypes string `protobuf:"bytes,6,opt,name=businessTypes,proto3" json:"businessTypes,omitempty"`
	//函数
	Method string `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	//请求方式
	RequestMethod string `protobuf:"bytes,8,opt,name=requestMethod,proto3" json:"requestMethod,omitempty"`
	//操作类型
	OperatorType string `protobuf:"bytes,9,opt,name=operatorType,proto3" json:"operatorType,omitempty"`
	//操作者
	OperName string `protobuf:"bytes,10,opt,name=operName,proto3" json:"operName,omitempty"`
	//部门名称
	DeptName string `protobuf:"bytes,11,opt,name=deptName,proto3" json:"deptName,omitempty"`
	//访问地址
	OperUrl string `protobuf:"bytes,12,opt,name=operUrl,proto3" json:"operUrl,omitempty"`
	//客户端ip
	OperIp string `protobuf:"bytes,13,opt,name=operIp,proto3" json:"operIp,omitempty"`
	//浏览器
	Browser string `protobuf:"bytes,14,opt,name=browser,proto3" json:"browser,omitempty"`
	//系统
	Os string `protobuf:"bytes,15,opt,name=os,proto3" json:"os,omitempty"`
	//固件
	Platform string `protobuf:"bytes,16,opt,name=platform,proto3" json:"platform,omitempty"`
	//访问位置
	OperLocation string `protobuf:"bytes,17,opt,name=operLocation,proto3" json:"operLocation,omitempty"`
	//请求参数
	OperParam string `protobuf:"bytes,18,opt,name=operParam,proto3" json:"operParam,omitempty"`
	//操作状态
	Status string `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`
	//操作时间
	OperTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=operTime,proto3" json:"operTime,omitempty"`
	//返回数据
	JsonResult string `protobuf:"bytes,21,opt,name=jsonResult,proto3" json:"jsonResult,omitempty"`
	//备注
	Remark string `protobuf:"bytes,22,opt,name=remark,proto3" json:"remark,omitempty"`
	//耗时
	LatencyTime string `protobuf:"bytes,23,opt,name=latencyTime,proto3" json:"latencyTime,omitempty"`
	//ua
	UserAgent string `protobuf:"bytes,24,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,27,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,28,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,29,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysOperaLogReq) Reset() {
	*x = SysOperaLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogReq) ProtoMessage() {}

func (x *SysOperaLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogReq.ProtoReflect.Descriptor instead.
func (*SysOperaLogReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{3}
}

func (x *SysOperaLogReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysOperaLogReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SysOperaLogReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SysOperaLogReq) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SysOperaLogReq) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *SysOperaLogReq) GetBusinessTypes() string {
	if x != nil {
		return x.BusinessTypes
	}
	return ""
}

func (x *SysOperaLogReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SysOperaLogReq) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *SysOperaLogReq) GetOperatorType() string {
	if x != nil {
		return x.OperatorType
	}
	return ""
}

func (x *SysOperaLogReq) GetOperName() string {
	if x != nil {
		return x.OperName
	}
	return ""
}

func (x *SysOperaLogReq) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *SysOperaLogReq) GetOperUrl() string {
	if x != nil {
		return x.OperUrl
	}
	return ""
}

func (x *SysOperaLogReq) GetOperIp() string {
	if x != nil {
		return x.OperIp
	}
	return ""
}

func (x *SysOperaLogReq) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *SysOperaLogReq) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *SysOperaLogReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SysOperaLogReq) GetOperLocation() string {
	if x != nil {
		return x.OperLocation
	}
	return ""
}

func (x *SysOperaLogReq) GetOperParam() string {
	if x != nil {
		return x.OperParam
	}
	return ""
}

func (x *SysOperaLogReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SysOperaLogReq) GetOperTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OperTime
	}
	return nil
}

func (x *SysOperaLogReq) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

func (x *SysOperaLogReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysOperaLogReq) GetLatencyTime() string {
	if x != nil {
		return x.LatencyTime
	}
	return ""
}

func (x *SysOperaLogReq) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *SysOperaLogReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysOperaLogReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysOperaLogReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysOperaLogReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysOperaLogReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type SysOperaLogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *SysOperaLogData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysOperaLogReply) Reset() {
	*x = SysOperaLogReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogReply) ProtoMessage() {}

func (x *SysOperaLogReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogReply.ProtoReflect.Descriptor instead.
func (*SysOperaLogReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{4}
}

func (x *SysOperaLogReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysOperaLogReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysOperaLogReply) GetResult() *SysOperaLogData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建SysOperaLog请求
type SysOperaLogCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户ID
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	//操作模块
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	//请求ID
	RequestId string `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	//操作类型
	BusinessType string `protobuf:"bytes,4,opt,name=businessType,proto3" json:"businessType,omitempty"`
	//BusinessTypes
	BusinessTypes string `protobuf:"bytes,5,opt,name=businessTypes,proto3" json:"businessTypes,omitempty"`
	//函数
	Method string `protobuf:"bytes,6,opt,name=method,proto3" json:"method,omitempty"`
	//请求方式
	RequestMethod string `protobuf:"bytes,7,opt,name=requestMethod,proto3" json:"requestMethod,omitempty"`
	//操作类型
	OperatorType string `protobuf:"bytes,8,opt,name=operatorType,proto3" json:"operatorType,omitempty"`
	//操作者
	OperName string `protobuf:"bytes,9,opt,name=operName,proto3" json:"operName,omitempty"`
	//部门名称
	DeptName string `protobuf:"bytes,10,opt,name=deptName,proto3" json:"deptName,omitempty"`
	//访问地址
	OperUrl string `protobuf:"bytes,11,opt,name=operUrl,proto3" json:"operUrl,omitempty"`
	//客户端ip
	OperIp string `protobuf:"bytes,12,opt,name=operIp,proto3" json:"operIp,omitempty"`
	//浏览器
	Browser string `protobuf:"bytes,13,opt,name=browser,proto3" json:"browser,omitempty"`
	//系统
	Os string `protobuf:"bytes,14,opt,name=os,proto3" json:"os,omitempty"`
	//固件
	Platform string `protobuf:"bytes,15,opt,name=platform,proto3" json:"platform,omitempty"`
	//访问位置
	OperLocation string `protobuf:"bytes,16,opt,name=operLocation,proto3" json:"operLocation,omitempty"`
	//请求参数
	OperParam string `protobuf:"bytes,17,opt,name=operParam,proto3" json:"operParam,omitempty"`
	//操作状态
	Status string `protobuf:"bytes,18,opt,name=status,proto3" json:"status,omitempty"`
	//操作时间
	OperTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=operTime,proto3" json:"operTime,omitempty"`
	//返回数据
	JsonResult string `protobuf:"bytes,20,opt,name=jsonResult,proto3" json:"jsonResult,omitempty"`
	//备注
	Remark string `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`
	//耗时
	LatencyTime string `protobuf:"bytes,22,opt,name=latencyTime,proto3" json:"latencyTime,omitempty"`
	//ua
	UserAgent string `protobuf:"bytes,23,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
}

func (x *SysOperaLogCreateReq) Reset() {
	*x = SysOperaLogCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogCreateReq) ProtoMessage() {}

func (x *SysOperaLogCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogCreateReq.ProtoReflect.Descriptor instead.
func (*SysOperaLogCreateReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{5}
}

func (x *SysOperaLogCreateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SysOperaLogCreateReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetBusinessTypes() string {
	if x != nil {
		return x.BusinessTypes
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetOperatorType() string {
	if x != nil {
		return x.OperatorType
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetOperName() string {
	if x != nil {
		return x.OperName
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetOperUrl() string {
	if x != nil {
		return x.OperUrl
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetOperIp() string {
	if x != nil {
		return x.OperIp
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetOperLocation() string {
	if x != nil {
		return x.OperLocation
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetOperParam() string {
	if x != nil {
		return x.OperParam
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetOperTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OperTime
	}
	return nil
}

func (x *SysOperaLogCreateReq) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetLatencyTime() string {
	if x != nil {
		return x.LatencyTime
	}
	return ""
}

func (x *SysOperaLogCreateReq) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

// 创建SysOperaLog返回
type SysOperaLogCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *SysOperaLogData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysOperaLogCreateReply) Reset() {
	*x = SysOperaLogCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogCreateReply) ProtoMessage() {}

func (x *SysOperaLogCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogCreateReply.ProtoReflect.Descriptor instead.
func (*SysOperaLogCreateReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{6}
}

func (x *SysOperaLogCreateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysOperaLogCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysOperaLogCreateReply) GetResult() *SysOperaLogData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新SysOperaLog请求
type SysOperaLogUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//操作模块
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	//请求ID
	RequestId string `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`
	//操作类型
	BusinessType string `protobuf:"bytes,5,opt,name=businessType,proto3" json:"businessType,omitempty"`
	//BusinessTypes
	BusinessTypes string `protobuf:"bytes,6,opt,name=businessTypes,proto3" json:"businessTypes,omitempty"`
	//函数
	Method string `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	//请求方式
	RequestMethod string `protobuf:"bytes,8,opt,name=requestMethod,proto3" json:"requestMethod,omitempty"`
	//操作类型
	OperatorType string `protobuf:"bytes,9,opt,name=operatorType,proto3" json:"operatorType,omitempty"`
	//操作者
	OperName string `protobuf:"bytes,10,opt,name=operName,proto3" json:"operName,omitempty"`
	//部门名称
	DeptName string `protobuf:"bytes,11,opt,name=deptName,proto3" json:"deptName,omitempty"`
	//访问地址
	OperUrl string `protobuf:"bytes,12,opt,name=operUrl,proto3" json:"operUrl,omitempty"`
	//客户端ip
	OperIp string `protobuf:"bytes,13,opt,name=operIp,proto3" json:"operIp,omitempty"`
	//浏览器
	Browser string `protobuf:"bytes,14,opt,name=browser,proto3" json:"browser,omitempty"`
	//系统
	Os string `protobuf:"bytes,15,opt,name=os,proto3" json:"os,omitempty"`
	//固件
	Platform string `protobuf:"bytes,16,opt,name=platform,proto3" json:"platform,omitempty"`
	//访问位置
	OperLocation string `protobuf:"bytes,17,opt,name=operLocation,proto3" json:"operLocation,omitempty"`
	//请求参数
	OperParam string `protobuf:"bytes,18,opt,name=operParam,proto3" json:"operParam,omitempty"`
	//操作状态
	Status string `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`
	//操作时间
	OperTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=operTime,proto3" json:"operTime,omitempty"`
	//返回数据
	JsonResult string `protobuf:"bytes,21,opt,name=jsonResult,proto3" json:"jsonResult,omitempty"`
	//备注
	Remark string `protobuf:"bytes,22,opt,name=remark,proto3" json:"remark,omitempty"`
	//耗时
	LatencyTime string `protobuf:"bytes,23,opt,name=latencyTime,proto3" json:"latencyTime,omitempty"`
	//ua
	UserAgent string `protobuf:"bytes,24,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
}

func (x *SysOperaLogUpdateReq) Reset() {
	*x = SysOperaLogUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogUpdateReq) ProtoMessage() {}

func (x *SysOperaLogUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogUpdateReq.ProtoReflect.Descriptor instead.
func (*SysOperaLogUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{7}
}

func (x *SysOperaLogUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysOperaLogUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SysOperaLogUpdateReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetBusinessType() string {
	if x != nil {
		return x.BusinessType
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetBusinessTypes() string {
	if x != nil {
		return x.BusinessTypes
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetRequestMethod() string {
	if x != nil {
		return x.RequestMethod
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetOperatorType() string {
	if x != nil {
		return x.OperatorType
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetOperName() string {
	if x != nil {
		return x.OperName
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetDeptName() string {
	if x != nil {
		return x.DeptName
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetOperUrl() string {
	if x != nil {
		return x.OperUrl
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetOperIp() string {
	if x != nil {
		return x.OperIp
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetOperLocation() string {
	if x != nil {
		return x.OperLocation
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetOperParam() string {
	if x != nil {
		return x.OperParam
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetOperTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OperTime
	}
	return nil
}

func (x *SysOperaLogUpdateReq) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetLatencyTime() string {
	if x != nil {
		return x.LatencyTime
	}
	return ""
}

func (x *SysOperaLogUpdateReq) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

// 更新SysOperaLog返回
type SysOperaLogUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *SysOperaLogData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysOperaLogUpdateReply) Reset() {
	*x = SysOperaLogUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogUpdateReply) ProtoMessage() {}

func (x *SysOperaLogUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogUpdateReply.ProtoReflect.Descriptor instead.
func (*SysOperaLogUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{8}
}

func (x *SysOperaLogUpdateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysOperaLogUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysOperaLogUpdateReply) GetResult() *SysOperaLogData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除SysOperaLog请求
type SysOperaLogDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SysOperaLogDeleteReq) Reset() {
	*x = SysOperaLogDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogDeleteReq) ProtoMessage() {}

func (x *SysOperaLogDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogDeleteReq.ProtoReflect.Descriptor instead.
func (*SysOperaLogDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{9}
}

func (x *SysOperaLogDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除SysOperaLog请求
type SysOperaLogBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SysOperaLogBatchDeleteReq) Reset() {
	*x = SysOperaLogBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogBatchDeleteReq) ProtoMessage() {}

func (x *SysOperaLogBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*SysOperaLogBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{10}
}

func (x *SysOperaLogBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除SysOperaLog返回
type SysOperaLogDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysOperaLogDeleteReply) Reset() {
	*x = SysOperaLogDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysOperaLogDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysOperaLogDeleteReply) ProtoMessage() {}

func (x *SysOperaLogDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysOperaLogDeleteReply.ProtoReflect.Descriptor instead.
func (*SysOperaLogDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP(), []int{11}
}

func (x *SysOperaLogDeleteReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SysOperaLogDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysOperaLogDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_admin_sysoperalog_v1_sys_opera_log_proto protoreflect.FileDescriptor

var file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x07, 0x0a,
	0x0f, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x72, 0x49, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x72,
	0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x12, 0x53, 0x79,
	0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x91, 0x01, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79,
	0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x9a, 0x07, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x79, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc8, 0x05, 0x0a, 0x14,
	0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x72, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x16, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd8, 0x05, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x72, 0x49, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x72,
	0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x16, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x73,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c,
	0x6f, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x53,
	0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x16, 0x53, 0x79,
	0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x96, 0x06, 0x0a, 0x0b, 0x53,
	0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x12, 0x7e, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67,
	0x12, 0x22, 0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f,
	0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x12, 0x1e, 0x2e, 0x73,
	0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73,
	0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x84,
	0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x73, 0x79, 0x73,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x79, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x73, 0x79, 0x73,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x2f,
	0x6c, 0x6f, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x73,
	0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x16, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x4c, 0x6f, 0x67, 0x12, 0x29, 0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c,
	0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x2f,
	0x6c, 0x6f, 0x67, 0x42, 0x22, 0x5a, 0x20, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescOnce sync.Once
	file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescData = file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDesc
)

func file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescGZIP() []byte {
	file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescOnce.Do(func() {
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescData)
	})
	return file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDescData
}

var file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_admin_sysoperalog_v1_sys_opera_log_proto_goTypes = []interface{}{
	(*SysOperaLogData)(nil),           // 0: sysoperalog.v1.SysOperaLogData
	(*SysOperaLogPageReq)(nil),        // 1: sysoperalog.v1.SysOperaLogPageReq
	(*SysOperaLogPageReply)(nil),      // 2: sysoperalog.v1.SysOperaLogPageReply
	(*SysOperaLogReq)(nil),            // 3: sysoperalog.v1.SysOperaLogReq
	(*SysOperaLogReply)(nil),          // 4: sysoperalog.v1.SysOperaLogReply
	(*SysOperaLogCreateReq)(nil),      // 5: sysoperalog.v1.SysOperaLogCreateReq
	(*SysOperaLogCreateReply)(nil),    // 6: sysoperalog.v1.SysOperaLogCreateReply
	(*SysOperaLogUpdateReq)(nil),      // 7: sysoperalog.v1.SysOperaLogUpdateReq
	(*SysOperaLogUpdateReply)(nil),    // 8: sysoperalog.v1.SysOperaLogUpdateReply
	(*SysOperaLogDeleteReq)(nil),      // 9: sysoperalog.v1.SysOperaLogDeleteReq
	(*SysOperaLogBatchDeleteReq)(nil), // 10: sysoperalog.v1.SysOperaLogBatchDeleteReq
	(*SysOperaLogDeleteReply)(nil),    // 11: sysoperalog.v1.SysOperaLogDeleteReply
	(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),          // 13: pagin.Pagination
}
var file_api_admin_sysoperalog_v1_sys_opera_log_proto_depIdxs = []int32{
	12, // 0: sysoperalog.v1.SysOperaLogData.operTime:type_name -> google.protobuf.Timestamp
	12, // 1: sysoperalog.v1.SysOperaLogData.createdAt:type_name -> google.protobuf.Timestamp
	12, // 2: sysoperalog.v1.SysOperaLogData.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 3: sysoperalog.v1.SysOperaLogPageReq.pagin:type_name -> pagin.Pagination
	3,  // 4: sysoperalog.v1.SysOperaLogPageReq.param:type_name -> sysoperalog.v1.SysOperaLogReq
	0,  // 5: sysoperalog.v1.SysOperaLogPageReply.items:type_name -> sysoperalog.v1.SysOperaLogData
	12, // 6: sysoperalog.v1.SysOperaLogReq.operTime:type_name -> google.protobuf.Timestamp
	12, // 7: sysoperalog.v1.SysOperaLogReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 8: sysoperalog.v1.SysOperaLogReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 9: sysoperalog.v1.SysOperaLogReply.result:type_name -> sysoperalog.v1.SysOperaLogData
	12, // 10: sysoperalog.v1.SysOperaLogCreateReq.operTime:type_name -> google.protobuf.Timestamp
	0,  // 11: sysoperalog.v1.SysOperaLogCreateReply.result:type_name -> sysoperalog.v1.SysOperaLogData
	12, // 12: sysoperalog.v1.SysOperaLogUpdateReq.operTime:type_name -> google.protobuf.Timestamp
	0,  // 13: sysoperalog.v1.SysOperaLogUpdateReply.result:type_name -> sysoperalog.v1.SysOperaLogData
	1,  // 14: sysoperalog.v1.SysOperaLog.GetPageSysOperaLog:input_type -> sysoperalog.v1.SysOperaLogPageReq
	3,  // 15: sysoperalog.v1.SysOperaLog.GetSysOperaLog:input_type -> sysoperalog.v1.SysOperaLogReq
	7,  // 16: sysoperalog.v1.SysOperaLog.UpdateSysOperaLog:input_type -> sysoperalog.v1.SysOperaLogUpdateReq
	5,  // 17: sysoperalog.v1.SysOperaLog.CreateSysOperaLog:input_type -> sysoperalog.v1.SysOperaLogCreateReq
	9,  // 18: sysoperalog.v1.SysOperaLog.DeleteSysOperaLog:input_type -> sysoperalog.v1.SysOperaLogDeleteReq
	10, // 19: sysoperalog.v1.SysOperaLog.BatchDeleteSysOperaLog:input_type -> sysoperalog.v1.SysOperaLogBatchDeleteReq
	2,  // 20: sysoperalog.v1.SysOperaLog.GetPageSysOperaLog:output_type -> sysoperalog.v1.SysOperaLogPageReply
	4,  // 21: sysoperalog.v1.SysOperaLog.GetSysOperaLog:output_type -> sysoperalog.v1.SysOperaLogReply
	8,  // 22: sysoperalog.v1.SysOperaLog.UpdateSysOperaLog:output_type -> sysoperalog.v1.SysOperaLogUpdateReply
	6,  // 23: sysoperalog.v1.SysOperaLog.CreateSysOperaLog:output_type -> sysoperalog.v1.SysOperaLogCreateReply
	11, // 24: sysoperalog.v1.SysOperaLog.DeleteSysOperaLog:output_type -> sysoperalog.v1.SysOperaLogDeleteReply
	11, // 25: sysoperalog.v1.SysOperaLog.BatchDeleteSysOperaLog:output_type -> sysoperalog.v1.SysOperaLogDeleteReply
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_admin_sysoperalog_v1_sys_opera_log_proto_init() }
func file_api_admin_sysoperalog_v1_sys_opera_log_proto_init() {
	if File_api_admin_sysoperalog_v1_sys_opera_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysOperaLogDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_admin_sysoperalog_v1_sys_opera_log_proto_goTypes,
		DependencyIndexes: file_api_admin_sysoperalog_v1_sys_opera_log_proto_depIdxs,
		MessageInfos:      file_api_admin_sysoperalog_v1_sys_opera_log_proto_msgTypes,
	}.Build()
	File_api_admin_sysoperalog_v1_sys_opera_log_proto = out.File
	file_api_admin_sysoperalog_v1_sys_opera_log_proto_rawDesc = nil
	file_api_admin_sysoperalog_v1_sys_opera_log_proto_goTypes = nil
	file_api_admin_sysoperalog_v1_sys_opera_log_proto_depIdxs = nil
}
