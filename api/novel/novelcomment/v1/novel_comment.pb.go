// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/novelcomment/v1/novel_comment.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type NovelCommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,2,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//用户Id
	UserId int64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	//评论用户头像
	Avatar string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,5,opt,name=userName,proto3" json:"userName,omitempty"`
	//回复用户
	RepUserId int64 `protobuf:"varint,6,opt,name=repUserId,proto3" json:"repUserId,omitempty"`
	//回复用户ID
	RepUserName string `protobuf:"bytes,7,opt,name=repUserName,proto3" json:"repUserName,omitempty"`
	//回复内容
	Content string `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	//评分,除以10
	Score int32 `protobuf:"varint,9,opt,name=score,proto3" json:"score,omitempty"`
	//回复评论ID
	PId int64 `protobuf:"varint,10,opt,name=pId,proto3" json:"pId,omitempty"`
	//置顶
	IsTop bool `protobuf:"varint,11,opt,name=isTop,proto3" json:"isTop,omitempty"`
	//状态,0
	State string `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	//高亮
	IsHighlight bool `protobuf:"varint,13,opt,name=isHighlight,proto3" json:"isHighlight,omitempty"`
	//是否热门
	IsHot bool `protobuf:"varint,14,opt,name=isHot,proto3" json:"isHot,omitempty"`
	//备注
	Remark string `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,18,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,19,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,20,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelCommentData) Reset() {
	*x = NovelCommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentData) ProtoMessage() {}

func (x *NovelCommentData) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentData.ProtoReflect.Descriptor instead.
func (*NovelCommentData) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{0}
}

func (x *NovelCommentData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelCommentData) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelCommentData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelCommentData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *NovelCommentData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelCommentData) GetRepUserId() int64 {
	if x != nil {
		return x.RepUserId
	}
	return 0
}

func (x *NovelCommentData) GetRepUserName() string {
	if x != nil {
		return x.RepUserName
	}
	return ""
}

func (x *NovelCommentData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NovelCommentData) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelCommentData) GetPId() int64 {
	if x != nil {
		return x.PId
	}
	return 0
}

func (x *NovelCommentData) GetIsTop() bool {
	if x != nil {
		return x.IsTop
	}
	return false
}

func (x *NovelCommentData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NovelCommentData) GetIsHighlight() bool {
	if x != nil {
		return x.IsHighlight
	}
	return false
}

func (x *NovelCommentData) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *NovelCommentData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelCommentData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelCommentData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelCommentData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelCommentData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelCommentData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type NovelCommentPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *NovelCommentReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *NovelCommentPageReq) Reset() {
	*x = NovelCommentPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentPageReq) ProtoMessage() {}

func (x *NovelCommentPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentPageReq.ProtoReflect.Descriptor instead.
func (*NovelCommentPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{1}
}

func (x *NovelCommentPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *NovelCommentPageReq) GetParam() *NovelCommentReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type NovelCommentPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*NovelCommentData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NovelCommentPageReply) Reset() {
	*x = NovelCommentPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentPageReply) ProtoMessage() {}

func (x *NovelCommentPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentPageReply.ProtoReflect.Descriptor instead.
func (*NovelCommentPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{2}
}

func (x *NovelCommentPageReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelCommentPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelCommentPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NovelCommentPageReply) GetItems() []*NovelCommentData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type NovelCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,2,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//用户Id
	UserId int64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	//评论用户头像
	Avatar string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,5,opt,name=userName,proto3" json:"userName,omitempty"`
	//回复用户
	RepUserId int64 `protobuf:"varint,6,opt,name=repUserId,proto3" json:"repUserId,omitempty"`
	//回复用户ID
	RepUserName string `protobuf:"bytes,7,opt,name=repUserName,proto3" json:"repUserName,omitempty"`
	//回复内容
	Content string `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	//评分,除以10
	Score int32 `protobuf:"varint,9,opt,name=score,proto3" json:"score,omitempty"`
	//回复评论ID
	PId int64 `protobuf:"varint,10,opt,name=pId,proto3" json:"pId,omitempty"`
	//置顶
	IsTop bool `protobuf:"varint,11,opt,name=isTop,proto3" json:"isTop,omitempty"`
	//状态,0
	State string `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	//高亮
	IsHighlight bool `protobuf:"varint,13,opt,name=isHighlight,proto3" json:"isHighlight,omitempty"`
	//是否热门
	IsHot bool `protobuf:"varint,14,opt,name=isHot,proto3" json:"isHot,omitempty"`
	//备注
	Remark string `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,18,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,19,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,20,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelCommentReq) Reset() {
	*x = NovelCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentReq) ProtoMessage() {}

func (x *NovelCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentReq.ProtoReflect.Descriptor instead.
func (*NovelCommentReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{3}
}

func (x *NovelCommentReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelCommentReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelCommentReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelCommentReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *NovelCommentReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelCommentReq) GetRepUserId() int64 {
	if x != nil {
		return x.RepUserId
	}
	return 0
}

func (x *NovelCommentReq) GetRepUserName() string {
	if x != nil {
		return x.RepUserName
	}
	return ""
}

func (x *NovelCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NovelCommentReq) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelCommentReq) GetPId() int64 {
	if x != nil {
		return x.PId
	}
	return 0
}

func (x *NovelCommentReq) GetIsTop() bool {
	if x != nil {
		return x.IsTop
	}
	return false
}

func (x *NovelCommentReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NovelCommentReq) GetIsHighlight() bool {
	if x != nil {
		return x.IsHighlight
	}
	return false
}

func (x *NovelCommentReq) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *NovelCommentReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelCommentReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelCommentReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelCommentReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelCommentReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelCommentReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type NovelCommentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelCommentData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelCommentReply) Reset() {
	*x = NovelCommentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentReply) ProtoMessage() {}

func (x *NovelCommentReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentReply.ProtoReflect.Descriptor instead.
func (*NovelCommentReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{4}
}

func (x *NovelCommentReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelCommentReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelCommentReply) GetResult() *NovelCommentData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建NovelComment请求
type NovelCommentCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//小说编号
	NovelId int64 `protobuf:"varint,1,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//用户Id
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//评论用户头像
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	//回复用户
	RepUserId int64 `protobuf:"varint,5,opt,name=repUserId,proto3" json:"repUserId,omitempty"`
	//回复用户ID
	RepUserName string `protobuf:"bytes,6,opt,name=repUserName,proto3" json:"repUserName,omitempty"`
	//回复内容
	Content string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	//评分,除以10
	Score int32 `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	//回复评论ID
	PId int64 `protobuf:"varint,9,opt,name=pId,proto3" json:"pId,omitempty"`
	//置顶
	IsTop bool `protobuf:"varint,10,opt,name=isTop,proto3" json:"isTop,omitempty"`
	//状态,0
	State string `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	//高亮
	IsHighlight bool `protobuf:"varint,12,opt,name=isHighlight,proto3" json:"isHighlight,omitempty"`
	//是否热门
	IsHot bool `protobuf:"varint,13,opt,name=isHot,proto3" json:"isHot,omitempty"`
	//备注
	Remark string `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelCommentCreateReq) Reset() {
	*x = NovelCommentCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentCreateReq) ProtoMessage() {}

func (x *NovelCommentCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentCreateReq.ProtoReflect.Descriptor instead.
func (*NovelCommentCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{5}
}

func (x *NovelCommentCreateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelCommentCreateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelCommentCreateReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *NovelCommentCreateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelCommentCreateReq) GetRepUserId() int64 {
	if x != nil {
		return x.RepUserId
	}
	return 0
}

func (x *NovelCommentCreateReq) GetRepUserName() string {
	if x != nil {
		return x.RepUserName
	}
	return ""
}

func (x *NovelCommentCreateReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NovelCommentCreateReq) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelCommentCreateReq) GetPId() int64 {
	if x != nil {
		return x.PId
	}
	return 0
}

func (x *NovelCommentCreateReq) GetIsTop() bool {
	if x != nil {
		return x.IsTop
	}
	return false
}

func (x *NovelCommentCreateReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NovelCommentCreateReq) GetIsHighlight() bool {
	if x != nil {
		return x.IsHighlight
	}
	return false
}

func (x *NovelCommentCreateReq) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *NovelCommentCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 创建NovelComment返回
type NovelCommentCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelCommentData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelCommentCreateReply) Reset() {
	*x = NovelCommentCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentCreateReply) ProtoMessage() {}

func (x *NovelCommentCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentCreateReply.ProtoReflect.Descriptor instead.
func (*NovelCommentCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{6}
}

func (x *NovelCommentCreateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelCommentCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelCommentCreateReply) GetResult() *NovelCommentData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新NovelComment请求
type NovelCommentUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,2,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//用户Id
	UserId int64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	//评论用户头像
	Avatar string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,5,opt,name=userName,proto3" json:"userName,omitempty"`
	//回复用户
	RepUserId int64 `protobuf:"varint,6,opt,name=repUserId,proto3" json:"repUserId,omitempty"`
	//回复用户ID
	RepUserName string `protobuf:"bytes,7,opt,name=repUserName,proto3" json:"repUserName,omitempty"`
	//回复内容
	Content string `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	//评分,除以10
	Score int32 `protobuf:"varint,9,opt,name=score,proto3" json:"score,omitempty"`
	//回复评论ID
	PId int64 `protobuf:"varint,10,opt,name=pId,proto3" json:"pId,omitempty"`
	//置顶
	IsTop bool `protobuf:"varint,11,opt,name=isTop,proto3" json:"isTop,omitempty"`
	//状态,0
	State string `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	//高亮
	IsHighlight bool `protobuf:"varint,13,opt,name=isHighlight,proto3" json:"isHighlight,omitempty"`
	//是否热门
	IsHot bool `protobuf:"varint,14,opt,name=isHot,proto3" json:"isHot,omitempty"`
	//备注
	Remark string `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelCommentUpdateReq) Reset() {
	*x = NovelCommentUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentUpdateReq) ProtoMessage() {}

func (x *NovelCommentUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentUpdateReq.ProtoReflect.Descriptor instead.
func (*NovelCommentUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{7}
}

func (x *NovelCommentUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelCommentUpdateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelCommentUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelCommentUpdateReq) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *NovelCommentUpdateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelCommentUpdateReq) GetRepUserId() int64 {
	if x != nil {
		return x.RepUserId
	}
	return 0
}

func (x *NovelCommentUpdateReq) GetRepUserName() string {
	if x != nil {
		return x.RepUserName
	}
	return ""
}

func (x *NovelCommentUpdateReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NovelCommentUpdateReq) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelCommentUpdateReq) GetPId() int64 {
	if x != nil {
		return x.PId
	}
	return 0
}

func (x *NovelCommentUpdateReq) GetIsTop() bool {
	if x != nil {
		return x.IsTop
	}
	return false
}

func (x *NovelCommentUpdateReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *NovelCommentUpdateReq) GetIsHighlight() bool {
	if x != nil {
		return x.IsHighlight
	}
	return false
}

func (x *NovelCommentUpdateReq) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *NovelCommentUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 更新NovelComment返回
type NovelCommentUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelCommentData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelCommentUpdateReply) Reset() {
	*x = NovelCommentUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentUpdateReply) ProtoMessage() {}

func (x *NovelCommentUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentUpdateReply.ProtoReflect.Descriptor instead.
func (*NovelCommentUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{8}
}

func (x *NovelCommentUpdateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelCommentUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelCommentUpdateReply) GetResult() *NovelCommentData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除NovelComment请求
type NovelCommentDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NovelCommentDeleteReq) Reset() {
	*x = NovelCommentDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentDeleteReq) ProtoMessage() {}

func (x *NovelCommentDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelCommentDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{9}
}

func (x *NovelCommentDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除NovelComment请求
type NovelCommentBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *NovelCommentBatchDeleteReq) Reset() {
	*x = NovelCommentBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentBatchDeleteReq) ProtoMessage() {}

func (x *NovelCommentBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelCommentBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{10}
}

func (x *NovelCommentBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除NovelComment返回
type NovelCommentDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelCommentDeleteReply) Reset() {
	*x = NovelCommentDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCommentDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCommentDeleteReply) ProtoMessage() {}

func (x *NovelCommentDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCommentDeleteReply.ProtoReflect.Descriptor instead.
func (*NovelCommentDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP(), []int{11}
}

func (x *NovelCommentDeleteReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelCommentDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelCommentDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_novelcomment_v1_novel_comment_proto protoreflect.FileDescriptor

var file_api_novel_novelcomment_v1_novel_comment_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce,
	0x04, 0x0a, 0x10, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x73, 0x54, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x48,
	0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x76, 0x0a, 0x13, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12,
	0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcd,
	0x04, 0x0a, 0x0f, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x54, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x48, 0x6f,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7c,
	0x0a, 0x11, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfb, 0x02, 0x0a,
	0x15, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x54, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48,
	0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x8b, 0x03, 0x0a, 0x15, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x82, 0x01,
	0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x27, 0x0a, 0x15, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1a, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x17, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xb7, 0x06, 0x0a,
	0x0c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x83, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x77, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x86, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x23, 0x5a, 0x21, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_novel_novelcomment_v1_novel_comment_proto_rawDescOnce sync.Once
	file_api_novel_novelcomment_v1_novel_comment_proto_rawDescData = file_api_novel_novelcomment_v1_novel_comment_proto_rawDesc
)

func file_api_novel_novelcomment_v1_novel_comment_proto_rawDescGZIP() []byte {
	file_api_novel_novelcomment_v1_novel_comment_proto_rawDescOnce.Do(func() {
		file_api_novel_novelcomment_v1_novel_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_novelcomment_v1_novel_comment_proto_rawDescData)
	})
	return file_api_novel_novelcomment_v1_novel_comment_proto_rawDescData
}

var file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_novel_novelcomment_v1_novel_comment_proto_goTypes = []interface{}{
	(*NovelCommentData)(nil),           // 0: novelcomment.v1.NovelCommentData
	(*NovelCommentPageReq)(nil),        // 1: novelcomment.v1.NovelCommentPageReq
	(*NovelCommentPageReply)(nil),      // 2: novelcomment.v1.NovelCommentPageReply
	(*NovelCommentReq)(nil),            // 3: novelcomment.v1.NovelCommentReq
	(*NovelCommentReply)(nil),          // 4: novelcomment.v1.NovelCommentReply
	(*NovelCommentCreateReq)(nil),      // 5: novelcomment.v1.NovelCommentCreateReq
	(*NovelCommentCreateReply)(nil),    // 6: novelcomment.v1.NovelCommentCreateReply
	(*NovelCommentUpdateReq)(nil),      // 7: novelcomment.v1.NovelCommentUpdateReq
	(*NovelCommentUpdateReply)(nil),    // 8: novelcomment.v1.NovelCommentUpdateReply
	(*NovelCommentDeleteReq)(nil),      // 9: novelcomment.v1.NovelCommentDeleteReq
	(*NovelCommentBatchDeleteReq)(nil), // 10: novelcomment.v1.NovelCommentBatchDeleteReq
	(*NovelCommentDeleteReply)(nil),    // 11: novelcomment.v1.NovelCommentDeleteReply
	(*timestamppb.Timestamp)(nil),      // 12: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),           // 13: pagin.Pagination
}
var file_api_novel_novelcomment_v1_novel_comment_proto_depIdxs = []int32{
	12, // 0: novelcomment.v1.NovelCommentData.createdAt:type_name -> google.protobuf.Timestamp
	12, // 1: novelcomment.v1.NovelCommentData.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 2: novelcomment.v1.NovelCommentPageReq.pagin:type_name -> pagin.Pagination
	3,  // 3: novelcomment.v1.NovelCommentPageReq.param:type_name -> novelcomment.v1.NovelCommentReq
	0,  // 4: novelcomment.v1.NovelCommentPageReply.items:type_name -> novelcomment.v1.NovelCommentData
	12, // 5: novelcomment.v1.NovelCommentReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 6: novelcomment.v1.NovelCommentReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 7: novelcomment.v1.NovelCommentReply.result:type_name -> novelcomment.v1.NovelCommentData
	0,  // 8: novelcomment.v1.NovelCommentCreateReply.result:type_name -> novelcomment.v1.NovelCommentData
	0,  // 9: novelcomment.v1.NovelCommentUpdateReply.result:type_name -> novelcomment.v1.NovelCommentData
	1,  // 10: novelcomment.v1.NovelComment.GetPageNovelComment:input_type -> novelcomment.v1.NovelCommentPageReq
	3,  // 11: novelcomment.v1.NovelComment.GetNovelComment:input_type -> novelcomment.v1.NovelCommentReq
	7,  // 12: novelcomment.v1.NovelComment.UpdateNovelComment:input_type -> novelcomment.v1.NovelCommentUpdateReq
	5,  // 13: novelcomment.v1.NovelComment.CreateNovelComment:input_type -> novelcomment.v1.NovelCommentCreateReq
	9,  // 14: novelcomment.v1.NovelComment.DeleteNovelComment:input_type -> novelcomment.v1.NovelCommentDeleteReq
	10, // 15: novelcomment.v1.NovelComment.BatchDeleteNovelComment:input_type -> novelcomment.v1.NovelCommentBatchDeleteReq
	2,  // 16: novelcomment.v1.NovelComment.GetPageNovelComment:output_type -> novelcomment.v1.NovelCommentPageReply
	4,  // 17: novelcomment.v1.NovelComment.GetNovelComment:output_type -> novelcomment.v1.NovelCommentReply
	8,  // 18: novelcomment.v1.NovelComment.UpdateNovelComment:output_type -> novelcomment.v1.NovelCommentUpdateReply
	6,  // 19: novelcomment.v1.NovelComment.CreateNovelComment:output_type -> novelcomment.v1.NovelCommentCreateReply
	11, // 20: novelcomment.v1.NovelComment.DeleteNovelComment:output_type -> novelcomment.v1.NovelCommentDeleteReply
	11, // 21: novelcomment.v1.NovelComment.BatchDeleteNovelComment:output_type -> novelcomment.v1.NovelCommentDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_novel_novelcomment_v1_novel_comment_proto_init() }
func file_api_novel_novelcomment_v1_novel_comment_proto_init() {
	if File_api_novel_novelcomment_v1_novel_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCommentDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_novelcomment_v1_novel_comment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_novelcomment_v1_novel_comment_proto_goTypes,
		DependencyIndexes: file_api_novel_novelcomment_v1_novel_comment_proto_depIdxs,
		MessageInfos:      file_api_novel_novelcomment_v1_novel_comment_proto_msgTypes,
	}.Build()
	File_api_novel_novelcomment_v1_novel_comment_proto = out.File
	file_api_novel_novelcomment_v1_novel_comment_proto_rawDesc = nil
	file_api_novel_novelcomment_v1_novel_comment_proto_goTypes = nil
	file_api_novel_novelcomment_v1_novel_comment_proto_depIdxs = nil
}
