// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/admin/systables/v1/sys_tables.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询搜索请求
type SysTablesPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *SysTablesReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *SysTablesPageReq) Reset() {
	*x = SysTablesPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesPageReq) ProtoMessage() {}

func (x *SysTablesPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesPageReq.ProtoReflect.Descriptor instead.
func (*SysTablesPageReq) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{0}
}

func (x *SysTablesPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *SysTablesPageReq) GetParam() *SysTablesReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type SysTablesPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条目
	Items []*SysTablesReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SysTablesPageReply) Reset() {
	*x = SysTablesPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesPageReply) ProtoMessage() {}

func (x *SysTablesPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesPageReply.ProtoReflect.Descriptor instead.
func (*SysTablesPageReply) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{1}
}

func (x *SysTablesPageReply) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *SysTablesPageReply) GetItems() []*SysTablesReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type SysTablesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//表名称
	TableName string `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`
	//表备注
	TableComment string `protobuf:"bytes,3,opt,name=tableComment,proto3" json:"tableComment,omitempty"`
	//类名
	ClassName string `protobuf:"bytes,4,opt,name=className,proto3" json:"className,omitempty"`
	//
	TplCategory string `protobuf:"bytes,5,opt,name=tplCategory,proto3" json:"tplCategory,omitempty"`
	//包名
	PackageName string `protobuf:"bytes,6,opt,name=packageName,proto3" json:"packageName,omitempty"`
	//go文件名
	ModuleName string `protobuf:"bytes,7,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	//前端文件名
	ModuleFrontName string `protobuf:"bytes,8,opt,name=moduleFrontName,proto3" json:"moduleFrontName,omitempty"`
	//
	BusinessName string `protobuf:"bytes,9,opt,name=businessName,proto3" json:"businessName,omitempty"`
	//功能名称
	FunctionName string `protobuf:"bytes,10,opt,name=functionName,proto3" json:"functionName,omitempty"`
	//功能作者
	FunctionAuthor string `protobuf:"bytes,11,opt,name=functionAuthor,proto3" json:"functionAuthor,omitempty"`
	//
	PkColumn string `protobuf:"bytes,12,opt,name=pkColumn,proto3" json:"pkColumn,omitempty"`
	//
	PkGoField string `protobuf:"bytes,13,opt,name=pkGoField,proto3" json:"pkGoField,omitempty"`
	//
	PkJsonField string `protobuf:"bytes,14,opt,name=pkJsonField,proto3" json:"pkJsonField,omitempty"`
	//
	Options string `protobuf:"bytes,15,opt,name=options,proto3" json:"options,omitempty"`
	//
	TreeCode string `protobuf:"bytes,16,opt,name=treeCode,proto3" json:"treeCode,omitempty"`
	//
	TreeParentCode string `protobuf:"bytes,17,opt,name=treeParentCode,proto3" json:"treeParentCode,omitempty"`
	//
	TreeName string `protobuf:"bytes,18,opt,name=treeName,proto3" json:"treeName,omitempty"`
	//
	Tree bool `protobuf:"varint,19,opt,name=tree,proto3" json:"tree,omitempty"`
	//
	Crud bool `protobuf:"varint,20,opt,name=crud,proto3" json:"crud,omitempty"`
	//
	Remark string `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	IsDataScope int32 `protobuf:"varint,22,opt,name=isDataScope,proto3" json:"isDataScope,omitempty"`
	//
	IsActions int32 `protobuf:"varint,23,opt,name=isActions,proto3" json:"isActions,omitempty"`
	//
	IsAuth int32 `protobuf:"varint,24,opt,name=isAuth,proto3" json:"isAuth,omitempty"`
	//
	IsLogicalDelete string `protobuf:"bytes,25,opt,name=isLogicalDelete,proto3" json:"isLogicalDelete,omitempty"`
	//
	LogicalDelete bool `protobuf:"varint,26,opt,name=logicalDelete,proto3" json:"logicalDelete,omitempty"`
	//
	LogicalDeleteColumn string `protobuf:"bytes,27,opt,name=logicalDeleteColumn,proto3" json:"logicalDeleteColumn,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,30,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,31,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,32,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysTablesReq) Reset() {
	*x = SysTablesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesReq) ProtoMessage() {}

func (x *SysTablesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesReq.ProtoReflect.Descriptor instead.
func (*SysTablesReq) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{2}
}

func (x *SysTablesReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysTablesReq) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SysTablesReq) GetTableComment() string {
	if x != nil {
		return x.TableComment
	}
	return ""
}

func (x *SysTablesReq) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SysTablesReq) GetTplCategory() string {
	if x != nil {
		return x.TplCategory
	}
	return ""
}

func (x *SysTablesReq) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *SysTablesReq) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *SysTablesReq) GetModuleFrontName() string {
	if x != nil {
		return x.ModuleFrontName
	}
	return ""
}

func (x *SysTablesReq) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *SysTablesReq) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SysTablesReq) GetFunctionAuthor() string {
	if x != nil {
		return x.FunctionAuthor
	}
	return ""
}

func (x *SysTablesReq) GetPkColumn() string {
	if x != nil {
		return x.PkColumn
	}
	return ""
}

func (x *SysTablesReq) GetPkGoField() string {
	if x != nil {
		return x.PkGoField
	}
	return ""
}

func (x *SysTablesReq) GetPkJsonField() string {
	if x != nil {
		return x.PkJsonField
	}
	return ""
}

func (x *SysTablesReq) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *SysTablesReq) GetTreeCode() string {
	if x != nil {
		return x.TreeCode
	}
	return ""
}

func (x *SysTablesReq) GetTreeParentCode() string {
	if x != nil {
		return x.TreeParentCode
	}
	return ""
}

func (x *SysTablesReq) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *SysTablesReq) GetTree() bool {
	if x != nil {
		return x.Tree
	}
	return false
}

func (x *SysTablesReq) GetCrud() bool {
	if x != nil {
		return x.Crud
	}
	return false
}

func (x *SysTablesReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysTablesReq) GetIsDataScope() int32 {
	if x != nil {
		return x.IsDataScope
	}
	return 0
}

func (x *SysTablesReq) GetIsActions() int32 {
	if x != nil {
		return x.IsActions
	}
	return 0
}

func (x *SysTablesReq) GetIsAuth() int32 {
	if x != nil {
		return x.IsAuth
	}
	return 0
}

func (x *SysTablesReq) GetIsLogicalDelete() string {
	if x != nil {
		return x.IsLogicalDelete
	}
	return ""
}

func (x *SysTablesReq) GetLogicalDelete() bool {
	if x != nil {
		return x.LogicalDelete
	}
	return false
}

func (x *SysTablesReq) GetLogicalDeleteColumn() string {
	if x != nil {
		return x.LogicalDeleteColumn
	}
	return ""
}

func (x *SysTablesReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysTablesReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysTablesReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysTablesReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysTablesReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索返回
type SysTablesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//表名称
	TableName string `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`
	//表备注
	TableComment string `protobuf:"bytes,3,opt,name=tableComment,proto3" json:"tableComment,omitempty"`
	//类名
	ClassName string `protobuf:"bytes,4,opt,name=className,proto3" json:"className,omitempty"`
	//
	TplCategory string `protobuf:"bytes,5,opt,name=tplCategory,proto3" json:"tplCategory,omitempty"`
	//包名
	PackageName string `protobuf:"bytes,6,opt,name=packageName,proto3" json:"packageName,omitempty"`
	//go文件名
	ModuleName string `protobuf:"bytes,7,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	//前端文件名
	ModuleFrontName string `protobuf:"bytes,8,opt,name=moduleFrontName,proto3" json:"moduleFrontName,omitempty"`
	//
	BusinessName string `protobuf:"bytes,9,opt,name=businessName,proto3" json:"businessName,omitempty"`
	//功能名称
	FunctionName string `protobuf:"bytes,10,opt,name=functionName,proto3" json:"functionName,omitempty"`
	//功能作者
	FunctionAuthor string `protobuf:"bytes,11,opt,name=functionAuthor,proto3" json:"functionAuthor,omitempty"`
	//
	PkColumn string `protobuf:"bytes,12,opt,name=pkColumn,proto3" json:"pkColumn,omitempty"`
	//
	PkGoField string `protobuf:"bytes,13,opt,name=pkGoField,proto3" json:"pkGoField,omitempty"`
	//
	PkJsonField string `protobuf:"bytes,14,opt,name=pkJsonField,proto3" json:"pkJsonField,omitempty"`
	//
	Options string `protobuf:"bytes,15,opt,name=options,proto3" json:"options,omitempty"`
	//
	TreeCode string `protobuf:"bytes,16,opt,name=treeCode,proto3" json:"treeCode,omitempty"`
	//
	TreeParentCode string `protobuf:"bytes,17,opt,name=treeParentCode,proto3" json:"treeParentCode,omitempty"`
	//
	TreeName string `protobuf:"bytes,18,opt,name=treeName,proto3" json:"treeName,omitempty"`
	//
	Tree bool `protobuf:"varint,19,opt,name=tree,proto3" json:"tree,omitempty"`
	//
	Crud bool `protobuf:"varint,20,opt,name=crud,proto3" json:"crud,omitempty"`
	//
	Remark string `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	IsDataScope int32 `protobuf:"varint,22,opt,name=isDataScope,proto3" json:"isDataScope,omitempty"`
	//
	IsActions int32 `protobuf:"varint,23,opt,name=isActions,proto3" json:"isActions,omitempty"`
	//
	IsAuth int32 `protobuf:"varint,24,opt,name=isAuth,proto3" json:"isAuth,omitempty"`
	//
	IsLogicalDelete string `protobuf:"bytes,25,opt,name=isLogicalDelete,proto3" json:"isLogicalDelete,omitempty"`
	//
	LogicalDelete bool `protobuf:"varint,26,opt,name=logicalDelete,proto3" json:"logicalDelete,omitempty"`
	//
	LogicalDeleteColumn string `protobuf:"bytes,27,opt,name=logicalDeleteColumn,proto3" json:"logicalDeleteColumn,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,30,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,31,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,32,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysTablesReply) Reset() {
	*x = SysTablesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesReply) ProtoMessage() {}

func (x *SysTablesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesReply.ProtoReflect.Descriptor instead.
func (*SysTablesReply) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{3}
}

func (x *SysTablesReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysTablesReply) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SysTablesReply) GetTableComment() string {
	if x != nil {
		return x.TableComment
	}
	return ""
}

func (x *SysTablesReply) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SysTablesReply) GetTplCategory() string {
	if x != nil {
		return x.TplCategory
	}
	return ""
}

func (x *SysTablesReply) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *SysTablesReply) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *SysTablesReply) GetModuleFrontName() string {
	if x != nil {
		return x.ModuleFrontName
	}
	return ""
}

func (x *SysTablesReply) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *SysTablesReply) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SysTablesReply) GetFunctionAuthor() string {
	if x != nil {
		return x.FunctionAuthor
	}
	return ""
}

func (x *SysTablesReply) GetPkColumn() string {
	if x != nil {
		return x.PkColumn
	}
	return ""
}

func (x *SysTablesReply) GetPkGoField() string {
	if x != nil {
		return x.PkGoField
	}
	return ""
}

func (x *SysTablesReply) GetPkJsonField() string {
	if x != nil {
		return x.PkJsonField
	}
	return ""
}

func (x *SysTablesReply) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *SysTablesReply) GetTreeCode() string {
	if x != nil {
		return x.TreeCode
	}
	return ""
}

func (x *SysTablesReply) GetTreeParentCode() string {
	if x != nil {
		return x.TreeParentCode
	}
	return ""
}

func (x *SysTablesReply) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *SysTablesReply) GetTree() bool {
	if x != nil {
		return x.Tree
	}
	return false
}

func (x *SysTablesReply) GetCrud() bool {
	if x != nil {
		return x.Crud
	}
	return false
}

func (x *SysTablesReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysTablesReply) GetIsDataScope() int32 {
	if x != nil {
		return x.IsDataScope
	}
	return 0
}

func (x *SysTablesReply) GetIsActions() int32 {
	if x != nil {
		return x.IsActions
	}
	return 0
}

func (x *SysTablesReply) GetIsAuth() int32 {
	if x != nil {
		return x.IsAuth
	}
	return 0
}

func (x *SysTablesReply) GetIsLogicalDelete() string {
	if x != nil {
		return x.IsLogicalDelete
	}
	return ""
}

func (x *SysTablesReply) GetLogicalDelete() bool {
	if x != nil {
		return x.LogicalDelete
	}
	return false
}

func (x *SysTablesReply) GetLogicalDeleteColumn() string {
	if x != nil {
		return x.LogicalDeleteColumn
	}
	return ""
}

func (x *SysTablesReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysTablesReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysTablesReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysTablesReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysTablesReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 创建SysTables请求
type SysTablesCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//表名称
	TableName string `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
	//表备注
	TableComment string `protobuf:"bytes,2,opt,name=tableComment,proto3" json:"tableComment,omitempty"`
	//类名
	ClassName string `protobuf:"bytes,3,opt,name=className,proto3" json:"className,omitempty"`
	//
	TplCategory string `protobuf:"bytes,4,opt,name=tplCategory,proto3" json:"tplCategory,omitempty"`
	//包名
	PackageName string `protobuf:"bytes,5,opt,name=packageName,proto3" json:"packageName,omitempty"`
	//go文件名
	ModuleName string `protobuf:"bytes,6,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	//前端文件名
	ModuleFrontName string `protobuf:"bytes,7,opt,name=moduleFrontName,proto3" json:"moduleFrontName,omitempty"`
	//
	BusinessName string `protobuf:"bytes,8,opt,name=businessName,proto3" json:"businessName,omitempty"`
	//功能名称
	FunctionName string `protobuf:"bytes,9,opt,name=functionName,proto3" json:"functionName,omitempty"`
	//功能作者
	FunctionAuthor string `protobuf:"bytes,10,opt,name=functionAuthor,proto3" json:"functionAuthor,omitempty"`
	//
	PkColumn string `protobuf:"bytes,11,opt,name=pkColumn,proto3" json:"pkColumn,omitempty"`
	//
	PkGoField string `protobuf:"bytes,12,opt,name=pkGoField,proto3" json:"pkGoField,omitempty"`
	//
	PkJsonField string `protobuf:"bytes,13,opt,name=pkJsonField,proto3" json:"pkJsonField,omitempty"`
	//
	Options string `protobuf:"bytes,14,opt,name=options,proto3" json:"options,omitempty"`
	//
	TreeCode string `protobuf:"bytes,15,opt,name=treeCode,proto3" json:"treeCode,omitempty"`
	//
	TreeParentCode string `protobuf:"bytes,16,opt,name=treeParentCode,proto3" json:"treeParentCode,omitempty"`
	//
	TreeName string `protobuf:"bytes,17,opt,name=treeName,proto3" json:"treeName,omitempty"`
	//
	Tree bool `protobuf:"varint,18,opt,name=tree,proto3" json:"tree,omitempty"`
	//
	Crud bool `protobuf:"varint,19,opt,name=crud,proto3" json:"crud,omitempty"`
	//
	Remark string `protobuf:"bytes,20,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	IsDataScope int32 `protobuf:"varint,21,opt,name=isDataScope,proto3" json:"isDataScope,omitempty"`
	//
	IsActions int32 `protobuf:"varint,22,opt,name=isActions,proto3" json:"isActions,omitempty"`
	//
	IsAuth int32 `protobuf:"varint,23,opt,name=isAuth,proto3" json:"isAuth,omitempty"`
	//
	IsLogicalDelete string `protobuf:"bytes,24,opt,name=isLogicalDelete,proto3" json:"isLogicalDelete,omitempty"`
	//
	LogicalDelete bool `protobuf:"varint,25,opt,name=logicalDelete,proto3" json:"logicalDelete,omitempty"`
	//
	LogicalDeleteColumn string `protobuf:"bytes,26,opt,name=logicalDeleteColumn,proto3" json:"logicalDeleteColumn,omitempty"`
}

func (x *SysTablesCreateReq) Reset() {
	*x = SysTablesCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesCreateReq) ProtoMessage() {}

func (x *SysTablesCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesCreateReq.ProtoReflect.Descriptor instead.
func (*SysTablesCreateReq) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{4}
}

func (x *SysTablesCreateReq) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SysTablesCreateReq) GetTableComment() string {
	if x != nil {
		return x.TableComment
	}
	return ""
}

func (x *SysTablesCreateReq) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SysTablesCreateReq) GetTplCategory() string {
	if x != nil {
		return x.TplCategory
	}
	return ""
}

func (x *SysTablesCreateReq) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *SysTablesCreateReq) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *SysTablesCreateReq) GetModuleFrontName() string {
	if x != nil {
		return x.ModuleFrontName
	}
	return ""
}

func (x *SysTablesCreateReq) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *SysTablesCreateReq) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SysTablesCreateReq) GetFunctionAuthor() string {
	if x != nil {
		return x.FunctionAuthor
	}
	return ""
}

func (x *SysTablesCreateReq) GetPkColumn() string {
	if x != nil {
		return x.PkColumn
	}
	return ""
}

func (x *SysTablesCreateReq) GetPkGoField() string {
	if x != nil {
		return x.PkGoField
	}
	return ""
}

func (x *SysTablesCreateReq) GetPkJsonField() string {
	if x != nil {
		return x.PkJsonField
	}
	return ""
}

func (x *SysTablesCreateReq) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *SysTablesCreateReq) GetTreeCode() string {
	if x != nil {
		return x.TreeCode
	}
	return ""
}

func (x *SysTablesCreateReq) GetTreeParentCode() string {
	if x != nil {
		return x.TreeParentCode
	}
	return ""
}

func (x *SysTablesCreateReq) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *SysTablesCreateReq) GetTree() bool {
	if x != nil {
		return x.Tree
	}
	return false
}

func (x *SysTablesCreateReq) GetCrud() bool {
	if x != nil {
		return x.Crud
	}
	return false
}

func (x *SysTablesCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysTablesCreateReq) GetIsDataScope() int32 {
	if x != nil {
		return x.IsDataScope
	}
	return 0
}

func (x *SysTablesCreateReq) GetIsActions() int32 {
	if x != nil {
		return x.IsActions
	}
	return 0
}

func (x *SysTablesCreateReq) GetIsAuth() int32 {
	if x != nil {
		return x.IsAuth
	}
	return 0
}

func (x *SysTablesCreateReq) GetIsLogicalDelete() string {
	if x != nil {
		return x.IsLogicalDelete
	}
	return ""
}

func (x *SysTablesCreateReq) GetLogicalDelete() bool {
	if x != nil {
		return x.LogicalDelete
	}
	return false
}

func (x *SysTablesCreateReq) GetLogicalDeleteColumn() string {
	if x != nil {
		return x.LogicalDeleteColumn
	}
	return ""
}

// 创建SysTables返回
type SysTablesCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//表名称
	TableName string `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`
	//表备注
	TableComment string `protobuf:"bytes,3,opt,name=tableComment,proto3" json:"tableComment,omitempty"`
	//类名
	ClassName string `protobuf:"bytes,4,opt,name=className,proto3" json:"className,omitempty"`
	//
	TplCategory string `protobuf:"bytes,5,opt,name=tplCategory,proto3" json:"tplCategory,omitempty"`
	//包名
	PackageName string `protobuf:"bytes,6,opt,name=packageName,proto3" json:"packageName,omitempty"`
	//go文件名
	ModuleName string `protobuf:"bytes,7,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	//前端文件名
	ModuleFrontName string `protobuf:"bytes,8,opt,name=moduleFrontName,proto3" json:"moduleFrontName,omitempty"`
	//
	BusinessName string `protobuf:"bytes,9,opt,name=businessName,proto3" json:"businessName,omitempty"`
	//功能名称
	FunctionName string `protobuf:"bytes,10,opt,name=functionName,proto3" json:"functionName,omitempty"`
	//功能作者
	FunctionAuthor string `protobuf:"bytes,11,opt,name=functionAuthor,proto3" json:"functionAuthor,omitempty"`
	//
	PkColumn string `protobuf:"bytes,12,opt,name=pkColumn,proto3" json:"pkColumn,omitempty"`
	//
	PkGoField string `protobuf:"bytes,13,opt,name=pkGoField,proto3" json:"pkGoField,omitempty"`
	//
	PkJsonField string `protobuf:"bytes,14,opt,name=pkJsonField,proto3" json:"pkJsonField,omitempty"`
	//
	Options string `protobuf:"bytes,15,opt,name=options,proto3" json:"options,omitempty"`
	//
	TreeCode string `protobuf:"bytes,16,opt,name=treeCode,proto3" json:"treeCode,omitempty"`
	//
	TreeParentCode string `protobuf:"bytes,17,opt,name=treeParentCode,proto3" json:"treeParentCode,omitempty"`
	//
	TreeName string `protobuf:"bytes,18,opt,name=treeName,proto3" json:"treeName,omitempty"`
	//
	Tree bool `protobuf:"varint,19,opt,name=tree,proto3" json:"tree,omitempty"`
	//
	Crud bool `protobuf:"varint,20,opt,name=crud,proto3" json:"crud,omitempty"`
	//
	Remark string `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	IsDataScope int32 `protobuf:"varint,22,opt,name=isDataScope,proto3" json:"isDataScope,omitempty"`
	//
	IsActions int32 `protobuf:"varint,23,opt,name=isActions,proto3" json:"isActions,omitempty"`
	//
	IsAuth int32 `protobuf:"varint,24,opt,name=isAuth,proto3" json:"isAuth,omitempty"`
	//
	IsLogicalDelete string `protobuf:"bytes,25,opt,name=isLogicalDelete,proto3" json:"isLogicalDelete,omitempty"`
	//
	LogicalDelete bool `protobuf:"varint,26,opt,name=logicalDelete,proto3" json:"logicalDelete,omitempty"`
	//
	LogicalDeleteColumn string `protobuf:"bytes,27,opt,name=logicalDeleteColumn,proto3" json:"logicalDeleteColumn,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,30,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,31,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,32,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysTablesCreateReply) Reset() {
	*x = SysTablesCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesCreateReply) ProtoMessage() {}

func (x *SysTablesCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesCreateReply.ProtoReflect.Descriptor instead.
func (*SysTablesCreateReply) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{5}
}

func (x *SysTablesCreateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysTablesCreateReply) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SysTablesCreateReply) GetTableComment() string {
	if x != nil {
		return x.TableComment
	}
	return ""
}

func (x *SysTablesCreateReply) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SysTablesCreateReply) GetTplCategory() string {
	if x != nil {
		return x.TplCategory
	}
	return ""
}

func (x *SysTablesCreateReply) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *SysTablesCreateReply) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *SysTablesCreateReply) GetModuleFrontName() string {
	if x != nil {
		return x.ModuleFrontName
	}
	return ""
}

func (x *SysTablesCreateReply) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *SysTablesCreateReply) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SysTablesCreateReply) GetFunctionAuthor() string {
	if x != nil {
		return x.FunctionAuthor
	}
	return ""
}

func (x *SysTablesCreateReply) GetPkColumn() string {
	if x != nil {
		return x.PkColumn
	}
	return ""
}

func (x *SysTablesCreateReply) GetPkGoField() string {
	if x != nil {
		return x.PkGoField
	}
	return ""
}

func (x *SysTablesCreateReply) GetPkJsonField() string {
	if x != nil {
		return x.PkJsonField
	}
	return ""
}

func (x *SysTablesCreateReply) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *SysTablesCreateReply) GetTreeCode() string {
	if x != nil {
		return x.TreeCode
	}
	return ""
}

func (x *SysTablesCreateReply) GetTreeParentCode() string {
	if x != nil {
		return x.TreeParentCode
	}
	return ""
}

func (x *SysTablesCreateReply) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *SysTablesCreateReply) GetTree() bool {
	if x != nil {
		return x.Tree
	}
	return false
}

func (x *SysTablesCreateReply) GetCrud() bool {
	if x != nil {
		return x.Crud
	}
	return false
}

func (x *SysTablesCreateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysTablesCreateReply) GetIsDataScope() int32 {
	if x != nil {
		return x.IsDataScope
	}
	return 0
}

func (x *SysTablesCreateReply) GetIsActions() int32 {
	if x != nil {
		return x.IsActions
	}
	return 0
}

func (x *SysTablesCreateReply) GetIsAuth() int32 {
	if x != nil {
		return x.IsAuth
	}
	return 0
}

func (x *SysTablesCreateReply) GetIsLogicalDelete() string {
	if x != nil {
		return x.IsLogicalDelete
	}
	return ""
}

func (x *SysTablesCreateReply) GetLogicalDelete() bool {
	if x != nil {
		return x.LogicalDelete
	}
	return false
}

func (x *SysTablesCreateReply) GetLogicalDeleteColumn() string {
	if x != nil {
		return x.LogicalDeleteColumn
	}
	return ""
}

func (x *SysTablesCreateReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysTablesCreateReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysTablesCreateReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysTablesCreateReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysTablesCreateReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 更新SysTables请求
type SysTablesUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//表名称
	TableName string `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`
	//表备注
	TableComment string `protobuf:"bytes,3,opt,name=tableComment,proto3" json:"tableComment,omitempty"`
	//类名
	ClassName string `protobuf:"bytes,4,opt,name=className,proto3" json:"className,omitempty"`
	//
	TplCategory string `protobuf:"bytes,5,opt,name=tplCategory,proto3" json:"tplCategory,omitempty"`
	//包名
	PackageName string `protobuf:"bytes,6,opt,name=packageName,proto3" json:"packageName,omitempty"`
	//go文件名
	ModuleName string `protobuf:"bytes,7,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	//前端文件名
	ModuleFrontName string `protobuf:"bytes,8,opt,name=moduleFrontName,proto3" json:"moduleFrontName,omitempty"`
	//
	BusinessName string `protobuf:"bytes,9,opt,name=businessName,proto3" json:"businessName,omitempty"`
	//功能名称
	FunctionName string `protobuf:"bytes,10,opt,name=functionName,proto3" json:"functionName,omitempty"`
	//功能作者
	FunctionAuthor string `protobuf:"bytes,11,opt,name=functionAuthor,proto3" json:"functionAuthor,omitempty"`
	//
	PkColumn string `protobuf:"bytes,12,opt,name=pkColumn,proto3" json:"pkColumn,omitempty"`
	//
	PkGoField string `protobuf:"bytes,13,opt,name=pkGoField,proto3" json:"pkGoField,omitempty"`
	//
	PkJsonField string `protobuf:"bytes,14,opt,name=pkJsonField,proto3" json:"pkJsonField,omitempty"`
	//
	Options string `protobuf:"bytes,15,opt,name=options,proto3" json:"options,omitempty"`
	//
	TreeCode string `protobuf:"bytes,16,opt,name=treeCode,proto3" json:"treeCode,omitempty"`
	//
	TreeParentCode string `protobuf:"bytes,17,opt,name=treeParentCode,proto3" json:"treeParentCode,omitempty"`
	//
	TreeName string `protobuf:"bytes,18,opt,name=treeName,proto3" json:"treeName,omitempty"`
	//
	Tree bool `protobuf:"varint,19,opt,name=tree,proto3" json:"tree,omitempty"`
	//
	Crud bool `protobuf:"varint,20,opt,name=crud,proto3" json:"crud,omitempty"`
	//
	Remark string `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	IsDataScope int32 `protobuf:"varint,22,opt,name=isDataScope,proto3" json:"isDataScope,omitempty"`
	//
	IsActions int32 `protobuf:"varint,23,opt,name=isActions,proto3" json:"isActions,omitempty"`
	//
	IsAuth int32 `protobuf:"varint,24,opt,name=isAuth,proto3" json:"isAuth,omitempty"`
	//
	IsLogicalDelete string `protobuf:"bytes,25,opt,name=isLogicalDelete,proto3" json:"isLogicalDelete,omitempty"`
	//
	LogicalDelete bool `protobuf:"varint,26,opt,name=logicalDelete,proto3" json:"logicalDelete,omitempty"`
	//
	LogicalDeleteColumn string `protobuf:"bytes,27,opt,name=logicalDeleteColumn,proto3" json:"logicalDeleteColumn,omitempty"`
}

func (x *SysTablesUpdateReq) Reset() {
	*x = SysTablesUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesUpdateReq) ProtoMessage() {}

func (x *SysTablesUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesUpdateReq.ProtoReflect.Descriptor instead.
func (*SysTablesUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{6}
}

func (x *SysTablesUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysTablesUpdateReq) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SysTablesUpdateReq) GetTableComment() string {
	if x != nil {
		return x.TableComment
	}
	return ""
}

func (x *SysTablesUpdateReq) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SysTablesUpdateReq) GetTplCategory() string {
	if x != nil {
		return x.TplCategory
	}
	return ""
}

func (x *SysTablesUpdateReq) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *SysTablesUpdateReq) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *SysTablesUpdateReq) GetModuleFrontName() string {
	if x != nil {
		return x.ModuleFrontName
	}
	return ""
}

func (x *SysTablesUpdateReq) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *SysTablesUpdateReq) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SysTablesUpdateReq) GetFunctionAuthor() string {
	if x != nil {
		return x.FunctionAuthor
	}
	return ""
}

func (x *SysTablesUpdateReq) GetPkColumn() string {
	if x != nil {
		return x.PkColumn
	}
	return ""
}

func (x *SysTablesUpdateReq) GetPkGoField() string {
	if x != nil {
		return x.PkGoField
	}
	return ""
}

func (x *SysTablesUpdateReq) GetPkJsonField() string {
	if x != nil {
		return x.PkJsonField
	}
	return ""
}

func (x *SysTablesUpdateReq) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *SysTablesUpdateReq) GetTreeCode() string {
	if x != nil {
		return x.TreeCode
	}
	return ""
}

func (x *SysTablesUpdateReq) GetTreeParentCode() string {
	if x != nil {
		return x.TreeParentCode
	}
	return ""
}

func (x *SysTablesUpdateReq) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *SysTablesUpdateReq) GetTree() bool {
	if x != nil {
		return x.Tree
	}
	return false
}

func (x *SysTablesUpdateReq) GetCrud() bool {
	if x != nil {
		return x.Crud
	}
	return false
}

func (x *SysTablesUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysTablesUpdateReq) GetIsDataScope() int32 {
	if x != nil {
		return x.IsDataScope
	}
	return 0
}

func (x *SysTablesUpdateReq) GetIsActions() int32 {
	if x != nil {
		return x.IsActions
	}
	return 0
}

func (x *SysTablesUpdateReq) GetIsAuth() int32 {
	if x != nil {
		return x.IsAuth
	}
	return 0
}

func (x *SysTablesUpdateReq) GetIsLogicalDelete() string {
	if x != nil {
		return x.IsLogicalDelete
	}
	return ""
}

func (x *SysTablesUpdateReq) GetLogicalDelete() bool {
	if x != nil {
		return x.LogicalDelete
	}
	return false
}

func (x *SysTablesUpdateReq) GetLogicalDeleteColumn() string {
	if x != nil {
		return x.LogicalDeleteColumn
	}
	return ""
}

// 更新SysTables返回
type SysTablesUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//表名称
	TableName string `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`
	//表备注
	TableComment string `protobuf:"bytes,3,opt,name=tableComment,proto3" json:"tableComment,omitempty"`
	//类名
	ClassName string `protobuf:"bytes,4,opt,name=className,proto3" json:"className,omitempty"`
	//
	TplCategory string `protobuf:"bytes,5,opt,name=tplCategory,proto3" json:"tplCategory,omitempty"`
	//包名
	PackageName string `protobuf:"bytes,6,opt,name=packageName,proto3" json:"packageName,omitempty"`
	//go文件名
	ModuleName string `protobuf:"bytes,7,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	//前端文件名
	ModuleFrontName string `protobuf:"bytes,8,opt,name=moduleFrontName,proto3" json:"moduleFrontName,omitempty"`
	//
	BusinessName string `protobuf:"bytes,9,opt,name=businessName,proto3" json:"businessName,omitempty"`
	//功能名称
	FunctionName string `protobuf:"bytes,10,opt,name=functionName,proto3" json:"functionName,omitempty"`
	//功能作者
	FunctionAuthor string `protobuf:"bytes,11,opt,name=functionAuthor,proto3" json:"functionAuthor,omitempty"`
	//
	PkColumn string `protobuf:"bytes,12,opt,name=pkColumn,proto3" json:"pkColumn,omitempty"`
	//
	PkGoField string `protobuf:"bytes,13,opt,name=pkGoField,proto3" json:"pkGoField,omitempty"`
	//
	PkJsonField string `protobuf:"bytes,14,opt,name=pkJsonField,proto3" json:"pkJsonField,omitempty"`
	//
	Options string `protobuf:"bytes,15,opt,name=options,proto3" json:"options,omitempty"`
	//
	TreeCode string `protobuf:"bytes,16,opt,name=treeCode,proto3" json:"treeCode,omitempty"`
	//
	TreeParentCode string `protobuf:"bytes,17,opt,name=treeParentCode,proto3" json:"treeParentCode,omitempty"`
	//
	TreeName string `protobuf:"bytes,18,opt,name=treeName,proto3" json:"treeName,omitempty"`
	//
	Tree bool `protobuf:"varint,19,opt,name=tree,proto3" json:"tree,omitempty"`
	//
	Crud bool `protobuf:"varint,20,opt,name=crud,proto3" json:"crud,omitempty"`
	//
	Remark string `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`
	//
	IsDataScope int32 `protobuf:"varint,22,opt,name=isDataScope,proto3" json:"isDataScope,omitempty"`
	//
	IsActions int32 `protobuf:"varint,23,opt,name=isActions,proto3" json:"isActions,omitempty"`
	//
	IsAuth int32 `protobuf:"varint,24,opt,name=isAuth,proto3" json:"isAuth,omitempty"`
	//
	IsLogicalDelete string `protobuf:"bytes,25,opt,name=isLogicalDelete,proto3" json:"isLogicalDelete,omitempty"`
	//
	LogicalDelete bool `protobuf:"varint,26,opt,name=logicalDelete,proto3" json:"logicalDelete,omitempty"`
	//
	LogicalDeleteColumn string `protobuf:"bytes,27,opt,name=logicalDeleteColumn,proto3" json:"logicalDeleteColumn,omitempty"`
}

func (x *SysTablesUpdateReply) Reset() {
	*x = SysTablesUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesUpdateReply) ProtoMessage() {}

func (x *SysTablesUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesUpdateReply.ProtoReflect.Descriptor instead.
func (*SysTablesUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{7}
}

func (x *SysTablesUpdateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysTablesUpdateReply) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SysTablesUpdateReply) GetTableComment() string {
	if x != nil {
		return x.TableComment
	}
	return ""
}

func (x *SysTablesUpdateReply) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SysTablesUpdateReply) GetTplCategory() string {
	if x != nil {
		return x.TplCategory
	}
	return ""
}

func (x *SysTablesUpdateReply) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *SysTablesUpdateReply) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *SysTablesUpdateReply) GetModuleFrontName() string {
	if x != nil {
		return x.ModuleFrontName
	}
	return ""
}

func (x *SysTablesUpdateReply) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *SysTablesUpdateReply) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SysTablesUpdateReply) GetFunctionAuthor() string {
	if x != nil {
		return x.FunctionAuthor
	}
	return ""
}

func (x *SysTablesUpdateReply) GetPkColumn() string {
	if x != nil {
		return x.PkColumn
	}
	return ""
}

func (x *SysTablesUpdateReply) GetPkGoField() string {
	if x != nil {
		return x.PkGoField
	}
	return ""
}

func (x *SysTablesUpdateReply) GetPkJsonField() string {
	if x != nil {
		return x.PkJsonField
	}
	return ""
}

func (x *SysTablesUpdateReply) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *SysTablesUpdateReply) GetTreeCode() string {
	if x != nil {
		return x.TreeCode
	}
	return ""
}

func (x *SysTablesUpdateReply) GetTreeParentCode() string {
	if x != nil {
		return x.TreeParentCode
	}
	return ""
}

func (x *SysTablesUpdateReply) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *SysTablesUpdateReply) GetTree() bool {
	if x != nil {
		return x.Tree
	}
	return false
}

func (x *SysTablesUpdateReply) GetCrud() bool {
	if x != nil {
		return x.Crud
	}
	return false
}

func (x *SysTablesUpdateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysTablesUpdateReply) GetIsDataScope() int32 {
	if x != nil {
		return x.IsDataScope
	}
	return 0
}

func (x *SysTablesUpdateReply) GetIsActions() int32 {
	if x != nil {
		return x.IsActions
	}
	return 0
}

func (x *SysTablesUpdateReply) GetIsAuth() int32 {
	if x != nil {
		return x.IsAuth
	}
	return 0
}

func (x *SysTablesUpdateReply) GetIsLogicalDelete() string {
	if x != nil {
		return x.IsLogicalDelete
	}
	return ""
}

func (x *SysTablesUpdateReply) GetLogicalDelete() bool {
	if x != nil {
		return x.LogicalDelete
	}
	return false
}

func (x *SysTablesUpdateReply) GetLogicalDeleteColumn() string {
	if x != nil {
		return x.LogicalDeleteColumn
	}
	return ""
}

// 删除SysTables请求
type SysTablesDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SysTablesDeleteReq) Reset() {
	*x = SysTablesDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesDeleteReq) ProtoMessage() {}

func (x *SysTablesDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesDeleteReq.ProtoReflect.Descriptor instead.
func (*SysTablesDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{8}
}

func (x *SysTablesDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除SysTables请求
type SysTablesBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SysTablesBatchDeleteReq) Reset() {
	*x = SysTablesBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesBatchDeleteReq) ProtoMessage() {}

func (x *SysTablesBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*SysTablesBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{9}
}

func (x *SysTablesBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除SysTables返回
type SysTablesDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysTablesDeleteReply) Reset() {
	*x = SysTablesDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesDeleteReply) ProtoMessage() {}

func (x *SysTablesDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_systables_v1_sys_tables_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesDeleteReply.ProtoReflect.Descriptor instead.
func (*SysTablesDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP(), []int{10}
}

func (x *SysTablesDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_admin_systables_v1_sys_tables_proto protoreflect.FileDescriptor

var file_api_admin_systables_v1_sys_tables_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x71, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb4, 0x08, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x70, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x72, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x75, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x63, 0x72, 0x75, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb6,
	0x08, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x70, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6b, 0x4a,
	0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x75,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x72, 0x75, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe2, 0x06, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x70, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x70, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6b, 0x47, 0x6f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6b, 0x47,
	0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6b, 0x4a, 0x73, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6b, 0x4a,
	0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x75, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x72, 0x75, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xbc, 0x08, 0x0a,
	0x14, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x70, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x72, 0x75, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x72, 0x75,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf2, 0x06, 0x0a, 0x12,
	0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x70, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6b,
	0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72,
	0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72,
	0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72,
	0x75, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x72, 0x75, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x22, 0xf4, 0x06, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x70, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6b, 0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6b, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x65,
	0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x72, 0x65,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x75, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x63, 0x72, 0x75, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x24, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a,
	0x17, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x53, 0x79,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xbd, 0x05, 0x0a, 0x09, 0x53,
	0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x76, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x1a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x20,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x78, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x20, 0x5a, 0x1e, 0x68, 0x6f,
	0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_admin_systables_v1_sys_tables_proto_rawDescOnce sync.Once
	file_api_admin_systables_v1_sys_tables_proto_rawDescData = file_api_admin_systables_v1_sys_tables_proto_rawDesc
)

func file_api_admin_systables_v1_sys_tables_proto_rawDescGZIP() []byte {
	file_api_admin_systables_v1_sys_tables_proto_rawDescOnce.Do(func() {
		file_api_admin_systables_v1_sys_tables_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_admin_systables_v1_sys_tables_proto_rawDescData)
	})
	return file_api_admin_systables_v1_sys_tables_proto_rawDescData
}

var file_api_admin_systables_v1_sys_tables_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_admin_systables_v1_sys_tables_proto_goTypes = []interface{}{
	(*SysTablesPageReq)(nil),        // 0: systables.v1.SysTablesPageReq
	(*SysTablesPageReply)(nil),      // 1: systables.v1.SysTablesPageReply
	(*SysTablesReq)(nil),            // 2: systables.v1.SysTablesReq
	(*SysTablesReply)(nil),          // 3: systables.v1.SysTablesReply
	(*SysTablesCreateReq)(nil),      // 4: systables.v1.SysTablesCreateReq
	(*SysTablesCreateReply)(nil),    // 5: systables.v1.SysTablesCreateReply
	(*SysTablesUpdateReq)(nil),      // 6: systables.v1.SysTablesUpdateReq
	(*SysTablesUpdateReply)(nil),    // 7: systables.v1.SysTablesUpdateReply
	(*SysTablesDeleteReq)(nil),      // 8: systables.v1.SysTablesDeleteReq
	(*SysTablesBatchDeleteReq)(nil), // 9: systables.v1.SysTablesBatchDeleteReq
	(*SysTablesDeleteReply)(nil),    // 10: systables.v1.SysTablesDeleteReply
	(*pagin.Pagination)(nil),        // 11: pagin.Pagination
	(*timestamppb.Timestamp)(nil),   // 12: google.protobuf.Timestamp
}
var file_api_admin_systables_v1_sys_tables_proto_depIdxs = []int32{
	11, // 0: systables.v1.SysTablesPageReq.pagin:type_name -> pagin.Pagination
	2,  // 1: systables.v1.SysTablesPageReq.param:type_name -> systables.v1.SysTablesReq
	11, // 2: systables.v1.SysTablesPageReply.pagin:type_name -> pagin.Pagination
	3,  // 3: systables.v1.SysTablesPageReply.items:type_name -> systables.v1.SysTablesReply
	12, // 4: systables.v1.SysTablesReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 5: systables.v1.SysTablesReq.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 6: systables.v1.SysTablesReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 7: systables.v1.SysTablesReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 8: systables.v1.SysTablesCreateReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 9: systables.v1.SysTablesCreateReply.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 10: systables.v1.SysTables.GetPageSysTables:input_type -> systables.v1.SysTablesPageReq
	2,  // 11: systables.v1.SysTables.GetSysTables:input_type -> systables.v1.SysTablesReq
	6,  // 12: systables.v1.SysTables.UpdateSysTables:input_type -> systables.v1.SysTablesUpdateReq
	4,  // 13: systables.v1.SysTables.CreateSysTables:input_type -> systables.v1.SysTablesCreateReq
	8,  // 14: systables.v1.SysTables.DeleteSysTables:input_type -> systables.v1.SysTablesDeleteReq
	9,  // 15: systables.v1.SysTables.BatchDeleteSysTables:input_type -> systables.v1.SysTablesBatchDeleteReq
	1,  // 16: systables.v1.SysTables.GetPageSysTables:output_type -> systables.v1.SysTablesPageReply
	3,  // 17: systables.v1.SysTables.GetSysTables:output_type -> systables.v1.SysTablesReply
	7,  // 18: systables.v1.SysTables.UpdateSysTables:output_type -> systables.v1.SysTablesUpdateReply
	5,  // 19: systables.v1.SysTables.CreateSysTables:output_type -> systables.v1.SysTablesCreateReply
	10, // 20: systables.v1.SysTables.DeleteSysTables:output_type -> systables.v1.SysTablesDeleteReply
	10, // 21: systables.v1.SysTables.BatchDeleteSysTables:output_type -> systables.v1.SysTablesDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_admin_systables_v1_sys_tables_proto_init() }
func file_api_admin_systables_v1_sys_tables_proto_init() {
	if File_api_admin_systables_v1_sys_tables_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_systables_v1_sys_tables_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_admin_systables_v1_sys_tables_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_admin_systables_v1_sys_tables_proto_goTypes,
		DependencyIndexes: file_api_admin_systables_v1_sys_tables_proto_depIdxs,
		MessageInfos:      file_api_admin_systables_v1_sys_tables_proto_msgTypes,
	}.Build()
	File_api_admin_systables_v1_sys_tables_proto = out.File
	file_api_admin_systables_v1_sys_tables_proto_rawDesc = nil
	file_api_admin_systables_v1_sys_tables_proto_goTypes = nil
	file_api_admin_systables_v1_sys_tables_proto_depIdxs = nil
}
