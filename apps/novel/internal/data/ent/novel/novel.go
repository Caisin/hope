// Code generated by entc, DO NOT EDIT.

package novel

import (
	"time"
)

const (
	// Label holds the string label denoting the novel type in the database.
	Label = "novel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClassifyId holds the string denoting the classifyid field in the database.
	FieldClassifyId = "classify_id"
	// FieldClassifyName holds the string denoting the classifyname field in the database.
	FieldClassifyName = "classify_name"
	// FieldAuthorId holds the string denoting the authorid field in the database.
	FieldAuthorId = "author_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldAnchor holds the string denoting the anchor field in the database.
	FieldAnchor = "anchor"
	// FieldHits holds the string denoting the hits field in the database.
	FieldHits = "hits"
	// FieldKeywords holds the string denoting the keywords field in the database.
	FieldKeywords = "keywords"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldCover holds the string denoting the cover field in the database.
	FieldCover = "cover"
	// FieldTagIds holds the string denoting the tagids field in the database.
	FieldTagIds = "tag_ids"
	// FieldWordNum holds the string denoting the wordnum field in the database.
	FieldWordNum = "word_num"
	// FieldFreeNum holds the string denoting the freenum field in the database.
	FieldFreeNum = "free_num"
	// FieldOnlineState holds the string denoting the onlinestate field in the database.
	FieldOnlineState = "online_state"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldPublish holds the string denoting the publish field in the database.
	FieldPublish = "publish"
	// FieldOriginalPrice holds the string denoting the originalprice field in the database.
	FieldOriginalPrice = "original_price"
	// FieldChapterPrice holds the string denoting the chapterprice field in the database.
	FieldChapterPrice = "chapter_price"
	// FieldChapterCount holds the string denoting the chaptercount field in the database.
	FieldChapterCount = "chapter_count"
	// FieldSignType holds the string denoting the signtype field in the database.
	FieldSignType = "sign_type"
	// FieldSignDate holds the string denoting the signdate field in the database.
	FieldSignDate = "sign_date"
	// FieldLeadingMan holds the string denoting the leadingman field in the database.
	FieldLeadingMan = "leading_man"
	// FieldLeadingLady holds the string denoting the leadinglady field in the database.
	FieldLeadingLady = "leading_lady"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldMediaKey holds the string denoting the mediakey field in the database.
	FieldMediaKey = "media_key"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeChapters holds the string denoting the chapters edge name in mutations.
	EdgeChapters = "chapters"
	// EdgePkgs holds the string denoting the pkgs edge name in mutations.
	EdgePkgs = "pkgs"
	// EdgeClassify holds the string denoting the classify edge name in mutations.
	EdgeClassify = "classify"
	// Table holds the table name of the novel in the database.
	Table = "novels"
	// ChaptersTable is the table that holds the chapters relation/edge.
	ChaptersTable = "novel_chapters"
	// ChaptersInverseTable is the table name for the NovelChapter entity.
	// It exists in this package in order to avoid circular dependency with the "novelchapter" package.
	ChaptersInverseTable = "novel_chapters"
	// ChaptersColumn is the table column denoting the chapters relation/edge.
	ChaptersColumn = "novel_id"
	// PkgsTable is the table that holds the pkgs relation/edge. The primary key declared below.
	PkgsTable = "novel_pkgs"
	// PkgsInverseTable is the table name for the BookPackage entity.
	// It exists in this package in order to avoid circular dependency with the "bookpackage" package.
	PkgsInverseTable = "book_packages"
	// ClassifyTable is the table that holds the classify relation/edge.
	ClassifyTable = "novels"
	// ClassifyInverseTable is the table name for the NovelClassify entity.
	// It exists in this package in order to avoid circular dependency with the "novelclassify" package.
	ClassifyInverseTable = "novel_classifies"
	// ClassifyColumn is the table column denoting the classify relation/edge.
	ClassifyColumn = "classify_id"
)

// Columns holds all SQL columns for novel fields.
var Columns = []string{
	FieldID,
	FieldClassifyId,
	FieldClassifyName,
	FieldAuthorId,
	FieldTitle,
	FieldSummary,
	FieldAuthor,
	FieldAnchor,
	FieldHits,
	FieldKeywords,
	FieldSource,
	FieldScore,
	FieldCover,
	FieldTagIds,
	FieldWordNum,
	FieldFreeNum,
	FieldOnlineState,
	FieldPrice,
	FieldPublish,
	FieldOriginalPrice,
	FieldChapterPrice,
	FieldChapterCount,
	FieldSignType,
	FieldSignDate,
	FieldLeadingMan,
	FieldLeadingLady,
	FieldRemark,
	FieldMediaKey,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreateBy,
	FieldUpdateBy,
	FieldTenantId,
}

var (
	// PkgsPrimaryKey and PkgsColumn2 are the table columns denoting the
	// primary key for the pkgs relation (M2M).
	PkgsPrimaryKey = []string{"novel_id", "book_package_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateBy holds the default value on creation for the "createBy" field.
	DefaultCreateBy int64
	// DefaultUpdateBy holds the default value on creation for the "updateBy" field.
	DefaultUpdateBy int64
	// DefaultTenantId holds the default value on creation for the "tenantId" field.
	DefaultTenantId int64
)
