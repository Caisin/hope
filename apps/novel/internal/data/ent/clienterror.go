// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/clienterror"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ClientError is the model entity for the ClientError schema.
type ClientError struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// AppVersion holds the value of the "appVersion" field.
	// App版本
	AppVersion string `json:"appVersion,omitempty"`
	// DeviceName holds the value of the "deviceName" field.
	// 设备名称
	DeviceName string `json:"deviceName,omitempty"`
	// OsName holds the value of the "osName" field.
	// 操作系统名称
	OsName string `json:"osName,omitempty"`
	// ErrorInfo holds the value of the "errorInfo" field.
	// 错误信息
	ErrorInfo string `json:"errorInfo,omitempty"`
	// UserId holds the value of the "userId" field.
	// 用户ID
	UserId int64 `json:"userId,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClientError) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case clienterror.FieldID, clienterror.FieldUserId, clienterror.FieldCreateBy, clienterror.FieldUpdateBy, clienterror.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case clienterror.FieldAppVersion, clienterror.FieldDeviceName, clienterror.FieldOsName, clienterror.FieldErrorInfo:
			values[i] = new(sql.NullString)
		case clienterror.FieldCreatedAt, clienterror.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ClientError", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClientError fields.
func (ce *ClientError) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clienterror.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ce.ID = int64(value.Int64)
		case clienterror.FieldAppVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field appVersion", values[i])
			} else if value.Valid {
				ce.AppVersion = value.String
			}
		case clienterror.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deviceName", values[i])
			} else if value.Valid {
				ce.DeviceName = value.String
			}
		case clienterror.FieldOsName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field osName", values[i])
			} else if value.Valid {
				ce.OsName = value.String
			}
		case clienterror.FieldErrorInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field errorInfo", values[i])
			} else if value.Valid {
				ce.ErrorInfo = value.String
			}
		case clienterror.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				ce.UserId = value.Int64
			}
		case clienterror.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ce.CreatedAt = value.Time
			}
		case clienterror.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ce.UpdatedAt = value.Time
			}
		case clienterror.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				ce.CreateBy = value.Int64
			}
		case clienterror.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				ce.UpdateBy = value.Int64
			}
		case clienterror.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				ce.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ClientError.
// Note that you need to call ClientError.Unwrap() before calling this method if this ClientError
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *ClientError) Update() *ClientErrorUpdateOne {
	return (&ClientErrorClient{config: ce.config}).UpdateOne(ce)
}

// Unwrap unwraps the ClientError entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ce *ClientError) Unwrap() *ClientError {
	tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClientError is not a transactional entity")
	}
	ce.config.driver = tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *ClientError) String() string {
	var builder strings.Builder
	builder.WriteString("ClientError(")
	builder.WriteString(fmt.Sprintf("id=%v", ce.ID))
	builder.WriteString(", appVersion=")
	builder.WriteString(ce.AppVersion)
	builder.WriteString(", deviceName=")
	builder.WriteString(ce.DeviceName)
	builder.WriteString(", osName=")
	builder.WriteString(ce.OsName)
	builder.WriteString(", errorInfo=")
	builder.WriteString(ce.ErrorInfo)
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", ce.UserId))
	builder.WriteString(", createdAt=")
	builder.WriteString(ce.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(ce.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", ce.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", ce.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", ce.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// ClientErrors is a parsable slice of ClientError.
type ClientErrors []*ClientError

func (ce ClientErrors) config(cfg config) {
	for _i := range ce {
		ce[_i].config = cfg
	}
}
