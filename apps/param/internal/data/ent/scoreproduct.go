// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/param/internal/data/ent/scoreproduct"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ScoreProduct is the model entity for the ScoreProduct schema.
type ScoreProduct struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ProductName holds the value of the "productName" field.
	// 产品名称
	ProductName string `json:"productName,omitempty"`
	// Summary holds the value of the "summary" field.
	// 产品描述
	Summary string `json:"summary,omitempty"`
	// CardUrl holds the value of the "cardUrl" field.
	// vip卡图片
	CardUrl string `json:"cardUrl,omitempty"`
	// Score holds the value of the "score" field.
	// 需消耗积分价格
	Score int64 `json:"score,omitempty"`
	// VipType holds the value of the "vipType" field.
	// 兑换VIP类型
	VipType int64 `json:"vipType,omitempty"`
	// EffectTime holds the value of the "effectTime" field.
	// 生效时间
	EffectTime time.Time `json:"effectTime,omitempty"`
	// ExpiredTime holds the value of the "expiredTime" field.
	// 失效时间
	ExpiredTime time.Time `json:"expiredTime,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScoreProduct) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case scoreproduct.FieldID, scoreproduct.FieldScore, scoreproduct.FieldVipType, scoreproduct.FieldCreateBy, scoreproduct.FieldUpdateBy, scoreproduct.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case scoreproduct.FieldProductName, scoreproduct.FieldSummary, scoreproduct.FieldCardUrl:
			values[i] = new(sql.NullString)
		case scoreproduct.FieldEffectTime, scoreproduct.FieldExpiredTime, scoreproduct.FieldCreatedAt, scoreproduct.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ScoreProduct", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScoreProduct fields.
func (sp *ScoreProduct) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scoreproduct.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = int64(value.Int64)
		case scoreproduct.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field productName", values[i])
			} else if value.Valid {
				sp.ProductName = value.String
			}
		case scoreproduct.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				sp.Summary = value.String
			}
		case scoreproduct.FieldCardUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cardUrl", values[i])
			} else if value.Valid {
				sp.CardUrl = value.String
			}
		case scoreproduct.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				sp.Score = value.Int64
			}
		case scoreproduct.FieldVipType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vipType", values[i])
			} else if value.Valid {
				sp.VipType = value.Int64
			}
		case scoreproduct.FieldEffectTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effectTime", values[i])
			} else if value.Valid {
				sp.EffectTime = value.Time
			}
		case scoreproduct.FieldExpiredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiredTime", values[i])
			} else if value.Valid {
				sp.ExpiredTime = value.Time
			}
		case scoreproduct.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case scoreproduct.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case scoreproduct.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sp.CreateBy = value.Int64
			}
		case scoreproduct.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sp.UpdateBy = value.Int64
			}
		case scoreproduct.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sp.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ScoreProduct.
// Note that you need to call ScoreProduct.Unwrap() before calling this method if this ScoreProduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *ScoreProduct) Update() *ScoreProductUpdateOne {
	return (&ScoreProductClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the ScoreProduct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *ScoreProduct) Unwrap() *ScoreProduct {
	tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScoreProduct is not a transactional entity")
	}
	sp.config.driver = tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *ScoreProduct) String() string {
	var builder strings.Builder
	builder.WriteString("ScoreProduct(")
	builder.WriteString(fmt.Sprintf("id=%v", sp.ID))
	builder.WriteString(", productName=")
	builder.WriteString(sp.ProductName)
	builder.WriteString(", summary=")
	builder.WriteString(sp.Summary)
	builder.WriteString(", cardUrl=")
	builder.WriteString(sp.CardUrl)
	builder.WriteString(", score=")
	builder.WriteString(fmt.Sprintf("%v", sp.Score))
	builder.WriteString(", vipType=")
	builder.WriteString(fmt.Sprintf("%v", sp.VipType))
	builder.WriteString(", effectTime=")
	builder.WriteString(sp.EffectTime.Format(time.ANSIC))
	builder.WriteString(", expiredTime=")
	builder.WriteString(sp.ExpiredTime.Format(time.ANSIC))
	builder.WriteString(", createdAt=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sp.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sp.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sp.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// ScoreProducts is a parsable slice of ScoreProduct.
type ScoreProducts []*ScoreProduct

func (sp ScoreProducts) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}
