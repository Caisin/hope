// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/sysoperalog"
	"hope/apps/admin/internal/data/ent/sysuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysOperaLogCreate is the builder for creating a SysOperaLog entity.
type SysOperaLogCreate struct {
	config
	mutation *SysOperaLogMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (solc *SysOperaLogCreate) SetUserId(i int64) *SysOperaLogCreate {
	solc.mutation.SetUserId(i)
	return solc
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableUserId(i *int64) *SysOperaLogCreate {
	if i != nil {
		solc.SetUserId(*i)
	}
	return solc
}

// SetTitle sets the "title" field.
func (solc *SysOperaLogCreate) SetTitle(s string) *SysOperaLogCreate {
	solc.mutation.SetTitle(s)
	return solc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableTitle(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetTitle(*s)
	}
	return solc
}

// SetRequestId sets the "requestId" field.
func (solc *SysOperaLogCreate) SetRequestId(s string) *SysOperaLogCreate {
	solc.mutation.SetRequestId(s)
	return solc
}

// SetNillableRequestId sets the "requestId" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableRequestId(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetRequestId(*s)
	}
	return solc
}

// SetBusinessType sets the "businessType" field.
func (solc *SysOperaLogCreate) SetBusinessType(s string) *SysOperaLogCreate {
	solc.mutation.SetBusinessType(s)
	return solc
}

// SetNillableBusinessType sets the "businessType" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableBusinessType(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetBusinessType(*s)
	}
	return solc
}

// SetBusinessTypes sets the "businessTypes" field.
func (solc *SysOperaLogCreate) SetBusinessTypes(s string) *SysOperaLogCreate {
	solc.mutation.SetBusinessTypes(s)
	return solc
}

// SetNillableBusinessTypes sets the "businessTypes" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableBusinessTypes(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetBusinessTypes(*s)
	}
	return solc
}

// SetMethod sets the "method" field.
func (solc *SysOperaLogCreate) SetMethod(s string) *SysOperaLogCreate {
	solc.mutation.SetMethod(s)
	return solc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableMethod(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetMethod(*s)
	}
	return solc
}

// SetRequestMethod sets the "requestMethod" field.
func (solc *SysOperaLogCreate) SetRequestMethod(s string) *SysOperaLogCreate {
	solc.mutation.SetRequestMethod(s)
	return solc
}

// SetNillableRequestMethod sets the "requestMethod" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableRequestMethod(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetRequestMethod(*s)
	}
	return solc
}

// SetOperatorType sets the "operatorType" field.
func (solc *SysOperaLogCreate) SetOperatorType(s string) *SysOperaLogCreate {
	solc.mutation.SetOperatorType(s)
	return solc
}

// SetNillableOperatorType sets the "operatorType" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableOperatorType(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetOperatorType(*s)
	}
	return solc
}

// SetOperName sets the "operName" field.
func (solc *SysOperaLogCreate) SetOperName(s string) *SysOperaLogCreate {
	solc.mutation.SetOperName(s)
	return solc
}

// SetNillableOperName sets the "operName" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableOperName(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetOperName(*s)
	}
	return solc
}

// SetDeptName sets the "deptName" field.
func (solc *SysOperaLogCreate) SetDeptName(s string) *SysOperaLogCreate {
	solc.mutation.SetDeptName(s)
	return solc
}

// SetNillableDeptName sets the "deptName" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableDeptName(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetDeptName(*s)
	}
	return solc
}

// SetOperUrl sets the "operUrl" field.
func (solc *SysOperaLogCreate) SetOperUrl(s string) *SysOperaLogCreate {
	solc.mutation.SetOperUrl(s)
	return solc
}

// SetNillableOperUrl sets the "operUrl" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableOperUrl(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetOperUrl(*s)
	}
	return solc
}

// SetOperIp sets the "operIp" field.
func (solc *SysOperaLogCreate) SetOperIp(s string) *SysOperaLogCreate {
	solc.mutation.SetOperIp(s)
	return solc
}

// SetNillableOperIp sets the "operIp" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableOperIp(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetOperIp(*s)
	}
	return solc
}

// SetBrowser sets the "browser" field.
func (solc *SysOperaLogCreate) SetBrowser(s string) *SysOperaLogCreate {
	solc.mutation.SetBrowser(s)
	return solc
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableBrowser(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetBrowser(*s)
	}
	return solc
}

// SetOs sets the "os" field.
func (solc *SysOperaLogCreate) SetOs(s string) *SysOperaLogCreate {
	solc.mutation.SetOs(s)
	return solc
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableOs(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetOs(*s)
	}
	return solc
}

// SetPlatform sets the "platform" field.
func (solc *SysOperaLogCreate) SetPlatform(s string) *SysOperaLogCreate {
	solc.mutation.SetPlatform(s)
	return solc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillablePlatform(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetPlatform(*s)
	}
	return solc
}

// SetOperLocation sets the "operLocation" field.
func (solc *SysOperaLogCreate) SetOperLocation(s string) *SysOperaLogCreate {
	solc.mutation.SetOperLocation(s)
	return solc
}

// SetNillableOperLocation sets the "operLocation" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableOperLocation(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetOperLocation(*s)
	}
	return solc
}

// SetOperParam sets the "operParam" field.
func (solc *SysOperaLogCreate) SetOperParam(s string) *SysOperaLogCreate {
	solc.mutation.SetOperParam(s)
	return solc
}

// SetNillableOperParam sets the "operParam" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableOperParam(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetOperParam(*s)
	}
	return solc
}

// SetStatus sets the "status" field.
func (solc *SysOperaLogCreate) SetStatus(s string) *SysOperaLogCreate {
	solc.mutation.SetStatus(s)
	return solc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableStatus(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetStatus(*s)
	}
	return solc
}

// SetOperTime sets the "operTime" field.
func (solc *SysOperaLogCreate) SetOperTime(t time.Time) *SysOperaLogCreate {
	solc.mutation.SetOperTime(t)
	return solc
}

// SetNillableOperTime sets the "operTime" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableOperTime(t *time.Time) *SysOperaLogCreate {
	if t != nil {
		solc.SetOperTime(*t)
	}
	return solc
}

// SetJsonResult sets the "jsonResult" field.
func (solc *SysOperaLogCreate) SetJsonResult(s string) *SysOperaLogCreate {
	solc.mutation.SetJsonResult(s)
	return solc
}

// SetNillableJsonResult sets the "jsonResult" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableJsonResult(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetJsonResult(*s)
	}
	return solc
}

// SetRemark sets the "remark" field.
func (solc *SysOperaLogCreate) SetRemark(s string) *SysOperaLogCreate {
	solc.mutation.SetRemark(s)
	return solc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableRemark(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetRemark(*s)
	}
	return solc
}

// SetLatencyTime sets the "latencyTime" field.
func (solc *SysOperaLogCreate) SetLatencyTime(s string) *SysOperaLogCreate {
	solc.mutation.SetLatencyTime(s)
	return solc
}

// SetNillableLatencyTime sets the "latencyTime" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableLatencyTime(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetLatencyTime(*s)
	}
	return solc
}

// SetUserAgent sets the "userAgent" field.
func (solc *SysOperaLogCreate) SetUserAgent(s string) *SysOperaLogCreate {
	solc.mutation.SetUserAgent(s)
	return solc
}

// SetNillableUserAgent sets the "userAgent" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableUserAgent(s *string) *SysOperaLogCreate {
	if s != nil {
		solc.SetUserAgent(*s)
	}
	return solc
}

// SetCreatedAt sets the "createdAt" field.
func (solc *SysOperaLogCreate) SetCreatedAt(t time.Time) *SysOperaLogCreate {
	solc.mutation.SetCreatedAt(t)
	return solc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableCreatedAt(t *time.Time) *SysOperaLogCreate {
	if t != nil {
		solc.SetCreatedAt(*t)
	}
	return solc
}

// SetUpdatedAt sets the "updatedAt" field.
func (solc *SysOperaLogCreate) SetUpdatedAt(t time.Time) *SysOperaLogCreate {
	solc.mutation.SetUpdatedAt(t)
	return solc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableUpdatedAt(t *time.Time) *SysOperaLogCreate {
	if t != nil {
		solc.SetUpdatedAt(*t)
	}
	return solc
}

// SetCreateBy sets the "createBy" field.
func (solc *SysOperaLogCreate) SetCreateBy(i int64) *SysOperaLogCreate {
	solc.mutation.SetCreateBy(i)
	return solc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableCreateBy(i *int64) *SysOperaLogCreate {
	if i != nil {
		solc.SetCreateBy(*i)
	}
	return solc
}

// SetUpdateBy sets the "updateBy" field.
func (solc *SysOperaLogCreate) SetUpdateBy(i int64) *SysOperaLogCreate {
	solc.mutation.SetUpdateBy(i)
	return solc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableUpdateBy(i *int64) *SysOperaLogCreate {
	if i != nil {
		solc.SetUpdateBy(*i)
	}
	return solc
}

// SetTenantId sets the "tenantId" field.
func (solc *SysOperaLogCreate) SetTenantId(i int64) *SysOperaLogCreate {
	solc.mutation.SetTenantId(i)
	return solc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableTenantId(i *int64) *SysOperaLogCreate {
	if i != nil {
		solc.SetTenantId(*i)
	}
	return solc
}

// SetUserID sets the "user" edge to the SysUser entity by ID.
func (solc *SysOperaLogCreate) SetUserID(id int64) *SysOperaLogCreate {
	solc.mutation.SetUserID(id)
	return solc
}

// SetNillableUserID sets the "user" edge to the SysUser entity by ID if the given value is not nil.
func (solc *SysOperaLogCreate) SetNillableUserID(id *int64) *SysOperaLogCreate {
	if id != nil {
		solc = solc.SetUserID(*id)
	}
	return solc
}

// SetUser sets the "user" edge to the SysUser entity.
func (solc *SysOperaLogCreate) SetUser(s *SysUser) *SysOperaLogCreate {
	return solc.SetUserID(s.ID)
}

// Mutation returns the SysOperaLogMutation object of the builder.
func (solc *SysOperaLogCreate) Mutation() *SysOperaLogMutation {
	return solc.mutation
}

// Save creates the SysOperaLog in the database.
func (solc *SysOperaLogCreate) Save(ctx context.Context) (*SysOperaLog, error) {
	var (
		err  error
		node *SysOperaLog
	)
	solc.defaults()
	if len(solc.hooks) == 0 {
		if err = solc.check(); err != nil {
			return nil, err
		}
		node, err = solc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysOperaLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = solc.check(); err != nil {
				return nil, err
			}
			solc.mutation = mutation
			if node, err = solc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(solc.hooks) - 1; i >= 0; i-- {
			if solc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = solc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, solc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (solc *SysOperaLogCreate) SaveX(ctx context.Context) *SysOperaLog {
	v, err := solc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (solc *SysOperaLogCreate) Exec(ctx context.Context) error {
	_, err := solc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (solc *SysOperaLogCreate) ExecX(ctx context.Context) {
	if err := solc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (solc *SysOperaLogCreate) defaults() {
	if _, ok := solc.mutation.CreatedAt(); !ok {
		v := sysoperalog.DefaultCreatedAt()
		solc.mutation.SetCreatedAt(v)
	}
	if _, ok := solc.mutation.UpdatedAt(); !ok {
		v := sysoperalog.DefaultUpdatedAt()
		solc.mutation.SetUpdatedAt(v)
	}
	if _, ok := solc.mutation.CreateBy(); !ok {
		v := sysoperalog.DefaultCreateBy
		solc.mutation.SetCreateBy(v)
	}
	if _, ok := solc.mutation.UpdateBy(); !ok {
		v := sysoperalog.DefaultUpdateBy
		solc.mutation.SetUpdateBy(v)
	}
	if _, ok := solc.mutation.TenantId(); !ok {
		v := sysoperalog.DefaultTenantId
		solc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (solc *SysOperaLogCreate) check() error {
	if _, ok := solc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "SysOperaLog.createdAt"`)}
	}
	if _, ok := solc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "SysOperaLog.updatedAt"`)}
	}
	if _, ok := solc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "SysOperaLog.createBy"`)}
	}
	if _, ok := solc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "SysOperaLog.updateBy"`)}
	}
	if _, ok := solc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "SysOperaLog.tenantId"`)}
	}
	return nil
}

func (solc *SysOperaLogCreate) sqlSave(ctx context.Context) (*SysOperaLog, error) {
	_node, _spec := solc.createSpec()
	if err := sqlgraph.CreateNode(ctx, solc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (solc *SysOperaLogCreate) createSpec() (*SysOperaLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SysOperaLog{config: solc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysoperalog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysoperalog.FieldID,
			},
		}
	)
	if value, ok := solc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := solc.mutation.RequestId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldRequestId,
		})
		_node.RequestId = value
	}
	if value, ok := solc.mutation.BusinessType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldBusinessType,
		})
		_node.BusinessType = value
	}
	if value, ok := solc.mutation.BusinessTypes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldBusinessTypes,
		})
		_node.BusinessTypes = value
	}
	if value, ok := solc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := solc.mutation.RequestMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldRequestMethod,
		})
		_node.RequestMethod = value
	}
	if value, ok := solc.mutation.OperatorType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperatorType,
		})
		_node.OperatorType = value
	}
	if value, ok := solc.mutation.OperName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperName,
		})
		_node.OperName = value
	}
	if value, ok := solc.mutation.DeptName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldDeptName,
		})
		_node.DeptName = value
	}
	if value, ok := solc.mutation.OperUrl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperUrl,
		})
		_node.OperUrl = value
	}
	if value, ok := solc.mutation.OperIp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperIp,
		})
		_node.OperIp = value
	}
	if value, ok := solc.mutation.Browser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldBrowser,
		})
		_node.Browser = value
	}
	if value, ok := solc.mutation.Os(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOs,
		})
		_node.Os = value
	}
	if value, ok := solc.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldPlatform,
		})
		_node.Platform = value
	}
	if value, ok := solc.mutation.OperLocation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperLocation,
		})
		_node.OperLocation = value
	}
	if value, ok := solc.mutation.OperParam(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldOperParam,
		})
		_node.OperParam = value
	}
	if value, ok := solc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := solc.mutation.OperTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoperalog.FieldOperTime,
		})
		_node.OperTime = value
	}
	if value, ok := solc.mutation.JsonResult(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldJsonResult,
		})
		_node.JsonResult = value
	}
	if value, ok := solc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := solc.mutation.LatencyTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldLatencyTime,
		})
		_node.LatencyTime = value
	}
	if value, ok := solc.mutation.UserAgent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysoperalog.FieldUserAgent,
		})
		_node.UserAgent = value
	}
	if value, ok := solc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoperalog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := solc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysoperalog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := solc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := solc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := solc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysoperalog.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := solc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysoperalog.UserTable,
			Columns: []string{sysoperalog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SysOperaLogCreateBulk is the builder for creating many SysOperaLog entities in bulk.
type SysOperaLogCreateBulk struct {
	config
	builders []*SysOperaLogCreate
}

// Save creates the SysOperaLog entities in the database.
func (solcb *SysOperaLogCreateBulk) Save(ctx context.Context) ([]*SysOperaLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(solcb.builders))
	nodes := make([]*SysOperaLog, len(solcb.builders))
	mutators := make([]Mutator, len(solcb.builders))
	for i := range solcb.builders {
		func(i int, root context.Context) {
			builder := solcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysOperaLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, solcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, solcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, solcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (solcb *SysOperaLogCreateBulk) SaveX(ctx context.Context) []*SysOperaLog {
	v, err := solcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (solcb *SysOperaLogCreateBulk) Exec(ctx context.Context) error {
	_, err := solcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (solcb *SysOperaLogCreateBulk) ExecX(ctx context.Context) {
	if err := solcb.Exec(ctx); err != nil {
		panic(err)
	}
}
