// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/novelbuyrecord/v1/novel_buy_record.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type NovelBuyRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,5,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//书籍打包ID
	PackageId int64 `protobuf:"varint,6,opt,name=packageId,proto3" json:"packageId,omitempty"`
	//书封面
	Cover string `protobuf:"bytes,7,opt,name=cover,proto3" json:"cover,omitempty"`
	//花费书币
	Coin int64 `protobuf:"varint,8,opt,name=coin,proto3" json:"coin,omitempty"`
	//花费书券
	Coupon int64 `protobuf:"varint,9,opt,name=coupon,proto3" json:"coupon,omitempty"`
	//备注
	Remark string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,13,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,14,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelBuyRecordData) Reset() {
	*x = NovelBuyRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordData) ProtoMessage() {}

func (x *NovelBuyRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordData.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordData) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{0}
}

func (x *NovelBuyRecordData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBuyRecordData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBuyRecordData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBuyRecordData) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBuyRecordData) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *NovelBuyRecordData) GetPackageId() int64 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *NovelBuyRecordData) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelBuyRecordData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *NovelBuyRecordData) GetCoupon() int64 {
	if x != nil {
		return x.Coupon
	}
	return 0
}

func (x *NovelBuyRecordData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelBuyRecordData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelBuyRecordData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelBuyRecordData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelBuyRecordData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelBuyRecordData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type NovelBuyRecordPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *NovelBuyRecordReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *NovelBuyRecordPageReq) Reset() {
	*x = NovelBuyRecordPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordPageReq) ProtoMessage() {}

func (x *NovelBuyRecordPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordPageReq.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{1}
}

func (x *NovelBuyRecordPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *NovelBuyRecordPageReq) GetParam() *NovelBuyRecordReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type NovelBuyRecordPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*NovelBuyRecordData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NovelBuyRecordPageReply) Reset() {
	*x = NovelBuyRecordPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordPageReply) ProtoMessage() {}

func (x *NovelBuyRecordPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordPageReply.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{2}
}

func (x *NovelBuyRecordPageReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyRecordPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyRecordPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NovelBuyRecordPageReply) GetItems() []*NovelBuyRecordData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type NovelBuyRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,5,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//书籍打包ID
	PackageId int64 `protobuf:"varint,6,opt,name=packageId,proto3" json:"packageId,omitempty"`
	//书封面
	Cover string `protobuf:"bytes,7,opt,name=cover,proto3" json:"cover,omitempty"`
	//花费书币
	Coin int64 `protobuf:"varint,8,opt,name=coin,proto3" json:"coin,omitempty"`
	//花费书券
	Coupon int64 `protobuf:"varint,9,opt,name=coupon,proto3" json:"coupon,omitempty"`
	//备注
	Remark string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,13,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,14,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelBuyRecordReq) Reset() {
	*x = NovelBuyRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordReq) ProtoMessage() {}

func (x *NovelBuyRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordReq.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{3}
}

func (x *NovelBuyRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBuyRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBuyRecordReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBuyRecordReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBuyRecordReq) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *NovelBuyRecordReq) GetPackageId() int64 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *NovelBuyRecordReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelBuyRecordReq) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *NovelBuyRecordReq) GetCoupon() int64 {
	if x != nil {
		return x.Coupon
	}
	return 0
}

func (x *NovelBuyRecordReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelBuyRecordReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelBuyRecordReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelBuyRecordReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelBuyRecordReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelBuyRecordReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type NovelBuyRecordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelBuyRecordData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelBuyRecordReply) Reset() {
	*x = NovelBuyRecordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordReply) ProtoMessage() {}

func (x *NovelBuyRecordReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordReply.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{4}
}

func (x *NovelBuyRecordReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyRecordReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyRecordReply) GetResult() *NovelBuyRecordData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建NovelBuyRecord请求
type NovelBuyRecordCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户ID
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,3,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,4,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//书籍打包ID
	PackageId int64 `protobuf:"varint,5,opt,name=packageId,proto3" json:"packageId,omitempty"`
	//书封面
	Cover string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover,omitempty"`
	//花费书币
	Coin int64 `protobuf:"varint,7,opt,name=coin,proto3" json:"coin,omitempty"`
	//花费书券
	Coupon int64 `protobuf:"varint,8,opt,name=coupon,proto3" json:"coupon,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelBuyRecordCreateReq) Reset() {
	*x = NovelBuyRecordCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordCreateReq) ProtoMessage() {}

func (x *NovelBuyRecordCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordCreateReq.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{5}
}

func (x *NovelBuyRecordCreateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBuyRecordCreateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBuyRecordCreateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBuyRecordCreateReq) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *NovelBuyRecordCreateReq) GetPackageId() int64 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *NovelBuyRecordCreateReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelBuyRecordCreateReq) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *NovelBuyRecordCreateReq) GetCoupon() int64 {
	if x != nil {
		return x.Coupon
	}
	return 0
}

func (x *NovelBuyRecordCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 创建NovelBuyRecord返回
type NovelBuyRecordCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelBuyRecordData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelBuyRecordCreateReply) Reset() {
	*x = NovelBuyRecordCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordCreateReply) ProtoMessage() {}

func (x *NovelBuyRecordCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordCreateReply.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{6}
}

func (x *NovelBuyRecordCreateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyRecordCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyRecordCreateReply) GetResult() *NovelBuyRecordData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新NovelBuyRecord请求
type NovelBuyRecordUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,5,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//书籍打包ID
	PackageId int64 `protobuf:"varint,6,opt,name=packageId,proto3" json:"packageId,omitempty"`
	//书封面
	Cover string `protobuf:"bytes,7,opt,name=cover,proto3" json:"cover,omitempty"`
	//花费书币
	Coin int64 `protobuf:"varint,8,opt,name=coin,proto3" json:"coin,omitempty"`
	//花费书券
	Coupon int64 `protobuf:"varint,9,opt,name=coupon,proto3" json:"coupon,omitempty"`
	//备注
	Remark string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelBuyRecordUpdateReq) Reset() {
	*x = NovelBuyRecordUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordUpdateReq) ProtoMessage() {}

func (x *NovelBuyRecordUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordUpdateReq.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{7}
}

func (x *NovelBuyRecordUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBuyRecordUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBuyRecordUpdateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBuyRecordUpdateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBuyRecordUpdateReq) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *NovelBuyRecordUpdateReq) GetPackageId() int64 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *NovelBuyRecordUpdateReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelBuyRecordUpdateReq) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *NovelBuyRecordUpdateReq) GetCoupon() int64 {
	if x != nil {
		return x.Coupon
	}
	return 0
}

func (x *NovelBuyRecordUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 更新NovelBuyRecord返回
type NovelBuyRecordUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelBuyRecordData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelBuyRecordUpdateReply) Reset() {
	*x = NovelBuyRecordUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordUpdateReply) ProtoMessage() {}

func (x *NovelBuyRecordUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordUpdateReply.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{8}
}

func (x *NovelBuyRecordUpdateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyRecordUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyRecordUpdateReply) GetResult() *NovelBuyRecordData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除NovelBuyRecord请求
type NovelBuyRecordDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NovelBuyRecordDeleteReq) Reset() {
	*x = NovelBuyRecordDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordDeleteReq) ProtoMessage() {}

func (x *NovelBuyRecordDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{9}
}

func (x *NovelBuyRecordDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除NovelBuyRecord请求
type NovelBuyRecordBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *NovelBuyRecordBatchDeleteReq) Reset() {
	*x = NovelBuyRecordBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordBatchDeleteReq) ProtoMessage() {}

func (x *NovelBuyRecordBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{10}
}

func (x *NovelBuyRecordBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除NovelBuyRecord返回
type NovelBuyRecordDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelBuyRecordDeleteReply) Reset() {
	*x = NovelBuyRecordDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyRecordDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyRecordDeleteReply) ProtoMessage() {}

func (x *NovelBuyRecordDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyRecordDeleteReply.ProtoReflect.Descriptor instead.
func (*NovelBuyRecordDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP(), []int{11}
}

func (x *NovelBuyRecordDeleteReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyRecordDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyRecordDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_novelbuyrecord_v1_novel_buy_record_proto protoreflect.FileDescriptor

var file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDesc = []byte{
	0x0a, 0x32, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x03, 0x0a, 0x12, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x15, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xcf, 0x03, 0x0a, 0x11, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x17, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75,
	0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x29, 0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1c, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x61, 0x0a,
	0x19, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x88, 0x07, 0x0a, 0x0e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62,
	0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x62, 0x75, 0x79, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x62, 0x75,
	0x79, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x96, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75,
	0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2f, 0x62, 0x75, 0x79, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x62, 0x75, 0x79,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2c, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2f, 0x62, 0x75, 0x79, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x98, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2f,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2c, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2f, 0x62, 0x75, 0x79, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x25, 0x5a, 0x23, 0x68,
	0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescOnce sync.Once
	file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescData = file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDesc
)

func file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescGZIP() []byte {
	file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescOnce.Do(func() {
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescData)
	})
	return file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDescData
}

var file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_goTypes = []interface{}{
	(*NovelBuyRecordData)(nil),           // 0: novelbuyrecord.v1.NovelBuyRecordData
	(*NovelBuyRecordPageReq)(nil),        // 1: novelbuyrecord.v1.NovelBuyRecordPageReq
	(*NovelBuyRecordPageReply)(nil),      // 2: novelbuyrecord.v1.NovelBuyRecordPageReply
	(*NovelBuyRecordReq)(nil),            // 3: novelbuyrecord.v1.NovelBuyRecordReq
	(*NovelBuyRecordReply)(nil),          // 4: novelbuyrecord.v1.NovelBuyRecordReply
	(*NovelBuyRecordCreateReq)(nil),      // 5: novelbuyrecord.v1.NovelBuyRecordCreateReq
	(*NovelBuyRecordCreateReply)(nil),    // 6: novelbuyrecord.v1.NovelBuyRecordCreateReply
	(*NovelBuyRecordUpdateReq)(nil),      // 7: novelbuyrecord.v1.NovelBuyRecordUpdateReq
	(*NovelBuyRecordUpdateReply)(nil),    // 8: novelbuyrecord.v1.NovelBuyRecordUpdateReply
	(*NovelBuyRecordDeleteReq)(nil),      // 9: novelbuyrecord.v1.NovelBuyRecordDeleteReq
	(*NovelBuyRecordBatchDeleteReq)(nil), // 10: novelbuyrecord.v1.NovelBuyRecordBatchDeleteReq
	(*NovelBuyRecordDeleteReply)(nil),    // 11: novelbuyrecord.v1.NovelBuyRecordDeleteReply
	(*timestamppb.Timestamp)(nil),        // 12: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),             // 13: pagin.Pagination
}
var file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_depIdxs = []int32{
	12, // 0: novelbuyrecord.v1.NovelBuyRecordData.createdAt:type_name -> google.protobuf.Timestamp
	12, // 1: novelbuyrecord.v1.NovelBuyRecordData.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 2: novelbuyrecord.v1.NovelBuyRecordPageReq.pagin:type_name -> pagin.Pagination
	3,  // 3: novelbuyrecord.v1.NovelBuyRecordPageReq.param:type_name -> novelbuyrecord.v1.NovelBuyRecordReq
	0,  // 4: novelbuyrecord.v1.NovelBuyRecordPageReply.items:type_name -> novelbuyrecord.v1.NovelBuyRecordData
	12, // 5: novelbuyrecord.v1.NovelBuyRecordReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 6: novelbuyrecord.v1.NovelBuyRecordReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 7: novelbuyrecord.v1.NovelBuyRecordReply.result:type_name -> novelbuyrecord.v1.NovelBuyRecordData
	0,  // 8: novelbuyrecord.v1.NovelBuyRecordCreateReply.result:type_name -> novelbuyrecord.v1.NovelBuyRecordData
	0,  // 9: novelbuyrecord.v1.NovelBuyRecordUpdateReply.result:type_name -> novelbuyrecord.v1.NovelBuyRecordData
	1,  // 10: novelbuyrecord.v1.NovelBuyRecord.GetPageNovelBuyRecord:input_type -> novelbuyrecord.v1.NovelBuyRecordPageReq
	3,  // 11: novelbuyrecord.v1.NovelBuyRecord.GetNovelBuyRecord:input_type -> novelbuyrecord.v1.NovelBuyRecordReq
	7,  // 12: novelbuyrecord.v1.NovelBuyRecord.UpdateNovelBuyRecord:input_type -> novelbuyrecord.v1.NovelBuyRecordUpdateReq
	5,  // 13: novelbuyrecord.v1.NovelBuyRecord.CreateNovelBuyRecord:input_type -> novelbuyrecord.v1.NovelBuyRecordCreateReq
	9,  // 14: novelbuyrecord.v1.NovelBuyRecord.DeleteNovelBuyRecord:input_type -> novelbuyrecord.v1.NovelBuyRecordDeleteReq
	10, // 15: novelbuyrecord.v1.NovelBuyRecord.BatchDeleteNovelBuyRecord:input_type -> novelbuyrecord.v1.NovelBuyRecordBatchDeleteReq
	2,  // 16: novelbuyrecord.v1.NovelBuyRecord.GetPageNovelBuyRecord:output_type -> novelbuyrecord.v1.NovelBuyRecordPageReply
	4,  // 17: novelbuyrecord.v1.NovelBuyRecord.GetNovelBuyRecord:output_type -> novelbuyrecord.v1.NovelBuyRecordReply
	8,  // 18: novelbuyrecord.v1.NovelBuyRecord.UpdateNovelBuyRecord:output_type -> novelbuyrecord.v1.NovelBuyRecordUpdateReply
	6,  // 19: novelbuyrecord.v1.NovelBuyRecord.CreateNovelBuyRecord:output_type -> novelbuyrecord.v1.NovelBuyRecordCreateReply
	11, // 20: novelbuyrecord.v1.NovelBuyRecord.DeleteNovelBuyRecord:output_type -> novelbuyrecord.v1.NovelBuyRecordDeleteReply
	11, // 21: novelbuyrecord.v1.NovelBuyRecord.BatchDeleteNovelBuyRecord:output_type -> novelbuyrecord.v1.NovelBuyRecordDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_init() }
func file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_init() {
	if File_api_novel_novelbuyrecord_v1_novel_buy_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyRecordDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_goTypes,
		DependencyIndexes: file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_depIdxs,
		MessageInfos:      file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_msgTypes,
	}.Build()
	File_api_novel_novelbuyrecord_v1_novel_buy_record_proto = out.File
	file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_rawDesc = nil
	file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_goTypes = nil
	file_api_novel_novelbuyrecord_v1_novel_buy_record_proto_depIdxs = nil
}
