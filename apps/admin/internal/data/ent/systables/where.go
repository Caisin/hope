// Code generated by entc, DO NOT EDIT.

package systables

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TableName applies equality check predicate on the "tableName" field. It's identical to TableNameEQ.
func TableName(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTableName), v))
	})
}

// TableComment applies equality check predicate on the "tableComment" field. It's identical to TableCommentEQ.
func TableComment(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTableComment), v))
	})
}

// ClassName applies equality check predicate on the "className" field. It's identical to ClassNameEQ.
func ClassName(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassName), v))
	})
}

// TplCategory applies equality check predicate on the "tplCategory" field. It's identical to TplCategoryEQ.
func TplCategory(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTplCategory), v))
	})
}

// PackageName applies equality check predicate on the "packageName" field. It's identical to PackageNameEQ.
func PackageName(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageName), v))
	})
}

// ModuleName applies equality check predicate on the "moduleName" field. It's identical to ModuleNameEQ.
func ModuleName(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModuleName), v))
	})
}

// ModuleFrontName applies equality check predicate on the "moduleFrontName" field. It's identical to ModuleFrontNameEQ.
func ModuleFrontName(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModuleFrontName), v))
	})
}

// BusinessName applies equality check predicate on the "businessName" field. It's identical to BusinessNameEQ.
func BusinessName(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessName), v))
	})
}

// FunctionName applies equality check predicate on the "functionName" field. It's identical to FunctionNameEQ.
func FunctionName(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFunctionName), v))
	})
}

// FunctionAuthor applies equality check predicate on the "functionAuthor" field. It's identical to FunctionAuthorEQ.
func FunctionAuthor(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFunctionAuthor), v))
	})
}

// PkColumn applies equality check predicate on the "pkColumn" field. It's identical to PkColumnEQ.
func PkColumn(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPkColumn), v))
	})
}

// PkGoField applies equality check predicate on the "pkGoField" field. It's identical to PkGoFieldEQ.
func PkGoField(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPkGoField), v))
	})
}

// PkJsonField applies equality check predicate on the "pkJsonField" field. It's identical to PkJsonFieldEQ.
func PkJsonField(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPkJsonField), v))
	})
}

// Options applies equality check predicate on the "options" field. It's identical to OptionsEQ.
func Options(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOptions), v))
	})
}

// TreeCode applies equality check predicate on the "treeCode" field. It's identical to TreeCodeEQ.
func TreeCode(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeCode), v))
	})
}

// TreeParentCode applies equality check predicate on the "treeParentCode" field. It's identical to TreeParentCodeEQ.
func TreeParentCode(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeParentCode), v))
	})
}

// TreeName applies equality check predicate on the "treeName" field. It's identical to TreeNameEQ.
func TreeName(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeName), v))
	})
}

// Tree applies equality check predicate on the "tree" field. It's identical to TreeEQ.
func Tree(v bool) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTree), v))
	})
}

// Crud applies equality check predicate on the "crud" field. It's identical to CrudEQ.
func Crud(v bool) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrud), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// IsDataScope applies equality check predicate on the "isDataScope" field. It's identical to IsDataScopeEQ.
func IsDataScope(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDataScope), v))
	})
}

// IsActions applies equality check predicate on the "isActions" field. It's identical to IsActionsEQ.
func IsActions(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActions), v))
	})
}

// IsAuth applies equality check predicate on the "isAuth" field. It's identical to IsAuthEQ.
func IsAuth(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAuth), v))
	})
}

// IsLogicalDelete applies equality check predicate on the "isLogicalDelete" field. It's identical to IsLogicalDeleteEQ.
func IsLogicalDelete(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLogicalDelete), v))
	})
}

// LogicalDelete applies equality check predicate on the "logicalDelete" field. It's identical to LogicalDeleteEQ.
func LogicalDelete(v bool) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogicalDelete), v))
	})
}

// LogicalDeleteColumn applies equality check predicate on the "logicalDeleteColumn" field. It's identical to LogicalDeleteColumnEQ.
func LogicalDeleteColumn(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogicalDeleteColumn), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TableNameEQ applies the EQ predicate on the "tableName" field.
func TableNameEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTableName), v))
	})
}

// TableNameNEQ applies the NEQ predicate on the "tableName" field.
func TableNameNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTableName), v))
	})
}

// TableNameIn applies the In predicate on the "tableName" field.
func TableNameIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTableName), v...))
	})
}

// TableNameNotIn applies the NotIn predicate on the "tableName" field.
func TableNameNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTableName), v...))
	})
}

// TableNameGT applies the GT predicate on the "tableName" field.
func TableNameGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTableName), v))
	})
}

// TableNameGTE applies the GTE predicate on the "tableName" field.
func TableNameGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTableName), v))
	})
}

// TableNameLT applies the LT predicate on the "tableName" field.
func TableNameLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTableName), v))
	})
}

// TableNameLTE applies the LTE predicate on the "tableName" field.
func TableNameLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTableName), v))
	})
}

// TableNameContains applies the Contains predicate on the "tableName" field.
func TableNameContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTableName), v))
	})
}

// TableNameHasPrefix applies the HasPrefix predicate on the "tableName" field.
func TableNameHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTableName), v))
	})
}

// TableNameHasSuffix applies the HasSuffix predicate on the "tableName" field.
func TableNameHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTableName), v))
	})
}

// TableNameIsNil applies the IsNil predicate on the "tableName" field.
func TableNameIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTableName)))
	})
}

// TableNameNotNil applies the NotNil predicate on the "tableName" field.
func TableNameNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTableName)))
	})
}

// TableNameEqualFold applies the EqualFold predicate on the "tableName" field.
func TableNameEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTableName), v))
	})
}

// TableNameContainsFold applies the ContainsFold predicate on the "tableName" field.
func TableNameContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTableName), v))
	})
}

// TableCommentEQ applies the EQ predicate on the "tableComment" field.
func TableCommentEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTableComment), v))
	})
}

// TableCommentNEQ applies the NEQ predicate on the "tableComment" field.
func TableCommentNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTableComment), v))
	})
}

// TableCommentIn applies the In predicate on the "tableComment" field.
func TableCommentIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTableComment), v...))
	})
}

// TableCommentNotIn applies the NotIn predicate on the "tableComment" field.
func TableCommentNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTableComment), v...))
	})
}

// TableCommentGT applies the GT predicate on the "tableComment" field.
func TableCommentGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTableComment), v))
	})
}

// TableCommentGTE applies the GTE predicate on the "tableComment" field.
func TableCommentGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTableComment), v))
	})
}

// TableCommentLT applies the LT predicate on the "tableComment" field.
func TableCommentLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTableComment), v))
	})
}

// TableCommentLTE applies the LTE predicate on the "tableComment" field.
func TableCommentLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTableComment), v))
	})
}

// TableCommentContains applies the Contains predicate on the "tableComment" field.
func TableCommentContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTableComment), v))
	})
}

// TableCommentHasPrefix applies the HasPrefix predicate on the "tableComment" field.
func TableCommentHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTableComment), v))
	})
}

// TableCommentHasSuffix applies the HasSuffix predicate on the "tableComment" field.
func TableCommentHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTableComment), v))
	})
}

// TableCommentIsNil applies the IsNil predicate on the "tableComment" field.
func TableCommentIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTableComment)))
	})
}

// TableCommentNotNil applies the NotNil predicate on the "tableComment" field.
func TableCommentNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTableComment)))
	})
}

// TableCommentEqualFold applies the EqualFold predicate on the "tableComment" field.
func TableCommentEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTableComment), v))
	})
}

// TableCommentContainsFold applies the ContainsFold predicate on the "tableComment" field.
func TableCommentContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTableComment), v))
	})
}

// ClassNameEQ applies the EQ predicate on the "className" field.
func ClassNameEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassName), v))
	})
}

// ClassNameNEQ applies the NEQ predicate on the "className" field.
func ClassNameNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassName), v))
	})
}

// ClassNameIn applies the In predicate on the "className" field.
func ClassNameIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassName), v...))
	})
}

// ClassNameNotIn applies the NotIn predicate on the "className" field.
func ClassNameNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassName), v...))
	})
}

// ClassNameGT applies the GT predicate on the "className" field.
func ClassNameGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassName), v))
	})
}

// ClassNameGTE applies the GTE predicate on the "className" field.
func ClassNameGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassName), v))
	})
}

// ClassNameLT applies the LT predicate on the "className" field.
func ClassNameLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassName), v))
	})
}

// ClassNameLTE applies the LTE predicate on the "className" field.
func ClassNameLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassName), v))
	})
}

// ClassNameContains applies the Contains predicate on the "className" field.
func ClassNameContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassName), v))
	})
}

// ClassNameHasPrefix applies the HasPrefix predicate on the "className" field.
func ClassNameHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassName), v))
	})
}

// ClassNameHasSuffix applies the HasSuffix predicate on the "className" field.
func ClassNameHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassName), v))
	})
}

// ClassNameIsNil applies the IsNil predicate on the "className" field.
func ClassNameIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClassName)))
	})
}

// ClassNameNotNil applies the NotNil predicate on the "className" field.
func ClassNameNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClassName)))
	})
}

// ClassNameEqualFold applies the EqualFold predicate on the "className" field.
func ClassNameEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassName), v))
	})
}

// ClassNameContainsFold applies the ContainsFold predicate on the "className" field.
func ClassNameContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassName), v))
	})
}

// TplCategoryEQ applies the EQ predicate on the "tplCategory" field.
func TplCategoryEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTplCategory), v))
	})
}

// TplCategoryNEQ applies the NEQ predicate on the "tplCategory" field.
func TplCategoryNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTplCategory), v))
	})
}

// TplCategoryIn applies the In predicate on the "tplCategory" field.
func TplCategoryIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTplCategory), v...))
	})
}

// TplCategoryNotIn applies the NotIn predicate on the "tplCategory" field.
func TplCategoryNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTplCategory), v...))
	})
}

// TplCategoryGT applies the GT predicate on the "tplCategory" field.
func TplCategoryGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTplCategory), v))
	})
}

// TplCategoryGTE applies the GTE predicate on the "tplCategory" field.
func TplCategoryGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTplCategory), v))
	})
}

// TplCategoryLT applies the LT predicate on the "tplCategory" field.
func TplCategoryLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTplCategory), v))
	})
}

// TplCategoryLTE applies the LTE predicate on the "tplCategory" field.
func TplCategoryLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTplCategory), v))
	})
}

// TplCategoryContains applies the Contains predicate on the "tplCategory" field.
func TplCategoryContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTplCategory), v))
	})
}

// TplCategoryHasPrefix applies the HasPrefix predicate on the "tplCategory" field.
func TplCategoryHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTplCategory), v))
	})
}

// TplCategoryHasSuffix applies the HasSuffix predicate on the "tplCategory" field.
func TplCategoryHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTplCategory), v))
	})
}

// TplCategoryIsNil applies the IsNil predicate on the "tplCategory" field.
func TplCategoryIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTplCategory)))
	})
}

// TplCategoryNotNil applies the NotNil predicate on the "tplCategory" field.
func TplCategoryNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTplCategory)))
	})
}

// TplCategoryEqualFold applies the EqualFold predicate on the "tplCategory" field.
func TplCategoryEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTplCategory), v))
	})
}

// TplCategoryContainsFold applies the ContainsFold predicate on the "tplCategory" field.
func TplCategoryContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTplCategory), v))
	})
}

// PackageNameEQ applies the EQ predicate on the "packageName" field.
func PackageNameEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageName), v))
	})
}

// PackageNameNEQ applies the NEQ predicate on the "packageName" field.
func PackageNameNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPackageName), v))
	})
}

// PackageNameIn applies the In predicate on the "packageName" field.
func PackageNameIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPackageName), v...))
	})
}

// PackageNameNotIn applies the NotIn predicate on the "packageName" field.
func PackageNameNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPackageName), v...))
	})
}

// PackageNameGT applies the GT predicate on the "packageName" field.
func PackageNameGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPackageName), v))
	})
}

// PackageNameGTE applies the GTE predicate on the "packageName" field.
func PackageNameGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPackageName), v))
	})
}

// PackageNameLT applies the LT predicate on the "packageName" field.
func PackageNameLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPackageName), v))
	})
}

// PackageNameLTE applies the LTE predicate on the "packageName" field.
func PackageNameLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPackageName), v))
	})
}

// PackageNameContains applies the Contains predicate on the "packageName" field.
func PackageNameContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPackageName), v))
	})
}

// PackageNameHasPrefix applies the HasPrefix predicate on the "packageName" field.
func PackageNameHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPackageName), v))
	})
}

// PackageNameHasSuffix applies the HasSuffix predicate on the "packageName" field.
func PackageNameHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPackageName), v))
	})
}

// PackageNameIsNil applies the IsNil predicate on the "packageName" field.
func PackageNameIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPackageName)))
	})
}

// PackageNameNotNil applies the NotNil predicate on the "packageName" field.
func PackageNameNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPackageName)))
	})
}

// PackageNameEqualFold applies the EqualFold predicate on the "packageName" field.
func PackageNameEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPackageName), v))
	})
}

// PackageNameContainsFold applies the ContainsFold predicate on the "packageName" field.
func PackageNameContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPackageName), v))
	})
}

// ModuleNameEQ applies the EQ predicate on the "moduleName" field.
func ModuleNameEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModuleName), v))
	})
}

// ModuleNameNEQ applies the NEQ predicate on the "moduleName" field.
func ModuleNameNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModuleName), v))
	})
}

// ModuleNameIn applies the In predicate on the "moduleName" field.
func ModuleNameIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModuleName), v...))
	})
}

// ModuleNameNotIn applies the NotIn predicate on the "moduleName" field.
func ModuleNameNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModuleName), v...))
	})
}

// ModuleNameGT applies the GT predicate on the "moduleName" field.
func ModuleNameGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModuleName), v))
	})
}

// ModuleNameGTE applies the GTE predicate on the "moduleName" field.
func ModuleNameGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModuleName), v))
	})
}

// ModuleNameLT applies the LT predicate on the "moduleName" field.
func ModuleNameLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModuleName), v))
	})
}

// ModuleNameLTE applies the LTE predicate on the "moduleName" field.
func ModuleNameLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModuleName), v))
	})
}

// ModuleNameContains applies the Contains predicate on the "moduleName" field.
func ModuleNameContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldModuleName), v))
	})
}

// ModuleNameHasPrefix applies the HasPrefix predicate on the "moduleName" field.
func ModuleNameHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldModuleName), v))
	})
}

// ModuleNameHasSuffix applies the HasSuffix predicate on the "moduleName" field.
func ModuleNameHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldModuleName), v))
	})
}

// ModuleNameIsNil applies the IsNil predicate on the "moduleName" field.
func ModuleNameIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldModuleName)))
	})
}

// ModuleNameNotNil applies the NotNil predicate on the "moduleName" field.
func ModuleNameNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldModuleName)))
	})
}

// ModuleNameEqualFold applies the EqualFold predicate on the "moduleName" field.
func ModuleNameEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldModuleName), v))
	})
}

// ModuleNameContainsFold applies the ContainsFold predicate on the "moduleName" field.
func ModuleNameContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldModuleName), v))
	})
}

// ModuleFrontNameEQ applies the EQ predicate on the "moduleFrontName" field.
func ModuleFrontNameEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameNEQ applies the NEQ predicate on the "moduleFrontName" field.
func ModuleFrontNameNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameIn applies the In predicate on the "moduleFrontName" field.
func ModuleFrontNameIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModuleFrontName), v...))
	})
}

// ModuleFrontNameNotIn applies the NotIn predicate on the "moduleFrontName" field.
func ModuleFrontNameNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModuleFrontName), v...))
	})
}

// ModuleFrontNameGT applies the GT predicate on the "moduleFrontName" field.
func ModuleFrontNameGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameGTE applies the GTE predicate on the "moduleFrontName" field.
func ModuleFrontNameGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameLT applies the LT predicate on the "moduleFrontName" field.
func ModuleFrontNameLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameLTE applies the LTE predicate on the "moduleFrontName" field.
func ModuleFrontNameLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameContains applies the Contains predicate on the "moduleFrontName" field.
func ModuleFrontNameContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameHasPrefix applies the HasPrefix predicate on the "moduleFrontName" field.
func ModuleFrontNameHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameHasSuffix applies the HasSuffix predicate on the "moduleFrontName" field.
func ModuleFrontNameHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameIsNil applies the IsNil predicate on the "moduleFrontName" field.
func ModuleFrontNameIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldModuleFrontName)))
	})
}

// ModuleFrontNameNotNil applies the NotNil predicate on the "moduleFrontName" field.
func ModuleFrontNameNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldModuleFrontName)))
	})
}

// ModuleFrontNameEqualFold applies the EqualFold predicate on the "moduleFrontName" field.
func ModuleFrontNameEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldModuleFrontName), v))
	})
}

// ModuleFrontNameContainsFold applies the ContainsFold predicate on the "moduleFrontName" field.
func ModuleFrontNameContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldModuleFrontName), v))
	})
}

// BusinessNameEQ applies the EQ predicate on the "businessName" field.
func BusinessNameEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessName), v))
	})
}

// BusinessNameNEQ applies the NEQ predicate on the "businessName" field.
func BusinessNameNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessName), v))
	})
}

// BusinessNameIn applies the In predicate on the "businessName" field.
func BusinessNameIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBusinessName), v...))
	})
}

// BusinessNameNotIn applies the NotIn predicate on the "businessName" field.
func BusinessNameNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBusinessName), v...))
	})
}

// BusinessNameGT applies the GT predicate on the "businessName" field.
func BusinessNameGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessName), v))
	})
}

// BusinessNameGTE applies the GTE predicate on the "businessName" field.
func BusinessNameGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessName), v))
	})
}

// BusinessNameLT applies the LT predicate on the "businessName" field.
func BusinessNameLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessName), v))
	})
}

// BusinessNameLTE applies the LTE predicate on the "businessName" field.
func BusinessNameLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessName), v))
	})
}

// BusinessNameContains applies the Contains predicate on the "businessName" field.
func BusinessNameContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBusinessName), v))
	})
}

// BusinessNameHasPrefix applies the HasPrefix predicate on the "businessName" field.
func BusinessNameHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBusinessName), v))
	})
}

// BusinessNameHasSuffix applies the HasSuffix predicate on the "businessName" field.
func BusinessNameHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBusinessName), v))
	})
}

// BusinessNameIsNil applies the IsNil predicate on the "businessName" field.
func BusinessNameIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBusinessName)))
	})
}

// BusinessNameNotNil applies the NotNil predicate on the "businessName" field.
func BusinessNameNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBusinessName)))
	})
}

// BusinessNameEqualFold applies the EqualFold predicate on the "businessName" field.
func BusinessNameEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBusinessName), v))
	})
}

// BusinessNameContainsFold applies the ContainsFold predicate on the "businessName" field.
func BusinessNameContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBusinessName), v))
	})
}

// FunctionNameEQ applies the EQ predicate on the "functionName" field.
func FunctionNameEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFunctionName), v))
	})
}

// FunctionNameNEQ applies the NEQ predicate on the "functionName" field.
func FunctionNameNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFunctionName), v))
	})
}

// FunctionNameIn applies the In predicate on the "functionName" field.
func FunctionNameIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFunctionName), v...))
	})
}

// FunctionNameNotIn applies the NotIn predicate on the "functionName" field.
func FunctionNameNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFunctionName), v...))
	})
}

// FunctionNameGT applies the GT predicate on the "functionName" field.
func FunctionNameGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFunctionName), v))
	})
}

// FunctionNameGTE applies the GTE predicate on the "functionName" field.
func FunctionNameGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFunctionName), v))
	})
}

// FunctionNameLT applies the LT predicate on the "functionName" field.
func FunctionNameLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFunctionName), v))
	})
}

// FunctionNameLTE applies the LTE predicate on the "functionName" field.
func FunctionNameLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFunctionName), v))
	})
}

// FunctionNameContains applies the Contains predicate on the "functionName" field.
func FunctionNameContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFunctionName), v))
	})
}

// FunctionNameHasPrefix applies the HasPrefix predicate on the "functionName" field.
func FunctionNameHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFunctionName), v))
	})
}

// FunctionNameHasSuffix applies the HasSuffix predicate on the "functionName" field.
func FunctionNameHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFunctionName), v))
	})
}

// FunctionNameIsNil applies the IsNil predicate on the "functionName" field.
func FunctionNameIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFunctionName)))
	})
}

// FunctionNameNotNil applies the NotNil predicate on the "functionName" field.
func FunctionNameNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFunctionName)))
	})
}

// FunctionNameEqualFold applies the EqualFold predicate on the "functionName" field.
func FunctionNameEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFunctionName), v))
	})
}

// FunctionNameContainsFold applies the ContainsFold predicate on the "functionName" field.
func FunctionNameContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFunctionName), v))
	})
}

// FunctionAuthorEQ applies the EQ predicate on the "functionAuthor" field.
func FunctionAuthorEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorNEQ applies the NEQ predicate on the "functionAuthor" field.
func FunctionAuthorNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorIn applies the In predicate on the "functionAuthor" field.
func FunctionAuthorIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFunctionAuthor), v...))
	})
}

// FunctionAuthorNotIn applies the NotIn predicate on the "functionAuthor" field.
func FunctionAuthorNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFunctionAuthor), v...))
	})
}

// FunctionAuthorGT applies the GT predicate on the "functionAuthor" field.
func FunctionAuthorGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorGTE applies the GTE predicate on the "functionAuthor" field.
func FunctionAuthorGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorLT applies the LT predicate on the "functionAuthor" field.
func FunctionAuthorLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorLTE applies the LTE predicate on the "functionAuthor" field.
func FunctionAuthorLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorContains applies the Contains predicate on the "functionAuthor" field.
func FunctionAuthorContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorHasPrefix applies the HasPrefix predicate on the "functionAuthor" field.
func FunctionAuthorHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorHasSuffix applies the HasSuffix predicate on the "functionAuthor" field.
func FunctionAuthorHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorIsNil applies the IsNil predicate on the "functionAuthor" field.
func FunctionAuthorIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFunctionAuthor)))
	})
}

// FunctionAuthorNotNil applies the NotNil predicate on the "functionAuthor" field.
func FunctionAuthorNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFunctionAuthor)))
	})
}

// FunctionAuthorEqualFold applies the EqualFold predicate on the "functionAuthor" field.
func FunctionAuthorEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFunctionAuthor), v))
	})
}

// FunctionAuthorContainsFold applies the ContainsFold predicate on the "functionAuthor" field.
func FunctionAuthorContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFunctionAuthor), v))
	})
}

// PkColumnEQ applies the EQ predicate on the "pkColumn" field.
func PkColumnEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPkColumn), v))
	})
}

// PkColumnNEQ applies the NEQ predicate on the "pkColumn" field.
func PkColumnNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPkColumn), v))
	})
}

// PkColumnIn applies the In predicate on the "pkColumn" field.
func PkColumnIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPkColumn), v...))
	})
}

// PkColumnNotIn applies the NotIn predicate on the "pkColumn" field.
func PkColumnNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPkColumn), v...))
	})
}

// PkColumnGT applies the GT predicate on the "pkColumn" field.
func PkColumnGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPkColumn), v))
	})
}

// PkColumnGTE applies the GTE predicate on the "pkColumn" field.
func PkColumnGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPkColumn), v))
	})
}

// PkColumnLT applies the LT predicate on the "pkColumn" field.
func PkColumnLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPkColumn), v))
	})
}

// PkColumnLTE applies the LTE predicate on the "pkColumn" field.
func PkColumnLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPkColumn), v))
	})
}

// PkColumnContains applies the Contains predicate on the "pkColumn" field.
func PkColumnContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPkColumn), v))
	})
}

// PkColumnHasPrefix applies the HasPrefix predicate on the "pkColumn" field.
func PkColumnHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPkColumn), v))
	})
}

// PkColumnHasSuffix applies the HasSuffix predicate on the "pkColumn" field.
func PkColumnHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPkColumn), v))
	})
}

// PkColumnIsNil applies the IsNil predicate on the "pkColumn" field.
func PkColumnIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPkColumn)))
	})
}

// PkColumnNotNil applies the NotNil predicate on the "pkColumn" field.
func PkColumnNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPkColumn)))
	})
}

// PkColumnEqualFold applies the EqualFold predicate on the "pkColumn" field.
func PkColumnEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPkColumn), v))
	})
}

// PkColumnContainsFold applies the ContainsFold predicate on the "pkColumn" field.
func PkColumnContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPkColumn), v))
	})
}

// PkGoFieldEQ applies the EQ predicate on the "pkGoField" field.
func PkGoFieldEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldNEQ applies the NEQ predicate on the "pkGoField" field.
func PkGoFieldNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldIn applies the In predicate on the "pkGoField" field.
func PkGoFieldIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPkGoField), v...))
	})
}

// PkGoFieldNotIn applies the NotIn predicate on the "pkGoField" field.
func PkGoFieldNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPkGoField), v...))
	})
}

// PkGoFieldGT applies the GT predicate on the "pkGoField" field.
func PkGoFieldGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldGTE applies the GTE predicate on the "pkGoField" field.
func PkGoFieldGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldLT applies the LT predicate on the "pkGoField" field.
func PkGoFieldLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldLTE applies the LTE predicate on the "pkGoField" field.
func PkGoFieldLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldContains applies the Contains predicate on the "pkGoField" field.
func PkGoFieldContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldHasPrefix applies the HasPrefix predicate on the "pkGoField" field.
func PkGoFieldHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldHasSuffix applies the HasSuffix predicate on the "pkGoField" field.
func PkGoFieldHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldIsNil applies the IsNil predicate on the "pkGoField" field.
func PkGoFieldIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPkGoField)))
	})
}

// PkGoFieldNotNil applies the NotNil predicate on the "pkGoField" field.
func PkGoFieldNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPkGoField)))
	})
}

// PkGoFieldEqualFold applies the EqualFold predicate on the "pkGoField" field.
func PkGoFieldEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPkGoField), v))
	})
}

// PkGoFieldContainsFold applies the ContainsFold predicate on the "pkGoField" field.
func PkGoFieldContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPkGoField), v))
	})
}

// PkJsonFieldEQ applies the EQ predicate on the "pkJsonField" field.
func PkJsonFieldEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldNEQ applies the NEQ predicate on the "pkJsonField" field.
func PkJsonFieldNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldIn applies the In predicate on the "pkJsonField" field.
func PkJsonFieldIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPkJsonField), v...))
	})
}

// PkJsonFieldNotIn applies the NotIn predicate on the "pkJsonField" field.
func PkJsonFieldNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPkJsonField), v...))
	})
}

// PkJsonFieldGT applies the GT predicate on the "pkJsonField" field.
func PkJsonFieldGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldGTE applies the GTE predicate on the "pkJsonField" field.
func PkJsonFieldGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldLT applies the LT predicate on the "pkJsonField" field.
func PkJsonFieldLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldLTE applies the LTE predicate on the "pkJsonField" field.
func PkJsonFieldLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldContains applies the Contains predicate on the "pkJsonField" field.
func PkJsonFieldContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldHasPrefix applies the HasPrefix predicate on the "pkJsonField" field.
func PkJsonFieldHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldHasSuffix applies the HasSuffix predicate on the "pkJsonField" field.
func PkJsonFieldHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldIsNil applies the IsNil predicate on the "pkJsonField" field.
func PkJsonFieldIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPkJsonField)))
	})
}

// PkJsonFieldNotNil applies the NotNil predicate on the "pkJsonField" field.
func PkJsonFieldNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPkJsonField)))
	})
}

// PkJsonFieldEqualFold applies the EqualFold predicate on the "pkJsonField" field.
func PkJsonFieldEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPkJsonField), v))
	})
}

// PkJsonFieldContainsFold applies the ContainsFold predicate on the "pkJsonField" field.
func PkJsonFieldContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPkJsonField), v))
	})
}

// OptionsEQ applies the EQ predicate on the "options" field.
func OptionsEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOptions), v))
	})
}

// OptionsNEQ applies the NEQ predicate on the "options" field.
func OptionsNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOptions), v))
	})
}

// OptionsIn applies the In predicate on the "options" field.
func OptionsIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOptions), v...))
	})
}

// OptionsNotIn applies the NotIn predicate on the "options" field.
func OptionsNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOptions), v...))
	})
}

// OptionsGT applies the GT predicate on the "options" field.
func OptionsGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOptions), v))
	})
}

// OptionsGTE applies the GTE predicate on the "options" field.
func OptionsGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOptions), v))
	})
}

// OptionsLT applies the LT predicate on the "options" field.
func OptionsLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOptions), v))
	})
}

// OptionsLTE applies the LTE predicate on the "options" field.
func OptionsLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOptions), v))
	})
}

// OptionsContains applies the Contains predicate on the "options" field.
func OptionsContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOptions), v))
	})
}

// OptionsHasPrefix applies the HasPrefix predicate on the "options" field.
func OptionsHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOptions), v))
	})
}

// OptionsHasSuffix applies the HasSuffix predicate on the "options" field.
func OptionsHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOptions), v))
	})
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOptions)))
	})
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOptions)))
	})
}

// OptionsEqualFold applies the EqualFold predicate on the "options" field.
func OptionsEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOptions), v))
	})
}

// OptionsContainsFold applies the ContainsFold predicate on the "options" field.
func OptionsContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOptions), v))
	})
}

// TreeCodeEQ applies the EQ predicate on the "treeCode" field.
func TreeCodeEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeCode), v))
	})
}

// TreeCodeNEQ applies the NEQ predicate on the "treeCode" field.
func TreeCodeNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreeCode), v))
	})
}

// TreeCodeIn applies the In predicate on the "treeCode" field.
func TreeCodeIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreeCode), v...))
	})
}

// TreeCodeNotIn applies the NotIn predicate on the "treeCode" field.
func TreeCodeNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreeCode), v...))
	})
}

// TreeCodeGT applies the GT predicate on the "treeCode" field.
func TreeCodeGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreeCode), v))
	})
}

// TreeCodeGTE applies the GTE predicate on the "treeCode" field.
func TreeCodeGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreeCode), v))
	})
}

// TreeCodeLT applies the LT predicate on the "treeCode" field.
func TreeCodeLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreeCode), v))
	})
}

// TreeCodeLTE applies the LTE predicate on the "treeCode" field.
func TreeCodeLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreeCode), v))
	})
}

// TreeCodeContains applies the Contains predicate on the "treeCode" field.
func TreeCodeContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTreeCode), v))
	})
}

// TreeCodeHasPrefix applies the HasPrefix predicate on the "treeCode" field.
func TreeCodeHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTreeCode), v))
	})
}

// TreeCodeHasSuffix applies the HasSuffix predicate on the "treeCode" field.
func TreeCodeHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTreeCode), v))
	})
}

// TreeCodeIsNil applies the IsNil predicate on the "treeCode" field.
func TreeCodeIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTreeCode)))
	})
}

// TreeCodeNotNil applies the NotNil predicate on the "treeCode" field.
func TreeCodeNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTreeCode)))
	})
}

// TreeCodeEqualFold applies the EqualFold predicate on the "treeCode" field.
func TreeCodeEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTreeCode), v))
	})
}

// TreeCodeContainsFold applies the ContainsFold predicate on the "treeCode" field.
func TreeCodeContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTreeCode), v))
	})
}

// TreeParentCodeEQ applies the EQ predicate on the "treeParentCode" field.
func TreeParentCodeEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeNEQ applies the NEQ predicate on the "treeParentCode" field.
func TreeParentCodeNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeIn applies the In predicate on the "treeParentCode" field.
func TreeParentCodeIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreeParentCode), v...))
	})
}

// TreeParentCodeNotIn applies the NotIn predicate on the "treeParentCode" field.
func TreeParentCodeNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreeParentCode), v...))
	})
}

// TreeParentCodeGT applies the GT predicate on the "treeParentCode" field.
func TreeParentCodeGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeGTE applies the GTE predicate on the "treeParentCode" field.
func TreeParentCodeGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeLT applies the LT predicate on the "treeParentCode" field.
func TreeParentCodeLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeLTE applies the LTE predicate on the "treeParentCode" field.
func TreeParentCodeLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeContains applies the Contains predicate on the "treeParentCode" field.
func TreeParentCodeContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeHasPrefix applies the HasPrefix predicate on the "treeParentCode" field.
func TreeParentCodeHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeHasSuffix applies the HasSuffix predicate on the "treeParentCode" field.
func TreeParentCodeHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeIsNil applies the IsNil predicate on the "treeParentCode" field.
func TreeParentCodeIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTreeParentCode)))
	})
}

// TreeParentCodeNotNil applies the NotNil predicate on the "treeParentCode" field.
func TreeParentCodeNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTreeParentCode)))
	})
}

// TreeParentCodeEqualFold applies the EqualFold predicate on the "treeParentCode" field.
func TreeParentCodeEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTreeParentCode), v))
	})
}

// TreeParentCodeContainsFold applies the ContainsFold predicate on the "treeParentCode" field.
func TreeParentCodeContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTreeParentCode), v))
	})
}

// TreeNameEQ applies the EQ predicate on the "treeName" field.
func TreeNameEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeName), v))
	})
}

// TreeNameNEQ applies the NEQ predicate on the "treeName" field.
func TreeNameNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreeName), v))
	})
}

// TreeNameIn applies the In predicate on the "treeName" field.
func TreeNameIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreeName), v...))
	})
}

// TreeNameNotIn applies the NotIn predicate on the "treeName" field.
func TreeNameNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreeName), v...))
	})
}

// TreeNameGT applies the GT predicate on the "treeName" field.
func TreeNameGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreeName), v))
	})
}

// TreeNameGTE applies the GTE predicate on the "treeName" field.
func TreeNameGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreeName), v))
	})
}

// TreeNameLT applies the LT predicate on the "treeName" field.
func TreeNameLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreeName), v))
	})
}

// TreeNameLTE applies the LTE predicate on the "treeName" field.
func TreeNameLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreeName), v))
	})
}

// TreeNameContains applies the Contains predicate on the "treeName" field.
func TreeNameContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTreeName), v))
	})
}

// TreeNameHasPrefix applies the HasPrefix predicate on the "treeName" field.
func TreeNameHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTreeName), v))
	})
}

// TreeNameHasSuffix applies the HasSuffix predicate on the "treeName" field.
func TreeNameHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTreeName), v))
	})
}

// TreeNameIsNil applies the IsNil predicate on the "treeName" field.
func TreeNameIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTreeName)))
	})
}

// TreeNameNotNil applies the NotNil predicate on the "treeName" field.
func TreeNameNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTreeName)))
	})
}

// TreeNameEqualFold applies the EqualFold predicate on the "treeName" field.
func TreeNameEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTreeName), v))
	})
}

// TreeNameContainsFold applies the ContainsFold predicate on the "treeName" field.
func TreeNameContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTreeName), v))
	})
}

// TreeEQ applies the EQ predicate on the "tree" field.
func TreeEQ(v bool) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTree), v))
	})
}

// TreeNEQ applies the NEQ predicate on the "tree" field.
func TreeNEQ(v bool) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTree), v))
	})
}

// TreeIsNil applies the IsNil predicate on the "tree" field.
func TreeIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTree)))
	})
}

// TreeNotNil applies the NotNil predicate on the "tree" field.
func TreeNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTree)))
	})
}

// CrudEQ applies the EQ predicate on the "crud" field.
func CrudEQ(v bool) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCrud), v))
	})
}

// CrudNEQ applies the NEQ predicate on the "crud" field.
func CrudNEQ(v bool) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCrud), v))
	})
}

// CrudIsNil applies the IsNil predicate on the "crud" field.
func CrudIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCrud)))
	})
}

// CrudNotNil applies the NotNil predicate on the "crud" field.
func CrudNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCrud)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// IsDataScopeEQ applies the EQ predicate on the "isDataScope" field.
func IsDataScopeEQ(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDataScope), v))
	})
}

// IsDataScopeNEQ applies the NEQ predicate on the "isDataScope" field.
func IsDataScopeNEQ(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDataScope), v))
	})
}

// IsDataScopeIn applies the In predicate on the "isDataScope" field.
func IsDataScopeIn(vs ...int32) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDataScope), v...))
	})
}

// IsDataScopeNotIn applies the NotIn predicate on the "isDataScope" field.
func IsDataScopeNotIn(vs ...int32) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDataScope), v...))
	})
}

// IsDataScopeGT applies the GT predicate on the "isDataScope" field.
func IsDataScopeGT(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDataScope), v))
	})
}

// IsDataScopeGTE applies the GTE predicate on the "isDataScope" field.
func IsDataScopeGTE(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDataScope), v))
	})
}

// IsDataScopeLT applies the LT predicate on the "isDataScope" field.
func IsDataScopeLT(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDataScope), v))
	})
}

// IsDataScopeLTE applies the LTE predicate on the "isDataScope" field.
func IsDataScopeLTE(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDataScope), v))
	})
}

// IsDataScopeIsNil applies the IsNil predicate on the "isDataScope" field.
func IsDataScopeIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDataScope)))
	})
}

// IsDataScopeNotNil applies the NotNil predicate on the "isDataScope" field.
func IsDataScopeNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDataScope)))
	})
}

// IsActionsEQ applies the EQ predicate on the "isActions" field.
func IsActionsEQ(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActions), v))
	})
}

// IsActionsNEQ applies the NEQ predicate on the "isActions" field.
func IsActionsNEQ(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsActions), v))
	})
}

// IsActionsIn applies the In predicate on the "isActions" field.
func IsActionsIn(vs ...int32) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsActions), v...))
	})
}

// IsActionsNotIn applies the NotIn predicate on the "isActions" field.
func IsActionsNotIn(vs ...int32) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsActions), v...))
	})
}

// IsActionsGT applies the GT predicate on the "isActions" field.
func IsActionsGT(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsActions), v))
	})
}

// IsActionsGTE applies the GTE predicate on the "isActions" field.
func IsActionsGTE(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsActions), v))
	})
}

// IsActionsLT applies the LT predicate on the "isActions" field.
func IsActionsLT(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsActions), v))
	})
}

// IsActionsLTE applies the LTE predicate on the "isActions" field.
func IsActionsLTE(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsActions), v))
	})
}

// IsActionsIsNil applies the IsNil predicate on the "isActions" field.
func IsActionsIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsActions)))
	})
}

// IsActionsNotNil applies the NotNil predicate on the "isActions" field.
func IsActionsNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsActions)))
	})
}

// IsAuthEQ applies the EQ predicate on the "isAuth" field.
func IsAuthEQ(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAuth), v))
	})
}

// IsAuthNEQ applies the NEQ predicate on the "isAuth" field.
func IsAuthNEQ(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsAuth), v))
	})
}

// IsAuthIn applies the In predicate on the "isAuth" field.
func IsAuthIn(vs ...int32) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsAuth), v...))
	})
}

// IsAuthNotIn applies the NotIn predicate on the "isAuth" field.
func IsAuthNotIn(vs ...int32) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsAuth), v...))
	})
}

// IsAuthGT applies the GT predicate on the "isAuth" field.
func IsAuthGT(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsAuth), v))
	})
}

// IsAuthGTE applies the GTE predicate on the "isAuth" field.
func IsAuthGTE(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsAuth), v))
	})
}

// IsAuthLT applies the LT predicate on the "isAuth" field.
func IsAuthLT(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsAuth), v))
	})
}

// IsAuthLTE applies the LTE predicate on the "isAuth" field.
func IsAuthLTE(v int32) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsAuth), v))
	})
}

// IsAuthIsNil applies the IsNil predicate on the "isAuth" field.
func IsAuthIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsAuth)))
	})
}

// IsAuthNotNil applies the NotNil predicate on the "isAuth" field.
func IsAuthNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsAuth)))
	})
}

// IsLogicalDeleteEQ applies the EQ predicate on the "isLogicalDelete" field.
func IsLogicalDeleteEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteNEQ applies the NEQ predicate on the "isLogicalDelete" field.
func IsLogicalDeleteNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteIn applies the In predicate on the "isLogicalDelete" field.
func IsLogicalDeleteIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsLogicalDelete), v...))
	})
}

// IsLogicalDeleteNotIn applies the NotIn predicate on the "isLogicalDelete" field.
func IsLogicalDeleteNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsLogicalDelete), v...))
	})
}

// IsLogicalDeleteGT applies the GT predicate on the "isLogicalDelete" field.
func IsLogicalDeleteGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteGTE applies the GTE predicate on the "isLogicalDelete" field.
func IsLogicalDeleteGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteLT applies the LT predicate on the "isLogicalDelete" field.
func IsLogicalDeleteLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteLTE applies the LTE predicate on the "isLogicalDelete" field.
func IsLogicalDeleteLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteContains applies the Contains predicate on the "isLogicalDelete" field.
func IsLogicalDeleteContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteHasPrefix applies the HasPrefix predicate on the "isLogicalDelete" field.
func IsLogicalDeleteHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteHasSuffix applies the HasSuffix predicate on the "isLogicalDelete" field.
func IsLogicalDeleteHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteIsNil applies the IsNil predicate on the "isLogicalDelete" field.
func IsLogicalDeleteIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsLogicalDelete)))
	})
}

// IsLogicalDeleteNotNil applies the NotNil predicate on the "isLogicalDelete" field.
func IsLogicalDeleteNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsLogicalDelete)))
	})
}

// IsLogicalDeleteEqualFold applies the EqualFold predicate on the "isLogicalDelete" field.
func IsLogicalDeleteEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsLogicalDelete), v))
	})
}

// IsLogicalDeleteContainsFold applies the ContainsFold predicate on the "isLogicalDelete" field.
func IsLogicalDeleteContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsLogicalDelete), v))
	})
}

// LogicalDeleteEQ applies the EQ predicate on the "logicalDelete" field.
func LogicalDeleteEQ(v bool) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogicalDelete), v))
	})
}

// LogicalDeleteNEQ applies the NEQ predicate on the "logicalDelete" field.
func LogicalDeleteNEQ(v bool) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogicalDelete), v))
	})
}

// LogicalDeleteIsNil applies the IsNil predicate on the "logicalDelete" field.
func LogicalDeleteIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLogicalDelete)))
	})
}

// LogicalDeleteNotNil applies the NotNil predicate on the "logicalDelete" field.
func LogicalDeleteNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLogicalDelete)))
	})
}

// LogicalDeleteColumnEQ applies the EQ predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnNEQ applies the NEQ predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnNEQ(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnIn applies the In predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogicalDeleteColumn), v...))
	})
}

// LogicalDeleteColumnNotIn applies the NotIn predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnNotIn(vs ...string) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogicalDeleteColumn), v...))
	})
}

// LogicalDeleteColumnGT applies the GT predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnGT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnGTE applies the GTE predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnGTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnLT applies the LT predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnLT(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnLTE applies the LTE predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnLTE(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnContains applies the Contains predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnContains(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnHasPrefix applies the HasPrefix predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnHasPrefix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnHasSuffix applies the HasSuffix predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnHasSuffix(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnIsNil applies the IsNil predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnIsNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLogicalDeleteColumn)))
	})
}

// LogicalDeleteColumnNotNil applies the NotNil predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnNotNil() predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLogicalDeleteColumn)))
	})
}

// LogicalDeleteColumnEqualFold applies the EqualFold predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnEqualFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogicalDeleteColumn), v))
	})
}

// LogicalDeleteColumnContainsFold applies the ContainsFold predicate on the "logicalDeleteColumn" field.
func LogicalDeleteColumnContainsFold(v string) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogicalDeleteColumn), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysTables {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysTables(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysTables) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysTables) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysTables) predicate.SysTables {
	return predicate.SysTables(func(s *sql.Selector) {
		p(s.Not())
	})
}
