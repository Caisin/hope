// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysrole"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysRole is the model entity for the SysRole schema.
type SysRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// RoleName holds the value of the "roleName" field.
	// 角色名称
	RoleName string `json:"roleName,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status string `json:"status,omitempty"`
	// RoleKey holds the value of the "roleKey" field.
	// 角色代码
	RoleKey string `json:"roleKey,omitempty"`
	// RoleSort holds the value of the "roleSort" field.
	// 角色排序
	RoleSort int32 `json:"roleSort,omitempty"`
	// Flag holds the value of the "flag" field.
	// 标记
	Flag string `json:"flag,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// Admin holds the value of the "admin" field.
	// 是否管理员
	Admin bool `json:"admin,omitempty"`
	// DataScope holds the value of the "dataScope" field.
	// 1.全部数据权限
	// 2.自定数据权限
	// 3.本部门数据权限
	// 4.本部门及以下数据权限
	// 5.仅本人数据权限
	DataScope string `json:"dataScope,omitempty"`
	// SysDept holds the value of the "sysDept" field.
	SysDept string `json:"sysDept,omitempty"`
	// SysMenu holds the value of the "sysMenu" field.
	SysMenu string `json:"sysMenu,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysRoleQuery when eager-loading is set.
	Edges SysRoleEdges `json:"edges"`
}

// SysRoleEdges holds the relations/edges for other nodes in the graph.
type SysRoleEdges struct {
	// Menus holds the value of the menus edge.
	Menus []*SysMenu `json:"menus,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MenusOrErr returns the Menus value or an error if the edge
// was not loaded in eager-loading.
func (e SysRoleEdges) MenusOrErr() ([]*SysMenu, error) {
	if e.loadedTypes[0] {
		return e.Menus, nil
	}
	return nil, &NotLoadedError{edge: "menus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysrole.FieldAdmin:
			values[i] = new(sql.NullBool)
		case sysrole.FieldID, sysrole.FieldRoleSort, sysrole.FieldCreateBy, sysrole.FieldUpdateBy, sysrole.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysrole.FieldRoleName, sysrole.FieldStatus, sysrole.FieldRoleKey, sysrole.FieldFlag, sysrole.FieldRemark, sysrole.FieldDataScope, sysrole.FieldSysDept, sysrole.FieldSysMenu:
			values[i] = new(sql.NullString)
		case sysrole.FieldCreatedAt, sysrole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysRole fields.
func (sr *SysRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int64(value.Int64)
		case sysrole.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field roleName", values[i])
			} else if value.Valid {
				sr.RoleName = value.String
			}
		case sysrole.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sr.Status = value.String
			}
		case sysrole.FieldRoleKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field roleKey", values[i])
			} else if value.Valid {
				sr.RoleKey = value.String
			}
		case sysrole.FieldRoleSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field roleSort", values[i])
			} else if value.Valid {
				sr.RoleSort = int32(value.Int64)
			}
		case sysrole.FieldFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flag", values[i])
			} else if value.Valid {
				sr.Flag = value.String
			}
		case sysrole.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sr.Remark = value.String
			}
		case sysrole.FieldAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field admin", values[i])
			} else if value.Valid {
				sr.Admin = value.Bool
			}
		case sysrole.FieldDataScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dataScope", values[i])
			} else if value.Valid {
				sr.DataScope = value.String
			}
		case sysrole.FieldSysDept:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sysDept", values[i])
			} else if value.Valid {
				sr.SysDept = value.String
			}
		case sysrole.FieldSysMenu:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sysMenu", values[i])
			} else if value.Valid {
				sr.SysMenu = value.String
			}
		case sysrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case sysrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Time
			}
		case sysrole.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sr.CreateBy = value.Int64
			}
		case sysrole.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sr.UpdateBy = value.Int64
			}
		case sysrole.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sr.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryMenus queries the "menus" edge of the SysRole entity.
func (sr *SysRole) QueryMenus() *SysMenuQuery {
	return (&SysRoleClient{config: sr.config}).QueryMenus(sr)
}

// Update returns a builder for updating this SysRole.
// Note that you need to call SysRole.Unwrap() before calling this method if this SysRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SysRole) Update() *SysRoleUpdateOne {
	return (&SysRoleClient{config: sr.config}).UpdateOne(sr)
}

// Unwrap unwraps the SysRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SysRole) Unwrap() *SysRole {
	tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysRole is not a transactional entity")
	}
	sr.config.driver = tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SysRole) String() string {
	var builder strings.Builder
	builder.WriteString("SysRole(")
	builder.WriteString(fmt.Sprintf("id=%v", sr.ID))
	builder.WriteString(", roleName=")
	builder.WriteString(sr.RoleName)
	builder.WriteString(", status=")
	builder.WriteString(sr.Status)
	builder.WriteString(", roleKey=")
	builder.WriteString(sr.RoleKey)
	builder.WriteString(", roleSort=")
	builder.WriteString(fmt.Sprintf("%v", sr.RoleSort))
	builder.WriteString(", flag=")
	builder.WriteString(sr.Flag)
	builder.WriteString(", remark=")
	builder.WriteString(sr.Remark)
	builder.WriteString(", admin=")
	builder.WriteString(fmt.Sprintf("%v", sr.Admin))
	builder.WriteString(", dataScope=")
	builder.WriteString(sr.DataScope)
	builder.WriteString(", sysDept=")
	builder.WriteString(sr.SysDept)
	builder.WriteString(", sysMenu=")
	builder.WriteString(sr.SysMenu)
	builder.WriteString(", createdAt=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sr.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sr.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sr.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysRoles is a parsable slice of SysRole.
type SysRoles []*SysRole

func (sr SysRoles) config(cfg config) {
	for _i := range sr {
		sr[_i].config = cfg
	}
}
