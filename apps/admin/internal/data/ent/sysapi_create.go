// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/sysapi"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysApiCreate is the builder for creating a SysApi entity.
type SysApiCreate struct {
	config
	mutation *SysApiMutation
	hooks    []Hook
}

// SetHandle sets the "handle" field.
func (sac *SysApiCreate) SetHandle(s string) *SysApiCreate {
	sac.mutation.SetHandle(s)
	return sac
}

// SetNillableHandle sets the "handle" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableHandle(s *string) *SysApiCreate {
	if s != nil {
		sac.SetHandle(*s)
	}
	return sac
}

// SetTitle sets the "title" field.
func (sac *SysApiCreate) SetTitle(s string) *SysApiCreate {
	sac.mutation.SetTitle(s)
	return sac
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableTitle(s *string) *SysApiCreate {
	if s != nil {
		sac.SetTitle(*s)
	}
	return sac
}

// SetPath sets the "path" field.
func (sac *SysApiCreate) SetPath(s string) *SysApiCreate {
	sac.mutation.SetPath(s)
	return sac
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (sac *SysApiCreate) SetNillablePath(s *string) *SysApiCreate {
	if s != nil {
		sac.SetPath(*s)
	}
	return sac
}

// SetAction sets the "action" field.
func (sac *SysApiCreate) SetAction(s string) *SysApiCreate {
	sac.mutation.SetAction(s)
	return sac
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableAction(s *string) *SysApiCreate {
	if s != nil {
		sac.SetAction(*s)
	}
	return sac
}

// SetType sets the "type" field.
func (sac *SysApiCreate) SetType(s string) *SysApiCreate {
	sac.mutation.SetType(s)
	return sac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableType(s *string) *SysApiCreate {
	if s != nil {
		sac.SetType(*s)
	}
	return sac
}

// SetCreatedAt sets the "createdAt" field.
func (sac *SysApiCreate) SetCreatedAt(t time.Time) *SysApiCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableCreatedAt(t *time.Time) *SysApiCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updatedAt" field.
func (sac *SysApiCreate) SetUpdatedAt(t time.Time) *SysApiCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableUpdatedAt(t *time.Time) *SysApiCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetCreateBy sets the "createBy" field.
func (sac *SysApiCreate) SetCreateBy(i int64) *SysApiCreate {
	sac.mutation.SetCreateBy(i)
	return sac
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableCreateBy(i *int64) *SysApiCreate {
	if i != nil {
		sac.SetCreateBy(*i)
	}
	return sac
}

// SetUpdateBy sets the "updateBy" field.
func (sac *SysApiCreate) SetUpdateBy(i int64) *SysApiCreate {
	sac.mutation.SetUpdateBy(i)
	return sac
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableUpdateBy(i *int64) *SysApiCreate {
	if i != nil {
		sac.SetUpdateBy(*i)
	}
	return sac
}

// SetTenantId sets the "tenantId" field.
func (sac *SysApiCreate) SetTenantId(i int64) *SysApiCreate {
	sac.mutation.SetTenantId(i)
	return sac
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (sac *SysApiCreate) SetNillableTenantId(i *int64) *SysApiCreate {
	if i != nil {
		sac.SetTenantId(*i)
	}
	return sac
}

// Mutation returns the SysApiMutation object of the builder.
func (sac *SysApiCreate) Mutation() *SysApiMutation {
	return sac.mutation
}

// Save creates the SysApi in the database.
func (sac *SysApiCreate) Save(ctx context.Context) (*SysApi, error) {
	var (
		err  error
		node *SysApi
	)
	sac.defaults()
	if len(sac.hooks) == 0 {
		if err = sac.check(); err != nil {
			return nil, err
		}
		node, err = sac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysApiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sac.check(); err != nil {
				return nil, err
			}
			sac.mutation = mutation
			if node, err = sac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sac.hooks) - 1; i >= 0; i-- {
			if sac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SysApiCreate) SaveX(ctx context.Context) *SysApi {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SysApiCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SysApiCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *SysApiCreate) defaults() {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		v := sysapi.DefaultCreatedAt()
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		v := sysapi.DefaultUpdatedAt()
		sac.mutation.SetUpdatedAt(v)
	}
	if _, ok := sac.mutation.CreateBy(); !ok {
		v := sysapi.DefaultCreateBy
		sac.mutation.SetCreateBy(v)
	}
	if _, ok := sac.mutation.UpdateBy(); !ok {
		v := sysapi.DefaultUpdateBy
		sac.mutation.SetUpdateBy(v)
	}
	if _, ok := sac.mutation.TenantId(); !ok {
		v := sysapi.DefaultTenantId
		sac.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *SysApiCreate) check() error {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "SysApi.createdAt"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "SysApi.updatedAt"`)}
	}
	if _, ok := sac.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "SysApi.createBy"`)}
	}
	if _, ok := sac.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "SysApi.updateBy"`)}
	}
	if _, ok := sac.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "SysApi.tenantId"`)}
	}
	return nil
}

func (sac *SysApiCreate) sqlSave(ctx context.Context) (*SysApi, error) {
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (sac *SysApiCreate) createSpec() (*SysApi, *sqlgraph.CreateSpec) {
	var (
		_node = &SysApi{config: sac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysapi.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysapi.FieldID,
			},
		}
	)
	if value, ok := sac.mutation.Handle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysapi.FieldHandle,
		})
		_node.Handle = value
	}
	if value, ok := sac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysapi.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := sac.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysapi.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := sac.mutation.Action(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysapi.FieldAction,
		})
		_node.Action = value
	}
	if value, ok := sac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysapi.FieldType,
		})
		_node.Type = value
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysapi.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysapi.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sac.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysapi.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := sac.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysapi.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := sac.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysapi.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// SysApiCreateBulk is the builder for creating many SysApi entities in bulk.
type SysApiCreateBulk struct {
	config
	builders []*SysApiCreate
}

// Save creates the SysApi entities in the database.
func (sacb *SysApiCreateBulk) Save(ctx context.Context) ([]*SysApi, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SysApi, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysApiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SysApiCreateBulk) SaveX(ctx context.Context) []*SysApi {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SysApiCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SysApiCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
