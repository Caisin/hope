// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/param/userresource/v1/user_resource.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserResourceClient is the client API for UserResource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserResourceClient interface {
	// 分页查询UserResource
	GetPageUserResource(ctx context.Context, in *UserResourcePageReq, opts ...grpc.CallOption) (*UserResourcePageReply, error)
	// 获取UserResource
	GetUserResource(ctx context.Context, in *UserResourceReq, opts ...grpc.CallOption) (*UserResourceReply, error)
	// 更新UserResource
	UpdateUserResource(ctx context.Context, in *UserResourceUpdateReq, opts ...grpc.CallOption) (*UserResourceUpdateReply, error)
	// 创建UserResource
	CreateUserResource(ctx context.Context, in *UserResourceCreateReq, opts ...grpc.CallOption) (*UserResourceCreateReply, error)
	// 删除UserResource
	DeleteUserResource(ctx context.Context, in *UserResourceDeleteReq, opts ...grpc.CallOption) (*UserResourceDeleteReply, error)
	// 批量删除UserResource
	BatchDeleteUserResource(ctx context.Context, in *UserResourceBatchDeleteReq, opts ...grpc.CallOption) (*UserResourceDeleteReply, error)
}

type userResourceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserResourceClient(cc grpc.ClientConnInterface) UserResourceClient {
	return &userResourceClient{cc}
}

func (c *userResourceClient) GetPageUserResource(ctx context.Context, in *UserResourcePageReq, opts ...grpc.CallOption) (*UserResourcePageReply, error) {
	out := new(UserResourcePageReply)
	err := c.cc.Invoke(ctx, "/userresource.v1.UserResource/GetPageUserResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceClient) GetUserResource(ctx context.Context, in *UserResourceReq, opts ...grpc.CallOption) (*UserResourceReply, error) {
	out := new(UserResourceReply)
	err := c.cc.Invoke(ctx, "/userresource.v1.UserResource/GetUserResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceClient) UpdateUserResource(ctx context.Context, in *UserResourceUpdateReq, opts ...grpc.CallOption) (*UserResourceUpdateReply, error) {
	out := new(UserResourceUpdateReply)
	err := c.cc.Invoke(ctx, "/userresource.v1.UserResource/UpdateUserResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceClient) CreateUserResource(ctx context.Context, in *UserResourceCreateReq, opts ...grpc.CallOption) (*UserResourceCreateReply, error) {
	out := new(UserResourceCreateReply)
	err := c.cc.Invoke(ctx, "/userresource.v1.UserResource/CreateUserResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceClient) DeleteUserResource(ctx context.Context, in *UserResourceDeleteReq, opts ...grpc.CallOption) (*UserResourceDeleteReply, error) {
	out := new(UserResourceDeleteReply)
	err := c.cc.Invoke(ctx, "/userresource.v1.UserResource/DeleteUserResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceClient) BatchDeleteUserResource(ctx context.Context, in *UserResourceBatchDeleteReq, opts ...grpc.CallOption) (*UserResourceDeleteReply, error) {
	out := new(UserResourceDeleteReply)
	err := c.cc.Invoke(ctx, "/userresource.v1.UserResource/BatchDeleteUserResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserResourceServer is the server API for UserResource service.
// All implementations must embed UnimplementedUserResourceServer
// for forward compatibility
type UserResourceServer interface {
	// 分页查询UserResource
	GetPageUserResource(context.Context, *UserResourcePageReq) (*UserResourcePageReply, error)
	// 获取UserResource
	GetUserResource(context.Context, *UserResourceReq) (*UserResourceReply, error)
	// 更新UserResource
	UpdateUserResource(context.Context, *UserResourceUpdateReq) (*UserResourceUpdateReply, error)
	// 创建UserResource
	CreateUserResource(context.Context, *UserResourceCreateReq) (*UserResourceCreateReply, error)
	// 删除UserResource
	DeleteUserResource(context.Context, *UserResourceDeleteReq) (*UserResourceDeleteReply, error)
	// 批量删除UserResource
	BatchDeleteUserResource(context.Context, *UserResourceBatchDeleteReq) (*UserResourceDeleteReply, error)
	mustEmbedUnimplementedUserResourceServer()
}

// UnimplementedUserResourceServer must be embedded to have forward compatible implementations.
type UnimplementedUserResourceServer struct {
}

func (UnimplementedUserResourceServer) GetPageUserResource(context.Context, *UserResourcePageReq) (*UserResourcePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageUserResource not implemented")
}
func (UnimplementedUserResourceServer) GetUserResource(context.Context, *UserResourceReq) (*UserResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserResource not implemented")
}
func (UnimplementedUserResourceServer) UpdateUserResource(context.Context, *UserResourceUpdateReq) (*UserResourceUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserResource not implemented")
}
func (UnimplementedUserResourceServer) CreateUserResource(context.Context, *UserResourceCreateReq) (*UserResourceCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserResource not implemented")
}
func (UnimplementedUserResourceServer) DeleteUserResource(context.Context, *UserResourceDeleteReq) (*UserResourceDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserResource not implemented")
}
func (UnimplementedUserResourceServer) BatchDeleteUserResource(context.Context, *UserResourceBatchDeleteReq) (*UserResourceDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteUserResource not implemented")
}
func (UnimplementedUserResourceServer) mustEmbedUnimplementedUserResourceServer() {}

// UnsafeUserResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserResourceServer will
// result in compilation errors.
type UnsafeUserResourceServer interface {
	mustEmbedUnimplementedUserResourceServer()
}

func RegisterUserResourceServer(s grpc.ServiceRegistrar, srv UserResourceServer) {
	s.RegisterService(&UserResource_ServiceDesc, srv)
}

func _UserResource_GetPageUserResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourcePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).GetPageUserResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresource.v1.UserResource/GetPageUserResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).GetPageUserResource(ctx, req.(*UserResourcePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResource_GetUserResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).GetUserResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresource.v1.UserResource/GetUserResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).GetUserResource(ctx, req.(*UserResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResource_UpdateUserResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).UpdateUserResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresource.v1.UserResource/UpdateUserResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).UpdateUserResource(ctx, req.(*UserResourceUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResource_CreateUserResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).CreateUserResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresource.v1.UserResource/CreateUserResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).CreateUserResource(ctx, req.(*UserResourceCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResource_DeleteUserResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).DeleteUserResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresource.v1.UserResource/DeleteUserResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).DeleteUserResource(ctx, req.(*UserResourceDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResource_BatchDeleteUserResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceServer).BatchDeleteUserResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresource.v1.UserResource/BatchDeleteUserResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceServer).BatchDeleteUserResource(ctx, req.(*UserResourceBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserResource_ServiceDesc is the grpc.ServiceDesc for UserResource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserResource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userresource.v1.UserResource",
	HandlerType: (*UserResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageUserResource",
			Handler:    _UserResource_GetPageUserResource_Handler,
		},
		{
			MethodName: "GetUserResource",
			Handler:    _UserResource_GetUserResource_Handler,
		},
		{
			MethodName: "UpdateUserResource",
			Handler:    _UserResource_UpdateUserResource_Handler,
		},
		{
			MethodName: "CreateUserResource",
			Handler:    _UserResource_CreateUserResource_Handler,
		},
		{
			MethodName: "DeleteUserResource",
			Handler:    _UserResource_DeleteUserResource_Handler,
		},
		{
			MethodName: "BatchDeleteUserResource",
			Handler:    _UserResource_BatchDeleteUserResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/param/userresource/v1/user_resource.proto",
}
