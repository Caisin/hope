// Code generated by entc, DO NOT EDIT.

package datasource

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the datasource type in the database.
	Label = "data_source"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDbName holds the string denoting the dbname field in the database.
	FieldDbName = "db_name"
	// FieldHost holds the string denoting the host field in the database.
	FieldHost = "host"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldDatabase holds the string denoting the database field in the database.
	FieldDatabase = "database"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldPwd holds the string denoting the pwd field in the database.
	FieldPwd = "pwd"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDbType holds the string denoting the dbtype field in the database.
	FieldDbType = "db_type"
	// FieldConnMaxIdleTime holds the string denoting the connmaxidletime field in the database.
	FieldConnMaxIdleTime = "conn_max_idle_time"
	// FieldConnMaxLifeTime holds the string denoting the connmaxlifetime field in the database.
	FieldConnMaxLifeTime = "conn_max_life_time"
	// FieldMaxIdleConns holds the string denoting the maxidleconns field in the database.
	FieldMaxIdleConns = "max_idle_conns"
	// FieldMaxOpenConns holds the string denoting the maxopenconns field in the database.
	FieldMaxOpenConns = "max_open_conns"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// Table holds the table name of the datasource in the database.
	Table = "data_sources"
)

// Columns holds all SQL columns for datasource fields.
var Columns = []string{
	FieldID,
	FieldDbName,
	FieldHost,
	FieldPort,
	FieldDatabase,
	FieldUserName,
	FieldPwd,
	FieldStatus,
	FieldDbType,
	FieldConnMaxIdleTime,
	FieldConnMaxLifeTime,
	FieldMaxIdleConns,
	FieldMaxOpenConns,
	FieldRemark,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreateBy,
	FieldUpdateBy,
	FieldTenantId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateBy holds the default value on creation for the "createBy" field.
	DefaultCreateBy int64
	// DefaultUpdateBy holds the default value on creation for the "updateBy" field.
	DefaultUpdateBy int64
	// DefaultTenantId holds the default value on creation for the "tenantId" field.
	DefaultTenantId int64
)

// DbType defines the type for the "dbType" enum field.
type DbType string

// DbType values.
const (
	DbTypeMysql    DbType = "mysql"
	DbTypeSqlite3  DbType = "sqlite3"
	DbTypePostgres DbType = "postgres"
)

func (dt DbType) String() string {
	return string(dt)
}

// DbTypeValidator is a validator for the "dbType" field enum values. It is called by the builders before save.
func DbTypeValidator(dt DbType) error {
	switch dt {
	case DbTypeMysql, DbTypeSqlite3, DbTypePostgres:
		return nil
	default:
		return fmt.Errorf("datasource: invalid enum value for dbType field: %q", dt)
	}
}
