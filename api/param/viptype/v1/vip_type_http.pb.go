// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type VipTypeHTTPServer interface {
	BatchDeleteVipType(context.Context, *VipTypeBatchDeleteReq) (*VipTypeDeleteReply, error)
	CreateVipType(context.Context, *VipTypeCreateReq) (*VipTypeCreateReply, error)
	DeleteVipType(context.Context, *VipTypeDeleteReq) (*VipTypeDeleteReply, error)
	GetVipType(context.Context, *VipTypeReq) (*VipTypeReply, error)
	GetVipTypePage(context.Context, *VipTypePageReq) (*VipTypePageReply, error)
	UpdateVipType(context.Context, *VipTypeUpdateReq) (*VipTypeUpdateReply, error)
}

func RegisterVipTypeHTTPServer(s *http.Server, srv VipTypeHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/vip/type/page", _VipType_GetVipTypePage0_HTTP_Handler(srv))
	r.GET("/v1/vip/type/{id}", _VipType_GetVipType0_HTTP_Handler(srv))
	r.PUT("/v1/vip/type/{id}", _VipType_UpdateVipType0_HTTP_Handler(srv))
	r.POST("/v1/vip/type", _VipType_CreateVipType0_HTTP_Handler(srv))
	r.DELETE("/v1/vip/type/{id}", _VipType_DeleteVipType0_HTTP_Handler(srv))
	r.DELETE("/v1/vip/type", _VipType_BatchDeleteVipType0_HTTP_Handler(srv))
}

func _VipType_GetVipTypePage0_HTTP_Handler(srv VipTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipTypePageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/viptype.v1.VipType/GetVipTypePage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVipTypePage(ctx, req.(*VipTypePageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipTypePageReply)
		return ctx.Result(200, reply)
	}
}

func _VipType_GetVipType0_HTTP_Handler(srv VipTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipTypeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/viptype.v1.VipType/GetVipType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVipType(ctx, req.(*VipTypeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipTypeReply)
		return ctx.Result(200, reply)
	}
}

func _VipType_UpdateVipType0_HTTP_Handler(srv VipTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipTypeUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/viptype.v1.VipType/UpdateVipType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateVipType(ctx, req.(*VipTypeUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipTypeUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _VipType_CreateVipType0_HTTP_Handler(srv VipTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipTypeCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/viptype.v1.VipType/CreateVipType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateVipType(ctx, req.(*VipTypeCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipTypeCreateReply)
		return ctx.Result(200, reply)
	}
}

func _VipType_DeleteVipType0_HTTP_Handler(srv VipTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipTypeDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/viptype.v1.VipType/DeleteVipType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteVipType(ctx, req.(*VipTypeDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipTypeDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _VipType_BatchDeleteVipType0_HTTP_Handler(srv VipTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipTypeBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/viptype.v1.VipType/BatchDeleteVipType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteVipType(ctx, req.(*VipTypeBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipTypeDeleteReply)
		return ctx.Result(200, reply)
	}
}

type VipTypeHTTPClient interface {
	BatchDeleteVipType(ctx context.Context, req *VipTypeBatchDeleteReq, opts ...http.CallOption) (rsp *VipTypeDeleteReply, err error)
	CreateVipType(ctx context.Context, req *VipTypeCreateReq, opts ...http.CallOption) (rsp *VipTypeCreateReply, err error)
	DeleteVipType(ctx context.Context, req *VipTypeDeleteReq, opts ...http.CallOption) (rsp *VipTypeDeleteReply, err error)
	GetVipType(ctx context.Context, req *VipTypeReq, opts ...http.CallOption) (rsp *VipTypeReply, err error)
	GetVipTypePage(ctx context.Context, req *VipTypePageReq, opts ...http.CallOption) (rsp *VipTypePageReply, err error)
	UpdateVipType(ctx context.Context, req *VipTypeUpdateReq, opts ...http.CallOption) (rsp *VipTypeUpdateReply, err error)
}

type VipTypeHTTPClientImpl struct {
	cc *http.Client
}

func NewVipTypeHTTPClient(client *http.Client) VipTypeHTTPClient {
	return &VipTypeHTTPClientImpl{client}
}

func (c *VipTypeHTTPClientImpl) BatchDeleteVipType(ctx context.Context, in *VipTypeBatchDeleteReq, opts ...http.CallOption) (*VipTypeDeleteReply, error) {
	var out VipTypeDeleteReply
	pattern := "/v1/vip/type"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/viptype.v1.VipType/BatchDeleteVipType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipTypeHTTPClientImpl) CreateVipType(ctx context.Context, in *VipTypeCreateReq, opts ...http.CallOption) (*VipTypeCreateReply, error) {
	var out VipTypeCreateReply
	pattern := "/v1/vip/type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/viptype.v1.VipType/CreateVipType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipTypeHTTPClientImpl) DeleteVipType(ctx context.Context, in *VipTypeDeleteReq, opts ...http.CallOption) (*VipTypeDeleteReply, error) {
	var out VipTypeDeleteReply
	pattern := "/v1/vip/type/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/viptype.v1.VipType/DeleteVipType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipTypeHTTPClientImpl) GetVipType(ctx context.Context, in *VipTypeReq, opts ...http.CallOption) (*VipTypeReply, error) {
	var out VipTypeReply
	pattern := "/v1/vip/type/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/viptype.v1.VipType/GetVipType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipTypeHTTPClientImpl) GetVipTypePage(ctx context.Context, in *VipTypePageReq, opts ...http.CallOption) (*VipTypePageReply, error) {
	var out VipTypePageReply
	pattern := "/v1/vip/type/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/viptype.v1.VipType/GetVipTypePage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipTypeHTTPClientImpl) UpdateVipType(ctx context.Context, in *VipTypeUpdateReq, opts ...http.CallOption) (*VipTypeUpdateReply, error) {
	var out VipTypeUpdateReply
	pattern := "/v1/vip/type/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/viptype.v1.VipType/UpdateVipType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
