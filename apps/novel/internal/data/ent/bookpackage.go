// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/bookpackage"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// BookPackage is the model entity for the BookPackage schema.
type BookPackage struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ActivityCode holds the value of the "activityCode" field.
	// 活动编码
	ActivityCode string `json:"activityCode,omitempty"`
	// PackageName holds the value of the "packageName" field.
	// 书籍包名称
	PackageName string `json:"packageName,omitempty"`
	// Price holds the value of the "price" field.
	// 活动打包价格
	Price int64 `json:"price,omitempty"`
	// DailyPrice holds the value of the "dailyPrice" field.
	// 日常价格,既所有书本正常购买的价格
	DailyPrice int64 `json:"dailyPrice,omitempty"`
	// NovelIds holds the value of the "novelIds" field.
	// 分组编码
	NovelIds string `json:"novelIds,omitempty"`
	// EffectTime holds the value of the "effectTime" field.
	// 生效时间
	EffectTime time.Time `json:"effectTime,omitempty"`
	// ExpiredTime holds the value of the "expiredTime" field.
	// 失效时间
	ExpiredTime time.Time `json:"expiredTime,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookPackageQuery when eager-loading is set.
	Edges BookPackageEdges `json:"edges"`
}

// BookPackageEdges holds the relations/edges for other nodes in the graph.
type BookPackageEdges struct {
	// Books holds the value of the books edge.
	Books []*Novel `json:"books,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BooksOrErr returns the Books value or an error if the edge
// was not loaded in eager-loading.
func (e BookPackageEdges) BooksOrErr() ([]*Novel, error) {
	if e.loadedTypes[0] {
		return e.Books, nil
	}
	return nil, &NotLoadedError{edge: "books"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookPackage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bookpackage.FieldID, bookpackage.FieldPrice, bookpackage.FieldDailyPrice, bookpackage.FieldCreateBy, bookpackage.FieldUpdateBy, bookpackage.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case bookpackage.FieldActivityCode, bookpackage.FieldPackageName, bookpackage.FieldNovelIds:
			values[i] = new(sql.NullString)
		case bookpackage.FieldEffectTime, bookpackage.FieldExpiredTime, bookpackage.FieldCreatedAt, bookpackage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BookPackage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookPackage fields.
func (bp *BookPackage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bookpackage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bp.ID = int64(value.Int64)
		case bookpackage.FieldActivityCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activityCode", values[i])
			} else if value.Valid {
				bp.ActivityCode = value.String
			}
		case bookpackage.FieldPackageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field packageName", values[i])
			} else if value.Valid {
				bp.PackageName = value.String
			}
		case bookpackage.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				bp.Price = value.Int64
			}
		case bookpackage.FieldDailyPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dailyPrice", values[i])
			} else if value.Valid {
				bp.DailyPrice = value.Int64
			}
		case bookpackage.FieldNovelIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field novelIds", values[i])
			} else if value.Valid {
				bp.NovelIds = value.String
			}
		case bookpackage.FieldEffectTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effectTime", values[i])
			} else if value.Valid {
				bp.EffectTime = value.Time
			}
		case bookpackage.FieldExpiredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiredTime", values[i])
			} else if value.Valid {
				bp.ExpiredTime = value.Time
			}
		case bookpackage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				bp.CreatedAt = value.Time
			}
		case bookpackage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				bp.UpdatedAt = value.Time
			}
		case bookpackage.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				bp.CreateBy = value.Int64
			}
		case bookpackage.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				bp.UpdateBy = value.Int64
			}
		case bookpackage.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				bp.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryBooks queries the "books" edge of the BookPackage entity.
func (bp *BookPackage) QueryBooks() *NovelQuery {
	return (&BookPackageClient{config: bp.config}).QueryBooks(bp)
}

// Update returns a builder for updating this BookPackage.
// Note that you need to call BookPackage.Unwrap() before calling this method if this BookPackage
// was returned from a transaction, and the transaction was committed or rolled back.
func (bp *BookPackage) Update() *BookPackageUpdateOne {
	return (&BookPackageClient{config: bp.config}).UpdateOne(bp)
}

// Unwrap unwraps the BookPackage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bp *BookPackage) Unwrap() *BookPackage {
	tx, ok := bp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookPackage is not a transactional entity")
	}
	bp.config.driver = tx.drv
	return bp
}

// String implements the fmt.Stringer.
func (bp *BookPackage) String() string {
	var builder strings.Builder
	builder.WriteString("BookPackage(")
	builder.WriteString(fmt.Sprintf("id=%v", bp.ID))
	builder.WriteString(", activityCode=")
	builder.WriteString(bp.ActivityCode)
	builder.WriteString(", packageName=")
	builder.WriteString(bp.PackageName)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", bp.Price))
	builder.WriteString(", dailyPrice=")
	builder.WriteString(fmt.Sprintf("%v", bp.DailyPrice))
	builder.WriteString(", novelIds=")
	builder.WriteString(bp.NovelIds)
	builder.WriteString(", effectTime=")
	builder.WriteString(bp.EffectTime.Format(time.ANSIC))
	builder.WriteString(", expiredTime=")
	builder.WriteString(bp.ExpiredTime.Format(time.ANSIC))
	builder.WriteString(", createdAt=")
	builder.WriteString(bp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(bp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", bp.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", bp.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", bp.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// BookPackages is a parsable slice of BookPackage.
type BookPackages []*BookPackage

func (bp BookPackages) config(cfg config) {
	for _i := range bp {
		bp[_i].config = cfg
	}
}
