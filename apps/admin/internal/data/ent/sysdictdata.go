// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysdictdata"
	"hope/apps/admin/internal/data/ent/sysdicttype"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysDictData is the model entity for the SysDictData schema.
type SysDictData struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// TypeId holds the value of the "typeId" field.
	// 字典类型ID
	TypeId int64 `json:"typeId,omitempty"`
	// TypeCode holds the value of the "typeCode" field.
	// 字典类型
	TypeCode string `json:"typeCode,omitempty"`
	// DictSort holds the value of the "dictSort" field.
	// 字典排序
	DictSort int32 `json:"dictSort,omitempty"`
	// DictLabel holds the value of the "dictLabel" field.
	// 字典标签
	DictLabel string `json:"dictLabel,omitempty"`
	// DictValue holds the value of the "dictValue" field.
	// 字典值
	DictValue string `json:"dictValue,omitempty"`
	// IsDefault holds the value of the "isDefault" field.
	// 是否默认
	IsDefault string `json:"isDefault,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status int32 `json:"status,omitempty"`
	// Default holds the value of the "default" field.
	// 默认
	Default string `json:"default,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysDictDataQuery when eager-loading is set.
	Edges SysDictDataEdges `json:"edges"`
}

// SysDictDataEdges holds the relations/edges for other nodes in the graph.
type SysDictDataEdges struct {
	// DictType holds the value of the dictType edge.
	DictType *SysDictType `json:"dictType,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DictTypeOrErr returns the DictType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysDictDataEdges) DictTypeOrErr() (*SysDictType, error) {
	if e.loadedTypes[0] {
		if e.DictType == nil {
			// The edge dictType was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sysdicttype.Label}
		}
		return e.DictType, nil
	}
	return nil, &NotLoadedError{edge: "dictType"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysDictData) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysdictdata.FieldID, sysdictdata.FieldTypeId, sysdictdata.FieldDictSort, sysdictdata.FieldStatus, sysdictdata.FieldCreateBy, sysdictdata.FieldUpdateBy, sysdictdata.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysdictdata.FieldTypeCode, sysdictdata.FieldDictLabel, sysdictdata.FieldDictValue, sysdictdata.FieldIsDefault, sysdictdata.FieldDefault, sysdictdata.FieldRemark:
			values[i] = new(sql.NullString)
		case sysdictdata.FieldCreatedAt, sysdictdata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysDictData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysDictData fields.
func (sdd *SysDictData) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysdictdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sdd.ID = int64(value.Int64)
		case sysdictdata.FieldTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field typeId", values[i])
			} else if value.Valid {
				sdd.TypeId = value.Int64
			}
		case sysdictdata.FieldTypeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field typeCode", values[i])
			} else if value.Valid {
				sdd.TypeCode = value.String
			}
		case sysdictdata.FieldDictSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dictSort", values[i])
			} else if value.Valid {
				sdd.DictSort = int32(value.Int64)
			}
		case sysdictdata.FieldDictLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dictLabel", values[i])
			} else if value.Valid {
				sdd.DictLabel = value.String
			}
		case sysdictdata.FieldDictValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dictValue", values[i])
			} else if value.Valid {
				sdd.DictValue = value.String
			}
		case sysdictdata.FieldIsDefault:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isDefault", values[i])
			} else if value.Valid {
				sdd.IsDefault = value.String
			}
		case sysdictdata.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sdd.Status = int32(value.Int64)
			}
		case sysdictdata.FieldDefault:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default", values[i])
			} else if value.Valid {
				sdd.Default = value.String
			}
		case sysdictdata.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sdd.Remark = value.String
			}
		case sysdictdata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sdd.CreatedAt = value.Time
			}
		case sysdictdata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sdd.UpdatedAt = value.Time
			}
		case sysdictdata.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sdd.CreateBy = value.Int64
			}
		case sysdictdata.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sdd.UpdateBy = value.Int64
			}
		case sysdictdata.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sdd.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryDictType queries the "dictType" edge of the SysDictData entity.
func (sdd *SysDictData) QueryDictType() *SysDictTypeQuery {
	return (&SysDictDataClient{config: sdd.config}).QueryDictType(sdd)
}

// Update returns a builder for updating this SysDictData.
// Note that you need to call SysDictData.Unwrap() before calling this method if this SysDictData
// was returned from a transaction, and the transaction was committed or rolled back.
func (sdd *SysDictData) Update() *SysDictDataUpdateOne {
	return (&SysDictDataClient{config: sdd.config}).UpdateOne(sdd)
}

// Unwrap unwraps the SysDictData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sdd *SysDictData) Unwrap() *SysDictData {
	tx, ok := sdd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysDictData is not a transactional entity")
	}
	sdd.config.driver = tx.drv
	return sdd
}

// String implements the fmt.Stringer.
func (sdd *SysDictData) String() string {
	var builder strings.Builder
	builder.WriteString("SysDictData(")
	builder.WriteString(fmt.Sprintf("id=%v", sdd.ID))
	builder.WriteString(", typeId=")
	builder.WriteString(fmt.Sprintf("%v", sdd.TypeId))
	builder.WriteString(", typeCode=")
	builder.WriteString(sdd.TypeCode)
	builder.WriteString(", dictSort=")
	builder.WriteString(fmt.Sprintf("%v", sdd.DictSort))
	builder.WriteString(", dictLabel=")
	builder.WriteString(sdd.DictLabel)
	builder.WriteString(", dictValue=")
	builder.WriteString(sdd.DictValue)
	builder.WriteString(", isDefault=")
	builder.WriteString(sdd.IsDefault)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", sdd.Status))
	builder.WriteString(", default=")
	builder.WriteString(sdd.Default)
	builder.WriteString(", remark=")
	builder.WriteString(sdd.Remark)
	builder.WriteString(", createdAt=")
	builder.WriteString(sdd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sdd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sdd.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sdd.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sdd.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysDictDataSlice is a parsable slice of SysDictData.
type SysDictDataSlice []*SysDictData

func (sdd SysDictDataSlice) config(cfg config) {
	for _i := range sdd {
		sdd[_i].config = cfg
	}
}
