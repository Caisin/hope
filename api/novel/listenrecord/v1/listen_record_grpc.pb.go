// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/listenrecord/v1/listen_record.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListenRecordClient is the client API for ListenRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListenRecordClient interface {
	// 分页查询ListenRecord
	GetListenRecordPage(ctx context.Context, in *ListenRecordPageReq, opts ...grpc.CallOption) (*ListenRecordPageReply, error)
	// 获取ListenRecord
	GetListenRecord(ctx context.Context, in *ListenRecordReq, opts ...grpc.CallOption) (*ListenRecordReply, error)
	// 更新ListenRecord
	UpdateListenRecord(ctx context.Context, in *ListenRecordUpdateReq, opts ...grpc.CallOption) (*ListenRecordUpdateReply, error)
	// 创建ListenRecord
	CreateListenRecord(ctx context.Context, in *ListenRecordCreateReq, opts ...grpc.CallOption) (*ListenRecordCreateReply, error)
	// 删除ListenRecord
	DeleteListenRecord(ctx context.Context, in *ListenRecordDeleteReq, opts ...grpc.CallOption) (*ListenRecordDeleteReply, error)
	// 批量删除ListenRecord
	BatchDeleteListenRecord(ctx context.Context, in *ListenRecordBatchDeleteReq, opts ...grpc.CallOption) (*ListenRecordDeleteReply, error)
}

type listenRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewListenRecordClient(cc grpc.ClientConnInterface) ListenRecordClient {
	return &listenRecordClient{cc}
}

func (c *listenRecordClient) GetListenRecordPage(ctx context.Context, in *ListenRecordPageReq, opts ...grpc.CallOption) (*ListenRecordPageReply, error) {
	out := new(ListenRecordPageReply)
	err := c.cc.Invoke(ctx, "/listenrecord.v1.ListenRecord/GetListenRecordPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenRecordClient) GetListenRecord(ctx context.Context, in *ListenRecordReq, opts ...grpc.CallOption) (*ListenRecordReply, error) {
	out := new(ListenRecordReply)
	err := c.cc.Invoke(ctx, "/listenrecord.v1.ListenRecord/GetListenRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenRecordClient) UpdateListenRecord(ctx context.Context, in *ListenRecordUpdateReq, opts ...grpc.CallOption) (*ListenRecordUpdateReply, error) {
	out := new(ListenRecordUpdateReply)
	err := c.cc.Invoke(ctx, "/listenrecord.v1.ListenRecord/UpdateListenRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenRecordClient) CreateListenRecord(ctx context.Context, in *ListenRecordCreateReq, opts ...grpc.CallOption) (*ListenRecordCreateReply, error) {
	out := new(ListenRecordCreateReply)
	err := c.cc.Invoke(ctx, "/listenrecord.v1.ListenRecord/CreateListenRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenRecordClient) DeleteListenRecord(ctx context.Context, in *ListenRecordDeleteReq, opts ...grpc.CallOption) (*ListenRecordDeleteReply, error) {
	out := new(ListenRecordDeleteReply)
	err := c.cc.Invoke(ctx, "/listenrecord.v1.ListenRecord/DeleteListenRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenRecordClient) BatchDeleteListenRecord(ctx context.Context, in *ListenRecordBatchDeleteReq, opts ...grpc.CallOption) (*ListenRecordDeleteReply, error) {
	out := new(ListenRecordDeleteReply)
	err := c.cc.Invoke(ctx, "/listenrecord.v1.ListenRecord/BatchDeleteListenRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenRecordServer is the server API for ListenRecord service.
// All implementations must embed UnimplementedListenRecordServer
// for forward compatibility
type ListenRecordServer interface {
	// 分页查询ListenRecord
	GetListenRecordPage(context.Context, *ListenRecordPageReq) (*ListenRecordPageReply, error)
	// 获取ListenRecord
	GetListenRecord(context.Context, *ListenRecordReq) (*ListenRecordReply, error)
	// 更新ListenRecord
	UpdateListenRecord(context.Context, *ListenRecordUpdateReq) (*ListenRecordUpdateReply, error)
	// 创建ListenRecord
	CreateListenRecord(context.Context, *ListenRecordCreateReq) (*ListenRecordCreateReply, error)
	// 删除ListenRecord
	DeleteListenRecord(context.Context, *ListenRecordDeleteReq) (*ListenRecordDeleteReply, error)
	// 批量删除ListenRecord
	BatchDeleteListenRecord(context.Context, *ListenRecordBatchDeleteReq) (*ListenRecordDeleteReply, error)
	mustEmbedUnimplementedListenRecordServer()
}

// UnimplementedListenRecordServer must be embedded to have forward compatible implementations.
type UnimplementedListenRecordServer struct {
}

func (UnimplementedListenRecordServer) GetListenRecordPage(context.Context, *ListenRecordPageReq) (*ListenRecordPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenRecordPage not implemented")
}
func (UnimplementedListenRecordServer) GetListenRecord(context.Context, *ListenRecordReq) (*ListenRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenRecord not implemented")
}
func (UnimplementedListenRecordServer) UpdateListenRecord(context.Context, *ListenRecordUpdateReq) (*ListenRecordUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListenRecord not implemented")
}
func (UnimplementedListenRecordServer) CreateListenRecord(context.Context, *ListenRecordCreateReq) (*ListenRecordCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListenRecord not implemented")
}
func (UnimplementedListenRecordServer) DeleteListenRecord(context.Context, *ListenRecordDeleteReq) (*ListenRecordDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListenRecord not implemented")
}
func (UnimplementedListenRecordServer) BatchDeleteListenRecord(context.Context, *ListenRecordBatchDeleteReq) (*ListenRecordDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteListenRecord not implemented")
}
func (UnimplementedListenRecordServer) mustEmbedUnimplementedListenRecordServer() {}

// UnsafeListenRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListenRecordServer will
// result in compilation errors.
type UnsafeListenRecordServer interface {
	mustEmbedUnimplementedListenRecordServer()
}

func RegisterListenRecordServer(s grpc.ServiceRegistrar, srv ListenRecordServer) {
	s.RegisterService(&ListenRecord_ServiceDesc, srv)
}

func _ListenRecord_GetListenRecordPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenRecordPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenRecordServer).GetListenRecordPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listenrecord.v1.ListenRecord/GetListenRecordPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenRecordServer).GetListenRecordPage(ctx, req.(*ListenRecordPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenRecord_GetListenRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenRecordServer).GetListenRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listenrecord.v1.ListenRecord/GetListenRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenRecordServer).GetListenRecord(ctx, req.(*ListenRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenRecord_UpdateListenRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenRecordUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenRecordServer).UpdateListenRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listenrecord.v1.ListenRecord/UpdateListenRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenRecordServer).UpdateListenRecord(ctx, req.(*ListenRecordUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenRecord_CreateListenRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenRecordCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenRecordServer).CreateListenRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listenrecord.v1.ListenRecord/CreateListenRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenRecordServer).CreateListenRecord(ctx, req.(*ListenRecordCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenRecord_DeleteListenRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenRecordDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenRecordServer).DeleteListenRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listenrecord.v1.ListenRecord/DeleteListenRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenRecordServer).DeleteListenRecord(ctx, req.(*ListenRecordDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenRecord_BatchDeleteListenRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenRecordBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenRecordServer).BatchDeleteListenRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listenrecord.v1.ListenRecord/BatchDeleteListenRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenRecordServer).BatchDeleteListenRecord(ctx, req.(*ListenRecordBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ListenRecord_ServiceDesc is the grpc.ServiceDesc for ListenRecord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListenRecord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listenrecord.v1.ListenRecord",
	HandlerType: (*ListenRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListenRecordPage",
			Handler:    _ListenRecord_GetListenRecordPage_Handler,
		},
		{
			MethodName: "GetListenRecord",
			Handler:    _ListenRecord_GetListenRecord_Handler,
		},
		{
			MethodName: "UpdateListenRecord",
			Handler:    _ListenRecord_UpdateListenRecord_Handler,
		},
		{
			MethodName: "CreateListenRecord",
			Handler:    _ListenRecord_CreateListenRecord_Handler,
		},
		{
			MethodName: "DeleteListenRecord",
			Handler:    _ListenRecord_DeleteListenRecord_Handler,
		},
		{
			MethodName: "BatchDeleteListenRecord",
			Handler:    _ListenRecord_BatchDeleteListenRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/listenrecord/v1/listen_record.proto",
}
