// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/predicate"
	"hope/apps/param/internal/data/ent/userconsume"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserConsumeUpdate is the builder for updating UserConsume entities.
type UserConsumeUpdate struct {
	config
	hooks    []Hook
	mutation *UserConsumeMutation
}

// Where appends a list predicates to the UserConsumeUpdate builder.
func (ucu *UserConsumeUpdate) Where(ps ...predicate.UserConsume) *UserConsumeUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetNovelId sets the "novelId" field.
func (ucu *UserConsumeUpdate) SetNovelId(i int64) *UserConsumeUpdate {
	ucu.mutation.ResetNovelId()
	ucu.mutation.SetNovelId(i)
	return ucu
}

// AddNovelId adds i to the "novelId" field.
func (ucu *UserConsumeUpdate) AddNovelId(i int64) *UserConsumeUpdate {
	ucu.mutation.AddNovelId(i)
	return ucu
}

// SetCoin sets the "coin" field.
func (ucu *UserConsumeUpdate) SetCoin(i int64) *UserConsumeUpdate {
	ucu.mutation.ResetCoin()
	ucu.mutation.SetCoin(i)
	return ucu
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (ucu *UserConsumeUpdate) SetNillableCoin(i *int64) *UserConsumeUpdate {
	if i != nil {
		ucu.SetCoin(*i)
	}
	return ucu
}

// AddCoin adds i to the "coin" field.
func (ucu *UserConsumeUpdate) AddCoin(i int64) *UserConsumeUpdate {
	ucu.mutation.AddCoin(i)
	return ucu
}

// ClearCoin clears the value of the "coin" field.
func (ucu *UserConsumeUpdate) ClearCoin() *UserConsumeUpdate {
	ucu.mutation.ClearCoin()
	return ucu
}

// SetCoupon sets the "coupon" field.
func (ucu *UserConsumeUpdate) SetCoupon(i int64) *UserConsumeUpdate {
	ucu.mutation.ResetCoupon()
	ucu.mutation.SetCoupon(i)
	return ucu
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (ucu *UserConsumeUpdate) SetNillableCoupon(i *int64) *UserConsumeUpdate {
	if i != nil {
		ucu.SetCoupon(*i)
	}
	return ucu
}

// AddCoupon adds i to the "coupon" field.
func (ucu *UserConsumeUpdate) AddCoupon(i int64) *UserConsumeUpdate {
	ucu.mutation.AddCoupon(i)
	return ucu
}

// ClearCoupon clears the value of the "coupon" field.
func (ucu *UserConsumeUpdate) ClearCoupon() *UserConsumeUpdate {
	ucu.mutation.ClearCoupon()
	return ucu
}

// SetDiscount sets the "discount" field.
func (ucu *UserConsumeUpdate) SetDiscount(i int64) *UserConsumeUpdate {
	ucu.mutation.ResetDiscount()
	ucu.mutation.SetDiscount(i)
	return ucu
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (ucu *UserConsumeUpdate) SetNillableDiscount(i *int64) *UserConsumeUpdate {
	if i != nil {
		ucu.SetDiscount(*i)
	}
	return ucu
}

// AddDiscount adds i to the "discount" field.
func (ucu *UserConsumeUpdate) AddDiscount(i int64) *UserConsumeUpdate {
	ucu.mutation.AddDiscount(i)
	return ucu
}

// ClearDiscount clears the value of the "discount" field.
func (ucu *UserConsumeUpdate) ClearDiscount() *UserConsumeUpdate {
	ucu.mutation.ClearDiscount()
	return ucu
}

// SetUpdatedAt sets the "updatedAt" field.
func (ucu *UserConsumeUpdate) SetUpdatedAt(t time.Time) *UserConsumeUpdate {
	ucu.mutation.SetUpdatedAt(t)
	return ucu
}

// SetCreateBy sets the "createBy" field.
func (ucu *UserConsumeUpdate) SetCreateBy(i int64) *UserConsumeUpdate {
	ucu.mutation.ResetCreateBy()
	ucu.mutation.SetCreateBy(i)
	return ucu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ucu *UserConsumeUpdate) SetNillableCreateBy(i *int64) *UserConsumeUpdate {
	if i != nil {
		ucu.SetCreateBy(*i)
	}
	return ucu
}

// AddCreateBy adds i to the "createBy" field.
func (ucu *UserConsumeUpdate) AddCreateBy(i int64) *UserConsumeUpdate {
	ucu.mutation.AddCreateBy(i)
	return ucu
}

// SetUpdateBy sets the "updateBy" field.
func (ucu *UserConsumeUpdate) SetUpdateBy(i int64) *UserConsumeUpdate {
	ucu.mutation.ResetUpdateBy()
	ucu.mutation.SetUpdateBy(i)
	return ucu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ucu *UserConsumeUpdate) SetNillableUpdateBy(i *int64) *UserConsumeUpdate {
	if i != nil {
		ucu.SetUpdateBy(*i)
	}
	return ucu
}

// AddUpdateBy adds i to the "updateBy" field.
func (ucu *UserConsumeUpdate) AddUpdateBy(i int64) *UserConsumeUpdate {
	ucu.mutation.AddUpdateBy(i)
	return ucu
}

// SetTenantId sets the "tenantId" field.
func (ucu *UserConsumeUpdate) SetTenantId(i int64) *UserConsumeUpdate {
	ucu.mutation.ResetTenantId()
	ucu.mutation.SetTenantId(i)
	return ucu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ucu *UserConsumeUpdate) SetNillableTenantId(i *int64) *UserConsumeUpdate {
	if i != nil {
		ucu.SetTenantId(*i)
	}
	return ucu
}

// AddTenantId adds i to the "tenantId" field.
func (ucu *UserConsumeUpdate) AddTenantId(i int64) *UserConsumeUpdate {
	ucu.mutation.AddTenantId(i)
	return ucu
}

// Mutation returns the UserConsumeMutation object of the builder.
func (ucu *UserConsumeUpdate) Mutation() *UserConsumeMutation {
	return ucu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserConsumeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ucu.defaults()
	if len(ucu.hooks) == 0 {
		affected, err = ucu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserConsumeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucu.mutation = mutation
			affected, err = ucu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ucu.hooks) - 1; i >= 0; i-- {
			if ucu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserConsumeUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserConsumeUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserConsumeUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucu *UserConsumeUpdate) defaults() {
	if _, ok := ucu.mutation.UpdatedAt(); !ok {
		v := userconsume.UpdateDefaultUpdatedAt()
		ucu.mutation.SetUpdatedAt(v)
	}
}

func (ucu *UserConsumeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userconsume.Table,
			Columns: userconsume.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userconsume.FieldID,
			},
		},
	}
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldNovelId,
		})
	}
	if value, ok := ucu.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldNovelId,
		})
	}
	if value, ok := ucu.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoin,
		})
	}
	if value, ok := ucu.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoin,
		})
	}
	if ucu.mutation.CoinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userconsume.FieldCoin,
		})
	}
	if value, ok := ucu.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoupon,
		})
	}
	if value, ok := ucu.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoupon,
		})
	}
	if ucu.mutation.CouponCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userconsume.FieldCoupon,
		})
	}
	if value, ok := ucu.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldDiscount,
		})
	}
	if value, ok := ucu.mutation.AddedDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldDiscount,
		})
	}
	if ucu.mutation.DiscountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userconsume.FieldDiscount,
		})
	}
	if value, ok := ucu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userconsume.FieldUpdatedAt,
		})
	}
	if value, ok := ucu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCreateBy,
		})
	}
	if value, ok := ucu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCreateBy,
		})
	}
	if value, ok := ucu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldUpdateBy,
		})
	}
	if value, ok := ucu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldUpdateBy,
		})
	}
	if value, ok := ucu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldTenantId,
		})
	}
	if value, ok := ucu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userconsume.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserConsumeUpdateOne is the builder for updating a single UserConsume entity.
type UserConsumeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserConsumeMutation
}

// SetNovelId sets the "novelId" field.
func (ucuo *UserConsumeUpdateOne) SetNovelId(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.ResetNovelId()
	ucuo.mutation.SetNovelId(i)
	return ucuo
}

// AddNovelId adds i to the "novelId" field.
func (ucuo *UserConsumeUpdateOne) AddNovelId(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.AddNovelId(i)
	return ucuo
}

// SetCoin sets the "coin" field.
func (ucuo *UserConsumeUpdateOne) SetCoin(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.ResetCoin()
	ucuo.mutation.SetCoin(i)
	return ucuo
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (ucuo *UserConsumeUpdateOne) SetNillableCoin(i *int64) *UserConsumeUpdateOne {
	if i != nil {
		ucuo.SetCoin(*i)
	}
	return ucuo
}

// AddCoin adds i to the "coin" field.
func (ucuo *UserConsumeUpdateOne) AddCoin(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.AddCoin(i)
	return ucuo
}

// ClearCoin clears the value of the "coin" field.
func (ucuo *UserConsumeUpdateOne) ClearCoin() *UserConsumeUpdateOne {
	ucuo.mutation.ClearCoin()
	return ucuo
}

// SetCoupon sets the "coupon" field.
func (ucuo *UserConsumeUpdateOne) SetCoupon(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.ResetCoupon()
	ucuo.mutation.SetCoupon(i)
	return ucuo
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (ucuo *UserConsumeUpdateOne) SetNillableCoupon(i *int64) *UserConsumeUpdateOne {
	if i != nil {
		ucuo.SetCoupon(*i)
	}
	return ucuo
}

// AddCoupon adds i to the "coupon" field.
func (ucuo *UserConsumeUpdateOne) AddCoupon(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.AddCoupon(i)
	return ucuo
}

// ClearCoupon clears the value of the "coupon" field.
func (ucuo *UserConsumeUpdateOne) ClearCoupon() *UserConsumeUpdateOne {
	ucuo.mutation.ClearCoupon()
	return ucuo
}

// SetDiscount sets the "discount" field.
func (ucuo *UserConsumeUpdateOne) SetDiscount(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.ResetDiscount()
	ucuo.mutation.SetDiscount(i)
	return ucuo
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (ucuo *UserConsumeUpdateOne) SetNillableDiscount(i *int64) *UserConsumeUpdateOne {
	if i != nil {
		ucuo.SetDiscount(*i)
	}
	return ucuo
}

// AddDiscount adds i to the "discount" field.
func (ucuo *UserConsumeUpdateOne) AddDiscount(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.AddDiscount(i)
	return ucuo
}

// ClearDiscount clears the value of the "discount" field.
func (ucuo *UserConsumeUpdateOne) ClearDiscount() *UserConsumeUpdateOne {
	ucuo.mutation.ClearDiscount()
	return ucuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ucuo *UserConsumeUpdateOne) SetUpdatedAt(t time.Time) *UserConsumeUpdateOne {
	ucuo.mutation.SetUpdatedAt(t)
	return ucuo
}

// SetCreateBy sets the "createBy" field.
func (ucuo *UserConsumeUpdateOne) SetCreateBy(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.ResetCreateBy()
	ucuo.mutation.SetCreateBy(i)
	return ucuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ucuo *UserConsumeUpdateOne) SetNillableCreateBy(i *int64) *UserConsumeUpdateOne {
	if i != nil {
		ucuo.SetCreateBy(*i)
	}
	return ucuo
}

// AddCreateBy adds i to the "createBy" field.
func (ucuo *UserConsumeUpdateOne) AddCreateBy(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.AddCreateBy(i)
	return ucuo
}

// SetUpdateBy sets the "updateBy" field.
func (ucuo *UserConsumeUpdateOne) SetUpdateBy(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.ResetUpdateBy()
	ucuo.mutation.SetUpdateBy(i)
	return ucuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ucuo *UserConsumeUpdateOne) SetNillableUpdateBy(i *int64) *UserConsumeUpdateOne {
	if i != nil {
		ucuo.SetUpdateBy(*i)
	}
	return ucuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (ucuo *UserConsumeUpdateOne) AddUpdateBy(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.AddUpdateBy(i)
	return ucuo
}

// SetTenantId sets the "tenantId" field.
func (ucuo *UserConsumeUpdateOne) SetTenantId(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.ResetTenantId()
	ucuo.mutation.SetTenantId(i)
	return ucuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ucuo *UserConsumeUpdateOne) SetNillableTenantId(i *int64) *UserConsumeUpdateOne {
	if i != nil {
		ucuo.SetTenantId(*i)
	}
	return ucuo
}

// AddTenantId adds i to the "tenantId" field.
func (ucuo *UserConsumeUpdateOne) AddTenantId(i int64) *UserConsumeUpdateOne {
	ucuo.mutation.AddTenantId(i)
	return ucuo
}

// Mutation returns the UserConsumeMutation object of the builder.
func (ucuo *UserConsumeUpdateOne) Mutation() *UserConsumeMutation {
	return ucuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserConsumeUpdateOne) Select(field string, fields ...string) *UserConsumeUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserConsume entity.
func (ucuo *UserConsumeUpdateOne) Save(ctx context.Context) (*UserConsume, error) {
	var (
		err  error
		node *UserConsume
	)
	ucuo.defaults()
	if len(ucuo.hooks) == 0 {
		node, err = ucuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserConsumeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucuo.mutation = mutation
			node, err = ucuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ucuo.hooks) - 1; i >= 0; i-- {
			if ucuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserConsumeUpdateOne) SaveX(ctx context.Context) *UserConsume {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserConsumeUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserConsumeUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucuo *UserConsumeUpdateOne) defaults() {
	if _, ok := ucuo.mutation.UpdatedAt(); !ok {
		v := userconsume.UpdateDefaultUpdatedAt()
		ucuo.mutation.SetUpdatedAt(v)
	}
}

func (ucuo *UserConsumeUpdateOne) sqlSave(ctx context.Context) (_node *UserConsume, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userconsume.Table,
			Columns: userconsume.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userconsume.FieldID,
			},
		},
	}
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserConsume.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userconsume.FieldID)
		for _, f := range fields {
			if !userconsume.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userconsume.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldNovelId,
		})
	}
	if value, ok := ucuo.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldNovelId,
		})
	}
	if value, ok := ucuo.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoin,
		})
	}
	if value, ok := ucuo.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoin,
		})
	}
	if ucuo.mutation.CoinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userconsume.FieldCoin,
		})
	}
	if value, ok := ucuo.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoupon,
		})
	}
	if value, ok := ucuo.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoupon,
		})
	}
	if ucuo.mutation.CouponCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userconsume.FieldCoupon,
		})
	}
	if value, ok := ucuo.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldDiscount,
		})
	}
	if value, ok := ucuo.mutation.AddedDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldDiscount,
		})
	}
	if ucuo.mutation.DiscountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: userconsume.FieldDiscount,
		})
	}
	if value, ok := ucuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userconsume.FieldUpdatedAt,
		})
	}
	if value, ok := ucuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCreateBy,
		})
	}
	if value, ok := ucuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCreateBy,
		})
	}
	if value, ok := ucuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldUpdateBy,
		})
	}
	if value, ok := ucuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldUpdateBy,
		})
	}
	if value, ok := ucuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldTenantId,
		})
	}
	if value, ok := ucuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldTenantId,
		})
	}
	_node = &UserConsume{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userconsume.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
