// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/activity.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/{{.mode}}/{{.pkg}}/v1"
	"hope/apps/{{.mode}}/internal/data/ent"
)

func {{.name}}UpdateReq2Data(v *v1.{{.name}}UpdateReq) *ent.{{.name}} {
	if v == nil {
		return nil
	}
	return &ent.{{.name}}{
		ID:           v.Id,
		ActivityCode: v.ActivityCode,
		ActivityName: v.ActivityName,
		Summary:      v.Summary,
		RuleImgSc:    v.RuleImgSc,
		RuleImgTc:    v.RuleImgTc,
		PopupImg:     v.PopupImg,
		RegDays:      v.RegDays,
		CycleType:    v.CycleType,
		EffectTime:   v.EffectTime.AsTime(),
	}
}

func ActivityData2UpdateReq(v *ent.Activity) *v1.ActivityUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.ActivityUpdateReq{
		Id:           v.ID,
		ActivityCode: v.ActivityCode,
		ActivityName: v.ActivityName,
		Summary:      v.Summary,
		RuleImgSc:    v.RuleImgSc,
		RuleImgTc:    v.RuleImgTc,
		PopupImg:     v.PopupImg,
		RegDays:      v.RegDays,
		CycleType:    v.CycleType,
		EffectTime:   timestamppb.New(v.EffectTime),
	}
}

func ActivityCreateReq2Data(v *v1.ActivityCreateReq) *ent.Activity {
	if v == nil {
		return nil
	}
	return &ent.Activity{
		ActivityCode: v.ActivityCode,
		ActivityName: v.ActivityName,
		Summary:      v.Summary,
		RuleImgSc:    v.RuleImgSc,
		RuleImgTc:    v.RuleImgTc,
		PopupImg:     v.PopupImg,
		RegDays:      v.RegDays,
		CycleType:    v.CycleType,
		EffectTime:   v.EffectTime.AsTime(),
	}
}

func ActivityData2CreateReq(v *ent.Activity) *v1.ActivityCreateReq {
	if v == nil {
		return nil
	}
	return &v1.ActivityCreateReq{
		ActivityCode: v.ActivityCode,
		ActivityName: v.ActivityName,
		Summary:      v.Summary,
		RuleImgSc:    v.RuleImgSc,
		RuleImgTc:    v.RuleImgTc,
		PopupImg:     v.PopupImg,
		RegDays:      v.RegDays,
		CycleType:    v.CycleType,
		EffectTime:   timestamppb.New(v.EffectTime),
	}
}

func ActivityReq2Data(v *v1.ActivityReq) *ent.Activity {
	if v == nil {
		return nil
	}
	return &ent.Activity{
		ActivityCode: v.ActivityCode,
		ActivityName: v.ActivityName,
		Summary:      v.Summary,
		RuleImgSc:    v.RuleImgSc,
		RuleImgTc:    v.RuleImgTc,
		PopupImg:     v.PopupImg,
		RegDays:      v.RegDays,
		CycleType:    v.CycleType,
		EffectTime:   v.EffectTime.AsTime(),
	}
}

func ActivityData2Req(v *ent.Activity) *v1.ActivityReq {
	if v == nil {
		return nil
	}
	return &v1.ActivityReq{
		ActivityCode: v.ActivityCode,
		ActivityName: v.ActivityName,
		Summary:      v.Summary,
		RuleImgSc:    v.RuleImgSc,
		RuleImgTc:    v.RuleImgTc,
		PopupImg:     v.PopupImg,
		RegDays:      v.RegDays,
		CycleType:    v.CycleType,
		EffectTime:   timestamppb.New(v.EffectTime),
	}
}

func ActivityData2Reply(v *ent.Activity) *v1.ActivityData {
	if v == nil {
		return nil
	}
	return &v1.ActivityData{
		Id:           v.ID,
		ActivityCode: v.ActivityCode,
		ActivityName: v.ActivityName,
		Summary:      v.Summary,
		RuleImgSc:    v.RuleImgSc,
		RuleImgTc:    v.RuleImgTc,
		PopupImg:     v.PopupImg,
		RegDays:      v.RegDays,
		CycleType:    v.CycleType,
		EffectTime:   timestamppb.New(v.EffectTime),
		ExpiredTime:  timestamppb.New(v.ExpiredTime),
		CreatedAt:    timestamppb.New(v.CreatedAt),
		UpdatedAt:    timestamppb.New(v.UpdatedAt),
		CreateBy:     v.CreateBy,
		UpdateBy:     v.UpdateBy,
		TenantId:     v.TenantId,
	}
}
