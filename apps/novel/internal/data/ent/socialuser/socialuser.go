// Code generated by entc, DO NOT EDIT.

package socialuser

import (
	"time"
)

const (
	// Label holds the string label denoting the socialuser type in the database.
	Label = "social_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldUnionid holds the string denoting the unionid field in the database.
	FieldUnionid = "unionid"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldOpenid holds the string denoting the openid field in the database.
	FieldOpenid = "openid"
	// FieldRoutineOpenid holds the string denoting the routineopenid field in the database.
	FieldRoutineOpenid = "routine_openid"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldNickName holds the string denoting the nickname field in the database.
	FieldNickName = "nick_name"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldGroupid holds the string denoting the groupid field in the database.
	FieldGroupid = "groupid"
	// FieldTagidList holds the string denoting the tagidlist field in the database.
	FieldTagidList = "tagid_list"
	// FieldSubscribe holds the string denoting the subscribe field in the database.
	FieldSubscribe = "subscribe"
	// FieldSubscribeTime holds the string denoting the subscribetime field in the database.
	FieldSubscribeTime = "subscribe_time"
	// FieldSessionKey holds the string denoting the sessionkey field in the database.
	FieldSessionKey = "session_key"
	// FieldUserType holds the string denoting the usertype field in the database.
	FieldUserType = "user_type"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgeListenRecords holds the string denoting the listenrecords edge name in mutations.
	EdgeListenRecords = "listenRecords"
	// EdgeAds holds the string denoting the ads edge name in mutations.
	EdgeAds = "ads"
	// EdgeBookshelves holds the string denoting the bookshelves edge name in mutations.
	EdgeBookshelves = "bookshelves"
	// EdgeAutoBuyNovels holds the string denoting the autobuynovels edge name in mutations.
	EdgeAutoBuyNovels = "autoBuyNovels"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeMsgs holds the string denoting the msgs edge name in mutations.
	EdgeMsgs = "msgs"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeVips holds the string denoting the vips edge name in mutations.
	EdgeVips = "vips"
	// EdgeBalances holds the string denoting the balances edge name in mutations.
	EdgeBalances = "balances"
	// EdgeAssetLogs holds the string denoting the assetlogs edge name in mutations.
	EdgeAssetLogs = "assetLogs"
	// EdgeBuyChapterRecords holds the string denoting the buychapterrecords edge name in mutations.
	EdgeBuyChapterRecords = "buyChapterRecords"
	// EdgeBuyNovelRecords holds the string denoting the buynovelrecords edge name in mutations.
	EdgeBuyNovelRecords = "buyNovelRecords"
	// EdgeChannel holds the string denoting the channel edge name in mutations.
	EdgeChannel = "channel"
	// Table holds the table name of the socialuser in the database.
	Table = "social_users"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "task_logs"
	// TasksInverseTable is the table name for the TaskLog entity.
	// It exists in this package in order to avoid circular dependency with the "tasklog" package.
	TasksInverseTable = "task_logs"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "social_user_tasks"
	// ListenRecordsTable is the table that holds the listenRecords relation/edge.
	ListenRecordsTable = "listen_records"
	// ListenRecordsInverseTable is the table name for the ListenRecord entity.
	// It exists in this package in order to avoid circular dependency with the "listenrecord" package.
	ListenRecordsInverseTable = "listen_records"
	// ListenRecordsColumn is the table column denoting the listenRecords relation/edge.
	ListenRecordsColumn = "social_user_listen_records"
	// AdsTable is the table that holds the ads relation/edge.
	AdsTable = "ad_change_logs"
	// AdsInverseTable is the table name for the AdChangeLog entity.
	// It exists in this package in order to avoid circular dependency with the "adchangelog" package.
	AdsInverseTable = "ad_change_logs"
	// AdsColumn is the table column denoting the ads relation/edge.
	AdsColumn = "social_user_ads"
	// BookshelvesTable is the table that holds the bookshelves relation/edge.
	BookshelvesTable = "novel_bookshelves"
	// BookshelvesInverseTable is the table name for the NovelBookshelf entity.
	// It exists in this package in order to avoid circular dependency with the "novelbookshelf" package.
	BookshelvesInverseTable = "novel_bookshelves"
	// BookshelvesColumn is the table column denoting the bookshelves relation/edge.
	BookshelvesColumn = "social_user_bookshelves"
	// AutoBuyNovelsTable is the table that holds the autoBuyNovels relation/edge.
	AutoBuyNovelsTable = "novel_auto_buys"
	// AutoBuyNovelsInverseTable is the table name for the NovelAutoBuy entity.
	// It exists in this package in order to avoid circular dependency with the "novelautobuy" package.
	AutoBuyNovelsInverseTable = "novel_auto_buys"
	// AutoBuyNovelsColumn is the table column denoting the autoBuyNovels relation/edge.
	AutoBuyNovelsColumn = "social_user_auto_buy_novels"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "novel_comments"
	// CommentsInverseTable is the table name for the NovelComment entity.
	// It exists in this package in order to avoid circular dependency with the "novelcomment" package.
	CommentsInverseTable = "novel_comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "social_user_comments"
	// MsgsTable is the table that holds the msgs relation/edge.
	MsgsTable = "user_msgs"
	// MsgsInverseTable is the table name for the UserMsg entity.
	// It exists in this package in order to avoid circular dependency with the "usermsg" package.
	MsgsInverseTable = "user_msgs"
	// MsgsColumn is the table column denoting the msgs relation/edge.
	MsgsColumn = "social_user_msgs"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "pay_orders"
	// OrdersInverseTable is the table name for the PayOrder entity.
	// It exists in this package in order to avoid circular dependency with the "payorder" package.
	OrdersInverseTable = "pay_orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "social_user_orders"
	// VipsTable is the table that holds the vips relation/edge. The primary key declared below.
	VipsTable = "social_user_vips"
	// VipsInverseTable is the table name for the VipUser entity.
	// It exists in this package in order to avoid circular dependency with the "vipuser" package.
	VipsInverseTable = "vip_users"
	// BalancesTable is the table that holds the balances relation/edge.
	BalancesTable = "am_balances"
	// BalancesInverseTable is the table name for the AmBalance entity.
	// It exists in this package in order to avoid circular dependency with the "ambalance" package.
	BalancesInverseTable = "am_balances"
	// BalancesColumn is the table column denoting the balances relation/edge.
	BalancesColumn = "social_user_balances"
	// AssetLogsTable is the table that holds the assetLogs relation/edge.
	AssetLogsTable = "asset_change_logs"
	// AssetLogsInverseTable is the table name for the AssetChangeLog entity.
	// It exists in this package in order to avoid circular dependency with the "assetchangelog" package.
	AssetLogsInverseTable = "asset_change_logs"
	// AssetLogsColumn is the table column denoting the assetLogs relation/edge.
	AssetLogsColumn = "social_user_asset_logs"
	// BuyChapterRecordsTable is the table that holds the buyChapterRecords relation/edge.
	BuyChapterRecordsTable = "novel_buy_chapter_records"
	// BuyChapterRecordsInverseTable is the table name for the NovelBuyChapterRecord entity.
	// It exists in this package in order to avoid circular dependency with the "novelbuychapterrecord" package.
	BuyChapterRecordsInverseTable = "novel_buy_chapter_records"
	// BuyChapterRecordsColumn is the table column denoting the buyChapterRecords relation/edge.
	BuyChapterRecordsColumn = "social_user_buy_chapter_records"
	// BuyNovelRecordsTable is the table that holds the buyNovelRecords relation/edge.
	BuyNovelRecordsTable = "novel_buy_records"
	// BuyNovelRecordsInverseTable is the table name for the NovelBuyRecord entity.
	// It exists in this package in order to avoid circular dependency with the "novelbuyrecord" package.
	BuyNovelRecordsInverseTable = "novel_buy_records"
	// BuyNovelRecordsColumn is the table column denoting the buyNovelRecords relation/edge.
	BuyNovelRecordsColumn = "social_user_buy_novel_records"
	// ChannelTable is the table that holds the channel relation/edge.
	ChannelTable = "social_users"
	// ChannelInverseTable is the table name for the AdChannel entity.
	// It exists in this package in order to avoid circular dependency with the "adchannel" package.
	ChannelInverseTable = "ad_channels"
	// ChannelColumn is the table column denoting the channel relation/edge.
	ChannelColumn = "ad_channel_users"
)

// Columns holds all SQL columns for socialuser fields.
var Columns = []string{
	FieldID,
	FieldUserId,
	FieldUnionid,
	FieldToken,
	FieldOpenid,
	FieldRoutineOpenid,
	FieldUserName,
	FieldNickName,
	FieldBirthday,
	FieldPhone,
	FieldEmail,
	FieldPassword,
	FieldAvatar,
	FieldSex,
	FieldRegion,
	FieldCity,
	FieldLanguage,
	FieldProvince,
	FieldCountry,
	FieldSignature,
	FieldRemark,
	FieldGroupid,
	FieldTagidList,
	FieldSubscribe,
	FieldSubscribeTime,
	FieldSessionKey,
	FieldUserType,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreateBy,
	FieldUpdateBy,
	FieldTenantId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "social_users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ad_channel_users",
}

var (
	// VipsPrimaryKey and VipsColumn2 are the table columns denoting the
	// primary key for the vips relation (M2M).
	VipsPrimaryKey = []string{"social_user_id", "vip_user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateBy holds the default value on creation for the "createBy" field.
	DefaultCreateBy int64
	// DefaultUpdateBy holds the default value on creation for the "updateBy" field.
	DefaultUpdateBy int64
	// DefaultTenantId holds the default value on creation for the "tenantId" field.
	DefaultTenantId int64
)
