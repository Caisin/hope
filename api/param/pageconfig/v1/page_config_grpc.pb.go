// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/param/pageconfig/v1/page_config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PageConfigClient is the client API for PageConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageConfigClient interface {
	// 分页查询PageConfig
	GetPagePageConfig(ctx context.Context, in *PageConfigPageReq, opts ...grpc.CallOption) (*PageConfigPageReply, error)
	// 获取PageConfig
	GetPageConfig(ctx context.Context, in *PageConfigReq, opts ...grpc.CallOption) (*PageConfigReply, error)
	// 更新PageConfig
	UpdatePageConfig(ctx context.Context, in *PageConfigUpdateReq, opts ...grpc.CallOption) (*PageConfigUpdateReply, error)
	// 创建PageConfig
	CreatePageConfig(ctx context.Context, in *PageConfigCreateReq, opts ...grpc.CallOption) (*PageConfigCreateReply, error)
	// 删除PageConfig
	DeletePageConfig(ctx context.Context, in *PageConfigDeleteReq, opts ...grpc.CallOption) (*PageConfigDeleteReply, error)
	// 批量删除PageConfig
	BatchDeletePageConfig(ctx context.Context, in *PageConfigBatchDeleteReq, opts ...grpc.CallOption) (*PageConfigDeleteReply, error)
}

type pageConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewPageConfigClient(cc grpc.ClientConnInterface) PageConfigClient {
	return &pageConfigClient{cc}
}

func (c *pageConfigClient) GetPagePageConfig(ctx context.Context, in *PageConfigPageReq, opts ...grpc.CallOption) (*PageConfigPageReply, error) {
	out := new(PageConfigPageReply)
	err := c.cc.Invoke(ctx, "/pageconfig.v1.PageConfig/GetPagePageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageConfigClient) GetPageConfig(ctx context.Context, in *PageConfigReq, opts ...grpc.CallOption) (*PageConfigReply, error) {
	out := new(PageConfigReply)
	err := c.cc.Invoke(ctx, "/pageconfig.v1.PageConfig/GetPageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageConfigClient) UpdatePageConfig(ctx context.Context, in *PageConfigUpdateReq, opts ...grpc.CallOption) (*PageConfigUpdateReply, error) {
	out := new(PageConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/pageconfig.v1.PageConfig/UpdatePageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageConfigClient) CreatePageConfig(ctx context.Context, in *PageConfigCreateReq, opts ...grpc.CallOption) (*PageConfigCreateReply, error) {
	out := new(PageConfigCreateReply)
	err := c.cc.Invoke(ctx, "/pageconfig.v1.PageConfig/CreatePageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageConfigClient) DeletePageConfig(ctx context.Context, in *PageConfigDeleteReq, opts ...grpc.CallOption) (*PageConfigDeleteReply, error) {
	out := new(PageConfigDeleteReply)
	err := c.cc.Invoke(ctx, "/pageconfig.v1.PageConfig/DeletePageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageConfigClient) BatchDeletePageConfig(ctx context.Context, in *PageConfigBatchDeleteReq, opts ...grpc.CallOption) (*PageConfigDeleteReply, error) {
	out := new(PageConfigDeleteReply)
	err := c.cc.Invoke(ctx, "/pageconfig.v1.PageConfig/BatchDeletePageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageConfigServer is the server API for PageConfig service.
// All implementations must embed UnimplementedPageConfigServer
// for forward compatibility
type PageConfigServer interface {
	// 分页查询PageConfig
	GetPagePageConfig(context.Context, *PageConfigPageReq) (*PageConfigPageReply, error)
	// 获取PageConfig
	GetPageConfig(context.Context, *PageConfigReq) (*PageConfigReply, error)
	// 更新PageConfig
	UpdatePageConfig(context.Context, *PageConfigUpdateReq) (*PageConfigUpdateReply, error)
	// 创建PageConfig
	CreatePageConfig(context.Context, *PageConfigCreateReq) (*PageConfigCreateReply, error)
	// 删除PageConfig
	DeletePageConfig(context.Context, *PageConfigDeleteReq) (*PageConfigDeleteReply, error)
	// 批量删除PageConfig
	BatchDeletePageConfig(context.Context, *PageConfigBatchDeleteReq) (*PageConfigDeleteReply, error)
	mustEmbedUnimplementedPageConfigServer()
}

// UnimplementedPageConfigServer must be embedded to have forward compatible implementations.
type UnimplementedPageConfigServer struct {
}

func (UnimplementedPageConfigServer) GetPagePageConfig(context.Context, *PageConfigPageReq) (*PageConfigPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPagePageConfig not implemented")
}
func (UnimplementedPageConfigServer) GetPageConfig(context.Context, *PageConfigReq) (*PageConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageConfig not implemented")
}
func (UnimplementedPageConfigServer) UpdatePageConfig(context.Context, *PageConfigUpdateReq) (*PageConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePageConfig not implemented")
}
func (UnimplementedPageConfigServer) CreatePageConfig(context.Context, *PageConfigCreateReq) (*PageConfigCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePageConfig not implemented")
}
func (UnimplementedPageConfigServer) DeletePageConfig(context.Context, *PageConfigDeleteReq) (*PageConfigDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePageConfig not implemented")
}
func (UnimplementedPageConfigServer) BatchDeletePageConfig(context.Context, *PageConfigBatchDeleteReq) (*PageConfigDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeletePageConfig not implemented")
}
func (UnimplementedPageConfigServer) mustEmbedUnimplementedPageConfigServer() {}

// UnsafePageConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageConfigServer will
// result in compilation errors.
type UnsafePageConfigServer interface {
	mustEmbedUnimplementedPageConfigServer()
}

func RegisterPageConfigServer(s grpc.ServiceRegistrar, srv PageConfigServer) {
	s.RegisterService(&PageConfig_ServiceDesc, srv)
}

func _PageConfig_GetPagePageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageConfigPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageConfigServer).GetPagePageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pageconfig.v1.PageConfig/GetPagePageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageConfigServer).GetPagePageConfig(ctx, req.(*PageConfigPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageConfig_GetPageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageConfigServer).GetPageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pageconfig.v1.PageConfig/GetPageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageConfigServer).GetPageConfig(ctx, req.(*PageConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageConfig_UpdatePageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageConfigUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageConfigServer).UpdatePageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pageconfig.v1.PageConfig/UpdatePageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageConfigServer).UpdatePageConfig(ctx, req.(*PageConfigUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageConfig_CreatePageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageConfigCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageConfigServer).CreatePageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pageconfig.v1.PageConfig/CreatePageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageConfigServer).CreatePageConfig(ctx, req.(*PageConfigCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageConfig_DeletePageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageConfigDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageConfigServer).DeletePageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pageconfig.v1.PageConfig/DeletePageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageConfigServer).DeletePageConfig(ctx, req.(*PageConfigDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageConfig_BatchDeletePageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageConfigBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageConfigServer).BatchDeletePageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pageconfig.v1.PageConfig/BatchDeletePageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageConfigServer).BatchDeletePageConfig(ctx, req.(*PageConfigBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PageConfig_ServiceDesc is the grpc.ServiceDesc for PageConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pageconfig.v1.PageConfig",
	HandlerType: (*PageConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPagePageConfig",
			Handler:    _PageConfig_GetPagePageConfig_Handler,
		},
		{
			MethodName: "GetPageConfig",
			Handler:    _PageConfig_GetPageConfig_Handler,
		},
		{
			MethodName: "UpdatePageConfig",
			Handler:    _PageConfig_UpdatePageConfig_Handler,
		},
		{
			MethodName: "CreatePageConfig",
			Handler:    _PageConfig_CreatePageConfig_Handler,
		},
		{
			MethodName: "DeletePageConfig",
			Handler:    _PageConfig_DeletePageConfig_Handler,
		},
		{
			MethodName: "BatchDeletePageConfig",
			Handler:    _PageConfig_BatchDeletePageConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/param/pageconfig/v1/page_config.proto",
}
