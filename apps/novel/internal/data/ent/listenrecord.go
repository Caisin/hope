// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/listenrecord"
	"hope/apps/novel/internal/data/ent/socialuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ListenRecord is the model entity for the ListenRecord schema.
type ListenRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	// 用户ID
	UserId int64 `json:"userId,omitempty"`
	// ChapterId holds the value of the "chapterId" field.
	// 主键编码
	ChapterId int64 `json:"chapterId,omitempty"`
	// NovelId holds the value of the "novelId" field.
	// 小说编号
	NovelId int64 `json:"novelId,omitempty"`
	// ListenTimes holds the value of the "listenTimes" field.
	// 播放次数
	ListenTimes int64 `json:"listenTimes,omitempty"`
	// Duration holds the value of the "duration" field.
	// 音频时长
	Duration time.Duration `json:"duration,omitempty"`
	// AllDuration holds the value of the "allDuration" field.
	// 总播放时长
	AllDuration time.Duration `json:"allDuration,omitempty"`
	// DayDuration holds the value of the "dayDuration" field.
	// 当天播放时长
	DayDuration time.Duration `json:"dayDuration,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ListenRecordQuery when eager-loading is set.
	Edges                      ListenRecordEdges `json:"edges"`
	social_user_listen_records *int64
}

// ListenRecordEdges holds the relations/edges for other nodes in the graph.
type ListenRecordEdges struct {
	// User holds the value of the user edge.
	User *SocialUser `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ListenRecordEdges) UserOrErr() (*SocialUser, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: socialuser.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ListenRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case listenrecord.FieldID, listenrecord.FieldUserId, listenrecord.FieldChapterId, listenrecord.FieldNovelId, listenrecord.FieldListenTimes, listenrecord.FieldDuration, listenrecord.FieldAllDuration, listenrecord.FieldDayDuration, listenrecord.FieldCreateBy, listenrecord.FieldUpdateBy, listenrecord.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case listenrecord.FieldCreatedAt, listenrecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case listenrecord.ForeignKeys[0]: // social_user_listen_records
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ListenRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ListenRecord fields.
func (lr *ListenRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case listenrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lr.ID = int64(value.Int64)
		case listenrecord.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				lr.UserId = value.Int64
			}
		case listenrecord.FieldChapterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chapterId", values[i])
			} else if value.Valid {
				lr.ChapterId = value.Int64
			}
		case listenrecord.FieldNovelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field novelId", values[i])
			} else if value.Valid {
				lr.NovelId = value.Int64
			}
		case listenrecord.FieldListenTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field listenTimes", values[i])
			} else if value.Valid {
				lr.ListenTimes = value.Int64
			}
		case listenrecord.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				lr.Duration = time.Duration(value.Int64)
			}
		case listenrecord.FieldAllDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allDuration", values[i])
			} else if value.Valid {
				lr.AllDuration = time.Duration(value.Int64)
			}
		case listenrecord.FieldDayDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dayDuration", values[i])
			} else if value.Valid {
				lr.DayDuration = time.Duration(value.Int64)
			}
		case listenrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				lr.CreatedAt = value.Time
			}
		case listenrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				lr.UpdatedAt = value.Time
			}
		case listenrecord.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				lr.CreateBy = value.Int64
			}
		case listenrecord.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				lr.UpdateBy = value.Int64
			}
		case listenrecord.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				lr.TenantId = value.Int64
			}
		case listenrecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field social_user_listen_records", value)
			} else if value.Valid {
				lr.social_user_listen_records = new(int64)
				*lr.social_user_listen_records = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the ListenRecord entity.
func (lr *ListenRecord) QueryUser() *SocialUserQuery {
	return (&ListenRecordClient{config: lr.config}).QueryUser(lr)
}

// Update returns a builder for updating this ListenRecord.
// Note that you need to call ListenRecord.Unwrap() before calling this method if this ListenRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *ListenRecord) Update() *ListenRecordUpdateOne {
	return (&ListenRecordClient{config: lr.config}).UpdateOne(lr)
}

// Unwrap unwraps the ListenRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *ListenRecord) Unwrap() *ListenRecord {
	tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ListenRecord is not a transactional entity")
	}
	lr.config.driver = tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *ListenRecord) String() string {
	var builder strings.Builder
	builder.WriteString("ListenRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", lr.ID))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", lr.UserId))
	builder.WriteString(", chapterId=")
	builder.WriteString(fmt.Sprintf("%v", lr.ChapterId))
	builder.WriteString(", novelId=")
	builder.WriteString(fmt.Sprintf("%v", lr.NovelId))
	builder.WriteString(", listenTimes=")
	builder.WriteString(fmt.Sprintf("%v", lr.ListenTimes))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", lr.Duration))
	builder.WriteString(", allDuration=")
	builder.WriteString(fmt.Sprintf("%v", lr.AllDuration))
	builder.WriteString(", dayDuration=")
	builder.WriteString(fmt.Sprintf("%v", lr.DayDuration))
	builder.WriteString(", createdAt=")
	builder.WriteString(lr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(lr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", lr.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", lr.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", lr.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// ListenRecords is a parsable slice of ListenRecord.
type ListenRecords []*ListenRecord

func (lr ListenRecords) config(cfg config) {
	for _i := range lr {
		lr[_i].config = cfg
	}
}
