// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/adchannel"
	"hope/apps/novel/internal/data/ent/agreementlog"
	"hope/apps/novel/internal/data/ent/payorder"
	"hope/apps/novel/internal/data/ent/schema"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PayOrderCreate is the builder for creating a PayOrder entity.
type PayOrderCreate struct {
	config
	mutation *PayOrderMutation
	hooks    []Hook
}

// SetOrderId sets the "orderId" field.
func (poc *PayOrderCreate) SetOrderId(s string) *PayOrderCreate {
	poc.mutation.SetOrderId(s)
	return poc
}

// SetUserId sets the "userId" field.
func (poc *PayOrderCreate) SetUserId(i int64) *PayOrderCreate {
	poc.mutation.SetUserId(i)
	return poc
}

// SetChId sets the "chId" field.
func (poc *PayOrderCreate) SetChId(i int64) *PayOrderCreate {
	poc.mutation.SetChId(i)
	return poc
}

// SetAgreementId sets the "agreementId" field.
func (poc *PayOrderCreate) SetAgreementId(i int64) *PayOrderCreate {
	poc.mutation.SetAgreementId(i)
	return poc
}

// SetLastRead sets the "lastRead" field.
func (poc *PayOrderCreate) SetLastRead(s string) *PayOrderCreate {
	poc.mutation.SetLastRead(s)
	return poc
}

// SetLastChapter sets the "lastChapter" field.
func (poc *PayOrderCreate) SetLastChapter(s string) *PayOrderCreate {
	poc.mutation.SetLastChapter(s)
	return poc
}

// SetPaymentName sets the "paymentName" field.
func (poc *PayOrderCreate) SetPaymentName(s string) *PayOrderCreate {
	poc.mutation.SetPaymentName(s)
	return poc
}

// SetPaymentId sets the "paymentId" field.
func (poc *PayOrderCreate) SetPaymentId(s string) *PayOrderCreate {
	poc.mutation.SetPaymentId(s)
	return poc
}

// SetState sets the "state" field.
func (poc *PayOrderCreate) SetState(ss schema.OrderState) *PayOrderCreate {
	poc.mutation.SetState(ss)
	return poc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableState(ss *schema.OrderState) *PayOrderCreate {
	if ss != nil {
		poc.SetState(*ss)
	}
	return poc
}

// SetPayment sets the "payment" field.
func (poc *PayOrderCreate) SetPayment(i int64) *PayOrderCreate {
	poc.mutation.SetPayment(i)
	return poc
}

// SetPaymentTime sets the "paymentTime" field.
func (poc *PayOrderCreate) SetPaymentTime(t time.Time) *PayOrderCreate {
	poc.mutation.SetPaymentTime(t)
	return poc
}

// SetCloseTime sets the "closeTime" field.
func (poc *PayOrderCreate) SetCloseTime(t time.Time) *PayOrderCreate {
	poc.mutation.SetCloseTime(t)
	return poc
}

// SetPayType sets the "payType" field.
func (poc *PayOrderCreate) SetPayType(pt payorder.PayType) *PayOrderCreate {
	poc.mutation.SetPayType(pt)
	return poc
}

// SetCoin sets the "coin" field.
func (poc *PayOrderCreate) SetCoin(i int64) *PayOrderCreate {
	poc.mutation.SetCoin(i)
	return poc
}

// SetCoupon sets the "coupon" field.
func (poc *PayOrderCreate) SetCoupon(i int64) *PayOrderCreate {
	poc.mutation.SetCoupon(i)
	return poc
}

// SetVipDays sets the "vipDays" field.
func (poc *PayOrderCreate) SetVipDays(s string) *PayOrderCreate {
	poc.mutation.SetVipDays(s)
	return poc
}

// SetNillableVipDays sets the "vipDays" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableVipDays(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetVipDays(*s)
	}
	return poc
}

// SetVipType sets the "vipType" field.
func (poc *PayOrderCreate) SetVipType(i int64) *PayOrderCreate {
	poc.mutation.SetVipType(i)
	return poc
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableVipType(i *int64) *PayOrderCreate {
	if i != nil {
		poc.SetVipType(*i)
	}
	return poc
}

// SetVipName sets the "vipName" field.
func (poc *PayOrderCreate) SetVipName(s string) *PayOrderCreate {
	poc.mutation.SetVipName(s)
	return poc
}

// SetNillableVipName sets the "vipName" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableVipName(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetVipName(*s)
	}
	return poc
}

// SetTimes sets the "times" field.
func (poc *PayOrderCreate) SetTimes(i int32) *PayOrderCreate {
	poc.mutation.SetTimes(i)
	return poc
}

// SetOtherOrderId sets the "otherOrderId" field.
func (poc *PayOrderCreate) SetOtherOrderId(s string) *PayOrderCreate {
	poc.mutation.SetOtherOrderId(s)
	return poc
}

// SetNillableOtherOrderId sets the "otherOrderId" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableOtherOrderId(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetOtherOrderId(*s)
	}
	return poc
}

// SetRemark sets the "remark" field.
func (poc *PayOrderCreate) SetRemark(s string) *PayOrderCreate {
	poc.mutation.SetRemark(s)
	return poc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableRemark(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetRemark(*s)
	}
	return poc
}

// SetCreatedAt sets the "createdAt" field.
func (poc *PayOrderCreate) SetCreatedAt(t time.Time) *PayOrderCreate {
	poc.mutation.SetCreatedAt(t)
	return poc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableCreatedAt(t *time.Time) *PayOrderCreate {
	if t != nil {
		poc.SetCreatedAt(*t)
	}
	return poc
}

// SetUpdatedAt sets the "updatedAt" field.
func (poc *PayOrderCreate) SetUpdatedAt(t time.Time) *PayOrderCreate {
	poc.mutation.SetUpdatedAt(t)
	return poc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableUpdatedAt(t *time.Time) *PayOrderCreate {
	if t != nil {
		poc.SetUpdatedAt(*t)
	}
	return poc
}

// SetCreateBy sets the "createBy" field.
func (poc *PayOrderCreate) SetCreateBy(i int64) *PayOrderCreate {
	poc.mutation.SetCreateBy(i)
	return poc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableCreateBy(i *int64) *PayOrderCreate {
	if i != nil {
		poc.SetCreateBy(*i)
	}
	return poc
}

// SetUpdateBy sets the "updateBy" field.
func (poc *PayOrderCreate) SetUpdateBy(i int64) *PayOrderCreate {
	poc.mutation.SetUpdateBy(i)
	return poc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableUpdateBy(i *int64) *PayOrderCreate {
	if i != nil {
		poc.SetUpdateBy(*i)
	}
	return poc
}

// SetTenantId sets the "tenantId" field.
func (poc *PayOrderCreate) SetTenantId(i int64) *PayOrderCreate {
	poc.mutation.SetTenantId(i)
	return poc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableTenantId(i *int64) *PayOrderCreate {
	if i != nil {
		poc.SetTenantId(*i)
	}
	return poc
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (poc *PayOrderCreate) SetUserID(id int64) *PayOrderCreate {
	poc.mutation.SetUserID(id)
	return poc
}

// SetUser sets the "user" edge to the SocialUser entity.
func (poc *PayOrderCreate) SetUser(s *SocialUser) *PayOrderCreate {
	return poc.SetUserID(s.ID)
}

// SetChannelID sets the "channel" edge to the AdChannel entity by ID.
func (poc *PayOrderCreate) SetChannelID(id int64) *PayOrderCreate {
	poc.mutation.SetChannelID(id)
	return poc
}

// SetChannel sets the "channel" edge to the AdChannel entity.
func (poc *PayOrderCreate) SetChannel(a *AdChannel) *PayOrderCreate {
	return poc.SetChannelID(a.ID)
}

// SetAgreementID sets the "agreement" edge to the AgreementLog entity by ID.
func (poc *PayOrderCreate) SetAgreementID(id int64) *PayOrderCreate {
	poc.mutation.SetAgreementID(id)
	return poc
}

// SetAgreement sets the "agreement" edge to the AgreementLog entity.
func (poc *PayOrderCreate) SetAgreement(a *AgreementLog) *PayOrderCreate {
	return poc.SetAgreementID(a.ID)
}

// Mutation returns the PayOrderMutation object of the builder.
func (poc *PayOrderCreate) Mutation() *PayOrderMutation {
	return poc.mutation
}

// Save creates the PayOrder in the database.
func (poc *PayOrderCreate) Save(ctx context.Context) (*PayOrder, error) {
	var (
		err  error
		node *PayOrder
	)
	poc.defaults()
	if len(poc.hooks) == 0 {
		if err = poc.check(); err != nil {
			return nil, err
		}
		node, err = poc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PayOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = poc.check(); err != nil {
				return nil, err
			}
			poc.mutation = mutation
			if node, err = poc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(poc.hooks) - 1; i >= 0; i-- {
			if poc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = poc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, poc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (poc *PayOrderCreate) SaveX(ctx context.Context) *PayOrder {
	v, err := poc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poc *PayOrderCreate) Exec(ctx context.Context) error {
	_, err := poc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poc *PayOrderCreate) ExecX(ctx context.Context) {
	if err := poc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poc *PayOrderCreate) defaults() {
	if _, ok := poc.mutation.State(); !ok {
		v := payorder.DefaultState
		poc.mutation.SetState(v)
	}
	if _, ok := poc.mutation.CreatedAt(); !ok {
		v := payorder.DefaultCreatedAt()
		poc.mutation.SetCreatedAt(v)
	}
	if _, ok := poc.mutation.UpdatedAt(); !ok {
		v := payorder.DefaultUpdatedAt()
		poc.mutation.SetUpdatedAt(v)
	}
	if _, ok := poc.mutation.CreateBy(); !ok {
		v := payorder.DefaultCreateBy
		poc.mutation.SetCreateBy(v)
	}
	if _, ok := poc.mutation.UpdateBy(); !ok {
		v := payorder.DefaultUpdateBy
		poc.mutation.SetUpdateBy(v)
	}
	if _, ok := poc.mutation.TenantId(); !ok {
		v := payorder.DefaultTenantId
		poc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poc *PayOrderCreate) check() error {
	if _, ok := poc.mutation.OrderId(); !ok {
		return &ValidationError{Name: "orderId", err: errors.New(`ent: missing required field "orderId"`)}
	}
	if _, ok := poc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "userId"`)}
	}
	if _, ok := poc.mutation.ChId(); !ok {
		return &ValidationError{Name: "chId", err: errors.New(`ent: missing required field "chId"`)}
	}
	if _, ok := poc.mutation.AgreementId(); !ok {
		return &ValidationError{Name: "agreementId", err: errors.New(`ent: missing required field "agreementId"`)}
	}
	if _, ok := poc.mutation.LastRead(); !ok {
		return &ValidationError{Name: "lastRead", err: errors.New(`ent: missing required field "lastRead"`)}
	}
	if _, ok := poc.mutation.LastChapter(); !ok {
		return &ValidationError{Name: "lastChapter", err: errors.New(`ent: missing required field "lastChapter"`)}
	}
	if _, ok := poc.mutation.PaymentName(); !ok {
		return &ValidationError{Name: "paymentName", err: errors.New(`ent: missing required field "paymentName"`)}
	}
	if _, ok := poc.mutation.PaymentId(); !ok {
		return &ValidationError{Name: "paymentId", err: errors.New(`ent: missing required field "paymentId"`)}
	}
	if _, ok := poc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "state"`)}
	}
	if v, ok := poc.mutation.State(); ok {
		if err := payorder.StateValidator(int32(v)); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "state": %w`, err)}
		}
	}
	if _, ok := poc.mutation.Payment(); !ok {
		return &ValidationError{Name: "payment", err: errors.New(`ent: missing required field "payment"`)}
	}
	if v, ok := poc.mutation.Payment(); ok {
		if err := payorder.PaymentValidator(v); err != nil {
			return &ValidationError{Name: "payment", err: fmt.Errorf(`ent: validator failed for field "payment": %w`, err)}
		}
	}
	if _, ok := poc.mutation.PaymentTime(); !ok {
		return &ValidationError{Name: "paymentTime", err: errors.New(`ent: missing required field "paymentTime"`)}
	}
	if _, ok := poc.mutation.CloseTime(); !ok {
		return &ValidationError{Name: "closeTime", err: errors.New(`ent: missing required field "closeTime"`)}
	}
	if _, ok := poc.mutation.PayType(); !ok {
		return &ValidationError{Name: "payType", err: errors.New(`ent: missing required field "payType"`)}
	}
	if v, ok := poc.mutation.PayType(); ok {
		if err := payorder.PayTypeValidator(v); err != nil {
			return &ValidationError{Name: "payType", err: fmt.Errorf(`ent: validator failed for field "payType": %w`, err)}
		}
	}
	if _, ok := poc.mutation.Coin(); !ok {
		return &ValidationError{Name: "coin", err: errors.New(`ent: missing required field "coin"`)}
	}
	if _, ok := poc.mutation.Coupon(); !ok {
		return &ValidationError{Name: "coupon", err: errors.New(`ent: missing required field "coupon"`)}
	}
	if _, ok := poc.mutation.Times(); !ok {
		return &ValidationError{Name: "times", err: errors.New(`ent: missing required field "times"`)}
	}
	if _, ok := poc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := poc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := poc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := poc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := poc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	if _, ok := poc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	if _, ok := poc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel", err: errors.New("ent: missing required edge \"channel\"")}
	}
	if _, ok := poc.mutation.AgreementID(); !ok {
		return &ValidationError{Name: "agreement", err: errors.New("ent: missing required edge \"agreement\"")}
	}
	return nil
}

func (poc *PayOrderCreate) sqlSave(ctx context.Context) (*PayOrder, error) {
	_node, _spec := poc.createSpec()
	if err := sqlgraph.CreateNode(ctx, poc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (poc *PayOrderCreate) createSpec() (*PayOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &PayOrder{config: poc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: payorder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: payorder.FieldID,
			},
		}
	)
	if value, ok := poc.mutation.OrderId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldOrderId,
		})
		_node.OrderId = value
	}
	if value, ok := poc.mutation.LastRead(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldLastRead,
		})
		_node.LastRead = value
	}
	if value, ok := poc.mutation.LastChapter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldLastChapter,
		})
		_node.LastChapter = value
	}
	if value, ok := poc.mutation.PaymentName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldPaymentName,
		})
		_node.PaymentName = value
	}
	if value, ok := poc.mutation.PaymentId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldPaymentId,
		})
		_node.PaymentId = value
	}
	if value, ok := poc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldState,
		})
		_node.State = value
	}
	if value, ok := poc.mutation.Payment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldPayment,
		})
		_node.Payment = value
	}
	if value, ok := poc.mutation.PaymentTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldPaymentTime,
		})
		_node.PaymentTime = value
	}
	if value, ok := poc.mutation.CloseTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldCloseTime,
		})
		_node.CloseTime = value
	}
	if value, ok := poc.mutation.PayType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: payorder.FieldPayType,
		})
		_node.PayType = value
	}
	if value, ok := poc.mutation.Coin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoin,
		})
		_node.Coin = value
	}
	if value, ok := poc.mutation.Coupon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoupon,
		})
		_node.Coupon = value
	}
	if value, ok := poc.mutation.VipDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldVipDays,
		})
		_node.VipDays = value
	}
	if value, ok := poc.mutation.VipType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldVipType,
		})
		_node.VipType = value
	}
	if value, ok := poc.mutation.VipName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldVipName,
		})
		_node.VipName = value
	}
	if value, ok := poc.mutation.Times(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldTimes,
		})
		_node.Times = value
	}
	if value, ok := poc.mutation.OtherOrderId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldOtherOrderId,
		})
		_node.OtherOrderId = value
	}
	if value, ok := poc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := poc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := poc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := poc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := poc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := poc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := poc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.UserTable,
			Columns: []string{payorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := poc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.ChannelTable,
			Columns: []string{payorder.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := poc.mutation.AgreementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.AgreementTable,
			Columns: []string{payorder.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: agreementlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AgreementId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PayOrderCreateBulk is the builder for creating many PayOrder entities in bulk.
type PayOrderCreateBulk struct {
	config
	builders []*PayOrderCreate
}

// Save creates the PayOrder entities in the database.
func (pocb *PayOrderCreateBulk) Save(ctx context.Context) ([]*PayOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pocb.builders))
	nodes := make([]*PayOrder, len(pocb.builders))
	mutators := make([]Mutator, len(pocb.builders))
	for i := range pocb.builders {
		func(i int, root context.Context) {
			builder := pocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PayOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pocb *PayOrderCreateBulk) SaveX(ctx context.Context) []*PayOrder {
	v, err := pocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocb *PayOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := pocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocb *PayOrderCreateBulk) ExecX(ctx context.Context) {
	if err := pocb.Exec(ctx); err != nil {
		panic(err)
	}
}
