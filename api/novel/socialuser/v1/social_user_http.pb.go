// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SocialUserHTTPServer interface {
	BatchDeleteSocialUser(context.Context, *SocialUserBatchDeleteReq) (*SocialUserDeleteReply, error)
	CreateSocialUser(context.Context, *SocialUserCreateReq) (*SocialUserCreateReply, error)
	DeleteSocialUser(context.Context, *SocialUserDeleteReq) (*SocialUserDeleteReply, error)
	GetPageSocialUser(context.Context, *SocialUserPageReq) (*SocialUserPageReply, error)
	GetSocialUser(context.Context, *SocialUserReq) (*SocialUserReply, error)
	UpdateSocialUser(context.Context, *SocialUserUpdateReq) (*SocialUserUpdateReply, error)
}

func RegisterSocialUserHTTPServer(s *http.Server, srv SocialUserHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/socialuser/page", _SocialUser_GetPageSocialUser0_HTTP_Handler(srv))
	r.GET("/v1/socialuser/{id}", _SocialUser_GetSocialUser0_HTTP_Handler(srv))
	r.PUT("/v1/socialuser/{id}", _SocialUser_UpdateSocialUser0_HTTP_Handler(srv))
	r.POST("/v1/socialuser", _SocialUser_CreateSocialUser0_HTTP_Handler(srv))
	r.DELETE("/v1/socialuser/{id}", _SocialUser_DeleteSocialUser0_HTTP_Handler(srv))
	r.DELETE("/v1/socialuser", _SocialUser_BatchDeleteSocialUser0_HTTP_Handler(srv))
}

func _SocialUser_GetPageSocialUser0_HTTP_Handler(srv SocialUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SocialUserPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/socialuser.v1.SocialUser/GetPageSocialUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageSocialUser(ctx, req.(*SocialUserPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SocialUserPageReply)
		return ctx.Result(200, reply)
	}
}

func _SocialUser_GetSocialUser0_HTTP_Handler(srv SocialUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SocialUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/socialuser.v1.SocialUser/GetSocialUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSocialUser(ctx, req.(*SocialUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SocialUserReply)
		return ctx.Result(200, reply)
	}
}

func _SocialUser_UpdateSocialUser0_HTTP_Handler(srv SocialUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SocialUserUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/socialuser.v1.SocialUser/UpdateSocialUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSocialUser(ctx, req.(*SocialUserUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SocialUserUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SocialUser_CreateSocialUser0_HTTP_Handler(srv SocialUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SocialUserCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/socialuser.v1.SocialUser/CreateSocialUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSocialUser(ctx, req.(*SocialUserCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SocialUserCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SocialUser_DeleteSocialUser0_HTTP_Handler(srv SocialUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SocialUserDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/socialuser.v1.SocialUser/DeleteSocialUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSocialUser(ctx, req.(*SocialUserDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SocialUserDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SocialUser_BatchDeleteSocialUser0_HTTP_Handler(srv SocialUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SocialUserBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/socialuser.v1.SocialUser/BatchDeleteSocialUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSocialUser(ctx, req.(*SocialUserBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SocialUserDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SocialUserHTTPClient interface {
	BatchDeleteSocialUser(ctx context.Context, req *SocialUserBatchDeleteReq, opts ...http.CallOption) (rsp *SocialUserDeleteReply, err error)
	CreateSocialUser(ctx context.Context, req *SocialUserCreateReq, opts ...http.CallOption) (rsp *SocialUserCreateReply, err error)
	DeleteSocialUser(ctx context.Context, req *SocialUserDeleteReq, opts ...http.CallOption) (rsp *SocialUserDeleteReply, err error)
	GetPageSocialUser(ctx context.Context, req *SocialUserPageReq, opts ...http.CallOption) (rsp *SocialUserPageReply, err error)
	GetSocialUser(ctx context.Context, req *SocialUserReq, opts ...http.CallOption) (rsp *SocialUserReply, err error)
	UpdateSocialUser(ctx context.Context, req *SocialUserUpdateReq, opts ...http.CallOption) (rsp *SocialUserUpdateReply, err error)
}

type SocialUserHTTPClientImpl struct {
	cc *http.Client
}

func NewSocialUserHTTPClient(client *http.Client) SocialUserHTTPClient {
	return &SocialUserHTTPClientImpl{client}
}

func (c *SocialUserHTTPClientImpl) BatchDeleteSocialUser(ctx context.Context, in *SocialUserBatchDeleteReq, opts ...http.CallOption) (*SocialUserDeleteReply, error) {
	var out SocialUserDeleteReply
	pattern := "/v1/socialuser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/socialuser.v1.SocialUser/BatchDeleteSocialUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SocialUserHTTPClientImpl) CreateSocialUser(ctx context.Context, in *SocialUserCreateReq, opts ...http.CallOption) (*SocialUserCreateReply, error) {
	var out SocialUserCreateReply
	pattern := "/v1/socialuser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/socialuser.v1.SocialUser/CreateSocialUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SocialUserHTTPClientImpl) DeleteSocialUser(ctx context.Context, in *SocialUserDeleteReq, opts ...http.CallOption) (*SocialUserDeleteReply, error) {
	var out SocialUserDeleteReply
	pattern := "/v1/socialuser/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/socialuser.v1.SocialUser/DeleteSocialUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SocialUserHTTPClientImpl) GetPageSocialUser(ctx context.Context, in *SocialUserPageReq, opts ...http.CallOption) (*SocialUserPageReply, error) {
	var out SocialUserPageReply
	pattern := "/v1/socialuser/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/socialuser.v1.SocialUser/GetPageSocialUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SocialUserHTTPClientImpl) GetSocialUser(ctx context.Context, in *SocialUserReq, opts ...http.CallOption) (*SocialUserReply, error) {
	var out SocialUserReply
	pattern := "/v1/socialuser/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/socialuser.v1.SocialUser/GetSocialUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SocialUserHTTPClientImpl) UpdateSocialUser(ctx context.Context, in *SocialUserUpdateReq, opts ...http.CallOption) (*SocialUserUpdateReply, error) {
	var out SocialUserUpdateReply
	pattern := "/v1/socialuser/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/socialuser.v1.SocialUser/UpdateSocialUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
