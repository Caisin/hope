// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/customernovelconfig"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CustomerNovelConfig is the model entity for the CustomerNovelConfig schema.
type CustomerNovelConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// GroupCode holds the value of the "groupCode" field.
	// 分组编码
	GroupCode string `json:"groupCode,omitempty"`
	// InnerGroupCode holds the value of the "innerGroupCode" field.
	// 嵌套分组
	InnerGroupCode string `json:"innerGroupCode,omitempty"`
	// GroupName holds the value of the "groupName" field.
	// 分组名称
	GroupName string `json:"groupName,omitempty"`
	// TypeId holds the value of the "typeId" field.
	// 类型ID
	TypeId int32 `json:"typeId,omitempty"`
	// TypeCode holds the value of the "TypeCode" field.
	// 类型编码
	TypeCode string `json:"TypeCode,omitempty"`
	// TypeName holds the value of the "typeName" field.
	// 类型名称
	TypeName string `json:"typeName,omitempty"`
	// FieldName holds the value of the "fieldName" field.
	// 字段名称
	FieldName string `json:"fieldName,omitempty"`
	// DefaultNum holds the value of the "defaultNum" field.
	// 默认数量
	DefaultNum int32 `json:"defaultNum,omitempty"`
	// State holds the value of the "state" field.
	// 是否可用
	State bool `json:"state,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomerNovelConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case customernovelconfig.FieldState:
			values[i] = new(sql.NullBool)
		case customernovelconfig.FieldID, customernovelconfig.FieldTypeId, customernovelconfig.FieldDefaultNum, customernovelconfig.FieldCreateBy, customernovelconfig.FieldUpdateBy, customernovelconfig.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case customernovelconfig.FieldGroupCode, customernovelconfig.FieldInnerGroupCode, customernovelconfig.FieldGroupName, customernovelconfig.FieldTypeCode, customernovelconfig.FieldTypeName, customernovelconfig.FieldFieldName:
			values[i] = new(sql.NullString)
		case customernovelconfig.FieldCreatedAt, customernovelconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CustomerNovelConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomerNovelConfig fields.
func (cnc *CustomerNovelConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customernovelconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cnc.ID = int64(value.Int64)
		case customernovelconfig.FieldGroupCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field groupCode", values[i])
			} else if value.Valid {
				cnc.GroupCode = value.String
			}
		case customernovelconfig.FieldInnerGroupCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field innerGroupCode", values[i])
			} else if value.Valid {
				cnc.InnerGroupCode = value.String
			}
		case customernovelconfig.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field groupName", values[i])
			} else if value.Valid {
				cnc.GroupName = value.String
			}
		case customernovelconfig.FieldTypeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field typeId", values[i])
			} else if value.Valid {
				cnc.TypeId = int32(value.Int64)
			}
		case customernovelconfig.FieldTypeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TypeCode", values[i])
			} else if value.Valid {
				cnc.TypeCode = value.String
			}
		case customernovelconfig.FieldTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field typeName", values[i])
			} else if value.Valid {
				cnc.TypeName = value.String
			}
		case customernovelconfig.FieldFieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fieldName", values[i])
			} else if value.Valid {
				cnc.FieldName = value.String
			}
		case customernovelconfig.FieldDefaultNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field defaultNum", values[i])
			} else if value.Valid {
				cnc.DefaultNum = int32(value.Int64)
			}
		case customernovelconfig.FieldState:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				cnc.State = value.Bool
			}
		case customernovelconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				cnc.CreatedAt = value.Time
			}
		case customernovelconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				cnc.UpdatedAt = value.Time
			}
		case customernovelconfig.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				cnc.CreateBy = value.Int64
			}
		case customernovelconfig.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				cnc.UpdateBy = value.Int64
			}
		case customernovelconfig.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				cnc.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CustomerNovelConfig.
// Note that you need to call CustomerNovelConfig.Unwrap() before calling this method if this CustomerNovelConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (cnc *CustomerNovelConfig) Update() *CustomerNovelConfigUpdateOne {
	return (&CustomerNovelConfigClient{config: cnc.config}).UpdateOne(cnc)
}

// Unwrap unwraps the CustomerNovelConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cnc *CustomerNovelConfig) Unwrap() *CustomerNovelConfig {
	tx, ok := cnc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomerNovelConfig is not a transactional entity")
	}
	cnc.config.driver = tx.drv
	return cnc
}

// String implements the fmt.Stringer.
func (cnc *CustomerNovelConfig) String() string {
	var builder strings.Builder
	builder.WriteString("CustomerNovelConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", cnc.ID))
	builder.WriteString(", groupCode=")
	builder.WriteString(cnc.GroupCode)
	builder.WriteString(", innerGroupCode=")
	builder.WriteString(cnc.InnerGroupCode)
	builder.WriteString(", groupName=")
	builder.WriteString(cnc.GroupName)
	builder.WriteString(", typeId=")
	builder.WriteString(fmt.Sprintf("%v", cnc.TypeId))
	builder.WriteString(", TypeCode=")
	builder.WriteString(cnc.TypeCode)
	builder.WriteString(", typeName=")
	builder.WriteString(cnc.TypeName)
	builder.WriteString(", fieldName=")
	builder.WriteString(cnc.FieldName)
	builder.WriteString(", defaultNum=")
	builder.WriteString(fmt.Sprintf("%v", cnc.DefaultNum))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", cnc.State))
	builder.WriteString(", createdAt=")
	builder.WriteString(cnc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(cnc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", cnc.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", cnc.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", cnc.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// CustomerNovelConfigs is a parsable slice of CustomerNovelConfig.
type CustomerNovelConfigs []*CustomerNovelConfig

func (cnc CustomerNovelConfigs) config(cfg config) {
	for _i := range cnc {
		cnc[_i].config = cfg
	}
}
