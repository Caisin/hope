// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ResourceStorageHTTPServer interface {
	BatchDeleteResourceStorage(context.Context, *ResourceStorageBatchDeleteReq) (*ResourceStorageDeleteReply, error)
	CreateResourceStorage(context.Context, *ResourceStorageCreateReq) (*ResourceStorageCreateReply, error)
	DeleteResourceStorage(context.Context, *ResourceStorageDeleteReq) (*ResourceStorageDeleteReply, error)
	GetPageResourceStorage(context.Context, *ResourceStoragePageReq) (*ResourceStoragePageReply, error)
	GetResourceStorage(context.Context, *ResourceStorageReq) (*ResourceStorageReply, error)
	UpdateResourceStorage(context.Context, *ResourceStorageUpdateReq) (*ResourceStorageUpdateReply, error)
}

func RegisterResourceStorageHTTPServer(s *http.Server, srv ResourceStorageHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/resourcestorage/page", _ResourceStorage_GetPageResourceStorage0_HTTP_Handler(srv))
	r.GET("/v1/resourcestorage/{id}", _ResourceStorage_GetResourceStorage0_HTTP_Handler(srv))
	r.PUT("/v1/resourcestorage/{id}", _ResourceStorage_UpdateResourceStorage0_HTTP_Handler(srv))
	r.POST("/v1/resourcestorage", _ResourceStorage_CreateResourceStorage0_HTTP_Handler(srv))
	r.DELETE("/v1/resourcestorage/{id}", _ResourceStorage_DeleteResourceStorage0_HTTP_Handler(srv))
	r.DELETE("/v1/resourcestorage", _ResourceStorage_BatchDeleteResourceStorage0_HTTP_Handler(srv))
}

func _ResourceStorage_GetPageResourceStorage0_HTTP_Handler(srv ResourceStorageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceStoragePageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resourcestorage.v1.ResourceStorage/GetPageResourceStorage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageResourceStorage(ctx, req.(*ResourceStoragePageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceStoragePageReply)
		return ctx.Result(200, reply)
	}
}

func _ResourceStorage_GetResourceStorage0_HTTP_Handler(srv ResourceStorageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceStorageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resourcestorage.v1.ResourceStorage/GetResourceStorage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResourceStorage(ctx, req.(*ResourceStorageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceStorageReply)
		return ctx.Result(200, reply)
	}
}

func _ResourceStorage_UpdateResourceStorage0_HTTP_Handler(srv ResourceStorageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceStorageUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resourcestorage.v1.ResourceStorage/UpdateResourceStorage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateResourceStorage(ctx, req.(*ResourceStorageUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceStorageUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _ResourceStorage_CreateResourceStorage0_HTTP_Handler(srv ResourceStorageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceStorageCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resourcestorage.v1.ResourceStorage/CreateResourceStorage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateResourceStorage(ctx, req.(*ResourceStorageCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceStorageCreateReply)
		return ctx.Result(200, reply)
	}
}

func _ResourceStorage_DeleteResourceStorage0_HTTP_Handler(srv ResourceStorageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceStorageDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resourcestorage.v1.ResourceStorage/DeleteResourceStorage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResourceStorage(ctx, req.(*ResourceStorageDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceStorageDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _ResourceStorage_BatchDeleteResourceStorage0_HTTP_Handler(srv ResourceStorageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResourceStorageBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/resourcestorage.v1.ResourceStorage/BatchDeleteResourceStorage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteResourceStorage(ctx, req.(*ResourceStorageBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceStorageDeleteReply)
		return ctx.Result(200, reply)
	}
}

type ResourceStorageHTTPClient interface {
	BatchDeleteResourceStorage(ctx context.Context, req *ResourceStorageBatchDeleteReq, opts ...http.CallOption) (rsp *ResourceStorageDeleteReply, err error)
	CreateResourceStorage(ctx context.Context, req *ResourceStorageCreateReq, opts ...http.CallOption) (rsp *ResourceStorageCreateReply, err error)
	DeleteResourceStorage(ctx context.Context, req *ResourceStorageDeleteReq, opts ...http.CallOption) (rsp *ResourceStorageDeleteReply, err error)
	GetPageResourceStorage(ctx context.Context, req *ResourceStoragePageReq, opts ...http.CallOption) (rsp *ResourceStoragePageReply, err error)
	GetResourceStorage(ctx context.Context, req *ResourceStorageReq, opts ...http.CallOption) (rsp *ResourceStorageReply, err error)
	UpdateResourceStorage(ctx context.Context, req *ResourceStorageUpdateReq, opts ...http.CallOption) (rsp *ResourceStorageUpdateReply, err error)
}

type ResourceStorageHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceStorageHTTPClient(client *http.Client) ResourceStorageHTTPClient {
	return &ResourceStorageHTTPClientImpl{client}
}

func (c *ResourceStorageHTTPClientImpl) BatchDeleteResourceStorage(ctx context.Context, in *ResourceStorageBatchDeleteReq, opts ...http.CallOption) (*ResourceStorageDeleteReply, error) {
	var out ResourceStorageDeleteReply
	pattern := "/v1/resourcestorage"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/resourcestorage.v1.ResourceStorage/BatchDeleteResourceStorage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceStorageHTTPClientImpl) CreateResourceStorage(ctx context.Context, in *ResourceStorageCreateReq, opts ...http.CallOption) (*ResourceStorageCreateReply, error) {
	var out ResourceStorageCreateReply
	pattern := "/v1/resourcestorage"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/resourcestorage.v1.ResourceStorage/CreateResourceStorage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceStorageHTTPClientImpl) DeleteResourceStorage(ctx context.Context, in *ResourceStorageDeleteReq, opts ...http.CallOption) (*ResourceStorageDeleteReply, error) {
	var out ResourceStorageDeleteReply
	pattern := "/v1/resourcestorage/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/resourcestorage.v1.ResourceStorage/DeleteResourceStorage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceStorageHTTPClientImpl) GetPageResourceStorage(ctx context.Context, in *ResourceStoragePageReq, opts ...http.CallOption) (*ResourceStoragePageReply, error) {
	var out ResourceStoragePageReply
	pattern := "/v1/resourcestorage/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/resourcestorage.v1.ResourceStorage/GetPageResourceStorage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceStorageHTTPClientImpl) GetResourceStorage(ctx context.Context, in *ResourceStorageReq, opts ...http.CallOption) (*ResourceStorageReply, error) {
	var out ResourceStorageReply
	pattern := "/v1/resourcestorage/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/resourcestorage.v1.ResourceStorage/GetResourceStorage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceStorageHTTPClientImpl) UpdateResourceStorage(ctx context.Context, in *ResourceStorageUpdateReq, opts ...http.CallOption) (*ResourceStorageUpdateReply, error) {
	var out ResourceStorageUpdateReply
	pattern := "/v1/resourcestorage/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/resourcestorage.v1.ResourceStorage/UpdateResourceStorage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
