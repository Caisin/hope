// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent"
)

// The ActivityFunc type is an adapter to allow the use of ordinary
// function as Activity mutator.
type ActivityFunc func(context.Context, *ent.ActivityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ActivityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityMutation", m)
	}
	return f(ctx, mv)
}

// The ActivityComponentFunc type is an adapter to allow the use of ordinary
// function as ActivityComponent mutator.
type ActivityComponentFunc func(context.Context, *ent.ActivityComponentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityComponentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ActivityComponentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityComponentMutation", m)
	}
	return f(ctx, mv)
}

// The AdChangeLogFunc type is an adapter to allow the use of ordinary
// function as AdChangeLog mutator.
type AdChangeLogFunc func(context.Context, *ent.AdChangeLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AdChangeLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AdChangeLogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AdChangeLogMutation", m)
	}
	return f(ctx, mv)
}

// The AdChannelFunc type is an adapter to allow the use of ordinary
// function as AdChannel mutator.
type AdChannelFunc func(context.Context, *ent.AdChannelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AdChannelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AdChannelMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AdChannelMutation", m)
	}
	return f(ctx, mv)
}

// The AgreementLogFunc type is an adapter to allow the use of ordinary
// function as AgreementLog mutator.
type AgreementLogFunc func(context.Context, *ent.AgreementLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AgreementLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AgreementLogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgreementLogMutation", m)
	}
	return f(ctx, mv)
}

// The AmBalanceFunc type is an adapter to allow the use of ordinary
// function as AmBalance mutator.
type AmBalanceFunc func(context.Context, *ent.AmBalanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AmBalanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AmBalanceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AmBalanceMutation", m)
	}
	return f(ctx, mv)
}

// The AppVersionFunc type is an adapter to allow the use of ordinary
// function as AppVersion mutator.
type AppVersionFunc func(context.Context, *ent.AppVersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AppVersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AppVersionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AppVersionMutation", m)
	}
	return f(ctx, mv)
}

// The AssetChangeLogFunc type is an adapter to allow the use of ordinary
// function as AssetChangeLog mutator.
type AssetChangeLogFunc func(context.Context, *ent.AssetChangeLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetChangeLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AssetChangeLogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetChangeLogMutation", m)
	}
	return f(ctx, mv)
}

// The AssetItemFunc type is an adapter to allow the use of ordinary
// function as AssetItem mutator.
type AssetItemFunc func(context.Context, *ent.AssetItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AssetItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetItemMutation", m)
	}
	return f(ctx, mv)
}

// The BookPackageFunc type is an adapter to allow the use of ordinary
// function as BookPackage mutator.
type BookPackageFunc func(context.Context, *ent.BookPackageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BookPackageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BookPackageMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BookPackageMutation", m)
	}
	return f(ctx, mv)
}

// The ClientErrorFunc type is an adapter to allow the use of ordinary
// function as ClientError mutator.
type ClientErrorFunc func(context.Context, *ent.ClientErrorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClientErrorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ClientErrorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClientErrorMutation", m)
	}
	return f(ctx, mv)
}

// The CustomerNovelConfigFunc type is an adapter to allow the use of ordinary
// function as CustomerNovelConfig mutator.
type CustomerNovelConfigFunc func(context.Context, *ent.CustomerNovelConfigMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomerNovelConfigFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CustomerNovelConfigMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomerNovelConfigMutation", m)
	}
	return f(ctx, mv)
}

// The CustomerNovelsFunc type is an adapter to allow the use of ordinary
// function as CustomerNovels mutator.
type CustomerNovelsFunc func(context.Context, *ent.CustomerNovelsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomerNovelsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CustomerNovelsMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomerNovelsMutation", m)
	}
	return f(ctx, mv)
}

// The DataSourceFunc type is an adapter to allow the use of ordinary
// function as DataSource mutator.
type DataSourceFunc func(context.Context, *ent.DataSourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DataSourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DataSourceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DataSourceMutation", m)
	}
	return f(ctx, mv)
}

// The ListenRecordFunc type is an adapter to allow the use of ordinary
// function as ListenRecord mutator.
type ListenRecordFunc func(context.Context, *ent.ListenRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ListenRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ListenRecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ListenRecordMutation", m)
	}
	return f(ctx, mv)
}

// The NovelFunc type is an adapter to allow the use of ordinary
// function as Novel mutator.
type NovelFunc func(context.Context, *ent.NovelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelMutation", m)
	}
	return f(ctx, mv)
}

// The NovelAutoBuyFunc type is an adapter to allow the use of ordinary
// function as NovelAutoBuy mutator.
type NovelAutoBuyFunc func(context.Context, *ent.NovelAutoBuyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelAutoBuyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelAutoBuyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelAutoBuyMutation", m)
	}
	return f(ctx, mv)
}

// The NovelBookshelfFunc type is an adapter to allow the use of ordinary
// function as NovelBookshelf mutator.
type NovelBookshelfFunc func(context.Context, *ent.NovelBookshelfMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelBookshelfFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelBookshelfMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelBookshelfMutation", m)
	}
	return f(ctx, mv)
}

// The NovelBuyChapterRecordFunc type is an adapter to allow the use of ordinary
// function as NovelBuyChapterRecord mutator.
type NovelBuyChapterRecordFunc func(context.Context, *ent.NovelBuyChapterRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelBuyChapterRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelBuyChapterRecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelBuyChapterRecordMutation", m)
	}
	return f(ctx, mv)
}

// The NovelBuyRecordFunc type is an adapter to allow the use of ordinary
// function as NovelBuyRecord mutator.
type NovelBuyRecordFunc func(context.Context, *ent.NovelBuyRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelBuyRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelBuyRecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelBuyRecordMutation", m)
	}
	return f(ctx, mv)
}

// The NovelChapterFunc type is an adapter to allow the use of ordinary
// function as NovelChapter mutator.
type NovelChapterFunc func(context.Context, *ent.NovelChapterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelChapterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelChapterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelChapterMutation", m)
	}
	return f(ctx, mv)
}

// The NovelClassifyFunc type is an adapter to allow the use of ordinary
// function as NovelClassify mutator.
type NovelClassifyFunc func(context.Context, *ent.NovelClassifyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelClassifyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelClassifyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelClassifyMutation", m)
	}
	return f(ctx, mv)
}

// The NovelCommentFunc type is an adapter to allow the use of ordinary
// function as NovelComment mutator.
type NovelCommentFunc func(context.Context, *ent.NovelCommentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelCommentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelCommentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelCommentMutation", m)
	}
	return f(ctx, mv)
}

// The NovelConsumeFunc type is an adapter to allow the use of ordinary
// function as NovelConsume mutator.
type NovelConsumeFunc func(context.Context, *ent.NovelConsumeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelConsumeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelConsumeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelConsumeMutation", m)
	}
	return f(ctx, mv)
}

// The NovelMsgFunc type is an adapter to allow the use of ordinary
// function as NovelMsg mutator.
type NovelMsgFunc func(context.Context, *ent.NovelMsgMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NovelMsgFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NovelMsgMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NovelMsgMutation", m)
	}
	return f(ctx, mv)
}

// The PayOrderFunc type is an adapter to allow the use of ordinary
// function as PayOrder mutator.
type PayOrderFunc func(context.Context, *ent.PayOrderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PayOrderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PayOrderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PayOrderMutation", m)
	}
	return f(ctx, mv)
}

// The SocialUserFunc type is an adapter to allow the use of ordinary
// function as SocialUser mutator.
type SocialUserFunc func(context.Context, *ent.SocialUserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SocialUserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SocialUserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SocialUserMutation", m)
	}
	return f(ctx, mv)
}

// The TaskLogFunc type is an adapter to allow the use of ordinary
// function as TaskLog mutator.
type TaskLogFunc func(context.Context, *ent.TaskLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TaskLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TaskLogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TaskLogMutation", m)
	}
	return f(ctx, mv)
}

// The UserEventFunc type is an adapter to allow the use of ordinary
// function as UserEvent mutator.
type UserEventFunc func(context.Context, *ent.UserEventMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserEventFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserEventMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserEventMutation", m)
	}
	return f(ctx, mv)
}

// The UserMsgFunc type is an adapter to allow the use of ordinary
// function as UserMsg mutator.
type UserMsgFunc func(context.Context, *ent.UserMsgMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserMsgFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMsgMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMsgMutation", m)
	}
	return f(ctx, mv)
}

// The VipUserFunc type is an adapter to allow the use of ordinary
// function as VipUser mutator.
type VipUserFunc func(context.Context, *ent.VipUserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VipUserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VipUserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VipUserMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
