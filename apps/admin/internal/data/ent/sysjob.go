// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysjob"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysJob is the model entity for the SysJob schema.
type SysJob struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// JobName holds the value of the "jobName" field.
	// 名称
	JobName string `json:"jobName,omitempty"`
	// JobGroup holds the value of the "jobGroup" field.
	// 任务分组
	JobGroup string `json:"jobGroup,omitempty"`
	// JobType holds the value of the "jobType" field.
	// 任务类型 1
	JobType int32 `json:"jobType,omitempty"`
	// CronExpression holds the value of the "cronExpression" field.
	// cron表达式
	CronExpression string `json:"cronExpression,omitempty"`
	// InvokeTarget holds the value of the "invokeTarget" field.
	// 调用目标
	InvokeTarget string `json:"invokeTarget,omitempty"`
	// Args holds the value of the "args" field.
	// 目标参数
	Args string `json:"args,omitempty"`
	// ExecPolicy holds the value of the "execPolicy" field.
	// 执行策略
	ExecPolicy int32 `json:"execPolicy,omitempty"`
	// Concurrent holds the value of the "concurrent" field.
	// 是否并发
	Concurrent int32 `json:"concurrent,omitempty"`
	// State holds the value of the "state" field.
	// 状态
	State sysjob.State `json:"state,omitempty"`
	// EntryId holds the value of the "entryId" field.
	// job启动时返回的id
	EntryId int32 `json:"entryId,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysJobQuery when eager-loading is set.
	Edges SysJobEdges `json:"edges"`
}

// SysJobEdges holds the relations/edges for other nodes in the graph.
type SysJobEdges struct {
	// Logs holds the value of the logs edge.
	Logs []*SysJobLog `json:"logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e SysJobEdges) LogsOrErr() ([]*SysJobLog, error) {
	if e.loadedTypes[0] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysJob) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysjob.FieldID, sysjob.FieldJobType, sysjob.FieldExecPolicy, sysjob.FieldConcurrent, sysjob.FieldEntryId, sysjob.FieldCreateBy, sysjob.FieldUpdateBy, sysjob.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysjob.FieldJobName, sysjob.FieldJobGroup, sysjob.FieldCronExpression, sysjob.FieldInvokeTarget, sysjob.FieldArgs, sysjob.FieldState:
			values[i] = new(sql.NullString)
		case sysjob.FieldCreatedAt, sysjob.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysJob", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysJob fields.
func (sj *SysJob) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysjob.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sj.ID = int64(value.Int64)
		case sysjob.FieldJobName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jobName", values[i])
			} else if value.Valid {
				sj.JobName = value.String
			}
		case sysjob.FieldJobGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jobGroup", values[i])
			} else if value.Valid {
				sj.JobGroup = value.String
			}
		case sysjob.FieldJobType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field jobType", values[i])
			} else if value.Valid {
				sj.JobType = int32(value.Int64)
			}
		case sysjob.FieldCronExpression:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cronExpression", values[i])
			} else if value.Valid {
				sj.CronExpression = value.String
			}
		case sysjob.FieldInvokeTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invokeTarget", values[i])
			} else if value.Valid {
				sj.InvokeTarget = value.String
			}
		case sysjob.FieldArgs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field args", values[i])
			} else if value.Valid {
				sj.Args = value.String
			}
		case sysjob.FieldExecPolicy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execPolicy", values[i])
			} else if value.Valid {
				sj.ExecPolicy = int32(value.Int64)
			}
		case sysjob.FieldConcurrent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field concurrent", values[i])
			} else if value.Valid {
				sj.Concurrent = int32(value.Int64)
			}
		case sysjob.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				sj.State = sysjob.State(value.String)
			}
		case sysjob.FieldEntryId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entryId", values[i])
			} else if value.Valid {
				sj.EntryId = int32(value.Int64)
			}
		case sysjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sj.CreatedAt = value.Time
			}
		case sysjob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sj.UpdatedAt = value.Time
			}
		case sysjob.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sj.CreateBy = value.Int64
			}
		case sysjob.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sj.UpdateBy = value.Int64
			}
		case sysjob.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sj.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryLogs queries the "logs" edge of the SysJob entity.
func (sj *SysJob) QueryLogs() *SysJobLogQuery {
	return (&SysJobClient{config: sj.config}).QueryLogs(sj)
}

// Update returns a builder for updating this SysJob.
// Note that you need to call SysJob.Unwrap() before calling this method if this SysJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (sj *SysJob) Update() *SysJobUpdateOne {
	return (&SysJobClient{config: sj.config}).UpdateOne(sj)
}

// Unwrap unwraps the SysJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sj *SysJob) Unwrap() *SysJob {
	tx, ok := sj.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysJob is not a transactional entity")
	}
	sj.config.driver = tx.drv
	return sj
}

// String implements the fmt.Stringer.
func (sj *SysJob) String() string {
	var builder strings.Builder
	builder.WriteString("SysJob(")
	builder.WriteString(fmt.Sprintf("id=%v", sj.ID))
	builder.WriteString(", jobName=")
	builder.WriteString(sj.JobName)
	builder.WriteString(", jobGroup=")
	builder.WriteString(sj.JobGroup)
	builder.WriteString(", jobType=")
	builder.WriteString(fmt.Sprintf("%v", sj.JobType))
	builder.WriteString(", cronExpression=")
	builder.WriteString(sj.CronExpression)
	builder.WriteString(", invokeTarget=")
	builder.WriteString(sj.InvokeTarget)
	builder.WriteString(", args=")
	builder.WriteString(sj.Args)
	builder.WriteString(", execPolicy=")
	builder.WriteString(fmt.Sprintf("%v", sj.ExecPolicy))
	builder.WriteString(", concurrent=")
	builder.WriteString(fmt.Sprintf("%v", sj.Concurrent))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", sj.State))
	builder.WriteString(", entryId=")
	builder.WriteString(fmt.Sprintf("%v", sj.EntryId))
	builder.WriteString(", createdAt=")
	builder.WriteString(sj.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sj.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sj.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sj.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sj.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysJobs is a parsable slice of SysJob.
type SysJobs []*SysJob

func (sj SysJobs) config(cfg config) {
	for _i := range sj {
		sj[_i].config = cfg
	}
}
