// Code generated by entc, DO NOT EDIT.

package sysmenu

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the sysmenu type in the database.
	Label = "sys_menu"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldParentId holds the string denoting the parentid field in the database.
	FieldParentId = "parent_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldRedirect holds the string denoting the redirect field in the database.
	FieldRedirect = "redirect"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldPaths holds the string denoting the paths field in the database.
	FieldPaths = "paths"
	// FieldMenuType holds the string denoting the menutype field in the database.
	FieldMenuType = "menu_type"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldPermission holds the string denoting the permission field in the database.
	FieldPermission = "permission"
	// FieldIgnoreKeepAlive holds the string denoting the ignorekeepalive field in the database.
	FieldIgnoreKeepAlive = "ignore_keep_alive"
	// FieldHideBreadcrumb holds the string denoting the hidebreadcrumb field in the database.
	FieldHideBreadcrumb = "hide_breadcrumb"
	// FieldHideChildrenInMenu holds the string denoting the hidechildreninmenu field in the database.
	FieldHideChildrenInMenu = "hide_children_in_menu"
	// FieldComponent holds the string denoting the component field in the database.
	FieldComponent = "component"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldHideMenu holds the string denoting the hidemenu field in the database.
	FieldHideMenu = "hide_menu"
	// FieldFrameSrc holds the string denoting the framesrc field in the database.
	FieldFrameSrc = "frame_src"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCheckPermission holds the string denoting the checkpermission field in the database.
	FieldCheckPermission = "check_permission"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// Table holds the table name of the sysmenu in the database.
	Table = "sys_menus"
	// RoleTable is the table that holds the role relation/edge. The primary key declared below.
	RoleTable = "sys_role_menus"
	// RoleInverseTable is the table name for the SysRole entity.
	// It exists in this package in order to avoid circular dependency with the "sysrole" package.
	RoleInverseTable = "sys_roles"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "sys_menus"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "sys_menus"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
)

// Columns holds all SQL columns for sysmenu fields.
var Columns = []string{
	FieldID,
	FieldParentId,
	FieldName,
	FieldTitle,
	FieldRedirect,
	FieldIcon,
	FieldPath,
	FieldPaths,
	FieldMenuType,
	FieldAction,
	FieldPermission,
	FieldIgnoreKeepAlive,
	FieldHideBreadcrumb,
	FieldHideChildrenInMenu,
	FieldComponent,
	FieldSort,
	FieldHideMenu,
	FieldFrameSrc,
	FieldState,
	FieldCheckPermission,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreateBy,
	FieldUpdateBy,
	FieldTenantId,
}

var (
	// RolePrimaryKey and RoleColumn2 are the table columns denoting the
	// primary key for the role relation (M2M).
	RolePrimaryKey = []string{"sys_role_id", "sys_menu_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultParentId holds the default value on creation for the "parentId" field.
	DefaultParentId int64
	// DefaultCheckPermission holds the default value on creation for the "checkPermission" field.
	DefaultCheckPermission bool
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateBy holds the default value on creation for the "createBy" field.
	DefaultCreateBy int64
	// DefaultUpdateBy holds the default value on creation for the "updateBy" field.
	DefaultUpdateBy int64
	// DefaultTenantId holds the default value on creation for the "tenantId" field.
	DefaultTenantId int64
)

// State defines the type for the "state" enum field.
type State string

// StateU is the default value of the State enum.
const DefaultState = StateU

// State values.
const (
	StateU State = "U"
	StateE State = "E"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateU, StateE:
		return nil
	default:
		return fmt.Errorf("sysmenu: invalid enum value for state field: %q", s)
	}
}
