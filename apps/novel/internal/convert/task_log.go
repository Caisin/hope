// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/task_log.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/tasklog/v1"
	"hope/apps/novel/internal/data/ent"
)

func TaskLogUpdateReq2Data(v *v1.TaskLogUpdateReq) *ent.TaskLog {
	if v == nil {
		return nil
	}
	return &ent.TaskLog{
		ID:           v.Id,
		UserId:       v.UserId,
		TaskGroup:    v.TaskGroup,
		TaskCode:     v.TaskCode,
		TaskId:       v.TaskId,
		TaskName:     v.TaskName,
		Amount:       v.Amount,
		Reward:       v.Reward,
		AmountItem:   v.AmountItem,
		RewardItem:   v.RewardItem,
		TargetAmount: v.TargetAmount,
		DoneAmount:   v.DoneAmount,
		State:        v.State,
		DoneAt:       v.DoneAt.AsTime(),
		ObtainAt:     v.ObtainAt.AsTime(),
		DoneTimes:    v.DoneTimes,
		AllTimes:     v.AllTimes,
		EffectTime:   v.EffectTime.AsTime(),
	}
}

func TaskLogData2UpdateReq(v *ent.TaskLog) *v1.TaskLogUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.TaskLogUpdateReq{
		Id:           v.ID,
		UserId:       v.UserId,
		TaskGroup:    v.TaskGroup,
		TaskCode:     v.TaskCode,
		TaskId:       v.TaskId,
		TaskName:     v.TaskName,
		Amount:       v.Amount,
		Reward:       v.Reward,
		AmountItem:   v.AmountItem,
		RewardItem:   v.RewardItem,
		TargetAmount: v.TargetAmount,
		DoneAmount:   v.DoneAmount,
		State:        v.State,
		DoneAt:       timestamppb.New(v.DoneAt),
		ObtainAt:     timestamppb.New(v.ObtainAt),
		DoneTimes:    v.DoneTimes,
		AllTimes:     v.AllTimes,
		EffectTime:   timestamppb.New(v.EffectTime),
	}
}

func TaskLogCreateReq2Data(v *v1.TaskLogCreateReq) *ent.TaskLog {
	if v == nil {
		return nil
	}
	return &ent.TaskLog{
		UserId:       v.UserId,
		TaskGroup:    v.TaskGroup,
		TaskCode:     v.TaskCode,
		TaskId:       v.TaskId,
		TaskName:     v.TaskName,
		Amount:       v.Amount,
		Reward:       v.Reward,
		AmountItem:   v.AmountItem,
		RewardItem:   v.RewardItem,
		TargetAmount: v.TargetAmount,
		DoneAmount:   v.DoneAmount,
		State:        v.State,
		DoneAt:       v.DoneAt.AsTime(),
		ObtainAt:     v.ObtainAt.AsTime(),
		DoneTimes:    v.DoneTimes,
		AllTimes:     v.AllTimes,
		EffectTime:   v.EffectTime.AsTime(),
	}
}

func TaskLogData2CreateReq(v *ent.TaskLog) *v1.TaskLogCreateReq {
	if v == nil {
		return nil
	}
	return &v1.TaskLogCreateReq{
		UserId:       v.UserId,
		TaskGroup:    v.TaskGroup,
		TaskCode:     v.TaskCode,
		TaskId:       v.TaskId,
		TaskName:     v.TaskName,
		Amount:       v.Amount,
		Reward:       v.Reward,
		AmountItem:   v.AmountItem,
		RewardItem:   v.RewardItem,
		TargetAmount: v.TargetAmount,
		DoneAmount:   v.DoneAmount,
		State:        v.State,
		DoneAt:       timestamppb.New(v.DoneAt),
		ObtainAt:     timestamppb.New(v.ObtainAt),
		DoneTimes:    v.DoneTimes,
		AllTimes:     v.AllTimes,
		EffectTime:   timestamppb.New(v.EffectTime),
	}
}

func TaskLogReq2Data(v *v1.TaskLogReq) *ent.TaskLog {
	if v == nil {
		return nil
	}
	return &ent.TaskLog{
		UserId:       v.UserId,
		TaskGroup:    v.TaskGroup,
		TaskCode:     v.TaskCode,
		TaskId:       v.TaskId,
		TaskName:     v.TaskName,
		Amount:       v.Amount,
		Reward:       v.Reward,
		AmountItem:   v.AmountItem,
		RewardItem:   v.RewardItem,
		TargetAmount: v.TargetAmount,
		DoneAmount:   v.DoneAmount,
		State:        v.State,
		DoneAt:       v.DoneAt.AsTime(),
		ObtainAt:     v.ObtainAt.AsTime(),
		DoneTimes:    v.DoneTimes,
		AllTimes:     v.AllTimes,
		EffectTime:   v.EffectTime.AsTime(),
	}
}

func TaskLogData2Req(v *ent.TaskLog) *v1.TaskLogReq {
	if v == nil {
		return nil
	}
	return &v1.TaskLogReq{
		UserId:       v.UserId,
		TaskGroup:    v.TaskGroup,
		TaskCode:     v.TaskCode,
		TaskId:       v.TaskId,
		TaskName:     v.TaskName,
		Amount:       v.Amount,
		Reward:       v.Reward,
		AmountItem:   v.AmountItem,
		RewardItem:   v.RewardItem,
		TargetAmount: v.TargetAmount,
		DoneAmount:   v.DoneAmount,
		State:        v.State,
		DoneAt:       timestamppb.New(v.DoneAt),
		ObtainAt:     timestamppb.New(v.ObtainAt),
		DoneTimes:    v.DoneTimes,
		AllTimes:     v.AllTimes,
		EffectTime:   timestamppb.New(v.EffectTime),
	}
}

func TaskLogData2Reply(v *ent.TaskLog) *v1.TaskLogData {
	if v == nil {
		return nil
	}
	return &v1.TaskLogData{
		Id:           v.ID,
		UserId:       v.UserId,
		TaskGroup:    v.TaskGroup,
		TaskCode:     v.TaskCode,
		TaskId:       v.TaskId,
		TaskName:     v.TaskName,
		Amount:       v.Amount,
		Reward:       v.Reward,
		AmountItem:   v.AmountItem,
		RewardItem:   v.RewardItem,
		TargetAmount: v.TargetAmount,
		DoneAmount:   v.DoneAmount,
		State:        v.State,
		DoneAt:       timestamppb.New(v.DoneAt),
		ObtainAt:     timestamppb.New(v.ObtainAt),
		DoneTimes:    v.DoneTimes,
		AllTimes:     v.AllTimes,
		EffectTime:   timestamppb.New(v.EffectTime),
		ExpiredTime:  timestamppb.New(v.ExpiredTime),
		CreatedAt:    timestamppb.New(v.CreatedAt),
		UpdatedAt:    timestamppb.New(v.UpdatedAt),
		CreateBy:     v.CreateBy,
		UpdateBy:     v.UpdateBy,
		TenantId:     v.TenantId,
	}
}
