// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/activity"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Activity is the model entity for the Activity schema.
type Activity struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ActivityCode holds the value of the "activityCode" field.
	// 活动编码
	ActivityCode string `json:"activityCode,omitempty"`
	// ActivityName holds the value of the "activityName" field.
	// 活动名称
	ActivityName string `json:"activityName,omitempty"`
	// Summary holds the value of the "summary" field.
	// 活动描述
	Summary string `json:"summary,omitempty"`
	// RuleImgSc holds the value of the "ruleImgSc" field.
	// 活动规则简体中文图
	RuleImgSc string `json:"ruleImgSc,omitempty"`
	// RuleImgTc holds the value of the "ruleImgTc" field.
	// 活动规则繁体中文图
	RuleImgTc string `json:"ruleImgTc,omitempty"`
	// PopupImg holds the value of the "popupImg" field.
	// 弹出框图片地址
	PopupImg string `json:"popupImg,omitempty"`
	// RegDays holds the value of the "regDays" field.
	// 注册天数
	RegDays int32 `json:"regDays,omitempty"`
	// CycleType holds the value of the "cycleType" field.
	// 循环类型,默认
	CycleType string `json:"cycleType,omitempty"`
	// EffectTime holds the value of the "effectTime" field.
	// 活动生效时间
	EffectTime time.Time `json:"effectTime,omitempty"`
	// ExpiredTime holds the value of the "expiredTime" field.
	// 活动失效时间
	ExpiredTime time.Time `json:"expiredTime,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case activity.FieldID, activity.FieldRegDays, activity.FieldCreateBy, activity.FieldUpdateBy, activity.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case activity.FieldActivityCode, activity.FieldActivityName, activity.FieldSummary, activity.FieldRuleImgSc, activity.FieldRuleImgTc, activity.FieldPopupImg, activity.FieldCycleType:
			values[i] = new(sql.NullString)
		case activity.FieldEffectTime, activity.FieldExpiredTime, activity.FieldCreatedAt, activity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Activity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activity fields.
func (a *Activity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case activity.FieldActivityCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activityCode", values[i])
			} else if value.Valid {
				a.ActivityCode = value.String
			}
		case activity.FieldActivityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activityName", values[i])
			} else if value.Valid {
				a.ActivityName = value.String
			}
		case activity.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				a.Summary = value.String
			}
		case activity.FieldRuleImgSc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ruleImgSc", values[i])
			} else if value.Valid {
				a.RuleImgSc = value.String
			}
		case activity.FieldRuleImgTc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ruleImgTc", values[i])
			} else if value.Valid {
				a.RuleImgTc = value.String
			}
		case activity.FieldPopupImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field popupImg", values[i])
			} else if value.Valid {
				a.PopupImg = value.String
			}
		case activity.FieldRegDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field regDays", values[i])
			} else if value.Valid {
				a.RegDays = int32(value.Int64)
			}
		case activity.FieldCycleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cycleType", values[i])
			} else if value.Valid {
				a.CycleType = value.String
			}
		case activity.FieldEffectTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effectTime", values[i])
			} else if value.Valid {
				a.EffectTime = value.Time
			}
		case activity.FieldExpiredTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiredTime", values[i])
			} else if value.Valid {
				a.ExpiredTime = value.Time
			}
		case activity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case activity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case activity.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				a.CreateBy = value.Int64
			}
		case activity.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				a.UpdateBy = value.Int64
			}
		case activity.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				a.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Activity.
// Note that you need to call Activity.Unwrap() before calling this method if this Activity
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activity) Update() *ActivityUpdateOne {
	return (&ActivityClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Activity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Activity) Unwrap() *Activity {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activity is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activity) String() string {
	var builder strings.Builder
	builder.WriteString("Activity(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", activityCode=")
	builder.WriteString(a.ActivityCode)
	builder.WriteString(", activityName=")
	builder.WriteString(a.ActivityName)
	builder.WriteString(", summary=")
	builder.WriteString(a.Summary)
	builder.WriteString(", ruleImgSc=")
	builder.WriteString(a.RuleImgSc)
	builder.WriteString(", ruleImgTc=")
	builder.WriteString(a.RuleImgTc)
	builder.WriteString(", popupImg=")
	builder.WriteString(a.PopupImg)
	builder.WriteString(", regDays=")
	builder.WriteString(fmt.Sprintf("%v", a.RegDays))
	builder.WriteString(", cycleType=")
	builder.WriteString(a.CycleType)
	builder.WriteString(", effectTime=")
	builder.WriteString(a.EffectTime.Format(time.ANSIC))
	builder.WriteString(", expiredTime=")
	builder.WriteString(a.ExpiredTime.Format(time.ANSIC))
	builder.WriteString(", createdAt=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", a.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", a.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// Activities is a parsable slice of Activity.
type Activities []*Activity

func (a Activities) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
