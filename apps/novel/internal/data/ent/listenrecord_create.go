// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/listenrecord"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ListenRecordCreate is the builder for creating a ListenRecord entity.
type ListenRecordCreate struct {
	config
	mutation *ListenRecordMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (lrc *ListenRecordCreate) SetUserId(i int64) *ListenRecordCreate {
	lrc.mutation.SetUserId(i)
	return lrc
}

// SetChapterId sets the "chapterId" field.
func (lrc *ListenRecordCreate) SetChapterId(i int64) *ListenRecordCreate {
	lrc.mutation.SetChapterId(i)
	return lrc
}

// SetNovelId sets the "novelId" field.
func (lrc *ListenRecordCreate) SetNovelId(i int64) *ListenRecordCreate {
	lrc.mutation.SetNovelId(i)
	return lrc
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableNovelId(i *int64) *ListenRecordCreate {
	if i != nil {
		lrc.SetNovelId(*i)
	}
	return lrc
}

// SetListenTimes sets the "listenTimes" field.
func (lrc *ListenRecordCreate) SetListenTimes(i int64) *ListenRecordCreate {
	lrc.mutation.SetListenTimes(i)
	return lrc
}

// SetNillableListenTimes sets the "listenTimes" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableListenTimes(i *int64) *ListenRecordCreate {
	if i != nil {
		lrc.SetListenTimes(*i)
	}
	return lrc
}

// SetDuration sets the "duration" field.
func (lrc *ListenRecordCreate) SetDuration(t time.Duration) *ListenRecordCreate {
	lrc.mutation.SetDuration(t)
	return lrc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableDuration(t *time.Duration) *ListenRecordCreate {
	if t != nil {
		lrc.SetDuration(*t)
	}
	return lrc
}

// SetAllDuration sets the "allDuration" field.
func (lrc *ListenRecordCreate) SetAllDuration(t time.Duration) *ListenRecordCreate {
	lrc.mutation.SetAllDuration(t)
	return lrc
}

// SetNillableAllDuration sets the "allDuration" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableAllDuration(t *time.Duration) *ListenRecordCreate {
	if t != nil {
		lrc.SetAllDuration(*t)
	}
	return lrc
}

// SetDayDuration sets the "dayDuration" field.
func (lrc *ListenRecordCreate) SetDayDuration(t time.Duration) *ListenRecordCreate {
	lrc.mutation.SetDayDuration(t)
	return lrc
}

// SetNillableDayDuration sets the "dayDuration" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableDayDuration(t *time.Duration) *ListenRecordCreate {
	if t != nil {
		lrc.SetDayDuration(*t)
	}
	return lrc
}

// SetCreatedAt sets the "createdAt" field.
func (lrc *ListenRecordCreate) SetCreatedAt(t time.Time) *ListenRecordCreate {
	lrc.mutation.SetCreatedAt(t)
	return lrc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableCreatedAt(t *time.Time) *ListenRecordCreate {
	if t != nil {
		lrc.SetCreatedAt(*t)
	}
	return lrc
}

// SetUpdatedAt sets the "updatedAt" field.
func (lrc *ListenRecordCreate) SetUpdatedAt(t time.Time) *ListenRecordCreate {
	lrc.mutation.SetUpdatedAt(t)
	return lrc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableUpdatedAt(t *time.Time) *ListenRecordCreate {
	if t != nil {
		lrc.SetUpdatedAt(*t)
	}
	return lrc
}

// SetCreateBy sets the "createBy" field.
func (lrc *ListenRecordCreate) SetCreateBy(i int64) *ListenRecordCreate {
	lrc.mutation.SetCreateBy(i)
	return lrc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableCreateBy(i *int64) *ListenRecordCreate {
	if i != nil {
		lrc.SetCreateBy(*i)
	}
	return lrc
}

// SetUpdateBy sets the "updateBy" field.
func (lrc *ListenRecordCreate) SetUpdateBy(i int64) *ListenRecordCreate {
	lrc.mutation.SetUpdateBy(i)
	return lrc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableUpdateBy(i *int64) *ListenRecordCreate {
	if i != nil {
		lrc.SetUpdateBy(*i)
	}
	return lrc
}

// SetTenantId sets the "tenantId" field.
func (lrc *ListenRecordCreate) SetTenantId(i int64) *ListenRecordCreate {
	lrc.mutation.SetTenantId(i)
	return lrc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (lrc *ListenRecordCreate) SetNillableTenantId(i *int64) *ListenRecordCreate {
	if i != nil {
		lrc.SetTenantId(*i)
	}
	return lrc
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (lrc *ListenRecordCreate) SetUserID(id int64) *ListenRecordCreate {
	lrc.mutation.SetUserID(id)
	return lrc
}

// SetUser sets the "user" edge to the SocialUser entity.
func (lrc *ListenRecordCreate) SetUser(s *SocialUser) *ListenRecordCreate {
	return lrc.SetUserID(s.ID)
}

// Mutation returns the ListenRecordMutation object of the builder.
func (lrc *ListenRecordCreate) Mutation() *ListenRecordMutation {
	return lrc.mutation
}

// Save creates the ListenRecord in the database.
func (lrc *ListenRecordCreate) Save(ctx context.Context) (*ListenRecord, error) {
	var (
		err  error
		node *ListenRecord
	)
	lrc.defaults()
	if len(lrc.hooks) == 0 {
		if err = lrc.check(); err != nil {
			return nil, err
		}
		node, err = lrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ListenRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lrc.check(); err != nil {
				return nil, err
			}
			lrc.mutation = mutation
			if node, err = lrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lrc.hooks) - 1; i >= 0; i-- {
			if lrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lrc *ListenRecordCreate) SaveX(ctx context.Context) *ListenRecord {
	v, err := lrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrc *ListenRecordCreate) Exec(ctx context.Context) error {
	_, err := lrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrc *ListenRecordCreate) ExecX(ctx context.Context) {
	if err := lrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrc *ListenRecordCreate) defaults() {
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		v := listenrecord.DefaultCreatedAt()
		lrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		v := listenrecord.DefaultUpdatedAt()
		lrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lrc.mutation.CreateBy(); !ok {
		v := listenrecord.DefaultCreateBy
		lrc.mutation.SetCreateBy(v)
	}
	if _, ok := lrc.mutation.UpdateBy(); !ok {
		v := listenrecord.DefaultUpdateBy
		lrc.mutation.SetUpdateBy(v)
	}
	if _, ok := lrc.mutation.TenantId(); !ok {
		v := listenrecord.DefaultTenantId
		lrc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrc *ListenRecordCreate) check() error {
	if _, ok := lrc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "ListenRecord.userId"`)}
	}
	if _, ok := lrc.mutation.ChapterId(); !ok {
		return &ValidationError{Name: "chapterId", err: errors.New(`ent: missing required field "ListenRecord.chapterId"`)}
	}
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "ListenRecord.createdAt"`)}
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "ListenRecord.updatedAt"`)}
	}
	if _, ok := lrc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "ListenRecord.createBy"`)}
	}
	if _, ok := lrc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "ListenRecord.updateBy"`)}
	}
	if _, ok := lrc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "ListenRecord.tenantId"`)}
	}
	if _, ok := lrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ListenRecord.user"`)}
	}
	return nil
}

func (lrc *ListenRecordCreate) sqlSave(ctx context.Context) (*ListenRecord, error) {
	_node, _spec := lrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (lrc *ListenRecordCreate) createSpec() (*ListenRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &ListenRecord{config: lrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: listenrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: listenrecord.FieldID,
			},
		}
	)
	if value, ok := lrc.mutation.ChapterId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldChapterId,
		})
		_node.ChapterId = value
	}
	if value, ok := lrc.mutation.NovelId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldNovelId,
		})
		_node.NovelId = value
	}
	if value, ok := lrc.mutation.ListenTimes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldListenTimes,
		})
		_node.ListenTimes = value
	}
	if value, ok := lrc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := lrc.mutation.AllDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldAllDuration,
		})
		_node.AllDuration = value
	}
	if value, ok := lrc.mutation.DayDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldDayDuration,
		})
		_node.DayDuration = value
	}
	if value, ok := lrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: listenrecord.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := lrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: listenrecord.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := lrc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := lrc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := lrc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: listenrecord.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := lrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   listenrecord.UserTable,
			Columns: []string{listenrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ListenRecordCreateBulk is the builder for creating many ListenRecord entities in bulk.
type ListenRecordCreateBulk struct {
	config
	builders []*ListenRecordCreate
}

// Save creates the ListenRecord entities in the database.
func (lrcb *ListenRecordCreateBulk) Save(ctx context.Context) ([]*ListenRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lrcb.builders))
	nodes := make([]*ListenRecord, len(lrcb.builders))
	mutators := make([]Mutator, len(lrcb.builders))
	for i := range lrcb.builders {
		func(i int, root context.Context) {
			builder := lrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ListenRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrcb *ListenRecordCreateBulk) SaveX(ctx context.Context) []*ListenRecord {
	v, err := lrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrcb *ListenRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := lrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrcb *ListenRecordCreateBulk) ExecX(ctx context.Context) {
	if err := lrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
