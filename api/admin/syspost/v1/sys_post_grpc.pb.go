// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/syspost/v1/sys_post.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysPostClient is the client API for SysPost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysPostClient interface {
	// 分页查询SysPost
	GetSysPostPage(ctx context.Context, in *SysPostPageReq, opts ...grpc.CallOption) (*SysPostPageReply, error)
	// 获取SysPost
	GetSysPost(ctx context.Context, in *SysPostReq, opts ...grpc.CallOption) (*SysPostReply, error)
	// 更新SysPost
	UpdateSysPost(ctx context.Context, in *SysPostUpdateReq, opts ...grpc.CallOption) (*SysPostUpdateReply, error)
	// 创建SysPost
	CreateSysPost(ctx context.Context, in *SysPostCreateReq, opts ...grpc.CallOption) (*SysPostCreateReply, error)
	// 删除SysPost
	DeleteSysPost(ctx context.Context, in *SysPostDeleteReq, opts ...grpc.CallOption) (*SysPostDeleteReply, error)
	// 批量删除SysPost
	BatchDeleteSysPost(ctx context.Context, in *SysPostBatchDeleteReq, opts ...grpc.CallOption) (*SysPostDeleteReply, error)
}

type sysPostClient struct {
	cc grpc.ClientConnInterface
}

func NewSysPostClient(cc grpc.ClientConnInterface) SysPostClient {
	return &sysPostClient{cc}
}

func (c *sysPostClient) GetSysPostPage(ctx context.Context, in *SysPostPageReq, opts ...grpc.CallOption) (*SysPostPageReply, error) {
	out := new(SysPostPageReply)
	err := c.cc.Invoke(ctx, "/syspost.v1.SysPost/GetSysPostPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostClient) GetSysPost(ctx context.Context, in *SysPostReq, opts ...grpc.CallOption) (*SysPostReply, error) {
	out := new(SysPostReply)
	err := c.cc.Invoke(ctx, "/syspost.v1.SysPost/GetSysPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostClient) UpdateSysPost(ctx context.Context, in *SysPostUpdateReq, opts ...grpc.CallOption) (*SysPostUpdateReply, error) {
	out := new(SysPostUpdateReply)
	err := c.cc.Invoke(ctx, "/syspost.v1.SysPost/UpdateSysPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostClient) CreateSysPost(ctx context.Context, in *SysPostCreateReq, opts ...grpc.CallOption) (*SysPostCreateReply, error) {
	out := new(SysPostCreateReply)
	err := c.cc.Invoke(ctx, "/syspost.v1.SysPost/CreateSysPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostClient) DeleteSysPost(ctx context.Context, in *SysPostDeleteReq, opts ...grpc.CallOption) (*SysPostDeleteReply, error) {
	out := new(SysPostDeleteReply)
	err := c.cc.Invoke(ctx, "/syspost.v1.SysPost/DeleteSysPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysPostClient) BatchDeleteSysPost(ctx context.Context, in *SysPostBatchDeleteReq, opts ...grpc.CallOption) (*SysPostDeleteReply, error) {
	out := new(SysPostDeleteReply)
	err := c.cc.Invoke(ctx, "/syspost.v1.SysPost/BatchDeleteSysPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysPostServer is the server API for SysPost service.
// All implementations must embed UnimplementedSysPostServer
// for forward compatibility
type SysPostServer interface {
	// 分页查询SysPost
	GetSysPostPage(context.Context, *SysPostPageReq) (*SysPostPageReply, error)
	// 获取SysPost
	GetSysPost(context.Context, *SysPostReq) (*SysPostReply, error)
	// 更新SysPost
	UpdateSysPost(context.Context, *SysPostUpdateReq) (*SysPostUpdateReply, error)
	// 创建SysPost
	CreateSysPost(context.Context, *SysPostCreateReq) (*SysPostCreateReply, error)
	// 删除SysPost
	DeleteSysPost(context.Context, *SysPostDeleteReq) (*SysPostDeleteReply, error)
	// 批量删除SysPost
	BatchDeleteSysPost(context.Context, *SysPostBatchDeleteReq) (*SysPostDeleteReply, error)
	mustEmbedUnimplementedSysPostServer()
}

// UnimplementedSysPostServer must be embedded to have forward compatible implementations.
type UnimplementedSysPostServer struct {
}

func (UnimplementedSysPostServer) GetSysPostPage(context.Context, *SysPostPageReq) (*SysPostPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysPostPage not implemented")
}
func (UnimplementedSysPostServer) GetSysPost(context.Context, *SysPostReq) (*SysPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysPost not implemented")
}
func (UnimplementedSysPostServer) UpdateSysPost(context.Context, *SysPostUpdateReq) (*SysPostUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysPost not implemented")
}
func (UnimplementedSysPostServer) CreateSysPost(context.Context, *SysPostCreateReq) (*SysPostCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysPost not implemented")
}
func (UnimplementedSysPostServer) DeleteSysPost(context.Context, *SysPostDeleteReq) (*SysPostDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysPost not implemented")
}
func (UnimplementedSysPostServer) BatchDeleteSysPost(context.Context, *SysPostBatchDeleteReq) (*SysPostDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysPost not implemented")
}
func (UnimplementedSysPostServer) mustEmbedUnimplementedSysPostServer() {}

// UnsafeSysPostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysPostServer will
// result in compilation errors.
type UnsafeSysPostServer interface {
	mustEmbedUnimplementedSysPostServer()
}

func RegisterSysPostServer(s grpc.ServiceRegistrar, srv SysPostServer) {
	s.RegisterService(&SysPost_ServiceDesc, srv)
}

func _SysPost_GetSysPostPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServer).GetSysPostPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syspost.v1.SysPost/GetSysPostPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServer).GetSysPostPage(ctx, req.(*SysPostPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPost_GetSysPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServer).GetSysPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syspost.v1.SysPost/GetSysPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServer).GetSysPost(ctx, req.(*SysPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPost_UpdateSysPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServer).UpdateSysPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syspost.v1.SysPost/UpdateSysPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServer).UpdateSysPost(ctx, req.(*SysPostUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPost_CreateSysPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServer).CreateSysPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syspost.v1.SysPost/CreateSysPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServer).CreateSysPost(ctx, req.(*SysPostCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPost_DeleteSysPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServer).DeleteSysPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syspost.v1.SysPost/DeleteSysPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServer).DeleteSysPost(ctx, req.(*SysPostDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysPost_BatchDeleteSysPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysPostBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysPostServer).BatchDeleteSysPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syspost.v1.SysPost/BatchDeleteSysPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysPostServer).BatchDeleteSysPost(ctx, req.(*SysPostBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysPost_ServiceDesc is the grpc.ServiceDesc for SysPost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysPost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syspost.v1.SysPost",
	HandlerType: (*SysPostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysPostPage",
			Handler:    _SysPost_GetSysPostPage_Handler,
		},
		{
			MethodName: "GetSysPost",
			Handler:    _SysPost_GetSysPost_Handler,
		},
		{
			MethodName: "UpdateSysPost",
			Handler:    _SysPost_UpdateSysPost_Handler,
		},
		{
			MethodName: "CreateSysPost",
			Handler:    _SysPost_CreateSysPost_Handler,
		},
		{
			MethodName: "DeleteSysPost",
			Handler:    _SysPost_DeleteSysPost_Handler,
		},
		{
			MethodName: "BatchDeleteSysPost",
			Handler:    _SysPost_BatchDeleteSysPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/syspost/v1/sys_post.proto",
}
