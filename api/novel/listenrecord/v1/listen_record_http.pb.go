// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ListenRecordHTTPServer interface {
	BatchDeleteListenRecord(context.Context, *ListenRecordBatchDeleteReq) (*ListenRecordDeleteReply, error)
	CreateListenRecord(context.Context, *ListenRecordCreateReq) (*ListenRecordCreateReply, error)
	DeleteListenRecord(context.Context, *ListenRecordDeleteReq) (*ListenRecordDeleteReply, error)
	GetListenRecord(context.Context, *ListenRecordReq) (*ListenRecordReply, error)
	GetListenRecordPage(context.Context, *ListenRecordPageReq) (*ListenRecordPageReply, error)
	UpdateListenRecord(context.Context, *ListenRecordUpdateReq) (*ListenRecordUpdateReply, error)
}

func RegisterListenRecordHTTPServer(s *http.Server, srv ListenRecordHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/listen/record/page", _ListenRecord_GetListenRecordPage0_HTTP_Handler(srv))
	r.GET("/v1/listen/record/{id}", _ListenRecord_GetListenRecord0_HTTP_Handler(srv))
	r.PUT("/v1/listen/record/{id}", _ListenRecord_UpdateListenRecord0_HTTP_Handler(srv))
	r.POST("/v1/listen/record", _ListenRecord_CreateListenRecord0_HTTP_Handler(srv))
	r.DELETE("/v1/listen/record/{id}", _ListenRecord_DeleteListenRecord0_HTTP_Handler(srv))
	r.DELETE("/v1/listen/record", _ListenRecord_BatchDeleteListenRecord0_HTTP_Handler(srv))
}

func _ListenRecord_GetListenRecordPage0_HTTP_Handler(srv ListenRecordHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenRecordPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/listenrecord.v1.ListenRecord/GetListenRecordPage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetListenRecordPage(ctx, req.(*ListenRecordPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListenRecordPageReply)
		return ctx.Result(200, reply)
	}
}

func _ListenRecord_GetListenRecord0_HTTP_Handler(srv ListenRecordHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenRecordReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/listenrecord.v1.ListenRecord/GetListenRecord")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetListenRecord(ctx, req.(*ListenRecordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListenRecordReply)
		return ctx.Result(200, reply)
	}
}

func _ListenRecord_UpdateListenRecord0_HTTP_Handler(srv ListenRecordHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenRecordUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/listenrecord.v1.ListenRecord/UpdateListenRecord")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateListenRecord(ctx, req.(*ListenRecordUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListenRecordUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _ListenRecord_CreateListenRecord0_HTTP_Handler(srv ListenRecordHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenRecordCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/listenrecord.v1.ListenRecord/CreateListenRecord")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateListenRecord(ctx, req.(*ListenRecordCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListenRecordCreateReply)
		return ctx.Result(200, reply)
	}
}

func _ListenRecord_DeleteListenRecord0_HTTP_Handler(srv ListenRecordHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenRecordDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/listenrecord.v1.ListenRecord/DeleteListenRecord")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteListenRecord(ctx, req.(*ListenRecordDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListenRecordDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _ListenRecord_BatchDeleteListenRecord0_HTTP_Handler(srv ListenRecordHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenRecordBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/listenrecord.v1.ListenRecord/BatchDeleteListenRecord")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteListenRecord(ctx, req.(*ListenRecordBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListenRecordDeleteReply)
		return ctx.Result(200, reply)
	}
}

type ListenRecordHTTPClient interface {
	BatchDeleteListenRecord(ctx context.Context, req *ListenRecordBatchDeleteReq, opts ...http.CallOption) (rsp *ListenRecordDeleteReply, err error)
	CreateListenRecord(ctx context.Context, req *ListenRecordCreateReq, opts ...http.CallOption) (rsp *ListenRecordCreateReply, err error)
	DeleteListenRecord(ctx context.Context, req *ListenRecordDeleteReq, opts ...http.CallOption) (rsp *ListenRecordDeleteReply, err error)
	GetListenRecord(ctx context.Context, req *ListenRecordReq, opts ...http.CallOption) (rsp *ListenRecordReply, err error)
	GetListenRecordPage(ctx context.Context, req *ListenRecordPageReq, opts ...http.CallOption) (rsp *ListenRecordPageReply, err error)
	UpdateListenRecord(ctx context.Context, req *ListenRecordUpdateReq, opts ...http.CallOption) (rsp *ListenRecordUpdateReply, err error)
}

type ListenRecordHTTPClientImpl struct {
	cc *http.Client
}

func NewListenRecordHTTPClient(client *http.Client) ListenRecordHTTPClient {
	return &ListenRecordHTTPClientImpl{client}
}

func (c *ListenRecordHTTPClientImpl) BatchDeleteListenRecord(ctx context.Context, in *ListenRecordBatchDeleteReq, opts ...http.CallOption) (*ListenRecordDeleteReply, error) {
	var out ListenRecordDeleteReply
	pattern := "/v1/listen/record"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/listenrecord.v1.ListenRecord/BatchDeleteListenRecord"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ListenRecordHTTPClientImpl) CreateListenRecord(ctx context.Context, in *ListenRecordCreateReq, opts ...http.CallOption) (*ListenRecordCreateReply, error) {
	var out ListenRecordCreateReply
	pattern := "/v1/listen/record"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/listenrecord.v1.ListenRecord/CreateListenRecord"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ListenRecordHTTPClientImpl) DeleteListenRecord(ctx context.Context, in *ListenRecordDeleteReq, opts ...http.CallOption) (*ListenRecordDeleteReply, error) {
	var out ListenRecordDeleteReply
	pattern := "/v1/listen/record/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/listenrecord.v1.ListenRecord/DeleteListenRecord"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ListenRecordHTTPClientImpl) GetListenRecord(ctx context.Context, in *ListenRecordReq, opts ...http.CallOption) (*ListenRecordReply, error) {
	var out ListenRecordReply
	pattern := "/v1/listen/record/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/listenrecord.v1.ListenRecord/GetListenRecord"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ListenRecordHTTPClientImpl) GetListenRecordPage(ctx context.Context, in *ListenRecordPageReq, opts ...http.CallOption) (*ListenRecordPageReply, error) {
	var out ListenRecordPageReply
	pattern := "/v1/listen/record/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/listenrecord.v1.ListenRecord/GetListenRecordPage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ListenRecordHTTPClientImpl) UpdateListenRecord(ctx context.Context, in *ListenRecordUpdateReq, opts ...http.CallOption) (*ListenRecordUpdateReply, error) {
	var out ListenRecordUpdateReply
	pattern := "/v1/listen/record/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/listenrecord.v1.ListenRecord/UpdateListenRecord"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
