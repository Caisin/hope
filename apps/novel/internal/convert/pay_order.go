// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/pay_order.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/payorder/v1"
	"hope/apps/novel/internal/data/ent"
	"hope/apps/novel/internal/data/ent/payorder"
	"hope/apps/novel/internal/data/ent/schema"
)

func PayOrderUpdateReq2Data(v *v1.PayOrderUpdateReq) *ent.PayOrder {
	if v == nil {
		return nil
	}
	return &ent.PayOrder{
		ID:           v.Id,
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        schema.OrderState(v.State),
		Payment:      v.Payment,
		PaymentTime:  v.PaymentTime.AsTime(),
		CloseTime:    v.CloseTime.AsTime(),
		PayType:      payorder.PayType(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
	}
}

func PayOrderData2UpdateReq(v *ent.PayOrder) *v1.PayOrderUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.PayOrderUpdateReq{
		Id:           v.ID,
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        int32(v.State),
		Payment:      v.Payment,
		PaymentTime:  timestamppb.New(v.PaymentTime),
		CloseTime:    timestamppb.New(v.CloseTime),
		PayType:      string(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
	}
}

func PayOrderCreateReq2Data(v *v1.PayOrderCreateReq) *ent.PayOrder {
	if v == nil {
		return nil
	}
	return &ent.PayOrder{
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        schema.OrderState(v.State),
		Payment:      v.Payment,
		PaymentTime:  v.PaymentTime.AsTime(),
		CloseTime:    v.CloseTime.AsTime(),
		PayType:      payorder.PayType(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
	}
}

func PayOrderData2CreateReq(v *ent.PayOrder) *v1.PayOrderCreateReq {
	if v == nil {
		return nil
	}
	return &v1.PayOrderCreateReq{
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        int32(v.State),
		Payment:      v.Payment,
		PaymentTime:  timestamppb.New(v.PaymentTime),
		CloseTime:    timestamppb.New(v.CloseTime),
		PayType:      string(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
	}
}

func PayOrderReq2Data(v *v1.PayOrderReq) *ent.PayOrder {
	if v == nil {
		return nil
	}
	return &ent.PayOrder{
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        schema.OrderState(v.State),
		Payment:      v.Payment,
		PaymentTime:  v.PaymentTime.AsTime(),
		CloseTime:    v.CloseTime.AsTime(),
		PayType:      payorder.PayType(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
	}
}

func PayOrderData2Req(v *ent.PayOrder) *v1.PayOrderReq {
	if v == nil {
		return nil
	}
	return &v1.PayOrderReq{
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        int32(v.State),
		Payment:      v.Payment,
		PaymentTime:  timestamppb.New(v.PaymentTime),
		CloseTime:    timestamppb.New(v.CloseTime),
		PayType:      string(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
	}
}

func PayOrderReply2Data(v *v1.PayOrderReply) *ent.PayOrder {
	if v == nil {
		return nil
	}
	return &ent.PayOrder{
		ID:           v.Id,
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        schema.OrderState(v.State),
		Payment:      v.Payment,
		PaymentTime:  v.PaymentTime.AsTime(),
		CloseTime:    v.CloseTime.AsTime(),
		PayType:      payorder.PayType(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
		Remark:       v.Remark,
		CreatedAt:    v.CreatedAt.AsTime(),
		UpdatedAt:    v.UpdatedAt.AsTime(),
		CreateBy:     v.CreateBy,
		UpdateBy:     v.UpdateBy,
		TenantId:     v.TenantId,
	}
}

func PayOrderData2Reply(v *ent.PayOrder) *v1.PayOrderReply {
	if v == nil {
		return nil
	}
	return &v1.PayOrderReply{
		Id:           v.ID,
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        int32(v.State),
		Payment:      v.Payment,
		PaymentTime:  timestamppb.New(v.PaymentTime),
		CloseTime:    timestamppb.New(v.CloseTime),
		PayType:      string(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
		Remark:       v.Remark,
		CreatedAt:    timestamppb.New(v.CreatedAt),
		UpdatedAt:    timestamppb.New(v.UpdatedAt),
		CreateBy:     v.CreateBy,
		UpdateBy:     v.UpdateBy,
		TenantId:     v.TenantId,
	}
}

func PayOrderUpdateReply2Data(v *v1.PayOrderUpdateReply) *ent.PayOrder {
	if v == nil {
		return nil
	}
	return &ent.PayOrder{
		ID:           v.Id,
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        schema.OrderState(v.State),
		Payment:      v.Payment,
		PaymentTime:  v.PaymentTime.AsTime(),
		CloseTime:    v.CloseTime.AsTime(),
		PayType:      payorder.PayType(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
	}
}

func PayOrderData2UpdateReply(v *ent.PayOrder) *v1.PayOrderUpdateReply {
	if v == nil {
		return nil
	}
	return &v1.PayOrderUpdateReply{
		Id:           v.ID,
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        int32(v.State),
		Payment:      v.Payment,
		PaymentTime:  timestamppb.New(v.PaymentTime),
		CloseTime:    timestamppb.New(v.CloseTime),
		PayType:      string(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
	}
}

func PayOrderCreateReply2Data(v *v1.PayOrderCreateReply) *ent.PayOrder {
	if v == nil {
		return nil
	}
	return &ent.PayOrder{
		ID:           v.Id,
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        schema.OrderState(v.State),
		Payment:      v.Payment,
		PaymentTime:  v.PaymentTime.AsTime(),
		CloseTime:    v.CloseTime.AsTime(),
		PayType:      payorder.PayType(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
		Remark:       v.Remark,
		CreatedAt:    v.CreatedAt.AsTime(),
		UpdatedAt:    v.UpdatedAt.AsTime(),
		CreateBy:     v.CreateBy,
		UpdateBy:     v.UpdateBy,
		TenantId:     v.TenantId,
	}
}

func PayOrderData2CreateReply(v *ent.PayOrder) *v1.PayOrderCreateReply {
	if v == nil {
		return nil
	}
	return &v1.PayOrderCreateReply{
		Id:           v.ID,
		OrderId:      v.OrderId,
		UserId:       v.UserId,
		ChId:         v.ChId,
		AgreementId:  v.AgreementId,
		LastRead:     v.LastRead,
		LastChapter:  v.LastChapter,
		PaymentName:  v.PaymentName,
		PaymentId:    v.PaymentId,
		State:        int32(v.State),
		Payment:      v.Payment,
		PaymentTime:  timestamppb.New(v.PaymentTime),
		CloseTime:    timestamppb.New(v.CloseTime),
		PayType:      string(v.PayType),
		Coin:         v.Coin,
		Coupon:       v.Coupon,
		VipDays:      v.VipDays,
		VipType:      v.VipType,
		VipName:      v.VipName,
		Times:        v.Times,
		OtherOrderId: v.OtherOrderId,
		Remark:       v.Remark,
		CreatedAt:    timestamppb.New(v.CreatedAt),
		UpdatedAt:    timestamppb.New(v.UpdatedAt),
		CreateBy:     v.CreateBy,
		UpdateBy:     v.UpdateBy,
		TenantId:     v.TenantId,
	}
}
