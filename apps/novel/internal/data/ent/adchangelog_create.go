// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/adchangelog"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdChangeLogCreate is the builder for creating a AdChangeLog entity.
type AdChangeLogCreate struct {
	config
	mutation *AdChangeLogMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (aclc *AdChangeLogCreate) SetUserId(i int64) *AdChangeLogCreate {
	aclc.mutation.SetUserId(i)
	return aclc
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableUserId(i *int64) *AdChangeLogCreate {
	if i != nil {
		aclc.SetUserId(*i)
	}
	return aclc
}

// SetAdId sets the "adId" field.
func (aclc *AdChangeLogCreate) SetAdId(s string) *AdChangeLogCreate {
	aclc.mutation.SetAdId(s)
	return aclc
}

// SetNillableAdId sets the "adId" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableAdId(s *string) *AdChangeLogCreate {
	if s != nil {
		aclc.SetAdId(*s)
	}
	return aclc
}

// SetChId sets the "chId" field.
func (aclc *AdChangeLogCreate) SetChId(i int64) *AdChangeLogCreate {
	aclc.mutation.SetChId(i)
	return aclc
}

// SetNillableChId sets the "chId" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableChId(i *int64) *AdChangeLogCreate {
	if i != nil {
		aclc.SetChId(*i)
	}
	return aclc
}

// SetDeviceId sets the "deviceId" field.
func (aclc *AdChangeLogCreate) SetDeviceId(s string) *AdChangeLogCreate {
	aclc.mutation.SetDeviceId(s)
	return aclc
}

// SetNillableDeviceId sets the "deviceId" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableDeviceId(s *string) *AdChangeLogCreate {
	if s != nil {
		aclc.SetDeviceId(*s)
	}
	return aclc
}

// SetExtInfo sets the "extInfo" field.
func (aclc *AdChangeLogCreate) SetExtInfo(s string) *AdChangeLogCreate {
	aclc.mutation.SetExtInfo(s)
	return aclc
}

// SetNillableExtInfo sets the "extInfo" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableExtInfo(s *string) *AdChangeLogCreate {
	if s != nil {
		aclc.SetExtInfo(*s)
	}
	return aclc
}

// SetCreatedAt sets the "createdAt" field.
func (aclc *AdChangeLogCreate) SetCreatedAt(t time.Time) *AdChangeLogCreate {
	aclc.mutation.SetCreatedAt(t)
	return aclc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableCreatedAt(t *time.Time) *AdChangeLogCreate {
	if t != nil {
		aclc.SetCreatedAt(*t)
	}
	return aclc
}

// SetUpdatedAt sets the "updatedAt" field.
func (aclc *AdChangeLogCreate) SetUpdatedAt(t time.Time) *AdChangeLogCreate {
	aclc.mutation.SetUpdatedAt(t)
	return aclc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableUpdatedAt(t *time.Time) *AdChangeLogCreate {
	if t != nil {
		aclc.SetUpdatedAt(*t)
	}
	return aclc
}

// SetCreateBy sets the "createBy" field.
func (aclc *AdChangeLogCreate) SetCreateBy(i int64) *AdChangeLogCreate {
	aclc.mutation.SetCreateBy(i)
	return aclc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableCreateBy(i *int64) *AdChangeLogCreate {
	if i != nil {
		aclc.SetCreateBy(*i)
	}
	return aclc
}

// SetUpdateBy sets the "updateBy" field.
func (aclc *AdChangeLogCreate) SetUpdateBy(i int64) *AdChangeLogCreate {
	aclc.mutation.SetUpdateBy(i)
	return aclc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableUpdateBy(i *int64) *AdChangeLogCreate {
	if i != nil {
		aclc.SetUpdateBy(*i)
	}
	return aclc
}

// SetTenantId sets the "tenantId" field.
func (aclc *AdChangeLogCreate) SetTenantId(i int64) *AdChangeLogCreate {
	aclc.mutation.SetTenantId(i)
	return aclc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableTenantId(i *int64) *AdChangeLogCreate {
	if i != nil {
		aclc.SetTenantId(*i)
	}
	return aclc
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (aclc *AdChangeLogCreate) SetUserID(id int64) *AdChangeLogCreate {
	aclc.mutation.SetUserID(id)
	return aclc
}

// SetNillableUserID sets the "user" edge to the SocialUser entity by ID if the given value is not nil.
func (aclc *AdChangeLogCreate) SetNillableUserID(id *int64) *AdChangeLogCreate {
	if id != nil {
		aclc = aclc.SetUserID(*id)
	}
	return aclc
}

// SetUser sets the "user" edge to the SocialUser entity.
func (aclc *AdChangeLogCreate) SetUser(s *SocialUser) *AdChangeLogCreate {
	return aclc.SetUserID(s.ID)
}

// Mutation returns the AdChangeLogMutation object of the builder.
func (aclc *AdChangeLogCreate) Mutation() *AdChangeLogMutation {
	return aclc.mutation
}

// Save creates the AdChangeLog in the database.
func (aclc *AdChangeLogCreate) Save(ctx context.Context) (*AdChangeLog, error) {
	var (
		err  error
		node *AdChangeLog
	)
	aclc.defaults()
	if len(aclc.hooks) == 0 {
		if err = aclc.check(); err != nil {
			return nil, err
		}
		node, err = aclc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdChangeLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aclc.check(); err != nil {
				return nil, err
			}
			aclc.mutation = mutation
			if node, err = aclc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aclc.hooks) - 1; i >= 0; i-- {
			if aclc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aclc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aclc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aclc *AdChangeLogCreate) SaveX(ctx context.Context) *AdChangeLog {
	v, err := aclc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aclc *AdChangeLogCreate) Exec(ctx context.Context) error {
	_, err := aclc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aclc *AdChangeLogCreate) ExecX(ctx context.Context) {
	if err := aclc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aclc *AdChangeLogCreate) defaults() {
	if _, ok := aclc.mutation.CreatedAt(); !ok {
		v := adchangelog.DefaultCreatedAt()
		aclc.mutation.SetCreatedAt(v)
	}
	if _, ok := aclc.mutation.UpdatedAt(); !ok {
		v := adchangelog.DefaultUpdatedAt()
		aclc.mutation.SetUpdatedAt(v)
	}
	if _, ok := aclc.mutation.CreateBy(); !ok {
		v := adchangelog.DefaultCreateBy
		aclc.mutation.SetCreateBy(v)
	}
	if _, ok := aclc.mutation.UpdateBy(); !ok {
		v := adchangelog.DefaultUpdateBy
		aclc.mutation.SetUpdateBy(v)
	}
	if _, ok := aclc.mutation.TenantId(); !ok {
		v := adchangelog.DefaultTenantId
		aclc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aclc *AdChangeLogCreate) check() error {
	if _, ok := aclc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := aclc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := aclc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := aclc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := aclc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (aclc *AdChangeLogCreate) sqlSave(ctx context.Context) (*AdChangeLog, error) {
	_node, _spec := aclc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aclc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (aclc *AdChangeLogCreate) createSpec() (*AdChangeLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AdChangeLog{config: aclc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: adchangelog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: adchangelog.FieldID,
			},
		}
	)
	if value, ok := aclc.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchangelog.FieldUserId,
		})
		_node.UserId = value
	}
	if value, ok := aclc.mutation.AdId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchangelog.FieldAdId,
		})
		_node.AdId = value
	}
	if value, ok := aclc.mutation.ChId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchangelog.FieldChId,
		})
		_node.ChId = value
	}
	if value, ok := aclc.mutation.DeviceId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchangelog.FieldDeviceId,
		})
		_node.DeviceId = value
	}
	if value, ok := aclc.mutation.ExtInfo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchangelog.FieldExtInfo,
		})
		_node.ExtInfo = value
	}
	if value, ok := aclc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adchangelog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := aclc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adchangelog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := aclc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchangelog.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := aclc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchangelog.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := aclc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchangelog.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := aclc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adchangelog.UserTable,
			Columns: []string{adchangelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.social_user_ads = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdChangeLogCreateBulk is the builder for creating many AdChangeLog entities in bulk.
type AdChangeLogCreateBulk struct {
	config
	builders []*AdChangeLogCreate
}

// Save creates the AdChangeLog entities in the database.
func (aclcb *AdChangeLogCreateBulk) Save(ctx context.Context) ([]*AdChangeLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aclcb.builders))
	nodes := make([]*AdChangeLog, len(aclcb.builders))
	mutators := make([]Mutator, len(aclcb.builders))
	for i := range aclcb.builders {
		func(i int, root context.Context) {
			builder := aclcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdChangeLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aclcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aclcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aclcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aclcb *AdChangeLogCreateBulk) SaveX(ctx context.Context) []*AdChangeLog {
	v, err := aclcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aclcb *AdChangeLogCreateBulk) Exec(ctx context.Context) error {
	_, err := aclcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aclcb *AdChangeLogCreateBulk) ExecX(ctx context.Context) {
	if err := aclcb.Exec(ctx); err != nil {
		panic(err)
	}
}
