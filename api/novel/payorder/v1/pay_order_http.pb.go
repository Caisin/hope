// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type PayOrderHTTPServer interface {
	BatchDeletePayOrder(context.Context, *PayOrderBatchDeleteReq) (*PayOrderDeleteReply, error)
	CreatePayOrder(context.Context, *PayOrderCreateReq) (*PayOrderCreateReply, error)
	DeletePayOrder(context.Context, *PayOrderDeleteReq) (*PayOrderDeleteReply, error)
	GetPagePayOrder(context.Context, *PayOrderPageReq) (*PayOrderPageReply, error)
	GetPayOrder(context.Context, *PayOrderReq) (*PayOrderReply, error)
	UpdatePayOrder(context.Context, *PayOrderUpdateReq) (*PayOrderUpdateReply, error)
}

func RegisterPayOrderHTTPServer(s *http.Server, srv PayOrderHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/pay/order/page", _PayOrder_GetPagePayOrder0_HTTP_Handler(srv))
	r.GET("/v1/pay/order/{id}", _PayOrder_GetPayOrder0_HTTP_Handler(srv))
	r.PUT("/v1/pay/order/{id}", _PayOrder_UpdatePayOrder0_HTTP_Handler(srv))
	r.POST("/v1/pay/order", _PayOrder_CreatePayOrder0_HTTP_Handler(srv))
	r.DELETE("/v1/pay/order/{id}", _PayOrder_DeletePayOrder0_HTTP_Handler(srv))
	r.DELETE("/v1/pay/order", _PayOrder_BatchDeletePayOrder0_HTTP_Handler(srv))
}

func _PayOrder_GetPagePayOrder0_HTTP_Handler(srv PayOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOrderPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/payorder.v1.PayOrder/GetPagePayOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPagePayOrder(ctx, req.(*PayOrderPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOrderPageReply)
		return ctx.Result(200, reply)
	}
}

func _PayOrder_GetPayOrder0_HTTP_Handler(srv PayOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOrderReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/payorder.v1.PayOrder/GetPayOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPayOrder(ctx, req.(*PayOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOrderReply)
		return ctx.Result(200, reply)
	}
}

func _PayOrder_UpdatePayOrder0_HTTP_Handler(srv PayOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOrderUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/payorder.v1.PayOrder/UpdatePayOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePayOrder(ctx, req.(*PayOrderUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOrderUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _PayOrder_CreatePayOrder0_HTTP_Handler(srv PayOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOrderCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/payorder.v1.PayOrder/CreatePayOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePayOrder(ctx, req.(*PayOrderCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOrderCreateReply)
		return ctx.Result(200, reply)
	}
}

func _PayOrder_DeletePayOrder0_HTTP_Handler(srv PayOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOrderDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/payorder.v1.PayOrder/DeletePayOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePayOrder(ctx, req.(*PayOrderDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOrderDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _PayOrder_BatchDeletePayOrder0_HTTP_Handler(srv PayOrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOrderBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/payorder.v1.PayOrder/BatchDeletePayOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeletePayOrder(ctx, req.(*PayOrderBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOrderDeleteReply)
		return ctx.Result(200, reply)
	}
}

type PayOrderHTTPClient interface {
	BatchDeletePayOrder(ctx context.Context, req *PayOrderBatchDeleteReq, opts ...http.CallOption) (rsp *PayOrderDeleteReply, err error)
	CreatePayOrder(ctx context.Context, req *PayOrderCreateReq, opts ...http.CallOption) (rsp *PayOrderCreateReply, err error)
	DeletePayOrder(ctx context.Context, req *PayOrderDeleteReq, opts ...http.CallOption) (rsp *PayOrderDeleteReply, err error)
	GetPagePayOrder(ctx context.Context, req *PayOrderPageReq, opts ...http.CallOption) (rsp *PayOrderPageReply, err error)
	GetPayOrder(ctx context.Context, req *PayOrderReq, opts ...http.CallOption) (rsp *PayOrderReply, err error)
	UpdatePayOrder(ctx context.Context, req *PayOrderUpdateReq, opts ...http.CallOption) (rsp *PayOrderUpdateReply, err error)
}

type PayOrderHTTPClientImpl struct {
	cc *http.Client
}

func NewPayOrderHTTPClient(client *http.Client) PayOrderHTTPClient {
	return &PayOrderHTTPClientImpl{client}
}

func (c *PayOrderHTTPClientImpl) BatchDeletePayOrder(ctx context.Context, in *PayOrderBatchDeleteReq, opts ...http.CallOption) (*PayOrderDeleteReply, error) {
	var out PayOrderDeleteReply
	pattern := "/v1/pay/order"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/payorder.v1.PayOrder/BatchDeletePayOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayOrderHTTPClientImpl) CreatePayOrder(ctx context.Context, in *PayOrderCreateReq, opts ...http.CallOption) (*PayOrderCreateReply, error) {
	var out PayOrderCreateReply
	pattern := "/v1/pay/order"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/payorder.v1.PayOrder/CreatePayOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayOrderHTTPClientImpl) DeletePayOrder(ctx context.Context, in *PayOrderDeleteReq, opts ...http.CallOption) (*PayOrderDeleteReply, error) {
	var out PayOrderDeleteReply
	pattern := "/v1/pay/order/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/payorder.v1.PayOrder/DeletePayOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayOrderHTTPClientImpl) GetPagePayOrder(ctx context.Context, in *PayOrderPageReq, opts ...http.CallOption) (*PayOrderPageReply, error) {
	var out PayOrderPageReply
	pattern := "/v1/pay/order/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/payorder.v1.PayOrder/GetPagePayOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayOrderHTTPClientImpl) GetPayOrder(ctx context.Context, in *PayOrderReq, opts ...http.CallOption) (*PayOrderReply, error) {
	var out PayOrderReply
	pattern := "/v1/pay/order/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/payorder.v1.PayOrder/GetPayOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PayOrderHTTPClientImpl) UpdatePayOrder(ctx context.Context, in *PayOrderUpdateReq, opts ...http.CallOption) (*PayOrderUpdateReply, error) {
	var out PayOrderUpdateReply
	pattern := "/v1/pay/order/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/payorder.v1.PayOrder/UpdatePayOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
