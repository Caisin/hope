// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/novel_consume.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/novelconsume/v1"
	"hope/apps/novel/internal/data/ent"
)

func NovelConsumeUpdateReq2Data(v *v1.NovelConsumeUpdateReq) *ent.NovelConsume {
	if v == nil {
		return nil
	}
	return &ent.NovelConsume{
		ID:       v.Id,
		NovelId:  v.NovelId,
		Coin:     v.Coin,
		Coupon:   v.Coupon,
		Discount: v.Discount,
	}
}

func NovelConsumeData2UpdateReq(v *ent.NovelConsume) *v1.NovelConsumeUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.NovelConsumeUpdateReq{
		Id:       v.ID,
		NovelId:  v.NovelId,
		Coin:     v.Coin,
		Coupon:   v.Coupon,
		Discount: v.Discount,
	}
}

func NovelConsumeCreateReq2Data(v *v1.NovelConsumeCreateReq) *ent.NovelConsume {
	if v == nil {
		return nil
	}
	return &ent.NovelConsume{
		NovelId:  v.NovelId,
		Coin:     v.Coin,
		Coupon:   v.Coupon,
		Discount: v.Discount,
	}
}

func NovelConsumeData2CreateReq(v *ent.NovelConsume) *v1.NovelConsumeCreateReq {
	if v == nil {
		return nil
	}
	return &v1.NovelConsumeCreateReq{
		NovelId:  v.NovelId,
		Coin:     v.Coin,
		Coupon:   v.Coupon,
		Discount: v.Discount,
	}
}

func NovelConsumeReq2Data(v *v1.NovelConsumeReq) *ent.NovelConsume {
	if v == nil {
		return nil
	}
	return &ent.NovelConsume{
		NovelId:  v.NovelId,
		Coin:     v.Coin,
		Coupon:   v.Coupon,
		Discount: v.Discount,
	}
}

func NovelConsumeData2Req(v *ent.NovelConsume) *v1.NovelConsumeReq {
	if v == nil {
		return nil
	}
	return &v1.NovelConsumeReq{
		NovelId:  v.NovelId,
		Coin:     v.Coin,
		Coupon:   v.Coupon,
		Discount: v.Discount,
	}
}

func NovelConsumeReply2Data(v *v1.NovelConsumeReply) *ent.NovelConsume {
	if v == nil {
		return nil
	}
	return &ent.NovelConsume{
		ID:        v.Id,
		NovelId:   v.NovelId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Discount:  v.Discount,
		Reward:    v.Reward,
		CreatedAt: v.CreatedAt.AsTime(),
		UpdatedAt: v.UpdatedAt.AsTime(),
		CreateBy:  v.CreateBy,
		UpdateBy:  v.UpdateBy,
		TenantId:  v.TenantId,
	}
}

func NovelConsumeData2Reply(v *ent.NovelConsume) *v1.NovelConsumeReply {
	if v == nil {
		return nil
	}
	return &v1.NovelConsumeReply{
		Id:        v.ID,
		NovelId:   v.NovelId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Discount:  v.Discount,
		Reward:    v.Reward,
		CreatedAt: timestamppb.New(v.CreatedAt),
		UpdatedAt: timestamppb.New(v.UpdatedAt),
		CreateBy:  v.CreateBy,
		UpdateBy:  v.UpdateBy,
		TenantId:  v.TenantId,
	}
}

func NovelConsumeUpdateReply2Data(v *v1.NovelConsumeUpdateReply) *ent.NovelConsume {
	if v == nil {
		return nil
	}
	return &ent.NovelConsume{
		ID:       v.Id,
		NovelId:  v.NovelId,
		Coin:     v.Coin,
		Coupon:   v.Coupon,
		Discount: v.Discount,
	}
}

func NovelConsumeData2UpdateReply(v *ent.NovelConsume) *v1.NovelConsumeUpdateReply {
	if v == nil {
		return nil
	}
	return &v1.NovelConsumeUpdateReply{
		Id:       v.ID,
		NovelId:  v.NovelId,
		Coin:     v.Coin,
		Coupon:   v.Coupon,
		Discount: v.Discount,
	}
}

func NovelConsumeCreateReply2Data(v *v1.NovelConsumeCreateReply) *ent.NovelConsume {
	if v == nil {
		return nil
	}
	return &ent.NovelConsume{
		ID:        v.Id,
		NovelId:   v.NovelId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Discount:  v.Discount,
		Reward:    v.Reward,
		CreatedAt: v.CreatedAt.AsTime(),
		UpdatedAt: v.UpdatedAt.AsTime(),
		CreateBy:  v.CreateBy,
		UpdateBy:  v.UpdateBy,
		TenantId:  v.TenantId,
	}
}

func NovelConsumeData2CreateReply(v *ent.NovelConsume) *v1.NovelConsumeCreateReply {
	if v == nil {
		return nil
	}
	return &v1.NovelConsumeCreateReply{
		Id:        v.ID,
		NovelId:   v.NovelId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Discount:  v.Discount,
		Reward:    v.Reward,
		CreatedAt: timestamppb.New(v.CreatedAt),
		UpdatedAt: timestamppb.New(v.UpdatedAt),
		CreateBy:  v.CreateBy,
		UpdateBy:  v.UpdateBy,
		TenantId:  v.TenantId,
	}
}
