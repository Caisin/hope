// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/syspost"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysPost is the model entity for the SysPost schema.
type SysPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// PostName holds the value of the "postName" field.
	// 岗位名称
	PostName string `json:"postName,omitempty"`
	// PostCode holds the value of the "postCode" field.
	// 岗位代码
	PostCode string `json:"postCode,omitempty"`
	// Sort holds the value of the "sort" field.
	// 岗位排序
	Sort int32 `json:"sort,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status int32 `json:"status,omitempty"`
	// Remark holds the value of the "remark" field.
	// 描述
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysPostQuery when eager-loading is set.
	Edges SysPostEdges `json:"edges"`
}

// SysPostEdges holds the relations/edges for other nodes in the graph.
type SysPostEdges struct {
	// Users holds the value of the users edge.
	Users []*SysUser `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e SysPostEdges) UsersOrErr() ([]*SysUser, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysPost) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case syspost.FieldID, syspost.FieldSort, syspost.FieldStatus, syspost.FieldCreateBy, syspost.FieldUpdateBy, syspost.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case syspost.FieldPostName, syspost.FieldPostCode, syspost.FieldRemark:
			values[i] = new(sql.NullString)
		case syspost.FieldCreatedAt, syspost.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysPost", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysPost fields.
func (sp *SysPost) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syspost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = int64(value.Int64)
		case syspost.FieldPostName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postName", values[i])
			} else if value.Valid {
				sp.PostName = value.String
			}
		case syspost.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postCode", values[i])
			} else if value.Valid {
				sp.PostCode = value.String
			}
		case syspost.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sp.Sort = int32(value.Int64)
			}
		case syspost.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = int32(value.Int64)
			}
		case syspost.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sp.Remark = value.String
			}
		case syspost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case syspost.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case syspost.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sp.CreateBy = value.Int64
			}
		case syspost.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sp.UpdateBy = value.Int64
			}
		case syspost.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sp.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the SysPost entity.
func (sp *SysPost) QueryUsers() *SysUserQuery {
	return (&SysPostClient{config: sp.config}).QueryUsers(sp)
}

// Update returns a builder for updating this SysPost.
// Note that you need to call SysPost.Unwrap() before calling this method if this SysPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SysPost) Update() *SysPostUpdateOne {
	return (&SysPostClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the SysPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SysPost) Unwrap() *SysPost {
	tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysPost is not a transactional entity")
	}
	sp.config.driver = tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SysPost) String() string {
	var builder strings.Builder
	builder.WriteString("SysPost(")
	builder.WriteString(fmt.Sprintf("id=%v", sp.ID))
	builder.WriteString(", postName=")
	builder.WriteString(sp.PostName)
	builder.WriteString(", postCode=")
	builder.WriteString(sp.PostCode)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", sp.Sort))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", sp.Status))
	builder.WriteString(", remark=")
	builder.WriteString(sp.Remark)
	builder.WriteString(", createdAt=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sp.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sp.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sp.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysPosts is a parsable slice of SysPost.
type SysPosts []*SysPost

func (sp SysPosts) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}
