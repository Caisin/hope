// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/predicate"
	"hope/apps/param/internal/data/ent/scoreproduct"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScoreProductUpdate is the builder for updating ScoreProduct entities.
type ScoreProductUpdate struct {
	config
	hooks    []Hook
	mutation *ScoreProductMutation
}

// Where appends a list predicates to the ScoreProductUpdate builder.
func (spu *ScoreProductUpdate) Where(ps ...predicate.ScoreProduct) *ScoreProductUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetProductName sets the "productName" field.
func (spu *ScoreProductUpdate) SetProductName(s string) *ScoreProductUpdate {
	spu.mutation.SetProductName(s)
	return spu
}

// SetNillableProductName sets the "productName" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableProductName(s *string) *ScoreProductUpdate {
	if s != nil {
		spu.SetProductName(*s)
	}
	return spu
}

// ClearProductName clears the value of the "productName" field.
func (spu *ScoreProductUpdate) ClearProductName() *ScoreProductUpdate {
	spu.mutation.ClearProductName()
	return spu
}

// SetSummary sets the "summary" field.
func (spu *ScoreProductUpdate) SetSummary(s string) *ScoreProductUpdate {
	spu.mutation.SetSummary(s)
	return spu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableSummary(s *string) *ScoreProductUpdate {
	if s != nil {
		spu.SetSummary(*s)
	}
	return spu
}

// ClearSummary clears the value of the "summary" field.
func (spu *ScoreProductUpdate) ClearSummary() *ScoreProductUpdate {
	spu.mutation.ClearSummary()
	return spu
}

// SetCardUrl sets the "cardUrl" field.
func (spu *ScoreProductUpdate) SetCardUrl(s string) *ScoreProductUpdate {
	spu.mutation.SetCardUrl(s)
	return spu
}

// SetNillableCardUrl sets the "cardUrl" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableCardUrl(s *string) *ScoreProductUpdate {
	if s != nil {
		spu.SetCardUrl(*s)
	}
	return spu
}

// ClearCardUrl clears the value of the "cardUrl" field.
func (spu *ScoreProductUpdate) ClearCardUrl() *ScoreProductUpdate {
	spu.mutation.ClearCardUrl()
	return spu
}

// SetScore sets the "score" field.
func (spu *ScoreProductUpdate) SetScore(i int64) *ScoreProductUpdate {
	spu.mutation.ResetScore()
	spu.mutation.SetScore(i)
	return spu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableScore(i *int64) *ScoreProductUpdate {
	if i != nil {
		spu.SetScore(*i)
	}
	return spu
}

// AddScore adds i to the "score" field.
func (spu *ScoreProductUpdate) AddScore(i int64) *ScoreProductUpdate {
	spu.mutation.AddScore(i)
	return spu
}

// ClearScore clears the value of the "score" field.
func (spu *ScoreProductUpdate) ClearScore() *ScoreProductUpdate {
	spu.mutation.ClearScore()
	return spu
}

// SetVipType sets the "vipType" field.
func (spu *ScoreProductUpdate) SetVipType(i int64) *ScoreProductUpdate {
	spu.mutation.ResetVipType()
	spu.mutation.SetVipType(i)
	return spu
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableVipType(i *int64) *ScoreProductUpdate {
	if i != nil {
		spu.SetVipType(*i)
	}
	return spu
}

// AddVipType adds i to the "vipType" field.
func (spu *ScoreProductUpdate) AddVipType(i int64) *ScoreProductUpdate {
	spu.mutation.AddVipType(i)
	return spu
}

// ClearVipType clears the value of the "vipType" field.
func (spu *ScoreProductUpdate) ClearVipType() *ScoreProductUpdate {
	spu.mutation.ClearVipType()
	return spu
}

// SetEffectTime sets the "effectTime" field.
func (spu *ScoreProductUpdate) SetEffectTime(t time.Time) *ScoreProductUpdate {
	spu.mutation.SetEffectTime(t)
	return spu
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableEffectTime(t *time.Time) *ScoreProductUpdate {
	if t != nil {
		spu.SetEffectTime(*t)
	}
	return spu
}

// SetExpiredTime sets the "expiredTime" field.
func (spu *ScoreProductUpdate) SetExpiredTime(t time.Time) *ScoreProductUpdate {
	spu.mutation.SetExpiredTime(t)
	return spu
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableExpiredTime(t *time.Time) *ScoreProductUpdate {
	if t != nil {
		spu.SetExpiredTime(*t)
	}
	return spu
}

// SetUpdatedAt sets the "updatedAt" field.
func (spu *ScoreProductUpdate) SetUpdatedAt(t time.Time) *ScoreProductUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetCreateBy sets the "createBy" field.
func (spu *ScoreProductUpdate) SetCreateBy(i int64) *ScoreProductUpdate {
	spu.mutation.ResetCreateBy()
	spu.mutation.SetCreateBy(i)
	return spu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableCreateBy(i *int64) *ScoreProductUpdate {
	if i != nil {
		spu.SetCreateBy(*i)
	}
	return spu
}

// AddCreateBy adds i to the "createBy" field.
func (spu *ScoreProductUpdate) AddCreateBy(i int64) *ScoreProductUpdate {
	spu.mutation.AddCreateBy(i)
	return spu
}

// SetUpdateBy sets the "updateBy" field.
func (spu *ScoreProductUpdate) SetUpdateBy(i int64) *ScoreProductUpdate {
	spu.mutation.ResetUpdateBy()
	spu.mutation.SetUpdateBy(i)
	return spu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableUpdateBy(i *int64) *ScoreProductUpdate {
	if i != nil {
		spu.SetUpdateBy(*i)
	}
	return spu
}

// AddUpdateBy adds i to the "updateBy" field.
func (spu *ScoreProductUpdate) AddUpdateBy(i int64) *ScoreProductUpdate {
	spu.mutation.AddUpdateBy(i)
	return spu
}

// SetTenantId sets the "tenantId" field.
func (spu *ScoreProductUpdate) SetTenantId(i int64) *ScoreProductUpdate {
	spu.mutation.ResetTenantId()
	spu.mutation.SetTenantId(i)
	return spu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (spu *ScoreProductUpdate) SetNillableTenantId(i *int64) *ScoreProductUpdate {
	if i != nil {
		spu.SetTenantId(*i)
	}
	return spu
}

// AddTenantId adds i to the "tenantId" field.
func (spu *ScoreProductUpdate) AddTenantId(i int64) *ScoreProductUpdate {
	spu.mutation.AddTenantId(i)
	return spu
}

// Mutation returns the ScoreProductMutation object of the builder.
func (spu *ScoreProductUpdate) Mutation() *ScoreProductMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *ScoreProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	spu.defaults()
	if len(spu.hooks) == 0 {
		affected, err = spu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScoreProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spu.mutation = mutation
			affected, err = spu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spu.hooks) - 1; i >= 0; i-- {
			if spu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spu *ScoreProductUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *ScoreProductUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *ScoreProductUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *ScoreProductUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		v := scoreproduct.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

func (spu *ScoreProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scoreproduct.Table,
			Columns: scoreproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: scoreproduct.FieldID,
			},
		},
	}
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scoreproduct.FieldProductName,
		})
	}
	if spu.mutation.ProductNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: scoreproduct.FieldProductName,
		})
	}
	if value, ok := spu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scoreproduct.FieldSummary,
		})
	}
	if spu.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: scoreproduct.FieldSummary,
		})
	}
	if value, ok := spu.mutation.CardUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scoreproduct.FieldCardUrl,
		})
	}
	if spu.mutation.CardUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: scoreproduct.FieldCardUrl,
		})
	}
	if value, ok := spu.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldScore,
		})
	}
	if value, ok := spu.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldScore,
		})
	}
	if spu.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: scoreproduct.FieldScore,
		})
	}
	if value, ok := spu.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldVipType,
		})
	}
	if value, ok := spu.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldVipType,
		})
	}
	if spu.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: scoreproduct.FieldVipType,
		})
	}
	if value, ok := spu.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scoreproduct.FieldEffectTime,
		})
	}
	if value, ok := spu.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scoreproduct.FieldExpiredTime,
		})
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scoreproduct.FieldUpdatedAt,
		})
	}
	if value, ok := spu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldCreateBy,
		})
	}
	if value, ok := spu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldCreateBy,
		})
	}
	if value, ok := spu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldUpdateBy,
		})
	}
	if value, ok := spu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldUpdateBy,
		})
	}
	if value, ok := spu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldTenantId,
		})
	}
	if value, ok := spu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scoreproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ScoreProductUpdateOne is the builder for updating a single ScoreProduct entity.
type ScoreProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScoreProductMutation
}

// SetProductName sets the "productName" field.
func (spuo *ScoreProductUpdateOne) SetProductName(s string) *ScoreProductUpdateOne {
	spuo.mutation.SetProductName(s)
	return spuo
}

// SetNillableProductName sets the "productName" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableProductName(s *string) *ScoreProductUpdateOne {
	if s != nil {
		spuo.SetProductName(*s)
	}
	return spuo
}

// ClearProductName clears the value of the "productName" field.
func (spuo *ScoreProductUpdateOne) ClearProductName() *ScoreProductUpdateOne {
	spuo.mutation.ClearProductName()
	return spuo
}

// SetSummary sets the "summary" field.
func (spuo *ScoreProductUpdateOne) SetSummary(s string) *ScoreProductUpdateOne {
	spuo.mutation.SetSummary(s)
	return spuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableSummary(s *string) *ScoreProductUpdateOne {
	if s != nil {
		spuo.SetSummary(*s)
	}
	return spuo
}

// ClearSummary clears the value of the "summary" field.
func (spuo *ScoreProductUpdateOne) ClearSummary() *ScoreProductUpdateOne {
	spuo.mutation.ClearSummary()
	return spuo
}

// SetCardUrl sets the "cardUrl" field.
func (spuo *ScoreProductUpdateOne) SetCardUrl(s string) *ScoreProductUpdateOne {
	spuo.mutation.SetCardUrl(s)
	return spuo
}

// SetNillableCardUrl sets the "cardUrl" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableCardUrl(s *string) *ScoreProductUpdateOne {
	if s != nil {
		spuo.SetCardUrl(*s)
	}
	return spuo
}

// ClearCardUrl clears the value of the "cardUrl" field.
func (spuo *ScoreProductUpdateOne) ClearCardUrl() *ScoreProductUpdateOne {
	spuo.mutation.ClearCardUrl()
	return spuo
}

// SetScore sets the "score" field.
func (spuo *ScoreProductUpdateOne) SetScore(i int64) *ScoreProductUpdateOne {
	spuo.mutation.ResetScore()
	spuo.mutation.SetScore(i)
	return spuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableScore(i *int64) *ScoreProductUpdateOne {
	if i != nil {
		spuo.SetScore(*i)
	}
	return spuo
}

// AddScore adds i to the "score" field.
func (spuo *ScoreProductUpdateOne) AddScore(i int64) *ScoreProductUpdateOne {
	spuo.mutation.AddScore(i)
	return spuo
}

// ClearScore clears the value of the "score" field.
func (spuo *ScoreProductUpdateOne) ClearScore() *ScoreProductUpdateOne {
	spuo.mutation.ClearScore()
	return spuo
}

// SetVipType sets the "vipType" field.
func (spuo *ScoreProductUpdateOne) SetVipType(i int64) *ScoreProductUpdateOne {
	spuo.mutation.ResetVipType()
	spuo.mutation.SetVipType(i)
	return spuo
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableVipType(i *int64) *ScoreProductUpdateOne {
	if i != nil {
		spuo.SetVipType(*i)
	}
	return spuo
}

// AddVipType adds i to the "vipType" field.
func (spuo *ScoreProductUpdateOne) AddVipType(i int64) *ScoreProductUpdateOne {
	spuo.mutation.AddVipType(i)
	return spuo
}

// ClearVipType clears the value of the "vipType" field.
func (spuo *ScoreProductUpdateOne) ClearVipType() *ScoreProductUpdateOne {
	spuo.mutation.ClearVipType()
	return spuo
}

// SetEffectTime sets the "effectTime" field.
func (spuo *ScoreProductUpdateOne) SetEffectTime(t time.Time) *ScoreProductUpdateOne {
	spuo.mutation.SetEffectTime(t)
	return spuo
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableEffectTime(t *time.Time) *ScoreProductUpdateOne {
	if t != nil {
		spuo.SetEffectTime(*t)
	}
	return spuo
}

// SetExpiredTime sets the "expiredTime" field.
func (spuo *ScoreProductUpdateOne) SetExpiredTime(t time.Time) *ScoreProductUpdateOne {
	spuo.mutation.SetExpiredTime(t)
	return spuo
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableExpiredTime(t *time.Time) *ScoreProductUpdateOne {
	if t != nil {
		spuo.SetExpiredTime(*t)
	}
	return spuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (spuo *ScoreProductUpdateOne) SetUpdatedAt(t time.Time) *ScoreProductUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetCreateBy sets the "createBy" field.
func (spuo *ScoreProductUpdateOne) SetCreateBy(i int64) *ScoreProductUpdateOne {
	spuo.mutation.ResetCreateBy()
	spuo.mutation.SetCreateBy(i)
	return spuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableCreateBy(i *int64) *ScoreProductUpdateOne {
	if i != nil {
		spuo.SetCreateBy(*i)
	}
	return spuo
}

// AddCreateBy adds i to the "createBy" field.
func (spuo *ScoreProductUpdateOne) AddCreateBy(i int64) *ScoreProductUpdateOne {
	spuo.mutation.AddCreateBy(i)
	return spuo
}

// SetUpdateBy sets the "updateBy" field.
func (spuo *ScoreProductUpdateOne) SetUpdateBy(i int64) *ScoreProductUpdateOne {
	spuo.mutation.ResetUpdateBy()
	spuo.mutation.SetUpdateBy(i)
	return spuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableUpdateBy(i *int64) *ScoreProductUpdateOne {
	if i != nil {
		spuo.SetUpdateBy(*i)
	}
	return spuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (spuo *ScoreProductUpdateOne) AddUpdateBy(i int64) *ScoreProductUpdateOne {
	spuo.mutation.AddUpdateBy(i)
	return spuo
}

// SetTenantId sets the "tenantId" field.
func (spuo *ScoreProductUpdateOne) SetTenantId(i int64) *ScoreProductUpdateOne {
	spuo.mutation.ResetTenantId()
	spuo.mutation.SetTenantId(i)
	return spuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (spuo *ScoreProductUpdateOne) SetNillableTenantId(i *int64) *ScoreProductUpdateOne {
	if i != nil {
		spuo.SetTenantId(*i)
	}
	return spuo
}

// AddTenantId adds i to the "tenantId" field.
func (spuo *ScoreProductUpdateOne) AddTenantId(i int64) *ScoreProductUpdateOne {
	spuo.mutation.AddTenantId(i)
	return spuo
}

// Mutation returns the ScoreProductMutation object of the builder.
func (spuo *ScoreProductUpdateOne) Mutation() *ScoreProductMutation {
	return spuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *ScoreProductUpdateOne) Select(field string, fields ...string) *ScoreProductUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated ScoreProduct entity.
func (spuo *ScoreProductUpdateOne) Save(ctx context.Context) (*ScoreProduct, error) {
	var (
		err  error
		node *ScoreProduct
	)
	spuo.defaults()
	if len(spuo.hooks) == 0 {
		node, err = spuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScoreProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spuo.mutation = mutation
			node, err = spuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spuo.hooks) - 1; i >= 0; i-- {
			if spuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *ScoreProductUpdateOne) SaveX(ctx context.Context) *ScoreProduct {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *ScoreProductUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *ScoreProductUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *ScoreProductUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		v := scoreproduct.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

func (spuo *ScoreProductUpdateOne) sqlSave(ctx context.Context) (_node *ScoreProduct, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scoreproduct.Table,
			Columns: scoreproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: scoreproduct.FieldID,
			},
		},
	}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScoreProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scoreproduct.FieldID)
		for _, f := range fields {
			if !scoreproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scoreproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scoreproduct.FieldProductName,
		})
	}
	if spuo.mutation.ProductNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: scoreproduct.FieldProductName,
		})
	}
	if value, ok := spuo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scoreproduct.FieldSummary,
		})
	}
	if spuo.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: scoreproduct.FieldSummary,
		})
	}
	if value, ok := spuo.mutation.CardUrl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scoreproduct.FieldCardUrl,
		})
	}
	if spuo.mutation.CardUrlCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: scoreproduct.FieldCardUrl,
		})
	}
	if value, ok := spuo.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldScore,
		})
	}
	if value, ok := spuo.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldScore,
		})
	}
	if spuo.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: scoreproduct.FieldScore,
		})
	}
	if value, ok := spuo.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldVipType,
		})
	}
	if value, ok := spuo.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldVipType,
		})
	}
	if spuo.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: scoreproduct.FieldVipType,
		})
	}
	if value, ok := spuo.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scoreproduct.FieldEffectTime,
		})
	}
	if value, ok := spuo.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scoreproduct.FieldExpiredTime,
		})
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scoreproduct.FieldUpdatedAt,
		})
	}
	if value, ok := spuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldCreateBy,
		})
	}
	if value, ok := spuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldCreateBy,
		})
	}
	if value, ok := spuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldUpdateBy,
		})
	}
	if value, ok := spuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldUpdateBy,
		})
	}
	if value, ok := spuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldTenantId,
		})
	}
	if value, ok := spuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: scoreproduct.FieldTenantId,
		})
	}
	_node = &ScoreProduct{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scoreproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
