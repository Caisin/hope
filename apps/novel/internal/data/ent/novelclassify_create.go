// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/novel"
	"hope/apps/novel/internal/data/ent/novelclassify"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelClassifyCreate is the builder for creating a NovelClassify entity.
type NovelClassifyCreate struct {
	config
	mutation *NovelClassifyMutation
	hooks    []Hook
}

// SetPid sets the "pid" field.
func (ncc *NovelClassifyCreate) SetPid(i int64) *NovelClassifyCreate {
	ncc.mutation.SetPid(i)
	return ncc
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillablePid(i *int64) *NovelClassifyCreate {
	if i != nil {
		ncc.SetPid(*i)
	}
	return ncc
}

// SetClassifyName sets the "classifyName" field.
func (ncc *NovelClassifyCreate) SetClassifyName(s string) *NovelClassifyCreate {
	ncc.mutation.SetClassifyName(s)
	return ncc
}

// SetNillableClassifyName sets the "classifyName" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillableClassifyName(s *string) *NovelClassifyCreate {
	if s != nil {
		ncc.SetClassifyName(*s)
	}
	return ncc
}

// SetStatus sets the "status" field.
func (ncc *NovelClassifyCreate) SetStatus(i int32) *NovelClassifyCreate {
	ncc.mutation.SetStatus(i)
	return ncc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillableStatus(i *int32) *NovelClassifyCreate {
	if i != nil {
		ncc.SetStatus(*i)
	}
	return ncc
}

// SetOrderNum sets the "orderNum" field.
func (ncc *NovelClassifyCreate) SetOrderNum(i int32) *NovelClassifyCreate {
	ncc.mutation.SetOrderNum(i)
	return ncc
}

// SetNillableOrderNum sets the "orderNum" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillableOrderNum(i *int32) *NovelClassifyCreate {
	if i != nil {
		ncc.SetOrderNum(*i)
	}
	return ncc
}

// SetRemark sets the "remark" field.
func (ncc *NovelClassifyCreate) SetRemark(s string) *NovelClassifyCreate {
	ncc.mutation.SetRemark(s)
	return ncc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillableRemark(s *string) *NovelClassifyCreate {
	if s != nil {
		ncc.SetRemark(*s)
	}
	return ncc
}

// SetCreatedAt sets the "createdAt" field.
func (ncc *NovelClassifyCreate) SetCreatedAt(t time.Time) *NovelClassifyCreate {
	ncc.mutation.SetCreatedAt(t)
	return ncc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillableCreatedAt(t *time.Time) *NovelClassifyCreate {
	if t != nil {
		ncc.SetCreatedAt(*t)
	}
	return ncc
}

// SetUpdatedAt sets the "updatedAt" field.
func (ncc *NovelClassifyCreate) SetUpdatedAt(t time.Time) *NovelClassifyCreate {
	ncc.mutation.SetUpdatedAt(t)
	return ncc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillableUpdatedAt(t *time.Time) *NovelClassifyCreate {
	if t != nil {
		ncc.SetUpdatedAt(*t)
	}
	return ncc
}

// SetCreateBy sets the "createBy" field.
func (ncc *NovelClassifyCreate) SetCreateBy(i int64) *NovelClassifyCreate {
	ncc.mutation.SetCreateBy(i)
	return ncc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillableCreateBy(i *int64) *NovelClassifyCreate {
	if i != nil {
		ncc.SetCreateBy(*i)
	}
	return ncc
}

// SetUpdateBy sets the "updateBy" field.
func (ncc *NovelClassifyCreate) SetUpdateBy(i int64) *NovelClassifyCreate {
	ncc.mutation.SetUpdateBy(i)
	return ncc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillableUpdateBy(i *int64) *NovelClassifyCreate {
	if i != nil {
		ncc.SetUpdateBy(*i)
	}
	return ncc
}

// SetTenantId sets the "tenantId" field.
func (ncc *NovelClassifyCreate) SetTenantId(i int64) *NovelClassifyCreate {
	ncc.mutation.SetTenantId(i)
	return ncc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ncc *NovelClassifyCreate) SetNillableTenantId(i *int64) *NovelClassifyCreate {
	if i != nil {
		ncc.SetTenantId(*i)
	}
	return ncc
}

// AddNovelIDs adds the "novels" edge to the Novel entity by IDs.
func (ncc *NovelClassifyCreate) AddNovelIDs(ids ...int64) *NovelClassifyCreate {
	ncc.mutation.AddNovelIDs(ids...)
	return ncc
}

// AddNovels adds the "novels" edges to the Novel entity.
func (ncc *NovelClassifyCreate) AddNovels(n ...*Novel) *NovelClassifyCreate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncc.AddNovelIDs(ids...)
}

// Mutation returns the NovelClassifyMutation object of the builder.
func (ncc *NovelClassifyCreate) Mutation() *NovelClassifyMutation {
	return ncc.mutation
}

// Save creates the NovelClassify in the database.
func (ncc *NovelClassifyCreate) Save(ctx context.Context) (*NovelClassify, error) {
	var (
		err  error
		node *NovelClassify
	)
	ncc.defaults()
	if len(ncc.hooks) == 0 {
		if err = ncc.check(); err != nil {
			return nil, err
		}
		node, err = ncc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelClassifyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ncc.check(); err != nil {
				return nil, err
			}
			ncc.mutation = mutation
			if node, err = ncc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ncc.hooks) - 1; i >= 0; i-- {
			if ncc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NovelClassifyCreate) SaveX(ctx context.Context) *NovelClassify {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NovelClassifyCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NovelClassifyCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncc *NovelClassifyCreate) defaults() {
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		v := novelclassify.DefaultCreatedAt()
		ncc.mutation.SetCreatedAt(v)
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		v := novelclassify.DefaultUpdatedAt()
		ncc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ncc.mutation.CreateBy(); !ok {
		v := novelclassify.DefaultCreateBy
		ncc.mutation.SetCreateBy(v)
	}
	if _, ok := ncc.mutation.UpdateBy(); !ok {
		v := novelclassify.DefaultUpdateBy
		ncc.mutation.SetUpdateBy(v)
	}
	if _, ok := ncc.mutation.TenantId(); !ok {
		v := novelclassify.DefaultTenantId
		ncc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NovelClassifyCreate) check() error {
	if _, ok := ncc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := ncc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := ncc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := ncc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (ncc *NovelClassifyCreate) sqlSave(ctx context.Context) (*NovelClassify, error) {
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ncc *NovelClassifyCreate) createSpec() (*NovelClassify, *sqlgraph.CreateSpec) {
	var (
		_node = &NovelClassify{config: ncc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: novelclassify.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelclassify.FieldID,
			},
		}
	)
	if value, ok := ncc.mutation.Pid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldPid,
		})
		_node.Pid = value
	}
	if value, ok := ncc.mutation.ClassifyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclassify.FieldClassifyName,
		})
		_node.ClassifyName = value
	}
	if value, ok := ncc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ncc.mutation.OrderNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldOrderNum,
		})
		_node.OrderNum = value
	}
	if value, ok := ncc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclassify.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ncc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelclassify.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ncc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelclassify.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ncc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := ncc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := ncc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := ncc.mutation.NovelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelclassify.NovelsTable,
			Columns: []string{novelclassify.NovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NovelClassifyCreateBulk is the builder for creating many NovelClassify entities in bulk.
type NovelClassifyCreateBulk struct {
	config
	builders []*NovelClassifyCreate
}

// Save creates the NovelClassify entities in the database.
func (nccb *NovelClassifyCreateBulk) Save(ctx context.Context) ([]*NovelClassify, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NovelClassify, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NovelClassifyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NovelClassifyCreateBulk) SaveX(ctx context.Context) []*NovelClassify {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NovelClassifyCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NovelClassifyCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}
