// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/sysapi/v1/sys_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysApiClient is the client API for SysApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysApiClient interface {
	// 分页查询SysApi
	GetSysApiPage(ctx context.Context, in *SysApiPageReq, opts ...grpc.CallOption) (*SysApiPageReply, error)
	// 获取SysApi
	GetSysApi(ctx context.Context, in *SysApiReq, opts ...grpc.CallOption) (*SysApiReply, error)
	// 更新SysApi
	UpdateSysApi(ctx context.Context, in *SysApiUpdateReq, opts ...grpc.CallOption) (*SysApiUpdateReply, error)
	// 创建SysApi
	CreateSysApi(ctx context.Context, in *SysApiCreateReq, opts ...grpc.CallOption) (*SysApiCreateReply, error)
	// 删除SysApi
	DeleteSysApi(ctx context.Context, in *SysApiDeleteReq, opts ...grpc.CallOption) (*SysApiDeleteReply, error)
	// 批量删除SysApi
	BatchDeleteSysApi(ctx context.Context, in *SysApiBatchDeleteReq, opts ...grpc.CallOption) (*SysApiDeleteReply, error)
}

type sysApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSysApiClient(cc grpc.ClientConnInterface) SysApiClient {
	return &sysApiClient{cc}
}

func (c *sysApiClient) GetSysApiPage(ctx context.Context, in *SysApiPageReq, opts ...grpc.CallOption) (*SysApiPageReply, error) {
	out := new(SysApiPageReply)
	err := c.cc.Invoke(ctx, "/sysapi.v1.SysApi/GetSysApiPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysApiClient) GetSysApi(ctx context.Context, in *SysApiReq, opts ...grpc.CallOption) (*SysApiReply, error) {
	out := new(SysApiReply)
	err := c.cc.Invoke(ctx, "/sysapi.v1.SysApi/GetSysApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysApiClient) UpdateSysApi(ctx context.Context, in *SysApiUpdateReq, opts ...grpc.CallOption) (*SysApiUpdateReply, error) {
	out := new(SysApiUpdateReply)
	err := c.cc.Invoke(ctx, "/sysapi.v1.SysApi/UpdateSysApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysApiClient) CreateSysApi(ctx context.Context, in *SysApiCreateReq, opts ...grpc.CallOption) (*SysApiCreateReply, error) {
	out := new(SysApiCreateReply)
	err := c.cc.Invoke(ctx, "/sysapi.v1.SysApi/CreateSysApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysApiClient) DeleteSysApi(ctx context.Context, in *SysApiDeleteReq, opts ...grpc.CallOption) (*SysApiDeleteReply, error) {
	out := new(SysApiDeleteReply)
	err := c.cc.Invoke(ctx, "/sysapi.v1.SysApi/DeleteSysApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysApiClient) BatchDeleteSysApi(ctx context.Context, in *SysApiBatchDeleteReq, opts ...grpc.CallOption) (*SysApiDeleteReply, error) {
	out := new(SysApiDeleteReply)
	err := c.cc.Invoke(ctx, "/sysapi.v1.SysApi/BatchDeleteSysApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysApiServer is the server API for SysApi service.
// All implementations must embed UnimplementedSysApiServer
// for forward compatibility
type SysApiServer interface {
	// 分页查询SysApi
	GetSysApiPage(context.Context, *SysApiPageReq) (*SysApiPageReply, error)
	// 获取SysApi
	GetSysApi(context.Context, *SysApiReq) (*SysApiReply, error)
	// 更新SysApi
	UpdateSysApi(context.Context, *SysApiUpdateReq) (*SysApiUpdateReply, error)
	// 创建SysApi
	CreateSysApi(context.Context, *SysApiCreateReq) (*SysApiCreateReply, error)
	// 删除SysApi
	DeleteSysApi(context.Context, *SysApiDeleteReq) (*SysApiDeleteReply, error)
	// 批量删除SysApi
	BatchDeleteSysApi(context.Context, *SysApiBatchDeleteReq) (*SysApiDeleteReply, error)
	mustEmbedUnimplementedSysApiServer()
}

// UnimplementedSysApiServer must be embedded to have forward compatible implementations.
type UnimplementedSysApiServer struct {
}

func (UnimplementedSysApiServer) GetSysApiPage(context.Context, *SysApiPageReq) (*SysApiPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysApiPage not implemented")
}
func (UnimplementedSysApiServer) GetSysApi(context.Context, *SysApiReq) (*SysApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysApi not implemented")
}
func (UnimplementedSysApiServer) UpdateSysApi(context.Context, *SysApiUpdateReq) (*SysApiUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysApi not implemented")
}
func (UnimplementedSysApiServer) CreateSysApi(context.Context, *SysApiCreateReq) (*SysApiCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysApi not implemented")
}
func (UnimplementedSysApiServer) DeleteSysApi(context.Context, *SysApiDeleteReq) (*SysApiDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysApi not implemented")
}
func (UnimplementedSysApiServer) BatchDeleteSysApi(context.Context, *SysApiBatchDeleteReq) (*SysApiDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysApi not implemented")
}
func (UnimplementedSysApiServer) mustEmbedUnimplementedSysApiServer() {}

// UnsafeSysApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysApiServer will
// result in compilation errors.
type UnsafeSysApiServer interface {
	mustEmbedUnimplementedSysApiServer()
}

func RegisterSysApiServer(s grpc.ServiceRegistrar, srv SysApiServer) {
	s.RegisterService(&SysApi_ServiceDesc, srv)
}

func _SysApi_GetSysApiPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysApiPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysApiServer).GetSysApiPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysapi.v1.SysApi/GetSysApiPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysApiServer).GetSysApiPage(ctx, req.(*SysApiPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysApi_GetSysApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysApiServer).GetSysApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysapi.v1.SysApi/GetSysApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysApiServer).GetSysApi(ctx, req.(*SysApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysApi_UpdateSysApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysApiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysApiServer).UpdateSysApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysapi.v1.SysApi/UpdateSysApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysApiServer).UpdateSysApi(ctx, req.(*SysApiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysApi_CreateSysApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysApiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysApiServer).CreateSysApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysapi.v1.SysApi/CreateSysApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysApiServer).CreateSysApi(ctx, req.(*SysApiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysApi_DeleteSysApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysApiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysApiServer).DeleteSysApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysapi.v1.SysApi/DeleteSysApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysApiServer).DeleteSysApi(ctx, req.(*SysApiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysApi_BatchDeleteSysApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysApiBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysApiServer).BatchDeleteSysApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysapi.v1.SysApi/BatchDeleteSysApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysApiServer).BatchDeleteSysApi(ctx, req.(*SysApiBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysApi_ServiceDesc is the grpc.ServiceDesc for SysApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysapi.v1.SysApi",
	HandlerType: (*SysApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysApiPage",
			Handler:    _SysApi_GetSysApiPage_Handler,
		},
		{
			MethodName: "GetSysApi",
			Handler:    _SysApi_GetSysApi_Handler,
		},
		{
			MethodName: "UpdateSysApi",
			Handler:    _SysApi_UpdateSysApi_Handler,
		},
		{
			MethodName: "CreateSysApi",
			Handler:    _SysApi_CreateSysApi_Handler,
		},
		{
			MethodName: "DeleteSysApi",
			Handler:    _SysApi_DeleteSysApi_Handler,
		},
		{
			MethodName: "BatchDeleteSysApi",
			Handler:    _SysApi_BatchDeleteSysApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/sysapi/v1/sys_api.proto",
}
