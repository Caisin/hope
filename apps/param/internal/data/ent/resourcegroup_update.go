// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/param/internal/data/ent/predicate"
	"hope/apps/param/internal/data/ent/resourcegroup"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResourceGroupUpdate is the builder for updating ResourceGroup entities.
type ResourceGroupUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceGroupMutation
}

// Where appends a list predicates to the ResourceGroupUpdate builder.
func (rgu *ResourceGroupUpdate) Where(ps ...predicate.ResourceGroup) *ResourceGroupUpdate {
	rgu.mutation.Where(ps...)
	return rgu
}

// SetName sets the "name" field.
func (rgu *ResourceGroupUpdate) SetName(s string) *ResourceGroupUpdate {
	rgu.mutation.SetName(s)
	return rgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rgu *ResourceGroupUpdate) SetNillableName(s *string) *ResourceGroupUpdate {
	if s != nil {
		rgu.SetName(*s)
	}
	return rgu
}

// ClearName clears the value of the "name" field.
func (rgu *ResourceGroupUpdate) ClearName() *ResourceGroupUpdate {
	rgu.mutation.ClearName()
	return rgu
}

// SetUpdatedAt sets the "updatedAt" field.
func (rgu *ResourceGroupUpdate) SetUpdatedAt(t time.Time) *ResourceGroupUpdate {
	rgu.mutation.SetUpdatedAt(t)
	return rgu
}

// SetCreateBy sets the "createBy" field.
func (rgu *ResourceGroupUpdate) SetCreateBy(i int64) *ResourceGroupUpdate {
	rgu.mutation.ResetCreateBy()
	rgu.mutation.SetCreateBy(i)
	return rgu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (rgu *ResourceGroupUpdate) SetNillableCreateBy(i *int64) *ResourceGroupUpdate {
	if i != nil {
		rgu.SetCreateBy(*i)
	}
	return rgu
}

// AddCreateBy adds i to the "createBy" field.
func (rgu *ResourceGroupUpdate) AddCreateBy(i int64) *ResourceGroupUpdate {
	rgu.mutation.AddCreateBy(i)
	return rgu
}

// SetUpdateBy sets the "updateBy" field.
func (rgu *ResourceGroupUpdate) SetUpdateBy(i int64) *ResourceGroupUpdate {
	rgu.mutation.ResetUpdateBy()
	rgu.mutation.SetUpdateBy(i)
	return rgu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (rgu *ResourceGroupUpdate) SetNillableUpdateBy(i *int64) *ResourceGroupUpdate {
	if i != nil {
		rgu.SetUpdateBy(*i)
	}
	return rgu
}

// AddUpdateBy adds i to the "updateBy" field.
func (rgu *ResourceGroupUpdate) AddUpdateBy(i int64) *ResourceGroupUpdate {
	rgu.mutation.AddUpdateBy(i)
	return rgu
}

// SetTenantId sets the "tenantId" field.
func (rgu *ResourceGroupUpdate) SetTenantId(i int64) *ResourceGroupUpdate {
	rgu.mutation.ResetTenantId()
	rgu.mutation.SetTenantId(i)
	return rgu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (rgu *ResourceGroupUpdate) SetNillableTenantId(i *int64) *ResourceGroupUpdate {
	if i != nil {
		rgu.SetTenantId(*i)
	}
	return rgu
}

// AddTenantId adds i to the "tenantId" field.
func (rgu *ResourceGroupUpdate) AddTenantId(i int64) *ResourceGroupUpdate {
	rgu.mutation.AddTenantId(i)
	return rgu
}

// Mutation returns the ResourceGroupMutation object of the builder.
func (rgu *ResourceGroupUpdate) Mutation() *ResourceGroupMutation {
	return rgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rgu *ResourceGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rgu.defaults()
	if len(rgu.hooks) == 0 {
		affected, err = rgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rgu.mutation = mutation
			affected, err = rgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rgu.hooks) - 1; i >= 0; i-- {
			if rgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rgu *ResourceGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := rgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rgu *ResourceGroupUpdate) Exec(ctx context.Context) error {
	_, err := rgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rgu *ResourceGroupUpdate) ExecX(ctx context.Context) {
	if err := rgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rgu *ResourceGroupUpdate) defaults() {
	if _, ok := rgu.mutation.UpdatedAt(); !ok {
		v := resourcegroup.UpdateDefaultUpdatedAt()
		rgu.mutation.SetUpdatedAt(v)
	}
}

func (rgu *ResourceGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcegroup.Table,
			Columns: resourcegroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: resourcegroup.FieldID,
			},
		},
	}
	if ps := rgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rgu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcegroup.FieldName,
		})
	}
	if rgu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcegroup.FieldName,
		})
	}
	if value, ok := rgu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcegroup.FieldUpdatedAt,
		})
	}
	if value, ok := rgu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldCreateBy,
		})
	}
	if value, ok := rgu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldCreateBy,
		})
	}
	if value, ok := rgu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldUpdateBy,
		})
	}
	if value, ok := rgu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldUpdateBy,
		})
	}
	if value, ok := rgu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldTenantId,
		})
	}
	if value, ok := rgu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ResourceGroupUpdateOne is the builder for updating a single ResourceGroup entity.
type ResourceGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResourceGroupMutation
}

// SetName sets the "name" field.
func (rguo *ResourceGroupUpdateOne) SetName(s string) *ResourceGroupUpdateOne {
	rguo.mutation.SetName(s)
	return rguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rguo *ResourceGroupUpdateOne) SetNillableName(s *string) *ResourceGroupUpdateOne {
	if s != nil {
		rguo.SetName(*s)
	}
	return rguo
}

// ClearName clears the value of the "name" field.
func (rguo *ResourceGroupUpdateOne) ClearName() *ResourceGroupUpdateOne {
	rguo.mutation.ClearName()
	return rguo
}

// SetUpdatedAt sets the "updatedAt" field.
func (rguo *ResourceGroupUpdateOne) SetUpdatedAt(t time.Time) *ResourceGroupUpdateOne {
	rguo.mutation.SetUpdatedAt(t)
	return rguo
}

// SetCreateBy sets the "createBy" field.
func (rguo *ResourceGroupUpdateOne) SetCreateBy(i int64) *ResourceGroupUpdateOne {
	rguo.mutation.ResetCreateBy()
	rguo.mutation.SetCreateBy(i)
	return rguo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (rguo *ResourceGroupUpdateOne) SetNillableCreateBy(i *int64) *ResourceGroupUpdateOne {
	if i != nil {
		rguo.SetCreateBy(*i)
	}
	return rguo
}

// AddCreateBy adds i to the "createBy" field.
func (rguo *ResourceGroupUpdateOne) AddCreateBy(i int64) *ResourceGroupUpdateOne {
	rguo.mutation.AddCreateBy(i)
	return rguo
}

// SetUpdateBy sets the "updateBy" field.
func (rguo *ResourceGroupUpdateOne) SetUpdateBy(i int64) *ResourceGroupUpdateOne {
	rguo.mutation.ResetUpdateBy()
	rguo.mutation.SetUpdateBy(i)
	return rguo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (rguo *ResourceGroupUpdateOne) SetNillableUpdateBy(i *int64) *ResourceGroupUpdateOne {
	if i != nil {
		rguo.SetUpdateBy(*i)
	}
	return rguo
}

// AddUpdateBy adds i to the "updateBy" field.
func (rguo *ResourceGroupUpdateOne) AddUpdateBy(i int64) *ResourceGroupUpdateOne {
	rguo.mutation.AddUpdateBy(i)
	return rguo
}

// SetTenantId sets the "tenantId" field.
func (rguo *ResourceGroupUpdateOne) SetTenantId(i int64) *ResourceGroupUpdateOne {
	rguo.mutation.ResetTenantId()
	rguo.mutation.SetTenantId(i)
	return rguo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (rguo *ResourceGroupUpdateOne) SetNillableTenantId(i *int64) *ResourceGroupUpdateOne {
	if i != nil {
		rguo.SetTenantId(*i)
	}
	return rguo
}

// AddTenantId adds i to the "tenantId" field.
func (rguo *ResourceGroupUpdateOne) AddTenantId(i int64) *ResourceGroupUpdateOne {
	rguo.mutation.AddTenantId(i)
	return rguo
}

// Mutation returns the ResourceGroupMutation object of the builder.
func (rguo *ResourceGroupUpdateOne) Mutation() *ResourceGroupMutation {
	return rguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rguo *ResourceGroupUpdateOne) Select(field string, fields ...string) *ResourceGroupUpdateOne {
	rguo.fields = append([]string{field}, fields...)
	return rguo
}

// Save executes the query and returns the updated ResourceGroup entity.
func (rguo *ResourceGroupUpdateOne) Save(ctx context.Context) (*ResourceGroup, error) {
	var (
		err  error
		node *ResourceGroup
	)
	rguo.defaults()
	if len(rguo.hooks) == 0 {
		node, err = rguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rguo.mutation = mutation
			node, err = rguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rguo.hooks) - 1; i >= 0; i-- {
			if rguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rguo *ResourceGroupUpdateOne) SaveX(ctx context.Context) *ResourceGroup {
	node, err := rguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rguo *ResourceGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := rguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rguo *ResourceGroupUpdateOne) ExecX(ctx context.Context) {
	if err := rguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rguo *ResourceGroupUpdateOne) defaults() {
	if _, ok := rguo.mutation.UpdatedAt(); !ok {
		v := resourcegroup.UpdateDefaultUpdatedAt()
		rguo.mutation.SetUpdatedAt(v)
	}
}

func (rguo *ResourceGroupUpdateOne) sqlSave(ctx context.Context) (_node *ResourceGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcegroup.Table,
			Columns: resourcegroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: resourcegroup.FieldID,
			},
		},
	}
	id, ok := rguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ResourceGroup.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourcegroup.FieldID)
		for _, f := range fields {
			if !resourcegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resourcegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rguo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcegroup.FieldName,
		})
	}
	if rguo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: resourcegroup.FieldName,
		})
	}
	if value, ok := rguo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcegroup.FieldUpdatedAt,
		})
	}
	if value, ok := rguo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldCreateBy,
		})
	}
	if value, ok := rguo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldCreateBy,
		})
	}
	if value, ok := rguo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldUpdateBy,
		})
	}
	if value, ok := rguo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldUpdateBy,
		})
	}
	if value, ok := rguo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldTenantId,
		})
	}
	if value, ok := rguo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcegroup.FieldTenantId,
		})
	}
	_node = &ResourceGroup{config: rguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
