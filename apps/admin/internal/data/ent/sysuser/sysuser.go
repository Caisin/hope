// Code generated by entc, DO NOT EDIT.

package sysuser

import (
	"time"
)

const (
	// Label holds the string label denoting the sysuser type in the database.
	Label = "sys_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldNickName holds the string denoting the nickname field in the database.
	FieldNickName = "nick_name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldRoleId holds the string denoting the roleid field in the database.
	FieldRoleId = "role_id"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldExtInfo holds the string denoting the extinfo field in the database.
	FieldExtInfo = "ext_info"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeDept holds the string denoting the dept edge name in mutations.
	EdgeDept = "dept"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// EdgeLoginLogs holds the string denoting the loginlogs edge name in mutations.
	EdgeLoginLogs = "loginLogs"
	// EdgeOperaLogs holds the string denoting the operalogs edge name in mutations.
	EdgeOperaLogs = "operaLogs"
	// Table holds the table name of the sysuser in the database.
	Table = "sys_users"
	// DeptTable is the table that holds the dept relation/edge.
	DeptTable = "sys_users"
	// DeptInverseTable is the table name for the SysDept entity.
	// It exists in this package in order to avoid circular dependency with the "sysdept" package.
	DeptInverseTable = "sys_depts"
	// DeptColumn is the table column denoting the dept relation/edge.
	DeptColumn = "sys_dept_users"
	// PostTable is the table that holds the post relation/edge.
	PostTable = "sys_users"
	// PostInverseTable is the table name for the SysPost entity.
	// It exists in this package in order to avoid circular dependency with the "syspost" package.
	PostInverseTable = "sys_posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "sys_post_users"
	// LoginLogsTable is the table that holds the loginLogs relation/edge.
	LoginLogsTable = "sys_login_logs"
	// LoginLogsInverseTable is the table name for the SysLoginLog entity.
	// It exists in this package in order to avoid circular dependency with the "sysloginlog" package.
	LoginLogsInverseTable = "sys_login_logs"
	// LoginLogsColumn is the table column denoting the loginLogs relation/edge.
	LoginLogsColumn = "sys_user_login_logs"
	// OperaLogsTable is the table that holds the operaLogs relation/edge.
	OperaLogsTable = "sys_opera_logs"
	// OperaLogsInverseTable is the table name for the SysOperaLog entity.
	// It exists in this package in order to avoid circular dependency with the "sysoperalog" package.
	OperaLogsInverseTable = "sys_opera_logs"
	// OperaLogsColumn is the table column denoting the operaLogs relation/edge.
	OperaLogsColumn = "sys_user_opera_logs"
)

// Columns holds all SQL columns for sysuser fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldNickName,
	FieldPhone,
	FieldRoleId,
	FieldAvatar,
	FieldSex,
	FieldEmail,
	FieldRemark,
	FieldStatus,
	FieldExtInfo,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreateBy,
	FieldUpdateBy,
	FieldTenantId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sys_users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sys_dept_users",
	"sys_post_users",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateBy holds the default value on creation for the "createBy" field.
	DefaultCreateBy int64
	// DefaultUpdateBy holds the default value on creation for the "updateBy" field.
	DefaultUpdateBy int64
	// DefaultTenantId holds the default value on creation for the "tenantId" field.
	DefaultTenantId int64
)
