// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysdicttype"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysDictType is the model entity for the SysDictType schema.
type SysDictType struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// DictName holds the value of the "dictName" field.
	// 字典名称
	DictName string `json:"dictName,omitempty"`
	// DictType holds the value of the "dictType" field.
	// 字典类型
	DictType string `json:"dictType,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status int32 `json:"status,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysDictTypeQuery when eager-loading is set.
	Edges SysDictTypeEdges `json:"edges"`
}

// SysDictTypeEdges holds the relations/edges for other nodes in the graph.
type SysDictTypeEdges struct {
	// DataList holds the value of the dataList edge.
	DataList []*SysDictData `json:"dataList,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DataListOrErr returns the DataList value or an error if the edge
// was not loaded in eager-loading.
func (e SysDictTypeEdges) DataListOrErr() ([]*SysDictData, error) {
	if e.loadedTypes[0] {
		return e.DataList, nil
	}
	return nil, &NotLoadedError{edge: "dataList"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysDictType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysdicttype.FieldID, sysdicttype.FieldStatus, sysdicttype.FieldCreateBy, sysdicttype.FieldUpdateBy, sysdicttype.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysdicttype.FieldDictName, sysdicttype.FieldDictType, sysdicttype.FieldRemark:
			values[i] = new(sql.NullString)
		case sysdicttype.FieldCreatedAt, sysdicttype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysDictType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysDictType fields.
func (sdt *SysDictType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysdicttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sdt.ID = int64(value.Int64)
		case sysdicttype.FieldDictName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dictName", values[i])
			} else if value.Valid {
				sdt.DictName = value.String
			}
		case sysdicttype.FieldDictType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dictType", values[i])
			} else if value.Valid {
				sdt.DictType = value.String
			}
		case sysdicttype.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sdt.Status = int32(value.Int64)
			}
		case sysdicttype.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sdt.Remark = value.String
			}
		case sysdicttype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sdt.CreatedAt = value.Time
			}
		case sysdicttype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sdt.UpdatedAt = value.Time
			}
		case sysdicttype.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sdt.CreateBy = value.Int64
			}
		case sysdicttype.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sdt.UpdateBy = value.Int64
			}
		case sysdicttype.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sdt.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryDataList queries the "dataList" edge of the SysDictType entity.
func (sdt *SysDictType) QueryDataList() *SysDictDataQuery {
	return (&SysDictTypeClient{config: sdt.config}).QueryDataList(sdt)
}

// Update returns a builder for updating this SysDictType.
// Note that you need to call SysDictType.Unwrap() before calling this method if this SysDictType
// was returned from a transaction, and the transaction was committed or rolled back.
func (sdt *SysDictType) Update() *SysDictTypeUpdateOne {
	return (&SysDictTypeClient{config: sdt.config}).UpdateOne(sdt)
}

// Unwrap unwraps the SysDictType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sdt *SysDictType) Unwrap() *SysDictType {
	tx, ok := sdt.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysDictType is not a transactional entity")
	}
	sdt.config.driver = tx.drv
	return sdt
}

// String implements the fmt.Stringer.
func (sdt *SysDictType) String() string {
	var builder strings.Builder
	builder.WriteString("SysDictType(")
	builder.WriteString(fmt.Sprintf("id=%v", sdt.ID))
	builder.WriteString(", dictName=")
	builder.WriteString(sdt.DictName)
	builder.WriteString(", dictType=")
	builder.WriteString(sdt.DictType)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", sdt.Status))
	builder.WriteString(", remark=")
	builder.WriteString(sdt.Remark)
	builder.WriteString(", createdAt=")
	builder.WriteString(sdt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sdt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sdt.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sdt.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sdt.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysDictTypes is a parsable slice of SysDictType.
type SysDictTypes []*SysDictType

func (sdt SysDictTypes) config(cfg config) {
	for _i := range sdt {
		sdt[_i].config = cfg
	}
}
