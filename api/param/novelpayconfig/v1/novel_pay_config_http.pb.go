// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type NovelPayConfigHTTPServer interface {
	BatchDeleteNovelPayConfig(context.Context, *NovelPayConfigBatchDeleteReq) (*NovelPayConfigDeleteReply, error)
	CreateNovelPayConfig(context.Context, *NovelPayConfigCreateReq) (*NovelPayConfigCreateReply, error)
	DeleteNovelPayConfig(context.Context, *NovelPayConfigDeleteReq) (*NovelPayConfigDeleteReply, error)
	GetNovelPayConfig(context.Context, *NovelPayConfigReq) (*NovelPayConfigReply, error)
	GetPageNovelPayConfig(context.Context, *NovelPayConfigPageReq) (*NovelPayConfigPageReply, error)
	UpdateNovelPayConfig(context.Context, *NovelPayConfigUpdateReq) (*NovelPayConfigUpdateReply, error)
}

func RegisterNovelPayConfigHTTPServer(s *http.Server, srv NovelPayConfigHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/novelpayconfig/page", _NovelPayConfig_GetPageNovelPayConfig0_HTTP_Handler(srv))
	r.GET("/v1/novelpayconfig/{id}", _NovelPayConfig_GetNovelPayConfig0_HTTP_Handler(srv))
	r.PUT("/v1/novelpayconfig/{id}", _NovelPayConfig_UpdateNovelPayConfig0_HTTP_Handler(srv))
	r.POST("/v1/novelpayconfig", _NovelPayConfig_CreateNovelPayConfig0_HTTP_Handler(srv))
	r.DELETE("/v1/novelpayconfig/{id}", _NovelPayConfig_DeleteNovelPayConfig0_HTTP_Handler(srv))
	r.DELETE("/v1/novelpayconfig", _NovelPayConfig_BatchDeleteNovelPayConfig0_HTTP_Handler(srv))
}

func _NovelPayConfig_GetPageNovelPayConfig0_HTTP_Handler(srv NovelPayConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelPayConfigPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelpayconfig.v1.NovelPayConfig/GetPageNovelPayConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageNovelPayConfig(ctx, req.(*NovelPayConfigPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelPayConfigPageReply)
		return ctx.Result(200, reply)
	}
}

func _NovelPayConfig_GetNovelPayConfig0_HTTP_Handler(srv NovelPayConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelPayConfigReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelpayconfig.v1.NovelPayConfig/GetNovelPayConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNovelPayConfig(ctx, req.(*NovelPayConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelPayConfigReply)
		return ctx.Result(200, reply)
	}
}

func _NovelPayConfig_UpdateNovelPayConfig0_HTTP_Handler(srv NovelPayConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelPayConfigUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelpayconfig.v1.NovelPayConfig/UpdateNovelPayConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNovelPayConfig(ctx, req.(*NovelPayConfigUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelPayConfigUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _NovelPayConfig_CreateNovelPayConfig0_HTTP_Handler(srv NovelPayConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelPayConfigCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelpayconfig.v1.NovelPayConfig/CreateNovelPayConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNovelPayConfig(ctx, req.(*NovelPayConfigCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelPayConfigCreateReply)
		return ctx.Result(200, reply)
	}
}

func _NovelPayConfig_DeleteNovelPayConfig0_HTTP_Handler(srv NovelPayConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelPayConfigDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelpayconfig.v1.NovelPayConfig/DeleteNovelPayConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNovelPayConfig(ctx, req.(*NovelPayConfigDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelPayConfigDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _NovelPayConfig_BatchDeleteNovelPayConfig0_HTTP_Handler(srv NovelPayConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelPayConfigBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelpayconfig.v1.NovelPayConfig/BatchDeleteNovelPayConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteNovelPayConfig(ctx, req.(*NovelPayConfigBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelPayConfigDeleteReply)
		return ctx.Result(200, reply)
	}
}

type NovelPayConfigHTTPClient interface {
	BatchDeleteNovelPayConfig(ctx context.Context, req *NovelPayConfigBatchDeleteReq, opts ...http.CallOption) (rsp *NovelPayConfigDeleteReply, err error)
	CreateNovelPayConfig(ctx context.Context, req *NovelPayConfigCreateReq, opts ...http.CallOption) (rsp *NovelPayConfigCreateReply, err error)
	DeleteNovelPayConfig(ctx context.Context, req *NovelPayConfigDeleteReq, opts ...http.CallOption) (rsp *NovelPayConfigDeleteReply, err error)
	GetNovelPayConfig(ctx context.Context, req *NovelPayConfigReq, opts ...http.CallOption) (rsp *NovelPayConfigReply, err error)
	GetPageNovelPayConfig(ctx context.Context, req *NovelPayConfigPageReq, opts ...http.CallOption) (rsp *NovelPayConfigPageReply, err error)
	UpdateNovelPayConfig(ctx context.Context, req *NovelPayConfigUpdateReq, opts ...http.CallOption) (rsp *NovelPayConfigUpdateReply, err error)
}

type NovelPayConfigHTTPClientImpl struct {
	cc *http.Client
}

func NewNovelPayConfigHTTPClient(client *http.Client) NovelPayConfigHTTPClient {
	return &NovelPayConfigHTTPClientImpl{client}
}

func (c *NovelPayConfigHTTPClientImpl) BatchDeleteNovelPayConfig(ctx context.Context, in *NovelPayConfigBatchDeleteReq, opts ...http.CallOption) (*NovelPayConfigDeleteReply, error) {
	var out NovelPayConfigDeleteReply
	pattern := "/v1/novelpayconfig"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelpayconfig.v1.NovelPayConfig/BatchDeleteNovelPayConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelPayConfigHTTPClientImpl) CreateNovelPayConfig(ctx context.Context, in *NovelPayConfigCreateReq, opts ...http.CallOption) (*NovelPayConfigCreateReply, error) {
	var out NovelPayConfigCreateReply
	pattern := "/v1/novelpayconfig"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/novelpayconfig.v1.NovelPayConfig/CreateNovelPayConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelPayConfigHTTPClientImpl) DeleteNovelPayConfig(ctx context.Context, in *NovelPayConfigDeleteReq, opts ...http.CallOption) (*NovelPayConfigDeleteReply, error) {
	var out NovelPayConfigDeleteReply
	pattern := "/v1/novelpayconfig/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelpayconfig.v1.NovelPayConfig/DeleteNovelPayConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelPayConfigHTTPClientImpl) GetNovelPayConfig(ctx context.Context, in *NovelPayConfigReq, opts ...http.CallOption) (*NovelPayConfigReply, error) {
	var out NovelPayConfigReply
	pattern := "/v1/novelpayconfig/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelpayconfig.v1.NovelPayConfig/GetNovelPayConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelPayConfigHTTPClientImpl) GetPageNovelPayConfig(ctx context.Context, in *NovelPayConfigPageReq, opts ...http.CallOption) (*NovelPayConfigPageReply, error) {
	var out NovelPayConfigPageReply
	pattern := "/v1/novelpayconfig/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelpayconfig.v1.NovelPayConfig/GetPageNovelPayConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelPayConfigHTTPClientImpl) UpdateNovelPayConfig(ctx context.Context, in *NovelPayConfigUpdateReq, opts ...http.CallOption) (*NovelPayConfigUpdateReply, error) {
	var out NovelPayConfigUpdateReply
	pattern := "/v1/novelpayconfig/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/novelpayconfig.v1.NovelPayConfig/UpdateNovelPayConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
