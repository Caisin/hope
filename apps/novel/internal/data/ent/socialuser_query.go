// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/adchangelog"
	"hope/apps/novel/internal/data/ent/adchannel"
	"hope/apps/novel/internal/data/ent/ambalance"
	"hope/apps/novel/internal/data/ent/assetchangelog"
	"hope/apps/novel/internal/data/ent/listenrecord"
	"hope/apps/novel/internal/data/ent/novelautobuy"
	"hope/apps/novel/internal/data/ent/novelbookshelf"
	"hope/apps/novel/internal/data/ent/novelbuychapterrecord"
	"hope/apps/novel/internal/data/ent/novelbuyrecord"
	"hope/apps/novel/internal/data/ent/novelcomment"
	"hope/apps/novel/internal/data/ent/payorder"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/tasklog"
	"hope/apps/novel/internal/data/ent/userevent"
	"hope/apps/novel/internal/data/ent/usermsg"
	"hope/apps/novel/internal/data/ent/vipuser"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SocialUserQuery is the builder for querying SocialUser entities.
type SocialUserQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SocialUser
	// eager-loading edges.
	withTasks             *TaskLogQuery
	withEvents            *UserEventQuery
	withListenRecords     *ListenRecordQuery
	withAds               *AdChangeLogQuery
	withBookshelves       *NovelBookshelfQuery
	withAutoBuyNovels     *NovelAutoBuyQuery
	withComments          *NovelCommentQuery
	withMsgs              *UserMsgQuery
	withOrders            *PayOrderQuery
	withVips              *VipUserQuery
	withBalances          *AmBalanceQuery
	withAssetLogs         *AssetChangeLogQuery
	withBuyChapterRecords *NovelBuyChapterRecordQuery
	withBuyNovelRecords   *NovelBuyRecordQuery
	withChannel           *AdChannelQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SocialUserQuery builder.
func (suq *SocialUserQuery) Where(ps ...predicate.SocialUser) *SocialUserQuery {
	suq.predicates = append(suq.predicates, ps...)
	return suq
}

// Limit adds a limit step to the query.
func (suq *SocialUserQuery) Limit(limit int) *SocialUserQuery {
	suq.limit = &limit
	return suq
}

// Offset adds an offset step to the query.
func (suq *SocialUserQuery) Offset(offset int) *SocialUserQuery {
	suq.offset = &offset
	return suq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (suq *SocialUserQuery) Unique(unique bool) *SocialUserQuery {
	suq.unique = &unique
	return suq
}

// Order adds an order step to the query.
func (suq *SocialUserQuery) Order(o ...OrderFunc) *SocialUserQuery {
	suq.order = append(suq.order, o...)
	return suq
}

// QueryTasks chains the current query on the "tasks" edge.
func (suq *SocialUserQuery) QueryTasks() *TaskLogQuery {
	query := &TaskLogQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(tasklog.Table, tasklog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.TasksTable, socialuser.TasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (suq *SocialUserQuery) QueryEvents() *UserEventQuery {
	query := &UserEventQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(userevent.Table, userevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.EventsTable, socialuser.EventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryListenRecords chains the current query on the "listenRecords" edge.
func (suq *SocialUserQuery) QueryListenRecords() *ListenRecordQuery {
	query := &ListenRecordQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(listenrecord.Table, listenrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.ListenRecordsTable, socialuser.ListenRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAds chains the current query on the "ads" edge.
func (suq *SocialUserQuery) QueryAds() *AdChangeLogQuery {
	query := &AdChangeLogQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(adchangelog.Table, adchangelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.AdsTable, socialuser.AdsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBookshelves chains the current query on the "bookshelves" edge.
func (suq *SocialUserQuery) QueryBookshelves() *NovelBookshelfQuery {
	query := &NovelBookshelfQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(novelbookshelf.Table, novelbookshelf.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.BookshelvesTable, socialuser.BookshelvesColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAutoBuyNovels chains the current query on the "autoBuyNovels" edge.
func (suq *SocialUserQuery) QueryAutoBuyNovels() *NovelAutoBuyQuery {
	query := &NovelAutoBuyQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(novelautobuy.Table, novelautobuy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.AutoBuyNovelsTable, socialuser.AutoBuyNovelsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComments chains the current query on the "comments" edge.
func (suq *SocialUserQuery) QueryComments() *NovelCommentQuery {
	query := &NovelCommentQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(novelcomment.Table, novelcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.CommentsTable, socialuser.CommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMsgs chains the current query on the "msgs" edge.
func (suq *SocialUserQuery) QueryMsgs() *UserMsgQuery {
	query := &UserMsgQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(usermsg.Table, usermsg.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.MsgsTable, socialuser.MsgsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (suq *SocialUserQuery) QueryOrders() *PayOrderQuery {
	query := &PayOrderQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(payorder.Table, payorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.OrdersTable, socialuser.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVips chains the current query on the "vips" edge.
func (suq *SocialUserQuery) QueryVips() *VipUserQuery {
	query := &VipUserQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(vipuser.Table, vipuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.VipsTable, socialuser.VipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBalances chains the current query on the "balances" edge.
func (suq *SocialUserQuery) QueryBalances() *AmBalanceQuery {
	query := &AmBalanceQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(ambalance.Table, ambalance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.BalancesTable, socialuser.BalancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssetLogs chains the current query on the "assetLogs" edge.
func (suq *SocialUserQuery) QueryAssetLogs() *AssetChangeLogQuery {
	query := &AssetChangeLogQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(assetchangelog.Table, assetchangelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.AssetLogsTable, socialuser.AssetLogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuyChapterRecords chains the current query on the "buyChapterRecords" edge.
func (suq *SocialUserQuery) QueryBuyChapterRecords() *NovelBuyChapterRecordQuery {
	query := &NovelBuyChapterRecordQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(novelbuychapterrecord.Table, novelbuychapterrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.BuyChapterRecordsTable, socialuser.BuyChapterRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBuyNovelRecords chains the current query on the "buyNovelRecords" edge.
func (suq *SocialUserQuery) QueryBuyNovelRecords() *NovelBuyRecordQuery {
	query := &NovelBuyRecordQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(novelbuyrecord.Table, novelbuyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, socialuser.BuyNovelRecordsTable, socialuser.BuyNovelRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChannel chains the current query on the "channel" edge.
func (suq *SocialUserQuery) QueryChannel() *AdChannelQuery {
	query := &AdChannelQuery{config: suq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(socialuser.Table, socialuser.FieldID, selector),
			sqlgraph.To(adchannel.Table, adchannel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, socialuser.ChannelTable, socialuser.ChannelColumn),
		)
		fromU = sqlgraph.SetNeighbors(suq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SocialUser entity from the query.
// Returns a *NotFoundError when no SocialUser was found.
func (suq *SocialUserQuery) First(ctx context.Context) (*SocialUser, error) {
	nodes, err := suq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{socialuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (suq *SocialUserQuery) FirstX(ctx context.Context) *SocialUser {
	node, err := suq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SocialUser ID from the query.
// Returns a *NotFoundError when no SocialUser ID was found.
func (suq *SocialUserQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = suq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{socialuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (suq *SocialUserQuery) FirstIDX(ctx context.Context) int64 {
	id, err := suq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SocialUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SocialUser entity is not found.
// Returns a *NotFoundError when no SocialUser entities are found.
func (suq *SocialUserQuery) Only(ctx context.Context) (*SocialUser, error) {
	nodes, err := suq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{socialuser.Label}
	default:
		return nil, &NotSingularError{socialuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (suq *SocialUserQuery) OnlyX(ctx context.Context) *SocialUser {
	node, err := suq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SocialUser ID in the query.
// Returns a *NotSingularError when exactly one SocialUser ID is not found.
// Returns a *NotFoundError when no entities are found.
func (suq *SocialUserQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = suq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{socialuser.Label}
	default:
		err = &NotSingularError{socialuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (suq *SocialUserQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := suq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SocialUsers.
func (suq *SocialUserQuery) All(ctx context.Context) ([]*SocialUser, error) {
	if err := suq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return suq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (suq *SocialUserQuery) AllX(ctx context.Context) []*SocialUser {
	nodes, err := suq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SocialUser IDs.
func (suq *SocialUserQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := suq.Select(socialuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (suq *SocialUserQuery) IDsX(ctx context.Context) []int64 {
	ids, err := suq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (suq *SocialUserQuery) Count(ctx context.Context) (int, error) {
	if err := suq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return suq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (suq *SocialUserQuery) CountX(ctx context.Context) int {
	count, err := suq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (suq *SocialUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := suq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return suq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (suq *SocialUserQuery) ExistX(ctx context.Context) bool {
	exist, err := suq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SocialUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (suq *SocialUserQuery) Clone() *SocialUserQuery {
	if suq == nil {
		return nil
	}
	return &SocialUserQuery{
		config:                suq.config,
		limit:                 suq.limit,
		offset:                suq.offset,
		order:                 append([]OrderFunc{}, suq.order...),
		predicates:            append([]predicate.SocialUser{}, suq.predicates...),
		withTasks:             suq.withTasks.Clone(),
		withEvents:            suq.withEvents.Clone(),
		withListenRecords:     suq.withListenRecords.Clone(),
		withAds:               suq.withAds.Clone(),
		withBookshelves:       suq.withBookshelves.Clone(),
		withAutoBuyNovels:     suq.withAutoBuyNovels.Clone(),
		withComments:          suq.withComments.Clone(),
		withMsgs:              suq.withMsgs.Clone(),
		withOrders:            suq.withOrders.Clone(),
		withVips:              suq.withVips.Clone(),
		withBalances:          suq.withBalances.Clone(),
		withAssetLogs:         suq.withAssetLogs.Clone(),
		withBuyChapterRecords: suq.withBuyChapterRecords.Clone(),
		withBuyNovelRecords:   suq.withBuyNovelRecords.Clone(),
		withChannel:           suq.withChannel.Clone(),
		// clone intermediate query.
		sql:  suq.sql.Clone(),
		path: suq.path,
	}
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithTasks(opts ...func(*TaskLogQuery)) *SocialUserQuery {
	query := &TaskLogQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withTasks = query
	return suq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithEvents(opts ...func(*UserEventQuery)) *SocialUserQuery {
	query := &UserEventQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withEvents = query
	return suq
}

// WithListenRecords tells the query-builder to eager-load the nodes that are connected to
// the "listenRecords" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithListenRecords(opts ...func(*ListenRecordQuery)) *SocialUserQuery {
	query := &ListenRecordQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withListenRecords = query
	return suq
}

// WithAds tells the query-builder to eager-load the nodes that are connected to
// the "ads" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithAds(opts ...func(*AdChangeLogQuery)) *SocialUserQuery {
	query := &AdChangeLogQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withAds = query
	return suq
}

// WithBookshelves tells the query-builder to eager-load the nodes that are connected to
// the "bookshelves" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithBookshelves(opts ...func(*NovelBookshelfQuery)) *SocialUserQuery {
	query := &NovelBookshelfQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withBookshelves = query
	return suq
}

// WithAutoBuyNovels tells the query-builder to eager-load the nodes that are connected to
// the "autoBuyNovels" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithAutoBuyNovels(opts ...func(*NovelAutoBuyQuery)) *SocialUserQuery {
	query := &NovelAutoBuyQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withAutoBuyNovels = query
	return suq
}

// WithComments tells the query-builder to eager-load the nodes that are connected to
// the "comments" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithComments(opts ...func(*NovelCommentQuery)) *SocialUserQuery {
	query := &NovelCommentQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withComments = query
	return suq
}

// WithMsgs tells the query-builder to eager-load the nodes that are connected to
// the "msgs" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithMsgs(opts ...func(*UserMsgQuery)) *SocialUserQuery {
	query := &UserMsgQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withMsgs = query
	return suq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithOrders(opts ...func(*PayOrderQuery)) *SocialUserQuery {
	query := &PayOrderQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withOrders = query
	return suq
}

// WithVips tells the query-builder to eager-load the nodes that are connected to
// the "vips" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithVips(opts ...func(*VipUserQuery)) *SocialUserQuery {
	query := &VipUserQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withVips = query
	return suq
}

// WithBalances tells the query-builder to eager-load the nodes that are connected to
// the "balances" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithBalances(opts ...func(*AmBalanceQuery)) *SocialUserQuery {
	query := &AmBalanceQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withBalances = query
	return suq
}

// WithAssetLogs tells the query-builder to eager-load the nodes that are connected to
// the "assetLogs" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithAssetLogs(opts ...func(*AssetChangeLogQuery)) *SocialUserQuery {
	query := &AssetChangeLogQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withAssetLogs = query
	return suq
}

// WithBuyChapterRecords tells the query-builder to eager-load the nodes that are connected to
// the "buyChapterRecords" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithBuyChapterRecords(opts ...func(*NovelBuyChapterRecordQuery)) *SocialUserQuery {
	query := &NovelBuyChapterRecordQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withBuyChapterRecords = query
	return suq
}

// WithBuyNovelRecords tells the query-builder to eager-load the nodes that are connected to
// the "buyNovelRecords" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithBuyNovelRecords(opts ...func(*NovelBuyRecordQuery)) *SocialUserQuery {
	query := &NovelBuyRecordQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withBuyNovelRecords = query
	return suq
}

// WithChannel tells the query-builder to eager-load the nodes that are connected to
// the "channel" edge. The optional arguments are used to configure the query builder of the edge.
func (suq *SocialUserQuery) WithChannel(opts ...func(*AdChannelQuery)) *SocialUserQuery {
	query := &AdChannelQuery{config: suq.config}
	for _, opt := range opts {
		opt(query)
	}
	suq.withChannel = query
	return suq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ChId int64 `json:"chId,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SocialUser.Query().
//		GroupBy(socialuser.FieldChId).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (suq *SocialUserQuery) GroupBy(field string, fields ...string) *SocialUserGroupBy {
	group := &SocialUserGroupBy{config: suq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := suq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return suq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ChId int64 `json:"chId,omitempty"`
//	}
//
//	client.SocialUser.Query().
//		Select(socialuser.FieldChId).
//		Scan(ctx, &v)
//
func (suq *SocialUserQuery) Select(fields ...string) *SocialUserSelect {
	suq.fields = append(suq.fields, fields...)
	return &SocialUserSelect{SocialUserQuery: suq}
}

func (suq *SocialUserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range suq.fields {
		if !socialuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if suq.path != nil {
		prev, err := suq.path(ctx)
		if err != nil {
			return err
		}
		suq.sql = prev
	}
	return nil
}

func (suq *SocialUserQuery) sqlAll(ctx context.Context) ([]*SocialUser, error) {
	var (
		nodes       = []*SocialUser{}
		_spec       = suq.querySpec()
		loadedTypes = [15]bool{
			suq.withTasks != nil,
			suq.withEvents != nil,
			suq.withListenRecords != nil,
			suq.withAds != nil,
			suq.withBookshelves != nil,
			suq.withAutoBuyNovels != nil,
			suq.withComments != nil,
			suq.withMsgs != nil,
			suq.withOrders != nil,
			suq.withVips != nil,
			suq.withBalances != nil,
			suq.withAssetLogs != nil,
			suq.withBuyChapterRecords != nil,
			suq.withBuyNovelRecords != nil,
			suq.withChannel != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SocialUser{config: suq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, suq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := suq.withTasks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Tasks = []*TaskLog{}
		}
		query.Where(predicate.TaskLog(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.TasksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Tasks = append(node.Edges.Tasks, n)
		}
	}

	if query := suq.withEvents; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Events = []*UserEvent{}
		}
		query.Where(predicate.UserEvent(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.EventsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Events = append(node.Edges.Events, n)
		}
	}

	if query := suq.withListenRecords; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ListenRecords = []*ListenRecord{}
		}
		query.Where(predicate.ListenRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.ListenRecordsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.ListenRecords = append(node.Edges.ListenRecords, n)
		}
	}

	if query := suq.withAds; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Ads = []*AdChangeLog{}
		}
		query.Where(predicate.AdChangeLog(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.AdsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Ads = append(node.Edges.Ads, n)
		}
	}

	if query := suq.withBookshelves; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Bookshelves = []*NovelBookshelf{}
		}
		query.Where(predicate.NovelBookshelf(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.BookshelvesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Bookshelves = append(node.Edges.Bookshelves, n)
		}
	}

	if query := suq.withAutoBuyNovels; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AutoBuyNovels = []*NovelAutoBuy{}
		}
		query.Where(predicate.NovelAutoBuy(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.AutoBuyNovelsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AutoBuyNovels = append(node.Edges.AutoBuyNovels, n)
		}
	}

	if query := suq.withComments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Comments = []*NovelComment{}
		}
		query.withFKs = true
		query.Where(predicate.NovelComment(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.CommentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Comments = append(node.Edges.Comments, n)
		}
	}

	if query := suq.withMsgs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Msgs = []*UserMsg{}
		}
		query.Where(predicate.UserMsg(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.MsgsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Msgs = append(node.Edges.Msgs, n)
		}
	}

	if query := suq.withOrders; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Orders = []*PayOrder{}
		}
		query.Where(predicate.PayOrder(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.OrdersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Orders = append(node.Edges.Orders, n)
		}
	}

	if query := suq.withVips; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Vips = []*VipUser{}
		}
		query.Where(predicate.VipUser(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.VipsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Vips = append(node.Edges.Vips, n)
		}
	}

	if query := suq.withBalances; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Balances = []*AmBalance{}
		}
		query.Where(predicate.AmBalance(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.BalancesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Balances = append(node.Edges.Balances, n)
		}
	}

	if query := suq.withAssetLogs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AssetLogs = []*AssetChangeLog{}
		}
		query.Where(predicate.AssetChangeLog(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.AssetLogsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AssetLogs = append(node.Edges.AssetLogs, n)
		}
	}

	if query := suq.withBuyChapterRecords; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BuyChapterRecords = []*NovelBuyChapterRecord{}
		}
		query.Where(predicate.NovelBuyChapterRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.BuyChapterRecordsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.BuyChapterRecords = append(node.Edges.BuyChapterRecords, n)
		}
	}

	if query := suq.withBuyNovelRecords; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*SocialUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.BuyNovelRecords = []*NovelBuyRecord{}
		}
		query.Where(predicate.NovelBuyRecord(func(s *sql.Selector) {
			s.Where(sql.InValues(socialuser.BuyNovelRecordsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.UserId
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "userId" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.BuyNovelRecords = append(node.Edges.BuyNovelRecords, n)
		}
	}

	if query := suq.withChannel; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*SocialUser)
		for i := range nodes {
			fk := nodes[i].ChId
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(adchannel.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "chId" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Channel = n
			}
		}
	}

	return nodes, nil
}

func (suq *SocialUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := suq.querySpec()
	_spec.Node.Columns = suq.fields
	if len(suq.fields) > 0 {
		_spec.Unique = suq.unique != nil && *suq.unique
	}
	return sqlgraph.CountNodes(ctx, suq.driver, _spec)
}

func (suq *SocialUserQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := suq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (suq *SocialUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   socialuser.Table,
			Columns: socialuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: socialuser.FieldID,
			},
		},
		From:   suq.sql,
		Unique: true,
	}
	if unique := suq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := suq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, socialuser.FieldID)
		for i := range fields {
			if fields[i] != socialuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := suq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := suq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := suq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := suq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (suq *SocialUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(suq.driver.Dialect())
	t1 := builder.Table(socialuser.Table)
	columns := suq.fields
	if len(columns) == 0 {
		columns = socialuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if suq.sql != nil {
		selector = suq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if suq.unique != nil && *suq.unique {
		selector.Distinct()
	}
	for _, p := range suq.predicates {
		p(selector)
	}
	for _, p := range suq.order {
		p(selector)
	}
	if offset := suq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := suq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SocialUserGroupBy is the group-by builder for SocialUser entities.
type SocialUserGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sugb *SocialUserGroupBy) Aggregate(fns ...AggregateFunc) *SocialUserGroupBy {
	sugb.fns = append(sugb.fns, fns...)
	return sugb
}

// Scan applies the group-by query and scans the result into the given value.
func (sugb *SocialUserGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sugb.path(ctx)
	if err != nil {
		return err
	}
	sugb.sql = query
	return sugb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sugb *SocialUserGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sugb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sugb *SocialUserGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sugb.fields) > 1 {
		return nil, errors.New("ent: SocialUserGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sugb *SocialUserGroupBy) StringsX(ctx context.Context) []string {
	v, err := sugb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sugb *SocialUserGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sugb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{socialuser.Label}
	default:
		err = fmt.Errorf("ent: SocialUserGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sugb *SocialUserGroupBy) StringX(ctx context.Context) string {
	v, err := sugb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sugb *SocialUserGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sugb.fields) > 1 {
		return nil, errors.New("ent: SocialUserGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sugb *SocialUserGroupBy) IntsX(ctx context.Context) []int {
	v, err := sugb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sugb *SocialUserGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sugb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{socialuser.Label}
	default:
		err = fmt.Errorf("ent: SocialUserGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sugb *SocialUserGroupBy) IntX(ctx context.Context) int {
	v, err := sugb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sugb *SocialUserGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sugb.fields) > 1 {
		return nil, errors.New("ent: SocialUserGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sugb *SocialUserGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sugb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sugb *SocialUserGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sugb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{socialuser.Label}
	default:
		err = fmt.Errorf("ent: SocialUserGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sugb *SocialUserGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sugb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sugb *SocialUserGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sugb.fields) > 1 {
		return nil, errors.New("ent: SocialUserGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sugb *SocialUserGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sugb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sugb *SocialUserGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sugb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{socialuser.Label}
	default:
		err = fmt.Errorf("ent: SocialUserGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sugb *SocialUserGroupBy) BoolX(ctx context.Context) bool {
	v, err := sugb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sugb *SocialUserGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sugb.fields {
		if !socialuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sugb *SocialUserGroupBy) sqlQuery() *sql.Selector {
	selector := sugb.sql.Select()
	aggregation := make([]string, 0, len(sugb.fns))
	for _, fn := range sugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sugb.fields)+len(sugb.fns))
		for _, f := range sugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sugb.fields...)...)
}

// SocialUserSelect is the builder for selecting fields of SocialUser entities.
type SocialUserSelect struct {
	*SocialUserQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sus *SocialUserSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sus.prepareQuery(ctx); err != nil {
		return err
	}
	sus.sql = sus.SocialUserQuery.sqlQuery(ctx)
	return sus.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sus *SocialUserSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sus.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sus *SocialUserSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sus.fields) > 1 {
		return nil, errors.New("ent: SocialUserSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sus *SocialUserSelect) StringsX(ctx context.Context) []string {
	v, err := sus.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sus *SocialUserSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sus.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{socialuser.Label}
	default:
		err = fmt.Errorf("ent: SocialUserSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sus *SocialUserSelect) StringX(ctx context.Context) string {
	v, err := sus.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sus *SocialUserSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sus.fields) > 1 {
		return nil, errors.New("ent: SocialUserSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sus *SocialUserSelect) IntsX(ctx context.Context) []int {
	v, err := sus.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sus *SocialUserSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sus.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{socialuser.Label}
	default:
		err = fmt.Errorf("ent: SocialUserSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sus *SocialUserSelect) IntX(ctx context.Context) int {
	v, err := sus.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sus *SocialUserSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sus.fields) > 1 {
		return nil, errors.New("ent: SocialUserSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sus *SocialUserSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sus.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sus *SocialUserSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sus.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{socialuser.Label}
	default:
		err = fmt.Errorf("ent: SocialUserSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sus *SocialUserSelect) Float64X(ctx context.Context) float64 {
	v, err := sus.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sus *SocialUserSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sus.fields) > 1 {
		return nil, errors.New("ent: SocialUserSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sus *SocialUserSelect) BoolsX(ctx context.Context) []bool {
	v, err := sus.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sus *SocialUserSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sus.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{socialuser.Label}
	default:
		err = fmt.Errorf("ent: SocialUserSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sus *SocialUserSelect) BoolX(ctx context.Context) bool {
	v, err := sus.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sus *SocialUserSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sus.sql.Query()
	if err := sus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
