// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/adchannel"
	"hope/apps/novel/internal/data/ent/agreementlog"
	"hope/apps/novel/internal/data/ent/payorder"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/schema"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PayOrderUpdate is the builder for updating PayOrder entities.
type PayOrderUpdate struct {
	config
	hooks    []Hook
	mutation *PayOrderMutation
}

// Where appends a list predicates to the PayOrderUpdate builder.
func (pou *PayOrderUpdate) Where(ps ...predicate.PayOrder) *PayOrderUpdate {
	pou.mutation.Where(ps...)
	return pou
}

// SetOrderId sets the "orderId" field.
func (pou *PayOrderUpdate) SetOrderId(s string) *PayOrderUpdate {
	pou.mutation.SetOrderId(s)
	return pou
}

// SetUserId sets the "userId" field.
func (pou *PayOrderUpdate) SetUserId(i int64) *PayOrderUpdate {
	pou.mutation.SetUserId(i)
	return pou
}

// SetChId sets the "chId" field.
func (pou *PayOrderUpdate) SetChId(i int64) *PayOrderUpdate {
	pou.mutation.SetChId(i)
	return pou
}

// SetAgreementId sets the "agreementId" field.
func (pou *PayOrderUpdate) SetAgreementId(i int64) *PayOrderUpdate {
	pou.mutation.SetAgreementId(i)
	return pou
}

// SetLastRead sets the "lastRead" field.
func (pou *PayOrderUpdate) SetLastRead(s string) *PayOrderUpdate {
	pou.mutation.SetLastRead(s)
	return pou
}

// SetLastChapter sets the "lastChapter" field.
func (pou *PayOrderUpdate) SetLastChapter(s string) *PayOrderUpdate {
	pou.mutation.SetLastChapter(s)
	return pou
}

// SetPaymentName sets the "paymentName" field.
func (pou *PayOrderUpdate) SetPaymentName(s string) *PayOrderUpdate {
	pou.mutation.SetPaymentName(s)
	return pou
}

// SetPaymentId sets the "paymentId" field.
func (pou *PayOrderUpdate) SetPaymentId(s string) *PayOrderUpdate {
	pou.mutation.SetPaymentId(s)
	return pou
}

// SetState sets the "state" field.
func (pou *PayOrderUpdate) SetState(ss schema.OrderState) *PayOrderUpdate {
	pou.mutation.ResetState()
	pou.mutation.SetState(ss)
	return pou
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pou *PayOrderUpdate) SetNillableState(ss *schema.OrderState) *PayOrderUpdate {
	if ss != nil {
		pou.SetState(*ss)
	}
	return pou
}

// AddState adds ss to the "state" field.
func (pou *PayOrderUpdate) AddState(ss schema.OrderState) *PayOrderUpdate {
	pou.mutation.AddState(ss)
	return pou
}

// SetPayment sets the "payment" field.
func (pou *PayOrderUpdate) SetPayment(i int64) *PayOrderUpdate {
	pou.mutation.ResetPayment()
	pou.mutation.SetPayment(i)
	return pou
}

// AddPayment adds i to the "payment" field.
func (pou *PayOrderUpdate) AddPayment(i int64) *PayOrderUpdate {
	pou.mutation.AddPayment(i)
	return pou
}

// SetPaymentTime sets the "paymentTime" field.
func (pou *PayOrderUpdate) SetPaymentTime(t time.Time) *PayOrderUpdate {
	pou.mutation.SetPaymentTime(t)
	return pou
}

// SetCloseTime sets the "closeTime" field.
func (pou *PayOrderUpdate) SetCloseTime(t time.Time) *PayOrderUpdate {
	pou.mutation.SetCloseTime(t)
	return pou
}

// SetPayType sets the "payType" field.
func (pou *PayOrderUpdate) SetPayType(pt payorder.PayType) *PayOrderUpdate {
	pou.mutation.SetPayType(pt)
	return pou
}

// SetCoin sets the "coin" field.
func (pou *PayOrderUpdate) SetCoin(i int64) *PayOrderUpdate {
	pou.mutation.ResetCoin()
	pou.mutation.SetCoin(i)
	return pou
}

// AddCoin adds i to the "coin" field.
func (pou *PayOrderUpdate) AddCoin(i int64) *PayOrderUpdate {
	pou.mutation.AddCoin(i)
	return pou
}

// SetCoupon sets the "coupon" field.
func (pou *PayOrderUpdate) SetCoupon(i int64) *PayOrderUpdate {
	pou.mutation.ResetCoupon()
	pou.mutation.SetCoupon(i)
	return pou
}

// AddCoupon adds i to the "coupon" field.
func (pou *PayOrderUpdate) AddCoupon(i int64) *PayOrderUpdate {
	pou.mutation.AddCoupon(i)
	return pou
}

// SetVipDays sets the "vipDays" field.
func (pou *PayOrderUpdate) SetVipDays(s string) *PayOrderUpdate {
	pou.mutation.SetVipDays(s)
	return pou
}

// SetNillableVipDays sets the "vipDays" field if the given value is not nil.
func (pou *PayOrderUpdate) SetNillableVipDays(s *string) *PayOrderUpdate {
	if s != nil {
		pou.SetVipDays(*s)
	}
	return pou
}

// ClearVipDays clears the value of the "vipDays" field.
func (pou *PayOrderUpdate) ClearVipDays() *PayOrderUpdate {
	pou.mutation.ClearVipDays()
	return pou
}

// SetVipType sets the "vipType" field.
func (pou *PayOrderUpdate) SetVipType(i int64) *PayOrderUpdate {
	pou.mutation.ResetVipType()
	pou.mutation.SetVipType(i)
	return pou
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (pou *PayOrderUpdate) SetNillableVipType(i *int64) *PayOrderUpdate {
	if i != nil {
		pou.SetVipType(*i)
	}
	return pou
}

// AddVipType adds i to the "vipType" field.
func (pou *PayOrderUpdate) AddVipType(i int64) *PayOrderUpdate {
	pou.mutation.AddVipType(i)
	return pou
}

// ClearVipType clears the value of the "vipType" field.
func (pou *PayOrderUpdate) ClearVipType() *PayOrderUpdate {
	pou.mutation.ClearVipType()
	return pou
}

// SetVipName sets the "vipName" field.
func (pou *PayOrderUpdate) SetVipName(s string) *PayOrderUpdate {
	pou.mutation.SetVipName(s)
	return pou
}

// SetNillableVipName sets the "vipName" field if the given value is not nil.
func (pou *PayOrderUpdate) SetNillableVipName(s *string) *PayOrderUpdate {
	if s != nil {
		pou.SetVipName(*s)
	}
	return pou
}

// ClearVipName clears the value of the "vipName" field.
func (pou *PayOrderUpdate) ClearVipName() *PayOrderUpdate {
	pou.mutation.ClearVipName()
	return pou
}

// SetTimes sets the "times" field.
func (pou *PayOrderUpdate) SetTimes(i int32) *PayOrderUpdate {
	pou.mutation.ResetTimes()
	pou.mutation.SetTimes(i)
	return pou
}

// AddTimes adds i to the "times" field.
func (pou *PayOrderUpdate) AddTimes(i int32) *PayOrderUpdate {
	pou.mutation.AddTimes(i)
	return pou
}

// SetOtherOrderId sets the "otherOrderId" field.
func (pou *PayOrderUpdate) SetOtherOrderId(s string) *PayOrderUpdate {
	pou.mutation.SetOtherOrderId(s)
	return pou
}

// SetNillableOtherOrderId sets the "otherOrderId" field if the given value is not nil.
func (pou *PayOrderUpdate) SetNillableOtherOrderId(s *string) *PayOrderUpdate {
	if s != nil {
		pou.SetOtherOrderId(*s)
	}
	return pou
}

// ClearOtherOrderId clears the value of the "otherOrderId" field.
func (pou *PayOrderUpdate) ClearOtherOrderId() *PayOrderUpdate {
	pou.mutation.ClearOtherOrderId()
	return pou
}

// SetRemark sets the "remark" field.
func (pou *PayOrderUpdate) SetRemark(s string) *PayOrderUpdate {
	pou.mutation.SetRemark(s)
	return pou
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pou *PayOrderUpdate) SetNillableRemark(s *string) *PayOrderUpdate {
	if s != nil {
		pou.SetRemark(*s)
	}
	return pou
}

// ClearRemark clears the value of the "remark" field.
func (pou *PayOrderUpdate) ClearRemark() *PayOrderUpdate {
	pou.mutation.ClearRemark()
	return pou
}

// SetUpdatedAt sets the "updatedAt" field.
func (pou *PayOrderUpdate) SetUpdatedAt(t time.Time) *PayOrderUpdate {
	pou.mutation.SetUpdatedAt(t)
	return pou
}

// SetCreateBy sets the "createBy" field.
func (pou *PayOrderUpdate) SetCreateBy(i int64) *PayOrderUpdate {
	pou.mutation.ResetCreateBy()
	pou.mutation.SetCreateBy(i)
	return pou
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (pou *PayOrderUpdate) SetNillableCreateBy(i *int64) *PayOrderUpdate {
	if i != nil {
		pou.SetCreateBy(*i)
	}
	return pou
}

// AddCreateBy adds i to the "createBy" field.
func (pou *PayOrderUpdate) AddCreateBy(i int64) *PayOrderUpdate {
	pou.mutation.AddCreateBy(i)
	return pou
}

// SetUpdateBy sets the "updateBy" field.
func (pou *PayOrderUpdate) SetUpdateBy(i int64) *PayOrderUpdate {
	pou.mutation.ResetUpdateBy()
	pou.mutation.SetUpdateBy(i)
	return pou
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (pou *PayOrderUpdate) SetNillableUpdateBy(i *int64) *PayOrderUpdate {
	if i != nil {
		pou.SetUpdateBy(*i)
	}
	return pou
}

// AddUpdateBy adds i to the "updateBy" field.
func (pou *PayOrderUpdate) AddUpdateBy(i int64) *PayOrderUpdate {
	pou.mutation.AddUpdateBy(i)
	return pou
}

// SetTenantId sets the "tenantId" field.
func (pou *PayOrderUpdate) SetTenantId(i int64) *PayOrderUpdate {
	pou.mutation.ResetTenantId()
	pou.mutation.SetTenantId(i)
	return pou
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (pou *PayOrderUpdate) SetNillableTenantId(i *int64) *PayOrderUpdate {
	if i != nil {
		pou.SetTenantId(*i)
	}
	return pou
}

// AddTenantId adds i to the "tenantId" field.
func (pou *PayOrderUpdate) AddTenantId(i int64) *PayOrderUpdate {
	pou.mutation.AddTenantId(i)
	return pou
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (pou *PayOrderUpdate) SetUserID(id int64) *PayOrderUpdate {
	pou.mutation.SetUserID(id)
	return pou
}

// SetUser sets the "user" edge to the SocialUser entity.
func (pou *PayOrderUpdate) SetUser(s *SocialUser) *PayOrderUpdate {
	return pou.SetUserID(s.ID)
}

// SetChannelID sets the "channel" edge to the AdChannel entity by ID.
func (pou *PayOrderUpdate) SetChannelID(id int64) *PayOrderUpdate {
	pou.mutation.SetChannelID(id)
	return pou
}

// SetChannel sets the "channel" edge to the AdChannel entity.
func (pou *PayOrderUpdate) SetChannel(a *AdChannel) *PayOrderUpdate {
	return pou.SetChannelID(a.ID)
}

// SetAgreementID sets the "agreement" edge to the AgreementLog entity by ID.
func (pou *PayOrderUpdate) SetAgreementID(id int64) *PayOrderUpdate {
	pou.mutation.SetAgreementID(id)
	return pou
}

// SetAgreement sets the "agreement" edge to the AgreementLog entity.
func (pou *PayOrderUpdate) SetAgreement(a *AgreementLog) *PayOrderUpdate {
	return pou.SetAgreementID(a.ID)
}

// Mutation returns the PayOrderMutation object of the builder.
func (pou *PayOrderUpdate) Mutation() *PayOrderMutation {
	return pou.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (pou *PayOrderUpdate) ClearUser() *PayOrderUpdate {
	pou.mutation.ClearUser()
	return pou
}

// ClearChannel clears the "channel" edge to the AdChannel entity.
func (pou *PayOrderUpdate) ClearChannel() *PayOrderUpdate {
	pou.mutation.ClearChannel()
	return pou
}

// ClearAgreement clears the "agreement" edge to the AgreementLog entity.
func (pou *PayOrderUpdate) ClearAgreement() *PayOrderUpdate {
	pou.mutation.ClearAgreement()
	return pou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pou *PayOrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pou.defaults()
	if len(pou.hooks) == 0 {
		if err = pou.check(); err != nil {
			return 0, err
		}
		affected, err = pou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PayOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pou.check(); err != nil {
				return 0, err
			}
			pou.mutation = mutation
			affected, err = pou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pou.hooks) - 1; i >= 0; i-- {
			if pou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pou *PayOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := pou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pou *PayOrderUpdate) Exec(ctx context.Context) error {
	_, err := pou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pou *PayOrderUpdate) ExecX(ctx context.Context) {
	if err := pou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pou *PayOrderUpdate) defaults() {
	if _, ok := pou.mutation.UpdatedAt(); !ok {
		v := payorder.UpdateDefaultUpdatedAt()
		pou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pou *PayOrderUpdate) check() error {
	if v, ok := pou.mutation.State(); ok {
		if err := payorder.StateValidator(int32(v)); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PayOrder.state": %w`, err)}
		}
	}
	if v, ok := pou.mutation.Payment(); ok {
		if err := payorder.PaymentValidator(v); err != nil {
			return &ValidationError{Name: "payment", err: fmt.Errorf(`ent: validator failed for field "PayOrder.payment": %w`, err)}
		}
	}
	if v, ok := pou.mutation.PayType(); ok {
		if err := payorder.PayTypeValidator(v); err != nil {
			return &ValidationError{Name: "payType", err: fmt.Errorf(`ent: validator failed for field "PayOrder.payType": %w`, err)}
		}
	}
	if _, ok := pou.mutation.UserID(); pou.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PayOrder.user"`)
	}
	if _, ok := pou.mutation.ChannelID(); pou.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PayOrder.channel"`)
	}
	if _, ok := pou.mutation.AgreementID(); pou.mutation.AgreementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PayOrder.agreement"`)
	}
	return nil
}

func (pou *PayOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payorder.Table,
			Columns: payorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: payorder.FieldID,
			},
		},
	}
	if ps := pou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pou.mutation.OrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldOrderId,
		})
	}
	if value, ok := pou.mutation.LastRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldLastRead,
		})
	}
	if value, ok := pou.mutation.LastChapter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldLastChapter,
		})
	}
	if value, ok := pou.mutation.PaymentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldPaymentName,
		})
	}
	if value, ok := pou.mutation.PaymentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldPaymentId,
		})
	}
	if value, ok := pou.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldState,
		})
	}
	if value, ok := pou.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldState,
		})
	}
	if value, ok := pou.mutation.Payment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldPayment,
		})
	}
	if value, ok := pou.mutation.AddedPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldPayment,
		})
	}
	if value, ok := pou.mutation.PaymentTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldPaymentTime,
		})
	}
	if value, ok := pou.mutation.CloseTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldCloseTime,
		})
	}
	if value, ok := pou.mutation.PayType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: payorder.FieldPayType,
		})
	}
	if value, ok := pou.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoin,
		})
	}
	if value, ok := pou.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoin,
		})
	}
	if value, ok := pou.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoupon,
		})
	}
	if value, ok := pou.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoupon,
		})
	}
	if value, ok := pou.mutation.VipDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldVipDays,
		})
	}
	if pou.mutation.VipDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorder.FieldVipDays,
		})
	}
	if value, ok := pou.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldVipType,
		})
	}
	if value, ok := pou.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldVipType,
		})
	}
	if pou.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: payorder.FieldVipType,
		})
	}
	if value, ok := pou.mutation.VipName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldVipName,
		})
	}
	if pou.mutation.VipNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorder.FieldVipName,
		})
	}
	if value, ok := pou.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldTimes,
		})
	}
	if value, ok := pou.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldTimes,
		})
	}
	if value, ok := pou.mutation.OtherOrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldOtherOrderId,
		})
	}
	if pou.mutation.OtherOrderIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorder.FieldOtherOrderId,
		})
	}
	if value, ok := pou.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldRemark,
		})
	}
	if pou.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorder.FieldRemark,
		})
	}
	if value, ok := pou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldUpdatedAt,
		})
	}
	if value, ok := pou.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCreateBy,
		})
	}
	if value, ok := pou.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCreateBy,
		})
	}
	if value, ok := pou.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldUpdateBy,
		})
	}
	if value, ok := pou.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldUpdateBy,
		})
	}
	if value, ok := pou.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldTenantId,
		})
	}
	if value, ok := pou.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldTenantId,
		})
	}
	if pou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.UserTable,
			Columns: []string{payorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.UserTable,
			Columns: []string{payorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.ChannelTable,
			Columns: []string{payorder.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.ChannelTable,
			Columns: []string{payorder.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.AgreementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.AgreementTable,
			Columns: []string{payorder.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: agreementlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.AgreementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.AgreementTable,
			Columns: []string{payorder.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: agreementlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PayOrderUpdateOne is the builder for updating a single PayOrder entity.
type PayOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PayOrderMutation
}

// SetOrderId sets the "orderId" field.
func (pouo *PayOrderUpdateOne) SetOrderId(s string) *PayOrderUpdateOne {
	pouo.mutation.SetOrderId(s)
	return pouo
}

// SetUserId sets the "userId" field.
func (pouo *PayOrderUpdateOne) SetUserId(i int64) *PayOrderUpdateOne {
	pouo.mutation.SetUserId(i)
	return pouo
}

// SetChId sets the "chId" field.
func (pouo *PayOrderUpdateOne) SetChId(i int64) *PayOrderUpdateOne {
	pouo.mutation.SetChId(i)
	return pouo
}

// SetAgreementId sets the "agreementId" field.
func (pouo *PayOrderUpdateOne) SetAgreementId(i int64) *PayOrderUpdateOne {
	pouo.mutation.SetAgreementId(i)
	return pouo
}

// SetLastRead sets the "lastRead" field.
func (pouo *PayOrderUpdateOne) SetLastRead(s string) *PayOrderUpdateOne {
	pouo.mutation.SetLastRead(s)
	return pouo
}

// SetLastChapter sets the "lastChapter" field.
func (pouo *PayOrderUpdateOne) SetLastChapter(s string) *PayOrderUpdateOne {
	pouo.mutation.SetLastChapter(s)
	return pouo
}

// SetPaymentName sets the "paymentName" field.
func (pouo *PayOrderUpdateOne) SetPaymentName(s string) *PayOrderUpdateOne {
	pouo.mutation.SetPaymentName(s)
	return pouo
}

// SetPaymentId sets the "paymentId" field.
func (pouo *PayOrderUpdateOne) SetPaymentId(s string) *PayOrderUpdateOne {
	pouo.mutation.SetPaymentId(s)
	return pouo
}

// SetState sets the "state" field.
func (pouo *PayOrderUpdateOne) SetState(ss schema.OrderState) *PayOrderUpdateOne {
	pouo.mutation.ResetState()
	pouo.mutation.SetState(ss)
	return pouo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pouo *PayOrderUpdateOne) SetNillableState(ss *schema.OrderState) *PayOrderUpdateOne {
	if ss != nil {
		pouo.SetState(*ss)
	}
	return pouo
}

// AddState adds ss to the "state" field.
func (pouo *PayOrderUpdateOne) AddState(ss schema.OrderState) *PayOrderUpdateOne {
	pouo.mutation.AddState(ss)
	return pouo
}

// SetPayment sets the "payment" field.
func (pouo *PayOrderUpdateOne) SetPayment(i int64) *PayOrderUpdateOne {
	pouo.mutation.ResetPayment()
	pouo.mutation.SetPayment(i)
	return pouo
}

// AddPayment adds i to the "payment" field.
func (pouo *PayOrderUpdateOne) AddPayment(i int64) *PayOrderUpdateOne {
	pouo.mutation.AddPayment(i)
	return pouo
}

// SetPaymentTime sets the "paymentTime" field.
func (pouo *PayOrderUpdateOne) SetPaymentTime(t time.Time) *PayOrderUpdateOne {
	pouo.mutation.SetPaymentTime(t)
	return pouo
}

// SetCloseTime sets the "closeTime" field.
func (pouo *PayOrderUpdateOne) SetCloseTime(t time.Time) *PayOrderUpdateOne {
	pouo.mutation.SetCloseTime(t)
	return pouo
}

// SetPayType sets the "payType" field.
func (pouo *PayOrderUpdateOne) SetPayType(pt payorder.PayType) *PayOrderUpdateOne {
	pouo.mutation.SetPayType(pt)
	return pouo
}

// SetCoin sets the "coin" field.
func (pouo *PayOrderUpdateOne) SetCoin(i int64) *PayOrderUpdateOne {
	pouo.mutation.ResetCoin()
	pouo.mutation.SetCoin(i)
	return pouo
}

// AddCoin adds i to the "coin" field.
func (pouo *PayOrderUpdateOne) AddCoin(i int64) *PayOrderUpdateOne {
	pouo.mutation.AddCoin(i)
	return pouo
}

// SetCoupon sets the "coupon" field.
func (pouo *PayOrderUpdateOne) SetCoupon(i int64) *PayOrderUpdateOne {
	pouo.mutation.ResetCoupon()
	pouo.mutation.SetCoupon(i)
	return pouo
}

// AddCoupon adds i to the "coupon" field.
func (pouo *PayOrderUpdateOne) AddCoupon(i int64) *PayOrderUpdateOne {
	pouo.mutation.AddCoupon(i)
	return pouo
}

// SetVipDays sets the "vipDays" field.
func (pouo *PayOrderUpdateOne) SetVipDays(s string) *PayOrderUpdateOne {
	pouo.mutation.SetVipDays(s)
	return pouo
}

// SetNillableVipDays sets the "vipDays" field if the given value is not nil.
func (pouo *PayOrderUpdateOne) SetNillableVipDays(s *string) *PayOrderUpdateOne {
	if s != nil {
		pouo.SetVipDays(*s)
	}
	return pouo
}

// ClearVipDays clears the value of the "vipDays" field.
func (pouo *PayOrderUpdateOne) ClearVipDays() *PayOrderUpdateOne {
	pouo.mutation.ClearVipDays()
	return pouo
}

// SetVipType sets the "vipType" field.
func (pouo *PayOrderUpdateOne) SetVipType(i int64) *PayOrderUpdateOne {
	pouo.mutation.ResetVipType()
	pouo.mutation.SetVipType(i)
	return pouo
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (pouo *PayOrderUpdateOne) SetNillableVipType(i *int64) *PayOrderUpdateOne {
	if i != nil {
		pouo.SetVipType(*i)
	}
	return pouo
}

// AddVipType adds i to the "vipType" field.
func (pouo *PayOrderUpdateOne) AddVipType(i int64) *PayOrderUpdateOne {
	pouo.mutation.AddVipType(i)
	return pouo
}

// ClearVipType clears the value of the "vipType" field.
func (pouo *PayOrderUpdateOne) ClearVipType() *PayOrderUpdateOne {
	pouo.mutation.ClearVipType()
	return pouo
}

// SetVipName sets the "vipName" field.
func (pouo *PayOrderUpdateOne) SetVipName(s string) *PayOrderUpdateOne {
	pouo.mutation.SetVipName(s)
	return pouo
}

// SetNillableVipName sets the "vipName" field if the given value is not nil.
func (pouo *PayOrderUpdateOne) SetNillableVipName(s *string) *PayOrderUpdateOne {
	if s != nil {
		pouo.SetVipName(*s)
	}
	return pouo
}

// ClearVipName clears the value of the "vipName" field.
func (pouo *PayOrderUpdateOne) ClearVipName() *PayOrderUpdateOne {
	pouo.mutation.ClearVipName()
	return pouo
}

// SetTimes sets the "times" field.
func (pouo *PayOrderUpdateOne) SetTimes(i int32) *PayOrderUpdateOne {
	pouo.mutation.ResetTimes()
	pouo.mutation.SetTimes(i)
	return pouo
}

// AddTimes adds i to the "times" field.
func (pouo *PayOrderUpdateOne) AddTimes(i int32) *PayOrderUpdateOne {
	pouo.mutation.AddTimes(i)
	return pouo
}

// SetOtherOrderId sets the "otherOrderId" field.
func (pouo *PayOrderUpdateOne) SetOtherOrderId(s string) *PayOrderUpdateOne {
	pouo.mutation.SetOtherOrderId(s)
	return pouo
}

// SetNillableOtherOrderId sets the "otherOrderId" field if the given value is not nil.
func (pouo *PayOrderUpdateOne) SetNillableOtherOrderId(s *string) *PayOrderUpdateOne {
	if s != nil {
		pouo.SetOtherOrderId(*s)
	}
	return pouo
}

// ClearOtherOrderId clears the value of the "otherOrderId" field.
func (pouo *PayOrderUpdateOne) ClearOtherOrderId() *PayOrderUpdateOne {
	pouo.mutation.ClearOtherOrderId()
	return pouo
}

// SetRemark sets the "remark" field.
func (pouo *PayOrderUpdateOne) SetRemark(s string) *PayOrderUpdateOne {
	pouo.mutation.SetRemark(s)
	return pouo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pouo *PayOrderUpdateOne) SetNillableRemark(s *string) *PayOrderUpdateOne {
	if s != nil {
		pouo.SetRemark(*s)
	}
	return pouo
}

// ClearRemark clears the value of the "remark" field.
func (pouo *PayOrderUpdateOne) ClearRemark() *PayOrderUpdateOne {
	pouo.mutation.ClearRemark()
	return pouo
}

// SetUpdatedAt sets the "updatedAt" field.
func (pouo *PayOrderUpdateOne) SetUpdatedAt(t time.Time) *PayOrderUpdateOne {
	pouo.mutation.SetUpdatedAt(t)
	return pouo
}

// SetCreateBy sets the "createBy" field.
func (pouo *PayOrderUpdateOne) SetCreateBy(i int64) *PayOrderUpdateOne {
	pouo.mutation.ResetCreateBy()
	pouo.mutation.SetCreateBy(i)
	return pouo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (pouo *PayOrderUpdateOne) SetNillableCreateBy(i *int64) *PayOrderUpdateOne {
	if i != nil {
		pouo.SetCreateBy(*i)
	}
	return pouo
}

// AddCreateBy adds i to the "createBy" field.
func (pouo *PayOrderUpdateOne) AddCreateBy(i int64) *PayOrderUpdateOne {
	pouo.mutation.AddCreateBy(i)
	return pouo
}

// SetUpdateBy sets the "updateBy" field.
func (pouo *PayOrderUpdateOne) SetUpdateBy(i int64) *PayOrderUpdateOne {
	pouo.mutation.ResetUpdateBy()
	pouo.mutation.SetUpdateBy(i)
	return pouo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (pouo *PayOrderUpdateOne) SetNillableUpdateBy(i *int64) *PayOrderUpdateOne {
	if i != nil {
		pouo.SetUpdateBy(*i)
	}
	return pouo
}

// AddUpdateBy adds i to the "updateBy" field.
func (pouo *PayOrderUpdateOne) AddUpdateBy(i int64) *PayOrderUpdateOne {
	pouo.mutation.AddUpdateBy(i)
	return pouo
}

// SetTenantId sets the "tenantId" field.
func (pouo *PayOrderUpdateOne) SetTenantId(i int64) *PayOrderUpdateOne {
	pouo.mutation.ResetTenantId()
	pouo.mutation.SetTenantId(i)
	return pouo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (pouo *PayOrderUpdateOne) SetNillableTenantId(i *int64) *PayOrderUpdateOne {
	if i != nil {
		pouo.SetTenantId(*i)
	}
	return pouo
}

// AddTenantId adds i to the "tenantId" field.
func (pouo *PayOrderUpdateOne) AddTenantId(i int64) *PayOrderUpdateOne {
	pouo.mutation.AddTenantId(i)
	return pouo
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (pouo *PayOrderUpdateOne) SetUserID(id int64) *PayOrderUpdateOne {
	pouo.mutation.SetUserID(id)
	return pouo
}

// SetUser sets the "user" edge to the SocialUser entity.
func (pouo *PayOrderUpdateOne) SetUser(s *SocialUser) *PayOrderUpdateOne {
	return pouo.SetUserID(s.ID)
}

// SetChannelID sets the "channel" edge to the AdChannel entity by ID.
func (pouo *PayOrderUpdateOne) SetChannelID(id int64) *PayOrderUpdateOne {
	pouo.mutation.SetChannelID(id)
	return pouo
}

// SetChannel sets the "channel" edge to the AdChannel entity.
func (pouo *PayOrderUpdateOne) SetChannel(a *AdChannel) *PayOrderUpdateOne {
	return pouo.SetChannelID(a.ID)
}

// SetAgreementID sets the "agreement" edge to the AgreementLog entity by ID.
func (pouo *PayOrderUpdateOne) SetAgreementID(id int64) *PayOrderUpdateOne {
	pouo.mutation.SetAgreementID(id)
	return pouo
}

// SetAgreement sets the "agreement" edge to the AgreementLog entity.
func (pouo *PayOrderUpdateOne) SetAgreement(a *AgreementLog) *PayOrderUpdateOne {
	return pouo.SetAgreementID(a.ID)
}

// Mutation returns the PayOrderMutation object of the builder.
func (pouo *PayOrderUpdateOne) Mutation() *PayOrderMutation {
	return pouo.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (pouo *PayOrderUpdateOne) ClearUser() *PayOrderUpdateOne {
	pouo.mutation.ClearUser()
	return pouo
}

// ClearChannel clears the "channel" edge to the AdChannel entity.
func (pouo *PayOrderUpdateOne) ClearChannel() *PayOrderUpdateOne {
	pouo.mutation.ClearChannel()
	return pouo
}

// ClearAgreement clears the "agreement" edge to the AgreementLog entity.
func (pouo *PayOrderUpdateOne) ClearAgreement() *PayOrderUpdateOne {
	pouo.mutation.ClearAgreement()
	return pouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouo *PayOrderUpdateOne) Select(field string, fields ...string) *PayOrderUpdateOne {
	pouo.fields = append([]string{field}, fields...)
	return pouo
}

// Save executes the query and returns the updated PayOrder entity.
func (pouo *PayOrderUpdateOne) Save(ctx context.Context) (*PayOrder, error) {
	var (
		err  error
		node *PayOrder
	)
	pouo.defaults()
	if len(pouo.hooks) == 0 {
		if err = pouo.check(); err != nil {
			return nil, err
		}
		node, err = pouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PayOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pouo.check(); err != nil {
				return nil, err
			}
			pouo.mutation = mutation
			node, err = pouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pouo.hooks) - 1; i >= 0; i-- {
			if pouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pouo *PayOrderUpdateOne) SaveX(ctx context.Context) *PayOrder {
	node, err := pouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouo *PayOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := pouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouo *PayOrderUpdateOne) ExecX(ctx context.Context) {
	if err := pouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pouo *PayOrderUpdateOne) defaults() {
	if _, ok := pouo.mutation.UpdatedAt(); !ok {
		v := payorder.UpdateDefaultUpdatedAt()
		pouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pouo *PayOrderUpdateOne) check() error {
	if v, ok := pouo.mutation.State(); ok {
		if err := payorder.StateValidator(int32(v)); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PayOrder.state": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.Payment(); ok {
		if err := payorder.PaymentValidator(v); err != nil {
			return &ValidationError{Name: "payment", err: fmt.Errorf(`ent: validator failed for field "PayOrder.payment": %w`, err)}
		}
	}
	if v, ok := pouo.mutation.PayType(); ok {
		if err := payorder.PayTypeValidator(v); err != nil {
			return &ValidationError{Name: "payType", err: fmt.Errorf(`ent: validator failed for field "PayOrder.payType": %w`, err)}
		}
	}
	if _, ok := pouo.mutation.UserID(); pouo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PayOrder.user"`)
	}
	if _, ok := pouo.mutation.ChannelID(); pouo.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PayOrder.channel"`)
	}
	if _, ok := pouo.mutation.AgreementID(); pouo.mutation.AgreementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PayOrder.agreement"`)
	}
	return nil
}

func (pouo *PayOrderUpdateOne) sqlSave(ctx context.Context) (_node *PayOrder, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payorder.Table,
			Columns: payorder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: payorder.FieldID,
			},
		},
	}
	id, ok := pouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PayOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payorder.FieldID)
		for _, f := range fields {
			if !payorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouo.mutation.OrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldOrderId,
		})
	}
	if value, ok := pouo.mutation.LastRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldLastRead,
		})
	}
	if value, ok := pouo.mutation.LastChapter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldLastChapter,
		})
	}
	if value, ok := pouo.mutation.PaymentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldPaymentName,
		})
	}
	if value, ok := pouo.mutation.PaymentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldPaymentId,
		})
	}
	if value, ok := pouo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldState,
		})
	}
	if value, ok := pouo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldState,
		})
	}
	if value, ok := pouo.mutation.Payment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldPayment,
		})
	}
	if value, ok := pouo.mutation.AddedPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldPayment,
		})
	}
	if value, ok := pouo.mutation.PaymentTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldPaymentTime,
		})
	}
	if value, ok := pouo.mutation.CloseTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldCloseTime,
		})
	}
	if value, ok := pouo.mutation.PayType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: payorder.FieldPayType,
		})
	}
	if value, ok := pouo.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoin,
		})
	}
	if value, ok := pouo.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoin,
		})
	}
	if value, ok := pouo.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoupon,
		})
	}
	if value, ok := pouo.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCoupon,
		})
	}
	if value, ok := pouo.mutation.VipDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldVipDays,
		})
	}
	if pouo.mutation.VipDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorder.FieldVipDays,
		})
	}
	if value, ok := pouo.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldVipType,
		})
	}
	if value, ok := pouo.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldVipType,
		})
	}
	if pouo.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: payorder.FieldVipType,
		})
	}
	if value, ok := pouo.mutation.VipName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldVipName,
		})
	}
	if pouo.mutation.VipNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorder.FieldVipName,
		})
	}
	if value, ok := pouo.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldTimes,
		})
	}
	if value, ok := pouo.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payorder.FieldTimes,
		})
	}
	if value, ok := pouo.mutation.OtherOrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldOtherOrderId,
		})
	}
	if pouo.mutation.OtherOrderIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorder.FieldOtherOrderId,
		})
	}
	if value, ok := pouo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldRemark,
		})
	}
	if pouo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorder.FieldRemark,
		})
	}
	if value, ok := pouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldUpdatedAt,
		})
	}
	if value, ok := pouo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCreateBy,
		})
	}
	if value, ok := pouo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldCreateBy,
		})
	}
	if value, ok := pouo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldUpdateBy,
		})
	}
	if value, ok := pouo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldUpdateBy,
		})
	}
	if value, ok := pouo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldTenantId,
		})
	}
	if value, ok := pouo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payorder.FieldTenantId,
		})
	}
	if pouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.UserTable,
			Columns: []string{payorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.UserTable,
			Columns: []string{payorder.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.ChannelTable,
			Columns: []string{payorder.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.ChannelTable,
			Columns: []string{payorder.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.AgreementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.AgreementTable,
			Columns: []string{payorder.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: agreementlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.AgreementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payorder.AgreementTable,
			Columns: []string{payorder.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: agreementlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PayOrder{config: pouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
