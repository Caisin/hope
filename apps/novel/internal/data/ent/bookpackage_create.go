// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/bookpackage"
	"hope/apps/novel/internal/data/ent/novel"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookPackageCreate is the builder for creating a BookPackage entity.
type BookPackageCreate struct {
	config
	mutation *BookPackageMutation
	hooks    []Hook
}

// SetActivityCode sets the "activityCode" field.
func (bpc *BookPackageCreate) SetActivityCode(s string) *BookPackageCreate {
	bpc.mutation.SetActivityCode(s)
	return bpc
}

// SetNillableActivityCode sets the "activityCode" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillableActivityCode(s *string) *BookPackageCreate {
	if s != nil {
		bpc.SetActivityCode(*s)
	}
	return bpc
}

// SetPackageName sets the "packageName" field.
func (bpc *BookPackageCreate) SetPackageName(s string) *BookPackageCreate {
	bpc.mutation.SetPackageName(s)
	return bpc
}

// SetNillablePackageName sets the "packageName" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillablePackageName(s *string) *BookPackageCreate {
	if s != nil {
		bpc.SetPackageName(*s)
	}
	return bpc
}

// SetPrice sets the "price" field.
func (bpc *BookPackageCreate) SetPrice(i int64) *BookPackageCreate {
	bpc.mutation.SetPrice(i)
	return bpc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillablePrice(i *int64) *BookPackageCreate {
	if i != nil {
		bpc.SetPrice(*i)
	}
	return bpc
}

// SetDailyPrice sets the "dailyPrice" field.
func (bpc *BookPackageCreate) SetDailyPrice(i int64) *BookPackageCreate {
	bpc.mutation.SetDailyPrice(i)
	return bpc
}

// SetNillableDailyPrice sets the "dailyPrice" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillableDailyPrice(i *int64) *BookPackageCreate {
	if i != nil {
		bpc.SetDailyPrice(*i)
	}
	return bpc
}

// SetEffectTime sets the "effectTime" field.
func (bpc *BookPackageCreate) SetEffectTime(t time.Time) *BookPackageCreate {
	bpc.mutation.SetEffectTime(t)
	return bpc
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillableEffectTime(t *time.Time) *BookPackageCreate {
	if t != nil {
		bpc.SetEffectTime(*t)
	}
	return bpc
}

// SetExpiredTime sets the "expiredTime" field.
func (bpc *BookPackageCreate) SetExpiredTime(t time.Time) *BookPackageCreate {
	bpc.mutation.SetExpiredTime(t)
	return bpc
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillableExpiredTime(t *time.Time) *BookPackageCreate {
	if t != nil {
		bpc.SetExpiredTime(*t)
	}
	return bpc
}

// SetCreatedAt sets the "createdAt" field.
func (bpc *BookPackageCreate) SetCreatedAt(t time.Time) *BookPackageCreate {
	bpc.mutation.SetCreatedAt(t)
	return bpc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillableCreatedAt(t *time.Time) *BookPackageCreate {
	if t != nil {
		bpc.SetCreatedAt(*t)
	}
	return bpc
}

// SetUpdatedAt sets the "updatedAt" field.
func (bpc *BookPackageCreate) SetUpdatedAt(t time.Time) *BookPackageCreate {
	bpc.mutation.SetUpdatedAt(t)
	return bpc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillableUpdatedAt(t *time.Time) *BookPackageCreate {
	if t != nil {
		bpc.SetUpdatedAt(*t)
	}
	return bpc
}

// SetCreateBy sets the "createBy" field.
func (bpc *BookPackageCreate) SetCreateBy(i int64) *BookPackageCreate {
	bpc.mutation.SetCreateBy(i)
	return bpc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillableCreateBy(i *int64) *BookPackageCreate {
	if i != nil {
		bpc.SetCreateBy(*i)
	}
	return bpc
}

// SetUpdateBy sets the "updateBy" field.
func (bpc *BookPackageCreate) SetUpdateBy(i int64) *BookPackageCreate {
	bpc.mutation.SetUpdateBy(i)
	return bpc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillableUpdateBy(i *int64) *BookPackageCreate {
	if i != nil {
		bpc.SetUpdateBy(*i)
	}
	return bpc
}

// SetTenantId sets the "tenantId" field.
func (bpc *BookPackageCreate) SetTenantId(i int64) *BookPackageCreate {
	bpc.mutation.SetTenantId(i)
	return bpc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (bpc *BookPackageCreate) SetNillableTenantId(i *int64) *BookPackageCreate {
	if i != nil {
		bpc.SetTenantId(*i)
	}
	return bpc
}

// AddBookIDs adds the "books" edge to the Novel entity by IDs.
func (bpc *BookPackageCreate) AddBookIDs(ids ...int64) *BookPackageCreate {
	bpc.mutation.AddBookIDs(ids...)
	return bpc
}

// AddBooks adds the "books" edges to the Novel entity.
func (bpc *BookPackageCreate) AddBooks(n ...*Novel) *BookPackageCreate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bpc.AddBookIDs(ids...)
}

// Mutation returns the BookPackageMutation object of the builder.
func (bpc *BookPackageCreate) Mutation() *BookPackageMutation {
	return bpc.mutation
}

// Save creates the BookPackage in the database.
func (bpc *BookPackageCreate) Save(ctx context.Context) (*BookPackage, error) {
	var (
		err  error
		node *BookPackage
	)
	bpc.defaults()
	if len(bpc.hooks) == 0 {
		if err = bpc.check(); err != nil {
			return nil, err
		}
		node, err = bpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookPackageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bpc.check(); err != nil {
				return nil, err
			}
			bpc.mutation = mutation
			if node, err = bpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bpc.hooks) - 1; i >= 0; i-- {
			if bpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bpc *BookPackageCreate) SaveX(ctx context.Context) *BookPackage {
	v, err := bpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpc *BookPackageCreate) Exec(ctx context.Context) error {
	_, err := bpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpc *BookPackageCreate) ExecX(ctx context.Context) {
	if err := bpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpc *BookPackageCreate) defaults() {
	if _, ok := bpc.mutation.EffectTime(); !ok {
		v := bookpackage.DefaultEffectTime()
		bpc.mutation.SetEffectTime(v)
	}
	if _, ok := bpc.mutation.ExpiredTime(); !ok {
		v := bookpackage.DefaultExpiredTime()
		bpc.mutation.SetExpiredTime(v)
	}
	if _, ok := bpc.mutation.CreatedAt(); !ok {
		v := bookpackage.DefaultCreatedAt()
		bpc.mutation.SetCreatedAt(v)
	}
	if _, ok := bpc.mutation.UpdatedAt(); !ok {
		v := bookpackage.DefaultUpdatedAt()
		bpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bpc.mutation.CreateBy(); !ok {
		v := bookpackage.DefaultCreateBy
		bpc.mutation.SetCreateBy(v)
	}
	if _, ok := bpc.mutation.UpdateBy(); !ok {
		v := bookpackage.DefaultUpdateBy
		bpc.mutation.SetUpdateBy(v)
	}
	if _, ok := bpc.mutation.TenantId(); !ok {
		v := bookpackage.DefaultTenantId
		bpc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpc *BookPackageCreate) check() error {
	if _, ok := bpc.mutation.EffectTime(); !ok {
		return &ValidationError{Name: "effectTime", err: errors.New(`ent: missing required field "effectTime"`)}
	}
	if _, ok := bpc.mutation.ExpiredTime(); !ok {
		return &ValidationError{Name: "expiredTime", err: errors.New(`ent: missing required field "expiredTime"`)}
	}
	if _, ok := bpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := bpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := bpc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := bpc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := bpc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (bpc *BookPackageCreate) sqlSave(ctx context.Context) (*BookPackage, error) {
	_node, _spec := bpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (bpc *BookPackageCreate) createSpec() (*BookPackage, *sqlgraph.CreateSpec) {
	var (
		_node = &BookPackage{config: bpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bookpackage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bookpackage.FieldID,
			},
		}
	)
	if value, ok := bpc.mutation.ActivityCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookpackage.FieldActivityCode,
		})
		_node.ActivityCode = value
	}
	if value, ok := bpc.mutation.PackageName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookpackage.FieldPackageName,
		})
		_node.PackageName = value
	}
	if value, ok := bpc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := bpc.mutation.DailyPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldDailyPrice,
		})
		_node.DailyPrice = value
	}
	if value, ok := bpc.mutation.EffectTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldEffectTime,
		})
		_node.EffectTime = value
	}
	if value, ok := bpc.mutation.ExpiredTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldExpiredTime,
		})
		_node.ExpiredTime = value
	}
	if value, ok := bpc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bpc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := bpc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := bpc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := bpc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := bpc.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bookpackage.BooksTable,
			Columns: bookpackage.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BookPackageCreateBulk is the builder for creating many BookPackage entities in bulk.
type BookPackageCreateBulk struct {
	config
	builders []*BookPackageCreate
}

// Save creates the BookPackage entities in the database.
func (bpcb *BookPackageCreateBulk) Save(ctx context.Context) ([]*BookPackage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bpcb.builders))
	nodes := make([]*BookPackage, len(bpcb.builders))
	mutators := make([]Mutator, len(bpcb.builders))
	for i := range bpcb.builders {
		func(i int, root context.Context) {
			builder := bpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookPackageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bpcb *BookPackageCreateBulk) SaveX(ctx context.Context) []*BookPackage {
	v, err := bpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpcb *BookPackageCreateBulk) Exec(ctx context.Context) error {
	_, err := bpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpcb *BookPackageCreateBulk) ExecX(ctx context.Context) {
	if err := bpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
