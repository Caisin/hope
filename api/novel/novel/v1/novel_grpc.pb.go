// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/novel/v1/novel.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelClient is the client API for Novel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelClient interface {
	// 分页查询Novel
	GetNovelPage(ctx context.Context, in *NovelPageReq, opts ...grpc.CallOption) (*NovelPageReply, error)
	// 获取Novel
	GetNovel(ctx context.Context, in *NovelReq, opts ...grpc.CallOption) (*NovelReply, error)
	// 更新Novel
	UpdateNovel(ctx context.Context, in *NovelUpdateReq, opts ...grpc.CallOption) (*NovelUpdateReply, error)
	// 创建Novel
	CreateNovel(ctx context.Context, in *NovelCreateReq, opts ...grpc.CallOption) (*NovelCreateReply, error)
	// 删除Novel
	DeleteNovel(ctx context.Context, in *NovelDeleteReq, opts ...grpc.CallOption) (*NovelDeleteReply, error)
	// 批量删除Novel
	BatchDeleteNovel(ctx context.Context, in *NovelBatchDeleteReq, opts ...grpc.CallOption) (*NovelDeleteReply, error)
}

type novelClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelClient(cc grpc.ClientConnInterface) NovelClient {
	return &novelClient{cc}
}

func (c *novelClient) GetNovelPage(ctx context.Context, in *NovelPageReq, opts ...grpc.CallOption) (*NovelPageReply, error) {
	out := new(NovelPageReply)
	err := c.cc.Invoke(ctx, "/novel.v1.Novel/GetNovelPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelClient) GetNovel(ctx context.Context, in *NovelReq, opts ...grpc.CallOption) (*NovelReply, error) {
	out := new(NovelReply)
	err := c.cc.Invoke(ctx, "/novel.v1.Novel/GetNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelClient) UpdateNovel(ctx context.Context, in *NovelUpdateReq, opts ...grpc.CallOption) (*NovelUpdateReply, error) {
	out := new(NovelUpdateReply)
	err := c.cc.Invoke(ctx, "/novel.v1.Novel/UpdateNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelClient) CreateNovel(ctx context.Context, in *NovelCreateReq, opts ...grpc.CallOption) (*NovelCreateReply, error) {
	out := new(NovelCreateReply)
	err := c.cc.Invoke(ctx, "/novel.v1.Novel/CreateNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelClient) DeleteNovel(ctx context.Context, in *NovelDeleteReq, opts ...grpc.CallOption) (*NovelDeleteReply, error) {
	out := new(NovelDeleteReply)
	err := c.cc.Invoke(ctx, "/novel.v1.Novel/DeleteNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelClient) BatchDeleteNovel(ctx context.Context, in *NovelBatchDeleteReq, opts ...grpc.CallOption) (*NovelDeleteReply, error) {
	out := new(NovelDeleteReply)
	err := c.cc.Invoke(ctx, "/novel.v1.Novel/BatchDeleteNovel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelServer is the server API for Novel service.
// All implementations must embed UnimplementedNovelServer
// for forward compatibility
type NovelServer interface {
	// 分页查询Novel
	GetNovelPage(context.Context, *NovelPageReq) (*NovelPageReply, error)
	// 获取Novel
	GetNovel(context.Context, *NovelReq) (*NovelReply, error)
	// 更新Novel
	UpdateNovel(context.Context, *NovelUpdateReq) (*NovelUpdateReply, error)
	// 创建Novel
	CreateNovel(context.Context, *NovelCreateReq) (*NovelCreateReply, error)
	// 删除Novel
	DeleteNovel(context.Context, *NovelDeleteReq) (*NovelDeleteReply, error)
	// 批量删除Novel
	BatchDeleteNovel(context.Context, *NovelBatchDeleteReq) (*NovelDeleteReply, error)
	mustEmbedUnimplementedNovelServer()
}

// UnimplementedNovelServer must be embedded to have forward compatible implementations.
type UnimplementedNovelServer struct {
}

func (UnimplementedNovelServer) GetNovelPage(context.Context, *NovelPageReq) (*NovelPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelPage not implemented")
}
func (UnimplementedNovelServer) GetNovel(context.Context, *NovelReq) (*NovelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovel not implemented")
}
func (UnimplementedNovelServer) UpdateNovel(context.Context, *NovelUpdateReq) (*NovelUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNovel not implemented")
}
func (UnimplementedNovelServer) CreateNovel(context.Context, *NovelCreateReq) (*NovelCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNovel not implemented")
}
func (UnimplementedNovelServer) DeleteNovel(context.Context, *NovelDeleteReq) (*NovelDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNovel not implemented")
}
func (UnimplementedNovelServer) BatchDeleteNovel(context.Context, *NovelBatchDeleteReq) (*NovelDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNovel not implemented")
}
func (UnimplementedNovelServer) mustEmbedUnimplementedNovelServer() {}

// UnsafeNovelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelServer will
// result in compilation errors.
type UnsafeNovelServer interface {
	mustEmbedUnimplementedNovelServer()
}

func RegisterNovelServer(s grpc.ServiceRegistrar, srv NovelServer) {
	s.RegisterService(&Novel_ServiceDesc, srv)
}

func _Novel_GetNovelPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServer).GetNovelPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.v1.Novel/GetNovelPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServer).GetNovelPage(ctx, req.(*NovelPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novel_GetNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServer).GetNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.v1.Novel/GetNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServer).GetNovel(ctx, req.(*NovelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novel_UpdateNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServer).UpdateNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.v1.Novel/UpdateNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServer).UpdateNovel(ctx, req.(*NovelUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novel_CreateNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServer).CreateNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.v1.Novel/CreateNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServer).CreateNovel(ctx, req.(*NovelCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novel_DeleteNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServer).DeleteNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.v1.Novel/DeleteNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServer).DeleteNovel(ctx, req.(*NovelDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Novel_BatchDeleteNovel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelServer).BatchDeleteNovel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.v1.Novel/BatchDeleteNovel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelServer).BatchDeleteNovel(ctx, req.(*NovelBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Novel_ServiceDesc is the grpc.ServiceDesc for Novel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Novel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novel.v1.Novel",
	HandlerType: (*NovelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNovelPage",
			Handler:    _Novel_GetNovelPage_Handler,
		},
		{
			MethodName: "GetNovel",
			Handler:    _Novel_GetNovel_Handler,
		},
		{
			MethodName: "UpdateNovel",
			Handler:    _Novel_UpdateNovel_Handler,
		},
		{
			MethodName: "CreateNovel",
			Handler:    _Novel_CreateNovel_Handler,
		},
		{
			MethodName: "DeleteNovel",
			Handler:    _Novel_DeleteNovel_Handler,
		},
		{
			MethodName: "BatchDeleteNovel",
			Handler:    _Novel_BatchDeleteNovel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/novel/v1/novel.proto",
}
