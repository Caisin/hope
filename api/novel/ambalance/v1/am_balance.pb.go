// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/ambalance/v1/am_balance.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询搜索请求
type AmBalancePageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *AmBalanceReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AmBalancePageReq) Reset() {
	*x = AmBalancePageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalancePageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalancePageReq) ProtoMessage() {}

func (x *AmBalancePageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalancePageReq.ProtoReflect.Descriptor instead.
func (*AmBalancePageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{0}
}

func (x *AmBalancePageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *AmBalancePageReq) GetParam() *AmBalanceReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type AmBalancePageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条目
	Items []*AmBalanceReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AmBalancePageReply) Reset() {
	*x = AmBalancePageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalancePageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalancePageReply) ProtoMessage() {}

func (x *AmBalancePageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalancePageReply.ProtoReflect.Descriptor instead.
func (*AmBalancePageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{1}
}

func (x *AmBalancePageReply) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *AmBalancePageReply) GetItems() []*AmBalanceReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type AmBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//订单号
	OrderId string `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	//关联用户事件Id
	EventId int64 `protobuf:"varint,4,opt,name=eventId,proto3" json:"eventId,omitempty"`
	//现金标识,0优惠券 1书币
	CashTag int32 `protobuf:"varint,5,opt,name=cashTag,proto3" json:"cashTag,omitempty"`
	//账本科目
	AssetItemId int32 `protobuf:"varint,6,opt,name=assetItemId,proto3" json:"assetItemId,omitempty"`
	//原始金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//剩余可用
	Balance int64 `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,14,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,15,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,16,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *AmBalanceReq) Reset() {
	*x = AmBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalanceReq) ProtoMessage() {}

func (x *AmBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalanceReq.ProtoReflect.Descriptor instead.
func (*AmBalanceReq) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{2}
}

func (x *AmBalanceReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AmBalanceReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AmBalanceReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AmBalanceReq) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *AmBalanceReq) GetCashTag() int32 {
	if x != nil {
		return x.CashTag
	}
	return 0
}

func (x *AmBalanceReq) GetAssetItemId() int32 {
	if x != nil {
		return x.AssetItemId
	}
	return 0
}

func (x *AmBalanceReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AmBalanceReq) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AmBalanceReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AmBalanceReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *AmBalanceReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *AmBalanceReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AmBalanceReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AmBalanceReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *AmBalanceReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *AmBalanceReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索返回
type AmBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//订单号
	OrderId string `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	//关联用户事件Id
	EventId int64 `protobuf:"varint,4,opt,name=eventId,proto3" json:"eventId,omitempty"`
	//现金标识,0优惠券 1书币
	CashTag int32 `protobuf:"varint,5,opt,name=cashTag,proto3" json:"cashTag,omitempty"`
	//账本科目
	AssetItemId int32 `protobuf:"varint,6,opt,name=assetItemId,proto3" json:"assetItemId,omitempty"`
	//原始金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//剩余可用
	Balance int64 `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,14,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,15,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,16,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *AmBalanceReply) Reset() {
	*x = AmBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalanceReply) ProtoMessage() {}

func (x *AmBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalanceReply.ProtoReflect.Descriptor instead.
func (*AmBalanceReply) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{3}
}

func (x *AmBalanceReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AmBalanceReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AmBalanceReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AmBalanceReply) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *AmBalanceReply) GetCashTag() int32 {
	if x != nil {
		return x.CashTag
	}
	return 0
}

func (x *AmBalanceReply) GetAssetItemId() int32 {
	if x != nil {
		return x.AssetItemId
	}
	return 0
}

func (x *AmBalanceReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AmBalanceReply) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AmBalanceReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AmBalanceReply) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *AmBalanceReply) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *AmBalanceReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AmBalanceReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AmBalanceReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *AmBalanceReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *AmBalanceReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 创建AmBalance请求
type AmBalanceCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户ID
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	//订单号
	OrderId string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	//关联用户事件Id
	EventId int64 `protobuf:"varint,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
	//现金标识,0优惠券 1书币
	CashTag int32 `protobuf:"varint,4,opt,name=cashTag,proto3" json:"cashTag,omitempty"`
	//账本科目
	AssetItemId int32 `protobuf:"varint,5,opt,name=assetItemId,proto3" json:"assetItemId,omitempty"`
	//原始金额
	Amount int64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	//剩余可用
	Balance int64 `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	//备注
	Remark string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *AmBalanceCreateReq) Reset() {
	*x = AmBalanceCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalanceCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalanceCreateReq) ProtoMessage() {}

func (x *AmBalanceCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalanceCreateReq.ProtoReflect.Descriptor instead.
func (*AmBalanceCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{4}
}

func (x *AmBalanceCreateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AmBalanceCreateReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AmBalanceCreateReq) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *AmBalanceCreateReq) GetCashTag() int32 {
	if x != nil {
		return x.CashTag
	}
	return 0
}

func (x *AmBalanceCreateReq) GetAssetItemId() int32 {
	if x != nil {
		return x.AssetItemId
	}
	return 0
}

func (x *AmBalanceCreateReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AmBalanceCreateReq) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AmBalanceCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AmBalanceCreateReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *AmBalanceCreateReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 创建AmBalance返回
type AmBalanceCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//订单号
	OrderId string `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	//关联用户事件Id
	EventId int64 `protobuf:"varint,4,opt,name=eventId,proto3" json:"eventId,omitempty"`
	//现金标识,0优惠券 1书币
	CashTag int32 `protobuf:"varint,5,opt,name=cashTag,proto3" json:"cashTag,omitempty"`
	//账本科目
	AssetItemId int32 `protobuf:"varint,6,opt,name=assetItemId,proto3" json:"assetItemId,omitempty"`
	//原始金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//剩余可用
	Balance int64 `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,14,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,15,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,16,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *AmBalanceCreateReply) Reset() {
	*x = AmBalanceCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalanceCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalanceCreateReply) ProtoMessage() {}

func (x *AmBalanceCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalanceCreateReply.ProtoReflect.Descriptor instead.
func (*AmBalanceCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{5}
}

func (x *AmBalanceCreateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AmBalanceCreateReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AmBalanceCreateReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AmBalanceCreateReply) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *AmBalanceCreateReply) GetCashTag() int32 {
	if x != nil {
		return x.CashTag
	}
	return 0
}

func (x *AmBalanceCreateReply) GetAssetItemId() int32 {
	if x != nil {
		return x.AssetItemId
	}
	return 0
}

func (x *AmBalanceCreateReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AmBalanceCreateReply) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AmBalanceCreateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AmBalanceCreateReply) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *AmBalanceCreateReply) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *AmBalanceCreateReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AmBalanceCreateReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AmBalanceCreateReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *AmBalanceCreateReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *AmBalanceCreateReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 更新AmBalance请求
type AmBalanceUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//订单号
	OrderId string `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	//关联用户事件Id
	EventId int64 `protobuf:"varint,4,opt,name=eventId,proto3" json:"eventId,omitempty"`
	//现金标识,0优惠券 1书币
	CashTag int32 `protobuf:"varint,5,opt,name=cashTag,proto3" json:"cashTag,omitempty"`
	//账本科目
	AssetItemId int32 `protobuf:"varint,6,opt,name=assetItemId,proto3" json:"assetItemId,omitempty"`
	//原始金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//剩余可用
	Balance int64 `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *AmBalanceUpdateReq) Reset() {
	*x = AmBalanceUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalanceUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalanceUpdateReq) ProtoMessage() {}

func (x *AmBalanceUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalanceUpdateReq.ProtoReflect.Descriptor instead.
func (*AmBalanceUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{6}
}

func (x *AmBalanceUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AmBalanceUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AmBalanceUpdateReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AmBalanceUpdateReq) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *AmBalanceUpdateReq) GetCashTag() int32 {
	if x != nil {
		return x.CashTag
	}
	return 0
}

func (x *AmBalanceUpdateReq) GetAssetItemId() int32 {
	if x != nil {
		return x.AssetItemId
	}
	return 0
}

func (x *AmBalanceUpdateReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AmBalanceUpdateReq) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AmBalanceUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AmBalanceUpdateReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *AmBalanceUpdateReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 更新AmBalance返回
type AmBalanceUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//订单号
	OrderId string `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	//关联用户事件Id
	EventId int64 `protobuf:"varint,4,opt,name=eventId,proto3" json:"eventId,omitempty"`
	//现金标识,0优惠券 1书币
	CashTag int32 `protobuf:"varint,5,opt,name=cashTag,proto3" json:"cashTag,omitempty"`
	//账本科目
	AssetItemId int32 `protobuf:"varint,6,opt,name=assetItemId,proto3" json:"assetItemId,omitempty"`
	//原始金额
	Amount int64 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	//剩余可用
	Balance int64 `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *AmBalanceUpdateReply) Reset() {
	*x = AmBalanceUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalanceUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalanceUpdateReply) ProtoMessage() {}

func (x *AmBalanceUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalanceUpdateReply.ProtoReflect.Descriptor instead.
func (*AmBalanceUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{7}
}

func (x *AmBalanceUpdateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AmBalanceUpdateReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AmBalanceUpdateReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AmBalanceUpdateReply) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *AmBalanceUpdateReply) GetCashTag() int32 {
	if x != nil {
		return x.CashTag
	}
	return 0
}

func (x *AmBalanceUpdateReply) GetAssetItemId() int32 {
	if x != nil {
		return x.AssetItemId
	}
	return 0
}

func (x *AmBalanceUpdateReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AmBalanceUpdateReply) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AmBalanceUpdateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AmBalanceUpdateReply) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *AmBalanceUpdateReply) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 删除AmBalance请求
type AmBalanceDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AmBalanceDeleteReq) Reset() {
	*x = AmBalanceDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalanceDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalanceDeleteReq) ProtoMessage() {}

func (x *AmBalanceDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalanceDeleteReq.ProtoReflect.Descriptor instead.
func (*AmBalanceDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{8}
}

func (x *AmBalanceDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除AmBalance请求
type AmBalanceBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *AmBalanceBatchDeleteReq) Reset() {
	*x = AmBalanceBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalanceBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalanceBatchDeleteReq) ProtoMessage() {}

func (x *AmBalanceBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalanceBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*AmBalanceBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{9}
}

func (x *AmBalanceBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除AmBalance返回
type AmBalanceDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AmBalanceDeleteReply) Reset() {
	*x = AmBalanceDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmBalanceDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmBalanceDeleteReply) ProtoMessage() {}

func (x *AmBalanceDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_ambalance_v1_am_balance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmBalanceDeleteReply.ProtoReflect.Descriptor instead.
func (*AmBalanceDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP(), []int{10}
}

func (x *AmBalanceDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_ambalance_v1_am_balance_proto protoreflect.FileDescriptor

var file_api_novel_ambalance_v1_am_balance_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x61, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6d, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x6d, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x10, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x71, 0x0a, 0x12, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb2, 0x04, 0x0a, 0x0c, 0x41, 0x6d, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x04, 0x0a,
	0x0e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61,
	0x73, 0x68, 0x54, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xe0, 0x02, 0x0a, 0x12, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x68, 0x54, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x0a,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xba, 0x04, 0x0a, 0x14, 0x41, 0x6d, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61,
	0x73, 0x68, 0x54, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xf0, 0x02, 0x0a, 0x12, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x68, 0x54, 0x61,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x0a,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x14, 0x41, 0x6d, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61,
	0x73, 0x68, 0x54, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x41,
	0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x2b, 0x0a, 0x17, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2e,
	0x0a, 0x14, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xbd,
	0x05, 0x0a, 0x09, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x64,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x6d, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x76, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6d,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6d, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x20, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x73, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x61,
	0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a,
	0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x20,
	0x5a, 0x1e, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2f, 0x61, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_novel_ambalance_v1_am_balance_proto_rawDescOnce sync.Once
	file_api_novel_ambalance_v1_am_balance_proto_rawDescData = file_api_novel_ambalance_v1_am_balance_proto_rawDesc
)

func file_api_novel_ambalance_v1_am_balance_proto_rawDescGZIP() []byte {
	file_api_novel_ambalance_v1_am_balance_proto_rawDescOnce.Do(func() {
		file_api_novel_ambalance_v1_am_balance_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_ambalance_v1_am_balance_proto_rawDescData)
	})
	return file_api_novel_ambalance_v1_am_balance_proto_rawDescData
}

var file_api_novel_ambalance_v1_am_balance_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_novel_ambalance_v1_am_balance_proto_goTypes = []interface{}{
	(*AmBalancePageReq)(nil),        // 0: ambalance.v1.AmBalancePageReq
	(*AmBalancePageReply)(nil),      // 1: ambalance.v1.AmBalancePageReply
	(*AmBalanceReq)(nil),            // 2: ambalance.v1.AmBalanceReq
	(*AmBalanceReply)(nil),          // 3: ambalance.v1.AmBalanceReply
	(*AmBalanceCreateReq)(nil),      // 4: ambalance.v1.AmBalanceCreateReq
	(*AmBalanceCreateReply)(nil),    // 5: ambalance.v1.AmBalanceCreateReply
	(*AmBalanceUpdateReq)(nil),      // 6: ambalance.v1.AmBalanceUpdateReq
	(*AmBalanceUpdateReply)(nil),    // 7: ambalance.v1.AmBalanceUpdateReply
	(*AmBalanceDeleteReq)(nil),      // 8: ambalance.v1.AmBalanceDeleteReq
	(*AmBalanceBatchDeleteReq)(nil), // 9: ambalance.v1.AmBalanceBatchDeleteReq
	(*AmBalanceDeleteReply)(nil),    // 10: ambalance.v1.AmBalanceDeleteReply
	(*pagin.Pagination)(nil),        // 11: pagin.Pagination
	(*timestamppb.Timestamp)(nil),   // 12: google.protobuf.Timestamp
}
var file_api_novel_ambalance_v1_am_balance_proto_depIdxs = []int32{
	11, // 0: ambalance.v1.AmBalancePageReq.pagin:type_name -> pagin.Pagination
	2,  // 1: ambalance.v1.AmBalancePageReq.param:type_name -> ambalance.v1.AmBalanceReq
	11, // 2: ambalance.v1.AmBalancePageReply.pagin:type_name -> pagin.Pagination
	3,  // 3: ambalance.v1.AmBalancePageReply.items:type_name -> ambalance.v1.AmBalanceReply
	12, // 4: ambalance.v1.AmBalanceReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 5: ambalance.v1.AmBalanceReq.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 6: ambalance.v1.AmBalanceReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 7: ambalance.v1.AmBalanceReq.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 8: ambalance.v1.AmBalanceReply.effectTime:type_name -> google.protobuf.Timestamp
	12, // 9: ambalance.v1.AmBalanceReply.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 10: ambalance.v1.AmBalanceReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 11: ambalance.v1.AmBalanceReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 12: ambalance.v1.AmBalanceCreateReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 13: ambalance.v1.AmBalanceCreateReq.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 14: ambalance.v1.AmBalanceCreateReply.effectTime:type_name -> google.protobuf.Timestamp
	12, // 15: ambalance.v1.AmBalanceCreateReply.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 16: ambalance.v1.AmBalanceCreateReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 17: ambalance.v1.AmBalanceCreateReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 18: ambalance.v1.AmBalanceUpdateReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 19: ambalance.v1.AmBalanceUpdateReq.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 20: ambalance.v1.AmBalanceUpdateReply.effectTime:type_name -> google.protobuf.Timestamp
	12, // 21: ambalance.v1.AmBalanceUpdateReply.expiredTime:type_name -> google.protobuf.Timestamp
	0,  // 22: ambalance.v1.AmBalance.GetPageAmBalance:input_type -> ambalance.v1.AmBalancePageReq
	2,  // 23: ambalance.v1.AmBalance.GetAmBalance:input_type -> ambalance.v1.AmBalanceReq
	6,  // 24: ambalance.v1.AmBalance.UpdateAmBalance:input_type -> ambalance.v1.AmBalanceUpdateReq
	4,  // 25: ambalance.v1.AmBalance.CreateAmBalance:input_type -> ambalance.v1.AmBalanceCreateReq
	8,  // 26: ambalance.v1.AmBalance.DeleteAmBalance:input_type -> ambalance.v1.AmBalanceDeleteReq
	9,  // 27: ambalance.v1.AmBalance.BatchDeleteAmBalance:input_type -> ambalance.v1.AmBalanceBatchDeleteReq
	1,  // 28: ambalance.v1.AmBalance.GetPageAmBalance:output_type -> ambalance.v1.AmBalancePageReply
	3,  // 29: ambalance.v1.AmBalance.GetAmBalance:output_type -> ambalance.v1.AmBalanceReply
	7,  // 30: ambalance.v1.AmBalance.UpdateAmBalance:output_type -> ambalance.v1.AmBalanceUpdateReply
	5,  // 31: ambalance.v1.AmBalance.CreateAmBalance:output_type -> ambalance.v1.AmBalanceCreateReply
	10, // 32: ambalance.v1.AmBalance.DeleteAmBalance:output_type -> ambalance.v1.AmBalanceDeleteReply
	10, // 33: ambalance.v1.AmBalance.BatchDeleteAmBalance:output_type -> ambalance.v1.AmBalanceDeleteReply
	28, // [28:34] is the sub-list for method output_type
	22, // [22:28] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_api_novel_ambalance_v1_am_balance_proto_init() }
func file_api_novel_ambalance_v1_am_balance_proto_init() {
	if File_api_novel_ambalance_v1_am_balance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalancePageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalancePageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalanceCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalanceCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalanceUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalanceUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalanceDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalanceBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_ambalance_v1_am_balance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmBalanceDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_ambalance_v1_am_balance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_ambalance_v1_am_balance_proto_goTypes,
		DependencyIndexes: file_api_novel_ambalance_v1_am_balance_proto_depIdxs,
		MessageInfos:      file_api_novel_ambalance_v1_am_balance_proto_msgTypes,
	}.Build()
	File_api_novel_ambalance_v1_am_balance_proto = out.File
	file_api_novel_ambalance_v1_am_balance_proto_rawDesc = nil
	file_api_novel_ambalance_v1_am_balance_proto_goTypes = nil
	file_api_novel_ambalance_v1_am_balance_proto_depIdxs = nil
}
