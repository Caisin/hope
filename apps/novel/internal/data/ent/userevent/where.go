// Code generated by entc, DO NOT EDIT.

package userevent

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// EventType applies equality check predicate on the "eventType" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventType), v))
	})
}

// NovelId applies equality check predicate on the "novelId" field. It's identical to NovelIdEQ.
func NovelId(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// ChapterId applies equality check predicate on the "chapterId" field. It's identical to ChapterIdEQ.
func ChapterId(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterId), v))
	})
}

// Coin applies equality check predicate on the "coin" field. It's identical to CoinEQ.
func Coin(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoin), v))
	})
}

// Coupon applies equality check predicate on the "coupon" field. It's identical to CouponEQ.
func Coupon(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoupon), v))
	})
}

// Money applies equality check predicate on the "money" field. It's identical to MoneyEQ.
func Money(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoney), v))
	})
}

// Keyword applies equality check predicate on the "keyword" field. It's identical to KeywordEQ.
func Keyword(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeyword), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserId)))
	})
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserId)))
	})
}

// EventTypeEQ applies the EQ predicate on the "eventType" field.
func EventTypeEQ(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventType), v))
	})
}

// EventTypeNEQ applies the NEQ predicate on the "eventType" field.
func EventTypeNEQ(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventType), v))
	})
}

// EventTypeIn applies the In predicate on the "eventType" field.
func EventTypeIn(vs ...string) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEventType), v...))
	})
}

// EventTypeNotIn applies the NotIn predicate on the "eventType" field.
func EventTypeNotIn(vs ...string) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEventType), v...))
	})
}

// EventTypeGT applies the GT predicate on the "eventType" field.
func EventTypeGT(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventType), v))
	})
}

// EventTypeGTE applies the GTE predicate on the "eventType" field.
func EventTypeGTE(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventType), v))
	})
}

// EventTypeLT applies the LT predicate on the "eventType" field.
func EventTypeLT(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventType), v))
	})
}

// EventTypeLTE applies the LTE predicate on the "eventType" field.
func EventTypeLTE(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventType), v))
	})
}

// EventTypeContains applies the Contains predicate on the "eventType" field.
func EventTypeContains(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEventType), v))
	})
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "eventType" field.
func EventTypeHasPrefix(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEventType), v))
	})
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "eventType" field.
func EventTypeHasSuffix(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEventType), v))
	})
}

// EventTypeIsNil applies the IsNil predicate on the "eventType" field.
func EventTypeIsNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEventType)))
	})
}

// EventTypeNotNil applies the NotNil predicate on the "eventType" field.
func EventTypeNotNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEventType)))
	})
}

// EventTypeEqualFold applies the EqualFold predicate on the "eventType" field.
func EventTypeEqualFold(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEventType), v))
	})
}

// EventTypeContainsFold applies the ContainsFold predicate on the "eventType" field.
func EventTypeContainsFold(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEventType), v))
	})
}

// NovelIdEQ applies the EQ predicate on the "novelId" field.
func NovelIdEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// NovelIdNEQ applies the NEQ predicate on the "novelId" field.
func NovelIdNEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelId), v))
	})
}

// NovelIdIn applies the In predicate on the "novelId" field.
func NovelIdIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelId), v...))
	})
}

// NovelIdNotIn applies the NotIn predicate on the "novelId" field.
func NovelIdNotIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelId), v...))
	})
}

// NovelIdGT applies the GT predicate on the "novelId" field.
func NovelIdGT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNovelId), v))
	})
}

// NovelIdGTE applies the GTE predicate on the "novelId" field.
func NovelIdGTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNovelId), v))
	})
}

// NovelIdLT applies the LT predicate on the "novelId" field.
func NovelIdLT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNovelId), v))
	})
}

// NovelIdLTE applies the LTE predicate on the "novelId" field.
func NovelIdLTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNovelId), v))
	})
}

// NovelIdIsNil applies the IsNil predicate on the "novelId" field.
func NovelIdIsNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNovelId)))
	})
}

// NovelIdNotNil applies the NotNil predicate on the "novelId" field.
func NovelIdNotNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNovelId)))
	})
}

// ChapterIdEQ applies the EQ predicate on the "chapterId" field.
func ChapterIdEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterId), v))
	})
}

// ChapterIdNEQ applies the NEQ predicate on the "chapterId" field.
func ChapterIdNEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterId), v))
	})
}

// ChapterIdIn applies the In predicate on the "chapterId" field.
func ChapterIdIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterId), v...))
	})
}

// ChapterIdNotIn applies the NotIn predicate on the "chapterId" field.
func ChapterIdNotIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterId), v...))
	})
}

// ChapterIdGT applies the GT predicate on the "chapterId" field.
func ChapterIdGT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterId), v))
	})
}

// ChapterIdGTE applies the GTE predicate on the "chapterId" field.
func ChapterIdGTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterId), v))
	})
}

// ChapterIdLT applies the LT predicate on the "chapterId" field.
func ChapterIdLT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterId), v))
	})
}

// ChapterIdLTE applies the LTE predicate on the "chapterId" field.
func ChapterIdLTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterId), v))
	})
}

// ChapterIdIsNil applies the IsNil predicate on the "chapterId" field.
func ChapterIdIsNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChapterId)))
	})
}

// ChapterIdNotNil applies the NotNil predicate on the "chapterId" field.
func ChapterIdNotNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChapterId)))
	})
}

// CoinEQ applies the EQ predicate on the "coin" field.
func CoinEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoin), v))
	})
}

// CoinNEQ applies the NEQ predicate on the "coin" field.
func CoinNEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoin), v))
	})
}

// CoinIn applies the In predicate on the "coin" field.
func CoinIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoin), v...))
	})
}

// CoinNotIn applies the NotIn predicate on the "coin" field.
func CoinNotIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoin), v...))
	})
}

// CoinGT applies the GT predicate on the "coin" field.
func CoinGT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoin), v))
	})
}

// CoinGTE applies the GTE predicate on the "coin" field.
func CoinGTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoin), v))
	})
}

// CoinLT applies the LT predicate on the "coin" field.
func CoinLT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoin), v))
	})
}

// CoinLTE applies the LTE predicate on the "coin" field.
func CoinLTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoin), v))
	})
}

// CoinIsNil applies the IsNil predicate on the "coin" field.
func CoinIsNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoin)))
	})
}

// CoinNotNil applies the NotNil predicate on the "coin" field.
func CoinNotNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoin)))
	})
}

// CouponEQ applies the EQ predicate on the "coupon" field.
func CouponEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoupon), v))
	})
}

// CouponNEQ applies the NEQ predicate on the "coupon" field.
func CouponNEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoupon), v))
	})
}

// CouponIn applies the In predicate on the "coupon" field.
func CouponIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoupon), v...))
	})
}

// CouponNotIn applies the NotIn predicate on the "coupon" field.
func CouponNotIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoupon), v...))
	})
}

// CouponGT applies the GT predicate on the "coupon" field.
func CouponGT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoupon), v))
	})
}

// CouponGTE applies the GTE predicate on the "coupon" field.
func CouponGTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoupon), v))
	})
}

// CouponLT applies the LT predicate on the "coupon" field.
func CouponLT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoupon), v))
	})
}

// CouponLTE applies the LTE predicate on the "coupon" field.
func CouponLTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoupon), v))
	})
}

// CouponIsNil applies the IsNil predicate on the "coupon" field.
func CouponIsNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCoupon)))
	})
}

// CouponNotNil applies the NotNil predicate on the "coupon" field.
func CouponNotNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCoupon)))
	})
}

// MoneyEQ applies the EQ predicate on the "money" field.
func MoneyEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMoney), v))
	})
}

// MoneyNEQ applies the NEQ predicate on the "money" field.
func MoneyNEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMoney), v))
	})
}

// MoneyIn applies the In predicate on the "money" field.
func MoneyIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMoney), v...))
	})
}

// MoneyNotIn applies the NotIn predicate on the "money" field.
func MoneyNotIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMoney), v...))
	})
}

// MoneyGT applies the GT predicate on the "money" field.
func MoneyGT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMoney), v))
	})
}

// MoneyGTE applies the GTE predicate on the "money" field.
func MoneyGTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMoney), v))
	})
}

// MoneyLT applies the LT predicate on the "money" field.
func MoneyLT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMoney), v))
	})
}

// MoneyLTE applies the LTE predicate on the "money" field.
func MoneyLTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMoney), v))
	})
}

// MoneyIsNil applies the IsNil predicate on the "money" field.
func MoneyIsNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMoney)))
	})
}

// MoneyNotNil applies the NotNil predicate on the "money" field.
func MoneyNotNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMoney)))
	})
}

// KeywordEQ applies the EQ predicate on the "keyword" field.
func KeywordEQ(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeyword), v))
	})
}

// KeywordNEQ applies the NEQ predicate on the "keyword" field.
func KeywordNEQ(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKeyword), v))
	})
}

// KeywordIn applies the In predicate on the "keyword" field.
func KeywordIn(vs ...string) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKeyword), v...))
	})
}

// KeywordNotIn applies the NotIn predicate on the "keyword" field.
func KeywordNotIn(vs ...string) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKeyword), v...))
	})
}

// KeywordGT applies the GT predicate on the "keyword" field.
func KeywordGT(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKeyword), v))
	})
}

// KeywordGTE applies the GTE predicate on the "keyword" field.
func KeywordGTE(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKeyword), v))
	})
}

// KeywordLT applies the LT predicate on the "keyword" field.
func KeywordLT(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKeyword), v))
	})
}

// KeywordLTE applies the LTE predicate on the "keyword" field.
func KeywordLTE(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKeyword), v))
	})
}

// KeywordContains applies the Contains predicate on the "keyword" field.
func KeywordContains(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKeyword), v))
	})
}

// KeywordHasPrefix applies the HasPrefix predicate on the "keyword" field.
func KeywordHasPrefix(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKeyword), v))
	})
}

// KeywordHasSuffix applies the HasSuffix predicate on the "keyword" field.
func KeywordHasSuffix(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKeyword), v))
	})
}

// KeywordIsNil applies the IsNil predicate on the "keyword" field.
func KeywordIsNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKeyword)))
	})
}

// KeywordNotNil applies the NotNil predicate on the "keyword" field.
func KeywordNotNil() predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKeyword)))
	})
}

// KeywordEqualFold applies the EqualFold predicate on the "keyword" field.
func KeywordEqualFold(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKeyword), v))
	})
}

// KeywordContainsFold applies the ContainsFold predicate on the "keyword" field.
func KeywordContainsFold(v string) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKeyword), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.UserEvent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserEvent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserEvent) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserEvent) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserEvent) predicate.UserEvent {
	return predicate.UserEvent(func(s *sql.Selector) {
		p(s.Not())
	})
}
