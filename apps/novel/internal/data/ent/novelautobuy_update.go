// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/novelautobuy"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelAutoBuyUpdate is the builder for updating NovelAutoBuy entities.
type NovelAutoBuyUpdate struct {
	config
	hooks    []Hook
	mutation *NovelAutoBuyMutation
}

// Where appends a list predicates to the NovelAutoBuyUpdate builder.
func (nabu *NovelAutoBuyUpdate) Where(ps ...predicate.NovelAutoBuy) *NovelAutoBuyUpdate {
	nabu.mutation.Where(ps...)
	return nabu
}

// SetUserId sets the "userId" field.
func (nabu *NovelAutoBuyUpdate) SetUserId(i int64) *NovelAutoBuyUpdate {
	nabu.mutation.SetUserId(i)
	return nabu
}

// SetNovelId sets the "novelId" field.
func (nabu *NovelAutoBuyUpdate) SetNovelId(i int64) *NovelAutoBuyUpdate {
	nabu.mutation.ResetNovelId()
	nabu.mutation.SetNovelId(i)
	return nabu
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (nabu *NovelAutoBuyUpdate) SetNillableNovelId(i *int64) *NovelAutoBuyUpdate {
	if i != nil {
		nabu.SetNovelId(*i)
	}
	return nabu
}

// AddNovelId adds i to the "novelId" field.
func (nabu *NovelAutoBuyUpdate) AddNovelId(i int64) *NovelAutoBuyUpdate {
	nabu.mutation.AddNovelId(i)
	return nabu
}

// ClearNovelId clears the value of the "novelId" field.
func (nabu *NovelAutoBuyUpdate) ClearNovelId() *NovelAutoBuyUpdate {
	nabu.mutation.ClearNovelId()
	return nabu
}

// SetUpdatedAt sets the "updatedAt" field.
func (nabu *NovelAutoBuyUpdate) SetUpdatedAt(t time.Time) *NovelAutoBuyUpdate {
	nabu.mutation.SetUpdatedAt(t)
	return nabu
}

// SetCreateBy sets the "createBy" field.
func (nabu *NovelAutoBuyUpdate) SetCreateBy(i int64) *NovelAutoBuyUpdate {
	nabu.mutation.ResetCreateBy()
	nabu.mutation.SetCreateBy(i)
	return nabu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (nabu *NovelAutoBuyUpdate) SetNillableCreateBy(i *int64) *NovelAutoBuyUpdate {
	if i != nil {
		nabu.SetCreateBy(*i)
	}
	return nabu
}

// AddCreateBy adds i to the "createBy" field.
func (nabu *NovelAutoBuyUpdate) AddCreateBy(i int64) *NovelAutoBuyUpdate {
	nabu.mutation.AddCreateBy(i)
	return nabu
}

// SetUpdateBy sets the "updateBy" field.
func (nabu *NovelAutoBuyUpdate) SetUpdateBy(i int64) *NovelAutoBuyUpdate {
	nabu.mutation.ResetUpdateBy()
	nabu.mutation.SetUpdateBy(i)
	return nabu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (nabu *NovelAutoBuyUpdate) SetNillableUpdateBy(i *int64) *NovelAutoBuyUpdate {
	if i != nil {
		nabu.SetUpdateBy(*i)
	}
	return nabu
}

// AddUpdateBy adds i to the "updateBy" field.
func (nabu *NovelAutoBuyUpdate) AddUpdateBy(i int64) *NovelAutoBuyUpdate {
	nabu.mutation.AddUpdateBy(i)
	return nabu
}

// SetTenantId sets the "tenantId" field.
func (nabu *NovelAutoBuyUpdate) SetTenantId(i int64) *NovelAutoBuyUpdate {
	nabu.mutation.ResetTenantId()
	nabu.mutation.SetTenantId(i)
	return nabu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (nabu *NovelAutoBuyUpdate) SetNillableTenantId(i *int64) *NovelAutoBuyUpdate {
	if i != nil {
		nabu.SetTenantId(*i)
	}
	return nabu
}

// AddTenantId adds i to the "tenantId" field.
func (nabu *NovelAutoBuyUpdate) AddTenantId(i int64) *NovelAutoBuyUpdate {
	nabu.mutation.AddTenantId(i)
	return nabu
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (nabu *NovelAutoBuyUpdate) SetUserID(id int64) *NovelAutoBuyUpdate {
	nabu.mutation.SetUserID(id)
	return nabu
}

// SetUser sets the "user" edge to the SocialUser entity.
func (nabu *NovelAutoBuyUpdate) SetUser(s *SocialUser) *NovelAutoBuyUpdate {
	return nabu.SetUserID(s.ID)
}

// Mutation returns the NovelAutoBuyMutation object of the builder.
func (nabu *NovelAutoBuyUpdate) Mutation() *NovelAutoBuyMutation {
	return nabu.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (nabu *NovelAutoBuyUpdate) ClearUser() *NovelAutoBuyUpdate {
	nabu.mutation.ClearUser()
	return nabu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nabu *NovelAutoBuyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nabu.defaults()
	if len(nabu.hooks) == 0 {
		if err = nabu.check(); err != nil {
			return 0, err
		}
		affected, err = nabu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelAutoBuyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nabu.check(); err != nil {
				return 0, err
			}
			nabu.mutation = mutation
			affected, err = nabu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nabu.hooks) - 1; i >= 0; i-- {
			if nabu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nabu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nabu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nabu *NovelAutoBuyUpdate) SaveX(ctx context.Context) int {
	affected, err := nabu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nabu *NovelAutoBuyUpdate) Exec(ctx context.Context) error {
	_, err := nabu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nabu *NovelAutoBuyUpdate) ExecX(ctx context.Context) {
	if err := nabu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nabu *NovelAutoBuyUpdate) defaults() {
	if _, ok := nabu.mutation.UpdatedAt(); !ok {
		v := novelautobuy.UpdateDefaultUpdatedAt()
		nabu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nabu *NovelAutoBuyUpdate) check() error {
	if _, ok := nabu.mutation.UserID(); nabu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NovelAutoBuy.user"`)
	}
	return nil
}

func (nabu *NovelAutoBuyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelautobuy.Table,
			Columns: novelautobuy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelautobuy.FieldID,
			},
		},
	}
	if ps := nabu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nabu.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldNovelId,
		})
	}
	if value, ok := nabu.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldNovelId,
		})
	}
	if nabu.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelautobuy.FieldNovelId,
		})
	}
	if value, ok := nabu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelautobuy.FieldUpdatedAt,
		})
	}
	if value, ok := nabu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldCreateBy,
		})
	}
	if value, ok := nabu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldCreateBy,
		})
	}
	if value, ok := nabu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldUpdateBy,
		})
	}
	if value, ok := nabu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldUpdateBy,
		})
	}
	if value, ok := nabu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldTenantId,
		})
	}
	if value, ok := nabu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldTenantId,
		})
	}
	if nabu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelautobuy.UserTable,
			Columns: []string{novelautobuy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nabu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelautobuy.UserTable,
			Columns: []string{novelautobuy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nabu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelautobuy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NovelAutoBuyUpdateOne is the builder for updating a single NovelAutoBuy entity.
type NovelAutoBuyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NovelAutoBuyMutation
}

// SetUserId sets the "userId" field.
func (nabuo *NovelAutoBuyUpdateOne) SetUserId(i int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.SetUserId(i)
	return nabuo
}

// SetNovelId sets the "novelId" field.
func (nabuo *NovelAutoBuyUpdateOne) SetNovelId(i int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.ResetNovelId()
	nabuo.mutation.SetNovelId(i)
	return nabuo
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (nabuo *NovelAutoBuyUpdateOne) SetNillableNovelId(i *int64) *NovelAutoBuyUpdateOne {
	if i != nil {
		nabuo.SetNovelId(*i)
	}
	return nabuo
}

// AddNovelId adds i to the "novelId" field.
func (nabuo *NovelAutoBuyUpdateOne) AddNovelId(i int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.AddNovelId(i)
	return nabuo
}

// ClearNovelId clears the value of the "novelId" field.
func (nabuo *NovelAutoBuyUpdateOne) ClearNovelId() *NovelAutoBuyUpdateOne {
	nabuo.mutation.ClearNovelId()
	return nabuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (nabuo *NovelAutoBuyUpdateOne) SetUpdatedAt(t time.Time) *NovelAutoBuyUpdateOne {
	nabuo.mutation.SetUpdatedAt(t)
	return nabuo
}

// SetCreateBy sets the "createBy" field.
func (nabuo *NovelAutoBuyUpdateOne) SetCreateBy(i int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.ResetCreateBy()
	nabuo.mutation.SetCreateBy(i)
	return nabuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (nabuo *NovelAutoBuyUpdateOne) SetNillableCreateBy(i *int64) *NovelAutoBuyUpdateOne {
	if i != nil {
		nabuo.SetCreateBy(*i)
	}
	return nabuo
}

// AddCreateBy adds i to the "createBy" field.
func (nabuo *NovelAutoBuyUpdateOne) AddCreateBy(i int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.AddCreateBy(i)
	return nabuo
}

// SetUpdateBy sets the "updateBy" field.
func (nabuo *NovelAutoBuyUpdateOne) SetUpdateBy(i int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.ResetUpdateBy()
	nabuo.mutation.SetUpdateBy(i)
	return nabuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (nabuo *NovelAutoBuyUpdateOne) SetNillableUpdateBy(i *int64) *NovelAutoBuyUpdateOne {
	if i != nil {
		nabuo.SetUpdateBy(*i)
	}
	return nabuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (nabuo *NovelAutoBuyUpdateOne) AddUpdateBy(i int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.AddUpdateBy(i)
	return nabuo
}

// SetTenantId sets the "tenantId" field.
func (nabuo *NovelAutoBuyUpdateOne) SetTenantId(i int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.ResetTenantId()
	nabuo.mutation.SetTenantId(i)
	return nabuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (nabuo *NovelAutoBuyUpdateOne) SetNillableTenantId(i *int64) *NovelAutoBuyUpdateOne {
	if i != nil {
		nabuo.SetTenantId(*i)
	}
	return nabuo
}

// AddTenantId adds i to the "tenantId" field.
func (nabuo *NovelAutoBuyUpdateOne) AddTenantId(i int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.AddTenantId(i)
	return nabuo
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (nabuo *NovelAutoBuyUpdateOne) SetUserID(id int64) *NovelAutoBuyUpdateOne {
	nabuo.mutation.SetUserID(id)
	return nabuo
}

// SetUser sets the "user" edge to the SocialUser entity.
func (nabuo *NovelAutoBuyUpdateOne) SetUser(s *SocialUser) *NovelAutoBuyUpdateOne {
	return nabuo.SetUserID(s.ID)
}

// Mutation returns the NovelAutoBuyMutation object of the builder.
func (nabuo *NovelAutoBuyUpdateOne) Mutation() *NovelAutoBuyMutation {
	return nabuo.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (nabuo *NovelAutoBuyUpdateOne) ClearUser() *NovelAutoBuyUpdateOne {
	nabuo.mutation.ClearUser()
	return nabuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nabuo *NovelAutoBuyUpdateOne) Select(field string, fields ...string) *NovelAutoBuyUpdateOne {
	nabuo.fields = append([]string{field}, fields...)
	return nabuo
}

// Save executes the query and returns the updated NovelAutoBuy entity.
func (nabuo *NovelAutoBuyUpdateOne) Save(ctx context.Context) (*NovelAutoBuy, error) {
	var (
		err  error
		node *NovelAutoBuy
	)
	nabuo.defaults()
	if len(nabuo.hooks) == 0 {
		if err = nabuo.check(); err != nil {
			return nil, err
		}
		node, err = nabuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelAutoBuyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nabuo.check(); err != nil {
				return nil, err
			}
			nabuo.mutation = mutation
			node, err = nabuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nabuo.hooks) - 1; i >= 0; i-- {
			if nabuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nabuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nabuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nabuo *NovelAutoBuyUpdateOne) SaveX(ctx context.Context) *NovelAutoBuy {
	node, err := nabuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nabuo *NovelAutoBuyUpdateOne) Exec(ctx context.Context) error {
	_, err := nabuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nabuo *NovelAutoBuyUpdateOne) ExecX(ctx context.Context) {
	if err := nabuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nabuo *NovelAutoBuyUpdateOne) defaults() {
	if _, ok := nabuo.mutation.UpdatedAt(); !ok {
		v := novelautobuy.UpdateDefaultUpdatedAt()
		nabuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nabuo *NovelAutoBuyUpdateOne) check() error {
	if _, ok := nabuo.mutation.UserID(); nabuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NovelAutoBuy.user"`)
	}
	return nil
}

func (nabuo *NovelAutoBuyUpdateOne) sqlSave(ctx context.Context) (_node *NovelAutoBuy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelautobuy.Table,
			Columns: novelautobuy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelautobuy.FieldID,
			},
		},
	}
	id, ok := nabuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NovelAutoBuy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nabuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, novelautobuy.FieldID)
		for _, f := range fields {
			if !novelautobuy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != novelautobuy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nabuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nabuo.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldNovelId,
		})
	}
	if value, ok := nabuo.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldNovelId,
		})
	}
	if nabuo.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelautobuy.FieldNovelId,
		})
	}
	if value, ok := nabuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelautobuy.FieldUpdatedAt,
		})
	}
	if value, ok := nabuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldCreateBy,
		})
	}
	if value, ok := nabuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldCreateBy,
		})
	}
	if value, ok := nabuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldUpdateBy,
		})
	}
	if value, ok := nabuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldUpdateBy,
		})
	}
	if value, ok := nabuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldTenantId,
		})
	}
	if value, ok := nabuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldTenantId,
		})
	}
	if nabuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelautobuy.UserTable,
			Columns: []string{novelautobuy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nabuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelautobuy.UserTable,
			Columns: []string{novelautobuy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NovelAutoBuy{config: nabuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nabuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelautobuy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
