// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/novelbuychapterrecord/v1/novel_buy_chapter_record.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type NovelBuyChapterRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//章节ID
	ChapterId int64 `protobuf:"varint,4,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节序号
	ChapterOrderNum int32 `protobuf:"varint,5,opt,name=chapterOrderNum,proto3" json:"chapterOrderNum,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,6,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,7,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节名称
	ChapterName string `protobuf:"bytes,8,opt,name=chapterName,proto3" json:"chapterName,omitempty"`
	//是否超级vip记录
	IsSvip bool `protobuf:"varint,9,opt,name=isSvip,proto3" json:"isSvip,omitempty"`
	//花费书币
	Coin int64 `protobuf:"varint,10,opt,name=coin,proto3" json:"coin,omitempty"`
	//花费书券
	Coupon int64 `protobuf:"varint,11,opt,name=coupon,proto3" json:"coupon,omitempty"`
	//折扣金额
	Discount int64 `protobuf:"varint,12,opt,name=discount,proto3" json:"discount,omitempty"`
	//备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,16,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,17,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,18,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelBuyChapterRecordData) Reset() {
	*x = NovelBuyChapterRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordData) ProtoMessage() {}

func (x *NovelBuyChapterRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordData.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordData) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{0}
}

func (x *NovelBuyChapterRecordData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBuyChapterRecordData) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetChapterOrderNum() int32 {
	if x != nil {
		return x.ChapterOrderNum
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *NovelBuyChapterRecordData) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *NovelBuyChapterRecordData) GetIsSvip() bool {
	if x != nil {
		return x.IsSvip
	}
	return false
}

func (x *NovelBuyChapterRecordData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetCoupon() int64 {
	if x != nil {
		return x.Coupon
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelBuyChapterRecordData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelBuyChapterRecordData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelBuyChapterRecordData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelBuyChapterRecordData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type NovelBuyChapterRecordPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *NovelBuyChapterRecordReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *NovelBuyChapterRecordPageReq) Reset() {
	*x = NovelBuyChapterRecordPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordPageReq) ProtoMessage() {}

func (x *NovelBuyChapterRecordPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordPageReq.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{1}
}

func (x *NovelBuyChapterRecordPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *NovelBuyChapterRecordPageReq) GetParam() *NovelBuyChapterRecordReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type NovelBuyChapterRecordPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*NovelBuyChapterRecordData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NovelBuyChapterRecordPageReply) Reset() {
	*x = NovelBuyChapterRecordPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordPageReply) ProtoMessage() {}

func (x *NovelBuyChapterRecordPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordPageReply.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{2}
}

func (x *NovelBuyChapterRecordPageReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyChapterRecordPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyChapterRecordPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NovelBuyChapterRecordPageReply) GetItems() []*NovelBuyChapterRecordData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type NovelBuyChapterRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//章节ID
	ChapterId int64 `protobuf:"varint,4,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节序号
	ChapterOrderNum int32 `protobuf:"varint,5,opt,name=chapterOrderNum,proto3" json:"chapterOrderNum,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,6,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,7,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节名称
	ChapterName string `protobuf:"bytes,8,opt,name=chapterName,proto3" json:"chapterName,omitempty"`
	//是否超级vip记录
	IsSvip bool `protobuf:"varint,9,opt,name=isSvip,proto3" json:"isSvip,omitempty"`
	//花费书币
	Coin int64 `protobuf:"varint,10,opt,name=coin,proto3" json:"coin,omitempty"`
	//花费书券
	Coupon int64 `protobuf:"varint,11,opt,name=coupon,proto3" json:"coupon,omitempty"`
	//折扣金额
	Discount int64 `protobuf:"varint,12,opt,name=discount,proto3" json:"discount,omitempty"`
	//备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,16,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,17,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,18,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelBuyChapterRecordReq) Reset() {
	*x = NovelBuyChapterRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordReq) ProtoMessage() {}

func (x *NovelBuyChapterRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordReq.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{3}
}

func (x *NovelBuyChapterRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBuyChapterRecordReq) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetChapterOrderNum() int32 {
	if x != nil {
		return x.ChapterOrderNum
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *NovelBuyChapterRecordReq) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *NovelBuyChapterRecordReq) GetIsSvip() bool {
	if x != nil {
		return x.IsSvip
	}
	return false
}

func (x *NovelBuyChapterRecordReq) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetCoupon() int64 {
	if x != nil {
		return x.Coupon
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelBuyChapterRecordReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelBuyChapterRecordReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelBuyChapterRecordReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelBuyChapterRecordReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type NovelBuyChapterRecordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelBuyChapterRecordData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelBuyChapterRecordReply) Reset() {
	*x = NovelBuyChapterRecordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordReply) ProtoMessage() {}

func (x *NovelBuyChapterRecordReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordReply.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{4}
}

func (x *NovelBuyChapterRecordReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyChapterRecordReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyChapterRecordReply) GetResult() *NovelBuyChapterRecordData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建NovelBuyChapterRecord请求
type NovelBuyChapterRecordCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户ID
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	//章节ID
	ChapterId int64 `protobuf:"varint,3,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节序号
	ChapterOrderNum int32 `protobuf:"varint,4,opt,name=chapterOrderNum,proto3" json:"chapterOrderNum,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,5,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,6,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节名称
	ChapterName string `protobuf:"bytes,7,opt,name=chapterName,proto3" json:"chapterName,omitempty"`
	//是否超级vip记录
	IsSvip bool `protobuf:"varint,8,opt,name=isSvip,proto3" json:"isSvip,omitempty"`
	//花费书币
	Coin int64 `protobuf:"varint,9,opt,name=coin,proto3" json:"coin,omitempty"`
	//花费书券
	Coupon int64 `protobuf:"varint,10,opt,name=coupon,proto3" json:"coupon,omitempty"`
	//折扣金额
	Discount int64 `protobuf:"varint,11,opt,name=discount,proto3" json:"discount,omitempty"`
	//备注
	Remark string `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelBuyChapterRecordCreateReq) Reset() {
	*x = NovelBuyChapterRecordCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordCreateReq) ProtoMessage() {}

func (x *NovelBuyChapterRecordCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordCreateReq.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{5}
}

func (x *NovelBuyChapterRecordCreateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBuyChapterRecordCreateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBuyChapterRecordCreateReq) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *NovelBuyChapterRecordCreateReq) GetChapterOrderNum() int32 {
	if x != nil {
		return x.ChapterOrderNum
	}
	return 0
}

func (x *NovelBuyChapterRecordCreateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBuyChapterRecordCreateReq) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *NovelBuyChapterRecordCreateReq) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *NovelBuyChapterRecordCreateReq) GetIsSvip() bool {
	if x != nil {
		return x.IsSvip
	}
	return false
}

func (x *NovelBuyChapterRecordCreateReq) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *NovelBuyChapterRecordCreateReq) GetCoupon() int64 {
	if x != nil {
		return x.Coupon
	}
	return 0
}

func (x *NovelBuyChapterRecordCreateReq) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *NovelBuyChapterRecordCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 创建NovelBuyChapterRecord返回
type NovelBuyChapterRecordCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelBuyChapterRecordData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelBuyChapterRecordCreateReply) Reset() {
	*x = NovelBuyChapterRecordCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordCreateReply) ProtoMessage() {}

func (x *NovelBuyChapterRecordCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordCreateReply.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{6}
}

func (x *NovelBuyChapterRecordCreateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyChapterRecordCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyChapterRecordCreateReply) GetResult() *NovelBuyChapterRecordData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新NovelBuyChapterRecord请求
type NovelBuyChapterRecordUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名称
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//章节ID
	ChapterId int64 `protobuf:"varint,4,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节序号
	ChapterOrderNum int32 `protobuf:"varint,5,opt,name=chapterOrderNum,proto3" json:"chapterOrderNum,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,6,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,7,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节名称
	ChapterName string `protobuf:"bytes,8,opt,name=chapterName,proto3" json:"chapterName,omitempty"`
	//是否超级vip记录
	IsSvip bool `protobuf:"varint,9,opt,name=isSvip,proto3" json:"isSvip,omitempty"`
	//花费书币
	Coin int64 `protobuf:"varint,10,opt,name=coin,proto3" json:"coin,omitempty"`
	//花费书券
	Coupon int64 `protobuf:"varint,11,opt,name=coupon,proto3" json:"coupon,omitempty"`
	//折扣金额
	Discount int64 `protobuf:"varint,12,opt,name=discount,proto3" json:"discount,omitempty"`
	//备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelBuyChapterRecordUpdateReq) Reset() {
	*x = NovelBuyChapterRecordUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordUpdateReq) ProtoMessage() {}

func (x *NovelBuyChapterRecordUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordUpdateReq.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{7}
}

func (x *NovelBuyChapterRecordUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBuyChapterRecordUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBuyChapterRecordUpdateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBuyChapterRecordUpdateReq) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *NovelBuyChapterRecordUpdateReq) GetChapterOrderNum() int32 {
	if x != nil {
		return x.ChapterOrderNum
	}
	return 0
}

func (x *NovelBuyChapterRecordUpdateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBuyChapterRecordUpdateReq) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *NovelBuyChapterRecordUpdateReq) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *NovelBuyChapterRecordUpdateReq) GetIsSvip() bool {
	if x != nil {
		return x.IsSvip
	}
	return false
}

func (x *NovelBuyChapterRecordUpdateReq) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *NovelBuyChapterRecordUpdateReq) GetCoupon() int64 {
	if x != nil {
		return x.Coupon
	}
	return 0
}

func (x *NovelBuyChapterRecordUpdateReq) GetDiscount() int64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *NovelBuyChapterRecordUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 更新NovelBuyChapterRecord返回
type NovelBuyChapterRecordUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelBuyChapterRecordData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelBuyChapterRecordUpdateReply) Reset() {
	*x = NovelBuyChapterRecordUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordUpdateReply) ProtoMessage() {}

func (x *NovelBuyChapterRecordUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordUpdateReply.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{8}
}

func (x *NovelBuyChapterRecordUpdateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyChapterRecordUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyChapterRecordUpdateReply) GetResult() *NovelBuyChapterRecordData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除NovelBuyChapterRecord请求
type NovelBuyChapterRecordDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NovelBuyChapterRecordDeleteReq) Reset() {
	*x = NovelBuyChapterRecordDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordDeleteReq) ProtoMessage() {}

func (x *NovelBuyChapterRecordDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{9}
}

func (x *NovelBuyChapterRecordDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除NovelBuyChapterRecord请求
type NovelBuyChapterRecordBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *NovelBuyChapterRecordBatchDeleteReq) Reset() {
	*x = NovelBuyChapterRecordBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordBatchDeleteReq) ProtoMessage() {}

func (x *NovelBuyChapterRecordBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{10}
}

func (x *NovelBuyChapterRecordBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除NovelBuyChapterRecord返回
type NovelBuyChapterRecordDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelBuyChapterRecordDeleteReply) Reset() {
	*x = NovelBuyChapterRecordDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBuyChapterRecordDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBuyChapterRecordDeleteReply) ProtoMessage() {}

func (x *NovelBuyChapterRecordDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBuyChapterRecordDeleteReply.ProtoReflect.Descriptor instead.
func (*NovelBuyChapterRecordDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP(), []int{11}
}

func (x *NovelBuyChapterRecordDeleteReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelBuyChapterRecordDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelBuyChapterRecordDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto protoreflect.FileDescriptor

var file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDesc = []byte{
	0x0a, 0x41, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x04, 0x0a, 0x19,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x53, 0x76, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x53, 0x76, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x91, 0x01, 0x0a, 0x1c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0xaf, 0x01, 0x0a, 0x1e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc0, 0x04, 0x0a, 0x18, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x53, 0x76,
	0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x76, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x1e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x53, 0x76, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53,
	0x76, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75,
	0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xfe, 0x02, 0x0a, 0x1e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x53, 0x76, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x53, 0x76, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75,
	0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62,
	0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x30, 0x0a, 0x1e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x23, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x68, 0x0a, 0x20, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x91, 0x09, 0x0a, 0x15, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0xbb, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x36, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x38, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x62, 0x75, 0x79, 0x2f, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x70, 0x61, 0x67,
	0x65, 0x12, 0xaf, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75,
	0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x32,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x34, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x62, 0x75, 0x79, 0x2f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xc1, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x38, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75,
	0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x1a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x62, 0x75, 0x79,
	0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62,
	0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x3a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x2f, 0x62, 0x75, 0x79, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75,
	0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x3a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f,
	0x62, 0x75, 0x79, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc3, 0x01, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x2e, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x75, 0x79, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a,
	0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x62, 0x75, 0x79, 0x2f, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x2c, 0x5a,
	0x2a, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x75, 0x79, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescOnce sync.Once
	file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescData = file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDesc
)

func file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescGZIP() []byte {
	file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescOnce.Do(func() {
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescData)
	})
	return file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDescData
}

var file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_goTypes = []interface{}{
	(*NovelBuyChapterRecordData)(nil),           // 0: novelbuychapterrecord.v1.NovelBuyChapterRecordData
	(*NovelBuyChapterRecordPageReq)(nil),        // 1: novelbuychapterrecord.v1.NovelBuyChapterRecordPageReq
	(*NovelBuyChapterRecordPageReply)(nil),      // 2: novelbuychapterrecord.v1.NovelBuyChapterRecordPageReply
	(*NovelBuyChapterRecordReq)(nil),            // 3: novelbuychapterrecord.v1.NovelBuyChapterRecordReq
	(*NovelBuyChapterRecordReply)(nil),          // 4: novelbuychapterrecord.v1.NovelBuyChapterRecordReply
	(*NovelBuyChapterRecordCreateReq)(nil),      // 5: novelbuychapterrecord.v1.NovelBuyChapterRecordCreateReq
	(*NovelBuyChapterRecordCreateReply)(nil),    // 6: novelbuychapterrecord.v1.NovelBuyChapterRecordCreateReply
	(*NovelBuyChapterRecordUpdateReq)(nil),      // 7: novelbuychapterrecord.v1.NovelBuyChapterRecordUpdateReq
	(*NovelBuyChapterRecordUpdateReply)(nil),    // 8: novelbuychapterrecord.v1.NovelBuyChapterRecordUpdateReply
	(*NovelBuyChapterRecordDeleteReq)(nil),      // 9: novelbuychapterrecord.v1.NovelBuyChapterRecordDeleteReq
	(*NovelBuyChapterRecordBatchDeleteReq)(nil), // 10: novelbuychapterrecord.v1.NovelBuyChapterRecordBatchDeleteReq
	(*NovelBuyChapterRecordDeleteReply)(nil),    // 11: novelbuychapterrecord.v1.NovelBuyChapterRecordDeleteReply
	(*timestamppb.Timestamp)(nil),               // 12: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),                    // 13: pagin.Pagination
}
var file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_depIdxs = []int32{
	12, // 0: novelbuychapterrecord.v1.NovelBuyChapterRecordData.createdAt:type_name -> google.protobuf.Timestamp
	12, // 1: novelbuychapterrecord.v1.NovelBuyChapterRecordData.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 2: novelbuychapterrecord.v1.NovelBuyChapterRecordPageReq.pagin:type_name -> pagin.Pagination
	3,  // 3: novelbuychapterrecord.v1.NovelBuyChapterRecordPageReq.param:type_name -> novelbuychapterrecord.v1.NovelBuyChapterRecordReq
	0,  // 4: novelbuychapterrecord.v1.NovelBuyChapterRecordPageReply.items:type_name -> novelbuychapterrecord.v1.NovelBuyChapterRecordData
	12, // 5: novelbuychapterrecord.v1.NovelBuyChapterRecordReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 6: novelbuychapterrecord.v1.NovelBuyChapterRecordReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 7: novelbuychapterrecord.v1.NovelBuyChapterRecordReply.result:type_name -> novelbuychapterrecord.v1.NovelBuyChapterRecordData
	0,  // 8: novelbuychapterrecord.v1.NovelBuyChapterRecordCreateReply.result:type_name -> novelbuychapterrecord.v1.NovelBuyChapterRecordData
	0,  // 9: novelbuychapterrecord.v1.NovelBuyChapterRecordUpdateReply.result:type_name -> novelbuychapterrecord.v1.NovelBuyChapterRecordData
	1,  // 10: novelbuychapterrecord.v1.NovelBuyChapterRecord.GetNovelBuyChapterRecordPage:input_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordPageReq
	3,  // 11: novelbuychapterrecord.v1.NovelBuyChapterRecord.GetNovelBuyChapterRecord:input_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordReq
	7,  // 12: novelbuychapterrecord.v1.NovelBuyChapterRecord.UpdateNovelBuyChapterRecord:input_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordUpdateReq
	5,  // 13: novelbuychapterrecord.v1.NovelBuyChapterRecord.CreateNovelBuyChapterRecord:input_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordCreateReq
	9,  // 14: novelbuychapterrecord.v1.NovelBuyChapterRecord.DeleteNovelBuyChapterRecord:input_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordDeleteReq
	10, // 15: novelbuychapterrecord.v1.NovelBuyChapterRecord.BatchDeleteNovelBuyChapterRecord:input_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordBatchDeleteReq
	2,  // 16: novelbuychapterrecord.v1.NovelBuyChapterRecord.GetNovelBuyChapterRecordPage:output_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordPageReply
	4,  // 17: novelbuychapterrecord.v1.NovelBuyChapterRecord.GetNovelBuyChapterRecord:output_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordReply
	8,  // 18: novelbuychapterrecord.v1.NovelBuyChapterRecord.UpdateNovelBuyChapterRecord:output_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordUpdateReply
	6,  // 19: novelbuychapterrecord.v1.NovelBuyChapterRecord.CreateNovelBuyChapterRecord:output_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordCreateReply
	11, // 20: novelbuychapterrecord.v1.NovelBuyChapterRecord.DeleteNovelBuyChapterRecord:output_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordDeleteReply
	11, // 21: novelbuychapterrecord.v1.NovelBuyChapterRecord.BatchDeleteNovelBuyChapterRecord:output_type -> novelbuychapterrecord.v1.NovelBuyChapterRecordDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_init() }
func file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_init() {
	if File_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBuyChapterRecordDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_goTypes,
		DependencyIndexes: file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_depIdxs,
		MessageInfos:      file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_msgTypes,
	}.Build()
	File_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto = out.File
	file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_rawDesc = nil
	file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_goTypes = nil
	file_api_novel_novelbuychapterrecord_v1_novel_buy_chapter_record_proto_depIdxs = nil
}
