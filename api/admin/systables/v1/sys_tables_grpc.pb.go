// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/systables/v1/sys_tables.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysTablesClient is the client API for SysTables service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysTablesClient interface {
	// 分页查询SysTables
	GetPageSysTables(ctx context.Context, in *SysTablesPageReq, opts ...grpc.CallOption) (*SysTablesPageReply, error)
	// 获取SysTables
	GetSysTables(ctx context.Context, in *SysTablesReq, opts ...grpc.CallOption) (*SysTablesReply, error)
	// 更新SysTables
	UpdateSysTables(ctx context.Context, in *SysTablesUpdateReq, opts ...grpc.CallOption) (*SysTablesUpdateReply, error)
	// 创建SysTables
	CreateSysTables(ctx context.Context, in *SysTablesCreateReq, opts ...grpc.CallOption) (*SysTablesCreateReply, error)
	// 删除SysTables
	DeleteSysTables(ctx context.Context, in *SysTablesDeleteReq, opts ...grpc.CallOption) (*SysTablesDeleteReply, error)
	// 批量删除SysTables
	BatchDeleteSysTables(ctx context.Context, in *SysTablesBatchDeleteReq, opts ...grpc.CallOption) (*SysTablesDeleteReply, error)
}

type sysTablesClient struct {
	cc grpc.ClientConnInterface
}

func NewSysTablesClient(cc grpc.ClientConnInterface) SysTablesClient {
	return &sysTablesClient{cc}
}

func (c *sysTablesClient) GetPageSysTables(ctx context.Context, in *SysTablesPageReq, opts ...grpc.CallOption) (*SysTablesPageReply, error) {
	out := new(SysTablesPageReply)
	err := c.cc.Invoke(ctx, "/systables.v1.SysTables/GetPageSysTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysTablesClient) GetSysTables(ctx context.Context, in *SysTablesReq, opts ...grpc.CallOption) (*SysTablesReply, error) {
	out := new(SysTablesReply)
	err := c.cc.Invoke(ctx, "/systables.v1.SysTables/GetSysTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysTablesClient) UpdateSysTables(ctx context.Context, in *SysTablesUpdateReq, opts ...grpc.CallOption) (*SysTablesUpdateReply, error) {
	out := new(SysTablesUpdateReply)
	err := c.cc.Invoke(ctx, "/systables.v1.SysTables/UpdateSysTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysTablesClient) CreateSysTables(ctx context.Context, in *SysTablesCreateReq, opts ...grpc.CallOption) (*SysTablesCreateReply, error) {
	out := new(SysTablesCreateReply)
	err := c.cc.Invoke(ctx, "/systables.v1.SysTables/CreateSysTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysTablesClient) DeleteSysTables(ctx context.Context, in *SysTablesDeleteReq, opts ...grpc.CallOption) (*SysTablesDeleteReply, error) {
	out := new(SysTablesDeleteReply)
	err := c.cc.Invoke(ctx, "/systables.v1.SysTables/DeleteSysTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysTablesClient) BatchDeleteSysTables(ctx context.Context, in *SysTablesBatchDeleteReq, opts ...grpc.CallOption) (*SysTablesDeleteReply, error) {
	out := new(SysTablesDeleteReply)
	err := c.cc.Invoke(ctx, "/systables.v1.SysTables/BatchDeleteSysTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysTablesServer is the server API for SysTables service.
// All implementations must embed UnimplementedSysTablesServer
// for forward compatibility
type SysTablesServer interface {
	// 分页查询SysTables
	GetPageSysTables(context.Context, *SysTablesPageReq) (*SysTablesPageReply, error)
	// 获取SysTables
	GetSysTables(context.Context, *SysTablesReq) (*SysTablesReply, error)
	// 更新SysTables
	UpdateSysTables(context.Context, *SysTablesUpdateReq) (*SysTablesUpdateReply, error)
	// 创建SysTables
	CreateSysTables(context.Context, *SysTablesCreateReq) (*SysTablesCreateReply, error)
	// 删除SysTables
	DeleteSysTables(context.Context, *SysTablesDeleteReq) (*SysTablesDeleteReply, error)
	// 批量删除SysTables
	BatchDeleteSysTables(context.Context, *SysTablesBatchDeleteReq) (*SysTablesDeleteReply, error)
	mustEmbedUnimplementedSysTablesServer()
}

// UnimplementedSysTablesServer must be embedded to have forward compatible implementations.
type UnimplementedSysTablesServer struct {
}

func (UnimplementedSysTablesServer) GetPageSysTables(context.Context, *SysTablesPageReq) (*SysTablesPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageSysTables not implemented")
}
func (UnimplementedSysTablesServer) GetSysTables(context.Context, *SysTablesReq) (*SysTablesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysTables not implemented")
}
func (UnimplementedSysTablesServer) UpdateSysTables(context.Context, *SysTablesUpdateReq) (*SysTablesUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysTables not implemented")
}
func (UnimplementedSysTablesServer) CreateSysTables(context.Context, *SysTablesCreateReq) (*SysTablesCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysTables not implemented")
}
func (UnimplementedSysTablesServer) DeleteSysTables(context.Context, *SysTablesDeleteReq) (*SysTablesDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysTables not implemented")
}
func (UnimplementedSysTablesServer) BatchDeleteSysTables(context.Context, *SysTablesBatchDeleteReq) (*SysTablesDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysTables not implemented")
}
func (UnimplementedSysTablesServer) mustEmbedUnimplementedSysTablesServer() {}

// UnsafeSysTablesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysTablesServer will
// result in compilation errors.
type UnsafeSysTablesServer interface {
	mustEmbedUnimplementedSysTablesServer()
}

func RegisterSysTablesServer(s grpc.ServiceRegistrar, srv SysTablesServer) {
	s.RegisterService(&SysTables_ServiceDesc, srv)
}

func _SysTables_GetPageSysTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysTablesPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysTablesServer).GetPageSysTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systables.v1.SysTables/GetPageSysTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysTablesServer).GetPageSysTables(ctx, req.(*SysTablesPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysTables_GetSysTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysTablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysTablesServer).GetSysTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systables.v1.SysTables/GetSysTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysTablesServer).GetSysTables(ctx, req.(*SysTablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysTables_UpdateSysTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysTablesUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysTablesServer).UpdateSysTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systables.v1.SysTables/UpdateSysTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysTablesServer).UpdateSysTables(ctx, req.(*SysTablesUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysTables_CreateSysTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysTablesCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysTablesServer).CreateSysTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systables.v1.SysTables/CreateSysTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysTablesServer).CreateSysTables(ctx, req.(*SysTablesCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysTables_DeleteSysTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysTablesDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysTablesServer).DeleteSysTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systables.v1.SysTables/DeleteSysTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysTablesServer).DeleteSysTables(ctx, req.(*SysTablesDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysTables_BatchDeleteSysTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysTablesBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysTablesServer).BatchDeleteSysTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/systables.v1.SysTables/BatchDeleteSysTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysTablesServer).BatchDeleteSysTables(ctx, req.(*SysTablesBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysTables_ServiceDesc is the grpc.ServiceDesc for SysTables service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysTables_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "systables.v1.SysTables",
	HandlerType: (*SysTablesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageSysTables",
			Handler:    _SysTables_GetPageSysTables_Handler,
		},
		{
			MethodName: "GetSysTables",
			Handler:    _SysTables_GetSysTables_Handler,
		},
		{
			MethodName: "UpdateSysTables",
			Handler:    _SysTables_UpdateSysTables_Handler,
		},
		{
			MethodName: "CreateSysTables",
			Handler:    _SysTables_CreateSysTables_Handler,
		},
		{
			MethodName: "DeleteSysTables",
			Handler:    _SysTables_DeleteSysTables_Handler,
		},
		{
			MethodName: "BatchDeleteSysTables",
			Handler:    _SysTables_BatchDeleteSysTables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/systables/v1/sys_tables.proto",
}
