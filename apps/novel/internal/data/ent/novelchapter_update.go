// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/novel"
	"hope/apps/novel/internal/data/ent/novelchapter"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelChapterUpdate is the builder for updating NovelChapter entities.
type NovelChapterUpdate struct {
	config
	hooks    []Hook
	mutation *NovelChapterMutation
}

// Where appends a list predicates to the NovelChapterUpdate builder.
func (ncu *NovelChapterUpdate) Where(ps ...predicate.NovelChapter) *NovelChapterUpdate {
	ncu.mutation.Where(ps...)
	return ncu
}

// SetNovelId sets the "novelId" field.
func (ncu *NovelChapterUpdate) SetNovelId(i int64) *NovelChapterUpdate {
	ncu.mutation.ResetNovelId()
	ncu.mutation.SetNovelId(i)
	return ncu
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableNovelId(i *int64) *NovelChapterUpdate {
	if i != nil {
		ncu.SetNovelId(*i)
	}
	return ncu
}

// AddNovelId adds i to the "novelId" field.
func (ncu *NovelChapterUpdate) AddNovelId(i int64) *NovelChapterUpdate {
	ncu.mutation.AddNovelId(i)
	return ncu
}

// ClearNovelId clears the value of the "novelId" field.
func (ncu *NovelChapterUpdate) ClearNovelId() *NovelChapterUpdate {
	ncu.mutation.ClearNovelId()
	return ncu
}

// SetOrderNum sets the "orderNum" field.
func (ncu *NovelChapterUpdate) SetOrderNum(i int32) *NovelChapterUpdate {
	ncu.mutation.ResetOrderNum()
	ncu.mutation.SetOrderNum(i)
	return ncu
}

// SetNillableOrderNum sets the "orderNum" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableOrderNum(i *int32) *NovelChapterUpdate {
	if i != nil {
		ncu.SetOrderNum(*i)
	}
	return ncu
}

// AddOrderNum adds i to the "orderNum" field.
func (ncu *NovelChapterUpdate) AddOrderNum(i int32) *NovelChapterUpdate {
	ncu.mutation.AddOrderNum(i)
	return ncu
}

// ClearOrderNum clears the value of the "orderNum" field.
func (ncu *NovelChapterUpdate) ClearOrderNum() *NovelChapterUpdate {
	ncu.mutation.ClearOrderNum()
	return ncu
}

// SetChapterName sets the "chapterName" field.
func (ncu *NovelChapterUpdate) SetChapterName(s string) *NovelChapterUpdate {
	ncu.mutation.SetChapterName(s)
	return ncu
}

// SetNillableChapterName sets the "chapterName" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableChapterName(s *string) *NovelChapterUpdate {
	if s != nil {
		ncu.SetChapterName(*s)
	}
	return ncu
}

// ClearChapterName clears the value of the "chapterName" field.
func (ncu *NovelChapterUpdate) ClearChapterName() *NovelChapterUpdate {
	ncu.mutation.ClearChapterName()
	return ncu
}

// SetContent sets the "content" field.
func (ncu *NovelChapterUpdate) SetContent(s string) *NovelChapterUpdate {
	ncu.mutation.SetContent(s)
	return ncu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableContent(s *string) *NovelChapterUpdate {
	if s != nil {
		ncu.SetContent(*s)
	}
	return ncu
}

// ClearContent clears the value of the "content" field.
func (ncu *NovelChapterUpdate) ClearContent() *NovelChapterUpdate {
	ncu.mutation.ClearContent()
	return ncu
}

// SetMediaKey sets the "mediaKey" field.
func (ncu *NovelChapterUpdate) SetMediaKey(s string) *NovelChapterUpdate {
	ncu.mutation.SetMediaKey(s)
	return ncu
}

// SetNillableMediaKey sets the "mediaKey" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableMediaKey(s *string) *NovelChapterUpdate {
	if s != nil {
		ncu.SetMediaKey(*s)
	}
	return ncu
}

// ClearMediaKey clears the value of the "mediaKey" field.
func (ncu *NovelChapterUpdate) ClearMediaKey() *NovelChapterUpdate {
	ncu.mutation.ClearMediaKey()
	return ncu
}

// SetDuration sets the "duration" field.
func (ncu *NovelChapterUpdate) SetDuration(s string) *NovelChapterUpdate {
	ncu.mutation.SetDuration(s)
	return ncu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableDuration(s *string) *NovelChapterUpdate {
	if s != nil {
		ncu.SetDuration(*s)
	}
	return ncu
}

// ClearDuration clears the value of the "duration" field.
func (ncu *NovelChapterUpdate) ClearDuration() *NovelChapterUpdate {
	ncu.mutation.ClearDuration()
	return ncu
}

// SetPublishTime sets the "publishTime" field.
func (ncu *NovelChapterUpdate) SetPublishTime(t time.Time) *NovelChapterUpdate {
	ncu.mutation.SetPublishTime(t)
	return ncu
}

// SetNillablePublishTime sets the "publishTime" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillablePublishTime(t *time.Time) *NovelChapterUpdate {
	if t != nil {
		ncu.SetPublishTime(*t)
	}
	return ncu
}

// ClearPublishTime clears the value of the "publishTime" field.
func (ncu *NovelChapterUpdate) ClearPublishTime() *NovelChapterUpdate {
	ncu.mutation.ClearPublishTime()
	return ncu
}

// SetStatus sets the "status" field.
func (ncu *NovelChapterUpdate) SetStatus(i int32) *NovelChapterUpdate {
	ncu.mutation.ResetStatus()
	ncu.mutation.SetStatus(i)
	return ncu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableStatus(i *int32) *NovelChapterUpdate {
	if i != nil {
		ncu.SetStatus(*i)
	}
	return ncu
}

// AddStatus adds i to the "status" field.
func (ncu *NovelChapterUpdate) AddStatus(i int32) *NovelChapterUpdate {
	ncu.mutation.AddStatus(i)
	return ncu
}

// ClearStatus clears the value of the "status" field.
func (ncu *NovelChapterUpdate) ClearStatus() *NovelChapterUpdate {
	ncu.mutation.ClearStatus()
	return ncu
}

// SetIsFree sets the "isFree" field.
func (ncu *NovelChapterUpdate) SetIsFree(b bool) *NovelChapterUpdate {
	ncu.mutation.SetIsFree(b)
	return ncu
}

// SetNillableIsFree sets the "isFree" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableIsFree(b *bool) *NovelChapterUpdate {
	if b != nil {
		ncu.SetIsFree(*b)
	}
	return ncu
}

// ClearIsFree clears the value of the "isFree" field.
func (ncu *NovelChapterUpdate) ClearIsFree() *NovelChapterUpdate {
	ncu.mutation.ClearIsFree()
	return ncu
}

// SetPrice sets the "price" field.
func (ncu *NovelChapterUpdate) SetPrice(i int64) *NovelChapterUpdate {
	ncu.mutation.ResetPrice()
	ncu.mutation.SetPrice(i)
	return ncu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillablePrice(i *int64) *NovelChapterUpdate {
	if i != nil {
		ncu.SetPrice(*i)
	}
	return ncu
}

// AddPrice adds i to the "price" field.
func (ncu *NovelChapterUpdate) AddPrice(i int64) *NovelChapterUpdate {
	ncu.mutation.AddPrice(i)
	return ncu
}

// ClearPrice clears the value of the "price" field.
func (ncu *NovelChapterUpdate) ClearPrice() *NovelChapterUpdate {
	ncu.mutation.ClearPrice()
	return ncu
}

// SetWordNum sets the "wordNum" field.
func (ncu *NovelChapterUpdate) SetWordNum(i int32) *NovelChapterUpdate {
	ncu.mutation.ResetWordNum()
	ncu.mutation.SetWordNum(i)
	return ncu
}

// SetNillableWordNum sets the "wordNum" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableWordNum(i *int32) *NovelChapterUpdate {
	if i != nil {
		ncu.SetWordNum(*i)
	}
	return ncu
}

// AddWordNum adds i to the "wordNum" field.
func (ncu *NovelChapterUpdate) AddWordNum(i int32) *NovelChapterUpdate {
	ncu.mutation.AddWordNum(i)
	return ncu
}

// ClearWordNum clears the value of the "wordNum" field.
func (ncu *NovelChapterUpdate) ClearWordNum() *NovelChapterUpdate {
	ncu.mutation.ClearWordNum()
	return ncu
}

// SetRemark sets the "remark" field.
func (ncu *NovelChapterUpdate) SetRemark(s string) *NovelChapterUpdate {
	ncu.mutation.SetRemark(s)
	return ncu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableRemark(s *string) *NovelChapterUpdate {
	if s != nil {
		ncu.SetRemark(*s)
	}
	return ncu
}

// ClearRemark clears the value of the "remark" field.
func (ncu *NovelChapterUpdate) ClearRemark() *NovelChapterUpdate {
	ncu.mutation.ClearRemark()
	return ncu
}

// SetUpdatedAt sets the "updatedAt" field.
func (ncu *NovelChapterUpdate) SetUpdatedAt(t time.Time) *NovelChapterUpdate {
	ncu.mutation.SetUpdatedAt(t)
	return ncu
}

// SetCreateBy sets the "createBy" field.
func (ncu *NovelChapterUpdate) SetCreateBy(i int64) *NovelChapterUpdate {
	ncu.mutation.ResetCreateBy()
	ncu.mutation.SetCreateBy(i)
	return ncu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableCreateBy(i *int64) *NovelChapterUpdate {
	if i != nil {
		ncu.SetCreateBy(*i)
	}
	return ncu
}

// AddCreateBy adds i to the "createBy" field.
func (ncu *NovelChapterUpdate) AddCreateBy(i int64) *NovelChapterUpdate {
	ncu.mutation.AddCreateBy(i)
	return ncu
}

// SetUpdateBy sets the "updateBy" field.
func (ncu *NovelChapterUpdate) SetUpdateBy(i int64) *NovelChapterUpdate {
	ncu.mutation.ResetUpdateBy()
	ncu.mutation.SetUpdateBy(i)
	return ncu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableUpdateBy(i *int64) *NovelChapterUpdate {
	if i != nil {
		ncu.SetUpdateBy(*i)
	}
	return ncu
}

// AddUpdateBy adds i to the "updateBy" field.
func (ncu *NovelChapterUpdate) AddUpdateBy(i int64) *NovelChapterUpdate {
	ncu.mutation.AddUpdateBy(i)
	return ncu
}

// SetTenantId sets the "tenantId" field.
func (ncu *NovelChapterUpdate) SetTenantId(i int64) *NovelChapterUpdate {
	ncu.mutation.ResetTenantId()
	ncu.mutation.SetTenantId(i)
	return ncu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableTenantId(i *int64) *NovelChapterUpdate {
	if i != nil {
		ncu.SetTenantId(*i)
	}
	return ncu
}

// AddTenantId adds i to the "tenantId" field.
func (ncu *NovelChapterUpdate) AddTenantId(i int64) *NovelChapterUpdate {
	ncu.mutation.AddTenantId(i)
	return ncu
}

// SetPrevID sets the "prev" edge to the NovelChapter entity by ID.
func (ncu *NovelChapterUpdate) SetPrevID(id int64) *NovelChapterUpdate {
	ncu.mutation.SetPrevID(id)
	return ncu
}

// SetNillablePrevID sets the "prev" edge to the NovelChapter entity by ID if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillablePrevID(id *int64) *NovelChapterUpdate {
	if id != nil {
		ncu = ncu.SetPrevID(*id)
	}
	return ncu
}

// SetPrev sets the "prev" edge to the NovelChapter entity.
func (ncu *NovelChapterUpdate) SetPrev(n *NovelChapter) *NovelChapterUpdate {
	return ncu.SetPrevID(n.ID)
}

// SetNextID sets the "next" edge to the NovelChapter entity by ID.
func (ncu *NovelChapterUpdate) SetNextID(id int64) *NovelChapterUpdate {
	ncu.mutation.SetNextID(id)
	return ncu
}

// SetNillableNextID sets the "next" edge to the NovelChapter entity by ID if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableNextID(id *int64) *NovelChapterUpdate {
	if id != nil {
		ncu = ncu.SetNextID(*id)
	}
	return ncu
}

// SetNext sets the "next" edge to the NovelChapter entity.
func (ncu *NovelChapterUpdate) SetNext(n *NovelChapter) *NovelChapterUpdate {
	return ncu.SetNextID(n.ID)
}

// SetNovelID sets the "novel" edge to the Novel entity by ID.
func (ncu *NovelChapterUpdate) SetNovelID(id int64) *NovelChapterUpdate {
	ncu.mutation.SetNovelID(id)
	return ncu
}

// SetNillableNovelID sets the "novel" edge to the Novel entity by ID if the given value is not nil.
func (ncu *NovelChapterUpdate) SetNillableNovelID(id *int64) *NovelChapterUpdate {
	if id != nil {
		ncu = ncu.SetNovelID(*id)
	}
	return ncu
}

// SetNovel sets the "novel" edge to the Novel entity.
func (ncu *NovelChapterUpdate) SetNovel(n *Novel) *NovelChapterUpdate {
	return ncu.SetNovelID(n.ID)
}

// Mutation returns the NovelChapterMutation object of the builder.
func (ncu *NovelChapterUpdate) Mutation() *NovelChapterMutation {
	return ncu.mutation
}

// ClearPrev clears the "prev" edge to the NovelChapter entity.
func (ncu *NovelChapterUpdate) ClearPrev() *NovelChapterUpdate {
	ncu.mutation.ClearPrev()
	return ncu
}

// ClearNext clears the "next" edge to the NovelChapter entity.
func (ncu *NovelChapterUpdate) ClearNext() *NovelChapterUpdate {
	ncu.mutation.ClearNext()
	return ncu
}

// ClearNovel clears the "novel" edge to the Novel entity.
func (ncu *NovelChapterUpdate) ClearNovel() *NovelChapterUpdate {
	ncu.mutation.ClearNovel()
	return ncu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ncu *NovelChapterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ncu.defaults()
	if len(ncu.hooks) == 0 {
		affected, err = ncu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ncu.mutation = mutation
			affected, err = ncu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ncu.hooks) - 1; i >= 0; i-- {
			if ncu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ncu *NovelChapterUpdate) SaveX(ctx context.Context) int {
	affected, err := ncu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ncu *NovelChapterUpdate) Exec(ctx context.Context) error {
	_, err := ncu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncu *NovelChapterUpdate) ExecX(ctx context.Context) {
	if err := ncu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncu *NovelChapterUpdate) defaults() {
	if _, ok := ncu.mutation.UpdatedAt(); !ok {
		v := novelchapter.UpdateDefaultUpdatedAt()
		ncu.mutation.SetUpdatedAt(v)
	}
}

func (ncu *NovelChapterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelchapter.Table,
			Columns: novelchapter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelchapter.FieldID,
			},
		},
	}
	if ps := ncu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncu.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldNovelId,
		})
	}
	if value, ok := ncu.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldNovelId,
		})
	}
	if ncu.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelchapter.FieldNovelId,
		})
	}
	if value, ok := ncu.mutation.OrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldOrderNum,
		})
	}
	if value, ok := ncu.mutation.AddedOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldOrderNum,
		})
	}
	if ncu.mutation.OrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelchapter.FieldOrderNum,
		})
	}
	if value, ok := ncu.mutation.ChapterName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldChapterName,
		})
	}
	if ncu.mutation.ChapterNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldChapterName,
		})
	}
	if value, ok := ncu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldContent,
		})
	}
	if ncu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldContent,
		})
	}
	if value, ok := ncu.mutation.MediaKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldMediaKey,
		})
	}
	if ncu.mutation.MediaKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldMediaKey,
		})
	}
	if value, ok := ncu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldDuration,
		})
	}
	if ncu.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldDuration,
		})
	}
	if value, ok := ncu.mutation.PublishTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelchapter.FieldPublishTime,
		})
	}
	if ncu.mutation.PublishTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: novelchapter.FieldPublishTime,
		})
	}
	if value, ok := ncu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldStatus,
		})
	}
	if value, ok := ncu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldStatus,
		})
	}
	if ncu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelchapter.FieldStatus,
		})
	}
	if value, ok := ncu.mutation.IsFree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelchapter.FieldIsFree,
		})
	}
	if ncu.mutation.IsFreeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelchapter.FieldIsFree,
		})
	}
	if value, ok := ncu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldPrice,
		})
	}
	if value, ok := ncu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldPrice,
		})
	}
	if ncu.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelchapter.FieldPrice,
		})
	}
	if value, ok := ncu.mutation.WordNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldWordNum,
		})
	}
	if value, ok := ncu.mutation.AddedWordNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldWordNum,
		})
	}
	if ncu.mutation.WordNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelchapter.FieldWordNum,
		})
	}
	if value, ok := ncu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldRemark,
		})
	}
	if ncu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldRemark,
		})
	}
	if value, ok := ncu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelchapter.FieldUpdatedAt,
		})
	}
	if value, ok := ncu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldCreateBy,
		})
	}
	if value, ok := ncu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldCreateBy,
		})
	}
	if value, ok := ncu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldUpdateBy,
		})
	}
	if value, ok := ncu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldUpdateBy,
		})
	}
	if value, ok := ncu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldTenantId,
		})
	}
	if value, ok := ncu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldTenantId,
		})
	}
	if ncu.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   novelchapter.PrevTable,
			Columns: []string{novelchapter.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   novelchapter.PrevTable,
			Columns: []string{novelchapter.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncu.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   novelchapter.NextTable,
			Columns: []string{novelchapter.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   novelchapter.NextTable,
			Columns: []string{novelchapter.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncu.mutation.NovelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelchapter.NovelTable,
			Columns: []string{novelchapter.NovelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.NovelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelchapter.NovelTable,
			Columns: []string{novelchapter.NovelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ncu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelchapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NovelChapterUpdateOne is the builder for updating a single NovelChapter entity.
type NovelChapterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NovelChapterMutation
}

// SetNovelId sets the "novelId" field.
func (ncuo *NovelChapterUpdateOne) SetNovelId(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.ResetNovelId()
	ncuo.mutation.SetNovelId(i)
	return ncuo
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableNovelId(i *int64) *NovelChapterUpdateOne {
	if i != nil {
		ncuo.SetNovelId(*i)
	}
	return ncuo
}

// AddNovelId adds i to the "novelId" field.
func (ncuo *NovelChapterUpdateOne) AddNovelId(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.AddNovelId(i)
	return ncuo
}

// ClearNovelId clears the value of the "novelId" field.
func (ncuo *NovelChapterUpdateOne) ClearNovelId() *NovelChapterUpdateOne {
	ncuo.mutation.ClearNovelId()
	return ncuo
}

// SetOrderNum sets the "orderNum" field.
func (ncuo *NovelChapterUpdateOne) SetOrderNum(i int32) *NovelChapterUpdateOne {
	ncuo.mutation.ResetOrderNum()
	ncuo.mutation.SetOrderNum(i)
	return ncuo
}

// SetNillableOrderNum sets the "orderNum" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableOrderNum(i *int32) *NovelChapterUpdateOne {
	if i != nil {
		ncuo.SetOrderNum(*i)
	}
	return ncuo
}

// AddOrderNum adds i to the "orderNum" field.
func (ncuo *NovelChapterUpdateOne) AddOrderNum(i int32) *NovelChapterUpdateOne {
	ncuo.mutation.AddOrderNum(i)
	return ncuo
}

// ClearOrderNum clears the value of the "orderNum" field.
func (ncuo *NovelChapterUpdateOne) ClearOrderNum() *NovelChapterUpdateOne {
	ncuo.mutation.ClearOrderNum()
	return ncuo
}

// SetChapterName sets the "chapterName" field.
func (ncuo *NovelChapterUpdateOne) SetChapterName(s string) *NovelChapterUpdateOne {
	ncuo.mutation.SetChapterName(s)
	return ncuo
}

// SetNillableChapterName sets the "chapterName" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableChapterName(s *string) *NovelChapterUpdateOne {
	if s != nil {
		ncuo.SetChapterName(*s)
	}
	return ncuo
}

// ClearChapterName clears the value of the "chapterName" field.
func (ncuo *NovelChapterUpdateOne) ClearChapterName() *NovelChapterUpdateOne {
	ncuo.mutation.ClearChapterName()
	return ncuo
}

// SetContent sets the "content" field.
func (ncuo *NovelChapterUpdateOne) SetContent(s string) *NovelChapterUpdateOne {
	ncuo.mutation.SetContent(s)
	return ncuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableContent(s *string) *NovelChapterUpdateOne {
	if s != nil {
		ncuo.SetContent(*s)
	}
	return ncuo
}

// ClearContent clears the value of the "content" field.
func (ncuo *NovelChapterUpdateOne) ClearContent() *NovelChapterUpdateOne {
	ncuo.mutation.ClearContent()
	return ncuo
}

// SetMediaKey sets the "mediaKey" field.
func (ncuo *NovelChapterUpdateOne) SetMediaKey(s string) *NovelChapterUpdateOne {
	ncuo.mutation.SetMediaKey(s)
	return ncuo
}

// SetNillableMediaKey sets the "mediaKey" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableMediaKey(s *string) *NovelChapterUpdateOne {
	if s != nil {
		ncuo.SetMediaKey(*s)
	}
	return ncuo
}

// ClearMediaKey clears the value of the "mediaKey" field.
func (ncuo *NovelChapterUpdateOne) ClearMediaKey() *NovelChapterUpdateOne {
	ncuo.mutation.ClearMediaKey()
	return ncuo
}

// SetDuration sets the "duration" field.
func (ncuo *NovelChapterUpdateOne) SetDuration(s string) *NovelChapterUpdateOne {
	ncuo.mutation.SetDuration(s)
	return ncuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableDuration(s *string) *NovelChapterUpdateOne {
	if s != nil {
		ncuo.SetDuration(*s)
	}
	return ncuo
}

// ClearDuration clears the value of the "duration" field.
func (ncuo *NovelChapterUpdateOne) ClearDuration() *NovelChapterUpdateOne {
	ncuo.mutation.ClearDuration()
	return ncuo
}

// SetPublishTime sets the "publishTime" field.
func (ncuo *NovelChapterUpdateOne) SetPublishTime(t time.Time) *NovelChapterUpdateOne {
	ncuo.mutation.SetPublishTime(t)
	return ncuo
}

// SetNillablePublishTime sets the "publishTime" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillablePublishTime(t *time.Time) *NovelChapterUpdateOne {
	if t != nil {
		ncuo.SetPublishTime(*t)
	}
	return ncuo
}

// ClearPublishTime clears the value of the "publishTime" field.
func (ncuo *NovelChapterUpdateOne) ClearPublishTime() *NovelChapterUpdateOne {
	ncuo.mutation.ClearPublishTime()
	return ncuo
}

// SetStatus sets the "status" field.
func (ncuo *NovelChapterUpdateOne) SetStatus(i int32) *NovelChapterUpdateOne {
	ncuo.mutation.ResetStatus()
	ncuo.mutation.SetStatus(i)
	return ncuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableStatus(i *int32) *NovelChapterUpdateOne {
	if i != nil {
		ncuo.SetStatus(*i)
	}
	return ncuo
}

// AddStatus adds i to the "status" field.
func (ncuo *NovelChapterUpdateOne) AddStatus(i int32) *NovelChapterUpdateOne {
	ncuo.mutation.AddStatus(i)
	return ncuo
}

// ClearStatus clears the value of the "status" field.
func (ncuo *NovelChapterUpdateOne) ClearStatus() *NovelChapterUpdateOne {
	ncuo.mutation.ClearStatus()
	return ncuo
}

// SetIsFree sets the "isFree" field.
func (ncuo *NovelChapterUpdateOne) SetIsFree(b bool) *NovelChapterUpdateOne {
	ncuo.mutation.SetIsFree(b)
	return ncuo
}

// SetNillableIsFree sets the "isFree" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableIsFree(b *bool) *NovelChapterUpdateOne {
	if b != nil {
		ncuo.SetIsFree(*b)
	}
	return ncuo
}

// ClearIsFree clears the value of the "isFree" field.
func (ncuo *NovelChapterUpdateOne) ClearIsFree() *NovelChapterUpdateOne {
	ncuo.mutation.ClearIsFree()
	return ncuo
}

// SetPrice sets the "price" field.
func (ncuo *NovelChapterUpdateOne) SetPrice(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.ResetPrice()
	ncuo.mutation.SetPrice(i)
	return ncuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillablePrice(i *int64) *NovelChapterUpdateOne {
	if i != nil {
		ncuo.SetPrice(*i)
	}
	return ncuo
}

// AddPrice adds i to the "price" field.
func (ncuo *NovelChapterUpdateOne) AddPrice(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.AddPrice(i)
	return ncuo
}

// ClearPrice clears the value of the "price" field.
func (ncuo *NovelChapterUpdateOne) ClearPrice() *NovelChapterUpdateOne {
	ncuo.mutation.ClearPrice()
	return ncuo
}

// SetWordNum sets the "wordNum" field.
func (ncuo *NovelChapterUpdateOne) SetWordNum(i int32) *NovelChapterUpdateOne {
	ncuo.mutation.ResetWordNum()
	ncuo.mutation.SetWordNum(i)
	return ncuo
}

// SetNillableWordNum sets the "wordNum" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableWordNum(i *int32) *NovelChapterUpdateOne {
	if i != nil {
		ncuo.SetWordNum(*i)
	}
	return ncuo
}

// AddWordNum adds i to the "wordNum" field.
func (ncuo *NovelChapterUpdateOne) AddWordNum(i int32) *NovelChapterUpdateOne {
	ncuo.mutation.AddWordNum(i)
	return ncuo
}

// ClearWordNum clears the value of the "wordNum" field.
func (ncuo *NovelChapterUpdateOne) ClearWordNum() *NovelChapterUpdateOne {
	ncuo.mutation.ClearWordNum()
	return ncuo
}

// SetRemark sets the "remark" field.
func (ncuo *NovelChapterUpdateOne) SetRemark(s string) *NovelChapterUpdateOne {
	ncuo.mutation.SetRemark(s)
	return ncuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableRemark(s *string) *NovelChapterUpdateOne {
	if s != nil {
		ncuo.SetRemark(*s)
	}
	return ncuo
}

// ClearRemark clears the value of the "remark" field.
func (ncuo *NovelChapterUpdateOne) ClearRemark() *NovelChapterUpdateOne {
	ncuo.mutation.ClearRemark()
	return ncuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ncuo *NovelChapterUpdateOne) SetUpdatedAt(t time.Time) *NovelChapterUpdateOne {
	ncuo.mutation.SetUpdatedAt(t)
	return ncuo
}

// SetCreateBy sets the "createBy" field.
func (ncuo *NovelChapterUpdateOne) SetCreateBy(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.ResetCreateBy()
	ncuo.mutation.SetCreateBy(i)
	return ncuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableCreateBy(i *int64) *NovelChapterUpdateOne {
	if i != nil {
		ncuo.SetCreateBy(*i)
	}
	return ncuo
}

// AddCreateBy adds i to the "createBy" field.
func (ncuo *NovelChapterUpdateOne) AddCreateBy(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.AddCreateBy(i)
	return ncuo
}

// SetUpdateBy sets the "updateBy" field.
func (ncuo *NovelChapterUpdateOne) SetUpdateBy(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.ResetUpdateBy()
	ncuo.mutation.SetUpdateBy(i)
	return ncuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableUpdateBy(i *int64) *NovelChapterUpdateOne {
	if i != nil {
		ncuo.SetUpdateBy(*i)
	}
	return ncuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (ncuo *NovelChapterUpdateOne) AddUpdateBy(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.AddUpdateBy(i)
	return ncuo
}

// SetTenantId sets the "tenantId" field.
func (ncuo *NovelChapterUpdateOne) SetTenantId(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.ResetTenantId()
	ncuo.mutation.SetTenantId(i)
	return ncuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableTenantId(i *int64) *NovelChapterUpdateOne {
	if i != nil {
		ncuo.SetTenantId(*i)
	}
	return ncuo
}

// AddTenantId adds i to the "tenantId" field.
func (ncuo *NovelChapterUpdateOne) AddTenantId(i int64) *NovelChapterUpdateOne {
	ncuo.mutation.AddTenantId(i)
	return ncuo
}

// SetPrevID sets the "prev" edge to the NovelChapter entity by ID.
func (ncuo *NovelChapterUpdateOne) SetPrevID(id int64) *NovelChapterUpdateOne {
	ncuo.mutation.SetPrevID(id)
	return ncuo
}

// SetNillablePrevID sets the "prev" edge to the NovelChapter entity by ID if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillablePrevID(id *int64) *NovelChapterUpdateOne {
	if id != nil {
		ncuo = ncuo.SetPrevID(*id)
	}
	return ncuo
}

// SetPrev sets the "prev" edge to the NovelChapter entity.
func (ncuo *NovelChapterUpdateOne) SetPrev(n *NovelChapter) *NovelChapterUpdateOne {
	return ncuo.SetPrevID(n.ID)
}

// SetNextID sets the "next" edge to the NovelChapter entity by ID.
func (ncuo *NovelChapterUpdateOne) SetNextID(id int64) *NovelChapterUpdateOne {
	ncuo.mutation.SetNextID(id)
	return ncuo
}

// SetNillableNextID sets the "next" edge to the NovelChapter entity by ID if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableNextID(id *int64) *NovelChapterUpdateOne {
	if id != nil {
		ncuo = ncuo.SetNextID(*id)
	}
	return ncuo
}

// SetNext sets the "next" edge to the NovelChapter entity.
func (ncuo *NovelChapterUpdateOne) SetNext(n *NovelChapter) *NovelChapterUpdateOne {
	return ncuo.SetNextID(n.ID)
}

// SetNovelID sets the "novel" edge to the Novel entity by ID.
func (ncuo *NovelChapterUpdateOne) SetNovelID(id int64) *NovelChapterUpdateOne {
	ncuo.mutation.SetNovelID(id)
	return ncuo
}

// SetNillableNovelID sets the "novel" edge to the Novel entity by ID if the given value is not nil.
func (ncuo *NovelChapterUpdateOne) SetNillableNovelID(id *int64) *NovelChapterUpdateOne {
	if id != nil {
		ncuo = ncuo.SetNovelID(*id)
	}
	return ncuo
}

// SetNovel sets the "novel" edge to the Novel entity.
func (ncuo *NovelChapterUpdateOne) SetNovel(n *Novel) *NovelChapterUpdateOne {
	return ncuo.SetNovelID(n.ID)
}

// Mutation returns the NovelChapterMutation object of the builder.
func (ncuo *NovelChapterUpdateOne) Mutation() *NovelChapterMutation {
	return ncuo.mutation
}

// ClearPrev clears the "prev" edge to the NovelChapter entity.
func (ncuo *NovelChapterUpdateOne) ClearPrev() *NovelChapterUpdateOne {
	ncuo.mutation.ClearPrev()
	return ncuo
}

// ClearNext clears the "next" edge to the NovelChapter entity.
func (ncuo *NovelChapterUpdateOne) ClearNext() *NovelChapterUpdateOne {
	ncuo.mutation.ClearNext()
	return ncuo
}

// ClearNovel clears the "novel" edge to the Novel entity.
func (ncuo *NovelChapterUpdateOne) ClearNovel() *NovelChapterUpdateOne {
	ncuo.mutation.ClearNovel()
	return ncuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ncuo *NovelChapterUpdateOne) Select(field string, fields ...string) *NovelChapterUpdateOne {
	ncuo.fields = append([]string{field}, fields...)
	return ncuo
}

// Save executes the query and returns the updated NovelChapter entity.
func (ncuo *NovelChapterUpdateOne) Save(ctx context.Context) (*NovelChapter, error) {
	var (
		err  error
		node *NovelChapter
	)
	ncuo.defaults()
	if len(ncuo.hooks) == 0 {
		node, err = ncuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelChapterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ncuo.mutation = mutation
			node, err = ncuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ncuo.hooks) - 1; i >= 0; i-- {
			if ncuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ncuo *NovelChapterUpdateOne) SaveX(ctx context.Context) *NovelChapter {
	node, err := ncuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ncuo *NovelChapterUpdateOne) Exec(ctx context.Context) error {
	_, err := ncuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncuo *NovelChapterUpdateOne) ExecX(ctx context.Context) {
	if err := ncuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncuo *NovelChapterUpdateOne) defaults() {
	if _, ok := ncuo.mutation.UpdatedAt(); !ok {
		v := novelchapter.UpdateDefaultUpdatedAt()
		ncuo.mutation.SetUpdatedAt(v)
	}
}

func (ncuo *NovelChapterUpdateOne) sqlSave(ctx context.Context) (_node *NovelChapter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelchapter.Table,
			Columns: novelchapter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelchapter.FieldID,
			},
		},
	}
	id, ok := ncuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NovelChapter.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ncuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, novelchapter.FieldID)
		for _, f := range fields {
			if !novelchapter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != novelchapter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ncuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncuo.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldNovelId,
		})
	}
	if value, ok := ncuo.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldNovelId,
		})
	}
	if ncuo.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelchapter.FieldNovelId,
		})
	}
	if value, ok := ncuo.mutation.OrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldOrderNum,
		})
	}
	if value, ok := ncuo.mutation.AddedOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldOrderNum,
		})
	}
	if ncuo.mutation.OrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelchapter.FieldOrderNum,
		})
	}
	if value, ok := ncuo.mutation.ChapterName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldChapterName,
		})
	}
	if ncuo.mutation.ChapterNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldChapterName,
		})
	}
	if value, ok := ncuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldContent,
		})
	}
	if ncuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldContent,
		})
	}
	if value, ok := ncuo.mutation.MediaKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldMediaKey,
		})
	}
	if ncuo.mutation.MediaKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldMediaKey,
		})
	}
	if value, ok := ncuo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldDuration,
		})
	}
	if ncuo.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldDuration,
		})
	}
	if value, ok := ncuo.mutation.PublishTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelchapter.FieldPublishTime,
		})
	}
	if ncuo.mutation.PublishTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: novelchapter.FieldPublishTime,
		})
	}
	if value, ok := ncuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldStatus,
		})
	}
	if value, ok := ncuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldStatus,
		})
	}
	if ncuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelchapter.FieldStatus,
		})
	}
	if value, ok := ncuo.mutation.IsFree(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelchapter.FieldIsFree,
		})
	}
	if ncuo.mutation.IsFreeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelchapter.FieldIsFree,
		})
	}
	if value, ok := ncuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldPrice,
		})
	}
	if value, ok := ncuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldPrice,
		})
	}
	if ncuo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelchapter.FieldPrice,
		})
	}
	if value, ok := ncuo.mutation.WordNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldWordNum,
		})
	}
	if value, ok := ncuo.mutation.AddedWordNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelchapter.FieldWordNum,
		})
	}
	if ncuo.mutation.WordNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelchapter.FieldWordNum,
		})
	}
	if value, ok := ncuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelchapter.FieldRemark,
		})
	}
	if ncuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelchapter.FieldRemark,
		})
	}
	if value, ok := ncuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelchapter.FieldUpdatedAt,
		})
	}
	if value, ok := ncuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldCreateBy,
		})
	}
	if value, ok := ncuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldCreateBy,
		})
	}
	if value, ok := ncuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldUpdateBy,
		})
	}
	if value, ok := ncuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldUpdateBy,
		})
	}
	if value, ok := ncuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldTenantId,
		})
	}
	if value, ok := ncuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelchapter.FieldTenantId,
		})
	}
	if ncuo.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   novelchapter.PrevTable,
			Columns: []string{novelchapter.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   novelchapter.PrevTable,
			Columns: []string{novelchapter.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncuo.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   novelchapter.NextTable,
			Columns: []string{novelchapter.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   novelchapter.NextTable,
			Columns: []string{novelchapter.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncuo.mutation.NovelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelchapter.NovelTable,
			Columns: []string{novelchapter.NovelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.NovelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelchapter.NovelTable,
			Columns: []string{novelchapter.NovelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NovelChapter{config: ncuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ncuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelchapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
