// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/param/internal/data/ent/pageconfig"
	"hope/apps/param/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PageConfigUpdate is the builder for updating PageConfig entities.
type PageConfigUpdate struct {
	config
	hooks    []Hook
	mutation *PageConfigMutation
}

// Where appends a list predicates to the PageConfigUpdate builder.
func (pcu *PageConfigUpdate) Where(ps ...predicate.PageConfig) *PageConfigUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetPageCode sets the "pageCode" field.
func (pcu *PageConfigUpdate) SetPageCode(s string) *PageConfigUpdate {
	pcu.mutation.SetPageCode(s)
	return pcu
}

// SetNillablePageCode sets the "pageCode" field if the given value is not nil.
func (pcu *PageConfigUpdate) SetNillablePageCode(s *string) *PageConfigUpdate {
	if s != nil {
		pcu.SetPageCode(*s)
	}
	return pcu
}

// ClearPageCode clears the value of the "pageCode" field.
func (pcu *PageConfigUpdate) ClearPageCode() *PageConfigUpdate {
	pcu.mutation.ClearPageCode()
	return pcu
}

// SetPageName sets the "pageName" field.
func (pcu *PageConfigUpdate) SetPageName(s string) *PageConfigUpdate {
	pcu.mutation.SetPageName(s)
	return pcu
}

// SetNillablePageName sets the "pageName" field if the given value is not nil.
func (pcu *PageConfigUpdate) SetNillablePageName(s *string) *PageConfigUpdate {
	if s != nil {
		pcu.SetPageName(*s)
	}
	return pcu
}

// ClearPageName clears the value of the "pageName" field.
func (pcu *PageConfigUpdate) ClearPageName() *PageConfigUpdate {
	pcu.mutation.ClearPageName()
	return pcu
}

// SetGroupCodes sets the "groupCodes" field.
func (pcu *PageConfigUpdate) SetGroupCodes(s string) *PageConfigUpdate {
	pcu.mutation.SetGroupCodes(s)
	return pcu
}

// SetNillableGroupCodes sets the "groupCodes" field if the given value is not nil.
func (pcu *PageConfigUpdate) SetNillableGroupCodes(s *string) *PageConfigUpdate {
	if s != nil {
		pcu.SetGroupCodes(*s)
	}
	return pcu
}

// ClearGroupCodes clears the value of the "groupCodes" field.
func (pcu *PageConfigUpdate) ClearGroupCodes() *PageConfigUpdate {
	pcu.mutation.ClearGroupCodes()
	return pcu
}

// SetUpdatedAt sets the "updatedAt" field.
func (pcu *PageConfigUpdate) SetUpdatedAt(t time.Time) *PageConfigUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetCreateBy sets the "createBy" field.
func (pcu *PageConfigUpdate) SetCreateBy(i int64) *PageConfigUpdate {
	pcu.mutation.ResetCreateBy()
	pcu.mutation.SetCreateBy(i)
	return pcu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (pcu *PageConfigUpdate) SetNillableCreateBy(i *int64) *PageConfigUpdate {
	if i != nil {
		pcu.SetCreateBy(*i)
	}
	return pcu
}

// AddCreateBy adds i to the "createBy" field.
func (pcu *PageConfigUpdate) AddCreateBy(i int64) *PageConfigUpdate {
	pcu.mutation.AddCreateBy(i)
	return pcu
}

// SetUpdateBy sets the "updateBy" field.
func (pcu *PageConfigUpdate) SetUpdateBy(i int64) *PageConfigUpdate {
	pcu.mutation.ResetUpdateBy()
	pcu.mutation.SetUpdateBy(i)
	return pcu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (pcu *PageConfigUpdate) SetNillableUpdateBy(i *int64) *PageConfigUpdate {
	if i != nil {
		pcu.SetUpdateBy(*i)
	}
	return pcu
}

// AddUpdateBy adds i to the "updateBy" field.
func (pcu *PageConfigUpdate) AddUpdateBy(i int64) *PageConfigUpdate {
	pcu.mutation.AddUpdateBy(i)
	return pcu
}

// SetTenantId sets the "tenantId" field.
func (pcu *PageConfigUpdate) SetTenantId(i int64) *PageConfigUpdate {
	pcu.mutation.ResetTenantId()
	pcu.mutation.SetTenantId(i)
	return pcu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (pcu *PageConfigUpdate) SetNillableTenantId(i *int64) *PageConfigUpdate {
	if i != nil {
		pcu.SetTenantId(*i)
	}
	return pcu
}

// AddTenantId adds i to the "tenantId" field.
func (pcu *PageConfigUpdate) AddTenantId(i int64) *PageConfigUpdate {
	pcu.mutation.AddTenantId(i)
	return pcu
}

// Mutation returns the PageConfigMutation object of the builder.
func (pcu *PageConfigUpdate) Mutation() *PageConfigMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PageConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pcu.defaults()
	if len(pcu.hooks) == 0 {
		affected, err = pcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pcu.mutation = mutation
			affected, err = pcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcu.hooks) - 1; i >= 0; i-- {
			if pcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PageConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PageConfigUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PageConfigUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PageConfigUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		v := pageconfig.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

func (pcu *PageConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageconfig.Table,
			Columns: pageconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pageconfig.FieldID,
			},
		},
	}
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.PageCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageconfig.FieldPageCode,
		})
	}
	if pcu.mutation.PageCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageconfig.FieldPageCode,
		})
	}
	if value, ok := pcu.mutation.PageName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageconfig.FieldPageName,
		})
	}
	if pcu.mutation.PageNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageconfig.FieldPageName,
		})
	}
	if value, ok := pcu.mutation.GroupCodes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageconfig.FieldGroupCodes,
		})
	}
	if pcu.mutation.GroupCodesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageconfig.FieldGroupCodes,
		})
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pageconfig.FieldUpdatedAt,
		})
	}
	if value, ok := pcu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldCreateBy,
		})
	}
	if value, ok := pcu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldCreateBy,
		})
	}
	if value, ok := pcu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldUpdateBy,
		})
	}
	if value, ok := pcu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldUpdateBy,
		})
	}
	if value, ok := pcu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldTenantId,
		})
	}
	if value, ok := pcu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PageConfigUpdateOne is the builder for updating a single PageConfig entity.
type PageConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageConfigMutation
}

// SetPageCode sets the "pageCode" field.
func (pcuo *PageConfigUpdateOne) SetPageCode(s string) *PageConfigUpdateOne {
	pcuo.mutation.SetPageCode(s)
	return pcuo
}

// SetNillablePageCode sets the "pageCode" field if the given value is not nil.
func (pcuo *PageConfigUpdateOne) SetNillablePageCode(s *string) *PageConfigUpdateOne {
	if s != nil {
		pcuo.SetPageCode(*s)
	}
	return pcuo
}

// ClearPageCode clears the value of the "pageCode" field.
func (pcuo *PageConfigUpdateOne) ClearPageCode() *PageConfigUpdateOne {
	pcuo.mutation.ClearPageCode()
	return pcuo
}

// SetPageName sets the "pageName" field.
func (pcuo *PageConfigUpdateOne) SetPageName(s string) *PageConfigUpdateOne {
	pcuo.mutation.SetPageName(s)
	return pcuo
}

// SetNillablePageName sets the "pageName" field if the given value is not nil.
func (pcuo *PageConfigUpdateOne) SetNillablePageName(s *string) *PageConfigUpdateOne {
	if s != nil {
		pcuo.SetPageName(*s)
	}
	return pcuo
}

// ClearPageName clears the value of the "pageName" field.
func (pcuo *PageConfigUpdateOne) ClearPageName() *PageConfigUpdateOne {
	pcuo.mutation.ClearPageName()
	return pcuo
}

// SetGroupCodes sets the "groupCodes" field.
func (pcuo *PageConfigUpdateOne) SetGroupCodes(s string) *PageConfigUpdateOne {
	pcuo.mutation.SetGroupCodes(s)
	return pcuo
}

// SetNillableGroupCodes sets the "groupCodes" field if the given value is not nil.
func (pcuo *PageConfigUpdateOne) SetNillableGroupCodes(s *string) *PageConfigUpdateOne {
	if s != nil {
		pcuo.SetGroupCodes(*s)
	}
	return pcuo
}

// ClearGroupCodes clears the value of the "groupCodes" field.
func (pcuo *PageConfigUpdateOne) ClearGroupCodes() *PageConfigUpdateOne {
	pcuo.mutation.ClearGroupCodes()
	return pcuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (pcuo *PageConfigUpdateOne) SetUpdatedAt(t time.Time) *PageConfigUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetCreateBy sets the "createBy" field.
func (pcuo *PageConfigUpdateOne) SetCreateBy(i int64) *PageConfigUpdateOne {
	pcuo.mutation.ResetCreateBy()
	pcuo.mutation.SetCreateBy(i)
	return pcuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (pcuo *PageConfigUpdateOne) SetNillableCreateBy(i *int64) *PageConfigUpdateOne {
	if i != nil {
		pcuo.SetCreateBy(*i)
	}
	return pcuo
}

// AddCreateBy adds i to the "createBy" field.
func (pcuo *PageConfigUpdateOne) AddCreateBy(i int64) *PageConfigUpdateOne {
	pcuo.mutation.AddCreateBy(i)
	return pcuo
}

// SetUpdateBy sets the "updateBy" field.
func (pcuo *PageConfigUpdateOne) SetUpdateBy(i int64) *PageConfigUpdateOne {
	pcuo.mutation.ResetUpdateBy()
	pcuo.mutation.SetUpdateBy(i)
	return pcuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (pcuo *PageConfigUpdateOne) SetNillableUpdateBy(i *int64) *PageConfigUpdateOne {
	if i != nil {
		pcuo.SetUpdateBy(*i)
	}
	return pcuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (pcuo *PageConfigUpdateOne) AddUpdateBy(i int64) *PageConfigUpdateOne {
	pcuo.mutation.AddUpdateBy(i)
	return pcuo
}

// SetTenantId sets the "tenantId" field.
func (pcuo *PageConfigUpdateOne) SetTenantId(i int64) *PageConfigUpdateOne {
	pcuo.mutation.ResetTenantId()
	pcuo.mutation.SetTenantId(i)
	return pcuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (pcuo *PageConfigUpdateOne) SetNillableTenantId(i *int64) *PageConfigUpdateOne {
	if i != nil {
		pcuo.SetTenantId(*i)
	}
	return pcuo
}

// AddTenantId adds i to the "tenantId" field.
func (pcuo *PageConfigUpdateOne) AddTenantId(i int64) *PageConfigUpdateOne {
	pcuo.mutation.AddTenantId(i)
	return pcuo
}

// Mutation returns the PageConfigMutation object of the builder.
func (pcuo *PageConfigUpdateOne) Mutation() *PageConfigMutation {
	return pcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PageConfigUpdateOne) Select(field string, fields ...string) *PageConfigUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PageConfig entity.
func (pcuo *PageConfigUpdateOne) Save(ctx context.Context) (*PageConfig, error) {
	var (
		err  error
		node *PageConfig
	)
	pcuo.defaults()
	if len(pcuo.hooks) == 0 {
		node, err = pcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pcuo.mutation = mutation
			node, err = pcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcuo.hooks) - 1; i >= 0; i-- {
			if pcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PageConfigUpdateOne) SaveX(ctx context.Context) *PageConfig {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PageConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PageConfigUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PageConfigUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		v := pageconfig.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

func (pcuo *PageConfigUpdateOne) sqlSave(ctx context.Context) (_node *PageConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageconfig.Table,
			Columns: pageconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: pageconfig.FieldID,
			},
		},
	}
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PageConfig.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pageconfig.FieldID)
		for _, f := range fields {
			if !pageconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pageconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.PageCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageconfig.FieldPageCode,
		})
	}
	if pcuo.mutation.PageCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageconfig.FieldPageCode,
		})
	}
	if value, ok := pcuo.mutation.PageName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageconfig.FieldPageName,
		})
	}
	if pcuo.mutation.PageNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageconfig.FieldPageName,
		})
	}
	if value, ok := pcuo.mutation.GroupCodes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pageconfig.FieldGroupCodes,
		})
	}
	if pcuo.mutation.GroupCodesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: pageconfig.FieldGroupCodes,
		})
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pageconfig.FieldUpdatedAt,
		})
	}
	if value, ok := pcuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldCreateBy,
		})
	}
	if value, ok := pcuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldCreateBy,
		})
	}
	if value, ok := pcuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldUpdateBy,
		})
	}
	if value, ok := pcuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldUpdateBy,
		})
	}
	if value, ok := pcuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldTenantId,
		})
	}
	if value, ok := pcuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pageconfig.FieldTenantId,
		})
	}
	_node = &PageConfig{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
