// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/novelmsg"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// NovelMsg is the model entity for the NovelMsg schema.
type NovelMsg struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	// 消息标题
	Title string `json:"title,omitempty"`
	// Msg holds the value of the "msg" field.
	// 消息内容
	Msg string `json:"msg,omitempty"`
	// MsgType holds the value of the "msgType" field.
	// 消息类型,user
	MsgType string `json:"msgType,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status bool `json:"status,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NovelMsg) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case novelmsg.FieldStatus:
			values[i] = new(sql.NullBool)
		case novelmsg.FieldID, novelmsg.FieldCreateBy, novelmsg.FieldUpdateBy, novelmsg.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case novelmsg.FieldTitle, novelmsg.FieldMsg, novelmsg.FieldMsgType:
			values[i] = new(sql.NullString)
		case novelmsg.FieldCreatedAt, novelmsg.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NovelMsg", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NovelMsg fields.
func (nm *NovelMsg) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case novelmsg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nm.ID = int64(value.Int64)
		case novelmsg.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				nm.Title = value.String
			}
		case novelmsg.FieldMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msg", values[i])
			} else if value.Valid {
				nm.Msg = value.String
			}
		case novelmsg.FieldMsgType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msgType", values[i])
			} else if value.Valid {
				nm.MsgType = value.String
			}
		case novelmsg.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				nm.Status = value.Bool
			}
		case novelmsg.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				nm.CreatedAt = value.Time
			}
		case novelmsg.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				nm.UpdatedAt = value.Time
			}
		case novelmsg.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				nm.CreateBy = value.Int64
			}
		case novelmsg.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				nm.UpdateBy = value.Int64
			}
		case novelmsg.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				nm.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NovelMsg.
// Note that you need to call NovelMsg.Unwrap() before calling this method if this NovelMsg
// was returned from a transaction, and the transaction was committed or rolled back.
func (nm *NovelMsg) Update() *NovelMsgUpdateOne {
	return (&NovelMsgClient{config: nm.config}).UpdateOne(nm)
}

// Unwrap unwraps the NovelMsg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nm *NovelMsg) Unwrap() *NovelMsg {
	tx, ok := nm.config.driver.(*txDriver)
	if !ok {
		panic("ent: NovelMsg is not a transactional entity")
	}
	nm.config.driver = tx.drv
	return nm
}

// String implements the fmt.Stringer.
func (nm *NovelMsg) String() string {
	var builder strings.Builder
	builder.WriteString("NovelMsg(")
	builder.WriteString(fmt.Sprintf("id=%v", nm.ID))
	builder.WriteString(", title=")
	builder.WriteString(nm.Title)
	builder.WriteString(", msg=")
	builder.WriteString(nm.Msg)
	builder.WriteString(", msgType=")
	builder.WriteString(nm.MsgType)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", nm.Status))
	builder.WriteString(", createdAt=")
	builder.WriteString(nm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(nm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", nm.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", nm.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", nm.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NovelMsgs is a parsable slice of NovelMsg.
type NovelMsgs []*NovelMsg

func (nm NovelMsgs) config(cfg config) {
	for _i := range nm {
		nm[_i].config = cfg
	}
}
