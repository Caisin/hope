// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/customernovels/v1/customer_novels.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerNovelsClient is the client API for CustomerNovels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerNovelsClient interface {
	// 分页查询CustomerNovels
	GetCustomerNovelsPage(ctx context.Context, in *CustomerNovelsPageReq, opts ...grpc.CallOption) (*CustomerNovelsPageReply, error)
	// 获取CustomerNovels
	GetCustomerNovels(ctx context.Context, in *CustomerNovelsReq, opts ...grpc.CallOption) (*CustomerNovelsReply, error)
	// 更新CustomerNovels
	UpdateCustomerNovels(ctx context.Context, in *CustomerNovelsUpdateReq, opts ...grpc.CallOption) (*CustomerNovelsUpdateReply, error)
	// 创建CustomerNovels
	CreateCustomerNovels(ctx context.Context, in *CustomerNovelsCreateReq, opts ...grpc.CallOption) (*CustomerNovelsCreateReply, error)
	// 删除CustomerNovels
	DeleteCustomerNovels(ctx context.Context, in *CustomerNovelsDeleteReq, opts ...grpc.CallOption) (*CustomerNovelsDeleteReply, error)
	// 批量删除CustomerNovels
	BatchDeleteCustomerNovels(ctx context.Context, in *CustomerNovelsBatchDeleteReq, opts ...grpc.CallOption) (*CustomerNovelsDeleteReply, error)
}

type customerNovelsClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerNovelsClient(cc grpc.ClientConnInterface) CustomerNovelsClient {
	return &customerNovelsClient{cc}
}

func (c *customerNovelsClient) GetCustomerNovelsPage(ctx context.Context, in *CustomerNovelsPageReq, opts ...grpc.CallOption) (*CustomerNovelsPageReply, error) {
	out := new(CustomerNovelsPageReply)
	err := c.cc.Invoke(ctx, "/customernovels.v1.CustomerNovels/GetCustomerNovelsPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerNovelsClient) GetCustomerNovels(ctx context.Context, in *CustomerNovelsReq, opts ...grpc.CallOption) (*CustomerNovelsReply, error) {
	out := new(CustomerNovelsReply)
	err := c.cc.Invoke(ctx, "/customernovels.v1.CustomerNovels/GetCustomerNovels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerNovelsClient) UpdateCustomerNovels(ctx context.Context, in *CustomerNovelsUpdateReq, opts ...grpc.CallOption) (*CustomerNovelsUpdateReply, error) {
	out := new(CustomerNovelsUpdateReply)
	err := c.cc.Invoke(ctx, "/customernovels.v1.CustomerNovels/UpdateCustomerNovels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerNovelsClient) CreateCustomerNovels(ctx context.Context, in *CustomerNovelsCreateReq, opts ...grpc.CallOption) (*CustomerNovelsCreateReply, error) {
	out := new(CustomerNovelsCreateReply)
	err := c.cc.Invoke(ctx, "/customernovels.v1.CustomerNovels/CreateCustomerNovels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerNovelsClient) DeleteCustomerNovels(ctx context.Context, in *CustomerNovelsDeleteReq, opts ...grpc.CallOption) (*CustomerNovelsDeleteReply, error) {
	out := new(CustomerNovelsDeleteReply)
	err := c.cc.Invoke(ctx, "/customernovels.v1.CustomerNovels/DeleteCustomerNovels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerNovelsClient) BatchDeleteCustomerNovels(ctx context.Context, in *CustomerNovelsBatchDeleteReq, opts ...grpc.CallOption) (*CustomerNovelsDeleteReply, error) {
	out := new(CustomerNovelsDeleteReply)
	err := c.cc.Invoke(ctx, "/customernovels.v1.CustomerNovels/BatchDeleteCustomerNovels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerNovelsServer is the server API for CustomerNovels service.
// All implementations must embed UnimplementedCustomerNovelsServer
// for forward compatibility
type CustomerNovelsServer interface {
	// 分页查询CustomerNovels
	GetCustomerNovelsPage(context.Context, *CustomerNovelsPageReq) (*CustomerNovelsPageReply, error)
	// 获取CustomerNovels
	GetCustomerNovels(context.Context, *CustomerNovelsReq) (*CustomerNovelsReply, error)
	// 更新CustomerNovels
	UpdateCustomerNovels(context.Context, *CustomerNovelsUpdateReq) (*CustomerNovelsUpdateReply, error)
	// 创建CustomerNovels
	CreateCustomerNovels(context.Context, *CustomerNovelsCreateReq) (*CustomerNovelsCreateReply, error)
	// 删除CustomerNovels
	DeleteCustomerNovels(context.Context, *CustomerNovelsDeleteReq) (*CustomerNovelsDeleteReply, error)
	// 批量删除CustomerNovels
	BatchDeleteCustomerNovels(context.Context, *CustomerNovelsBatchDeleteReq) (*CustomerNovelsDeleteReply, error)
	mustEmbedUnimplementedCustomerNovelsServer()
}

// UnimplementedCustomerNovelsServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerNovelsServer struct {
}

func (UnimplementedCustomerNovelsServer) GetCustomerNovelsPage(context.Context, *CustomerNovelsPageReq) (*CustomerNovelsPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerNovelsPage not implemented")
}
func (UnimplementedCustomerNovelsServer) GetCustomerNovels(context.Context, *CustomerNovelsReq) (*CustomerNovelsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerNovels not implemented")
}
func (UnimplementedCustomerNovelsServer) UpdateCustomerNovels(context.Context, *CustomerNovelsUpdateReq) (*CustomerNovelsUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerNovels not implemented")
}
func (UnimplementedCustomerNovelsServer) CreateCustomerNovels(context.Context, *CustomerNovelsCreateReq) (*CustomerNovelsCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerNovels not implemented")
}
func (UnimplementedCustomerNovelsServer) DeleteCustomerNovels(context.Context, *CustomerNovelsDeleteReq) (*CustomerNovelsDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerNovels not implemented")
}
func (UnimplementedCustomerNovelsServer) BatchDeleteCustomerNovels(context.Context, *CustomerNovelsBatchDeleteReq) (*CustomerNovelsDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteCustomerNovels not implemented")
}
func (UnimplementedCustomerNovelsServer) mustEmbedUnimplementedCustomerNovelsServer() {}

// UnsafeCustomerNovelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerNovelsServer will
// result in compilation errors.
type UnsafeCustomerNovelsServer interface {
	mustEmbedUnimplementedCustomerNovelsServer()
}

func RegisterCustomerNovelsServer(s grpc.ServiceRegistrar, srv CustomerNovelsServer) {
	s.RegisterService(&CustomerNovels_ServiceDesc, srv)
}

func _CustomerNovels_GetCustomerNovelsPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerNovelsPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerNovelsServer).GetCustomerNovelsPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customernovels.v1.CustomerNovels/GetCustomerNovelsPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerNovelsServer).GetCustomerNovelsPage(ctx, req.(*CustomerNovelsPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerNovels_GetCustomerNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerNovelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerNovelsServer).GetCustomerNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customernovels.v1.CustomerNovels/GetCustomerNovels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerNovelsServer).GetCustomerNovels(ctx, req.(*CustomerNovelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerNovels_UpdateCustomerNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerNovelsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerNovelsServer).UpdateCustomerNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customernovels.v1.CustomerNovels/UpdateCustomerNovels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerNovelsServer).UpdateCustomerNovels(ctx, req.(*CustomerNovelsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerNovels_CreateCustomerNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerNovelsCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerNovelsServer).CreateCustomerNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customernovels.v1.CustomerNovels/CreateCustomerNovels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerNovelsServer).CreateCustomerNovels(ctx, req.(*CustomerNovelsCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerNovels_DeleteCustomerNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerNovelsDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerNovelsServer).DeleteCustomerNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customernovels.v1.CustomerNovels/DeleteCustomerNovels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerNovelsServer).DeleteCustomerNovels(ctx, req.(*CustomerNovelsDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerNovels_BatchDeleteCustomerNovels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerNovelsBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerNovelsServer).BatchDeleteCustomerNovels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customernovels.v1.CustomerNovels/BatchDeleteCustomerNovels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerNovelsServer).BatchDeleteCustomerNovels(ctx, req.(*CustomerNovelsBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerNovels_ServiceDesc is the grpc.ServiceDesc for CustomerNovels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerNovels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customernovels.v1.CustomerNovels",
	HandlerType: (*CustomerNovelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomerNovelsPage",
			Handler:    _CustomerNovels_GetCustomerNovelsPage_Handler,
		},
		{
			MethodName: "GetCustomerNovels",
			Handler:    _CustomerNovels_GetCustomerNovels_Handler,
		},
		{
			MethodName: "UpdateCustomerNovels",
			Handler:    _CustomerNovels_UpdateCustomerNovels_Handler,
		},
		{
			MethodName: "CreateCustomerNovels",
			Handler:    _CustomerNovels_CreateCustomerNovels_Handler,
		},
		{
			MethodName: "DeleteCustomerNovels",
			Handler:    _CustomerNovels_DeleteCustomerNovels_Handler,
		},
		{
			MethodName: "BatchDeleteCustomerNovels",
			Handler:    _CustomerNovels_BatchDeleteCustomerNovels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/customernovels/v1/customer_novels.proto",
}
