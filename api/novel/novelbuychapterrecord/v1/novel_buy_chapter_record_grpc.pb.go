// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/novelbuychapterrecord/v1/novel_buy_chapter_record.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelBuyChapterRecordClient is the client API for NovelBuyChapterRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelBuyChapterRecordClient interface {
	// 分页查询NovelBuyChapterRecord
	GetPageNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordPageReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordPageReply, error)
	// 获取NovelBuyChapterRecord
	GetNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordReply, error)
	// 更新NovelBuyChapterRecord
	UpdateNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordUpdateReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordUpdateReply, error)
	// 创建NovelBuyChapterRecord
	CreateNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordCreateReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordCreateReply, error)
	// 删除NovelBuyChapterRecord
	DeleteNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordDeleteReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordDeleteReply, error)
	// 批量删除NovelBuyChapterRecord
	BatchDeleteNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordBatchDeleteReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordDeleteReply, error)
}

type novelBuyChapterRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelBuyChapterRecordClient(cc grpc.ClientConnInterface) NovelBuyChapterRecordClient {
	return &novelBuyChapterRecordClient{cc}
}

func (c *novelBuyChapterRecordClient) GetPageNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordPageReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordPageReply, error) {
	out := new(NovelBuyChapterRecordPageReply)
	err := c.cc.Invoke(ctx, "/novelbuychapterrecord.v1.NovelBuyChapterRecord/GetPageNovelBuyChapterRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyChapterRecordClient) GetNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordReply, error) {
	out := new(NovelBuyChapterRecordReply)
	err := c.cc.Invoke(ctx, "/novelbuychapterrecord.v1.NovelBuyChapterRecord/GetNovelBuyChapterRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyChapterRecordClient) UpdateNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordUpdateReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordUpdateReply, error) {
	out := new(NovelBuyChapterRecordUpdateReply)
	err := c.cc.Invoke(ctx, "/novelbuychapterrecord.v1.NovelBuyChapterRecord/UpdateNovelBuyChapterRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyChapterRecordClient) CreateNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordCreateReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordCreateReply, error) {
	out := new(NovelBuyChapterRecordCreateReply)
	err := c.cc.Invoke(ctx, "/novelbuychapterrecord.v1.NovelBuyChapterRecord/CreateNovelBuyChapterRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyChapterRecordClient) DeleteNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordDeleteReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordDeleteReply, error) {
	out := new(NovelBuyChapterRecordDeleteReply)
	err := c.cc.Invoke(ctx, "/novelbuychapterrecord.v1.NovelBuyChapterRecord/DeleteNovelBuyChapterRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyChapterRecordClient) BatchDeleteNovelBuyChapterRecord(ctx context.Context, in *NovelBuyChapterRecordBatchDeleteReq, opts ...grpc.CallOption) (*NovelBuyChapterRecordDeleteReply, error) {
	out := new(NovelBuyChapterRecordDeleteReply)
	err := c.cc.Invoke(ctx, "/novelbuychapterrecord.v1.NovelBuyChapterRecord/BatchDeleteNovelBuyChapterRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelBuyChapterRecordServer is the server API for NovelBuyChapterRecord service.
// All implementations must embed UnimplementedNovelBuyChapterRecordServer
// for forward compatibility
type NovelBuyChapterRecordServer interface {
	// 分页查询NovelBuyChapterRecord
	GetPageNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordPageReq) (*NovelBuyChapterRecordPageReply, error)
	// 获取NovelBuyChapterRecord
	GetNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordReq) (*NovelBuyChapterRecordReply, error)
	// 更新NovelBuyChapterRecord
	UpdateNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordUpdateReq) (*NovelBuyChapterRecordUpdateReply, error)
	// 创建NovelBuyChapterRecord
	CreateNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordCreateReq) (*NovelBuyChapterRecordCreateReply, error)
	// 删除NovelBuyChapterRecord
	DeleteNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordDeleteReq) (*NovelBuyChapterRecordDeleteReply, error)
	// 批量删除NovelBuyChapterRecord
	BatchDeleteNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordBatchDeleteReq) (*NovelBuyChapterRecordDeleteReply, error)
	mustEmbedUnimplementedNovelBuyChapterRecordServer()
}

// UnimplementedNovelBuyChapterRecordServer must be embedded to have forward compatible implementations.
type UnimplementedNovelBuyChapterRecordServer struct {
}

func (UnimplementedNovelBuyChapterRecordServer) GetPageNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordPageReq) (*NovelBuyChapterRecordPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageNovelBuyChapterRecord not implemented")
}
func (UnimplementedNovelBuyChapterRecordServer) GetNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordReq) (*NovelBuyChapterRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelBuyChapterRecord not implemented")
}
func (UnimplementedNovelBuyChapterRecordServer) UpdateNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordUpdateReq) (*NovelBuyChapterRecordUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNovelBuyChapterRecord not implemented")
}
func (UnimplementedNovelBuyChapterRecordServer) CreateNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordCreateReq) (*NovelBuyChapterRecordCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNovelBuyChapterRecord not implemented")
}
func (UnimplementedNovelBuyChapterRecordServer) DeleteNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordDeleteReq) (*NovelBuyChapterRecordDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNovelBuyChapterRecord not implemented")
}
func (UnimplementedNovelBuyChapterRecordServer) BatchDeleteNovelBuyChapterRecord(context.Context, *NovelBuyChapterRecordBatchDeleteReq) (*NovelBuyChapterRecordDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNovelBuyChapterRecord not implemented")
}
func (UnimplementedNovelBuyChapterRecordServer) mustEmbedUnimplementedNovelBuyChapterRecordServer() {}

// UnsafeNovelBuyChapterRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelBuyChapterRecordServer will
// result in compilation errors.
type UnsafeNovelBuyChapterRecordServer interface {
	mustEmbedUnimplementedNovelBuyChapterRecordServer()
}

func RegisterNovelBuyChapterRecordServer(s grpc.ServiceRegistrar, srv NovelBuyChapterRecordServer) {
	s.RegisterService(&NovelBuyChapterRecord_ServiceDesc, srv)
}

func _NovelBuyChapterRecord_GetPageNovelBuyChapterRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyChapterRecordPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyChapterRecordServer).GetPageNovelBuyChapterRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuychapterrecord.v1.NovelBuyChapterRecord/GetPageNovelBuyChapterRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyChapterRecordServer).GetPageNovelBuyChapterRecord(ctx, req.(*NovelBuyChapterRecordPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyChapterRecord_GetNovelBuyChapterRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyChapterRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyChapterRecordServer).GetNovelBuyChapterRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuychapterrecord.v1.NovelBuyChapterRecord/GetNovelBuyChapterRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyChapterRecordServer).GetNovelBuyChapterRecord(ctx, req.(*NovelBuyChapterRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyChapterRecord_UpdateNovelBuyChapterRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyChapterRecordUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyChapterRecordServer).UpdateNovelBuyChapterRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuychapterrecord.v1.NovelBuyChapterRecord/UpdateNovelBuyChapterRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyChapterRecordServer).UpdateNovelBuyChapterRecord(ctx, req.(*NovelBuyChapterRecordUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyChapterRecord_CreateNovelBuyChapterRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyChapterRecordCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyChapterRecordServer).CreateNovelBuyChapterRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuychapterrecord.v1.NovelBuyChapterRecord/CreateNovelBuyChapterRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyChapterRecordServer).CreateNovelBuyChapterRecord(ctx, req.(*NovelBuyChapterRecordCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyChapterRecord_DeleteNovelBuyChapterRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyChapterRecordDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyChapterRecordServer).DeleteNovelBuyChapterRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuychapterrecord.v1.NovelBuyChapterRecord/DeleteNovelBuyChapterRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyChapterRecordServer).DeleteNovelBuyChapterRecord(ctx, req.(*NovelBuyChapterRecordDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyChapterRecord_BatchDeleteNovelBuyChapterRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyChapterRecordBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyChapterRecordServer).BatchDeleteNovelBuyChapterRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuychapterrecord.v1.NovelBuyChapterRecord/BatchDeleteNovelBuyChapterRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyChapterRecordServer).BatchDeleteNovelBuyChapterRecord(ctx, req.(*NovelBuyChapterRecordBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelBuyChapterRecord_ServiceDesc is the grpc.ServiceDesc for NovelBuyChapterRecord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelBuyChapterRecord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novelbuychapterrecord.v1.NovelBuyChapterRecord",
	HandlerType: (*NovelBuyChapterRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageNovelBuyChapterRecord",
			Handler:    _NovelBuyChapterRecord_GetPageNovelBuyChapterRecord_Handler,
		},
		{
			MethodName: "GetNovelBuyChapterRecord",
			Handler:    _NovelBuyChapterRecord_GetNovelBuyChapterRecord_Handler,
		},
		{
			MethodName: "UpdateNovelBuyChapterRecord",
			Handler:    _NovelBuyChapterRecord_UpdateNovelBuyChapterRecord_Handler,
		},
		{
			MethodName: "CreateNovelBuyChapterRecord",
			Handler:    _NovelBuyChapterRecord_CreateNovelBuyChapterRecord_Handler,
		},
		{
			MethodName: "DeleteNovelBuyChapterRecord",
			Handler:    _NovelBuyChapterRecord_DeleteNovelBuyChapterRecord_Handler,
		},
		{
			MethodName: "BatchDeleteNovelBuyChapterRecord",
			Handler:    _NovelBuyChapterRecord_BatchDeleteNovelBuyChapterRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/novelbuychapterrecord/v1/novel_buy_chapter_record.proto",
}
