// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/param/task/v1/task.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//任务名称
	TaskName string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,3,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//单位
	Unit string `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	//订阅主题
	Topic string `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	//处理方法
	Function string `protobuf:"bytes,6,opt,name=function,proto3" json:"function,omitempty"`
	//任务类型
	TaskCode string `protobuf:"bytes,7,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//前置任务ID
	PreTask int64 `protobuf:"varint,8,opt,name=preTask,proto3" json:"preTask,omitempty"`
	//点击跳转书号
	NovelId int64 `protobuf:"varint,9,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//循环类型,once
	CycleType string `protobuf:"bytes,10,opt,name=cycleType,proto3" json:"cycleType,omitempty"`
	//描述信息
	Remark string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,12,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励
	Reward int64 `protobuf:"varint,13,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资金科目
	AmountItem int32 `protobuf:"varint,14,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资金科目
	RewardItem int32 `protobuf:"varint,15,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标任务名,当任务为一天多次时,逗号分割
	TargetNames string `protobuf:"bytes,16,opt,name=targetNames,proto3" json:"targetNames,omitempty"`
	//目标值,当任务为一天多次时,逗号分割
	TargetAmounts string `protobuf:"bytes,17,opt,name=targetAmounts,proto3" json:"targetAmounts,omitempty"`
	//是否启用
	Status bool `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	//排序字段
	SortNum int64 `protobuf:"varint,19,opt,name=sortNum,proto3" json:"sortNum,omitempty"`
	//跳转动作,pay
	ActionType string `protobuf:"bytes,20,opt,name=actionType,proto3" json:"actionType,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,25,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,26,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,27,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{0}
}

func (x *TaskData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskData) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskData) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TaskData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TaskData) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *TaskData) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskData) GetPreTask() int64 {
	if x != nil {
		return x.PreTask
	}
	return 0
}

func (x *TaskData) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *TaskData) GetCycleType() string {
	if x != nil {
		return x.CycleType
	}
	return ""
}

func (x *TaskData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TaskData) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskData) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskData) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskData) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskData) GetTargetNames() string {
	if x != nil {
		return x.TargetNames
	}
	return ""
}

func (x *TaskData) GetTargetAmounts() string {
	if x != nil {
		return x.TargetAmounts
	}
	return ""
}

func (x *TaskData) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TaskData) GetSortNum() int64 {
	if x != nil {
		return x.SortNum
	}
	return 0
}

func (x *TaskData) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *TaskData) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskData) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *TaskData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TaskData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *TaskData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *TaskData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type TaskPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *TaskReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *TaskPageReq) Reset() {
	*x = TaskPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPageReq) ProtoMessage() {}

func (x *TaskPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPageReq.ProtoReflect.Descriptor instead.
func (*TaskPageReq) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{1}
}

func (x *TaskPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *TaskPageReq) GetParam() *TaskReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type TaskPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*TaskData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TaskPageReply) Reset() {
	*x = TaskPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPageReply) ProtoMessage() {}

func (x *TaskPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPageReply.ProtoReflect.Descriptor instead.
func (*TaskPageReply) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{2}
}

func (x *TaskPageReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaskPageReply) GetItems() []*TaskData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type TaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//任务名称
	TaskName string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,3,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//单位
	Unit string `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	//订阅主题
	Topic string `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	//处理方法
	Function string `protobuf:"bytes,6,opt,name=function,proto3" json:"function,omitempty"`
	//任务类型
	TaskCode string `protobuf:"bytes,7,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//前置任务ID
	PreTask int64 `protobuf:"varint,8,opt,name=preTask,proto3" json:"preTask,omitempty"`
	//点击跳转书号
	NovelId int64 `protobuf:"varint,9,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//循环类型,once
	CycleType string `protobuf:"bytes,10,opt,name=cycleType,proto3" json:"cycleType,omitempty"`
	//描述信息
	Remark string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,12,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励
	Reward int64 `protobuf:"varint,13,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资金科目
	AmountItem int32 `protobuf:"varint,14,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资金科目
	RewardItem int32 `protobuf:"varint,15,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标任务名,当任务为一天多次时,逗号分割
	TargetNames string `protobuf:"bytes,16,opt,name=targetNames,proto3" json:"targetNames,omitempty"`
	//目标值,当任务为一天多次时,逗号分割
	TargetAmounts string `protobuf:"bytes,17,opt,name=targetAmounts,proto3" json:"targetAmounts,omitempty"`
	//是否启用
	Status bool `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	//排序字段
	SortNum int64 `protobuf:"varint,19,opt,name=sortNum,proto3" json:"sortNum,omitempty"`
	//跳转动作,pay
	ActionType string `protobuf:"bytes,20,opt,name=actionType,proto3" json:"actionType,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,25,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,26,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,27,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *TaskReq) Reset() {
	*x = TaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReq) ProtoMessage() {}

func (x *TaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReq.ProtoReflect.Descriptor instead.
func (*TaskReq) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{3}
}

func (x *TaskReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskReq) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TaskReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TaskReq) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *TaskReq) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskReq) GetPreTask() int64 {
	if x != nil {
		return x.PreTask
	}
	return 0
}

func (x *TaskReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *TaskReq) GetCycleType() string {
	if x != nil {
		return x.CycleType
	}
	return ""
}

func (x *TaskReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TaskReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskReq) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskReq) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskReq) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskReq) GetTargetNames() string {
	if x != nil {
		return x.TargetNames
	}
	return ""
}

func (x *TaskReq) GetTargetAmounts() string {
	if x != nil {
		return x.TargetAmounts
	}
	return ""
}

func (x *TaskReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TaskReq) GetSortNum() int64 {
	if x != nil {
		return x.SortNum
	}
	return 0
}

func (x *TaskReq) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *TaskReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *TaskReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TaskReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *TaskReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *TaskReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type TaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *TaskData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TaskReply) Reset() {
	*x = TaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReply) ProtoMessage() {}

func (x *TaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReply.ProtoReflect.Descriptor instead.
func (*TaskReply) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{4}
}

func (x *TaskReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskReply) GetResult() *TaskData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建Task请求
type TaskCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//任务名称
	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,2,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//单位
	Unit string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	//订阅主题
	Topic string `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	//处理方法
	Function string `protobuf:"bytes,5,opt,name=function,proto3" json:"function,omitempty"`
	//任务类型
	TaskCode string `protobuf:"bytes,6,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//前置任务ID
	PreTask int64 `protobuf:"varint,7,opt,name=preTask,proto3" json:"preTask,omitempty"`
	//点击跳转书号
	NovelId int64 `protobuf:"varint,8,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//循环类型,once
	CycleType string `protobuf:"bytes,9,opt,name=cycleType,proto3" json:"cycleType,omitempty"`
	//描述信息
	Remark string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,11,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励
	Reward int64 `protobuf:"varint,12,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资金科目
	AmountItem int32 `protobuf:"varint,13,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资金科目
	RewardItem int32 `protobuf:"varint,14,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标任务名,当任务为一天多次时,逗号分割
	TargetNames string `protobuf:"bytes,15,opt,name=targetNames,proto3" json:"targetNames,omitempty"`
	//目标值,当任务为一天多次时,逗号分割
	TargetAmounts string `protobuf:"bytes,16,opt,name=targetAmounts,proto3" json:"targetAmounts,omitempty"`
	//是否启用
	Status bool `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	//排序字段
	SortNum int64 `protobuf:"varint,18,opt,name=sortNum,proto3" json:"sortNum,omitempty"`
	//跳转动作,pay
	ActionType string `protobuf:"bytes,19,opt,name=actionType,proto3" json:"actionType,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *TaskCreateReq) Reset() {
	*x = TaskCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateReq) ProtoMessage() {}

func (x *TaskCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateReq.ProtoReflect.Descriptor instead.
func (*TaskCreateReq) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{5}
}

func (x *TaskCreateReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskCreateReq) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskCreateReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TaskCreateReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TaskCreateReq) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *TaskCreateReq) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskCreateReq) GetPreTask() int64 {
	if x != nil {
		return x.PreTask
	}
	return 0
}

func (x *TaskCreateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *TaskCreateReq) GetCycleType() string {
	if x != nil {
		return x.CycleType
	}
	return ""
}

func (x *TaskCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TaskCreateReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskCreateReq) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskCreateReq) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskCreateReq) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskCreateReq) GetTargetNames() string {
	if x != nil {
		return x.TargetNames
	}
	return ""
}

func (x *TaskCreateReq) GetTargetAmounts() string {
	if x != nil {
		return x.TargetAmounts
	}
	return ""
}

func (x *TaskCreateReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TaskCreateReq) GetSortNum() int64 {
	if x != nil {
		return x.SortNum
	}
	return 0
}

func (x *TaskCreateReq) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *TaskCreateReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskCreateReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 创建Task返回
type TaskCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *TaskData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TaskCreateReply) Reset() {
	*x = TaskCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateReply) ProtoMessage() {}

func (x *TaskCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateReply.ProtoReflect.Descriptor instead.
func (*TaskCreateReply) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{6}
}

func (x *TaskCreateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskCreateReply) GetResult() *TaskData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新Task请求
type TaskUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//任务名称
	TaskName string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	//任务分组
	TaskGroup string `protobuf:"bytes,3,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	//单位
	Unit string `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	//订阅主题
	Topic string `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	//处理方法
	Function string `protobuf:"bytes,6,opt,name=function,proto3" json:"function,omitempty"`
	//任务类型
	TaskCode string `protobuf:"bytes,7,opt,name=taskCode,proto3" json:"taskCode,omitempty"`
	//前置任务ID
	PreTask int64 `protobuf:"varint,8,opt,name=preTask,proto3" json:"preTask,omitempty"`
	//点击跳转书号
	NovelId int64 `protobuf:"varint,9,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//循环类型,once
	CycleType string `protobuf:"bytes,10,opt,name=cycleType,proto3" json:"cycleType,omitempty"`
	//描述信息
	Remark string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
	//奖励金额
	Amount int64 `protobuf:"varint,12,opt,name=amount,proto3" json:"amount,omitempty"`
	//额外奖励
	Reward int64 `protobuf:"varint,13,opt,name=reward,proto3" json:"reward,omitempty"`
	//奖励资金科目
	AmountItem int32 `protobuf:"varint,14,opt,name=amountItem,proto3" json:"amountItem,omitempty"`
	//额外奖励资金科目
	RewardItem int32 `protobuf:"varint,15,opt,name=rewardItem,proto3" json:"rewardItem,omitempty"`
	//目标任务名,当任务为一天多次时,逗号分割
	TargetNames string `protobuf:"bytes,16,opt,name=targetNames,proto3" json:"targetNames,omitempty"`
	//目标值,当任务为一天多次时,逗号分割
	TargetAmounts string `protobuf:"bytes,17,opt,name=targetAmounts,proto3" json:"targetAmounts,omitempty"`
	//是否启用
	Status bool `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	//排序字段
	SortNum int64 `protobuf:"varint,19,opt,name=sortNum,proto3" json:"sortNum,omitempty"`
	//跳转动作,pay
	ActionType string `protobuf:"bytes,20,opt,name=actionType,proto3" json:"actionType,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *TaskUpdateReq) Reset() {
	*x = TaskUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdateReq) ProtoMessage() {}

func (x *TaskUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdateReq.ProtoReflect.Descriptor instead.
func (*TaskUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{7}
}

func (x *TaskUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskUpdateReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskUpdateReq) GetTaskGroup() string {
	if x != nil {
		return x.TaskGroup
	}
	return ""
}

func (x *TaskUpdateReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TaskUpdateReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TaskUpdateReq) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *TaskUpdateReq) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskUpdateReq) GetPreTask() int64 {
	if x != nil {
		return x.PreTask
	}
	return 0
}

func (x *TaskUpdateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *TaskUpdateReq) GetCycleType() string {
	if x != nil {
		return x.CycleType
	}
	return ""
}

func (x *TaskUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TaskUpdateReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TaskUpdateReq) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *TaskUpdateReq) GetAmountItem() int32 {
	if x != nil {
		return x.AmountItem
	}
	return 0
}

func (x *TaskUpdateReq) GetRewardItem() int32 {
	if x != nil {
		return x.RewardItem
	}
	return 0
}

func (x *TaskUpdateReq) GetTargetNames() string {
	if x != nil {
		return x.TargetNames
	}
	return ""
}

func (x *TaskUpdateReq) GetTargetAmounts() string {
	if x != nil {
		return x.TargetAmounts
	}
	return ""
}

func (x *TaskUpdateReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TaskUpdateReq) GetSortNum() int64 {
	if x != nil {
		return x.SortNum
	}
	return 0
}

func (x *TaskUpdateReq) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *TaskUpdateReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *TaskUpdateReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 更新Task返回
type TaskUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *TaskData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TaskUpdateReply) Reset() {
	*x = TaskUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdateReply) ProtoMessage() {}

func (x *TaskUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdateReply.ProtoReflect.Descriptor instead.
func (*TaskUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{8}
}

func (x *TaskUpdateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskUpdateReply) GetResult() *TaskData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除Task请求
type TaskDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskDeleteReq) Reset() {
	*x = TaskDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeleteReq) ProtoMessage() {}

func (x *TaskDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeleteReq.ProtoReflect.Descriptor instead.
func (*TaskDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{9}
}

func (x *TaskDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除Task请求
type TaskBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *TaskBatchDeleteReq) Reset() {
	*x = TaskBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskBatchDeleteReq) ProtoMessage() {}

func (x *TaskBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*TaskBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{10}
}

func (x *TaskBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除Task返回
type TaskDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TaskDeleteReply) Reset() {
	*x = TaskDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_param_task_v1_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeleteReply) ProtoMessage() {}

func (x *TaskDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_param_task_v1_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeleteReply.ProtoReflect.Descriptor instead.
func (*TaskDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_param_task_v1_task_proto_rawDescGZIP(), []int{11}
}

func (x *TaskDeleteReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TaskDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_param_task_v1_task_proto protoreflect.FileDescriptor

var file_api_param_task_v1_task_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x06, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x7c, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xeb, 0x06, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x64, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x99, 0x05, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa9,
	0x05, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x0f, 0x54, 0x61,
	0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x57, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x84, 0x04, 0x0a, 0x04, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x10, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x58, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22,
	0x08, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x55, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x5a, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x10, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x2a, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x42,
	0x1b, 0x5a, 0x19, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_param_task_v1_task_proto_rawDescOnce sync.Once
	file_api_param_task_v1_task_proto_rawDescData = file_api_param_task_v1_task_proto_rawDesc
)

func file_api_param_task_v1_task_proto_rawDescGZIP() []byte {
	file_api_param_task_v1_task_proto_rawDescOnce.Do(func() {
		file_api_param_task_v1_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_param_task_v1_task_proto_rawDescData)
	})
	return file_api_param_task_v1_task_proto_rawDescData
}

var file_api_param_task_v1_task_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_param_task_v1_task_proto_goTypes = []interface{}{
	(*TaskData)(nil),              // 0: task.v1.TaskData
	(*TaskPageReq)(nil),           // 1: task.v1.TaskPageReq
	(*TaskPageReply)(nil),         // 2: task.v1.TaskPageReply
	(*TaskReq)(nil),               // 3: task.v1.TaskReq
	(*TaskReply)(nil),             // 4: task.v1.TaskReply
	(*TaskCreateReq)(nil),         // 5: task.v1.TaskCreateReq
	(*TaskCreateReply)(nil),       // 6: task.v1.TaskCreateReply
	(*TaskUpdateReq)(nil),         // 7: task.v1.TaskUpdateReq
	(*TaskUpdateReply)(nil),       // 8: task.v1.TaskUpdateReply
	(*TaskDeleteReq)(nil),         // 9: task.v1.TaskDeleteReq
	(*TaskBatchDeleteReq)(nil),    // 10: task.v1.TaskBatchDeleteReq
	(*TaskDeleteReply)(nil),       // 11: task.v1.TaskDeleteReply
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),      // 13: pagin.Pagination
}
var file_api_param_task_v1_task_proto_depIdxs = []int32{
	12, // 0: task.v1.TaskData.effectTime:type_name -> google.protobuf.Timestamp
	12, // 1: task.v1.TaskData.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 2: task.v1.TaskData.createdAt:type_name -> google.protobuf.Timestamp
	12, // 3: task.v1.TaskData.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 4: task.v1.TaskPageReq.pagin:type_name -> pagin.Pagination
	3,  // 5: task.v1.TaskPageReq.param:type_name -> task.v1.TaskReq
	0,  // 6: task.v1.TaskPageReply.items:type_name -> task.v1.TaskData
	12, // 7: task.v1.TaskReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 8: task.v1.TaskReq.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 9: task.v1.TaskReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 10: task.v1.TaskReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 11: task.v1.TaskReply.result:type_name -> task.v1.TaskData
	12, // 12: task.v1.TaskCreateReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 13: task.v1.TaskCreateReq.expiredTime:type_name -> google.protobuf.Timestamp
	0,  // 14: task.v1.TaskCreateReply.result:type_name -> task.v1.TaskData
	12, // 15: task.v1.TaskUpdateReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 16: task.v1.TaskUpdateReq.expiredTime:type_name -> google.protobuf.Timestamp
	0,  // 17: task.v1.TaskUpdateReply.result:type_name -> task.v1.TaskData
	1,  // 18: task.v1.Task.GetPageTask:input_type -> task.v1.TaskPageReq
	3,  // 19: task.v1.Task.GetTask:input_type -> task.v1.TaskReq
	7,  // 20: task.v1.Task.UpdateTask:input_type -> task.v1.TaskUpdateReq
	5,  // 21: task.v1.Task.CreateTask:input_type -> task.v1.TaskCreateReq
	9,  // 22: task.v1.Task.DeleteTask:input_type -> task.v1.TaskDeleteReq
	10, // 23: task.v1.Task.BatchDeleteTask:input_type -> task.v1.TaskBatchDeleteReq
	2,  // 24: task.v1.Task.GetPageTask:output_type -> task.v1.TaskPageReply
	4,  // 25: task.v1.Task.GetTask:output_type -> task.v1.TaskReply
	8,  // 26: task.v1.Task.UpdateTask:output_type -> task.v1.TaskUpdateReply
	6,  // 27: task.v1.Task.CreateTask:output_type -> task.v1.TaskCreateReply
	11, // 28: task.v1.Task.DeleteTask:output_type -> task.v1.TaskDeleteReply
	11, // 29: task.v1.Task.BatchDeleteTask:output_type -> task.v1.TaskDeleteReply
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_api_param_task_v1_task_proto_init() }
func file_api_param_task_v1_task_proto_init() {
	if File_api_param_task_v1_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_param_task_v1_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_param_task_v1_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_param_task_v1_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_param_task_v1_task_proto_goTypes,
		DependencyIndexes: file_api_param_task_v1_task_proto_depIdxs,
		MessageInfos:      file_api_param_task_v1_task_proto_msgTypes,
	}.Build()
	File_api_param_task_v1_task_proto = out.File
	file_api_param_task_v1_task_proto_rawDesc = nil
	file_api_param_task_v1_task_proto_goTypes = nil
	file_api_param_task_v1_task_proto_depIdxs = nil
}
