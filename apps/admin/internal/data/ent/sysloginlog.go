// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysloginlog"
	"hope/apps/admin/internal/data/ent/sysuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysLoginLog is the model entity for the SysLoginLog schema.
type SysLoginLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status string `json:"status,omitempty"`
	// Ipaddr holds the value of the "ipaddr" field.
	// ip地址
	Ipaddr string `json:"ipaddr,omitempty"`
	// LoginLocation holds the value of the "loginLocation" field.
	// 归属地
	LoginLocation string `json:"loginLocation,omitempty"`
	// Browser holds the value of the "browser" field.
	// 浏览器
	Browser string `json:"browser,omitempty"`
	// Os holds the value of the "os" field.
	// 系统
	Os string `json:"os,omitempty"`
	// Platform holds the value of the "platform" field.
	// 固件
	Platform string `json:"platform,omitempty"`
	// LoginTime holds the value of the "loginTime" field.
	// 登录时间
	LoginTime time.Time `json:"loginTime,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// Msg holds the value of the "msg" field.
	// 信息
	Msg string `json:"msg,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysLoginLogQuery when eager-loading is set.
	Edges               SysLoginLogEdges `json:"edges"`
	sys_user_login_logs *int64
}

// SysLoginLogEdges holds the relations/edges for other nodes in the graph.
type SysLoginLogEdges struct {
	// User holds the value of the user edge.
	User *SysUser `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysLoginLogEdges) UserOrErr() (*SysUser, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sysuser.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysLoginLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysloginlog.FieldID, sysloginlog.FieldCreateBy, sysloginlog.FieldUpdateBy, sysloginlog.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysloginlog.FieldStatus, sysloginlog.FieldIpaddr, sysloginlog.FieldLoginLocation, sysloginlog.FieldBrowser, sysloginlog.FieldOs, sysloginlog.FieldPlatform, sysloginlog.FieldRemark, sysloginlog.FieldMsg:
			values[i] = new(sql.NullString)
		case sysloginlog.FieldLoginTime, sysloginlog.FieldCreatedAt, sysloginlog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sysloginlog.ForeignKeys[0]: // sys_user_login_logs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysLoginLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysLoginLog fields.
func (sll *SysLoginLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysloginlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sll.ID = int64(value.Int64)
		case sysloginlog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sll.Status = value.String
			}
		case sysloginlog.FieldIpaddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ipaddr", values[i])
			} else if value.Valid {
				sll.Ipaddr = value.String
			}
		case sysloginlog.FieldLoginLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field loginLocation", values[i])
			} else if value.Valid {
				sll.LoginLocation = value.String
			}
		case sysloginlog.FieldBrowser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser", values[i])
			} else if value.Valid {
				sll.Browser = value.String
			}
		case sysloginlog.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				sll.Os = value.String
			}
		case sysloginlog.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				sll.Platform = value.String
			}
		case sysloginlog.FieldLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field loginTime", values[i])
			} else if value.Valid {
				sll.LoginTime = value.Time
			}
		case sysloginlog.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sll.Remark = value.String
			}
		case sysloginlog.FieldMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msg", values[i])
			} else if value.Valid {
				sll.Msg = value.String
			}
		case sysloginlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sll.CreatedAt = value.Time
			}
		case sysloginlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sll.UpdatedAt = value.Time
			}
		case sysloginlog.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sll.CreateBy = value.Int64
			}
		case sysloginlog.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sll.UpdateBy = value.Int64
			}
		case sysloginlog.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sll.TenantId = value.Int64
			}
		case sysloginlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sys_user_login_logs", value)
			} else if value.Valid {
				sll.sys_user_login_logs = new(int64)
				*sll.sys_user_login_logs = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the SysLoginLog entity.
func (sll *SysLoginLog) QueryUser() *SysUserQuery {
	return (&SysLoginLogClient{config: sll.config}).QueryUser(sll)
}

// Update returns a builder for updating this SysLoginLog.
// Note that you need to call SysLoginLog.Unwrap() before calling this method if this SysLoginLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sll *SysLoginLog) Update() *SysLoginLogUpdateOne {
	return (&SysLoginLogClient{config: sll.config}).UpdateOne(sll)
}

// Unwrap unwraps the SysLoginLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sll *SysLoginLog) Unwrap() *SysLoginLog {
	tx, ok := sll.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysLoginLog is not a transactional entity")
	}
	sll.config.driver = tx.drv
	return sll
}

// String implements the fmt.Stringer.
func (sll *SysLoginLog) String() string {
	var builder strings.Builder
	builder.WriteString("SysLoginLog(")
	builder.WriteString(fmt.Sprintf("id=%v", sll.ID))
	builder.WriteString(", status=")
	builder.WriteString(sll.Status)
	builder.WriteString(", ipaddr=")
	builder.WriteString(sll.Ipaddr)
	builder.WriteString(", loginLocation=")
	builder.WriteString(sll.LoginLocation)
	builder.WriteString(", browser=")
	builder.WriteString(sll.Browser)
	builder.WriteString(", os=")
	builder.WriteString(sll.Os)
	builder.WriteString(", platform=")
	builder.WriteString(sll.Platform)
	builder.WriteString(", loginTime=")
	builder.WriteString(sll.LoginTime.Format(time.ANSIC))
	builder.WriteString(", remark=")
	builder.WriteString(sll.Remark)
	builder.WriteString(", msg=")
	builder.WriteString(sll.Msg)
	builder.WriteString(", createdAt=")
	builder.WriteString(sll.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sll.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sll.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sll.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sll.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysLoginLogs is a parsable slice of SysLoginLog.
type SysLoginLogs []*SysLoginLog

func (sll SysLoginLogs) config(cfg config) {
	for _i := range sll {
		sll[_i].config = cfg
	}
}
