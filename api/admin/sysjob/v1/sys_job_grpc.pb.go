// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/sysjob/v1/sys_job.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysJobClient is the client API for SysJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysJobClient interface {
	// 分页查询SysJob
	GetPageSysJob(ctx context.Context, in *SysJobPageReq, opts ...grpc.CallOption) (*SysJobPageReply, error)
	// 获取SysJob
	GetSysJob(ctx context.Context, in *SysJobReq, opts ...grpc.CallOption) (*SysJobReply, error)
	// 更新SysJob
	UpdateSysJob(ctx context.Context, in *SysJobUpdateReq, opts ...grpc.CallOption) (*SysJobUpdateReply, error)
	// 创建SysJob
	CreateSysJob(ctx context.Context, in *SysJobCreateReq, opts ...grpc.CallOption) (*SysJobCreateReply, error)
	// 删除SysJob
	DeleteSysJob(ctx context.Context, in *SysJobDeleteReq, opts ...grpc.CallOption) (*SysJobDeleteReply, error)
	// 批量删除SysJob
	BatchDeleteSysJob(ctx context.Context, in *SysJobBatchDeleteReq, opts ...grpc.CallOption) (*SysJobDeleteReply, error)
}

type sysJobClient struct {
	cc grpc.ClientConnInterface
}

func NewSysJobClient(cc grpc.ClientConnInterface) SysJobClient {
	return &sysJobClient{cc}
}

func (c *sysJobClient) GetPageSysJob(ctx context.Context, in *SysJobPageReq, opts ...grpc.CallOption) (*SysJobPageReply, error) {
	out := new(SysJobPageReply)
	err := c.cc.Invoke(ctx, "/sysjob.v1.SysJob/GetPageSysJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobClient) GetSysJob(ctx context.Context, in *SysJobReq, opts ...grpc.CallOption) (*SysJobReply, error) {
	out := new(SysJobReply)
	err := c.cc.Invoke(ctx, "/sysjob.v1.SysJob/GetSysJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobClient) UpdateSysJob(ctx context.Context, in *SysJobUpdateReq, opts ...grpc.CallOption) (*SysJobUpdateReply, error) {
	out := new(SysJobUpdateReply)
	err := c.cc.Invoke(ctx, "/sysjob.v1.SysJob/UpdateSysJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobClient) CreateSysJob(ctx context.Context, in *SysJobCreateReq, opts ...grpc.CallOption) (*SysJobCreateReply, error) {
	out := new(SysJobCreateReply)
	err := c.cc.Invoke(ctx, "/sysjob.v1.SysJob/CreateSysJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobClient) DeleteSysJob(ctx context.Context, in *SysJobDeleteReq, opts ...grpc.CallOption) (*SysJobDeleteReply, error) {
	out := new(SysJobDeleteReply)
	err := c.cc.Invoke(ctx, "/sysjob.v1.SysJob/DeleteSysJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobClient) BatchDeleteSysJob(ctx context.Context, in *SysJobBatchDeleteReq, opts ...grpc.CallOption) (*SysJobDeleteReply, error) {
	out := new(SysJobDeleteReply)
	err := c.cc.Invoke(ctx, "/sysjob.v1.SysJob/BatchDeleteSysJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysJobServer is the server API for SysJob service.
// All implementations must embed UnimplementedSysJobServer
// for forward compatibility
type SysJobServer interface {
	// 分页查询SysJob
	GetPageSysJob(context.Context, *SysJobPageReq) (*SysJobPageReply, error)
	// 获取SysJob
	GetSysJob(context.Context, *SysJobReq) (*SysJobReply, error)
	// 更新SysJob
	UpdateSysJob(context.Context, *SysJobUpdateReq) (*SysJobUpdateReply, error)
	// 创建SysJob
	CreateSysJob(context.Context, *SysJobCreateReq) (*SysJobCreateReply, error)
	// 删除SysJob
	DeleteSysJob(context.Context, *SysJobDeleteReq) (*SysJobDeleteReply, error)
	// 批量删除SysJob
	BatchDeleteSysJob(context.Context, *SysJobBatchDeleteReq) (*SysJobDeleteReply, error)
	mustEmbedUnimplementedSysJobServer()
}

// UnimplementedSysJobServer must be embedded to have forward compatible implementations.
type UnimplementedSysJobServer struct {
}

func (UnimplementedSysJobServer) GetPageSysJob(context.Context, *SysJobPageReq) (*SysJobPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageSysJob not implemented")
}
func (UnimplementedSysJobServer) GetSysJob(context.Context, *SysJobReq) (*SysJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysJob not implemented")
}
func (UnimplementedSysJobServer) UpdateSysJob(context.Context, *SysJobUpdateReq) (*SysJobUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysJob not implemented")
}
func (UnimplementedSysJobServer) CreateSysJob(context.Context, *SysJobCreateReq) (*SysJobCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysJob not implemented")
}
func (UnimplementedSysJobServer) DeleteSysJob(context.Context, *SysJobDeleteReq) (*SysJobDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysJob not implemented")
}
func (UnimplementedSysJobServer) BatchDeleteSysJob(context.Context, *SysJobBatchDeleteReq) (*SysJobDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysJob not implemented")
}
func (UnimplementedSysJobServer) mustEmbedUnimplementedSysJobServer() {}

// UnsafeSysJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysJobServer will
// result in compilation errors.
type UnsafeSysJobServer interface {
	mustEmbedUnimplementedSysJobServer()
}

func RegisterSysJobServer(s grpc.ServiceRegistrar, srv SysJobServer) {
	s.RegisterService(&SysJob_ServiceDesc, srv)
}

func _SysJob_GetPageSysJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobServer).GetPageSysJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjob.v1.SysJob/GetPageSysJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobServer).GetPageSysJob(ctx, req.(*SysJobPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJob_GetSysJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobServer).GetSysJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjob.v1.SysJob/GetSysJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobServer).GetSysJob(ctx, req.(*SysJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJob_UpdateSysJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobServer).UpdateSysJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjob.v1.SysJob/UpdateSysJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobServer).UpdateSysJob(ctx, req.(*SysJobUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJob_CreateSysJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobServer).CreateSysJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjob.v1.SysJob/CreateSysJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobServer).CreateSysJob(ctx, req.(*SysJobCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJob_DeleteSysJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobServer).DeleteSysJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjob.v1.SysJob/DeleteSysJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobServer).DeleteSysJob(ctx, req.(*SysJobDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJob_BatchDeleteSysJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobServer).BatchDeleteSysJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjob.v1.SysJob/BatchDeleteSysJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobServer).BatchDeleteSysJob(ctx, req.(*SysJobBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysJob_ServiceDesc is the grpc.ServiceDesc for SysJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysjob.v1.SysJob",
	HandlerType: (*SysJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageSysJob",
			Handler:    _SysJob_GetPageSysJob_Handler,
		},
		{
			MethodName: "GetSysJob",
			Handler:    _SysJob_GetSysJob_Handler,
		},
		{
			MethodName: "UpdateSysJob",
			Handler:    _SysJob_UpdateSysJob_Handler,
		},
		{
			MethodName: "CreateSysJob",
			Handler:    _SysJob_CreateSysJob_Handler,
		},
		{
			MethodName: "DeleteSysJob",
			Handler:    _SysJob_DeleteSysJob_Handler,
		},
		{
			MethodName: "BatchDeleteSysJob",
			Handler:    _SysJob_BatchDeleteSysJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/sysjob/v1/sys_job.proto",
}
