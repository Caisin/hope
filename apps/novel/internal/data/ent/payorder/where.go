// Code generated by entc, DO NOT EDIT.

package payorder

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OrderId applies equality check predicate on the "orderId" field. It's identical to OrderIdEQ.
func OrderId(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderId), v))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// ChId applies equality check predicate on the "chId" field. It's identical to ChIdEQ.
func ChId(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChId), v))
	})
}

// AgreementId applies equality check predicate on the "agreementId" field. It's identical to AgreementIdEQ.
func AgreementId(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgreementId), v))
	})
}

// LastRead applies equality check predicate on the "lastRead" field. It's identical to LastReadEQ.
func LastRead(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastRead), v))
	})
}

// LastChapter applies equality check predicate on the "lastChapter" field. It's identical to LastChapterEQ.
func LastChapter(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastChapter), v))
	})
}

// PaymentName applies equality check predicate on the "paymentName" field. It's identical to PaymentNameEQ.
func PaymentName(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentName), v))
	})
}

// PaymentId applies equality check predicate on the "paymentId" field. It's identical to PaymentIdEQ.
func PaymentId(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentId), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v schema.OrderState) predicate.PayOrder {
	vc := int32(v)
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), vc))
	})
}

// Payment applies equality check predicate on the "payment" field. It's identical to PaymentEQ.
func Payment(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayment), v))
	})
}

// PaymentTime applies equality check predicate on the "paymentTime" field. It's identical to PaymentTimeEQ.
func PaymentTime(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentTime), v))
	})
}

// CloseTime applies equality check predicate on the "closeTime" field. It's identical to CloseTimeEQ.
func CloseTime(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCloseTime), v))
	})
}

// Coin applies equality check predicate on the "coin" field. It's identical to CoinEQ.
func Coin(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoin), v))
	})
}

// Coupon applies equality check predicate on the "coupon" field. It's identical to CouponEQ.
func Coupon(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoupon), v))
	})
}

// VipDays applies equality check predicate on the "vipDays" field. It's identical to VipDaysEQ.
func VipDays(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipDays), v))
	})
}

// VipType applies equality check predicate on the "vipType" field. It's identical to VipTypeEQ.
func VipType(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipType), v))
	})
}

// VipName applies equality check predicate on the "vipName" field. It's identical to VipNameEQ.
func VipName(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipName), v))
	})
}

// Times applies equality check predicate on the "times" field. It's identical to TimesEQ.
func Times(v int32) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// OtherOrderId applies equality check predicate on the "otherOrderId" field. It's identical to OtherOrderIdEQ.
func OtherOrderId(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherOrderId), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// OrderIdEQ applies the EQ predicate on the "orderId" field.
func OrderIdEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderId), v))
	})
}

// OrderIdNEQ applies the NEQ predicate on the "orderId" field.
func OrderIdNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderId), v))
	})
}

// OrderIdIn applies the In predicate on the "orderId" field.
func OrderIdIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderId), v...))
	})
}

// OrderIdNotIn applies the NotIn predicate on the "orderId" field.
func OrderIdNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderId), v...))
	})
}

// OrderIdGT applies the GT predicate on the "orderId" field.
func OrderIdGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderId), v))
	})
}

// OrderIdGTE applies the GTE predicate on the "orderId" field.
func OrderIdGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderId), v))
	})
}

// OrderIdLT applies the LT predicate on the "orderId" field.
func OrderIdLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderId), v))
	})
}

// OrderIdLTE applies the LTE predicate on the "orderId" field.
func OrderIdLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderId), v))
	})
}

// OrderIdContains applies the Contains predicate on the "orderId" field.
func OrderIdContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderId), v))
	})
}

// OrderIdHasPrefix applies the HasPrefix predicate on the "orderId" field.
func OrderIdHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderId), v))
	})
}

// OrderIdHasSuffix applies the HasSuffix predicate on the "orderId" field.
func OrderIdHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderId), v))
	})
}

// OrderIdEqualFold applies the EqualFold predicate on the "orderId" field.
func OrderIdEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderId), v))
	})
}

// OrderIdContainsFold applies the ContainsFold predicate on the "orderId" field.
func OrderIdContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// ChIdEQ applies the EQ predicate on the "chId" field.
func ChIdEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChId), v))
	})
}

// ChIdNEQ applies the NEQ predicate on the "chId" field.
func ChIdNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChId), v))
	})
}

// ChIdIn applies the In predicate on the "chId" field.
func ChIdIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChId), v...))
	})
}

// ChIdNotIn applies the NotIn predicate on the "chId" field.
func ChIdNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChId), v...))
	})
}

// AgreementIdEQ applies the EQ predicate on the "agreementId" field.
func AgreementIdEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAgreementId), v))
	})
}

// AgreementIdNEQ applies the NEQ predicate on the "agreementId" field.
func AgreementIdNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAgreementId), v))
	})
}

// AgreementIdIn applies the In predicate on the "agreementId" field.
func AgreementIdIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAgreementId), v...))
	})
}

// AgreementIdNotIn applies the NotIn predicate on the "agreementId" field.
func AgreementIdNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAgreementId), v...))
	})
}

// LastReadEQ applies the EQ predicate on the "lastRead" field.
func LastReadEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastRead), v))
	})
}

// LastReadNEQ applies the NEQ predicate on the "lastRead" field.
func LastReadNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastRead), v))
	})
}

// LastReadIn applies the In predicate on the "lastRead" field.
func LastReadIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastRead), v...))
	})
}

// LastReadNotIn applies the NotIn predicate on the "lastRead" field.
func LastReadNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastRead), v...))
	})
}

// LastReadGT applies the GT predicate on the "lastRead" field.
func LastReadGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastRead), v))
	})
}

// LastReadGTE applies the GTE predicate on the "lastRead" field.
func LastReadGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastRead), v))
	})
}

// LastReadLT applies the LT predicate on the "lastRead" field.
func LastReadLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastRead), v))
	})
}

// LastReadLTE applies the LTE predicate on the "lastRead" field.
func LastReadLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastRead), v))
	})
}

// LastReadContains applies the Contains predicate on the "lastRead" field.
func LastReadContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastRead), v))
	})
}

// LastReadHasPrefix applies the HasPrefix predicate on the "lastRead" field.
func LastReadHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastRead), v))
	})
}

// LastReadHasSuffix applies the HasSuffix predicate on the "lastRead" field.
func LastReadHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastRead), v))
	})
}

// LastReadEqualFold applies the EqualFold predicate on the "lastRead" field.
func LastReadEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastRead), v))
	})
}

// LastReadContainsFold applies the ContainsFold predicate on the "lastRead" field.
func LastReadContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastRead), v))
	})
}

// LastChapterEQ applies the EQ predicate on the "lastChapter" field.
func LastChapterEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastChapter), v))
	})
}

// LastChapterNEQ applies the NEQ predicate on the "lastChapter" field.
func LastChapterNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastChapter), v))
	})
}

// LastChapterIn applies the In predicate on the "lastChapter" field.
func LastChapterIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastChapter), v...))
	})
}

// LastChapterNotIn applies the NotIn predicate on the "lastChapter" field.
func LastChapterNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastChapter), v...))
	})
}

// LastChapterGT applies the GT predicate on the "lastChapter" field.
func LastChapterGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastChapter), v))
	})
}

// LastChapterGTE applies the GTE predicate on the "lastChapter" field.
func LastChapterGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastChapter), v))
	})
}

// LastChapterLT applies the LT predicate on the "lastChapter" field.
func LastChapterLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastChapter), v))
	})
}

// LastChapterLTE applies the LTE predicate on the "lastChapter" field.
func LastChapterLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastChapter), v))
	})
}

// LastChapterContains applies the Contains predicate on the "lastChapter" field.
func LastChapterContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastChapter), v))
	})
}

// LastChapterHasPrefix applies the HasPrefix predicate on the "lastChapter" field.
func LastChapterHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastChapter), v))
	})
}

// LastChapterHasSuffix applies the HasSuffix predicate on the "lastChapter" field.
func LastChapterHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastChapter), v))
	})
}

// LastChapterEqualFold applies the EqualFold predicate on the "lastChapter" field.
func LastChapterEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastChapter), v))
	})
}

// LastChapterContainsFold applies the ContainsFold predicate on the "lastChapter" field.
func LastChapterContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastChapter), v))
	})
}

// PaymentNameEQ applies the EQ predicate on the "paymentName" field.
func PaymentNameEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentName), v))
	})
}

// PaymentNameNEQ applies the NEQ predicate on the "paymentName" field.
func PaymentNameNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentName), v))
	})
}

// PaymentNameIn applies the In predicate on the "paymentName" field.
func PaymentNameIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentName), v...))
	})
}

// PaymentNameNotIn applies the NotIn predicate on the "paymentName" field.
func PaymentNameNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentName), v...))
	})
}

// PaymentNameGT applies the GT predicate on the "paymentName" field.
func PaymentNameGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentName), v))
	})
}

// PaymentNameGTE applies the GTE predicate on the "paymentName" field.
func PaymentNameGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentName), v))
	})
}

// PaymentNameLT applies the LT predicate on the "paymentName" field.
func PaymentNameLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentName), v))
	})
}

// PaymentNameLTE applies the LTE predicate on the "paymentName" field.
func PaymentNameLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentName), v))
	})
}

// PaymentNameContains applies the Contains predicate on the "paymentName" field.
func PaymentNameContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentName), v))
	})
}

// PaymentNameHasPrefix applies the HasPrefix predicate on the "paymentName" field.
func PaymentNameHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentName), v))
	})
}

// PaymentNameHasSuffix applies the HasSuffix predicate on the "paymentName" field.
func PaymentNameHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentName), v))
	})
}

// PaymentNameEqualFold applies the EqualFold predicate on the "paymentName" field.
func PaymentNameEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentName), v))
	})
}

// PaymentNameContainsFold applies the ContainsFold predicate on the "paymentName" field.
func PaymentNameContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentName), v))
	})
}

// PaymentIdEQ applies the EQ predicate on the "paymentId" field.
func PaymentIdEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentId), v))
	})
}

// PaymentIdNEQ applies the NEQ predicate on the "paymentId" field.
func PaymentIdNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentId), v))
	})
}

// PaymentIdIn applies the In predicate on the "paymentId" field.
func PaymentIdIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentId), v...))
	})
}

// PaymentIdNotIn applies the NotIn predicate on the "paymentId" field.
func PaymentIdNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentId), v...))
	})
}

// PaymentIdGT applies the GT predicate on the "paymentId" field.
func PaymentIdGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentId), v))
	})
}

// PaymentIdGTE applies the GTE predicate on the "paymentId" field.
func PaymentIdGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentId), v))
	})
}

// PaymentIdLT applies the LT predicate on the "paymentId" field.
func PaymentIdLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentId), v))
	})
}

// PaymentIdLTE applies the LTE predicate on the "paymentId" field.
func PaymentIdLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentId), v))
	})
}

// PaymentIdContains applies the Contains predicate on the "paymentId" field.
func PaymentIdContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentId), v))
	})
}

// PaymentIdHasPrefix applies the HasPrefix predicate on the "paymentId" field.
func PaymentIdHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentId), v))
	})
}

// PaymentIdHasSuffix applies the HasSuffix predicate on the "paymentId" field.
func PaymentIdHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentId), v))
	})
}

// PaymentIdEqualFold applies the EqualFold predicate on the "paymentId" field.
func PaymentIdEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentId), v))
	})
}

// PaymentIdContainsFold applies the ContainsFold predicate on the "paymentId" field.
func PaymentIdContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentId), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v schema.OrderState) predicate.PayOrder {
	vc := int32(v)
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), vc))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v schema.OrderState) predicate.PayOrder {
	vc := int32(v)
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), vc))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...schema.OrderState) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...schema.OrderState) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v schema.OrderState) predicate.PayOrder {
	vc := int32(v)
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), vc))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v schema.OrderState) predicate.PayOrder {
	vc := int32(v)
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), vc))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v schema.OrderState) predicate.PayOrder {
	vc := int32(v)
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), vc))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v schema.OrderState) predicate.PayOrder {
	vc := int32(v)
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), vc))
	})
}

// PaymentEQ applies the EQ predicate on the "payment" field.
func PaymentEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayment), v))
	})
}

// PaymentNEQ applies the NEQ predicate on the "payment" field.
func PaymentNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayment), v))
	})
}

// PaymentIn applies the In predicate on the "payment" field.
func PaymentIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayment), v...))
	})
}

// PaymentNotIn applies the NotIn predicate on the "payment" field.
func PaymentNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayment), v...))
	})
}

// PaymentGT applies the GT predicate on the "payment" field.
func PaymentGT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayment), v))
	})
}

// PaymentGTE applies the GTE predicate on the "payment" field.
func PaymentGTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayment), v))
	})
}

// PaymentLT applies the LT predicate on the "payment" field.
func PaymentLT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayment), v))
	})
}

// PaymentLTE applies the LTE predicate on the "payment" field.
func PaymentLTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayment), v))
	})
}

// PaymentTimeEQ applies the EQ predicate on the "paymentTime" field.
func PaymentTimeEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentTime), v))
	})
}

// PaymentTimeNEQ applies the NEQ predicate on the "paymentTime" field.
func PaymentTimeNEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentTime), v))
	})
}

// PaymentTimeIn applies the In predicate on the "paymentTime" field.
func PaymentTimeIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentTime), v...))
	})
}

// PaymentTimeNotIn applies the NotIn predicate on the "paymentTime" field.
func PaymentTimeNotIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentTime), v...))
	})
}

// PaymentTimeGT applies the GT predicate on the "paymentTime" field.
func PaymentTimeGT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentTime), v))
	})
}

// PaymentTimeGTE applies the GTE predicate on the "paymentTime" field.
func PaymentTimeGTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentTime), v))
	})
}

// PaymentTimeLT applies the LT predicate on the "paymentTime" field.
func PaymentTimeLT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentTime), v))
	})
}

// PaymentTimeLTE applies the LTE predicate on the "paymentTime" field.
func PaymentTimeLTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentTime), v))
	})
}

// CloseTimeEQ applies the EQ predicate on the "closeTime" field.
func CloseTimeEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCloseTime), v))
	})
}

// CloseTimeNEQ applies the NEQ predicate on the "closeTime" field.
func CloseTimeNEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCloseTime), v))
	})
}

// CloseTimeIn applies the In predicate on the "closeTime" field.
func CloseTimeIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCloseTime), v...))
	})
}

// CloseTimeNotIn applies the NotIn predicate on the "closeTime" field.
func CloseTimeNotIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCloseTime), v...))
	})
}

// CloseTimeGT applies the GT predicate on the "closeTime" field.
func CloseTimeGT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCloseTime), v))
	})
}

// CloseTimeGTE applies the GTE predicate on the "closeTime" field.
func CloseTimeGTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCloseTime), v))
	})
}

// CloseTimeLT applies the LT predicate on the "closeTime" field.
func CloseTimeLT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCloseTime), v))
	})
}

// CloseTimeLTE applies the LTE predicate on the "closeTime" field.
func CloseTimeLTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCloseTime), v))
	})
}

// PayTypeEQ applies the EQ predicate on the "payType" field.
func PayTypeEQ(v PayType) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayType), v))
	})
}

// PayTypeNEQ applies the NEQ predicate on the "payType" field.
func PayTypeNEQ(v PayType) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayType), v))
	})
}

// PayTypeIn applies the In predicate on the "payType" field.
func PayTypeIn(vs ...PayType) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayType), v...))
	})
}

// PayTypeNotIn applies the NotIn predicate on the "payType" field.
func PayTypeNotIn(vs ...PayType) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayType), v...))
	})
}

// CoinEQ applies the EQ predicate on the "coin" field.
func CoinEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoin), v))
	})
}

// CoinNEQ applies the NEQ predicate on the "coin" field.
func CoinNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoin), v))
	})
}

// CoinIn applies the In predicate on the "coin" field.
func CoinIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoin), v...))
	})
}

// CoinNotIn applies the NotIn predicate on the "coin" field.
func CoinNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoin), v...))
	})
}

// CoinGT applies the GT predicate on the "coin" field.
func CoinGT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoin), v))
	})
}

// CoinGTE applies the GTE predicate on the "coin" field.
func CoinGTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoin), v))
	})
}

// CoinLT applies the LT predicate on the "coin" field.
func CoinLT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoin), v))
	})
}

// CoinLTE applies the LTE predicate on the "coin" field.
func CoinLTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoin), v))
	})
}

// CouponEQ applies the EQ predicate on the "coupon" field.
func CouponEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoupon), v))
	})
}

// CouponNEQ applies the NEQ predicate on the "coupon" field.
func CouponNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoupon), v))
	})
}

// CouponIn applies the In predicate on the "coupon" field.
func CouponIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoupon), v...))
	})
}

// CouponNotIn applies the NotIn predicate on the "coupon" field.
func CouponNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoupon), v...))
	})
}

// CouponGT applies the GT predicate on the "coupon" field.
func CouponGT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoupon), v))
	})
}

// CouponGTE applies the GTE predicate on the "coupon" field.
func CouponGTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoupon), v))
	})
}

// CouponLT applies the LT predicate on the "coupon" field.
func CouponLT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoupon), v))
	})
}

// CouponLTE applies the LTE predicate on the "coupon" field.
func CouponLTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoupon), v))
	})
}

// VipDaysEQ applies the EQ predicate on the "vipDays" field.
func VipDaysEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipDays), v))
	})
}

// VipDaysNEQ applies the NEQ predicate on the "vipDays" field.
func VipDaysNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVipDays), v))
	})
}

// VipDaysIn applies the In predicate on the "vipDays" field.
func VipDaysIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVipDays), v...))
	})
}

// VipDaysNotIn applies the NotIn predicate on the "vipDays" field.
func VipDaysNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVipDays), v...))
	})
}

// VipDaysGT applies the GT predicate on the "vipDays" field.
func VipDaysGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVipDays), v))
	})
}

// VipDaysGTE applies the GTE predicate on the "vipDays" field.
func VipDaysGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVipDays), v))
	})
}

// VipDaysLT applies the LT predicate on the "vipDays" field.
func VipDaysLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVipDays), v))
	})
}

// VipDaysLTE applies the LTE predicate on the "vipDays" field.
func VipDaysLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVipDays), v))
	})
}

// VipDaysContains applies the Contains predicate on the "vipDays" field.
func VipDaysContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVipDays), v))
	})
}

// VipDaysHasPrefix applies the HasPrefix predicate on the "vipDays" field.
func VipDaysHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVipDays), v))
	})
}

// VipDaysHasSuffix applies the HasSuffix predicate on the "vipDays" field.
func VipDaysHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVipDays), v))
	})
}

// VipDaysIsNil applies the IsNil predicate on the "vipDays" field.
func VipDaysIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVipDays)))
	})
}

// VipDaysNotNil applies the NotNil predicate on the "vipDays" field.
func VipDaysNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVipDays)))
	})
}

// VipDaysEqualFold applies the EqualFold predicate on the "vipDays" field.
func VipDaysEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVipDays), v))
	})
}

// VipDaysContainsFold applies the ContainsFold predicate on the "vipDays" field.
func VipDaysContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVipDays), v))
	})
}

// VipTypeEQ applies the EQ predicate on the "vipType" field.
func VipTypeEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipType), v))
	})
}

// VipTypeNEQ applies the NEQ predicate on the "vipType" field.
func VipTypeNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVipType), v))
	})
}

// VipTypeIn applies the In predicate on the "vipType" field.
func VipTypeIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVipType), v...))
	})
}

// VipTypeNotIn applies the NotIn predicate on the "vipType" field.
func VipTypeNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVipType), v...))
	})
}

// VipTypeGT applies the GT predicate on the "vipType" field.
func VipTypeGT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVipType), v))
	})
}

// VipTypeGTE applies the GTE predicate on the "vipType" field.
func VipTypeGTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVipType), v))
	})
}

// VipTypeLT applies the LT predicate on the "vipType" field.
func VipTypeLT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVipType), v))
	})
}

// VipTypeLTE applies the LTE predicate on the "vipType" field.
func VipTypeLTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVipType), v))
	})
}

// VipTypeIsNil applies the IsNil predicate on the "vipType" field.
func VipTypeIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVipType)))
	})
}

// VipTypeNotNil applies the NotNil predicate on the "vipType" field.
func VipTypeNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVipType)))
	})
}

// VipNameEQ applies the EQ predicate on the "vipName" field.
func VipNameEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipName), v))
	})
}

// VipNameNEQ applies the NEQ predicate on the "vipName" field.
func VipNameNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVipName), v))
	})
}

// VipNameIn applies the In predicate on the "vipName" field.
func VipNameIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVipName), v...))
	})
}

// VipNameNotIn applies the NotIn predicate on the "vipName" field.
func VipNameNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVipName), v...))
	})
}

// VipNameGT applies the GT predicate on the "vipName" field.
func VipNameGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVipName), v))
	})
}

// VipNameGTE applies the GTE predicate on the "vipName" field.
func VipNameGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVipName), v))
	})
}

// VipNameLT applies the LT predicate on the "vipName" field.
func VipNameLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVipName), v))
	})
}

// VipNameLTE applies the LTE predicate on the "vipName" field.
func VipNameLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVipName), v))
	})
}

// VipNameContains applies the Contains predicate on the "vipName" field.
func VipNameContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVipName), v))
	})
}

// VipNameHasPrefix applies the HasPrefix predicate on the "vipName" field.
func VipNameHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVipName), v))
	})
}

// VipNameHasSuffix applies the HasSuffix predicate on the "vipName" field.
func VipNameHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVipName), v))
	})
}

// VipNameIsNil applies the IsNil predicate on the "vipName" field.
func VipNameIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVipName)))
	})
}

// VipNameNotNil applies the NotNil predicate on the "vipName" field.
func VipNameNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVipName)))
	})
}

// VipNameEqualFold applies the EqualFold predicate on the "vipName" field.
func VipNameEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVipName), v))
	})
}

// VipNameContainsFold applies the ContainsFold predicate on the "vipName" field.
func VipNameContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVipName), v))
	})
}

// TimesEQ applies the EQ predicate on the "times" field.
func TimesEQ(v int32) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// TimesNEQ applies the NEQ predicate on the "times" field.
func TimesNEQ(v int32) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimes), v))
	})
}

// TimesIn applies the In predicate on the "times" field.
func TimesIn(vs ...int32) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimes), v...))
	})
}

// TimesNotIn applies the NotIn predicate on the "times" field.
func TimesNotIn(vs ...int32) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimes), v...))
	})
}

// TimesGT applies the GT predicate on the "times" field.
func TimesGT(v int32) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimes), v))
	})
}

// TimesGTE applies the GTE predicate on the "times" field.
func TimesGTE(v int32) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimes), v))
	})
}

// TimesLT applies the LT predicate on the "times" field.
func TimesLT(v int32) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimes), v))
	})
}

// TimesLTE applies the LTE predicate on the "times" field.
func TimesLTE(v int32) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimes), v))
	})
}

// OtherOrderIdEQ applies the EQ predicate on the "otherOrderId" field.
func OtherOrderIdEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdNEQ applies the NEQ predicate on the "otherOrderId" field.
func OtherOrderIdNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdIn applies the In predicate on the "otherOrderId" field.
func OtherOrderIdIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOtherOrderId), v...))
	})
}

// OtherOrderIdNotIn applies the NotIn predicate on the "otherOrderId" field.
func OtherOrderIdNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOtherOrderId), v...))
	})
}

// OtherOrderIdGT applies the GT predicate on the "otherOrderId" field.
func OtherOrderIdGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdGTE applies the GTE predicate on the "otherOrderId" field.
func OtherOrderIdGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdLT applies the LT predicate on the "otherOrderId" field.
func OtherOrderIdLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdLTE applies the LTE predicate on the "otherOrderId" field.
func OtherOrderIdLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdContains applies the Contains predicate on the "otherOrderId" field.
func OtherOrderIdContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdHasPrefix applies the HasPrefix predicate on the "otherOrderId" field.
func OtherOrderIdHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdHasSuffix applies the HasSuffix predicate on the "otherOrderId" field.
func OtherOrderIdHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdIsNil applies the IsNil predicate on the "otherOrderId" field.
func OtherOrderIdIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOtherOrderId)))
	})
}

// OtherOrderIdNotNil applies the NotNil predicate on the "otherOrderId" field.
func OtherOrderIdNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOtherOrderId)))
	})
}

// OtherOrderIdEqualFold applies the EqualFold predicate on the "otherOrderId" field.
func OtherOrderIdEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOtherOrderId), v))
	})
}

// OtherOrderIdContainsFold applies the ContainsFold predicate on the "otherOrderId" field.
func OtherOrderIdContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOtherOrderId), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.SocialUser) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChannel applies the HasEdge predicate on the "channel" edge.
func HasChannel() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelWith applies the HasEdge predicate on the "channel" edge with a given conditions (other predicates).
func HasChannelWith(preds ...predicate.AdChannel) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgreement applies the HasEdge predicate on the "agreement" edge.
func HasAgreement() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AgreementTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AgreementTable, AgreementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgreementWith applies the HasEdge predicate on the "agreement" edge with a given conditions (other predicates).
func HasAgreementWith(preds ...predicate.AgreementLog) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AgreementInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AgreementTable, AgreementColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PayOrder) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PayOrder) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PayOrder) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
