// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/customer_novel_config.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/customernovelconfig/v1"
	"hope/apps/novel/internal/data/ent"
)

func CustomerNovelConfigUpdateReq2Data(v *v1.CustomerNovelConfigUpdateReq) *ent.CustomerNovelConfig {
	if v == nil {
		return nil
	}
	return &ent.CustomerNovelConfig{
		ID:             v.Id,
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
	}
}

func CustomerNovelConfigData2UpdateReq(v *ent.CustomerNovelConfig) *v1.CustomerNovelConfigUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.CustomerNovelConfigUpdateReq{
		Id:             v.ID,
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
	}
}

func CustomerNovelConfigCreateReq2Data(v *v1.CustomerNovelConfigCreateReq) *ent.CustomerNovelConfig {
	if v == nil {
		return nil
	}
	return &ent.CustomerNovelConfig{
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
	}
}

func CustomerNovelConfigData2CreateReq(v *ent.CustomerNovelConfig) *v1.CustomerNovelConfigCreateReq {
	if v == nil {
		return nil
	}
	return &v1.CustomerNovelConfigCreateReq{
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
	}
}

func CustomerNovelConfigReq2Data(v *v1.CustomerNovelConfigReq) *ent.CustomerNovelConfig {
	if v == nil {
		return nil
	}
	return &ent.CustomerNovelConfig{
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
	}
}

func CustomerNovelConfigData2Req(v *ent.CustomerNovelConfig) *v1.CustomerNovelConfigReq {
	if v == nil {
		return nil
	}
	return &v1.CustomerNovelConfigReq{
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
	}
}

func CustomerNovelConfigReply2Data(v *v1.CustomerNovelConfigReply) *ent.CustomerNovelConfig {
	if v == nil {
		return nil
	}
	return &ent.CustomerNovelConfig{
		ID:             v.Id,
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
		State:          v.State,
		CreatedAt:      v.CreatedAt.AsTime(),
		UpdatedAt:      v.UpdatedAt.AsTime(),
		CreateBy:       v.CreateBy,
		UpdateBy:       v.UpdateBy,
		TenantId:       v.TenantId,
	}
}

func CustomerNovelConfigData2Reply(v *ent.CustomerNovelConfig) *v1.CustomerNovelConfigReply {
	if v == nil {
		return nil
	}
	return &v1.CustomerNovelConfigReply{
		Id:             v.ID,
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
		State:          v.State,
		CreatedAt:      timestamppb.New(v.CreatedAt),
		UpdatedAt:      timestamppb.New(v.UpdatedAt),
		CreateBy:       v.CreateBy,
		UpdateBy:       v.UpdateBy,
		TenantId:       v.TenantId,
	}
}

func CustomerNovelConfigUpdateReply2Data(v *v1.CustomerNovelConfigUpdateReply) *ent.CustomerNovelConfig {
	if v == nil {
		return nil
	}
	return &ent.CustomerNovelConfig{
		ID:             v.Id,
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
	}
}

func CustomerNovelConfigData2UpdateReply(v *ent.CustomerNovelConfig) *v1.CustomerNovelConfigUpdateReply {
	if v == nil {
		return nil
	}
	return &v1.CustomerNovelConfigUpdateReply{
		Id:             v.ID,
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
	}
}

func CustomerNovelConfigCreateReply2Data(v *v1.CustomerNovelConfigCreateReply) *ent.CustomerNovelConfig {
	if v == nil {
		return nil
	}
	return &ent.CustomerNovelConfig{
		ID:             v.Id,
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
		State:          v.State,
		CreatedAt:      v.CreatedAt.AsTime(),
		UpdatedAt:      v.UpdatedAt.AsTime(),
		CreateBy:       v.CreateBy,
		UpdateBy:       v.UpdateBy,
		TenantId:       v.TenantId,
	}
}

func CustomerNovelConfigData2CreateReply(v *ent.CustomerNovelConfig) *v1.CustomerNovelConfigCreateReply {
	if v == nil {
		return nil
	}
	return &v1.CustomerNovelConfigCreateReply{
		Id:             v.ID,
		GroupCode:      v.GroupCode,
		InnerGroupCode: v.InnerGroupCode,
		GroupName:      v.GroupName,
		TypeId:         v.TypeId,
		TypeCode:       v.TypeCode,
		TypeName:       v.TypeName,
		FieldName:      v.FieldName,
		DefaultNum:     v.DefaultNum,
		State:          v.State,
		CreatedAt:      timestamppb.New(v.CreatedAt),
		UpdatedAt:      timestamppb.New(v.UpdatedAt),
		CreateBy:       v.CreateBy,
		UpdateBy:       v.UpdateBy,
		TenantId:       v.TenantId,
	}
}
