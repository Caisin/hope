// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysConfigHTTPServer interface {
	BatchDeleteSysConfig(context.Context, *SysConfigBatchDeleteReq) (*SysConfigDeleteReply, error)
	CreateSysConfig(context.Context, *SysConfigCreateReq) (*SysConfigCreateReply, error)
	DeleteSysConfig(context.Context, *SysConfigDeleteReq) (*SysConfigDeleteReply, error)
	GetPageSysConfig(context.Context, *SysConfigPageReq) (*SysConfigPageReply, error)
	GetSysConfig(context.Context, *SysConfigReq) (*SysConfigReply, error)
	UpdateSysConfig(context.Context, *SysConfigUpdateReq) (*SysConfigUpdateReply, error)
}

func RegisterSysConfigHTTPServer(s *http.Server, srv SysConfigHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sysconfig/page", _SysConfig_GetPageSysConfig0_HTTP_Handler(srv))
	r.GET("/v1/sysconfig/{id}", _SysConfig_GetSysConfig0_HTTP_Handler(srv))
	r.PUT("/v1/sysconfig/{id}", _SysConfig_UpdateSysConfig0_HTTP_Handler(srv))
	r.POST("/v1/sysconfig", _SysConfig_CreateSysConfig0_HTTP_Handler(srv))
	r.DELETE("/v1/sysconfig/{id}", _SysConfig_DeleteSysConfig0_HTTP_Handler(srv))
	r.DELETE("/v1/sysconfig", _SysConfig_BatchDeleteSysConfig0_HTTP_Handler(srv))
}

func _SysConfig_GetPageSysConfig0_HTTP_Handler(srv SysConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfigPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysconfig.v1.SysConfig/GetPageSysConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageSysConfig(ctx, req.(*SysConfigPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysConfigPageReply)
		return ctx.Result(200, reply)
	}
}

func _SysConfig_GetSysConfig0_HTTP_Handler(srv SysConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfigReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysconfig.v1.SysConfig/GetSysConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysConfig(ctx, req.(*SysConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysConfigReply)
		return ctx.Result(200, reply)
	}
}

func _SysConfig_UpdateSysConfig0_HTTP_Handler(srv SysConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfigUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysconfig.v1.SysConfig/UpdateSysConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysConfig(ctx, req.(*SysConfigUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysConfigUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysConfig_CreateSysConfig0_HTTP_Handler(srv SysConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfigCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysconfig.v1.SysConfig/CreateSysConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysConfig(ctx, req.(*SysConfigCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysConfigCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysConfig_DeleteSysConfig0_HTTP_Handler(srv SysConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfigDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysconfig.v1.SysConfig/DeleteSysConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysConfig(ctx, req.(*SysConfigDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysConfigDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysConfig_BatchDeleteSysConfig0_HTTP_Handler(srv SysConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfigBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysconfig.v1.SysConfig/BatchDeleteSysConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysConfig(ctx, req.(*SysConfigBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysConfigDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysConfigHTTPClient interface {
	BatchDeleteSysConfig(ctx context.Context, req *SysConfigBatchDeleteReq, opts ...http.CallOption) (rsp *SysConfigDeleteReply, err error)
	CreateSysConfig(ctx context.Context, req *SysConfigCreateReq, opts ...http.CallOption) (rsp *SysConfigCreateReply, err error)
	DeleteSysConfig(ctx context.Context, req *SysConfigDeleteReq, opts ...http.CallOption) (rsp *SysConfigDeleteReply, err error)
	GetPageSysConfig(ctx context.Context, req *SysConfigPageReq, opts ...http.CallOption) (rsp *SysConfigPageReply, err error)
	GetSysConfig(ctx context.Context, req *SysConfigReq, opts ...http.CallOption) (rsp *SysConfigReply, err error)
	UpdateSysConfig(ctx context.Context, req *SysConfigUpdateReq, opts ...http.CallOption) (rsp *SysConfigUpdateReply, err error)
}

type SysConfigHTTPClientImpl struct {
	cc *http.Client
}

func NewSysConfigHTTPClient(client *http.Client) SysConfigHTTPClient {
	return &SysConfigHTTPClientImpl{client}
}

func (c *SysConfigHTTPClientImpl) BatchDeleteSysConfig(ctx context.Context, in *SysConfigBatchDeleteReq, opts ...http.CallOption) (*SysConfigDeleteReply, error) {
	var out SysConfigDeleteReply
	pattern := "/v1/sysconfig"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysconfig.v1.SysConfig/BatchDeleteSysConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysConfigHTTPClientImpl) CreateSysConfig(ctx context.Context, in *SysConfigCreateReq, opts ...http.CallOption) (*SysConfigCreateReply, error) {
	var out SysConfigCreateReply
	pattern := "/v1/sysconfig"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysconfig.v1.SysConfig/CreateSysConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysConfigHTTPClientImpl) DeleteSysConfig(ctx context.Context, in *SysConfigDeleteReq, opts ...http.CallOption) (*SysConfigDeleteReply, error) {
	var out SysConfigDeleteReply
	pattern := "/v1/sysconfig/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysconfig.v1.SysConfig/DeleteSysConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysConfigHTTPClientImpl) GetPageSysConfig(ctx context.Context, in *SysConfigPageReq, opts ...http.CallOption) (*SysConfigPageReply, error) {
	var out SysConfigPageReply
	pattern := "/v1/sysconfig/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysconfig.v1.SysConfig/GetPageSysConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysConfigHTTPClientImpl) GetSysConfig(ctx context.Context, in *SysConfigReq, opts ...http.CallOption) (*SysConfigReply, error) {
	var out SysConfigReply
	pattern := "/v1/sysconfig/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysconfig.v1.SysConfig/GetSysConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysConfigHTTPClientImpl) UpdateSysConfig(ctx context.Context, in *SysConfigUpdateReq, opts ...http.CallOption) (*SysConfigUpdateReply, error) {
	var out SysConfigUpdateReply
	pattern := "/v1/sysconfig/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysconfig.v1.SysConfig/UpdateSysConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
