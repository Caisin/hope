// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/param/internal/data/ent/predicate"
	"hope/apps/param/internal/data/ent/useranalysisstatistics"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserAnalysisStatisticsUpdate is the builder for updating UserAnalysisStatistics entities.
type UserAnalysisStatisticsUpdate struct {
	config
	hooks    []Hook
	mutation *UserAnalysisStatisticsMutation
}

// Where appends a list predicates to the UserAnalysisStatisticsUpdate builder.
func (uasu *UserAnalysisStatisticsUpdate) Where(ps ...predicate.UserAnalysisStatistics) *UserAnalysisStatisticsUpdate {
	uasu.mutation.Where(ps...)
	return uasu
}

// SetStatisticsDate sets the "statisticsDate" field.
func (uasu *UserAnalysisStatisticsUpdate) SetStatisticsDate(s string) *UserAnalysisStatisticsUpdate {
	uasu.mutation.SetStatisticsDate(s)
	return uasu
}

// SetAllUserNum sets the "allUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) SetAllUserNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetAllUserNum()
	uasu.mutation.SetAllUserNum(i)
	return uasu
}

// SetNillableAllUserNum sets the "allUserNum" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableAllUserNum(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetAllUserNum(*i)
	}
	return uasu
}

// AddAllUserNum adds i to the "allUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) AddAllUserNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddAllUserNum(i)
	return uasu
}

// ClearAllUserNum clears the value of the "allUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearAllUserNum() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearAllUserNum()
	return uasu
}

// SetAllPayment sets the "allPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) SetAllPayment(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetAllPayment()
	uasu.mutation.SetAllPayment(i)
	return uasu
}

// SetNillableAllPayment sets the "allPayment" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableAllPayment(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetAllPayment(*i)
	}
	return uasu
}

// AddAllPayment adds i to the "allPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) AddAllPayment(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddAllPayment(i)
	return uasu
}

// ClearAllPayment clears the value of the "allPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearAllPayment() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearAllPayment()
	return uasu
}

// SetAllPayUser sets the "allPayUser" field.
func (uasu *UserAnalysisStatisticsUpdate) SetAllPayUser(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetAllPayUser()
	uasu.mutation.SetAllPayUser(i)
	return uasu
}

// SetNillableAllPayUser sets the "allPayUser" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableAllPayUser(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetAllPayUser(*i)
	}
	return uasu
}

// AddAllPayUser adds i to the "allPayUser" field.
func (uasu *UserAnalysisStatisticsUpdate) AddAllPayUser(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddAllPayUser(i)
	return uasu
}

// ClearAllPayUser clears the value of the "allPayUser" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearAllPayUser() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearAllPayUser()
	return uasu
}

// SetAllOrderNum sets the "allOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) SetAllOrderNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetAllOrderNum()
	uasu.mutation.SetAllOrderNum(i)
	return uasu
}

// SetNillableAllOrderNum sets the "allOrderNum" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableAllOrderNum(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetAllOrderNum(*i)
	}
	return uasu
}

// AddAllOrderNum adds i to the "allOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) AddAllOrderNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddAllOrderNum(i)
	return uasu
}

// ClearAllOrderNum clears the value of the "allOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearAllOrderNum() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearAllOrderNum()
	return uasu
}

// SetDayUserNum sets the "dayUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayUserNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayUserNum()
	uasu.mutation.SetDayUserNum(i)
	return uasu
}

// SetNillableDayUserNum sets the "dayUserNum" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayUserNum(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayUserNum(*i)
	}
	return uasu
}

// AddDayUserNum adds i to the "dayUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayUserNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayUserNum(i)
	return uasu
}

// ClearDayUserNum clears the value of the "dayUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayUserNum() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayUserNum()
	return uasu
}

// SetDayPayment sets the "dayPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayPayment(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayPayment()
	uasu.mutation.SetDayPayment(i)
	return uasu
}

// SetNillableDayPayment sets the "dayPayment" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayPayment(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayPayment(*i)
	}
	return uasu
}

// AddDayPayment adds i to the "dayPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayPayment(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayPayment(i)
	return uasu
}

// ClearDayPayment clears the value of the "dayPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayPayment() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayPayment()
	return uasu
}

// SetDayOrderNum sets the "dayOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayOrderNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayOrderNum()
	uasu.mutation.SetDayOrderNum(i)
	return uasu
}

// SetNillableDayOrderNum sets the "dayOrderNum" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayOrderNum(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayOrderNum(*i)
	}
	return uasu
}

// AddDayOrderNum adds i to the "dayOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayOrderNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayOrderNum(i)
	return uasu
}

// ClearDayOrderNum clears the value of the "dayOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayOrderNum() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayOrderNum()
	return uasu
}

// SetDayPayUser sets the "dayPayUser" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayPayUser(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayPayUser()
	uasu.mutation.SetDayPayUser(i)
	return uasu
}

// SetNillableDayPayUser sets the "dayPayUser" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayPayUser(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayPayUser(*i)
	}
	return uasu
}

// AddDayPayUser adds i to the "dayPayUser" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayPayUser(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayPayUser(i)
	return uasu
}

// ClearDayPayUser clears the value of the "dayPayUser" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayPayUser() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayPayUser()
	return uasu
}

// SetDayRegPayment sets the "dayRegPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayRegPayment(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayRegPayment()
	uasu.mutation.SetDayRegPayment(i)
	return uasu
}

// SetNillableDayRegPayment sets the "dayRegPayment" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayRegPayment(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayRegPayment(*i)
	}
	return uasu
}

// AddDayRegPayment adds i to the "dayRegPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayRegPayment(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayRegPayment(i)
	return uasu
}

// ClearDayRegPayment clears the value of the "dayRegPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayRegPayment() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayRegPayment()
	return uasu
}

// SetDayRegUserNum sets the "dayRegUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayRegUserNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayRegUserNum()
	uasu.mutation.SetDayRegUserNum(i)
	return uasu
}

// SetNillableDayRegUserNum sets the "dayRegUserNum" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayRegUserNum(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayRegUserNum(*i)
	}
	return uasu
}

// AddDayRegUserNum adds i to the "dayRegUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayRegUserNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayRegUserNum(i)
	return uasu
}

// ClearDayRegUserNum clears the value of the "dayRegUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayRegUserNum() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayRegUserNum()
	return uasu
}

// SetDayRegOrderNum sets the "dayRegOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayRegOrderNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayRegOrderNum()
	uasu.mutation.SetDayRegOrderNum(i)
	return uasu
}

// SetNillableDayRegOrderNum sets the "dayRegOrderNum" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayRegOrderNum(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayRegOrderNum(*i)
	}
	return uasu
}

// AddDayRegOrderNum adds i to the "dayRegOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayRegOrderNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayRegOrderNum(i)
	return uasu
}

// ClearDayRegOrderNum clears the value of the "dayRegOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayRegOrderNum() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayRegOrderNum()
	return uasu
}

// SetOldRegPayment sets the "oldRegPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) SetOldRegPayment(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetOldRegPayment()
	uasu.mutation.SetOldRegPayment(i)
	return uasu
}

// SetNillableOldRegPayment sets the "oldRegPayment" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableOldRegPayment(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetOldRegPayment(*i)
	}
	return uasu
}

// AddOldRegPayment adds i to the "oldRegPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) AddOldRegPayment(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddOldRegPayment(i)
	return uasu
}

// ClearOldRegPayment clears the value of the "oldRegPayment" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearOldRegPayment() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearOldRegPayment()
	return uasu
}

// SetOldRegUserNum sets the "oldRegUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) SetOldRegUserNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetOldRegUserNum()
	uasu.mutation.SetOldRegUserNum(i)
	return uasu
}

// SetNillableOldRegUserNum sets the "oldRegUserNum" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableOldRegUserNum(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetOldRegUserNum(*i)
	}
	return uasu
}

// AddOldRegUserNum adds i to the "oldRegUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) AddOldRegUserNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddOldRegUserNum(i)
	return uasu
}

// ClearOldRegUserNum clears the value of the "oldRegUserNum" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearOldRegUserNum() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearOldRegUserNum()
	return uasu
}

// SetOldRegOrderNum sets the "oldRegOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) SetOldRegOrderNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetOldRegOrderNum()
	uasu.mutation.SetOldRegOrderNum(i)
	return uasu
}

// SetNillableOldRegOrderNum sets the "oldRegOrderNum" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableOldRegOrderNum(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetOldRegOrderNum(*i)
	}
	return uasu
}

// AddOldRegOrderNum adds i to the "oldRegOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) AddOldRegOrderNum(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddOldRegOrderNum(i)
	return uasu
}

// ClearOldRegOrderNum clears the value of the "oldRegOrderNum" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearOldRegOrderNum() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearOldRegOrderNum()
	return uasu
}

// SetPayRate sets the "payRate" field.
func (uasu *UserAnalysisStatisticsUpdate) SetPayRate(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetPayRate()
	uasu.mutation.SetPayRate(i)
	return uasu
}

// SetNillablePayRate sets the "payRate" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillablePayRate(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetPayRate(*i)
	}
	return uasu
}

// AddPayRate adds i to the "payRate" field.
func (uasu *UserAnalysisStatisticsUpdate) AddPayRate(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddPayRate(i)
	return uasu
}

// ClearPayRate clears the value of the "payRate" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearPayRate() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearPayRate()
	return uasu
}

// SetArpu sets the "arpu" field.
func (uasu *UserAnalysisStatisticsUpdate) SetArpu(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetArpu()
	uasu.mutation.SetArpu(i)
	return uasu
}

// SetNillableArpu sets the "arpu" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableArpu(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetArpu(*i)
	}
	return uasu
}

// AddArpu adds i to the "arpu" field.
func (uasu *UserAnalysisStatisticsUpdate) AddArpu(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddArpu(i)
	return uasu
}

// ClearArpu clears the value of the "arpu" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearArpu() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearArpu()
	return uasu
}

// SetDayRegArpu sets the "dayRegArpu" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayRegArpu(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayRegArpu()
	uasu.mutation.SetDayRegArpu(i)
	return uasu
}

// SetNillableDayRegArpu sets the "dayRegArpu" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayRegArpu(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayRegArpu(*i)
	}
	return uasu
}

// AddDayRegArpu adds i to the "dayRegArpu" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayRegArpu(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayRegArpu(i)
	return uasu
}

// ClearDayRegArpu clears the value of the "dayRegArpu" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayRegArpu() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayRegArpu()
	return uasu
}

// SetDayArpu sets the "dayArpu" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayArpu(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayArpu()
	uasu.mutation.SetDayArpu(i)
	return uasu
}

// SetNillableDayArpu sets the "dayArpu" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayArpu(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayArpu(*i)
	}
	return uasu
}

// AddDayArpu adds i to the "dayArpu" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayArpu(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayArpu(i)
	return uasu
}

// ClearDayArpu clears the value of the "dayArpu" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayArpu() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayArpu()
	return uasu
}

// SetDayOldArpu sets the "dayOldArpu" field.
func (uasu *UserAnalysisStatisticsUpdate) SetDayOldArpu(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetDayOldArpu()
	uasu.mutation.SetDayOldArpu(i)
	return uasu
}

// SetNillableDayOldArpu sets the "dayOldArpu" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableDayOldArpu(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetDayOldArpu(*i)
	}
	return uasu
}

// AddDayOldArpu adds i to the "dayOldArpu" field.
func (uasu *UserAnalysisStatisticsUpdate) AddDayOldArpu(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddDayOldArpu(i)
	return uasu
}

// ClearDayOldArpu clears the value of the "dayOldArpu" field.
func (uasu *UserAnalysisStatisticsUpdate) ClearDayOldArpu() *UserAnalysisStatisticsUpdate {
	uasu.mutation.ClearDayOldArpu()
	return uasu
}

// SetUpdatedAt sets the "updatedAt" field.
func (uasu *UserAnalysisStatisticsUpdate) SetUpdatedAt(t time.Time) *UserAnalysisStatisticsUpdate {
	uasu.mutation.SetUpdatedAt(t)
	return uasu
}

// SetCreateBy sets the "createBy" field.
func (uasu *UserAnalysisStatisticsUpdate) SetCreateBy(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetCreateBy()
	uasu.mutation.SetCreateBy(i)
	return uasu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableCreateBy(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetCreateBy(*i)
	}
	return uasu
}

// AddCreateBy adds i to the "createBy" field.
func (uasu *UserAnalysisStatisticsUpdate) AddCreateBy(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddCreateBy(i)
	return uasu
}

// SetUpdateBy sets the "updateBy" field.
func (uasu *UserAnalysisStatisticsUpdate) SetUpdateBy(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetUpdateBy()
	uasu.mutation.SetUpdateBy(i)
	return uasu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableUpdateBy(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetUpdateBy(*i)
	}
	return uasu
}

// AddUpdateBy adds i to the "updateBy" field.
func (uasu *UserAnalysisStatisticsUpdate) AddUpdateBy(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddUpdateBy(i)
	return uasu
}

// SetTenantId sets the "tenantId" field.
func (uasu *UserAnalysisStatisticsUpdate) SetTenantId(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.ResetTenantId()
	uasu.mutation.SetTenantId(i)
	return uasu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (uasu *UserAnalysisStatisticsUpdate) SetNillableTenantId(i *int64) *UserAnalysisStatisticsUpdate {
	if i != nil {
		uasu.SetTenantId(*i)
	}
	return uasu
}

// AddTenantId adds i to the "tenantId" field.
func (uasu *UserAnalysisStatisticsUpdate) AddTenantId(i int64) *UserAnalysisStatisticsUpdate {
	uasu.mutation.AddTenantId(i)
	return uasu
}

// Mutation returns the UserAnalysisStatisticsMutation object of the builder.
func (uasu *UserAnalysisStatisticsUpdate) Mutation() *UserAnalysisStatisticsMutation {
	return uasu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uasu *UserAnalysisStatisticsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uasu.defaults()
	if len(uasu.hooks) == 0 {
		affected, err = uasu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAnalysisStatisticsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uasu.mutation = mutation
			affected, err = uasu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uasu.hooks) - 1; i >= 0; i-- {
			if uasu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uasu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uasu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uasu *UserAnalysisStatisticsUpdate) SaveX(ctx context.Context) int {
	affected, err := uasu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uasu *UserAnalysisStatisticsUpdate) Exec(ctx context.Context) error {
	_, err := uasu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uasu *UserAnalysisStatisticsUpdate) ExecX(ctx context.Context) {
	if err := uasu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uasu *UserAnalysisStatisticsUpdate) defaults() {
	if _, ok := uasu.mutation.UpdatedAt(); !ok {
		v := useranalysisstatistics.UpdateDefaultUpdatedAt()
		uasu.mutation.SetUpdatedAt(v)
	}
}

func (uasu *UserAnalysisStatisticsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useranalysisstatistics.Table,
			Columns: useranalysisstatistics.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: useranalysisstatistics.FieldID,
			},
		},
	}
	if ps := uasu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uasu.mutation.StatisticsDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useranalysisstatistics.FieldStatisticsDate,
		})
	}
	if value, ok := uasu.mutation.AllUserNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllUserNum,
		})
	}
	if value, ok := uasu.mutation.AddedAllUserNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllUserNum,
		})
	}
	if uasu.mutation.AllUserNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldAllUserNum,
		})
	}
	if value, ok := uasu.mutation.AllPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllPayment,
		})
	}
	if value, ok := uasu.mutation.AddedAllPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllPayment,
		})
	}
	if uasu.mutation.AllPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldAllPayment,
		})
	}
	if value, ok := uasu.mutation.AllPayUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllPayUser,
		})
	}
	if value, ok := uasu.mutation.AddedAllPayUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllPayUser,
		})
	}
	if uasu.mutation.AllPayUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldAllPayUser,
		})
	}
	if value, ok := uasu.mutation.AllOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllOrderNum,
		})
	}
	if value, ok := uasu.mutation.AddedAllOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllOrderNum,
		})
	}
	if uasu.mutation.AllOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldAllOrderNum,
		})
	}
	if value, ok := uasu.mutation.DayUserNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayUserNum,
		})
	}
	if value, ok := uasu.mutation.AddedDayUserNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayUserNum,
		})
	}
	if uasu.mutation.DayUserNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayUserNum,
		})
	}
	if value, ok := uasu.mutation.DayPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayPayment,
		})
	}
	if value, ok := uasu.mutation.AddedDayPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayPayment,
		})
	}
	if uasu.mutation.DayPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayPayment,
		})
	}
	if value, ok := uasu.mutation.DayOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayOrderNum,
		})
	}
	if value, ok := uasu.mutation.AddedDayOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayOrderNum,
		})
	}
	if uasu.mutation.DayOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayOrderNum,
		})
	}
	if value, ok := uasu.mutation.DayPayUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayPayUser,
		})
	}
	if value, ok := uasu.mutation.AddedDayPayUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayPayUser,
		})
	}
	if uasu.mutation.DayPayUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayPayUser,
		})
	}
	if value, ok := uasu.mutation.DayRegPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegPayment,
		})
	}
	if value, ok := uasu.mutation.AddedDayRegPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegPayment,
		})
	}
	if uasu.mutation.DayRegPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayRegPayment,
		})
	}
	if value, ok := uasu.mutation.DayRegUserNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegUserNum,
		})
	}
	if value, ok := uasu.mutation.AddedDayRegUserNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegUserNum,
		})
	}
	if uasu.mutation.DayRegUserNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayRegUserNum,
		})
	}
	if value, ok := uasu.mutation.DayRegOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegOrderNum,
		})
	}
	if value, ok := uasu.mutation.AddedDayRegOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegOrderNum,
		})
	}
	if uasu.mutation.DayRegOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayRegOrderNum,
		})
	}
	if value, ok := uasu.mutation.OldRegPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegPayment,
		})
	}
	if value, ok := uasu.mutation.AddedOldRegPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegPayment,
		})
	}
	if uasu.mutation.OldRegPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldOldRegPayment,
		})
	}
	if value, ok := uasu.mutation.OldRegUserNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegUserNum,
		})
	}
	if value, ok := uasu.mutation.AddedOldRegUserNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegUserNum,
		})
	}
	if uasu.mutation.OldRegUserNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldOldRegUserNum,
		})
	}
	if value, ok := uasu.mutation.OldRegOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegOrderNum,
		})
	}
	if value, ok := uasu.mutation.AddedOldRegOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegOrderNum,
		})
	}
	if uasu.mutation.OldRegOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldOldRegOrderNum,
		})
	}
	if value, ok := uasu.mutation.PayRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldPayRate,
		})
	}
	if value, ok := uasu.mutation.AddedPayRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldPayRate,
		})
	}
	if uasu.mutation.PayRateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldPayRate,
		})
	}
	if value, ok := uasu.mutation.Arpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldArpu,
		})
	}
	if value, ok := uasu.mutation.AddedArpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldArpu,
		})
	}
	if uasu.mutation.ArpuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldArpu,
		})
	}
	if value, ok := uasu.mutation.DayRegArpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegArpu,
		})
	}
	if value, ok := uasu.mutation.AddedDayRegArpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegArpu,
		})
	}
	if uasu.mutation.DayRegArpuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayRegArpu,
		})
	}
	if value, ok := uasu.mutation.DayArpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayArpu,
		})
	}
	if value, ok := uasu.mutation.AddedDayArpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayArpu,
		})
	}
	if uasu.mutation.DayArpuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayArpu,
		})
	}
	if value, ok := uasu.mutation.DayOldArpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayOldArpu,
		})
	}
	if value, ok := uasu.mutation.AddedDayOldArpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayOldArpu,
		})
	}
	if uasu.mutation.DayOldArpuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayOldArpu,
		})
	}
	if value, ok := uasu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useranalysisstatistics.FieldUpdatedAt,
		})
	}
	if value, ok := uasu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldCreateBy,
		})
	}
	if value, ok := uasu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldCreateBy,
		})
	}
	if value, ok := uasu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldUpdateBy,
		})
	}
	if value, ok := uasu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldUpdateBy,
		})
	}
	if value, ok := uasu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldTenantId,
		})
	}
	if value, ok := uasu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uasu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useranalysisstatistics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserAnalysisStatisticsUpdateOne is the builder for updating a single UserAnalysisStatistics entity.
type UserAnalysisStatisticsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAnalysisStatisticsMutation
}

// SetStatisticsDate sets the "statisticsDate" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetStatisticsDate(s string) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.SetStatisticsDate(s)
	return uasuo
}

// SetAllUserNum sets the "allUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetAllUserNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetAllUserNum()
	uasuo.mutation.SetAllUserNum(i)
	return uasuo
}

// SetNillableAllUserNum sets the "allUserNum" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableAllUserNum(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetAllUserNum(*i)
	}
	return uasuo
}

// AddAllUserNum adds i to the "allUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddAllUserNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddAllUserNum(i)
	return uasuo
}

// ClearAllUserNum clears the value of the "allUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearAllUserNum() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearAllUserNum()
	return uasuo
}

// SetAllPayment sets the "allPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetAllPayment(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetAllPayment()
	uasuo.mutation.SetAllPayment(i)
	return uasuo
}

// SetNillableAllPayment sets the "allPayment" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableAllPayment(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetAllPayment(*i)
	}
	return uasuo
}

// AddAllPayment adds i to the "allPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddAllPayment(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddAllPayment(i)
	return uasuo
}

// ClearAllPayment clears the value of the "allPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearAllPayment() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearAllPayment()
	return uasuo
}

// SetAllPayUser sets the "allPayUser" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetAllPayUser(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetAllPayUser()
	uasuo.mutation.SetAllPayUser(i)
	return uasuo
}

// SetNillableAllPayUser sets the "allPayUser" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableAllPayUser(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetAllPayUser(*i)
	}
	return uasuo
}

// AddAllPayUser adds i to the "allPayUser" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddAllPayUser(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddAllPayUser(i)
	return uasuo
}

// ClearAllPayUser clears the value of the "allPayUser" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearAllPayUser() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearAllPayUser()
	return uasuo
}

// SetAllOrderNum sets the "allOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetAllOrderNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetAllOrderNum()
	uasuo.mutation.SetAllOrderNum(i)
	return uasuo
}

// SetNillableAllOrderNum sets the "allOrderNum" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableAllOrderNum(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetAllOrderNum(*i)
	}
	return uasuo
}

// AddAllOrderNum adds i to the "allOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddAllOrderNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddAllOrderNum(i)
	return uasuo
}

// ClearAllOrderNum clears the value of the "allOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearAllOrderNum() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearAllOrderNum()
	return uasuo
}

// SetDayUserNum sets the "dayUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayUserNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayUserNum()
	uasuo.mutation.SetDayUserNum(i)
	return uasuo
}

// SetNillableDayUserNum sets the "dayUserNum" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayUserNum(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayUserNum(*i)
	}
	return uasuo
}

// AddDayUserNum adds i to the "dayUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayUserNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayUserNum(i)
	return uasuo
}

// ClearDayUserNum clears the value of the "dayUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayUserNum() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayUserNum()
	return uasuo
}

// SetDayPayment sets the "dayPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayPayment(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayPayment()
	uasuo.mutation.SetDayPayment(i)
	return uasuo
}

// SetNillableDayPayment sets the "dayPayment" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayPayment(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayPayment(*i)
	}
	return uasuo
}

// AddDayPayment adds i to the "dayPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayPayment(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayPayment(i)
	return uasuo
}

// ClearDayPayment clears the value of the "dayPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayPayment() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayPayment()
	return uasuo
}

// SetDayOrderNum sets the "dayOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayOrderNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayOrderNum()
	uasuo.mutation.SetDayOrderNum(i)
	return uasuo
}

// SetNillableDayOrderNum sets the "dayOrderNum" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayOrderNum(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayOrderNum(*i)
	}
	return uasuo
}

// AddDayOrderNum adds i to the "dayOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayOrderNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayOrderNum(i)
	return uasuo
}

// ClearDayOrderNum clears the value of the "dayOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayOrderNum() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayOrderNum()
	return uasuo
}

// SetDayPayUser sets the "dayPayUser" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayPayUser(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayPayUser()
	uasuo.mutation.SetDayPayUser(i)
	return uasuo
}

// SetNillableDayPayUser sets the "dayPayUser" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayPayUser(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayPayUser(*i)
	}
	return uasuo
}

// AddDayPayUser adds i to the "dayPayUser" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayPayUser(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayPayUser(i)
	return uasuo
}

// ClearDayPayUser clears the value of the "dayPayUser" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayPayUser() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayPayUser()
	return uasuo
}

// SetDayRegPayment sets the "dayRegPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayRegPayment(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayRegPayment()
	uasuo.mutation.SetDayRegPayment(i)
	return uasuo
}

// SetNillableDayRegPayment sets the "dayRegPayment" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayRegPayment(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayRegPayment(*i)
	}
	return uasuo
}

// AddDayRegPayment adds i to the "dayRegPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayRegPayment(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayRegPayment(i)
	return uasuo
}

// ClearDayRegPayment clears the value of the "dayRegPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayRegPayment() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayRegPayment()
	return uasuo
}

// SetDayRegUserNum sets the "dayRegUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayRegUserNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayRegUserNum()
	uasuo.mutation.SetDayRegUserNum(i)
	return uasuo
}

// SetNillableDayRegUserNum sets the "dayRegUserNum" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayRegUserNum(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayRegUserNum(*i)
	}
	return uasuo
}

// AddDayRegUserNum adds i to the "dayRegUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayRegUserNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayRegUserNum(i)
	return uasuo
}

// ClearDayRegUserNum clears the value of the "dayRegUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayRegUserNum() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayRegUserNum()
	return uasuo
}

// SetDayRegOrderNum sets the "dayRegOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayRegOrderNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayRegOrderNum()
	uasuo.mutation.SetDayRegOrderNum(i)
	return uasuo
}

// SetNillableDayRegOrderNum sets the "dayRegOrderNum" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayRegOrderNum(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayRegOrderNum(*i)
	}
	return uasuo
}

// AddDayRegOrderNum adds i to the "dayRegOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayRegOrderNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayRegOrderNum(i)
	return uasuo
}

// ClearDayRegOrderNum clears the value of the "dayRegOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayRegOrderNum() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayRegOrderNum()
	return uasuo
}

// SetOldRegPayment sets the "oldRegPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetOldRegPayment(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetOldRegPayment()
	uasuo.mutation.SetOldRegPayment(i)
	return uasuo
}

// SetNillableOldRegPayment sets the "oldRegPayment" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableOldRegPayment(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetOldRegPayment(*i)
	}
	return uasuo
}

// AddOldRegPayment adds i to the "oldRegPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddOldRegPayment(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddOldRegPayment(i)
	return uasuo
}

// ClearOldRegPayment clears the value of the "oldRegPayment" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearOldRegPayment() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearOldRegPayment()
	return uasuo
}

// SetOldRegUserNum sets the "oldRegUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetOldRegUserNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetOldRegUserNum()
	uasuo.mutation.SetOldRegUserNum(i)
	return uasuo
}

// SetNillableOldRegUserNum sets the "oldRegUserNum" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableOldRegUserNum(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetOldRegUserNum(*i)
	}
	return uasuo
}

// AddOldRegUserNum adds i to the "oldRegUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddOldRegUserNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddOldRegUserNum(i)
	return uasuo
}

// ClearOldRegUserNum clears the value of the "oldRegUserNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearOldRegUserNum() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearOldRegUserNum()
	return uasuo
}

// SetOldRegOrderNum sets the "oldRegOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetOldRegOrderNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetOldRegOrderNum()
	uasuo.mutation.SetOldRegOrderNum(i)
	return uasuo
}

// SetNillableOldRegOrderNum sets the "oldRegOrderNum" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableOldRegOrderNum(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetOldRegOrderNum(*i)
	}
	return uasuo
}

// AddOldRegOrderNum adds i to the "oldRegOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddOldRegOrderNum(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddOldRegOrderNum(i)
	return uasuo
}

// ClearOldRegOrderNum clears the value of the "oldRegOrderNum" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearOldRegOrderNum() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearOldRegOrderNum()
	return uasuo
}

// SetPayRate sets the "payRate" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetPayRate(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetPayRate()
	uasuo.mutation.SetPayRate(i)
	return uasuo
}

// SetNillablePayRate sets the "payRate" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillablePayRate(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetPayRate(*i)
	}
	return uasuo
}

// AddPayRate adds i to the "payRate" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddPayRate(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddPayRate(i)
	return uasuo
}

// ClearPayRate clears the value of the "payRate" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearPayRate() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearPayRate()
	return uasuo
}

// SetArpu sets the "arpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetArpu(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetArpu()
	uasuo.mutation.SetArpu(i)
	return uasuo
}

// SetNillableArpu sets the "arpu" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableArpu(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetArpu(*i)
	}
	return uasuo
}

// AddArpu adds i to the "arpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddArpu(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddArpu(i)
	return uasuo
}

// ClearArpu clears the value of the "arpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearArpu() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearArpu()
	return uasuo
}

// SetDayRegArpu sets the "dayRegArpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayRegArpu(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayRegArpu()
	uasuo.mutation.SetDayRegArpu(i)
	return uasuo
}

// SetNillableDayRegArpu sets the "dayRegArpu" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayRegArpu(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayRegArpu(*i)
	}
	return uasuo
}

// AddDayRegArpu adds i to the "dayRegArpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayRegArpu(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayRegArpu(i)
	return uasuo
}

// ClearDayRegArpu clears the value of the "dayRegArpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayRegArpu() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayRegArpu()
	return uasuo
}

// SetDayArpu sets the "dayArpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayArpu(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayArpu()
	uasuo.mutation.SetDayArpu(i)
	return uasuo
}

// SetNillableDayArpu sets the "dayArpu" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayArpu(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayArpu(*i)
	}
	return uasuo
}

// AddDayArpu adds i to the "dayArpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayArpu(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayArpu(i)
	return uasuo
}

// ClearDayArpu clears the value of the "dayArpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayArpu() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayArpu()
	return uasuo
}

// SetDayOldArpu sets the "dayOldArpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetDayOldArpu(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetDayOldArpu()
	uasuo.mutation.SetDayOldArpu(i)
	return uasuo
}

// SetNillableDayOldArpu sets the "dayOldArpu" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableDayOldArpu(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetDayOldArpu(*i)
	}
	return uasuo
}

// AddDayOldArpu adds i to the "dayOldArpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddDayOldArpu(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddDayOldArpu(i)
	return uasuo
}

// ClearDayOldArpu clears the value of the "dayOldArpu" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) ClearDayOldArpu() *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ClearDayOldArpu()
	return uasuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetUpdatedAt(t time.Time) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.SetUpdatedAt(t)
	return uasuo
}

// SetCreateBy sets the "createBy" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetCreateBy(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetCreateBy()
	uasuo.mutation.SetCreateBy(i)
	return uasuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableCreateBy(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetCreateBy(*i)
	}
	return uasuo
}

// AddCreateBy adds i to the "createBy" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddCreateBy(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddCreateBy(i)
	return uasuo
}

// SetUpdateBy sets the "updateBy" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetUpdateBy(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetUpdateBy()
	uasuo.mutation.SetUpdateBy(i)
	return uasuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableUpdateBy(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetUpdateBy(*i)
	}
	return uasuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddUpdateBy(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddUpdateBy(i)
	return uasuo
}

// SetTenantId sets the "tenantId" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetTenantId(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.ResetTenantId()
	uasuo.mutation.SetTenantId(i)
	return uasuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (uasuo *UserAnalysisStatisticsUpdateOne) SetNillableTenantId(i *int64) *UserAnalysisStatisticsUpdateOne {
	if i != nil {
		uasuo.SetTenantId(*i)
	}
	return uasuo
}

// AddTenantId adds i to the "tenantId" field.
func (uasuo *UserAnalysisStatisticsUpdateOne) AddTenantId(i int64) *UserAnalysisStatisticsUpdateOne {
	uasuo.mutation.AddTenantId(i)
	return uasuo
}

// Mutation returns the UserAnalysisStatisticsMutation object of the builder.
func (uasuo *UserAnalysisStatisticsUpdateOne) Mutation() *UserAnalysisStatisticsMutation {
	return uasuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uasuo *UserAnalysisStatisticsUpdateOne) Select(field string, fields ...string) *UserAnalysisStatisticsUpdateOne {
	uasuo.fields = append([]string{field}, fields...)
	return uasuo
}

// Save executes the query and returns the updated UserAnalysisStatistics entity.
func (uasuo *UserAnalysisStatisticsUpdateOne) Save(ctx context.Context) (*UserAnalysisStatistics, error) {
	var (
		err  error
		node *UserAnalysisStatistics
	)
	uasuo.defaults()
	if len(uasuo.hooks) == 0 {
		node, err = uasuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserAnalysisStatisticsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uasuo.mutation = mutation
			node, err = uasuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uasuo.hooks) - 1; i >= 0; i-- {
			if uasuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uasuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uasuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uasuo *UserAnalysisStatisticsUpdateOne) SaveX(ctx context.Context) *UserAnalysisStatistics {
	node, err := uasuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uasuo *UserAnalysisStatisticsUpdateOne) Exec(ctx context.Context) error {
	_, err := uasuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uasuo *UserAnalysisStatisticsUpdateOne) ExecX(ctx context.Context) {
	if err := uasuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uasuo *UserAnalysisStatisticsUpdateOne) defaults() {
	if _, ok := uasuo.mutation.UpdatedAt(); !ok {
		v := useranalysisstatistics.UpdateDefaultUpdatedAt()
		uasuo.mutation.SetUpdatedAt(v)
	}
}

func (uasuo *UserAnalysisStatisticsUpdateOne) sqlSave(ctx context.Context) (_node *UserAnalysisStatistics, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   useranalysisstatistics.Table,
			Columns: useranalysisstatistics.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: useranalysisstatistics.FieldID,
			},
		},
	}
	id, ok := uasuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserAnalysisStatistics.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uasuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useranalysisstatistics.FieldID)
		for _, f := range fields {
			if !useranalysisstatistics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useranalysisstatistics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uasuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uasuo.mutation.StatisticsDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: useranalysisstatistics.FieldStatisticsDate,
		})
	}
	if value, ok := uasuo.mutation.AllUserNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllUserNum,
		})
	}
	if value, ok := uasuo.mutation.AddedAllUserNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllUserNum,
		})
	}
	if uasuo.mutation.AllUserNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldAllUserNum,
		})
	}
	if value, ok := uasuo.mutation.AllPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllPayment,
		})
	}
	if value, ok := uasuo.mutation.AddedAllPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllPayment,
		})
	}
	if uasuo.mutation.AllPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldAllPayment,
		})
	}
	if value, ok := uasuo.mutation.AllPayUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllPayUser,
		})
	}
	if value, ok := uasuo.mutation.AddedAllPayUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllPayUser,
		})
	}
	if uasuo.mutation.AllPayUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldAllPayUser,
		})
	}
	if value, ok := uasuo.mutation.AllOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllOrderNum,
		})
	}
	if value, ok := uasuo.mutation.AddedAllOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldAllOrderNum,
		})
	}
	if uasuo.mutation.AllOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldAllOrderNum,
		})
	}
	if value, ok := uasuo.mutation.DayUserNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayUserNum,
		})
	}
	if value, ok := uasuo.mutation.AddedDayUserNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayUserNum,
		})
	}
	if uasuo.mutation.DayUserNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayUserNum,
		})
	}
	if value, ok := uasuo.mutation.DayPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayPayment,
		})
	}
	if value, ok := uasuo.mutation.AddedDayPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayPayment,
		})
	}
	if uasuo.mutation.DayPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayPayment,
		})
	}
	if value, ok := uasuo.mutation.DayOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayOrderNum,
		})
	}
	if value, ok := uasuo.mutation.AddedDayOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayOrderNum,
		})
	}
	if uasuo.mutation.DayOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayOrderNum,
		})
	}
	if value, ok := uasuo.mutation.DayPayUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayPayUser,
		})
	}
	if value, ok := uasuo.mutation.AddedDayPayUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayPayUser,
		})
	}
	if uasuo.mutation.DayPayUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayPayUser,
		})
	}
	if value, ok := uasuo.mutation.DayRegPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegPayment,
		})
	}
	if value, ok := uasuo.mutation.AddedDayRegPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegPayment,
		})
	}
	if uasuo.mutation.DayRegPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayRegPayment,
		})
	}
	if value, ok := uasuo.mutation.DayRegUserNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegUserNum,
		})
	}
	if value, ok := uasuo.mutation.AddedDayRegUserNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegUserNum,
		})
	}
	if uasuo.mutation.DayRegUserNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayRegUserNum,
		})
	}
	if value, ok := uasuo.mutation.DayRegOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegOrderNum,
		})
	}
	if value, ok := uasuo.mutation.AddedDayRegOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegOrderNum,
		})
	}
	if uasuo.mutation.DayRegOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayRegOrderNum,
		})
	}
	if value, ok := uasuo.mutation.OldRegPayment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegPayment,
		})
	}
	if value, ok := uasuo.mutation.AddedOldRegPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegPayment,
		})
	}
	if uasuo.mutation.OldRegPaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldOldRegPayment,
		})
	}
	if value, ok := uasuo.mutation.OldRegUserNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegUserNum,
		})
	}
	if value, ok := uasuo.mutation.AddedOldRegUserNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegUserNum,
		})
	}
	if uasuo.mutation.OldRegUserNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldOldRegUserNum,
		})
	}
	if value, ok := uasuo.mutation.OldRegOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegOrderNum,
		})
	}
	if value, ok := uasuo.mutation.AddedOldRegOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldOldRegOrderNum,
		})
	}
	if uasuo.mutation.OldRegOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldOldRegOrderNum,
		})
	}
	if value, ok := uasuo.mutation.PayRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldPayRate,
		})
	}
	if value, ok := uasuo.mutation.AddedPayRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldPayRate,
		})
	}
	if uasuo.mutation.PayRateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldPayRate,
		})
	}
	if value, ok := uasuo.mutation.Arpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldArpu,
		})
	}
	if value, ok := uasuo.mutation.AddedArpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldArpu,
		})
	}
	if uasuo.mutation.ArpuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldArpu,
		})
	}
	if value, ok := uasuo.mutation.DayRegArpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegArpu,
		})
	}
	if value, ok := uasuo.mutation.AddedDayRegArpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayRegArpu,
		})
	}
	if uasuo.mutation.DayRegArpuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayRegArpu,
		})
	}
	if value, ok := uasuo.mutation.DayArpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayArpu,
		})
	}
	if value, ok := uasuo.mutation.AddedDayArpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayArpu,
		})
	}
	if uasuo.mutation.DayArpuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayArpu,
		})
	}
	if value, ok := uasuo.mutation.DayOldArpu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayOldArpu,
		})
	}
	if value, ok := uasuo.mutation.AddedDayOldArpu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldDayOldArpu,
		})
	}
	if uasuo.mutation.DayOldArpuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: useranalysisstatistics.FieldDayOldArpu,
		})
	}
	if value, ok := uasuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: useranalysisstatistics.FieldUpdatedAt,
		})
	}
	if value, ok := uasuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldCreateBy,
		})
	}
	if value, ok := uasuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldCreateBy,
		})
	}
	if value, ok := uasuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldUpdateBy,
		})
	}
	if value, ok := uasuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldUpdateBy,
		})
	}
	if value, ok := uasuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldTenantId,
		})
	}
	if value, ok := uasuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: useranalysisstatistics.FieldTenantId,
		})
	}
	_node = &UserAnalysisStatistics{config: uasuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uasuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useranalysisstatistics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
