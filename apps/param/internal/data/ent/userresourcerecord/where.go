// Code generated by entc, DO NOT EDIT.

package userresourcerecord

import (
	"hope/apps/param/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// ResId applies equality check predicate on the "resId" field. It's identical to ResIdEQ.
func ResId(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResId), v))
	})
}

// Def applies equality check predicate on the "def" field. It's identical to DefEQ.
func Def(v bool) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDef), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// ResType applies equality check predicate on the "resType" field. It's identical to ResTypeEQ.
func ResType(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResType), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int32) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// EffectTime applies equality check predicate on the "effectTime" field. It's identical to EffectTimeEQ.
func EffectTime(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// ExpiredTime applies equality check predicate on the "expiredTime" field. It's identical to ExpiredTimeEQ.
func ExpiredTime(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserId)))
	})
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserId)))
	})
}

// ResIdEQ applies the EQ predicate on the "resId" field.
func ResIdEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResId), v))
	})
}

// ResIdNEQ applies the NEQ predicate on the "resId" field.
func ResIdNEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResId), v))
	})
}

// ResIdIn applies the In predicate on the "resId" field.
func ResIdIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResId), v...))
	})
}

// ResIdNotIn applies the NotIn predicate on the "resId" field.
func ResIdNotIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResId), v...))
	})
}

// ResIdGT applies the GT predicate on the "resId" field.
func ResIdGT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResId), v))
	})
}

// ResIdGTE applies the GTE predicate on the "resId" field.
func ResIdGTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResId), v))
	})
}

// ResIdLT applies the LT predicate on the "resId" field.
func ResIdLT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResId), v))
	})
}

// ResIdLTE applies the LTE predicate on the "resId" field.
func ResIdLTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResId), v))
	})
}

// ResIdIsNil applies the IsNil predicate on the "resId" field.
func ResIdIsNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResId)))
	})
}

// ResIdNotNil applies the NotNil predicate on the "resId" field.
func ResIdNotNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResId)))
	})
}

// DefEQ applies the EQ predicate on the "def" field.
func DefEQ(v bool) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDef), v))
	})
}

// DefNEQ applies the NEQ predicate on the "def" field.
func DefNEQ(v bool) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDef), v))
	})
}

// DefIsNil applies the IsNil predicate on the "def" field.
func DefIsNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDef)))
	})
}

// DefNotNil applies the NotNil predicate on the "def" field.
func DefNotNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDef)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldURL)))
	})
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldURL)))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// ResTypeEQ applies the EQ predicate on the "resType" field.
func ResTypeEQ(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResType), v))
	})
}

// ResTypeNEQ applies the NEQ predicate on the "resType" field.
func ResTypeNEQ(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResType), v))
	})
}

// ResTypeIn applies the In predicate on the "resType" field.
func ResTypeIn(vs ...string) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResType), v...))
	})
}

// ResTypeNotIn applies the NotIn predicate on the "resType" field.
func ResTypeNotIn(vs ...string) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResType), v...))
	})
}

// ResTypeGT applies the GT predicate on the "resType" field.
func ResTypeGT(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResType), v))
	})
}

// ResTypeGTE applies the GTE predicate on the "resType" field.
func ResTypeGTE(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResType), v))
	})
}

// ResTypeLT applies the LT predicate on the "resType" field.
func ResTypeLT(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResType), v))
	})
}

// ResTypeLTE applies the LTE predicate on the "resType" field.
func ResTypeLTE(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResType), v))
	})
}

// ResTypeContains applies the Contains predicate on the "resType" field.
func ResTypeContains(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResType), v))
	})
}

// ResTypeHasPrefix applies the HasPrefix predicate on the "resType" field.
func ResTypeHasPrefix(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResType), v))
	})
}

// ResTypeHasSuffix applies the HasSuffix predicate on the "resType" field.
func ResTypeHasSuffix(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResType), v))
	})
}

// ResTypeIsNil applies the IsNil predicate on the "resType" field.
func ResTypeIsNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResType)))
	})
}

// ResTypeNotNil applies the NotNil predicate on the "resType" field.
func ResTypeNotNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResType)))
	})
}

// ResTypeEqualFold applies the EqualFold predicate on the "resType" field.
func ResTypeEqualFold(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResType), v))
	})
}

// ResTypeContainsFold applies the ContainsFold predicate on the "resType" field.
func ResTypeContainsFold(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResType), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int32) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int32) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int32) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int32) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int32) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int32) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int32) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int32) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// EffectTimeEQ applies the EQ predicate on the "effectTime" field.
func EffectTimeEQ(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeNEQ applies the NEQ predicate on the "effectTime" field.
func EffectTimeNEQ(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeIn applies the In predicate on the "effectTime" field.
func EffectTimeIn(vs ...time.Time) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeNotIn applies the NotIn predicate on the "effectTime" field.
func EffectTimeNotIn(vs ...time.Time) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeGT applies the GT predicate on the "effectTime" field.
func EffectTimeGT(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeGTE applies the GTE predicate on the "effectTime" field.
func EffectTimeGTE(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLT applies the LT predicate on the "effectTime" field.
func EffectTimeLT(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLTE applies the LTE predicate on the "effectTime" field.
func EffectTimeLTE(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEffectTime), v))
	})
}

// ExpiredTimeEQ applies the EQ predicate on the "expiredTime" field.
func ExpiredTimeEQ(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeNEQ applies the NEQ predicate on the "expiredTime" field.
func ExpiredTimeNEQ(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeIn applies the In predicate on the "expiredTime" field.
func ExpiredTimeIn(vs ...time.Time) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeNotIn applies the NotIn predicate on the "expiredTime" field.
func ExpiredTimeNotIn(vs ...time.Time) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeGT applies the GT predicate on the "expiredTime" field.
func ExpiredTimeGT(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeGTE applies the GTE predicate on the "expiredTime" field.
func ExpiredTimeGTE(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLT applies the LT predicate on the "expiredTime" field.
func ExpiredTimeLT(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLTE applies the LTE predicate on the "expiredTime" field.
func ExpiredTimeLTE(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiredTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.UserResourceRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserResourceRecord) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserResourceRecord) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserResourceRecord) predicate.UserResourceRecord {
	return predicate.UserResourceRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
