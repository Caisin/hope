// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/sysdept"
	"hope/apps/admin/internal/data/ent/sysuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysDeptCreate is the builder for creating a SysDept entity.
type SysDeptCreate struct {
	config
	mutation *SysDeptMutation
	hooks    []Hook
}

// SetDeptPath sets the "deptPath" field.
func (sdc *SysDeptCreate) SetDeptPath(s string) *SysDeptCreate {
	sdc.mutation.SetDeptPath(s)
	return sdc
}

// SetNillableDeptPath sets the "deptPath" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableDeptPath(s *string) *SysDeptCreate {
	if s != nil {
		sdc.SetDeptPath(*s)
	}
	return sdc
}

// SetDeptName sets the "deptName" field.
func (sdc *SysDeptCreate) SetDeptName(s string) *SysDeptCreate {
	sdc.mutation.SetDeptName(s)
	return sdc
}

// SetNillableDeptName sets the "deptName" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableDeptName(s *string) *SysDeptCreate {
	if s != nil {
		sdc.SetDeptName(*s)
	}
	return sdc
}

// SetSort sets the "sort" field.
func (sdc *SysDeptCreate) SetSort(i int32) *SysDeptCreate {
	sdc.mutation.SetSort(i)
	return sdc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableSort(i *int32) *SysDeptCreate {
	if i != nil {
		sdc.SetSort(*i)
	}
	return sdc
}

// SetLeader sets the "leader" field.
func (sdc *SysDeptCreate) SetLeader(s string) *SysDeptCreate {
	sdc.mutation.SetLeader(s)
	return sdc
}

// SetNillableLeader sets the "leader" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableLeader(s *string) *SysDeptCreate {
	if s != nil {
		sdc.SetLeader(*s)
	}
	return sdc
}

// SetPhone sets the "phone" field.
func (sdc *SysDeptCreate) SetPhone(s string) *SysDeptCreate {
	sdc.mutation.SetPhone(s)
	return sdc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillablePhone(s *string) *SysDeptCreate {
	if s != nil {
		sdc.SetPhone(*s)
	}
	return sdc
}

// SetEmail sets the "email" field.
func (sdc *SysDeptCreate) SetEmail(s string) *SysDeptCreate {
	sdc.mutation.SetEmail(s)
	return sdc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableEmail(s *string) *SysDeptCreate {
	if s != nil {
		sdc.SetEmail(*s)
	}
	return sdc
}

// SetStatus sets the "status" field.
func (sdc *SysDeptCreate) SetStatus(i int32) *SysDeptCreate {
	sdc.mutation.SetStatus(i)
	return sdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableStatus(i *int32) *SysDeptCreate {
	if i != nil {
		sdc.SetStatus(*i)
	}
	return sdc
}

// SetCreatedAt sets the "createdAt" field.
func (sdc *SysDeptCreate) SetCreatedAt(t time.Time) *SysDeptCreate {
	sdc.mutation.SetCreatedAt(t)
	return sdc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableCreatedAt(t *time.Time) *SysDeptCreate {
	if t != nil {
		sdc.SetCreatedAt(*t)
	}
	return sdc
}

// SetUpdatedAt sets the "updatedAt" field.
func (sdc *SysDeptCreate) SetUpdatedAt(t time.Time) *SysDeptCreate {
	sdc.mutation.SetUpdatedAt(t)
	return sdc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableUpdatedAt(t *time.Time) *SysDeptCreate {
	if t != nil {
		sdc.SetUpdatedAt(*t)
	}
	return sdc
}

// SetCreateBy sets the "createBy" field.
func (sdc *SysDeptCreate) SetCreateBy(i int64) *SysDeptCreate {
	sdc.mutation.SetCreateBy(i)
	return sdc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableCreateBy(i *int64) *SysDeptCreate {
	if i != nil {
		sdc.SetCreateBy(*i)
	}
	return sdc
}

// SetUpdateBy sets the "updateBy" field.
func (sdc *SysDeptCreate) SetUpdateBy(i int64) *SysDeptCreate {
	sdc.mutation.SetUpdateBy(i)
	return sdc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableUpdateBy(i *int64) *SysDeptCreate {
	if i != nil {
		sdc.SetUpdateBy(*i)
	}
	return sdc
}

// SetTenantId sets the "tenantId" field.
func (sdc *SysDeptCreate) SetTenantId(i int64) *SysDeptCreate {
	sdc.mutation.SetTenantId(i)
	return sdc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableTenantId(i *int64) *SysDeptCreate {
	if i != nil {
		sdc.SetTenantId(*i)
	}
	return sdc
}

// SetParentID sets the "parent" edge to the SysDept entity by ID.
func (sdc *SysDeptCreate) SetParentID(id int64) *SysDeptCreate {
	sdc.mutation.SetParentID(id)
	return sdc
}

// SetNillableParentID sets the "parent" edge to the SysDept entity by ID if the given value is not nil.
func (sdc *SysDeptCreate) SetNillableParentID(id *int64) *SysDeptCreate {
	if id != nil {
		sdc = sdc.SetParentID(*id)
	}
	return sdc
}

// SetParent sets the "parent" edge to the SysDept entity.
func (sdc *SysDeptCreate) SetParent(s *SysDept) *SysDeptCreate {
	return sdc.SetParentID(s.ID)
}

// AddChildeIDs adds the "childes" edge to the SysDept entity by IDs.
func (sdc *SysDeptCreate) AddChildeIDs(ids ...int64) *SysDeptCreate {
	sdc.mutation.AddChildeIDs(ids...)
	return sdc
}

// AddChildes adds the "childes" edges to the SysDept entity.
func (sdc *SysDeptCreate) AddChildes(s ...*SysDept) *SysDeptCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdc.AddChildeIDs(ids...)
}

// AddUserIDs adds the "users" edge to the SysUser entity by IDs.
func (sdc *SysDeptCreate) AddUserIDs(ids ...int64) *SysDeptCreate {
	sdc.mutation.AddUserIDs(ids...)
	return sdc
}

// AddUsers adds the "users" edges to the SysUser entity.
func (sdc *SysDeptCreate) AddUsers(s ...*SysUser) *SysDeptCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdc.AddUserIDs(ids...)
}

// Mutation returns the SysDeptMutation object of the builder.
func (sdc *SysDeptCreate) Mutation() *SysDeptMutation {
	return sdc.mutation
}

// Save creates the SysDept in the database.
func (sdc *SysDeptCreate) Save(ctx context.Context) (*SysDept, error) {
	var (
		err  error
		node *SysDept
	)
	sdc.defaults()
	if len(sdc.hooks) == 0 {
		if err = sdc.check(); err != nil {
			return nil, err
		}
		node, err = sdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysDeptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sdc.check(); err != nil {
				return nil, err
			}
			sdc.mutation = mutation
			if node, err = sdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sdc.hooks) - 1; i >= 0; i-- {
			if sdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *SysDeptCreate) SaveX(ctx context.Context) *SysDept {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *SysDeptCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *SysDeptCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *SysDeptCreate) defaults() {
	if _, ok := sdc.mutation.CreatedAt(); !ok {
		v := sysdept.DefaultCreatedAt()
		sdc.mutation.SetCreatedAt(v)
	}
	if _, ok := sdc.mutation.UpdatedAt(); !ok {
		v := sysdept.DefaultUpdatedAt()
		sdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sdc.mutation.CreateBy(); !ok {
		v := sysdept.DefaultCreateBy
		sdc.mutation.SetCreateBy(v)
	}
	if _, ok := sdc.mutation.UpdateBy(); !ok {
		v := sysdept.DefaultUpdateBy
		sdc.mutation.SetUpdateBy(v)
	}
	if _, ok := sdc.mutation.TenantId(); !ok {
		v := sysdept.DefaultTenantId
		sdc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *SysDeptCreate) check() error {
	if _, ok := sdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "SysDept.createdAt"`)}
	}
	if _, ok := sdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "SysDept.updatedAt"`)}
	}
	if _, ok := sdc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "SysDept.createBy"`)}
	}
	if _, ok := sdc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "SysDept.updateBy"`)}
	}
	if _, ok := sdc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "SysDept.tenantId"`)}
	}
	return nil
}

func (sdc *SysDeptCreate) sqlSave(ctx context.Context) (*SysDept, error) {
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (sdc *SysDeptCreate) createSpec() (*SysDept, *sqlgraph.CreateSpec) {
	var (
		_node = &SysDept{config: sdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysdept.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysdept.FieldID,
			},
		}
	)
	if value, ok := sdc.mutation.DeptPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldDeptPath,
		})
		_node.DeptPath = value
	}
	if value, ok := sdc.mutation.DeptName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldDeptName,
		})
		_node.DeptName = value
	}
	if value, ok := sdc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := sdc.mutation.Leader(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldLeader,
		})
		_node.Leader = value
	}
	if value, ok := sdc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := sdc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysdept.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := sdc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysdept.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysdept.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysdept.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sdc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := sdc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := sdc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysdept.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := sdc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdept.ParentTable,
			Columns: []string{sysdept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sys_dept_childes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sdc.mutation.ChildesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.ChildesTable,
			Columns: []string{sysdept.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysdept.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sdc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.UsersTable,
			Columns: []string{sysdept.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SysDeptCreateBulk is the builder for creating many SysDept entities in bulk.
type SysDeptCreateBulk struct {
	config
	builders []*SysDeptCreate
}

// Save creates the SysDept entities in the database.
func (sdcb *SysDeptCreateBulk) Save(ctx context.Context) ([]*SysDept, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*SysDept, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysDeptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *SysDeptCreateBulk) SaveX(ctx context.Context) []*SysDept {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *SysDeptCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *SysDeptCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
