// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/appversion"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AppVersion is the model entity for the AppVersion schema.
type AppVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	// 标题
	Title string `json:"title,omitempty"`
	// Version holds the value of the "version" field.
	// 版本号
	Version int32 `json:"version,omitempty"`
	// UpdateInfo holds the value of the "updateInfo" field.
	// 更新信息
	UpdateInfo string `json:"updateInfo,omitempty"`
	// DownloadUrl holds the value of the "downloadUrl" field.
	// 下载地址
	DownloadUrl string `json:"downloadUrl,omitempty"`
	// Platform holds the value of the "platform" field.
	// 平台
	Platform string `json:"platform,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppVersion) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appversion.FieldID, appversion.FieldVersion, appversion.FieldCreateBy, appversion.FieldUpdateBy, appversion.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case appversion.FieldTitle, appversion.FieldUpdateInfo, appversion.FieldDownloadUrl, appversion.FieldPlatform:
			values[i] = new(sql.NullString)
		case appversion.FieldCreatedAt, appversion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppVersion", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppVersion fields.
func (av *AppVersion) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			av.ID = int64(value.Int64)
		case appversion.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				av.Title = value.String
			}
		case appversion.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				av.Version = int32(value.Int64)
			}
		case appversion.FieldUpdateInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updateInfo", values[i])
			} else if value.Valid {
				av.UpdateInfo = value.String
			}
		case appversion.FieldDownloadUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field downloadUrl", values[i])
			} else if value.Valid {
				av.DownloadUrl = value.String
			}
		case appversion.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				av.Platform = value.String
			}
		case appversion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				av.CreatedAt = value.Time
			}
		case appversion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				av.UpdatedAt = value.Time
			}
		case appversion.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				av.CreateBy = value.Int64
			}
		case appversion.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				av.UpdateBy = value.Int64
			}
		case appversion.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				av.TenantId = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppVersion.
// Note that you need to call AppVersion.Unwrap() before calling this method if this AppVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (av *AppVersion) Update() *AppVersionUpdateOne {
	return (&AppVersionClient{config: av.config}).UpdateOne(av)
}

// Unwrap unwraps the AppVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (av *AppVersion) Unwrap() *AppVersion {
	tx, ok := av.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppVersion is not a transactional entity")
	}
	av.config.driver = tx.drv
	return av
}

// String implements the fmt.Stringer.
func (av *AppVersion) String() string {
	var builder strings.Builder
	builder.WriteString("AppVersion(")
	builder.WriteString(fmt.Sprintf("id=%v", av.ID))
	builder.WriteString(", title=")
	builder.WriteString(av.Title)
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", av.Version))
	builder.WriteString(", updateInfo=")
	builder.WriteString(av.UpdateInfo)
	builder.WriteString(", downloadUrl=")
	builder.WriteString(av.DownloadUrl)
	builder.WriteString(", platform=")
	builder.WriteString(av.Platform)
	builder.WriteString(", createdAt=")
	builder.WriteString(av.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(av.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", av.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", av.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", av.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// AppVersions is a parsable slice of AppVersion.
type AppVersions []*AppVersion

func (av AppVersions) config(cfg config) {
	for _i := range av {
		av[_i].config = cfg
	}
}
