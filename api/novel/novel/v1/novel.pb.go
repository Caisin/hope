// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/novel/v1/novel.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询搜索请求
type NovelPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *NovelReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *NovelPageReq) Reset() {
	*x = NovelPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelPageReq) ProtoMessage() {}

func (x *NovelPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelPageReq.ProtoReflect.Descriptor instead.
func (*NovelPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{0}
}

func (x *NovelPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *NovelPageReq) GetParam() *NovelReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type NovelPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条目
	Items []*NovelReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NovelPageReply) Reset() {
	*x = NovelPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelPageReply) ProtoMessage() {}

func (x *NovelPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelPageReply.ProtoReflect.Descriptor instead.
func (*NovelPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{1}
}

func (x *NovelPageReply) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *NovelPageReply) GetItems() []*NovelReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type NovelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分类ID
	ClassifyId int64 `protobuf:"varint,2,opt,name=classifyId,proto3" json:"classifyId,omitempty"`
	//分类名称
	ClassifyName string `protobuf:"bytes,3,opt,name=classifyName,proto3" json:"classifyName,omitempty"`
	//作者ID,本站小说有
	AuthorId string `protobuf:"bytes,4,opt,name=authorId,proto3" json:"authorId,omitempty"`
	//小说标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	//小说摘要
	Summary string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	//作者
	Author string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	//主播
	Anchor string `protobuf:"bytes,8,opt,name=anchor,proto3" json:"anchor,omitempty"`
	//点击量
	Hits int64 `protobuf:"varint,9,opt,name=hits,proto3" json:"hits,omitempty"`
	//关键字，用逗号隔开
	Keywords string `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`
	//来源
	Source string `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	//评分
	Score int32 `protobuf:"varint,12,opt,name=score,proto3" json:"score,omitempty"`
	//封面
	Cover string `protobuf:"bytes,13,opt,name=cover,proto3" json:"cover,omitempty"`
	//标签,关联标签表novel_tag
	TagIds string `protobuf:"bytes,14,opt,name=tagIds,proto3" json:"tagIds,omitempty"`
	//书本字数
	WordNum int32 `protobuf:"varint,15,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//免费章节数量
	FreeNum int32 `protobuf:"varint,16,opt,name=freeNum,proto3" json:"freeNum,omitempty"`
	//连载状态
	OnlineState int32 `protobuf:"varint,17,opt,name=onlineState,proto3" json:"onlineState,omitempty"`
	//整本价格
	Price int64 `protobuf:"varint,18,opt,name=price,proto3" json:"price,omitempty"`
	//发布状态
	Publish int32 `protobuf:"varint,19,opt,name=publish,proto3" json:"publish,omitempty"`
	//原价,展示用
	OriginalPrice int64 `protobuf:"varint,20,opt,name=originalPrice,proto3" json:"originalPrice,omitempty"`
	//千字价格
	ChapterPrice int32 `protobuf:"varint,21,opt,name=chapterPrice,proto3" json:"chapterPrice,omitempty"`
	//章节数量
	ChapterCount int32 `protobuf:"varint,22,opt,name=chapterCount,proto3" json:"chapterCount,omitempty"`
	//签约类型 0
	SignType int32 `protobuf:"varint,23,opt,name=signType,proto3" json:"signType,omitempty"`
	//签约时间
	SignDate *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=signDate,proto3" json:"signDate,omitempty"`
	//男主角
	LeadingMan string `protobuf:"bytes,25,opt,name=leadingMan,proto3" json:"leadingMan,omitempty"`
	//女主角
	LeadingLady string `protobuf:"bytes,26,opt,name=leadingLady,proto3" json:"leadingLady,omitempty"`
	//备注
	Remark string `protobuf:"bytes,27,opt,name=remark,proto3" json:"remark,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,28,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,31,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,32,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,33,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelReq) Reset() {
	*x = NovelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelReq) ProtoMessage() {}

func (x *NovelReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelReq.ProtoReflect.Descriptor instead.
func (*NovelReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{2}
}

func (x *NovelReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelReq) GetClassifyId() int64 {
	if x != nil {
		return x.ClassifyId
	}
	return 0
}

func (x *NovelReq) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

func (x *NovelReq) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *NovelReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NovelReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NovelReq) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NovelReq) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *NovelReq) GetHits() int64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *NovelReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *NovelReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NovelReq) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelReq) GetTagIds() string {
	if x != nil {
		return x.TagIds
	}
	return ""
}

func (x *NovelReq) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelReq) GetFreeNum() int32 {
	if x != nil {
		return x.FreeNum
	}
	return 0
}

func (x *NovelReq) GetOnlineState() int32 {
	if x != nil {
		return x.OnlineState
	}
	return 0
}

func (x *NovelReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelReq) GetPublish() int32 {
	if x != nil {
		return x.Publish
	}
	return 0
}

func (x *NovelReq) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *NovelReq) GetChapterPrice() int32 {
	if x != nil {
		return x.ChapterPrice
	}
	return 0
}

func (x *NovelReq) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *NovelReq) GetSignType() int32 {
	if x != nil {
		return x.SignType
	}
	return 0
}

func (x *NovelReq) GetSignDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SignDate
	}
	return nil
}

func (x *NovelReq) GetLeadingMan() string {
	if x != nil {
		return x.LeadingMan
	}
	return ""
}

func (x *NovelReq) GetLeadingLady() string {
	if x != nil {
		return x.LeadingLady
	}
	return ""
}

func (x *NovelReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelReq) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

func (x *NovelReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索返回
type NovelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分类ID
	ClassifyId int64 `protobuf:"varint,2,opt,name=classifyId,proto3" json:"classifyId,omitempty"`
	//分类名称
	ClassifyName string `protobuf:"bytes,3,opt,name=classifyName,proto3" json:"classifyName,omitempty"`
	//作者ID,本站小说有
	AuthorId string `protobuf:"bytes,4,opt,name=authorId,proto3" json:"authorId,omitempty"`
	//小说标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	//小说摘要
	Summary string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	//作者
	Author string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	//主播
	Anchor string `protobuf:"bytes,8,opt,name=anchor,proto3" json:"anchor,omitempty"`
	//点击量
	Hits int64 `protobuf:"varint,9,opt,name=hits,proto3" json:"hits,omitempty"`
	//关键字，用逗号隔开
	Keywords string `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`
	//来源
	Source string `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	//评分
	Score int32 `protobuf:"varint,12,opt,name=score,proto3" json:"score,omitempty"`
	//封面
	Cover string `protobuf:"bytes,13,opt,name=cover,proto3" json:"cover,omitempty"`
	//标签,关联标签表novel_tag
	TagIds string `protobuf:"bytes,14,opt,name=tagIds,proto3" json:"tagIds,omitempty"`
	//书本字数
	WordNum int32 `protobuf:"varint,15,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//免费章节数量
	FreeNum int32 `protobuf:"varint,16,opt,name=freeNum,proto3" json:"freeNum,omitempty"`
	//连载状态
	OnlineState int32 `protobuf:"varint,17,opt,name=onlineState,proto3" json:"onlineState,omitempty"`
	//整本价格
	Price int64 `protobuf:"varint,18,opt,name=price,proto3" json:"price,omitempty"`
	//发布状态
	Publish int32 `protobuf:"varint,19,opt,name=publish,proto3" json:"publish,omitempty"`
	//原价,展示用
	OriginalPrice int64 `protobuf:"varint,20,opt,name=originalPrice,proto3" json:"originalPrice,omitempty"`
	//千字价格
	ChapterPrice int32 `protobuf:"varint,21,opt,name=chapterPrice,proto3" json:"chapterPrice,omitempty"`
	//章节数量
	ChapterCount int32 `protobuf:"varint,22,opt,name=chapterCount,proto3" json:"chapterCount,omitempty"`
	//签约类型 0
	SignType int32 `protobuf:"varint,23,opt,name=signType,proto3" json:"signType,omitempty"`
	//签约时间
	SignDate *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=signDate,proto3" json:"signDate,omitempty"`
	//男主角
	LeadingMan string `protobuf:"bytes,25,opt,name=leadingMan,proto3" json:"leadingMan,omitempty"`
	//女主角
	LeadingLady string `protobuf:"bytes,26,opt,name=leadingLady,proto3" json:"leadingLady,omitempty"`
	//备注
	Remark string `protobuf:"bytes,27,opt,name=remark,proto3" json:"remark,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,28,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,31,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,32,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,33,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelReply) Reset() {
	*x = NovelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelReply) ProtoMessage() {}

func (x *NovelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelReply.ProtoReflect.Descriptor instead.
func (*NovelReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{3}
}

func (x *NovelReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelReply) GetClassifyId() int64 {
	if x != nil {
		return x.ClassifyId
	}
	return 0
}

func (x *NovelReply) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

func (x *NovelReply) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *NovelReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NovelReply) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NovelReply) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NovelReply) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *NovelReply) GetHits() int64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *NovelReply) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *NovelReply) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NovelReply) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelReply) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelReply) GetTagIds() string {
	if x != nil {
		return x.TagIds
	}
	return ""
}

func (x *NovelReply) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelReply) GetFreeNum() int32 {
	if x != nil {
		return x.FreeNum
	}
	return 0
}

func (x *NovelReply) GetOnlineState() int32 {
	if x != nil {
		return x.OnlineState
	}
	return 0
}

func (x *NovelReply) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelReply) GetPublish() int32 {
	if x != nil {
		return x.Publish
	}
	return 0
}

func (x *NovelReply) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *NovelReply) GetChapterPrice() int32 {
	if x != nil {
		return x.ChapterPrice
	}
	return 0
}

func (x *NovelReply) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *NovelReply) GetSignType() int32 {
	if x != nil {
		return x.SignType
	}
	return 0
}

func (x *NovelReply) GetSignDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SignDate
	}
	return nil
}

func (x *NovelReply) GetLeadingMan() string {
	if x != nil {
		return x.LeadingMan
	}
	return ""
}

func (x *NovelReply) GetLeadingLady() string {
	if x != nil {
		return x.LeadingLady
	}
	return ""
}

func (x *NovelReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelReply) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

func (x *NovelReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 创建Novel请求
type NovelCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分类ID
	ClassifyId int64 `protobuf:"varint,1,opt,name=classifyId,proto3" json:"classifyId,omitempty"`
	//分类名称
	ClassifyName string `protobuf:"bytes,2,opt,name=classifyName,proto3" json:"classifyName,omitempty"`
	//作者ID,本站小说有
	AuthorId string `protobuf:"bytes,3,opt,name=authorId,proto3" json:"authorId,omitempty"`
	//小说标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	//小说摘要
	Summary string `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	//作者
	Author string `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	//主播
	Anchor string `protobuf:"bytes,7,opt,name=anchor,proto3" json:"anchor,omitempty"`
	//点击量
	Hits int64 `protobuf:"varint,8,opt,name=hits,proto3" json:"hits,omitempty"`
	//关键字，用逗号隔开
	Keywords string `protobuf:"bytes,9,opt,name=keywords,proto3" json:"keywords,omitempty"`
	//来源
	Source string `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
	//评分
	Score int32 `protobuf:"varint,11,opt,name=score,proto3" json:"score,omitempty"`
	//封面
	Cover string `protobuf:"bytes,12,opt,name=cover,proto3" json:"cover,omitempty"`
	//标签,关联标签表novel_tag
	TagIds string `protobuf:"bytes,13,opt,name=tagIds,proto3" json:"tagIds,omitempty"`
	//书本字数
	WordNum int32 `protobuf:"varint,14,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//免费章节数量
	FreeNum int32 `protobuf:"varint,15,opt,name=freeNum,proto3" json:"freeNum,omitempty"`
	//连载状态
	OnlineState int32 `protobuf:"varint,16,opt,name=onlineState,proto3" json:"onlineState,omitempty"`
	//整本价格
	Price int64 `protobuf:"varint,17,opt,name=price,proto3" json:"price,omitempty"`
	//发布状态
	Publish int32 `protobuf:"varint,18,opt,name=publish,proto3" json:"publish,omitempty"`
	//原价,展示用
	OriginalPrice int64 `protobuf:"varint,19,opt,name=originalPrice,proto3" json:"originalPrice,omitempty"`
	//千字价格
	ChapterPrice int32 `protobuf:"varint,20,opt,name=chapterPrice,proto3" json:"chapterPrice,omitempty"`
	//章节数量
	ChapterCount int32 `protobuf:"varint,21,opt,name=chapterCount,proto3" json:"chapterCount,omitempty"`
	//签约类型 0
	SignType int32 `protobuf:"varint,22,opt,name=signType,proto3" json:"signType,omitempty"`
	//签约时间
	SignDate *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=signDate,proto3" json:"signDate,omitempty"`
	//男主角
	LeadingMan string `protobuf:"bytes,24,opt,name=leadingMan,proto3" json:"leadingMan,omitempty"`
	//女主角
	LeadingLady string `protobuf:"bytes,25,opt,name=leadingLady,proto3" json:"leadingLady,omitempty"`
	//备注
	Remark string `protobuf:"bytes,26,opt,name=remark,proto3" json:"remark,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,27,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
}

func (x *NovelCreateReq) Reset() {
	*x = NovelCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCreateReq) ProtoMessage() {}

func (x *NovelCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCreateReq.ProtoReflect.Descriptor instead.
func (*NovelCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{4}
}

func (x *NovelCreateReq) GetClassifyId() int64 {
	if x != nil {
		return x.ClassifyId
	}
	return 0
}

func (x *NovelCreateReq) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

func (x *NovelCreateReq) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *NovelCreateReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NovelCreateReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NovelCreateReq) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NovelCreateReq) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *NovelCreateReq) GetHits() int64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *NovelCreateReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *NovelCreateReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NovelCreateReq) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelCreateReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelCreateReq) GetTagIds() string {
	if x != nil {
		return x.TagIds
	}
	return ""
}

func (x *NovelCreateReq) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelCreateReq) GetFreeNum() int32 {
	if x != nil {
		return x.FreeNum
	}
	return 0
}

func (x *NovelCreateReq) GetOnlineState() int32 {
	if x != nil {
		return x.OnlineState
	}
	return 0
}

func (x *NovelCreateReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelCreateReq) GetPublish() int32 {
	if x != nil {
		return x.Publish
	}
	return 0
}

func (x *NovelCreateReq) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *NovelCreateReq) GetChapterPrice() int32 {
	if x != nil {
		return x.ChapterPrice
	}
	return 0
}

func (x *NovelCreateReq) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *NovelCreateReq) GetSignType() int32 {
	if x != nil {
		return x.SignType
	}
	return 0
}

func (x *NovelCreateReq) GetSignDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SignDate
	}
	return nil
}

func (x *NovelCreateReq) GetLeadingMan() string {
	if x != nil {
		return x.LeadingMan
	}
	return ""
}

func (x *NovelCreateReq) GetLeadingLady() string {
	if x != nil {
		return x.LeadingLady
	}
	return ""
}

func (x *NovelCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelCreateReq) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

// 创建Novel返回
type NovelCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分类ID
	ClassifyId int64 `protobuf:"varint,2,opt,name=classifyId,proto3" json:"classifyId,omitempty"`
	//分类名称
	ClassifyName string `protobuf:"bytes,3,opt,name=classifyName,proto3" json:"classifyName,omitempty"`
	//作者ID,本站小说有
	AuthorId string `protobuf:"bytes,4,opt,name=authorId,proto3" json:"authorId,omitempty"`
	//小说标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	//小说摘要
	Summary string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	//作者
	Author string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	//主播
	Anchor string `protobuf:"bytes,8,opt,name=anchor,proto3" json:"anchor,omitempty"`
	//点击量
	Hits int64 `protobuf:"varint,9,opt,name=hits,proto3" json:"hits,omitempty"`
	//关键字，用逗号隔开
	Keywords string `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`
	//来源
	Source string `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	//评分
	Score int32 `protobuf:"varint,12,opt,name=score,proto3" json:"score,omitempty"`
	//封面
	Cover string `protobuf:"bytes,13,opt,name=cover,proto3" json:"cover,omitempty"`
	//标签,关联标签表novel_tag
	TagIds string `protobuf:"bytes,14,opt,name=tagIds,proto3" json:"tagIds,omitempty"`
	//书本字数
	WordNum int32 `protobuf:"varint,15,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//免费章节数量
	FreeNum int32 `protobuf:"varint,16,opt,name=freeNum,proto3" json:"freeNum,omitempty"`
	//连载状态
	OnlineState int32 `protobuf:"varint,17,opt,name=onlineState,proto3" json:"onlineState,omitempty"`
	//整本价格
	Price int64 `protobuf:"varint,18,opt,name=price,proto3" json:"price,omitempty"`
	//发布状态
	Publish int32 `protobuf:"varint,19,opt,name=publish,proto3" json:"publish,omitempty"`
	//原价,展示用
	OriginalPrice int64 `protobuf:"varint,20,opt,name=originalPrice,proto3" json:"originalPrice,omitempty"`
	//千字价格
	ChapterPrice int32 `protobuf:"varint,21,opt,name=chapterPrice,proto3" json:"chapterPrice,omitempty"`
	//章节数量
	ChapterCount int32 `protobuf:"varint,22,opt,name=chapterCount,proto3" json:"chapterCount,omitempty"`
	//签约类型 0
	SignType int32 `protobuf:"varint,23,opt,name=signType,proto3" json:"signType,omitempty"`
	//签约时间
	SignDate *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=signDate,proto3" json:"signDate,omitempty"`
	//男主角
	LeadingMan string `protobuf:"bytes,25,opt,name=leadingMan,proto3" json:"leadingMan,omitempty"`
	//女主角
	LeadingLady string `protobuf:"bytes,26,opt,name=leadingLady,proto3" json:"leadingLady,omitempty"`
	//备注
	Remark string `protobuf:"bytes,27,opt,name=remark,proto3" json:"remark,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,28,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,31,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,32,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,33,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelCreateReply) Reset() {
	*x = NovelCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelCreateReply) ProtoMessage() {}

func (x *NovelCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelCreateReply.ProtoReflect.Descriptor instead.
func (*NovelCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{5}
}

func (x *NovelCreateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelCreateReply) GetClassifyId() int64 {
	if x != nil {
		return x.ClassifyId
	}
	return 0
}

func (x *NovelCreateReply) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

func (x *NovelCreateReply) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *NovelCreateReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NovelCreateReply) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NovelCreateReply) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NovelCreateReply) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *NovelCreateReply) GetHits() int64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *NovelCreateReply) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *NovelCreateReply) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NovelCreateReply) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelCreateReply) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelCreateReply) GetTagIds() string {
	if x != nil {
		return x.TagIds
	}
	return ""
}

func (x *NovelCreateReply) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelCreateReply) GetFreeNum() int32 {
	if x != nil {
		return x.FreeNum
	}
	return 0
}

func (x *NovelCreateReply) GetOnlineState() int32 {
	if x != nil {
		return x.OnlineState
	}
	return 0
}

func (x *NovelCreateReply) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelCreateReply) GetPublish() int32 {
	if x != nil {
		return x.Publish
	}
	return 0
}

func (x *NovelCreateReply) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *NovelCreateReply) GetChapterPrice() int32 {
	if x != nil {
		return x.ChapterPrice
	}
	return 0
}

func (x *NovelCreateReply) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *NovelCreateReply) GetSignType() int32 {
	if x != nil {
		return x.SignType
	}
	return 0
}

func (x *NovelCreateReply) GetSignDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SignDate
	}
	return nil
}

func (x *NovelCreateReply) GetLeadingMan() string {
	if x != nil {
		return x.LeadingMan
	}
	return ""
}

func (x *NovelCreateReply) GetLeadingLady() string {
	if x != nil {
		return x.LeadingLady
	}
	return ""
}

func (x *NovelCreateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelCreateReply) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

func (x *NovelCreateReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelCreateReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelCreateReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelCreateReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelCreateReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 更新Novel请求
type NovelUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分类ID
	ClassifyId int64 `protobuf:"varint,2,opt,name=classifyId,proto3" json:"classifyId,omitempty"`
	//分类名称
	ClassifyName string `protobuf:"bytes,3,opt,name=classifyName,proto3" json:"classifyName,omitempty"`
	//作者ID,本站小说有
	AuthorId string `protobuf:"bytes,4,opt,name=authorId,proto3" json:"authorId,omitempty"`
	//小说标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	//小说摘要
	Summary string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	//作者
	Author string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	//主播
	Anchor string `protobuf:"bytes,8,opt,name=anchor,proto3" json:"anchor,omitempty"`
	//点击量
	Hits int64 `protobuf:"varint,9,opt,name=hits,proto3" json:"hits,omitempty"`
	//关键字，用逗号隔开
	Keywords string `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`
	//来源
	Source string `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	//评分
	Score int32 `protobuf:"varint,12,opt,name=score,proto3" json:"score,omitempty"`
	//封面
	Cover string `protobuf:"bytes,13,opt,name=cover,proto3" json:"cover,omitempty"`
	//标签,关联标签表novel_tag
	TagIds string `protobuf:"bytes,14,opt,name=tagIds,proto3" json:"tagIds,omitempty"`
	//书本字数
	WordNum int32 `protobuf:"varint,15,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//免费章节数量
	FreeNum int32 `protobuf:"varint,16,opt,name=freeNum,proto3" json:"freeNum,omitempty"`
	//连载状态
	OnlineState int32 `protobuf:"varint,17,opt,name=onlineState,proto3" json:"onlineState,omitempty"`
	//整本价格
	Price int64 `protobuf:"varint,18,opt,name=price,proto3" json:"price,omitempty"`
	//发布状态
	Publish int32 `protobuf:"varint,19,opt,name=publish,proto3" json:"publish,omitempty"`
	//原价,展示用
	OriginalPrice int64 `protobuf:"varint,20,opt,name=originalPrice,proto3" json:"originalPrice,omitempty"`
	//千字价格
	ChapterPrice int32 `protobuf:"varint,21,opt,name=chapterPrice,proto3" json:"chapterPrice,omitempty"`
	//章节数量
	ChapterCount int32 `protobuf:"varint,22,opt,name=chapterCount,proto3" json:"chapterCount,omitempty"`
	//签约类型 0
	SignType int32 `protobuf:"varint,23,opt,name=signType,proto3" json:"signType,omitempty"`
	//签约时间
	SignDate *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=signDate,proto3" json:"signDate,omitempty"`
	//男主角
	LeadingMan string `protobuf:"bytes,25,opt,name=leadingMan,proto3" json:"leadingMan,omitempty"`
	//女主角
	LeadingLady string `protobuf:"bytes,26,opt,name=leadingLady,proto3" json:"leadingLady,omitempty"`
	//备注
	Remark string `protobuf:"bytes,27,opt,name=remark,proto3" json:"remark,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,28,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
}

func (x *NovelUpdateReq) Reset() {
	*x = NovelUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelUpdateReq) ProtoMessage() {}

func (x *NovelUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelUpdateReq.ProtoReflect.Descriptor instead.
func (*NovelUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{6}
}

func (x *NovelUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelUpdateReq) GetClassifyId() int64 {
	if x != nil {
		return x.ClassifyId
	}
	return 0
}

func (x *NovelUpdateReq) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

func (x *NovelUpdateReq) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *NovelUpdateReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NovelUpdateReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NovelUpdateReq) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NovelUpdateReq) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *NovelUpdateReq) GetHits() int64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *NovelUpdateReq) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *NovelUpdateReq) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NovelUpdateReq) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelUpdateReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelUpdateReq) GetTagIds() string {
	if x != nil {
		return x.TagIds
	}
	return ""
}

func (x *NovelUpdateReq) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelUpdateReq) GetFreeNum() int32 {
	if x != nil {
		return x.FreeNum
	}
	return 0
}

func (x *NovelUpdateReq) GetOnlineState() int32 {
	if x != nil {
		return x.OnlineState
	}
	return 0
}

func (x *NovelUpdateReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelUpdateReq) GetPublish() int32 {
	if x != nil {
		return x.Publish
	}
	return 0
}

func (x *NovelUpdateReq) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *NovelUpdateReq) GetChapterPrice() int32 {
	if x != nil {
		return x.ChapterPrice
	}
	return 0
}

func (x *NovelUpdateReq) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *NovelUpdateReq) GetSignType() int32 {
	if x != nil {
		return x.SignType
	}
	return 0
}

func (x *NovelUpdateReq) GetSignDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SignDate
	}
	return nil
}

func (x *NovelUpdateReq) GetLeadingMan() string {
	if x != nil {
		return x.LeadingMan
	}
	return ""
}

func (x *NovelUpdateReq) GetLeadingLady() string {
	if x != nil {
		return x.LeadingLady
	}
	return ""
}

func (x *NovelUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelUpdateReq) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

// 更新Novel返回
type NovelUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//分类ID
	ClassifyId int64 `protobuf:"varint,2,opt,name=classifyId,proto3" json:"classifyId,omitempty"`
	//分类名称
	ClassifyName string `protobuf:"bytes,3,opt,name=classifyName,proto3" json:"classifyName,omitempty"`
	//作者ID,本站小说有
	AuthorId string `protobuf:"bytes,4,opt,name=authorId,proto3" json:"authorId,omitempty"`
	//小说标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	//小说摘要
	Summary string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	//作者
	Author string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	//主播
	Anchor string `protobuf:"bytes,8,opt,name=anchor,proto3" json:"anchor,omitempty"`
	//点击量
	Hits int64 `protobuf:"varint,9,opt,name=hits,proto3" json:"hits,omitempty"`
	//关键字，用逗号隔开
	Keywords string `protobuf:"bytes,10,opt,name=keywords,proto3" json:"keywords,omitempty"`
	//来源
	Source string `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	//评分
	Score int32 `protobuf:"varint,12,opt,name=score,proto3" json:"score,omitempty"`
	//封面
	Cover string `protobuf:"bytes,13,opt,name=cover,proto3" json:"cover,omitempty"`
	//标签,关联标签表novel_tag
	TagIds string `protobuf:"bytes,14,opt,name=tagIds,proto3" json:"tagIds,omitempty"`
	//书本字数
	WordNum int32 `protobuf:"varint,15,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//免费章节数量
	FreeNum int32 `protobuf:"varint,16,opt,name=freeNum,proto3" json:"freeNum,omitempty"`
	//连载状态
	OnlineState int32 `protobuf:"varint,17,opt,name=onlineState,proto3" json:"onlineState,omitempty"`
	//整本价格
	Price int64 `protobuf:"varint,18,opt,name=price,proto3" json:"price,omitempty"`
	//发布状态
	Publish int32 `protobuf:"varint,19,opt,name=publish,proto3" json:"publish,omitempty"`
	//原价,展示用
	OriginalPrice int64 `protobuf:"varint,20,opt,name=originalPrice,proto3" json:"originalPrice,omitempty"`
	//千字价格
	ChapterPrice int32 `protobuf:"varint,21,opt,name=chapterPrice,proto3" json:"chapterPrice,omitempty"`
	//章节数量
	ChapterCount int32 `protobuf:"varint,22,opt,name=chapterCount,proto3" json:"chapterCount,omitempty"`
	//签约类型 0
	SignType int32 `protobuf:"varint,23,opt,name=signType,proto3" json:"signType,omitempty"`
	//签约时间
	SignDate *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=signDate,proto3" json:"signDate,omitempty"`
	//男主角
	LeadingMan string `protobuf:"bytes,25,opt,name=leadingMan,proto3" json:"leadingMan,omitempty"`
	//女主角
	LeadingLady string `protobuf:"bytes,26,opt,name=leadingLady,proto3" json:"leadingLady,omitempty"`
	//备注
	Remark string `protobuf:"bytes,27,opt,name=remark,proto3" json:"remark,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,28,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
}

func (x *NovelUpdateReply) Reset() {
	*x = NovelUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelUpdateReply) ProtoMessage() {}

func (x *NovelUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelUpdateReply.ProtoReflect.Descriptor instead.
func (*NovelUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{7}
}

func (x *NovelUpdateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelUpdateReply) GetClassifyId() int64 {
	if x != nil {
		return x.ClassifyId
	}
	return 0
}

func (x *NovelUpdateReply) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

func (x *NovelUpdateReply) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *NovelUpdateReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NovelUpdateReply) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NovelUpdateReply) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NovelUpdateReply) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *NovelUpdateReply) GetHits() int64 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *NovelUpdateReply) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *NovelUpdateReply) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NovelUpdateReply) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NovelUpdateReply) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *NovelUpdateReply) GetTagIds() string {
	if x != nil {
		return x.TagIds
	}
	return ""
}

func (x *NovelUpdateReply) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelUpdateReply) GetFreeNum() int32 {
	if x != nil {
		return x.FreeNum
	}
	return 0
}

func (x *NovelUpdateReply) GetOnlineState() int32 {
	if x != nil {
		return x.OnlineState
	}
	return 0
}

func (x *NovelUpdateReply) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelUpdateReply) GetPublish() int32 {
	if x != nil {
		return x.Publish
	}
	return 0
}

func (x *NovelUpdateReply) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *NovelUpdateReply) GetChapterPrice() int32 {
	if x != nil {
		return x.ChapterPrice
	}
	return 0
}

func (x *NovelUpdateReply) GetChapterCount() int32 {
	if x != nil {
		return x.ChapterCount
	}
	return 0
}

func (x *NovelUpdateReply) GetSignType() int32 {
	if x != nil {
		return x.SignType
	}
	return 0
}

func (x *NovelUpdateReply) GetSignDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SignDate
	}
	return nil
}

func (x *NovelUpdateReply) GetLeadingMan() string {
	if x != nil {
		return x.LeadingMan
	}
	return ""
}

func (x *NovelUpdateReply) GetLeadingLady() string {
	if x != nil {
		return x.LeadingLady
	}
	return ""
}

func (x *NovelUpdateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelUpdateReply) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

// 删除Novel请求
type NovelDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NovelDeleteReq) Reset() {
	*x = NovelDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelDeleteReq) ProtoMessage() {}

func (x *NovelDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{8}
}

func (x *NovelDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除Novel请求
type NovelBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *NovelBatchDeleteReq) Reset() {
	*x = NovelBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBatchDeleteReq) ProtoMessage() {}

func (x *NovelBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{9}
}

func (x *NovelBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除Novel返回
type NovelDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelDeleteReply) Reset() {
	*x = NovelDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novel_v1_novel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelDeleteReply) ProtoMessage() {}

func (x *NovelDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novel_v1_novel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelDeleteReply.ProtoReflect.Descriptor instead.
func (*NovelDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novel_v1_novel_proto_rawDescGZIP(), []int{10}
}

func (x *NovelDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_novel_v1_novel_proto protoreflect.FileDescriptor

var file_api_novel_novel_v1_novel_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x0c, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x65, 0x0a, 0x0e, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xec, 0x07, 0x0a, 0x08, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68,
	0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x6f,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73,
	0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61,
	0x64, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4c, 0x61, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xee, 0x07, 0x0a, 0x0a, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x68, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77,
	0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c,
	0x61, 0x64, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4c, 0x61, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x9a, 0x06, 0x0a, 0x0e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72,
	0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x64, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x22,
	0xf4, 0x07, 0x0a, 0x10, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72,
	0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x65,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x61, 0x64, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xaa, 0x06, 0x0a, 0x0e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x64, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x64, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x22, 0xac, 0x06, 0x0a, 0x10, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x64, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x64, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x22, 0x20, 0x0a, 0x0e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2a, 0x0a,
	0x10, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xa9, 0x04, 0x0a, 0x05, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x12, 0x58, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5e, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x2e, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x59, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x2e, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x60, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x2a, 0x09, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x1c, 0x5a, 0x1a, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x76, 0x31,
	0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_novel_novel_v1_novel_proto_rawDescOnce sync.Once
	file_api_novel_novel_v1_novel_proto_rawDescData = file_api_novel_novel_v1_novel_proto_rawDesc
)

func file_api_novel_novel_v1_novel_proto_rawDescGZIP() []byte {
	file_api_novel_novel_v1_novel_proto_rawDescOnce.Do(func() {
		file_api_novel_novel_v1_novel_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_novel_v1_novel_proto_rawDescData)
	})
	return file_api_novel_novel_v1_novel_proto_rawDescData
}

var file_api_novel_novel_v1_novel_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_novel_novel_v1_novel_proto_goTypes = []interface{}{
	(*NovelPageReq)(nil),          // 0: novel.v1.NovelPageReq
	(*NovelPageReply)(nil),        // 1: novel.v1.NovelPageReply
	(*NovelReq)(nil),              // 2: novel.v1.NovelReq
	(*NovelReply)(nil),            // 3: novel.v1.NovelReply
	(*NovelCreateReq)(nil),        // 4: novel.v1.NovelCreateReq
	(*NovelCreateReply)(nil),      // 5: novel.v1.NovelCreateReply
	(*NovelUpdateReq)(nil),        // 6: novel.v1.NovelUpdateReq
	(*NovelUpdateReply)(nil),      // 7: novel.v1.NovelUpdateReply
	(*NovelDeleteReq)(nil),        // 8: novel.v1.NovelDeleteReq
	(*NovelBatchDeleteReq)(nil),   // 9: novel.v1.NovelBatchDeleteReq
	(*NovelDeleteReply)(nil),      // 10: novel.v1.NovelDeleteReply
	(*pagin.Pagination)(nil),      // 11: pagin.Pagination
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_api_novel_novel_v1_novel_proto_depIdxs = []int32{
	11, // 0: novel.v1.NovelPageReq.pagin:type_name -> pagin.Pagination
	2,  // 1: novel.v1.NovelPageReq.param:type_name -> novel.v1.NovelReq
	11, // 2: novel.v1.NovelPageReply.pagin:type_name -> pagin.Pagination
	3,  // 3: novel.v1.NovelPageReply.items:type_name -> novel.v1.NovelReply
	12, // 4: novel.v1.NovelReq.signDate:type_name -> google.protobuf.Timestamp
	12, // 5: novel.v1.NovelReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 6: novel.v1.NovelReq.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 7: novel.v1.NovelReply.signDate:type_name -> google.protobuf.Timestamp
	12, // 8: novel.v1.NovelReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 9: novel.v1.NovelReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 10: novel.v1.NovelCreateReq.signDate:type_name -> google.protobuf.Timestamp
	12, // 11: novel.v1.NovelCreateReply.signDate:type_name -> google.protobuf.Timestamp
	12, // 12: novel.v1.NovelCreateReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 13: novel.v1.NovelCreateReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 14: novel.v1.NovelUpdateReq.signDate:type_name -> google.protobuf.Timestamp
	12, // 15: novel.v1.NovelUpdateReply.signDate:type_name -> google.protobuf.Timestamp
	0,  // 16: novel.v1.Novel.GetPageNovel:input_type -> novel.v1.NovelPageReq
	2,  // 17: novel.v1.Novel.GetNovel:input_type -> novel.v1.NovelReq
	6,  // 18: novel.v1.Novel.UpdateNovel:input_type -> novel.v1.NovelUpdateReq
	4,  // 19: novel.v1.Novel.CreateNovel:input_type -> novel.v1.NovelCreateReq
	8,  // 20: novel.v1.Novel.DeleteNovel:input_type -> novel.v1.NovelDeleteReq
	9,  // 21: novel.v1.Novel.BatchDeleteNovel:input_type -> novel.v1.NovelBatchDeleteReq
	1,  // 22: novel.v1.Novel.GetPageNovel:output_type -> novel.v1.NovelPageReply
	3,  // 23: novel.v1.Novel.GetNovel:output_type -> novel.v1.NovelReply
	7,  // 24: novel.v1.Novel.UpdateNovel:output_type -> novel.v1.NovelUpdateReply
	5,  // 25: novel.v1.Novel.CreateNovel:output_type -> novel.v1.NovelCreateReply
	10, // 26: novel.v1.Novel.DeleteNovel:output_type -> novel.v1.NovelDeleteReply
	10, // 27: novel.v1.Novel.BatchDeleteNovel:output_type -> novel.v1.NovelDeleteReply
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_novel_novel_v1_novel_proto_init() }
func file_api_novel_novel_v1_novel_proto_init() {
	if File_api_novel_novel_v1_novel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_novel_v1_novel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novel_v1_novel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_novel_v1_novel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_novel_v1_novel_proto_goTypes,
		DependencyIndexes: file_api_novel_novel_v1_novel_proto_depIdxs,
		MessageInfos:      file_api_novel_novel_v1_novel_proto_msgTypes,
	}.Build()
	File_api_novel_novel_v1_novel_proto = out.File
	file_api_novel_novel_v1_novel_proto_rawDesc = nil
	file_api_novel_novel_v1_novel_proto_goTypes = nil
	file_api_novel_novel_v1_novel_proto_depIdxs = nil
}
