// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/task"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetTaskName sets the "taskName" field.
func (tc *TaskCreate) SetTaskName(s string) *TaskCreate {
	tc.mutation.SetTaskName(s)
	return tc
}

// SetNillableTaskName sets the "taskName" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTaskName(s *string) *TaskCreate {
	if s != nil {
		tc.SetTaskName(*s)
	}
	return tc
}

// SetTaskGroup sets the "taskGroup" field.
func (tc *TaskCreate) SetTaskGroup(s string) *TaskCreate {
	tc.mutation.SetTaskGroup(s)
	return tc
}

// SetNillableTaskGroup sets the "taskGroup" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTaskGroup(s *string) *TaskCreate {
	if s != nil {
		tc.SetTaskGroup(*s)
	}
	return tc
}

// SetUnit sets the "unit" field.
func (tc *TaskCreate) SetUnit(s string) *TaskCreate {
	tc.mutation.SetUnit(s)
	return tc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUnit(s *string) *TaskCreate {
	if s != nil {
		tc.SetUnit(*s)
	}
	return tc
}

// SetTopic sets the "topic" field.
func (tc *TaskCreate) SetTopic(s string) *TaskCreate {
	tc.mutation.SetTopic(s)
	return tc
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTopic(s *string) *TaskCreate {
	if s != nil {
		tc.SetTopic(*s)
	}
	return tc
}

// SetFunction sets the "function" field.
func (tc *TaskCreate) SetFunction(s string) *TaskCreate {
	tc.mutation.SetFunction(s)
	return tc
}

// SetNillableFunction sets the "function" field if the given value is not nil.
func (tc *TaskCreate) SetNillableFunction(s *string) *TaskCreate {
	if s != nil {
		tc.SetFunction(*s)
	}
	return tc
}

// SetTaskCode sets the "taskCode" field.
func (tc *TaskCreate) SetTaskCode(s string) *TaskCreate {
	tc.mutation.SetTaskCode(s)
	return tc
}

// SetNillableTaskCode sets the "taskCode" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTaskCode(s *string) *TaskCreate {
	if s != nil {
		tc.SetTaskCode(*s)
	}
	return tc
}

// SetPreTask sets the "preTask" field.
func (tc *TaskCreate) SetPreTask(i int64) *TaskCreate {
	tc.mutation.SetPreTask(i)
	return tc
}

// SetNillablePreTask sets the "preTask" field if the given value is not nil.
func (tc *TaskCreate) SetNillablePreTask(i *int64) *TaskCreate {
	if i != nil {
		tc.SetPreTask(*i)
	}
	return tc
}

// SetNovelId sets the "novelId" field.
func (tc *TaskCreate) SetNovelId(i int64) *TaskCreate {
	tc.mutation.SetNovelId(i)
	return tc
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (tc *TaskCreate) SetNillableNovelId(i *int64) *TaskCreate {
	if i != nil {
		tc.SetNovelId(*i)
	}
	return tc
}

// SetCycleType sets the "cycleType" field.
func (tc *TaskCreate) SetCycleType(s string) *TaskCreate {
	tc.mutation.SetCycleType(s)
	return tc
}

// SetNillableCycleType sets the "cycleType" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCycleType(s *string) *TaskCreate {
	if s != nil {
		tc.SetCycleType(*s)
	}
	return tc
}

// SetRemark sets the "remark" field.
func (tc *TaskCreate) SetRemark(s string) *TaskCreate {
	tc.mutation.SetRemark(s)
	return tc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRemark(s *string) *TaskCreate {
	if s != nil {
		tc.SetRemark(*s)
	}
	return tc
}

// SetAmount sets the "amount" field.
func (tc *TaskCreate) SetAmount(i int64) *TaskCreate {
	tc.mutation.SetAmount(i)
	return tc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAmount(i *int64) *TaskCreate {
	if i != nil {
		tc.SetAmount(*i)
	}
	return tc
}

// SetReward sets the "reward" field.
func (tc *TaskCreate) SetReward(i int64) *TaskCreate {
	tc.mutation.SetReward(i)
	return tc
}

// SetNillableReward sets the "reward" field if the given value is not nil.
func (tc *TaskCreate) SetNillableReward(i *int64) *TaskCreate {
	if i != nil {
		tc.SetReward(*i)
	}
	return tc
}

// SetAmountItem sets the "amountItem" field.
func (tc *TaskCreate) SetAmountItem(i int32) *TaskCreate {
	tc.mutation.SetAmountItem(i)
	return tc
}

// SetNillableAmountItem sets the "amountItem" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAmountItem(i *int32) *TaskCreate {
	if i != nil {
		tc.SetAmountItem(*i)
	}
	return tc
}

// SetRewardItem sets the "rewardItem" field.
func (tc *TaskCreate) SetRewardItem(i int32) *TaskCreate {
	tc.mutation.SetRewardItem(i)
	return tc
}

// SetNillableRewardItem sets the "rewardItem" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRewardItem(i *int32) *TaskCreate {
	if i != nil {
		tc.SetRewardItem(*i)
	}
	return tc
}

// SetTargetNames sets the "targetNames" field.
func (tc *TaskCreate) SetTargetNames(s string) *TaskCreate {
	tc.mutation.SetTargetNames(s)
	return tc
}

// SetNillableTargetNames sets the "targetNames" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTargetNames(s *string) *TaskCreate {
	if s != nil {
		tc.SetTargetNames(*s)
	}
	return tc
}

// SetTargetAmounts sets the "targetAmounts" field.
func (tc *TaskCreate) SetTargetAmounts(s string) *TaskCreate {
	tc.mutation.SetTargetAmounts(s)
	return tc
}

// SetNillableTargetAmounts sets the "targetAmounts" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTargetAmounts(s *string) *TaskCreate {
	if s != nil {
		tc.SetTargetAmounts(*s)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(b bool) *TaskCreate {
	tc.mutation.SetStatus(b)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(b *bool) *TaskCreate {
	if b != nil {
		tc.SetStatus(*b)
	}
	return tc
}

// SetSortNum sets the "sortNum" field.
func (tc *TaskCreate) SetSortNum(i int64) *TaskCreate {
	tc.mutation.SetSortNum(i)
	return tc
}

// SetNillableSortNum sets the "sortNum" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSortNum(i *int64) *TaskCreate {
	if i != nil {
		tc.SetSortNum(*i)
	}
	return tc
}

// SetActionType sets the "actionType" field.
func (tc *TaskCreate) SetActionType(s string) *TaskCreate {
	tc.mutation.SetActionType(s)
	return tc
}

// SetNillableActionType sets the "actionType" field if the given value is not nil.
func (tc *TaskCreate) SetNillableActionType(s *string) *TaskCreate {
	if s != nil {
		tc.SetActionType(*s)
	}
	return tc
}

// SetEffectTime sets the "effectTime" field.
func (tc *TaskCreate) SetEffectTime(t time.Time) *TaskCreate {
	tc.mutation.SetEffectTime(t)
	return tc
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (tc *TaskCreate) SetNillableEffectTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetEffectTime(*t)
	}
	return tc
}

// SetExpiredTime sets the "expiredTime" field.
func (tc *TaskCreate) SetExpiredTime(t time.Time) *TaskCreate {
	tc.mutation.SetExpiredTime(t)
	return tc
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (tc *TaskCreate) SetNillableExpiredTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetExpiredTime(*t)
	}
	return tc
}

// SetCreatedAt sets the "createdAt" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updatedAt" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCreateBy sets the "createBy" field.
func (tc *TaskCreate) SetCreateBy(i int64) *TaskCreate {
	tc.mutation.SetCreateBy(i)
	return tc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreateBy(i *int64) *TaskCreate {
	if i != nil {
		tc.SetCreateBy(*i)
	}
	return tc
}

// SetUpdateBy sets the "updateBy" field.
func (tc *TaskCreate) SetUpdateBy(i int64) *TaskCreate {
	tc.mutation.SetUpdateBy(i)
	return tc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdateBy(i *int64) *TaskCreate {
	if i != nil {
		tc.SetUpdateBy(*i)
	}
	return tc
}

// SetTenantId sets the "tenantId" field.
func (tc *TaskCreate) SetTenantId(i int64) *TaskCreate {
	tc.mutation.SetTenantId(i)
	return tc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTenantId(i *int64) *TaskCreate {
	if i != nil {
		tc.SetTenantId(*i)
	}
	return tc
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	var (
		err  error
		node *Task
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.EffectTime(); !ok {
		v := task.DefaultEffectTime()
		tc.mutation.SetEffectTime(v)
	}
	if _, ok := tc.mutation.ExpiredTime(); !ok {
		v := task.DefaultExpiredTime()
		tc.mutation.SetExpiredTime(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.CreateBy(); !ok {
		v := task.DefaultCreateBy
		tc.mutation.SetCreateBy(v)
	}
	if _, ok := tc.mutation.UpdateBy(); !ok {
		v := task.DefaultUpdateBy
		tc.mutation.SetUpdateBy(v)
	}
	if _, ok := tc.mutation.TenantId(); !ok {
		v := task.DefaultTenantId
		tc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.EffectTime(); !ok {
		return &ValidationError{Name: "effectTime", err: errors.New(`ent: missing required field "Task.effectTime"`)}
	}
	if _, ok := tc.mutation.ExpiredTime(); !ok {
		return &ValidationError{Name: "expiredTime", err: errors.New(`ent: missing required field "Task.expiredTime"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Task.createdAt"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Task.updatedAt"`)}
	}
	if _, ok := tc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "Task.createBy"`)}
	}
	if _, ok := tc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "Task.updateBy"`)}
	}
	if _, ok := tc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "Task.tenantId"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: task.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: task.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.TaskName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTaskName,
		})
		_node.TaskName = value
	}
	if value, ok := tc.mutation.TaskGroup(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTaskGroup,
		})
		_node.TaskGroup = value
	}
	if value, ok := tc.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := tc.mutation.Topic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTopic,
		})
		_node.Topic = value
	}
	if value, ok := tc.mutation.Function(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldFunction,
		})
		_node.Function = value
	}
	if value, ok := tc.mutation.TaskCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTaskCode,
		})
		_node.TaskCode = value
	}
	if value, ok := tc.mutation.PreTask(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldPreTask,
		})
		_node.PreTask = value
	}
	if value, ok := tc.mutation.NovelId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldNovelId,
		})
		_node.NovelId = value
	}
	if value, ok := tc.mutation.CycleType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCycleType,
		})
		_node.CycleType = value
	}
	if value, ok := tc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := tc.mutation.Reward(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldReward,
		})
		_node.Reward = value
	}
	if value, ok := tc.mutation.AmountItem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldAmountItem,
		})
		_node.AmountItem = value
	}
	if value, ok := tc.mutation.RewardItem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldRewardItem,
		})
		_node.RewardItem = value
	}
	if value, ok := tc.mutation.TargetNames(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTargetNames,
		})
		_node.TargetNames = value
	}
	if value, ok := tc.mutation.TargetAmounts(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTargetAmounts,
		})
		_node.TargetAmounts = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: task.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := tc.mutation.SortNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldSortNum,
		})
		_node.SortNum = value
	}
	if value, ok := tc.mutation.ActionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldActionType,
		})
		_node.ActionType = value
	}
	if value, ok := tc.mutation.EffectTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldEffectTime,
		})
		_node.EffectTime = value
	}
	if value, ok := tc.mutation.ExpiredTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldExpiredTime,
		})
		_node.ExpiredTime = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := tc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := tc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
