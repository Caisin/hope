// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ClientErrorHTTPServer interface {
	BatchDeleteClientError(context.Context, *ClientErrorBatchDeleteReq) (*ClientErrorDeleteReply, error)
	CreateClientError(context.Context, *ClientErrorCreateReq) (*ClientErrorCreateReply, error)
	DeleteClientError(context.Context, *ClientErrorDeleteReq) (*ClientErrorDeleteReply, error)
	GetClientError(context.Context, *ClientErrorReq) (*ClientErrorReply, error)
	GetPageClientError(context.Context, *ClientErrorPageReq) (*ClientErrorPageReply, error)
	UpdateClientError(context.Context, *ClientErrorUpdateReq) (*ClientErrorUpdateReply, error)
}

func RegisterClientErrorHTTPServer(s *http.Server, srv ClientErrorHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/client/error/page", _ClientError_GetPageClientError0_HTTP_Handler(srv))
	r.GET("/v1/client/error/{id}", _ClientError_GetClientError0_HTTP_Handler(srv))
	r.PUT("/v1/client/error/{id}", _ClientError_UpdateClientError0_HTTP_Handler(srv))
	r.POST("/v1/client/error", _ClientError_CreateClientError0_HTTP_Handler(srv))
	r.DELETE("/v1/client/error/{id}", _ClientError_DeleteClientError0_HTTP_Handler(srv))
	r.DELETE("/v1/client/error", _ClientError_BatchDeleteClientError0_HTTP_Handler(srv))
}

func _ClientError_GetPageClientError0_HTTP_Handler(srv ClientErrorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClientErrorPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/clienterror.v1.ClientError/GetPageClientError")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageClientError(ctx, req.(*ClientErrorPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClientErrorPageReply)
		return ctx.Result(200, reply)
	}
}

func _ClientError_GetClientError0_HTTP_Handler(srv ClientErrorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClientErrorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/clienterror.v1.ClientError/GetClientError")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClientError(ctx, req.(*ClientErrorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClientErrorReply)
		return ctx.Result(200, reply)
	}
}

func _ClientError_UpdateClientError0_HTTP_Handler(srv ClientErrorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClientErrorUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/clienterror.v1.ClientError/UpdateClientError")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateClientError(ctx, req.(*ClientErrorUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClientErrorUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _ClientError_CreateClientError0_HTTP_Handler(srv ClientErrorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClientErrorCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/clienterror.v1.ClientError/CreateClientError")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateClientError(ctx, req.(*ClientErrorCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClientErrorCreateReply)
		return ctx.Result(200, reply)
	}
}

func _ClientError_DeleteClientError0_HTTP_Handler(srv ClientErrorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClientErrorDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/clienterror.v1.ClientError/DeleteClientError")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteClientError(ctx, req.(*ClientErrorDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClientErrorDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _ClientError_BatchDeleteClientError0_HTTP_Handler(srv ClientErrorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClientErrorBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/clienterror.v1.ClientError/BatchDeleteClientError")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteClientError(ctx, req.(*ClientErrorBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClientErrorDeleteReply)
		return ctx.Result(200, reply)
	}
}

type ClientErrorHTTPClient interface {
	BatchDeleteClientError(ctx context.Context, req *ClientErrorBatchDeleteReq, opts ...http.CallOption) (rsp *ClientErrorDeleteReply, err error)
	CreateClientError(ctx context.Context, req *ClientErrorCreateReq, opts ...http.CallOption) (rsp *ClientErrorCreateReply, err error)
	DeleteClientError(ctx context.Context, req *ClientErrorDeleteReq, opts ...http.CallOption) (rsp *ClientErrorDeleteReply, err error)
	GetClientError(ctx context.Context, req *ClientErrorReq, opts ...http.CallOption) (rsp *ClientErrorReply, err error)
	GetPageClientError(ctx context.Context, req *ClientErrorPageReq, opts ...http.CallOption) (rsp *ClientErrorPageReply, err error)
	UpdateClientError(ctx context.Context, req *ClientErrorUpdateReq, opts ...http.CallOption) (rsp *ClientErrorUpdateReply, err error)
}

type ClientErrorHTTPClientImpl struct {
	cc *http.Client
}

func NewClientErrorHTTPClient(client *http.Client) ClientErrorHTTPClient {
	return &ClientErrorHTTPClientImpl{client}
}

func (c *ClientErrorHTTPClientImpl) BatchDeleteClientError(ctx context.Context, in *ClientErrorBatchDeleteReq, opts ...http.CallOption) (*ClientErrorDeleteReply, error) {
	var out ClientErrorDeleteReply
	pattern := "/v1/client/error"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/clienterror.v1.ClientError/BatchDeleteClientError"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientErrorHTTPClientImpl) CreateClientError(ctx context.Context, in *ClientErrorCreateReq, opts ...http.CallOption) (*ClientErrorCreateReply, error) {
	var out ClientErrorCreateReply
	pattern := "/v1/client/error"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/clienterror.v1.ClientError/CreateClientError"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientErrorHTTPClientImpl) DeleteClientError(ctx context.Context, in *ClientErrorDeleteReq, opts ...http.CallOption) (*ClientErrorDeleteReply, error) {
	var out ClientErrorDeleteReply
	pattern := "/v1/client/error/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/clienterror.v1.ClientError/DeleteClientError"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientErrorHTTPClientImpl) GetClientError(ctx context.Context, in *ClientErrorReq, opts ...http.CallOption) (*ClientErrorReply, error) {
	var out ClientErrorReply
	pattern := "/v1/client/error/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/clienterror.v1.ClientError/GetClientError"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientErrorHTTPClientImpl) GetPageClientError(ctx context.Context, in *ClientErrorPageReq, opts ...http.CallOption) (*ClientErrorPageReply, error) {
	var out ClientErrorPageReply
	pattern := "/v1/client/error/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/clienterror.v1.ClientError/GetPageClientError"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientErrorHTTPClientImpl) UpdateClientError(ctx context.Context, in *ClientErrorUpdateReq, opts ...http.CallOption) (*ClientErrorUpdateReply, error) {
	var out ClientErrorUpdateReply
	pattern := "/v1/client/error/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/clienterror.v1.ClientError/UpdateClientError"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
