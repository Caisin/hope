// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/novelchapter/v1/novel_chapter.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type NovelChapterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,2,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//章节序号
	OrderNum int32 `protobuf:"varint,3,opt,name=orderNum,proto3" json:"orderNum,omitempty"`
	//章节名称
	ChapterName string `protobuf:"bytes,4,opt,name=chapterName,proto3" json:"chapterName,omitempty"`
	//章节内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,6,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
	//音频时长
	Duration string `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	//发布时间
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=publishTime,proto3" json:"publishTime,omitempty"`
	//状态：0 草稿 ，1 发布
	Status int32 `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	//0
	IsFree bool `protobuf:"varint,10,opt,name=isFree,proto3" json:"isFree,omitempty"`
	//价格
	Price int64 `protobuf:"varint,11,opt,name=price,proto3" json:"price,omitempty"`
	//章节字数
	WordNum int32 `protobuf:"varint,12,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,16,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,17,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,18,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelChapterData) Reset() {
	*x = NovelChapterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterData) ProtoMessage() {}

func (x *NovelChapterData) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterData.ProtoReflect.Descriptor instead.
func (*NovelChapterData) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{0}
}

func (x *NovelChapterData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelChapterData) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelChapterData) GetOrderNum() int32 {
	if x != nil {
		return x.OrderNum
	}
	return 0
}

func (x *NovelChapterData) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *NovelChapterData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NovelChapterData) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

func (x *NovelChapterData) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *NovelChapterData) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *NovelChapterData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NovelChapterData) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *NovelChapterData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelChapterData) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelChapterData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelChapterData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelChapterData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelChapterData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelChapterData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelChapterData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type NovelChapterPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *NovelChapterReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *NovelChapterPageReq) Reset() {
	*x = NovelChapterPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterPageReq) ProtoMessage() {}

func (x *NovelChapterPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterPageReq.ProtoReflect.Descriptor instead.
func (*NovelChapterPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{1}
}

func (x *NovelChapterPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *NovelChapterPageReq) GetParam() *NovelChapterReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type NovelChapterPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*NovelChapterData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NovelChapterPageReply) Reset() {
	*x = NovelChapterPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterPageReply) ProtoMessage() {}

func (x *NovelChapterPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterPageReply.ProtoReflect.Descriptor instead.
func (*NovelChapterPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{2}
}

func (x *NovelChapterPageReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelChapterPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelChapterPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NovelChapterPageReply) GetItems() []*NovelChapterData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type NovelChapterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,2,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//章节序号
	OrderNum int32 `protobuf:"varint,3,opt,name=orderNum,proto3" json:"orderNum,omitempty"`
	//章节名称
	ChapterName string `protobuf:"bytes,4,opt,name=chapterName,proto3" json:"chapterName,omitempty"`
	//章节内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,6,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
	//音频时长
	Duration string `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	//发布时间
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=publishTime,proto3" json:"publishTime,omitempty"`
	//状态：0 草稿 ，1 发布
	Status int32 `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	//0
	IsFree bool `protobuf:"varint,10,opt,name=isFree,proto3" json:"isFree,omitempty"`
	//价格
	Price int64 `protobuf:"varint,11,opt,name=price,proto3" json:"price,omitempty"`
	//章节字数
	WordNum int32 `protobuf:"varint,12,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,16,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,17,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,18,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelChapterReq) Reset() {
	*x = NovelChapterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterReq) ProtoMessage() {}

func (x *NovelChapterReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterReq.ProtoReflect.Descriptor instead.
func (*NovelChapterReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{3}
}

func (x *NovelChapterReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelChapterReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelChapterReq) GetOrderNum() int32 {
	if x != nil {
		return x.OrderNum
	}
	return 0
}

func (x *NovelChapterReq) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *NovelChapterReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NovelChapterReq) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

func (x *NovelChapterReq) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *NovelChapterReq) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *NovelChapterReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NovelChapterReq) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *NovelChapterReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelChapterReq) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelChapterReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelChapterReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelChapterReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelChapterReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelChapterReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelChapterReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type NovelChapterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelChapterData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelChapterReply) Reset() {
	*x = NovelChapterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterReply) ProtoMessage() {}

func (x *NovelChapterReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterReply.ProtoReflect.Descriptor instead.
func (*NovelChapterReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{4}
}

func (x *NovelChapterReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelChapterReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelChapterReply) GetResult() *NovelChapterData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建NovelChapter请求
type NovelChapterCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//小说编号
	NovelId int64 `protobuf:"varint,1,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//章节序号
	OrderNum int32 `protobuf:"varint,2,opt,name=orderNum,proto3" json:"orderNum,omitempty"`
	//章节名称
	ChapterName string `protobuf:"bytes,3,opt,name=chapterName,proto3" json:"chapterName,omitempty"`
	//章节内容
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,5,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
	//音频时长
	Duration string `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	//发布时间
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=publishTime,proto3" json:"publishTime,omitempty"`
	//状态：0 草稿 ，1 发布
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	//0
	IsFree bool `protobuf:"varint,9,opt,name=isFree,proto3" json:"isFree,omitempty"`
	//价格
	Price int64 `protobuf:"varint,10,opt,name=price,proto3" json:"price,omitempty"`
	//章节字数
	WordNum int32 `protobuf:"varint,11,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//备注
	Remark string `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelChapterCreateReq) Reset() {
	*x = NovelChapterCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterCreateReq) ProtoMessage() {}

func (x *NovelChapterCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterCreateReq.ProtoReflect.Descriptor instead.
func (*NovelChapterCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{5}
}

func (x *NovelChapterCreateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelChapterCreateReq) GetOrderNum() int32 {
	if x != nil {
		return x.OrderNum
	}
	return 0
}

func (x *NovelChapterCreateReq) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *NovelChapterCreateReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NovelChapterCreateReq) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

func (x *NovelChapterCreateReq) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *NovelChapterCreateReq) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *NovelChapterCreateReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NovelChapterCreateReq) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *NovelChapterCreateReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelChapterCreateReq) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelChapterCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 创建NovelChapter返回
type NovelChapterCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelChapterData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelChapterCreateReply) Reset() {
	*x = NovelChapterCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterCreateReply) ProtoMessage() {}

func (x *NovelChapterCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterCreateReply.ProtoReflect.Descriptor instead.
func (*NovelChapterCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{6}
}

func (x *NovelChapterCreateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelChapterCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelChapterCreateReply) GetResult() *NovelChapterData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新NovelChapter请求
type NovelChapterUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,2,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//章节序号
	OrderNum int32 `protobuf:"varint,3,opt,name=orderNum,proto3" json:"orderNum,omitempty"`
	//章节名称
	ChapterName string `protobuf:"bytes,4,opt,name=chapterName,proto3" json:"chapterName,omitempty"`
	//章节内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	//阿里云音频目录
	MediaKey string `protobuf:"bytes,6,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
	//音频时长
	Duration string `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	//发布时间
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=publishTime,proto3" json:"publishTime,omitempty"`
	//状态：0 草稿 ，1 发布
	Status int32 `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	//0
	IsFree bool `protobuf:"varint,10,opt,name=isFree,proto3" json:"isFree,omitempty"`
	//价格
	Price int64 `protobuf:"varint,11,opt,name=price,proto3" json:"price,omitempty"`
	//章节字数
	WordNum int32 `protobuf:"varint,12,opt,name=wordNum,proto3" json:"wordNum,omitempty"`
	//备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelChapterUpdateReq) Reset() {
	*x = NovelChapterUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterUpdateReq) ProtoMessage() {}

func (x *NovelChapterUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterUpdateReq.ProtoReflect.Descriptor instead.
func (*NovelChapterUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{7}
}

func (x *NovelChapterUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelChapterUpdateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelChapterUpdateReq) GetOrderNum() int32 {
	if x != nil {
		return x.OrderNum
	}
	return 0
}

func (x *NovelChapterUpdateReq) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *NovelChapterUpdateReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NovelChapterUpdateReq) GetMediaKey() string {
	if x != nil {
		return x.MediaKey
	}
	return ""
}

func (x *NovelChapterUpdateReq) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *NovelChapterUpdateReq) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *NovelChapterUpdateReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *NovelChapterUpdateReq) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *NovelChapterUpdateReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NovelChapterUpdateReq) GetWordNum() int32 {
	if x != nil {
		return x.WordNum
	}
	return 0
}

func (x *NovelChapterUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 更新NovelChapter返回
type NovelChapterUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *NovelChapterData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelChapterUpdateReply) Reset() {
	*x = NovelChapterUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterUpdateReply) ProtoMessage() {}

func (x *NovelChapterUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterUpdateReply.ProtoReflect.Descriptor instead.
func (*NovelChapterUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{8}
}

func (x *NovelChapterUpdateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelChapterUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelChapterUpdateReply) GetResult() *NovelChapterData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除NovelChapter请求
type NovelChapterDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NovelChapterDeleteReq) Reset() {
	*x = NovelChapterDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterDeleteReq) ProtoMessage() {}

func (x *NovelChapterDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelChapterDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{9}
}

func (x *NovelChapterDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除NovelChapter请求
type NovelChapterBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *NovelChapterBatchDeleteReq) Reset() {
	*x = NovelChapterBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterBatchDeleteReq) ProtoMessage() {}

func (x *NovelChapterBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelChapterBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{10}
}

func (x *NovelChapterBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除NovelChapter返回
type NovelChapterDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelChapterDeleteReply) Reset() {
	*x = NovelChapterDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelChapterDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelChapterDeleteReply) ProtoMessage() {}

func (x *NovelChapterDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelChapterDeleteReply.ProtoReflect.Descriptor instead.
func (*NovelChapterDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP(), []int{11}
}

func (x *NovelChapterDeleteReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NovelChapterDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NovelChapterDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_novelchapter_v1_novel_chapter_proto protoreflect.FileDescriptor

var file_api_novel_novelchapter_v1_novel_chapter_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca,
	0x04, 0x0a, 0x10, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x13, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc9, 0x04, 0x0a, 0x0f, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77,
	0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x11, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xf7, 0x02, 0x0a, 0x15, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77,
	0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x82,
	0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x87, 0x03, 0x0a, 0x15, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x6f,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x82, 0x01,
	0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x27, 0x0a, 0x15, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1a, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x17, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xb7, 0x06, 0x0a,
	0x0c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x83, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x77, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12,
	0x86, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x23, 0x5a, 0x21, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescOnce sync.Once
	file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescData = file_api_novel_novelchapter_v1_novel_chapter_proto_rawDesc
)

func file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescGZIP() []byte {
	file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescOnce.Do(func() {
		file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescData)
	})
	return file_api_novel_novelchapter_v1_novel_chapter_proto_rawDescData
}

var file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_novel_novelchapter_v1_novel_chapter_proto_goTypes = []interface{}{
	(*NovelChapterData)(nil),           // 0: novelchapter.v1.NovelChapterData
	(*NovelChapterPageReq)(nil),        // 1: novelchapter.v1.NovelChapterPageReq
	(*NovelChapterPageReply)(nil),      // 2: novelchapter.v1.NovelChapterPageReply
	(*NovelChapterReq)(nil),            // 3: novelchapter.v1.NovelChapterReq
	(*NovelChapterReply)(nil),          // 4: novelchapter.v1.NovelChapterReply
	(*NovelChapterCreateReq)(nil),      // 5: novelchapter.v1.NovelChapterCreateReq
	(*NovelChapterCreateReply)(nil),    // 6: novelchapter.v1.NovelChapterCreateReply
	(*NovelChapterUpdateReq)(nil),      // 7: novelchapter.v1.NovelChapterUpdateReq
	(*NovelChapterUpdateReply)(nil),    // 8: novelchapter.v1.NovelChapterUpdateReply
	(*NovelChapterDeleteReq)(nil),      // 9: novelchapter.v1.NovelChapterDeleteReq
	(*NovelChapterBatchDeleteReq)(nil), // 10: novelchapter.v1.NovelChapterBatchDeleteReq
	(*NovelChapterDeleteReply)(nil),    // 11: novelchapter.v1.NovelChapterDeleteReply
	(*timestamppb.Timestamp)(nil),      // 12: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),           // 13: pagin.Pagination
}
var file_api_novel_novelchapter_v1_novel_chapter_proto_depIdxs = []int32{
	12, // 0: novelchapter.v1.NovelChapterData.publishTime:type_name -> google.protobuf.Timestamp
	12, // 1: novelchapter.v1.NovelChapterData.createdAt:type_name -> google.protobuf.Timestamp
	12, // 2: novelchapter.v1.NovelChapterData.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 3: novelchapter.v1.NovelChapterPageReq.pagin:type_name -> pagin.Pagination
	3,  // 4: novelchapter.v1.NovelChapterPageReq.param:type_name -> novelchapter.v1.NovelChapterReq
	0,  // 5: novelchapter.v1.NovelChapterPageReply.items:type_name -> novelchapter.v1.NovelChapterData
	12, // 6: novelchapter.v1.NovelChapterReq.publishTime:type_name -> google.protobuf.Timestamp
	12, // 7: novelchapter.v1.NovelChapterReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 8: novelchapter.v1.NovelChapterReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 9: novelchapter.v1.NovelChapterReply.result:type_name -> novelchapter.v1.NovelChapterData
	12, // 10: novelchapter.v1.NovelChapterCreateReq.publishTime:type_name -> google.protobuf.Timestamp
	0,  // 11: novelchapter.v1.NovelChapterCreateReply.result:type_name -> novelchapter.v1.NovelChapterData
	12, // 12: novelchapter.v1.NovelChapterUpdateReq.publishTime:type_name -> google.protobuf.Timestamp
	0,  // 13: novelchapter.v1.NovelChapterUpdateReply.result:type_name -> novelchapter.v1.NovelChapterData
	1,  // 14: novelchapter.v1.NovelChapter.GetPageNovelChapter:input_type -> novelchapter.v1.NovelChapterPageReq
	3,  // 15: novelchapter.v1.NovelChapter.GetNovelChapter:input_type -> novelchapter.v1.NovelChapterReq
	7,  // 16: novelchapter.v1.NovelChapter.UpdateNovelChapter:input_type -> novelchapter.v1.NovelChapterUpdateReq
	5,  // 17: novelchapter.v1.NovelChapter.CreateNovelChapter:input_type -> novelchapter.v1.NovelChapterCreateReq
	9,  // 18: novelchapter.v1.NovelChapter.DeleteNovelChapter:input_type -> novelchapter.v1.NovelChapterDeleteReq
	10, // 19: novelchapter.v1.NovelChapter.BatchDeleteNovelChapter:input_type -> novelchapter.v1.NovelChapterBatchDeleteReq
	2,  // 20: novelchapter.v1.NovelChapter.GetPageNovelChapter:output_type -> novelchapter.v1.NovelChapterPageReply
	4,  // 21: novelchapter.v1.NovelChapter.GetNovelChapter:output_type -> novelchapter.v1.NovelChapterReply
	8,  // 22: novelchapter.v1.NovelChapter.UpdateNovelChapter:output_type -> novelchapter.v1.NovelChapterUpdateReply
	6,  // 23: novelchapter.v1.NovelChapter.CreateNovelChapter:output_type -> novelchapter.v1.NovelChapterCreateReply
	11, // 24: novelchapter.v1.NovelChapter.DeleteNovelChapter:output_type -> novelchapter.v1.NovelChapterDeleteReply
	11, // 25: novelchapter.v1.NovelChapter.BatchDeleteNovelChapter:output_type -> novelchapter.v1.NovelChapterDeleteReply
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_novel_novelchapter_v1_novel_chapter_proto_init() }
func file_api_novel_novelchapter_v1_novel_chapter_proto_init() {
	if File_api_novel_novelchapter_v1_novel_chapter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelChapterDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_novelchapter_v1_novel_chapter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_novelchapter_v1_novel_chapter_proto_goTypes,
		DependencyIndexes: file_api_novel_novelchapter_v1_novel_chapter_proto_depIdxs,
		MessageInfos:      file_api_novel_novelchapter_v1_novel_chapter_proto_msgTypes,
	}.Build()
	File_api_novel_novelchapter_v1_novel_chapter_proto = out.File
	file_api_novel_novelchapter_v1_novel_chapter_proto_rawDesc = nil
	file_api_novel_novelchapter_v1_novel_chapter_proto_goTypes = nil
	file_api_novel_novelchapter_v1_novel_chapter_proto_depIdxs = nil
}
