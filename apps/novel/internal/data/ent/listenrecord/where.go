// Code generated by entc, DO NOT EDIT.

package listenrecord

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// ChapterId applies equality check predicate on the "chapterId" field. It's identical to ChapterIdEQ.
func ChapterId(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterId), v))
	})
}

// NovelId applies equality check predicate on the "novelId" field. It's identical to NovelIdEQ.
func NovelId(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// ListenTimes applies equality check predicate on the "listenTimes" field. It's identical to ListenTimesEQ.
func ListenTimes(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListenTimes), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), vc))
	})
}

// AllDuration applies equality check predicate on the "allDuration" field. It's identical to AllDurationEQ.
func AllDuration(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllDuration), vc))
	})
}

// DayDuration applies equality check predicate on the "dayDuration" field. It's identical to DayDurationEQ.
func DayDuration(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayDuration), vc))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserId), v))
	})
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserId), v))
	})
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserId), v))
	})
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserId), v))
	})
}

// ChapterIdEQ applies the EQ predicate on the "chapterId" field.
func ChapterIdEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChapterId), v))
	})
}

// ChapterIdNEQ applies the NEQ predicate on the "chapterId" field.
func ChapterIdNEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChapterId), v))
	})
}

// ChapterIdIn applies the In predicate on the "chapterId" field.
func ChapterIdIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChapterId), v...))
	})
}

// ChapterIdNotIn applies the NotIn predicate on the "chapterId" field.
func ChapterIdNotIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChapterId), v...))
	})
}

// ChapterIdGT applies the GT predicate on the "chapterId" field.
func ChapterIdGT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChapterId), v))
	})
}

// ChapterIdGTE applies the GTE predicate on the "chapterId" field.
func ChapterIdGTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChapterId), v))
	})
}

// ChapterIdLT applies the LT predicate on the "chapterId" field.
func ChapterIdLT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChapterId), v))
	})
}

// ChapterIdLTE applies the LTE predicate on the "chapterId" field.
func ChapterIdLTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChapterId), v))
	})
}

// NovelIdEQ applies the EQ predicate on the "novelId" field.
func NovelIdEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNovelId), v))
	})
}

// NovelIdNEQ applies the NEQ predicate on the "novelId" field.
func NovelIdNEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNovelId), v))
	})
}

// NovelIdIn applies the In predicate on the "novelId" field.
func NovelIdIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNovelId), v...))
	})
}

// NovelIdNotIn applies the NotIn predicate on the "novelId" field.
func NovelIdNotIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNovelId), v...))
	})
}

// NovelIdGT applies the GT predicate on the "novelId" field.
func NovelIdGT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNovelId), v))
	})
}

// NovelIdGTE applies the GTE predicate on the "novelId" field.
func NovelIdGTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNovelId), v))
	})
}

// NovelIdLT applies the LT predicate on the "novelId" field.
func NovelIdLT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNovelId), v))
	})
}

// NovelIdLTE applies the LTE predicate on the "novelId" field.
func NovelIdLTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNovelId), v))
	})
}

// NovelIdIsNil applies the IsNil predicate on the "novelId" field.
func NovelIdIsNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNovelId)))
	})
}

// NovelIdNotNil applies the NotNil predicate on the "novelId" field.
func NovelIdNotNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNovelId)))
	})
}

// ListenTimesEQ applies the EQ predicate on the "listenTimes" field.
func ListenTimesEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListenTimes), v))
	})
}

// ListenTimesNEQ applies the NEQ predicate on the "listenTimes" field.
func ListenTimesNEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldListenTimes), v))
	})
}

// ListenTimesIn applies the In predicate on the "listenTimes" field.
func ListenTimesIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldListenTimes), v...))
	})
}

// ListenTimesNotIn applies the NotIn predicate on the "listenTimes" field.
func ListenTimesNotIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldListenTimes), v...))
	})
}

// ListenTimesGT applies the GT predicate on the "listenTimes" field.
func ListenTimesGT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldListenTimes), v))
	})
}

// ListenTimesGTE applies the GTE predicate on the "listenTimes" field.
func ListenTimesGTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldListenTimes), v))
	})
}

// ListenTimesLT applies the LT predicate on the "listenTimes" field.
func ListenTimesLT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldListenTimes), v))
	})
}

// ListenTimesLTE applies the LTE predicate on the "listenTimes" field.
func ListenTimesLTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldListenTimes), v))
	})
}

// ListenTimesIsNil applies the IsNil predicate on the "listenTimes" field.
func ListenTimesIsNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldListenTimes)))
	})
}

// ListenTimesNotNil applies the NotNil predicate on the "listenTimes" field.
func ListenTimesNotNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldListenTimes)))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), vc))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), vc))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...time.Duration) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...time.Duration) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), vc))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), vc))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), vc))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), vc))
	})
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDuration)))
	})
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDuration)))
	})
}

// AllDurationEQ applies the EQ predicate on the "allDuration" field.
func AllDurationEQ(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllDuration), vc))
	})
}

// AllDurationNEQ applies the NEQ predicate on the "allDuration" field.
func AllDurationNEQ(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllDuration), vc))
	})
}

// AllDurationIn applies the In predicate on the "allDuration" field.
func AllDurationIn(vs ...time.Duration) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllDuration), v...))
	})
}

// AllDurationNotIn applies the NotIn predicate on the "allDuration" field.
func AllDurationNotIn(vs ...time.Duration) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllDuration), v...))
	})
}

// AllDurationGT applies the GT predicate on the "allDuration" field.
func AllDurationGT(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllDuration), vc))
	})
}

// AllDurationGTE applies the GTE predicate on the "allDuration" field.
func AllDurationGTE(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllDuration), vc))
	})
}

// AllDurationLT applies the LT predicate on the "allDuration" field.
func AllDurationLT(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllDuration), vc))
	})
}

// AllDurationLTE applies the LTE predicate on the "allDuration" field.
func AllDurationLTE(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllDuration), vc))
	})
}

// AllDurationIsNil applies the IsNil predicate on the "allDuration" field.
func AllDurationIsNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllDuration)))
	})
}

// AllDurationNotNil applies the NotNil predicate on the "allDuration" field.
func AllDurationNotNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllDuration)))
	})
}

// DayDurationEQ applies the EQ predicate on the "dayDuration" field.
func DayDurationEQ(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDayDuration), vc))
	})
}

// DayDurationNEQ applies the NEQ predicate on the "dayDuration" field.
func DayDurationNEQ(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDayDuration), vc))
	})
}

// DayDurationIn applies the In predicate on the "dayDuration" field.
func DayDurationIn(vs ...time.Duration) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDayDuration), v...))
	})
}

// DayDurationNotIn applies the NotIn predicate on the "dayDuration" field.
func DayDurationNotIn(vs ...time.Duration) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDayDuration), v...))
	})
}

// DayDurationGT applies the GT predicate on the "dayDuration" field.
func DayDurationGT(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDayDuration), vc))
	})
}

// DayDurationGTE applies the GTE predicate on the "dayDuration" field.
func DayDurationGTE(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDayDuration), vc))
	})
}

// DayDurationLT applies the LT predicate on the "dayDuration" field.
func DayDurationLT(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDayDuration), vc))
	})
}

// DayDurationLTE applies the LTE predicate on the "dayDuration" field.
func DayDurationLTE(v time.Duration) predicate.ListenRecord {
	vc := int64(v)
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDayDuration), vc))
	})
}

// DayDurationIsNil applies the IsNil predicate on the "dayDuration" field.
func DayDurationIsNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDayDuration)))
	})
}

// DayDurationNotNil applies the NotNil predicate on the "dayDuration" field.
func DayDurationNotNil() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDayDuration)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.ListenRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ListenRecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.SocialUser) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ListenRecord) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ListenRecord) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ListenRecord) predicate.ListenRecord {
	return predicate.ListenRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
