// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/param/qiniuconfig/v1/qiniu_config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QiniuConfigClient is the client API for QiniuConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QiniuConfigClient interface {
	// 分页查询QiniuConfig
	GetPageQiniuConfig(ctx context.Context, in *QiniuConfigPageReq, opts ...grpc.CallOption) (*QiniuConfigPageReply, error)
	// 获取QiniuConfig
	GetQiniuConfig(ctx context.Context, in *QiniuConfigReq, opts ...grpc.CallOption) (*QiniuConfigReply, error)
	// 更新QiniuConfig
	UpdateQiniuConfig(ctx context.Context, in *QiniuConfigUpdateReq, opts ...grpc.CallOption) (*QiniuConfigUpdateReply, error)
	// 创建QiniuConfig
	CreateQiniuConfig(ctx context.Context, in *QiniuConfigCreateReq, opts ...grpc.CallOption) (*QiniuConfigCreateReply, error)
	// 删除QiniuConfig
	DeleteQiniuConfig(ctx context.Context, in *QiniuConfigDeleteReq, opts ...grpc.CallOption) (*QiniuConfigDeleteReply, error)
	// 批量删除QiniuConfig
	BatchDeleteQiniuConfig(ctx context.Context, in *QiniuConfigBatchDeleteReq, opts ...grpc.CallOption) (*QiniuConfigDeleteReply, error)
}

type qiniuConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewQiniuConfigClient(cc grpc.ClientConnInterface) QiniuConfigClient {
	return &qiniuConfigClient{cc}
}

func (c *qiniuConfigClient) GetPageQiniuConfig(ctx context.Context, in *QiniuConfigPageReq, opts ...grpc.CallOption) (*QiniuConfigPageReply, error) {
	out := new(QiniuConfigPageReply)
	err := c.cc.Invoke(ctx, "/qiniuconfig.v1.QiniuConfig/GetPageQiniuConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qiniuConfigClient) GetQiniuConfig(ctx context.Context, in *QiniuConfigReq, opts ...grpc.CallOption) (*QiniuConfigReply, error) {
	out := new(QiniuConfigReply)
	err := c.cc.Invoke(ctx, "/qiniuconfig.v1.QiniuConfig/GetQiniuConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qiniuConfigClient) UpdateQiniuConfig(ctx context.Context, in *QiniuConfigUpdateReq, opts ...grpc.CallOption) (*QiniuConfigUpdateReply, error) {
	out := new(QiniuConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/qiniuconfig.v1.QiniuConfig/UpdateQiniuConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qiniuConfigClient) CreateQiniuConfig(ctx context.Context, in *QiniuConfigCreateReq, opts ...grpc.CallOption) (*QiniuConfigCreateReply, error) {
	out := new(QiniuConfigCreateReply)
	err := c.cc.Invoke(ctx, "/qiniuconfig.v1.QiniuConfig/CreateQiniuConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qiniuConfigClient) DeleteQiniuConfig(ctx context.Context, in *QiniuConfigDeleteReq, opts ...grpc.CallOption) (*QiniuConfigDeleteReply, error) {
	out := new(QiniuConfigDeleteReply)
	err := c.cc.Invoke(ctx, "/qiniuconfig.v1.QiniuConfig/DeleteQiniuConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qiniuConfigClient) BatchDeleteQiniuConfig(ctx context.Context, in *QiniuConfigBatchDeleteReq, opts ...grpc.CallOption) (*QiniuConfigDeleteReply, error) {
	out := new(QiniuConfigDeleteReply)
	err := c.cc.Invoke(ctx, "/qiniuconfig.v1.QiniuConfig/BatchDeleteQiniuConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QiniuConfigServer is the server API for QiniuConfig service.
// All implementations must embed UnimplementedQiniuConfigServer
// for forward compatibility
type QiniuConfigServer interface {
	// 分页查询QiniuConfig
	GetPageQiniuConfig(context.Context, *QiniuConfigPageReq) (*QiniuConfigPageReply, error)
	// 获取QiniuConfig
	GetQiniuConfig(context.Context, *QiniuConfigReq) (*QiniuConfigReply, error)
	// 更新QiniuConfig
	UpdateQiniuConfig(context.Context, *QiniuConfigUpdateReq) (*QiniuConfigUpdateReply, error)
	// 创建QiniuConfig
	CreateQiniuConfig(context.Context, *QiniuConfigCreateReq) (*QiniuConfigCreateReply, error)
	// 删除QiniuConfig
	DeleteQiniuConfig(context.Context, *QiniuConfigDeleteReq) (*QiniuConfigDeleteReply, error)
	// 批量删除QiniuConfig
	BatchDeleteQiniuConfig(context.Context, *QiniuConfigBatchDeleteReq) (*QiniuConfigDeleteReply, error)
	mustEmbedUnimplementedQiniuConfigServer()
}

// UnimplementedQiniuConfigServer must be embedded to have forward compatible implementations.
type UnimplementedQiniuConfigServer struct {
}

func (UnimplementedQiniuConfigServer) GetPageQiniuConfig(context.Context, *QiniuConfigPageReq) (*QiniuConfigPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageQiniuConfig not implemented")
}
func (UnimplementedQiniuConfigServer) GetQiniuConfig(context.Context, *QiniuConfigReq) (*QiniuConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQiniuConfig not implemented")
}
func (UnimplementedQiniuConfigServer) UpdateQiniuConfig(context.Context, *QiniuConfigUpdateReq) (*QiniuConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQiniuConfig not implemented")
}
func (UnimplementedQiniuConfigServer) CreateQiniuConfig(context.Context, *QiniuConfigCreateReq) (*QiniuConfigCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQiniuConfig not implemented")
}
func (UnimplementedQiniuConfigServer) DeleteQiniuConfig(context.Context, *QiniuConfigDeleteReq) (*QiniuConfigDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQiniuConfig not implemented")
}
func (UnimplementedQiniuConfigServer) BatchDeleteQiniuConfig(context.Context, *QiniuConfigBatchDeleteReq) (*QiniuConfigDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteQiniuConfig not implemented")
}
func (UnimplementedQiniuConfigServer) mustEmbedUnimplementedQiniuConfigServer() {}

// UnsafeQiniuConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QiniuConfigServer will
// result in compilation errors.
type UnsafeQiniuConfigServer interface {
	mustEmbedUnimplementedQiniuConfigServer()
}

func RegisterQiniuConfigServer(s grpc.ServiceRegistrar, srv QiniuConfigServer) {
	s.RegisterService(&QiniuConfig_ServiceDesc, srv)
}

func _QiniuConfig_GetPageQiniuConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QiniuConfigPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QiniuConfigServer).GetPageQiniuConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qiniuconfig.v1.QiniuConfig/GetPageQiniuConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QiniuConfigServer).GetPageQiniuConfig(ctx, req.(*QiniuConfigPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QiniuConfig_GetQiniuConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QiniuConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QiniuConfigServer).GetQiniuConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qiniuconfig.v1.QiniuConfig/GetQiniuConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QiniuConfigServer).GetQiniuConfig(ctx, req.(*QiniuConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QiniuConfig_UpdateQiniuConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QiniuConfigUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QiniuConfigServer).UpdateQiniuConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qiniuconfig.v1.QiniuConfig/UpdateQiniuConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QiniuConfigServer).UpdateQiniuConfig(ctx, req.(*QiniuConfigUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QiniuConfig_CreateQiniuConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QiniuConfigCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QiniuConfigServer).CreateQiniuConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qiniuconfig.v1.QiniuConfig/CreateQiniuConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QiniuConfigServer).CreateQiniuConfig(ctx, req.(*QiniuConfigCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QiniuConfig_DeleteQiniuConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QiniuConfigDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QiniuConfigServer).DeleteQiniuConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qiniuconfig.v1.QiniuConfig/DeleteQiniuConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QiniuConfigServer).DeleteQiniuConfig(ctx, req.(*QiniuConfigDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QiniuConfig_BatchDeleteQiniuConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QiniuConfigBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QiniuConfigServer).BatchDeleteQiniuConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qiniuconfig.v1.QiniuConfig/BatchDeleteQiniuConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QiniuConfigServer).BatchDeleteQiniuConfig(ctx, req.(*QiniuConfigBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QiniuConfig_ServiceDesc is the grpc.ServiceDesc for QiniuConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QiniuConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qiniuconfig.v1.QiniuConfig",
	HandlerType: (*QiniuConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageQiniuConfig",
			Handler:    _QiniuConfig_GetPageQiniuConfig_Handler,
		},
		{
			MethodName: "GetQiniuConfig",
			Handler:    _QiniuConfig_GetQiniuConfig_Handler,
		},
		{
			MethodName: "UpdateQiniuConfig",
			Handler:    _QiniuConfig_UpdateQiniuConfig_Handler,
		},
		{
			MethodName: "CreateQiniuConfig",
			Handler:    _QiniuConfig_CreateQiniuConfig_Handler,
		},
		{
			MethodName: "DeleteQiniuConfig",
			Handler:    _QiniuConfig_DeleteQiniuConfig_Handler,
		},
		{
			MethodName: "BatchDeleteQiniuConfig",
			Handler:    _QiniuConfig_BatchDeleteQiniuConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/param/qiniuconfig/v1/qiniu_config.proto",
}
