// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysUserHTTPServer interface {
	BatchDeleteSysUser(context.Context, *SysUserBatchDeleteReq) (*SysUserDeleteReply, error)
	CreateSysUser(context.Context, *SysUserCreateReq) (*SysUserCreateReply, error)
	DeleteSysUser(context.Context, *SysUserDeleteReq) (*SysUserDeleteReply, error)
	GetPageSysUser(context.Context, *SysUserPageReq) (*SysUserPageReply, error)
	GetSysUser(context.Context, *SysUserReq) (*SysUserReply, error)
	UpdateSysUser(context.Context, *SysUserUpdateReq) (*SysUserUpdateReply, error)
}

func RegisterSysUserHTTPServer(s *http.Server, srv SysUserHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sysuser/page", _SysUser_GetPageSysUser0_HTTP_Handler(srv))
	r.GET("/v1/sysuser/{id}", _SysUser_GetSysUser0_HTTP_Handler(srv))
	r.PUT("/v1/sysuser/{id}", _SysUser_UpdateSysUser0_HTTP_Handler(srv))
	r.POST("/v1/sysuser", _SysUser_CreateSysUser0_HTTP_Handler(srv))
	r.DELETE("/v1/sysuser/{id}", _SysUser_DeleteSysUser0_HTTP_Handler(srv))
	r.DELETE("/v1/sysuser", _SysUser_BatchDeleteSysUser0_HTTP_Handler(srv))
}

func _SysUser_GetPageSysUser0_HTTP_Handler(srv SysUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysuser.v1.SysUser/GetPageSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageSysUser(ctx, req.(*SysUserPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserPageReply)
		return ctx.Result(200, reply)
	}
}

func _SysUser_GetSysUser0_HTTP_Handler(srv SysUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysuser.v1.SysUser/GetSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysUser(ctx, req.(*SysUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserReply)
		return ctx.Result(200, reply)
	}
}

func _SysUser_UpdateSysUser0_HTTP_Handler(srv SysUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysuser.v1.SysUser/UpdateSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysUser(ctx, req.(*SysUserUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysUser_CreateSysUser0_HTTP_Handler(srv SysUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysuser.v1.SysUser/CreateSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysUser(ctx, req.(*SysUserCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysUser_DeleteSysUser0_HTTP_Handler(srv SysUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysuser.v1.SysUser/DeleteSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysUser(ctx, req.(*SysUserDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysUser_BatchDeleteSysUser0_HTTP_Handler(srv SysUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysuser.v1.SysUser/BatchDeleteSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysUser(ctx, req.(*SysUserBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysUserDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysUserHTTPClient interface {
	BatchDeleteSysUser(ctx context.Context, req *SysUserBatchDeleteReq, opts ...http.CallOption) (rsp *SysUserDeleteReply, err error)
	CreateSysUser(ctx context.Context, req *SysUserCreateReq, opts ...http.CallOption) (rsp *SysUserCreateReply, err error)
	DeleteSysUser(ctx context.Context, req *SysUserDeleteReq, opts ...http.CallOption) (rsp *SysUserDeleteReply, err error)
	GetPageSysUser(ctx context.Context, req *SysUserPageReq, opts ...http.CallOption) (rsp *SysUserPageReply, err error)
	GetSysUser(ctx context.Context, req *SysUserReq, opts ...http.CallOption) (rsp *SysUserReply, err error)
	UpdateSysUser(ctx context.Context, req *SysUserUpdateReq, opts ...http.CallOption) (rsp *SysUserUpdateReply, err error)
}

type SysUserHTTPClientImpl struct {
	cc *http.Client
}

func NewSysUserHTTPClient(client *http.Client) SysUserHTTPClient {
	return &SysUserHTTPClientImpl{client}
}

func (c *SysUserHTTPClientImpl) BatchDeleteSysUser(ctx context.Context, in *SysUserBatchDeleteReq, opts ...http.CallOption) (*SysUserDeleteReply, error) {
	var out SysUserDeleteReply
	pattern := "/v1/sysuser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysuser.v1.SysUser/BatchDeleteSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserHTTPClientImpl) CreateSysUser(ctx context.Context, in *SysUserCreateReq, opts ...http.CallOption) (*SysUserCreateReply, error) {
	var out SysUserCreateReply
	pattern := "/v1/sysuser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysuser.v1.SysUser/CreateSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserHTTPClientImpl) DeleteSysUser(ctx context.Context, in *SysUserDeleteReq, opts ...http.CallOption) (*SysUserDeleteReply, error) {
	var out SysUserDeleteReply
	pattern := "/v1/sysuser/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysuser.v1.SysUser/DeleteSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserHTTPClientImpl) GetPageSysUser(ctx context.Context, in *SysUserPageReq, opts ...http.CallOption) (*SysUserPageReply, error) {
	var out SysUserPageReply
	pattern := "/v1/sysuser/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysuser.v1.SysUser/GetPageSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserHTTPClientImpl) GetSysUser(ctx context.Context, in *SysUserReq, opts ...http.CallOption) (*SysUserReply, error) {
	var out SysUserReply
	pattern := "/v1/sysuser/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysuser.v1.SysUser/GetSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysUserHTTPClientImpl) UpdateSysUser(ctx context.Context, in *SysUserUpdateReq, opts ...http.CallOption) (*SysUserUpdateReply, error) {
	var out SysUserUpdateReply
	pattern := "/v1/sysuser/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysuser.v1.SysUser/UpdateSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
