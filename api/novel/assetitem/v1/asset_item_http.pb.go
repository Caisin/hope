// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AssetItemHTTPServer interface {
	BatchDeleteAssetItem(context.Context, *AssetItemBatchDeleteReq) (*AssetItemDeleteReply, error)
	CreateAssetItem(context.Context, *AssetItemCreateReq) (*AssetItemCreateReply, error)
	DeleteAssetItem(context.Context, *AssetItemDeleteReq) (*AssetItemDeleteReply, error)
	GetAssetItem(context.Context, *AssetItemReq) (*AssetItemReply, error)
	GetPageAssetItem(context.Context, *AssetItemPageReq) (*AssetItemPageReply, error)
	UpdateAssetItem(context.Context, *AssetItemUpdateReq) (*AssetItemUpdateReply, error)
}

func RegisterAssetItemHTTPServer(s *http.Server, srv AssetItemHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/assetitem/page", _AssetItem_GetPageAssetItem0_HTTP_Handler(srv))
	r.GET("/v1/assetitem/{id}", _AssetItem_GetAssetItem0_HTTP_Handler(srv))
	r.PUT("/v1/assetitem/{id}", _AssetItem_UpdateAssetItem0_HTTP_Handler(srv))
	r.POST("/v1/assetitem", _AssetItem_CreateAssetItem0_HTTP_Handler(srv))
	r.DELETE("/v1/assetitem/{id}", _AssetItem_DeleteAssetItem0_HTTP_Handler(srv))
	r.DELETE("/v1/assetitem", _AssetItem_BatchDeleteAssetItem0_HTTP_Handler(srv))
}

func _AssetItem_GetPageAssetItem0_HTTP_Handler(srv AssetItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssetItemPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/assetitem.v1.AssetItem/GetPageAssetItem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageAssetItem(ctx, req.(*AssetItemPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AssetItemPageReply)
		return ctx.Result(200, reply)
	}
}

func _AssetItem_GetAssetItem0_HTTP_Handler(srv AssetItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssetItemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/assetitem.v1.AssetItem/GetAssetItem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAssetItem(ctx, req.(*AssetItemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AssetItemReply)
		return ctx.Result(200, reply)
	}
}

func _AssetItem_UpdateAssetItem0_HTTP_Handler(srv AssetItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssetItemUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/assetitem.v1.AssetItem/UpdateAssetItem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAssetItem(ctx, req.(*AssetItemUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AssetItemUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _AssetItem_CreateAssetItem0_HTTP_Handler(srv AssetItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssetItemCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/assetitem.v1.AssetItem/CreateAssetItem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAssetItem(ctx, req.(*AssetItemCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AssetItemCreateReply)
		return ctx.Result(200, reply)
	}
}

func _AssetItem_DeleteAssetItem0_HTTP_Handler(srv AssetItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssetItemDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/assetitem.v1.AssetItem/DeleteAssetItem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAssetItem(ctx, req.(*AssetItemDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AssetItemDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _AssetItem_BatchDeleteAssetItem0_HTTP_Handler(srv AssetItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AssetItemBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/assetitem.v1.AssetItem/BatchDeleteAssetItem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteAssetItem(ctx, req.(*AssetItemBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AssetItemDeleteReply)
		return ctx.Result(200, reply)
	}
}

type AssetItemHTTPClient interface {
	BatchDeleteAssetItem(ctx context.Context, req *AssetItemBatchDeleteReq, opts ...http.CallOption) (rsp *AssetItemDeleteReply, err error)
	CreateAssetItem(ctx context.Context, req *AssetItemCreateReq, opts ...http.CallOption) (rsp *AssetItemCreateReply, err error)
	DeleteAssetItem(ctx context.Context, req *AssetItemDeleteReq, opts ...http.CallOption) (rsp *AssetItemDeleteReply, err error)
	GetAssetItem(ctx context.Context, req *AssetItemReq, opts ...http.CallOption) (rsp *AssetItemReply, err error)
	GetPageAssetItem(ctx context.Context, req *AssetItemPageReq, opts ...http.CallOption) (rsp *AssetItemPageReply, err error)
	UpdateAssetItem(ctx context.Context, req *AssetItemUpdateReq, opts ...http.CallOption) (rsp *AssetItemUpdateReply, err error)
}

type AssetItemHTTPClientImpl struct {
	cc *http.Client
}

func NewAssetItemHTTPClient(client *http.Client) AssetItemHTTPClient {
	return &AssetItemHTTPClientImpl{client}
}

func (c *AssetItemHTTPClientImpl) BatchDeleteAssetItem(ctx context.Context, in *AssetItemBatchDeleteReq, opts ...http.CallOption) (*AssetItemDeleteReply, error) {
	var out AssetItemDeleteReply
	pattern := "/v1/assetitem"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/assetitem.v1.AssetItem/BatchDeleteAssetItem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AssetItemHTTPClientImpl) CreateAssetItem(ctx context.Context, in *AssetItemCreateReq, opts ...http.CallOption) (*AssetItemCreateReply, error) {
	var out AssetItemCreateReply
	pattern := "/v1/assetitem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/assetitem.v1.AssetItem/CreateAssetItem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AssetItemHTTPClientImpl) DeleteAssetItem(ctx context.Context, in *AssetItemDeleteReq, opts ...http.CallOption) (*AssetItemDeleteReply, error) {
	var out AssetItemDeleteReply
	pattern := "/v1/assetitem/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/assetitem.v1.AssetItem/DeleteAssetItem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AssetItemHTTPClientImpl) GetAssetItem(ctx context.Context, in *AssetItemReq, opts ...http.CallOption) (*AssetItemReply, error) {
	var out AssetItemReply
	pattern := "/v1/assetitem/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/assetitem.v1.AssetItem/GetAssetItem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AssetItemHTTPClientImpl) GetPageAssetItem(ctx context.Context, in *AssetItemPageReq, opts ...http.CallOption) (*AssetItemPageReply, error) {
	var out AssetItemPageReply
	pattern := "/v1/assetitem/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/assetitem.v1.AssetItem/GetPageAssetItem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AssetItemHTTPClientImpl) UpdateAssetItem(ctx context.Context, in *AssetItemUpdateReq, opts ...http.CallOption) (*AssetItemUpdateReply, error) {
	var out AssetItemUpdateReply
	pattern := "/v1/assetitem/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/assetitem.v1.AssetItem/UpdateAssetItem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
