// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type VipUserHTTPServer interface {
	BatchDeleteVipUser(context.Context, *VipUserBatchDeleteReq) (*VipUserDeleteReply, error)
	CreateVipUser(context.Context, *VipUserCreateReq) (*VipUserCreateReply, error)
	DeleteVipUser(context.Context, *VipUserDeleteReq) (*VipUserDeleteReply, error)
	GetPageVipUser(context.Context, *VipUserPageReq) (*VipUserPageReply, error)
	GetVipUser(context.Context, *VipUserReq) (*VipUserReply, error)
	UpdateVipUser(context.Context, *VipUserUpdateReq) (*VipUserUpdateReply, error)
}

func RegisterVipUserHTTPServer(s *http.Server, srv VipUserHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/vipuser/page", _VipUser_GetPageVipUser0_HTTP_Handler(srv))
	r.GET("/v1/vipuser/{id}", _VipUser_GetVipUser0_HTTP_Handler(srv))
	r.PUT("/v1/vipuser/{id}", _VipUser_UpdateVipUser0_HTTP_Handler(srv))
	r.POST("/v1/vipuser", _VipUser_CreateVipUser0_HTTP_Handler(srv))
	r.DELETE("/v1/vipuser/{id}", _VipUser_DeleteVipUser0_HTTP_Handler(srv))
	r.DELETE("/v1/vipuser", _VipUser_BatchDeleteVipUser0_HTTP_Handler(srv))
}

func _VipUser_GetPageVipUser0_HTTP_Handler(srv VipUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipUserPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/vipuser.v1.VipUser/GetPageVipUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageVipUser(ctx, req.(*VipUserPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipUserPageReply)
		return ctx.Result(200, reply)
	}
}

func _VipUser_GetVipUser0_HTTP_Handler(srv VipUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/vipuser.v1.VipUser/GetVipUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVipUser(ctx, req.(*VipUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipUserReply)
		return ctx.Result(200, reply)
	}
}

func _VipUser_UpdateVipUser0_HTTP_Handler(srv VipUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipUserUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/vipuser.v1.VipUser/UpdateVipUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateVipUser(ctx, req.(*VipUserUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipUserUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _VipUser_CreateVipUser0_HTTP_Handler(srv VipUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipUserCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/vipuser.v1.VipUser/CreateVipUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateVipUser(ctx, req.(*VipUserCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipUserCreateReply)
		return ctx.Result(200, reply)
	}
}

func _VipUser_DeleteVipUser0_HTTP_Handler(srv VipUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipUserDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/vipuser.v1.VipUser/DeleteVipUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteVipUser(ctx, req.(*VipUserDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipUserDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _VipUser_BatchDeleteVipUser0_HTTP_Handler(srv VipUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VipUserBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/vipuser.v1.VipUser/BatchDeleteVipUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteVipUser(ctx, req.(*VipUserBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VipUserDeleteReply)
		return ctx.Result(200, reply)
	}
}

type VipUserHTTPClient interface {
	BatchDeleteVipUser(ctx context.Context, req *VipUserBatchDeleteReq, opts ...http.CallOption) (rsp *VipUserDeleteReply, err error)
	CreateVipUser(ctx context.Context, req *VipUserCreateReq, opts ...http.CallOption) (rsp *VipUserCreateReply, err error)
	DeleteVipUser(ctx context.Context, req *VipUserDeleteReq, opts ...http.CallOption) (rsp *VipUserDeleteReply, err error)
	GetPageVipUser(ctx context.Context, req *VipUserPageReq, opts ...http.CallOption) (rsp *VipUserPageReply, err error)
	GetVipUser(ctx context.Context, req *VipUserReq, opts ...http.CallOption) (rsp *VipUserReply, err error)
	UpdateVipUser(ctx context.Context, req *VipUserUpdateReq, opts ...http.CallOption) (rsp *VipUserUpdateReply, err error)
}

type VipUserHTTPClientImpl struct {
	cc *http.Client
}

func NewVipUserHTTPClient(client *http.Client) VipUserHTTPClient {
	return &VipUserHTTPClientImpl{client}
}

func (c *VipUserHTTPClientImpl) BatchDeleteVipUser(ctx context.Context, in *VipUserBatchDeleteReq, opts ...http.CallOption) (*VipUserDeleteReply, error) {
	var out VipUserDeleteReply
	pattern := "/v1/vipuser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/vipuser.v1.VipUser/BatchDeleteVipUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipUserHTTPClientImpl) CreateVipUser(ctx context.Context, in *VipUserCreateReq, opts ...http.CallOption) (*VipUserCreateReply, error) {
	var out VipUserCreateReply
	pattern := "/v1/vipuser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/vipuser.v1.VipUser/CreateVipUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipUserHTTPClientImpl) DeleteVipUser(ctx context.Context, in *VipUserDeleteReq, opts ...http.CallOption) (*VipUserDeleteReply, error) {
	var out VipUserDeleteReply
	pattern := "/v1/vipuser/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/vipuser.v1.VipUser/DeleteVipUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipUserHTTPClientImpl) GetPageVipUser(ctx context.Context, in *VipUserPageReq, opts ...http.CallOption) (*VipUserPageReply, error) {
	var out VipUserPageReply
	pattern := "/v1/vipuser/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/vipuser.v1.VipUser/GetPageVipUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipUserHTTPClientImpl) GetVipUser(ctx context.Context, in *VipUserReq, opts ...http.CallOption) (*VipUserReply, error) {
	var out VipUserReply
	pattern := "/v1/vipuser/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/vipuser.v1.VipUser/GetVipUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VipUserHTTPClientImpl) UpdateVipUser(ctx context.Context, in *VipUserUpdateReq, opts ...http.CallOption) (*VipUserUpdateReply, error) {
	var out VipUserUpdateReply
	pattern := "/v1/vipuser/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/vipuser.v1.VipUser/UpdateVipUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
