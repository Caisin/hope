// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/user_event.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/userevent/v1"
	"hope/apps/novel/internal/data/ent"
)

func UserEventUpdateReq2Data(v *v1.UserEventUpdateReq) *ent.UserEvent {
	if v == nil {
		return nil
	}
	return &ent.UserEvent{
		ID:        v.Id,
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
	}
}

func UserEventData2UpdateReq(v *ent.UserEvent) *v1.UserEventUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.UserEventUpdateReq{
		Id:        v.ID,
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
	}
}

func UserEventCreateReq2Data(v *v1.UserEventCreateReq) *ent.UserEvent {
	if v == nil {
		return nil
	}
	return &ent.UserEvent{
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
	}
}

func UserEventData2CreateReq(v *ent.UserEvent) *v1.UserEventCreateReq {
	if v == nil {
		return nil
	}
	return &v1.UserEventCreateReq{
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
	}
}

func UserEventReq2Data(v *v1.UserEventReq) *ent.UserEvent {
	if v == nil {
		return nil
	}
	return &ent.UserEvent{
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
	}
}

func UserEventData2Req(v *ent.UserEvent) *v1.UserEventReq {
	if v == nil {
		return nil
	}
	return &v1.UserEventReq{
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
	}
}

func UserEventReply2Data(v *v1.UserEventReply) *ent.UserEvent {
	if v == nil {
		return nil
	}
	return &ent.UserEvent{
		ID:        v.Id,
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
		Keyword:   v.Keyword,
		CreatedAt: v.CreatedAt.AsTime(),
		UpdatedAt: v.UpdatedAt.AsTime(),
		CreateBy:  v.CreateBy,
		UpdateBy:  v.UpdateBy,
		TenantId:  v.TenantId,
	}
}

func UserEventData2Reply(v *ent.UserEvent) *v1.UserEventReply {
	if v == nil {
		return nil
	}
	return &v1.UserEventReply{
		Id:        v.ID,
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
		Keyword:   v.Keyword,
		CreatedAt: timestamppb.New(v.CreatedAt),
		UpdatedAt: timestamppb.New(v.UpdatedAt),
		CreateBy:  v.CreateBy,
		UpdateBy:  v.UpdateBy,
		TenantId:  v.TenantId,
	}
}

func UserEventUpdateReply2Data(v *v1.UserEventUpdateReply) *ent.UserEvent {
	if v == nil {
		return nil
	}
	return &ent.UserEvent{
		ID:        v.Id,
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
	}
}

func UserEventData2UpdateReply(v *ent.UserEvent) *v1.UserEventUpdateReply {
	if v == nil {
		return nil
	}
	return &v1.UserEventUpdateReply{
		Id:        v.ID,
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
	}
}

func UserEventCreateReply2Data(v *v1.UserEventCreateReply) *ent.UserEvent {
	if v == nil {
		return nil
	}
	return &ent.UserEvent{
		ID:        v.Id,
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
		Keyword:   v.Keyword,
		CreatedAt: v.CreatedAt.AsTime(),
		UpdatedAt: v.UpdatedAt.AsTime(),
		CreateBy:  v.CreateBy,
		UpdateBy:  v.UpdateBy,
		TenantId:  v.TenantId,
	}
}

func UserEventData2CreateReply(v *ent.UserEvent) *v1.UserEventCreateReply {
	if v == nil {
		return nil
	}
	return &v1.UserEventCreateReply{
		Id:        v.ID,
		UserId:    v.UserId,
		EventType: v.EventType,
		NovelId:   v.NovelId,
		ChapterId: v.ChapterId,
		Coin:      v.Coin,
		Coupon:    v.Coupon,
		Money:     v.Money,
		Keyword:   v.Keyword,
		CreatedAt: timestamppb.New(v.CreatedAt),
		UpdatedAt: timestamppb.New(v.UpdatedAt),
		CreateBy:  v.CreateBy,
		UpdateBy:  v.UpdateBy,
		TenantId:  v.TenantId,
	}
}
