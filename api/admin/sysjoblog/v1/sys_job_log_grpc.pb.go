// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/sysjoblog/v1/sys_job_log.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysJobLogClient is the client API for SysJobLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysJobLogClient interface {
	// 分页查询SysJobLog
	GetSysJobLogPage(ctx context.Context, in *SysJobLogPageReq, opts ...grpc.CallOption) (*SysJobLogPageReply, error)
	// 获取SysJobLog
	GetSysJobLog(ctx context.Context, in *SysJobLogReq, opts ...grpc.CallOption) (*SysJobLogReply, error)
	// 更新SysJobLog
	UpdateSysJobLog(ctx context.Context, in *SysJobLogUpdateReq, opts ...grpc.CallOption) (*SysJobLogUpdateReply, error)
	// 创建SysJobLog
	CreateSysJobLog(ctx context.Context, in *SysJobLogCreateReq, opts ...grpc.CallOption) (*SysJobLogCreateReply, error)
	// 删除SysJobLog
	DeleteSysJobLog(ctx context.Context, in *SysJobLogDeleteReq, opts ...grpc.CallOption) (*SysJobLogDeleteReply, error)
	// 批量删除SysJobLog
	BatchDeleteSysJobLog(ctx context.Context, in *SysJobLogBatchDeleteReq, opts ...grpc.CallOption) (*SysJobLogDeleteReply, error)
}

type sysJobLogClient struct {
	cc grpc.ClientConnInterface
}

func NewSysJobLogClient(cc grpc.ClientConnInterface) SysJobLogClient {
	return &sysJobLogClient{cc}
}

func (c *sysJobLogClient) GetSysJobLogPage(ctx context.Context, in *SysJobLogPageReq, opts ...grpc.CallOption) (*SysJobLogPageReply, error) {
	out := new(SysJobLogPageReply)
	err := c.cc.Invoke(ctx, "/sysjoblog.v1.SysJobLog/GetSysJobLogPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobLogClient) GetSysJobLog(ctx context.Context, in *SysJobLogReq, opts ...grpc.CallOption) (*SysJobLogReply, error) {
	out := new(SysJobLogReply)
	err := c.cc.Invoke(ctx, "/sysjoblog.v1.SysJobLog/GetSysJobLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobLogClient) UpdateSysJobLog(ctx context.Context, in *SysJobLogUpdateReq, opts ...grpc.CallOption) (*SysJobLogUpdateReply, error) {
	out := new(SysJobLogUpdateReply)
	err := c.cc.Invoke(ctx, "/sysjoblog.v1.SysJobLog/UpdateSysJobLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobLogClient) CreateSysJobLog(ctx context.Context, in *SysJobLogCreateReq, opts ...grpc.CallOption) (*SysJobLogCreateReply, error) {
	out := new(SysJobLogCreateReply)
	err := c.cc.Invoke(ctx, "/sysjoblog.v1.SysJobLog/CreateSysJobLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobLogClient) DeleteSysJobLog(ctx context.Context, in *SysJobLogDeleteReq, opts ...grpc.CallOption) (*SysJobLogDeleteReply, error) {
	out := new(SysJobLogDeleteReply)
	err := c.cc.Invoke(ctx, "/sysjoblog.v1.SysJobLog/DeleteSysJobLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobLogClient) BatchDeleteSysJobLog(ctx context.Context, in *SysJobLogBatchDeleteReq, opts ...grpc.CallOption) (*SysJobLogDeleteReply, error) {
	out := new(SysJobLogDeleteReply)
	err := c.cc.Invoke(ctx, "/sysjoblog.v1.SysJobLog/BatchDeleteSysJobLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysJobLogServer is the server API for SysJobLog service.
// All implementations must embed UnimplementedSysJobLogServer
// for forward compatibility
type SysJobLogServer interface {
	// 分页查询SysJobLog
	GetSysJobLogPage(context.Context, *SysJobLogPageReq) (*SysJobLogPageReply, error)
	// 获取SysJobLog
	GetSysJobLog(context.Context, *SysJobLogReq) (*SysJobLogReply, error)
	// 更新SysJobLog
	UpdateSysJobLog(context.Context, *SysJobLogUpdateReq) (*SysJobLogUpdateReply, error)
	// 创建SysJobLog
	CreateSysJobLog(context.Context, *SysJobLogCreateReq) (*SysJobLogCreateReply, error)
	// 删除SysJobLog
	DeleteSysJobLog(context.Context, *SysJobLogDeleteReq) (*SysJobLogDeleteReply, error)
	// 批量删除SysJobLog
	BatchDeleteSysJobLog(context.Context, *SysJobLogBatchDeleteReq) (*SysJobLogDeleteReply, error)
	mustEmbedUnimplementedSysJobLogServer()
}

// UnimplementedSysJobLogServer must be embedded to have forward compatible implementations.
type UnimplementedSysJobLogServer struct {
}

func (UnimplementedSysJobLogServer) GetSysJobLogPage(context.Context, *SysJobLogPageReq) (*SysJobLogPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysJobLogPage not implemented")
}
func (UnimplementedSysJobLogServer) GetSysJobLog(context.Context, *SysJobLogReq) (*SysJobLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysJobLog not implemented")
}
func (UnimplementedSysJobLogServer) UpdateSysJobLog(context.Context, *SysJobLogUpdateReq) (*SysJobLogUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysJobLog not implemented")
}
func (UnimplementedSysJobLogServer) CreateSysJobLog(context.Context, *SysJobLogCreateReq) (*SysJobLogCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysJobLog not implemented")
}
func (UnimplementedSysJobLogServer) DeleteSysJobLog(context.Context, *SysJobLogDeleteReq) (*SysJobLogDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysJobLog not implemented")
}
func (UnimplementedSysJobLogServer) BatchDeleteSysJobLog(context.Context, *SysJobLogBatchDeleteReq) (*SysJobLogDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysJobLog not implemented")
}
func (UnimplementedSysJobLogServer) mustEmbedUnimplementedSysJobLogServer() {}

// UnsafeSysJobLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysJobLogServer will
// result in compilation errors.
type UnsafeSysJobLogServer interface {
	mustEmbedUnimplementedSysJobLogServer()
}

func RegisterSysJobLogServer(s grpc.ServiceRegistrar, srv SysJobLogServer) {
	s.RegisterService(&SysJobLog_ServiceDesc, srv)
}

func _SysJobLog_GetSysJobLogPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobLogPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobLogServer).GetSysJobLogPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjoblog.v1.SysJobLog/GetSysJobLogPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobLogServer).GetSysJobLogPage(ctx, req.(*SysJobLogPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJobLog_GetSysJobLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobLogServer).GetSysJobLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjoblog.v1.SysJobLog/GetSysJobLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobLogServer).GetSysJobLog(ctx, req.(*SysJobLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJobLog_UpdateSysJobLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobLogUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobLogServer).UpdateSysJobLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjoblog.v1.SysJobLog/UpdateSysJobLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobLogServer).UpdateSysJobLog(ctx, req.(*SysJobLogUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJobLog_CreateSysJobLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobLogCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobLogServer).CreateSysJobLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjoblog.v1.SysJobLog/CreateSysJobLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobLogServer).CreateSysJobLog(ctx, req.(*SysJobLogCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJobLog_DeleteSysJobLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobLogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobLogServer).DeleteSysJobLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjoblog.v1.SysJobLog/DeleteSysJobLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobLogServer).DeleteSysJobLog(ctx, req.(*SysJobLogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysJobLog_BatchDeleteSysJobLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysJobLogBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysJobLogServer).BatchDeleteSysJobLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysjoblog.v1.SysJobLog/BatchDeleteSysJobLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysJobLogServer).BatchDeleteSysJobLog(ctx, req.(*SysJobLogBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysJobLog_ServiceDesc is the grpc.ServiceDesc for SysJobLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysJobLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysjoblog.v1.SysJobLog",
	HandlerType: (*SysJobLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSysJobLogPage",
			Handler:    _SysJobLog_GetSysJobLogPage_Handler,
		},
		{
			MethodName: "GetSysJobLog",
			Handler:    _SysJobLog_GetSysJobLog_Handler,
		},
		{
			MethodName: "UpdateSysJobLog",
			Handler:    _SysJobLog_UpdateSysJobLog_Handler,
		},
		{
			MethodName: "CreateSysJobLog",
			Handler:    _SysJobLog_CreateSysJobLog_Handler,
		},
		{
			MethodName: "DeleteSysJobLog",
			Handler:    _SysJobLog_DeleteSysJobLog_Handler,
		},
		{
			MethodName: "BatchDeleteSysJobLog",
			Handler:    _SysJobLog_BatchDeleteSysJobLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/sysjoblog/v1/sys_job_log.proto",
}
