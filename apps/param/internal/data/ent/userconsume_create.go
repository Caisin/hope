// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/userconsume"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserConsumeCreate is the builder for creating a UserConsume entity.
type UserConsumeCreate struct {
	config
	mutation *UserConsumeMutation
	hooks    []Hook
}

// SetNovelId sets the "novelId" field.
func (ucc *UserConsumeCreate) SetNovelId(i int64) *UserConsumeCreate {
	ucc.mutation.SetNovelId(i)
	return ucc
}

// SetCoin sets the "coin" field.
func (ucc *UserConsumeCreate) SetCoin(i int64) *UserConsumeCreate {
	ucc.mutation.SetCoin(i)
	return ucc
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (ucc *UserConsumeCreate) SetNillableCoin(i *int64) *UserConsumeCreate {
	if i != nil {
		ucc.SetCoin(*i)
	}
	return ucc
}

// SetCoupon sets the "coupon" field.
func (ucc *UserConsumeCreate) SetCoupon(i int64) *UserConsumeCreate {
	ucc.mutation.SetCoupon(i)
	return ucc
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (ucc *UserConsumeCreate) SetNillableCoupon(i *int64) *UserConsumeCreate {
	if i != nil {
		ucc.SetCoupon(*i)
	}
	return ucc
}

// SetDiscount sets the "discount" field.
func (ucc *UserConsumeCreate) SetDiscount(i int64) *UserConsumeCreate {
	ucc.mutation.SetDiscount(i)
	return ucc
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (ucc *UserConsumeCreate) SetNillableDiscount(i *int64) *UserConsumeCreate {
	if i != nil {
		ucc.SetDiscount(*i)
	}
	return ucc
}

// SetRemark sets the "remark" field.
func (ucc *UserConsumeCreate) SetRemark(s string) *UserConsumeCreate {
	ucc.mutation.SetRemark(s)
	return ucc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ucc *UserConsumeCreate) SetNillableRemark(s *string) *UserConsumeCreate {
	if s != nil {
		ucc.SetRemark(*s)
	}
	return ucc
}

// SetCreatedAt sets the "createdAt" field.
func (ucc *UserConsumeCreate) SetCreatedAt(t time.Time) *UserConsumeCreate {
	ucc.mutation.SetCreatedAt(t)
	return ucc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ucc *UserConsumeCreate) SetNillableCreatedAt(t *time.Time) *UserConsumeCreate {
	if t != nil {
		ucc.SetCreatedAt(*t)
	}
	return ucc
}

// SetUpdatedAt sets the "updatedAt" field.
func (ucc *UserConsumeCreate) SetUpdatedAt(t time.Time) *UserConsumeCreate {
	ucc.mutation.SetUpdatedAt(t)
	return ucc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (ucc *UserConsumeCreate) SetNillableUpdatedAt(t *time.Time) *UserConsumeCreate {
	if t != nil {
		ucc.SetUpdatedAt(*t)
	}
	return ucc
}

// SetCreateBy sets the "createBy" field.
func (ucc *UserConsumeCreate) SetCreateBy(i int64) *UserConsumeCreate {
	ucc.mutation.SetCreateBy(i)
	return ucc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ucc *UserConsumeCreate) SetNillableCreateBy(i *int64) *UserConsumeCreate {
	if i != nil {
		ucc.SetCreateBy(*i)
	}
	return ucc
}

// SetUpdateBy sets the "updateBy" field.
func (ucc *UserConsumeCreate) SetUpdateBy(i int64) *UserConsumeCreate {
	ucc.mutation.SetUpdateBy(i)
	return ucc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ucc *UserConsumeCreate) SetNillableUpdateBy(i *int64) *UserConsumeCreate {
	if i != nil {
		ucc.SetUpdateBy(*i)
	}
	return ucc
}

// SetTenantId sets the "tenantId" field.
func (ucc *UserConsumeCreate) SetTenantId(i int64) *UserConsumeCreate {
	ucc.mutation.SetTenantId(i)
	return ucc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ucc *UserConsumeCreate) SetNillableTenantId(i *int64) *UserConsumeCreate {
	if i != nil {
		ucc.SetTenantId(*i)
	}
	return ucc
}

// Mutation returns the UserConsumeMutation object of the builder.
func (ucc *UserConsumeCreate) Mutation() *UserConsumeMutation {
	return ucc.mutation
}

// Save creates the UserConsume in the database.
func (ucc *UserConsumeCreate) Save(ctx context.Context) (*UserConsume, error) {
	var (
		err  error
		node *UserConsume
	)
	ucc.defaults()
	if len(ucc.hooks) == 0 {
		if err = ucc.check(); err != nil {
			return nil, err
		}
		node, err = ucc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserConsumeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucc.check(); err != nil {
				return nil, err
			}
			ucc.mutation = mutation
			if node, err = ucc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ucc.hooks) - 1; i >= 0; i-- {
			if ucc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserConsumeCreate) SaveX(ctx context.Context) *UserConsume {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserConsumeCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserConsumeCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucc *UserConsumeCreate) defaults() {
	if _, ok := ucc.mutation.CreatedAt(); !ok {
		v := userconsume.DefaultCreatedAt()
		ucc.mutation.SetCreatedAt(v)
	}
	if _, ok := ucc.mutation.UpdatedAt(); !ok {
		v := userconsume.DefaultUpdatedAt()
		ucc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ucc.mutation.CreateBy(); !ok {
		v := userconsume.DefaultCreateBy
		ucc.mutation.SetCreateBy(v)
	}
	if _, ok := ucc.mutation.UpdateBy(); !ok {
		v := userconsume.DefaultUpdateBy
		ucc.mutation.SetUpdateBy(v)
	}
	if _, ok := ucc.mutation.TenantId(); !ok {
		v := userconsume.DefaultTenantId
		ucc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserConsumeCreate) check() error {
	if _, ok := ucc.mutation.NovelId(); !ok {
		return &ValidationError{Name: "novelId", err: errors.New(`ent: missing required field "novelId"`)}
	}
	if _, ok := ucc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := ucc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := ucc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := ucc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := ucc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (ucc *UserConsumeCreate) sqlSave(ctx context.Context) (*UserConsume, error) {
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (ucc *UserConsumeCreate) createSpec() (*UserConsume, *sqlgraph.CreateSpec) {
	var (
		_node = &UserConsume{config: ucc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userconsume.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userconsume.FieldID,
			},
		}
	)
	if value, ok := ucc.mutation.NovelId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldNovelId,
		})
		_node.NovelId = value
	}
	if value, ok := ucc.mutation.Coin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoin,
		})
		_node.Coin = value
	}
	if value, ok := ucc.mutation.Coupon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCoupon,
		})
		_node.Coupon = value
	}
	if value, ok := ucc.mutation.Discount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldDiscount,
		})
		_node.Discount = value
	}
	if value, ok := ucc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userconsume.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ucc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userconsume.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ucc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userconsume.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ucc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := ucc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := ucc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userconsume.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// UserConsumeCreateBulk is the builder for creating many UserConsume entities in bulk.
type UserConsumeCreateBulk struct {
	config
	builders []*UserConsumeCreate
}

// Save creates the UserConsume entities in the database.
func (uccb *UserConsumeCreateBulk) Save(ctx context.Context) ([]*UserConsume, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserConsume, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserConsumeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserConsumeCreateBulk) SaveX(ctx context.Context) []*UserConsume {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserConsumeCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserConsumeCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}
