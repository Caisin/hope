// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/vipuser/v1/vip_user.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 实体数据
type VipUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//vip类型
	VipType int64 `protobuf:"varint,3,opt,name=vipType,proto3" json:"vipType,omitempty"`
	//svip类型
	SvipType int64 `protobuf:"varint,4,opt,name=svipType,proto3" json:"svipType,omitempty"`
	//超级VIP生效时间
	SvipEffectTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=svipEffectTime,proto3" json:"svipEffectTime,omitempty"`
	//超级VIP失效时间
	SvipExpiredTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=svipExpiredTime,proto3" json:"svipExpiredTime,omitempty"`
	//备注
	Remark string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,12,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,13,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,14,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *VipUserData) Reset() {
	*x = VipUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserData) ProtoMessage() {}

func (x *VipUserData) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserData.ProtoReflect.Descriptor instead.
func (*VipUserData) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{0}
}

func (x *VipUserData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VipUserData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VipUserData) GetVipType() int64 {
	if x != nil {
		return x.VipType
	}
	return 0
}

func (x *VipUserData) GetSvipType() int64 {
	if x != nil {
		return x.SvipType
	}
	return 0
}

func (x *VipUserData) GetSvipEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SvipEffectTime
	}
	return nil
}

func (x *VipUserData) GetSvipExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SvipExpiredTime
	}
	return nil
}

func (x *VipUserData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VipUserData) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *VipUserData) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *VipUserData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VipUserData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VipUserData) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *VipUserData) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *VipUserData) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索请求
type VipUserPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *VipUserReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *VipUserPageReq) Reset() {
	*x = VipUserPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserPageReq) ProtoMessage() {}

func (x *VipUserPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserPageReq.ProtoReflect.Descriptor instead.
func (*VipUserPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{1}
}

func (x *VipUserPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *VipUserPageReq) GetParam() *VipUserReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type VipUserPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 总条数
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 查询数据
	Items []*VipUserData `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VipUserPageReply) Reset() {
	*x = VipUserPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserPageReply) ProtoMessage() {}

func (x *VipUserPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserPageReply.ProtoReflect.Descriptor instead.
func (*VipUserPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{2}
}

func (x *VipUserPageReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VipUserPageReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VipUserPageReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VipUserPageReply) GetItems() []*VipUserData {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type VipUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//vip类型
	VipType int64 `protobuf:"varint,3,opt,name=vipType,proto3" json:"vipType,omitempty"`
	//svip类型
	SvipType int64 `protobuf:"varint,4,opt,name=svipType,proto3" json:"svipType,omitempty"`
	//超级VIP生效时间
	SvipEffectTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=svipEffectTime,proto3" json:"svipEffectTime,omitempty"`
	//超级VIP失效时间
	SvipExpiredTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=svipExpiredTime,proto3" json:"svipExpiredTime,omitempty"`
	//备注
	Remark string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,12,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,13,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,14,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *VipUserReq) Reset() {
	*x = VipUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserReq) ProtoMessage() {}

func (x *VipUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserReq.ProtoReflect.Descriptor instead.
func (*VipUserReq) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{3}
}

func (x *VipUserReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VipUserReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VipUserReq) GetVipType() int64 {
	if x != nil {
		return x.VipType
	}
	return 0
}

func (x *VipUserReq) GetSvipType() int64 {
	if x != nil {
		return x.SvipType
	}
	return 0
}

func (x *VipUserReq) GetSvipEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SvipEffectTime
	}
	return nil
}

func (x *VipUserReq) GetSvipExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SvipExpiredTime
	}
	return nil
}

func (x *VipUserReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VipUserReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *VipUserReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

func (x *VipUserReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VipUserReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *VipUserReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *VipUserReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *VipUserReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询返回
type VipUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *VipUserData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VipUserReply) Reset() {
	*x = VipUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserReply) ProtoMessage() {}

func (x *VipUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserReply.ProtoReflect.Descriptor instead.
func (*VipUserReply) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{4}
}

func (x *VipUserReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VipUserReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VipUserReply) GetResult() *VipUserData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 创建VipUser请求
type VipUserCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户ID
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	//vip类型
	VipType int64 `protobuf:"varint,2,opt,name=vipType,proto3" json:"vipType,omitempty"`
	//svip类型
	SvipType int64 `protobuf:"varint,3,opt,name=svipType,proto3" json:"svipType,omitempty"`
	//超级VIP生效时间
	SvipEffectTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=svipEffectTime,proto3" json:"svipEffectTime,omitempty"`
	//超级VIP失效时间
	SvipExpiredTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=svipExpiredTime,proto3" json:"svipExpiredTime,omitempty"`
	//备注
	Remark string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *VipUserCreateReq) Reset() {
	*x = VipUserCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserCreateReq) ProtoMessage() {}

func (x *VipUserCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserCreateReq.ProtoReflect.Descriptor instead.
func (*VipUserCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{5}
}

func (x *VipUserCreateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VipUserCreateReq) GetVipType() int64 {
	if x != nil {
		return x.VipType
	}
	return 0
}

func (x *VipUserCreateReq) GetSvipType() int64 {
	if x != nil {
		return x.SvipType
	}
	return 0
}

func (x *VipUserCreateReq) GetSvipEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SvipEffectTime
	}
	return nil
}

func (x *VipUserCreateReq) GetSvipExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SvipExpiredTime
	}
	return nil
}

func (x *VipUserCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VipUserCreateReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *VipUserCreateReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 创建VipUser返回
type VipUserCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *VipUserData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VipUserCreateReply) Reset() {
	*x = VipUserCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserCreateReply) ProtoMessage() {}

func (x *VipUserCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserCreateReply.ProtoReflect.Descriptor instead.
func (*VipUserCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{6}
}

func (x *VipUserCreateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VipUserCreateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VipUserCreateReply) GetResult() *VipUserData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 更新VipUser请求
type VipUserUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//vip类型
	VipType int64 `protobuf:"varint,3,opt,name=vipType,proto3" json:"vipType,omitempty"`
	//svip类型
	SvipType int64 `protobuf:"varint,4,opt,name=svipType,proto3" json:"svipType,omitempty"`
	//超级VIP生效时间
	SvipEffectTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=svipEffectTime,proto3" json:"svipEffectTime,omitempty"`
	//超级VIP失效时间
	SvipExpiredTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=svipExpiredTime,proto3" json:"svipExpiredTime,omitempty"`
	//备注
	Remark string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	//生效时间
	EffectTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=effectTime,proto3" json:"effectTime,omitempty"`
	//失效时间
	ExpiredTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expiredTime,proto3" json:"expiredTime,omitempty"`
}

func (x *VipUserUpdateReq) Reset() {
	*x = VipUserUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserUpdateReq) ProtoMessage() {}

func (x *VipUserUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserUpdateReq.ProtoReflect.Descriptor instead.
func (*VipUserUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{7}
}

func (x *VipUserUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VipUserUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VipUserUpdateReq) GetVipType() int64 {
	if x != nil {
		return x.VipType
	}
	return 0
}

func (x *VipUserUpdateReq) GetSvipType() int64 {
	if x != nil {
		return x.SvipType
	}
	return 0
}

func (x *VipUserUpdateReq) GetSvipEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SvipEffectTime
	}
	return nil
}

func (x *VipUserUpdateReq) GetSvipExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SvipExpiredTime
	}
	return nil
}

func (x *VipUserUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VipUserUpdateReq) GetEffectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectTime
	}
	return nil
}

func (x *VipUserUpdateReq) GetExpiredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredTime
	}
	return nil
}

// 更新VipUser返回
type VipUserUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果数据
	Result *VipUserData `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VipUserUpdateReply) Reset() {
	*x = VipUserUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserUpdateReply) ProtoMessage() {}

func (x *VipUserUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserUpdateReply.ProtoReflect.Descriptor instead.
func (*VipUserUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{8}
}

func (x *VipUserUpdateReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VipUserUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VipUserUpdateReply) GetResult() *VipUserData {
	if x != nil {
		return x.Result
	}
	return nil
}

// 删除VipUser请求
type VipUserDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VipUserDeleteReq) Reset() {
	*x = VipUserDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserDeleteReq) ProtoMessage() {}

func (x *VipUserDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserDeleteReq.ProtoReflect.Descriptor instead.
func (*VipUserDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{9}
}

func (x *VipUserDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除VipUser请求
type VipUserBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *VipUserBatchDeleteReq) Reset() {
	*x = VipUserBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserBatchDeleteReq) ProtoMessage() {}

func (x *VipUserBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*VipUserBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{10}
}

func (x *VipUserBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除VipUser返回
type VipUserDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 结果
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VipUserDeleteReply) Reset() {
	*x = VipUserDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUserDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUserDeleteReply) ProtoMessage() {}

func (x *VipUserDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_vipuser_v1_vip_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUserDeleteReply.ProtoReflect.Descriptor instead.
func (*VipUserDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP(), []int{11}
}

func (x *VipUserDeleteReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VipUserDeleteReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VipUserDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_vipuser_v1_vip_user_proto protoreflect.FileDescriptor

var file_api_novel_vipuser_v1_vip_user_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x76, 0x69, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcf, 0x04, 0x0a, 0x0b, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x0e, 0x73, 0x76, 0x69, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x73, 0x76, 0x69, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x67, 0x0a, 0x0e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x69,
	0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x56,
	0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xce, 0x04, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x42, 0x0a, 0x0e, 0x73, 0x76, 0x69, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x76, 0x69, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x76, 0x69, 0x70, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x0c, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x10, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x76, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x76, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x76, 0x69, 0x70, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x76, 0x69, 0x70, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x76, 0x69,
	0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x73, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x73, 0x0a, 0x12, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x10, 0x56, 0x69, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x76, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x76, 0x69,
	0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73,
	0x76, 0x69, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x73, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x73, 0x76, 0x69, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x12, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x0a, 0x10, 0x56, 0x69,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29,
	0x0a, 0x15, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x56, 0x69, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xf9, 0x04, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x56, 0x69, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x70, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x6b, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x69, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0x66, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1c, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x70,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x76, 0x69, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a,
	0x11, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x6d, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x76, 0x69, 0x70, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x76, 0x69,
	0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x14, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0e, 0x2a, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x70, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x1e, 0x5a, 0x1c, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x2f, 0x76, 0x69, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_novel_vipuser_v1_vip_user_proto_rawDescOnce sync.Once
	file_api_novel_vipuser_v1_vip_user_proto_rawDescData = file_api_novel_vipuser_v1_vip_user_proto_rawDesc
)

func file_api_novel_vipuser_v1_vip_user_proto_rawDescGZIP() []byte {
	file_api_novel_vipuser_v1_vip_user_proto_rawDescOnce.Do(func() {
		file_api_novel_vipuser_v1_vip_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_vipuser_v1_vip_user_proto_rawDescData)
	})
	return file_api_novel_vipuser_v1_vip_user_proto_rawDescData
}

var file_api_novel_vipuser_v1_vip_user_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_novel_vipuser_v1_vip_user_proto_goTypes = []interface{}{
	(*VipUserData)(nil),           // 0: vipuser.v1.VipUserData
	(*VipUserPageReq)(nil),        // 1: vipuser.v1.VipUserPageReq
	(*VipUserPageReply)(nil),      // 2: vipuser.v1.VipUserPageReply
	(*VipUserReq)(nil),            // 3: vipuser.v1.VipUserReq
	(*VipUserReply)(nil),          // 4: vipuser.v1.VipUserReply
	(*VipUserCreateReq)(nil),      // 5: vipuser.v1.VipUserCreateReq
	(*VipUserCreateReply)(nil),    // 6: vipuser.v1.VipUserCreateReply
	(*VipUserUpdateReq)(nil),      // 7: vipuser.v1.VipUserUpdateReq
	(*VipUserUpdateReply)(nil),    // 8: vipuser.v1.VipUserUpdateReply
	(*VipUserDeleteReq)(nil),      // 9: vipuser.v1.VipUserDeleteReq
	(*VipUserBatchDeleteReq)(nil), // 10: vipuser.v1.VipUserBatchDeleteReq
	(*VipUserDeleteReply)(nil),    // 11: vipuser.v1.VipUserDeleteReply
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*pagin.Pagination)(nil),      // 13: pagin.Pagination
}
var file_api_novel_vipuser_v1_vip_user_proto_depIdxs = []int32{
	12, // 0: vipuser.v1.VipUserData.svipEffectTime:type_name -> google.protobuf.Timestamp
	12, // 1: vipuser.v1.VipUserData.svipExpiredTime:type_name -> google.protobuf.Timestamp
	12, // 2: vipuser.v1.VipUserData.effectTime:type_name -> google.protobuf.Timestamp
	12, // 3: vipuser.v1.VipUserData.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 4: vipuser.v1.VipUserData.createdAt:type_name -> google.protobuf.Timestamp
	12, // 5: vipuser.v1.VipUserData.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 6: vipuser.v1.VipUserPageReq.pagin:type_name -> pagin.Pagination
	3,  // 7: vipuser.v1.VipUserPageReq.param:type_name -> vipuser.v1.VipUserReq
	0,  // 8: vipuser.v1.VipUserPageReply.items:type_name -> vipuser.v1.VipUserData
	12, // 9: vipuser.v1.VipUserReq.svipEffectTime:type_name -> google.protobuf.Timestamp
	12, // 10: vipuser.v1.VipUserReq.svipExpiredTime:type_name -> google.protobuf.Timestamp
	12, // 11: vipuser.v1.VipUserReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 12: vipuser.v1.VipUserReq.expiredTime:type_name -> google.protobuf.Timestamp
	12, // 13: vipuser.v1.VipUserReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 14: vipuser.v1.VipUserReq.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 15: vipuser.v1.VipUserReply.result:type_name -> vipuser.v1.VipUserData
	12, // 16: vipuser.v1.VipUserCreateReq.svipEffectTime:type_name -> google.protobuf.Timestamp
	12, // 17: vipuser.v1.VipUserCreateReq.svipExpiredTime:type_name -> google.protobuf.Timestamp
	12, // 18: vipuser.v1.VipUserCreateReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 19: vipuser.v1.VipUserCreateReq.expiredTime:type_name -> google.protobuf.Timestamp
	0,  // 20: vipuser.v1.VipUserCreateReply.result:type_name -> vipuser.v1.VipUserData
	12, // 21: vipuser.v1.VipUserUpdateReq.svipEffectTime:type_name -> google.protobuf.Timestamp
	12, // 22: vipuser.v1.VipUserUpdateReq.svipExpiredTime:type_name -> google.protobuf.Timestamp
	12, // 23: vipuser.v1.VipUserUpdateReq.effectTime:type_name -> google.protobuf.Timestamp
	12, // 24: vipuser.v1.VipUserUpdateReq.expiredTime:type_name -> google.protobuf.Timestamp
	0,  // 25: vipuser.v1.VipUserUpdateReply.result:type_name -> vipuser.v1.VipUserData
	1,  // 26: vipuser.v1.VipUser.GetPageVipUser:input_type -> vipuser.v1.VipUserPageReq
	3,  // 27: vipuser.v1.VipUser.GetVipUser:input_type -> vipuser.v1.VipUserReq
	7,  // 28: vipuser.v1.VipUser.UpdateVipUser:input_type -> vipuser.v1.VipUserUpdateReq
	5,  // 29: vipuser.v1.VipUser.CreateVipUser:input_type -> vipuser.v1.VipUserCreateReq
	9,  // 30: vipuser.v1.VipUser.DeleteVipUser:input_type -> vipuser.v1.VipUserDeleteReq
	10, // 31: vipuser.v1.VipUser.BatchDeleteVipUser:input_type -> vipuser.v1.VipUserBatchDeleteReq
	2,  // 32: vipuser.v1.VipUser.GetPageVipUser:output_type -> vipuser.v1.VipUserPageReply
	4,  // 33: vipuser.v1.VipUser.GetVipUser:output_type -> vipuser.v1.VipUserReply
	8,  // 34: vipuser.v1.VipUser.UpdateVipUser:output_type -> vipuser.v1.VipUserUpdateReply
	6,  // 35: vipuser.v1.VipUser.CreateVipUser:output_type -> vipuser.v1.VipUserCreateReply
	11, // 36: vipuser.v1.VipUser.DeleteVipUser:output_type -> vipuser.v1.VipUserDeleteReply
	11, // 37: vipuser.v1.VipUser.BatchDeleteVipUser:output_type -> vipuser.v1.VipUserDeleteReply
	32, // [32:38] is the sub-list for method output_type
	26, // [26:32] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_api_novel_vipuser_v1_vip_user_proto_init() }
func file_api_novel_vipuser_v1_vip_user_proto_init() {
	if File_api_novel_vipuser_v1_vip_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_vipuser_v1_vip_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUserDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_vipuser_v1_vip_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_vipuser_v1_vip_user_proto_goTypes,
		DependencyIndexes: file_api_novel_vipuser_v1_vip_user_proto_depIdxs,
		MessageInfos:      file_api_novel_vipuser_v1_vip_user_proto_msgTypes,
	}.Build()
	File_api_novel_vipuser_v1_vip_user_proto = out.File
	file_api_novel_vipuser_v1_vip_user_proto_rawDesc = nil
	file_api_novel_vipuser_v1_vip_user_proto_goTypes = nil
	file_api_novel_vipuser_v1_vip_user_proto_depIdxs = nil
}
