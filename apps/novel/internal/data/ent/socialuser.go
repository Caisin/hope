// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/adchannel"
	"hope/apps/novel/internal/data/ent/socialuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SocialUser is the model entity for the SocialUser schema.
type SocialUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ChId holds the value of the "chId" field.
	// 注册渠道
	ChId int64 `json:"chId,omitempty"`
	// Unionid holds the value of the "unionid" field.
	// 只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段
	Unionid string `json:"unionid,omitempty"`
	// Token holds the value of the "token" field.
	// 第三方登录token
	Token string `json:"token,omitempty"`
	// Openid holds the value of the "openid" field.
	// 用户的标识，对当前公众号唯一
	Openid string `json:"openid,omitempty"`
	// RoutineOpenid holds the value of the "routineOpenid" field.
	// 小程序唯一身份ID
	RoutineOpenid string `json:"routineOpenid,omitempty"`
	// UserName holds the value of the "userName" field.
	// 用户名
	UserName string `json:"userName,omitempty"`
	// NickName holds the value of the "nickName" field.
	// 用户的昵称
	NickName string `json:"nickName,omitempty"`
	// Birthday holds the value of the "birthday" field.
	// 生日
	Birthday time.Time `json:"birthday,omitempty"`
	// Phone holds the value of the "phone" field.
	// 手机
	Phone string `json:"phone,omitempty"`
	// Email holds the value of the "email" field.
	// 邮箱
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	// 密码
	Password string `json:"password,omitempty"`
	// Avatar holds the value of the "avatar" field.
	// 用户头像
	Avatar string `json:"avatar,omitempty"`
	// Sex holds the value of the "sex" field.
	// 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
	Sex int32 `json:"sex,omitempty"`
	// Region holds the value of the "region" field.
	// 用户所在城市区域
	Region string `json:"region,omitempty"`
	// City holds the value of the "city" field.
	// 用户所在城市
	City string `json:"city,omitempty"`
	// Language holds the value of the "language" field.
	// 用户的语言，简体中文为zh_CN
	Language string `json:"language,omitempty"`
	// Province holds the value of the "province" field.
	// 用户所在省份
	Province string `json:"province,omitempty"`
	// Country holds the value of the "country" field.
	// 用户所在国家
	Country string `json:"country,omitempty"`
	// Signature holds the value of the "signature" field.
	// 个性签名
	Signature string `json:"signature,omitempty"`
	// Remark holds the value of the "remark" field.
	// 公众号运营者对粉丝的备注，公众号运营者可在微信公众平台用户管理界面对粉丝添加备注
	Remark string `json:"remark,omitempty"`
	// Groupid holds the value of the "groupid" field.
	// 用户所在的分组ID（兼容旧的用户分组接口）
	Groupid int32 `json:"groupid,omitempty"`
	// TagidList holds the value of the "tagidList" field.
	// 用户被打上的标签ID列表
	TagidList string `json:"tagidList,omitempty"`
	// Subscribe holds the value of the "subscribe" field.
	// 用户是否订阅该公众号标识
	Subscribe int32 `json:"subscribe,omitempty"`
	// SubscribeTime holds the value of the "subscribeTime" field.
	// 关注公众号时间
	SubscribeTime int32 `json:"subscribeTime,omitempty"`
	// SessionKey holds the value of the "sessionKey" field.
	// 小程序用户会话密匙
	SessionKey string `json:"sessionKey,omitempty"`
	// UserType holds the value of the "userType" field.
	// 用户类型
	UserType string `json:"userType,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SocialUserQuery when eager-loading is set.
	Edges SocialUserEdges `json:"edges"`
}

// SocialUserEdges holds the relations/edges for other nodes in the graph.
type SocialUserEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks []*TaskLog `json:"tasks,omitempty"`
	// Events holds the value of the events edge.
	Events []*UserEvent `json:"events,omitempty"`
	// ListenRecords holds the value of the listenRecords edge.
	ListenRecords []*ListenRecord `json:"listenRecords,omitempty"`
	// Ads holds the value of the ads edge.
	Ads []*AdChangeLog `json:"ads,omitempty"`
	// Bookshelves holds the value of the bookshelves edge.
	Bookshelves []*NovelBookshelf `json:"bookshelves,omitempty"`
	// AutoBuyNovels holds the value of the autoBuyNovels edge.
	AutoBuyNovels []*NovelAutoBuy `json:"autoBuyNovels,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*NovelComment `json:"comments,omitempty"`
	// Msgs holds the value of the msgs edge.
	Msgs []*UserMsg `json:"msgs,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*PayOrder `json:"orders,omitempty"`
	// Vips holds the value of the vips edge.
	Vips []*VipUser `json:"vips,omitempty"`
	// Balances holds the value of the balances edge.
	Balances []*AmBalance `json:"balances,omitempty"`
	// AssetLogs holds the value of the assetLogs edge.
	AssetLogs []*AssetChangeLog `json:"assetLogs,omitempty"`
	// BuyChapterRecords holds the value of the buyChapterRecords edge.
	BuyChapterRecords []*NovelBuyChapterRecord `json:"buyChapterRecords,omitempty"`
	// BuyNovelRecords holds the value of the buyNovelRecords edge.
	BuyNovelRecords []*NovelBuyRecord `json:"buyNovelRecords,omitempty"`
	// Channel holds the value of the channel edge.
	Channel *AdChannel `json:"channel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) TasksOrErr() ([]*TaskLog, error) {
	if e.loadedTypes[0] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) EventsOrErr() ([]*UserEvent, error) {
	if e.loadedTypes[1] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// ListenRecordsOrErr returns the ListenRecords value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) ListenRecordsOrErr() ([]*ListenRecord, error) {
	if e.loadedTypes[2] {
		return e.ListenRecords, nil
	}
	return nil, &NotLoadedError{edge: "listenRecords"}
}

// AdsOrErr returns the Ads value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) AdsOrErr() ([]*AdChangeLog, error) {
	if e.loadedTypes[3] {
		return e.Ads, nil
	}
	return nil, &NotLoadedError{edge: "ads"}
}

// BookshelvesOrErr returns the Bookshelves value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) BookshelvesOrErr() ([]*NovelBookshelf, error) {
	if e.loadedTypes[4] {
		return e.Bookshelves, nil
	}
	return nil, &NotLoadedError{edge: "bookshelves"}
}

// AutoBuyNovelsOrErr returns the AutoBuyNovels value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) AutoBuyNovelsOrErr() ([]*NovelAutoBuy, error) {
	if e.loadedTypes[5] {
		return e.AutoBuyNovels, nil
	}
	return nil, &NotLoadedError{edge: "autoBuyNovels"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) CommentsOrErr() ([]*NovelComment, error) {
	if e.loadedTypes[6] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// MsgsOrErr returns the Msgs value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) MsgsOrErr() ([]*UserMsg, error) {
	if e.loadedTypes[7] {
		return e.Msgs, nil
	}
	return nil, &NotLoadedError{edge: "msgs"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) OrdersOrErr() ([]*PayOrder, error) {
	if e.loadedTypes[8] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// VipsOrErr returns the Vips value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) VipsOrErr() ([]*VipUser, error) {
	if e.loadedTypes[9] {
		return e.Vips, nil
	}
	return nil, &NotLoadedError{edge: "vips"}
}

// BalancesOrErr returns the Balances value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) BalancesOrErr() ([]*AmBalance, error) {
	if e.loadedTypes[10] {
		return e.Balances, nil
	}
	return nil, &NotLoadedError{edge: "balances"}
}

// AssetLogsOrErr returns the AssetLogs value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) AssetLogsOrErr() ([]*AssetChangeLog, error) {
	if e.loadedTypes[11] {
		return e.AssetLogs, nil
	}
	return nil, &NotLoadedError{edge: "assetLogs"}
}

// BuyChapterRecordsOrErr returns the BuyChapterRecords value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) BuyChapterRecordsOrErr() ([]*NovelBuyChapterRecord, error) {
	if e.loadedTypes[12] {
		return e.BuyChapterRecords, nil
	}
	return nil, &NotLoadedError{edge: "buyChapterRecords"}
}

// BuyNovelRecordsOrErr returns the BuyNovelRecords value or an error if the edge
// was not loaded in eager-loading.
func (e SocialUserEdges) BuyNovelRecordsOrErr() ([]*NovelBuyRecord, error) {
	if e.loadedTypes[13] {
		return e.BuyNovelRecords, nil
	}
	return nil, &NotLoadedError{edge: "buyNovelRecords"}
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SocialUserEdges) ChannelOrErr() (*AdChannel, error) {
	if e.loadedTypes[14] {
		if e.Channel == nil {
			// The edge channel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: adchannel.Label}
		}
		return e.Channel, nil
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SocialUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case socialuser.FieldID, socialuser.FieldChId, socialuser.FieldSex, socialuser.FieldGroupid, socialuser.FieldSubscribe, socialuser.FieldSubscribeTime, socialuser.FieldCreateBy, socialuser.FieldUpdateBy, socialuser.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case socialuser.FieldUnionid, socialuser.FieldToken, socialuser.FieldOpenid, socialuser.FieldRoutineOpenid, socialuser.FieldUserName, socialuser.FieldNickName, socialuser.FieldPhone, socialuser.FieldEmail, socialuser.FieldPassword, socialuser.FieldAvatar, socialuser.FieldRegion, socialuser.FieldCity, socialuser.FieldLanguage, socialuser.FieldProvince, socialuser.FieldCountry, socialuser.FieldSignature, socialuser.FieldRemark, socialuser.FieldTagidList, socialuser.FieldSessionKey, socialuser.FieldUserType:
			values[i] = new(sql.NullString)
		case socialuser.FieldBirthday, socialuser.FieldCreatedAt, socialuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SocialUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SocialUser fields.
func (su *SocialUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case socialuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			su.ID = int64(value.Int64)
		case socialuser.FieldChId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chId", values[i])
			} else if value.Valid {
				su.ChId = value.Int64
			}
		case socialuser.FieldUnionid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unionid", values[i])
			} else if value.Valid {
				su.Unionid = value.String
			}
		case socialuser.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				su.Token = value.String
			}
		case socialuser.FieldOpenid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field openid", values[i])
			} else if value.Valid {
				su.Openid = value.String
			}
		case socialuser.FieldRoutineOpenid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field routineOpenid", values[i])
			} else if value.Valid {
				su.RoutineOpenid = value.String
			}
		case socialuser.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				su.UserName = value.String
			}
		case socialuser.FieldNickName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickName", values[i])
			} else if value.Valid {
				su.NickName = value.String
			}
		case socialuser.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				su.Birthday = value.Time
			}
		case socialuser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				su.Phone = value.String
			}
		case socialuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				su.Email = value.String
			}
		case socialuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				su.Password = value.String
			}
		case socialuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				su.Avatar = value.String
			}
		case socialuser.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				su.Sex = int32(value.Int64)
			}
		case socialuser.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				su.Region = value.String
			}
		case socialuser.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				su.City = value.String
			}
		case socialuser.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				su.Language = value.String
			}
		case socialuser.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				su.Province = value.String
			}
		case socialuser.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				su.Country = value.String
			}
		case socialuser.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				su.Signature = value.String
			}
		case socialuser.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				su.Remark = value.String
			}
		case socialuser.FieldGroupid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field groupid", values[i])
			} else if value.Valid {
				su.Groupid = int32(value.Int64)
			}
		case socialuser.FieldTagidList:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tagidList", values[i])
			} else if value.Valid {
				su.TagidList = value.String
			}
		case socialuser.FieldSubscribe:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe", values[i])
			} else if value.Valid {
				su.Subscribe = int32(value.Int64)
			}
		case socialuser.FieldSubscribeTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribeTime", values[i])
			} else if value.Valid {
				su.SubscribeTime = int32(value.Int64)
			}
		case socialuser.FieldSessionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sessionKey", values[i])
			} else if value.Valid {
				su.SessionKey = value.String
			}
		case socialuser.FieldUserType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userType", values[i])
			} else if value.Valid {
				su.UserType = value.String
			}
		case socialuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				su.CreatedAt = value.Time
			}
		case socialuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				su.UpdatedAt = value.Time
			}
		case socialuser.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				su.CreateBy = value.Int64
			}
		case socialuser.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				su.UpdateBy = value.Int64
			}
		case socialuser.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				su.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryTasks queries the "tasks" edge of the SocialUser entity.
func (su *SocialUser) QueryTasks() *TaskLogQuery {
	return (&SocialUserClient{config: su.config}).QueryTasks(su)
}

// QueryEvents queries the "events" edge of the SocialUser entity.
func (su *SocialUser) QueryEvents() *UserEventQuery {
	return (&SocialUserClient{config: su.config}).QueryEvents(su)
}

// QueryListenRecords queries the "listenRecords" edge of the SocialUser entity.
func (su *SocialUser) QueryListenRecords() *ListenRecordQuery {
	return (&SocialUserClient{config: su.config}).QueryListenRecords(su)
}

// QueryAds queries the "ads" edge of the SocialUser entity.
func (su *SocialUser) QueryAds() *AdChangeLogQuery {
	return (&SocialUserClient{config: su.config}).QueryAds(su)
}

// QueryBookshelves queries the "bookshelves" edge of the SocialUser entity.
func (su *SocialUser) QueryBookshelves() *NovelBookshelfQuery {
	return (&SocialUserClient{config: su.config}).QueryBookshelves(su)
}

// QueryAutoBuyNovels queries the "autoBuyNovels" edge of the SocialUser entity.
func (su *SocialUser) QueryAutoBuyNovels() *NovelAutoBuyQuery {
	return (&SocialUserClient{config: su.config}).QueryAutoBuyNovels(su)
}

// QueryComments queries the "comments" edge of the SocialUser entity.
func (su *SocialUser) QueryComments() *NovelCommentQuery {
	return (&SocialUserClient{config: su.config}).QueryComments(su)
}

// QueryMsgs queries the "msgs" edge of the SocialUser entity.
func (su *SocialUser) QueryMsgs() *UserMsgQuery {
	return (&SocialUserClient{config: su.config}).QueryMsgs(su)
}

// QueryOrders queries the "orders" edge of the SocialUser entity.
func (su *SocialUser) QueryOrders() *PayOrderQuery {
	return (&SocialUserClient{config: su.config}).QueryOrders(su)
}

// QueryVips queries the "vips" edge of the SocialUser entity.
func (su *SocialUser) QueryVips() *VipUserQuery {
	return (&SocialUserClient{config: su.config}).QueryVips(su)
}

// QueryBalances queries the "balances" edge of the SocialUser entity.
func (su *SocialUser) QueryBalances() *AmBalanceQuery {
	return (&SocialUserClient{config: su.config}).QueryBalances(su)
}

// QueryAssetLogs queries the "assetLogs" edge of the SocialUser entity.
func (su *SocialUser) QueryAssetLogs() *AssetChangeLogQuery {
	return (&SocialUserClient{config: su.config}).QueryAssetLogs(su)
}

// QueryBuyChapterRecords queries the "buyChapterRecords" edge of the SocialUser entity.
func (su *SocialUser) QueryBuyChapterRecords() *NovelBuyChapterRecordQuery {
	return (&SocialUserClient{config: su.config}).QueryBuyChapterRecords(su)
}

// QueryBuyNovelRecords queries the "buyNovelRecords" edge of the SocialUser entity.
func (su *SocialUser) QueryBuyNovelRecords() *NovelBuyRecordQuery {
	return (&SocialUserClient{config: su.config}).QueryBuyNovelRecords(su)
}

// QueryChannel queries the "channel" edge of the SocialUser entity.
func (su *SocialUser) QueryChannel() *AdChannelQuery {
	return (&SocialUserClient{config: su.config}).QueryChannel(su)
}

// Update returns a builder for updating this SocialUser.
// Note that you need to call SocialUser.Unwrap() before calling this method if this SocialUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *SocialUser) Update() *SocialUserUpdateOne {
	return (&SocialUserClient{config: su.config}).UpdateOne(su)
}

// Unwrap unwraps the SocialUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (su *SocialUser) Unwrap() *SocialUser {
	tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("ent: SocialUser is not a transactional entity")
	}
	su.config.driver = tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *SocialUser) String() string {
	var builder strings.Builder
	builder.WriteString("SocialUser(")
	builder.WriteString(fmt.Sprintf("id=%v", su.ID))
	builder.WriteString(", chId=")
	builder.WriteString(fmt.Sprintf("%v", su.ChId))
	builder.WriteString(", unionid=")
	builder.WriteString(su.Unionid)
	builder.WriteString(", token=")
	builder.WriteString(su.Token)
	builder.WriteString(", openid=")
	builder.WriteString(su.Openid)
	builder.WriteString(", routineOpenid=")
	builder.WriteString(su.RoutineOpenid)
	builder.WriteString(", userName=")
	builder.WriteString(su.UserName)
	builder.WriteString(", nickName=")
	builder.WriteString(su.NickName)
	builder.WriteString(", birthday=")
	builder.WriteString(su.Birthday.Format(time.ANSIC))
	builder.WriteString(", phone=")
	builder.WriteString(su.Phone)
	builder.WriteString(", email=")
	builder.WriteString(su.Email)
	builder.WriteString(", password=")
	builder.WriteString(su.Password)
	builder.WriteString(", avatar=")
	builder.WriteString(su.Avatar)
	builder.WriteString(", sex=")
	builder.WriteString(fmt.Sprintf("%v", su.Sex))
	builder.WriteString(", region=")
	builder.WriteString(su.Region)
	builder.WriteString(", city=")
	builder.WriteString(su.City)
	builder.WriteString(", language=")
	builder.WriteString(su.Language)
	builder.WriteString(", province=")
	builder.WriteString(su.Province)
	builder.WriteString(", country=")
	builder.WriteString(su.Country)
	builder.WriteString(", signature=")
	builder.WriteString(su.Signature)
	builder.WriteString(", remark=")
	builder.WriteString(su.Remark)
	builder.WriteString(", groupid=")
	builder.WriteString(fmt.Sprintf("%v", su.Groupid))
	builder.WriteString(", tagidList=")
	builder.WriteString(su.TagidList)
	builder.WriteString(", subscribe=")
	builder.WriteString(fmt.Sprintf("%v", su.Subscribe))
	builder.WriteString(", subscribeTime=")
	builder.WriteString(fmt.Sprintf("%v", su.SubscribeTime))
	builder.WriteString(", sessionKey=")
	builder.WriteString(su.SessionKey)
	builder.WriteString(", userType=")
	builder.WriteString(su.UserType)
	builder.WriteString(", createdAt=")
	builder.WriteString(su.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(su.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", su.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", su.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", su.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SocialUsers is a parsable slice of SocialUser.
type SocialUsers []*SocialUser

func (su SocialUsers) config(cfg config) {
	for _i := range su {
		su[_i].config = cfg
	}
}
