// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/resourcestorage"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResourceStorageCreate is the builder for creating a ResourceStorage entity.
type ResourceStorageCreate struct {
	config
	mutation *ResourceStorageMutation
	hooks    []Hook
}

// SetGroupId sets the "groupId" field.
func (rsc *ResourceStorageCreate) SetGroupId(i int32) *ResourceStorageCreate {
	rsc.mutation.SetGroupId(i)
	return rsc
}

// SetNillableGroupId sets the "groupId" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableGroupId(i *int32) *ResourceStorageCreate {
	if i != nil {
		rsc.SetGroupId(*i)
	}
	return rsc
}

// SetStorageType sets the "storageType" field.
func (rsc *ResourceStorageCreate) SetStorageType(i int32) *ResourceStorageCreate {
	rsc.mutation.SetStorageType(i)
	return rsc
}

// SetNillableStorageType sets the "storageType" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableStorageType(i *int32) *ResourceStorageCreate {
	if i != nil {
		rsc.SetStorageType(*i)
	}
	return rsc
}

// SetRealName sets the "realName" field.
func (rsc *ResourceStorageCreate) SetRealName(s string) *ResourceStorageCreate {
	rsc.mutation.SetRealName(s)
	return rsc
}

// SetNillableRealName sets the "realName" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableRealName(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetRealName(*s)
	}
	return rsc
}

// SetBucket sets the "bucket" field.
func (rsc *ResourceStorageCreate) SetBucket(s string) *ResourceStorageCreate {
	rsc.mutation.SetBucket(s)
	return rsc
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableBucket(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetBucket(*s)
	}
	return rsc
}

// SetName sets the "name" field.
func (rsc *ResourceStorageCreate) SetName(s string) *ResourceStorageCreate {
	rsc.mutation.SetName(s)
	return rsc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableName(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetName(*s)
	}
	return rsc
}

// SetSuffix sets the "suffix" field.
func (rsc *ResourceStorageCreate) SetSuffix(s string) *ResourceStorageCreate {
	rsc.mutation.SetSuffix(s)
	return rsc
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableSuffix(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetSuffix(*s)
	}
	return rsc
}

// SetPath sets the "path" field.
func (rsc *ResourceStorageCreate) SetPath(s string) *ResourceStorageCreate {
	rsc.mutation.SetPath(s)
	return rsc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillablePath(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetPath(*s)
	}
	return rsc
}

// SetType sets the "type" field.
func (rsc *ResourceStorageCreate) SetType(s string) *ResourceStorageCreate {
	rsc.mutation.SetType(s)
	return rsc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableType(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetType(*s)
	}
	return rsc
}

// SetSize sets the "size" field.
func (rsc *ResourceStorageCreate) SetSize(s string) *ResourceStorageCreate {
	rsc.mutation.SetSize(s)
	return rsc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableSize(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetSize(*s)
	}
	return rsc
}

// SetDeleteUrl sets the "deleteUrl" field.
func (rsc *ResourceStorageCreate) SetDeleteUrl(s string) *ResourceStorageCreate {
	rsc.mutation.SetDeleteUrl(s)
	return rsc
}

// SetNillableDeleteUrl sets the "deleteUrl" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableDeleteUrl(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetDeleteUrl(*s)
	}
	return rsc
}

// SetFilename sets the "filename" field.
func (rsc *ResourceStorageCreate) SetFilename(s string) *ResourceStorageCreate {
	rsc.mutation.SetFilename(s)
	return rsc
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableFilename(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetFilename(*s)
	}
	return rsc
}

// SetKey sets the "key" field.
func (rsc *ResourceStorageCreate) SetKey(s string) *ResourceStorageCreate {
	rsc.mutation.SetKey(s)
	return rsc
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableKey(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetKey(*s)
	}
	return rsc
}

// SetHeight sets the "height" field.
func (rsc *ResourceStorageCreate) SetHeight(s string) *ResourceStorageCreate {
	rsc.mutation.SetHeight(s)
	return rsc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableHeight(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetHeight(*s)
	}
	return rsc
}

// SetURL sets the "url" field.
func (rsc *ResourceStorageCreate) SetURL(s string) *ResourceStorageCreate {
	rsc.mutation.SetURL(s)
	return rsc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableURL(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetURL(*s)
	}
	return rsc
}

// SetUsername sets the "username" field.
func (rsc *ResourceStorageCreate) SetUsername(s string) *ResourceStorageCreate {
	rsc.mutation.SetUsername(s)
	return rsc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableUsername(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetUsername(*s)
	}
	return rsc
}

// SetWidth sets the "width" field.
func (rsc *ResourceStorageCreate) SetWidth(s string) *ResourceStorageCreate {
	rsc.mutation.SetWidth(s)
	return rsc
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableWidth(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetWidth(*s)
	}
	return rsc
}

// SetMd5code sets the "md5code" field.
func (rsc *ResourceStorageCreate) SetMd5code(s string) *ResourceStorageCreate {
	rsc.mutation.SetMd5code(s)
	return rsc
}

// SetNillableMd5code sets the "md5code" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableMd5code(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetMd5code(*s)
	}
	return rsc
}

// SetRemark sets the "remark" field.
func (rsc *ResourceStorageCreate) SetRemark(s string) *ResourceStorageCreate {
	rsc.mutation.SetRemark(s)
	return rsc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableRemark(s *string) *ResourceStorageCreate {
	if s != nil {
		rsc.SetRemark(*s)
	}
	return rsc
}

// SetCreatedAt sets the "createdAt" field.
func (rsc *ResourceStorageCreate) SetCreatedAt(t time.Time) *ResourceStorageCreate {
	rsc.mutation.SetCreatedAt(t)
	return rsc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableCreatedAt(t *time.Time) *ResourceStorageCreate {
	if t != nil {
		rsc.SetCreatedAt(*t)
	}
	return rsc
}

// SetUpdatedAt sets the "updatedAt" field.
func (rsc *ResourceStorageCreate) SetUpdatedAt(t time.Time) *ResourceStorageCreate {
	rsc.mutation.SetUpdatedAt(t)
	return rsc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableUpdatedAt(t *time.Time) *ResourceStorageCreate {
	if t != nil {
		rsc.SetUpdatedAt(*t)
	}
	return rsc
}

// SetCreateBy sets the "createBy" field.
func (rsc *ResourceStorageCreate) SetCreateBy(i int64) *ResourceStorageCreate {
	rsc.mutation.SetCreateBy(i)
	return rsc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableCreateBy(i *int64) *ResourceStorageCreate {
	if i != nil {
		rsc.SetCreateBy(*i)
	}
	return rsc
}

// SetUpdateBy sets the "updateBy" field.
func (rsc *ResourceStorageCreate) SetUpdateBy(i int64) *ResourceStorageCreate {
	rsc.mutation.SetUpdateBy(i)
	return rsc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableUpdateBy(i *int64) *ResourceStorageCreate {
	if i != nil {
		rsc.SetUpdateBy(*i)
	}
	return rsc
}

// SetTenantId sets the "tenantId" field.
func (rsc *ResourceStorageCreate) SetTenantId(i int64) *ResourceStorageCreate {
	rsc.mutation.SetTenantId(i)
	return rsc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (rsc *ResourceStorageCreate) SetNillableTenantId(i *int64) *ResourceStorageCreate {
	if i != nil {
		rsc.SetTenantId(*i)
	}
	return rsc
}

// Mutation returns the ResourceStorageMutation object of the builder.
func (rsc *ResourceStorageCreate) Mutation() *ResourceStorageMutation {
	return rsc.mutation
}

// Save creates the ResourceStorage in the database.
func (rsc *ResourceStorageCreate) Save(ctx context.Context) (*ResourceStorage, error) {
	var (
		err  error
		node *ResourceStorage
	)
	rsc.defaults()
	if len(rsc.hooks) == 0 {
		if err = rsc.check(); err != nil {
			return nil, err
		}
		node, err = rsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceStorageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rsc.check(); err != nil {
				return nil, err
			}
			rsc.mutation = mutation
			if node, err = rsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rsc.hooks) - 1; i >= 0; i-- {
			if rsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *ResourceStorageCreate) SaveX(ctx context.Context) *ResourceStorage {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *ResourceStorageCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *ResourceStorageCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsc *ResourceStorageCreate) defaults() {
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		v := resourcestorage.DefaultCreatedAt()
		rsc.mutation.SetCreatedAt(v)
	}
	if _, ok := rsc.mutation.UpdatedAt(); !ok {
		v := resourcestorage.DefaultUpdatedAt()
		rsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rsc.mutation.CreateBy(); !ok {
		v := resourcestorage.DefaultCreateBy
		rsc.mutation.SetCreateBy(v)
	}
	if _, ok := rsc.mutation.UpdateBy(); !ok {
		v := resourcestorage.DefaultUpdateBy
		rsc.mutation.SetUpdateBy(v)
	}
	if _, ok := rsc.mutation.TenantId(); !ok {
		v := resourcestorage.DefaultTenantId
		rsc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsc *ResourceStorageCreate) check() error {
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := rsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := rsc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := rsc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := rsc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (rsc *ResourceStorageCreate) sqlSave(ctx context.Context) (*ResourceStorage, error) {
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (rsc *ResourceStorageCreate) createSpec() (*ResourceStorage, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceStorage{config: rsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: resourcestorage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: resourcestorage.FieldID,
			},
		}
	)
	if value, ok := rsc.mutation.GroupId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldGroupId,
		})
		_node.GroupId = value
	}
	if value, ok := rsc.mutation.StorageType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: resourcestorage.FieldStorageType,
		})
		_node.StorageType = value
	}
	if value, ok := rsc.mutation.RealName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldRealName,
		})
		_node.RealName = value
	}
	if value, ok := rsc.mutation.Bucket(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldBucket,
		})
		_node.Bucket = value
	}
	if value, ok := rsc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rsc.mutation.Suffix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldSuffix,
		})
		_node.Suffix = value
	}
	if value, ok := rsc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := rsc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldType,
		})
		_node.Type = value
	}
	if value, ok := rsc.mutation.Size(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldSize,
		})
		_node.Size = value
	}
	if value, ok := rsc.mutation.DeleteUrl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldDeleteUrl,
		})
		_node.DeleteUrl = value
	}
	if value, ok := rsc.mutation.Filename(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldFilename,
		})
		_node.Filename = value
	}
	if value, ok := rsc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := rsc.mutation.Height(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldHeight,
		})
		_node.Height = value
	}
	if value, ok := rsc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := rsc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := rsc.mutation.Width(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldWidth,
		})
		_node.Width = value
	}
	if value, ok := rsc.mutation.Md5code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldMd5code,
		})
		_node.Md5code = value
	}
	if value, ok := rsc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcestorage.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := rsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcestorage.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcestorage.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rsc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := rsc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := rsc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: resourcestorage.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// ResourceStorageCreateBulk is the builder for creating many ResourceStorage entities in bulk.
type ResourceStorageCreateBulk struct {
	config
	builders []*ResourceStorageCreate
}

// Save creates the ResourceStorage entities in the database.
func (rscb *ResourceStorageCreateBulk) Save(ctx context.Context) ([]*ResourceStorage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*ResourceStorage, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceStorageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *ResourceStorageCreateBulk) SaveX(ctx context.Context) []*ResourceStorage {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *ResourceStorageCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *ResourceStorageCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}
