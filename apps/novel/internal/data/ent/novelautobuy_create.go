// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/novelautobuy"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelAutoBuyCreate is the builder for creating a NovelAutoBuy entity.
type NovelAutoBuyCreate struct {
	config
	mutation *NovelAutoBuyMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (nabc *NovelAutoBuyCreate) SetUserId(i int64) *NovelAutoBuyCreate {
	nabc.mutation.SetUserId(i)
	return nabc
}

// SetNovelId sets the "novelId" field.
func (nabc *NovelAutoBuyCreate) SetNovelId(i int64) *NovelAutoBuyCreate {
	nabc.mutation.SetNovelId(i)
	return nabc
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (nabc *NovelAutoBuyCreate) SetNillableNovelId(i *int64) *NovelAutoBuyCreate {
	if i != nil {
		nabc.SetNovelId(*i)
	}
	return nabc
}

// SetCreatedAt sets the "createdAt" field.
func (nabc *NovelAutoBuyCreate) SetCreatedAt(t time.Time) *NovelAutoBuyCreate {
	nabc.mutation.SetCreatedAt(t)
	return nabc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (nabc *NovelAutoBuyCreate) SetNillableCreatedAt(t *time.Time) *NovelAutoBuyCreate {
	if t != nil {
		nabc.SetCreatedAt(*t)
	}
	return nabc
}

// SetUpdatedAt sets the "updatedAt" field.
func (nabc *NovelAutoBuyCreate) SetUpdatedAt(t time.Time) *NovelAutoBuyCreate {
	nabc.mutation.SetUpdatedAt(t)
	return nabc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (nabc *NovelAutoBuyCreate) SetNillableUpdatedAt(t *time.Time) *NovelAutoBuyCreate {
	if t != nil {
		nabc.SetUpdatedAt(*t)
	}
	return nabc
}

// SetCreateBy sets the "createBy" field.
func (nabc *NovelAutoBuyCreate) SetCreateBy(i int64) *NovelAutoBuyCreate {
	nabc.mutation.SetCreateBy(i)
	return nabc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (nabc *NovelAutoBuyCreate) SetNillableCreateBy(i *int64) *NovelAutoBuyCreate {
	if i != nil {
		nabc.SetCreateBy(*i)
	}
	return nabc
}

// SetUpdateBy sets the "updateBy" field.
func (nabc *NovelAutoBuyCreate) SetUpdateBy(i int64) *NovelAutoBuyCreate {
	nabc.mutation.SetUpdateBy(i)
	return nabc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (nabc *NovelAutoBuyCreate) SetNillableUpdateBy(i *int64) *NovelAutoBuyCreate {
	if i != nil {
		nabc.SetUpdateBy(*i)
	}
	return nabc
}

// SetTenantId sets the "tenantId" field.
func (nabc *NovelAutoBuyCreate) SetTenantId(i int64) *NovelAutoBuyCreate {
	nabc.mutation.SetTenantId(i)
	return nabc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (nabc *NovelAutoBuyCreate) SetNillableTenantId(i *int64) *NovelAutoBuyCreate {
	if i != nil {
		nabc.SetTenantId(*i)
	}
	return nabc
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (nabc *NovelAutoBuyCreate) SetUserID(id int64) *NovelAutoBuyCreate {
	nabc.mutation.SetUserID(id)
	return nabc
}

// SetUser sets the "user" edge to the SocialUser entity.
func (nabc *NovelAutoBuyCreate) SetUser(s *SocialUser) *NovelAutoBuyCreate {
	return nabc.SetUserID(s.ID)
}

// Mutation returns the NovelAutoBuyMutation object of the builder.
func (nabc *NovelAutoBuyCreate) Mutation() *NovelAutoBuyMutation {
	return nabc.mutation
}

// Save creates the NovelAutoBuy in the database.
func (nabc *NovelAutoBuyCreate) Save(ctx context.Context) (*NovelAutoBuy, error) {
	var (
		err  error
		node *NovelAutoBuy
	)
	nabc.defaults()
	if len(nabc.hooks) == 0 {
		if err = nabc.check(); err != nil {
			return nil, err
		}
		node, err = nabc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelAutoBuyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nabc.check(); err != nil {
				return nil, err
			}
			nabc.mutation = mutation
			if node, err = nabc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nabc.hooks) - 1; i >= 0; i-- {
			if nabc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nabc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nabc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nabc *NovelAutoBuyCreate) SaveX(ctx context.Context) *NovelAutoBuy {
	v, err := nabc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nabc *NovelAutoBuyCreate) Exec(ctx context.Context) error {
	_, err := nabc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nabc *NovelAutoBuyCreate) ExecX(ctx context.Context) {
	if err := nabc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nabc *NovelAutoBuyCreate) defaults() {
	if _, ok := nabc.mutation.CreatedAt(); !ok {
		v := novelautobuy.DefaultCreatedAt()
		nabc.mutation.SetCreatedAt(v)
	}
	if _, ok := nabc.mutation.UpdatedAt(); !ok {
		v := novelautobuy.DefaultUpdatedAt()
		nabc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nabc.mutation.CreateBy(); !ok {
		v := novelautobuy.DefaultCreateBy
		nabc.mutation.SetCreateBy(v)
	}
	if _, ok := nabc.mutation.UpdateBy(); !ok {
		v := novelautobuy.DefaultUpdateBy
		nabc.mutation.SetUpdateBy(v)
	}
	if _, ok := nabc.mutation.TenantId(); !ok {
		v := novelautobuy.DefaultTenantId
		nabc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nabc *NovelAutoBuyCreate) check() error {
	if _, ok := nabc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "NovelAutoBuy.userId"`)}
	}
	if _, ok := nabc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "NovelAutoBuy.createdAt"`)}
	}
	if _, ok := nabc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "NovelAutoBuy.updatedAt"`)}
	}
	if _, ok := nabc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "NovelAutoBuy.createBy"`)}
	}
	if _, ok := nabc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "NovelAutoBuy.updateBy"`)}
	}
	if _, ok := nabc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "NovelAutoBuy.tenantId"`)}
	}
	if _, ok := nabc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "NovelAutoBuy.user"`)}
	}
	return nil
}

func (nabc *NovelAutoBuyCreate) sqlSave(ctx context.Context) (*NovelAutoBuy, error) {
	_node, _spec := nabc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nabc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (nabc *NovelAutoBuyCreate) createSpec() (*NovelAutoBuy, *sqlgraph.CreateSpec) {
	var (
		_node = &NovelAutoBuy{config: nabc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: novelautobuy.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelautobuy.FieldID,
			},
		}
	)
	if value, ok := nabc.mutation.NovelId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldNovelId,
		})
		_node.NovelId = value
	}
	if value, ok := nabc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelautobuy.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := nabc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelautobuy.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := nabc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := nabc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := nabc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelautobuy.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := nabc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelautobuy.UserTable,
			Columns: []string{novelautobuy.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NovelAutoBuyCreateBulk is the builder for creating many NovelAutoBuy entities in bulk.
type NovelAutoBuyCreateBulk struct {
	config
	builders []*NovelAutoBuyCreate
}

// Save creates the NovelAutoBuy entities in the database.
func (nabcb *NovelAutoBuyCreateBulk) Save(ctx context.Context) ([]*NovelAutoBuy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nabcb.builders))
	nodes := make([]*NovelAutoBuy, len(nabcb.builders))
	mutators := make([]Mutator, len(nabcb.builders))
	for i := range nabcb.builders {
		func(i int, root context.Context) {
			builder := nabcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NovelAutoBuyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nabcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nabcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nabcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nabcb *NovelAutoBuyCreateBulk) SaveX(ctx context.Context) []*NovelAutoBuy {
	v, err := nabcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nabcb *NovelAutoBuyCreateBulk) Exec(ctx context.Context) error {
	_, err := nabcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nabcb *NovelAutoBuyCreateBulk) ExecX(ctx context.Context) {
	if err := nabcb.Exec(ctx); err != nil {
		panic(err)
	}
}
