// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"hope/apps/param/internal/biz"
	"hope/apps/param/internal/data"
	"hope/apps/param/internal/server"
	"hope/apps/param/internal/service"
	"hope/pkg/conf"
	"hope/pkg/provider"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	client := data.NewEntClient(confData, logger)
	redisClient := provider.NewRedisClient(confData, logger)
	dataData, cleanup, err := data.NewData(client, redisClient, logger)
	if err != nil {
		return nil, nil, err
	}
	novelPayConfigRepo := data.NewNovelPayConfigRepo(dataData, logger)
	novelPayConfigUseCase := biz.NewNovelPayConfigUseCase(novelPayConfigRepo, logger)
	novelPayConfigService := service.NewNovelPayConfigService(novelPayConfigUseCase, logger)
	novelTagRepo := data.NewNovelTagRepo(dataData, logger)
	novelTagUseCase := biz.NewNovelTagUseCase(novelTagRepo, logger)
	novelTagService := service.NewNovelTagService(novelTagUseCase, logger)
	pageConfigRepo := data.NewPageConfigRepo(dataData, logger)
	pageConfigUseCase := biz.NewPageConfigUseCase(pageConfigRepo, logger)
	pageConfigService := service.NewPageConfigService(pageConfigUseCase, logger)
	qiniuConfigRepo := data.NewQiniuConfigRepo(dataData, logger)
	qiniuConfigUseCase := biz.NewQiniuConfigUseCase(qiniuConfigRepo, logger)
	qiniuConfigService := service.NewQiniuConfigService(qiniuConfigUseCase, logger)
	resourceGroupRepo := data.NewResourceGroupRepo(dataData, logger)
	resourceGroupUseCase := biz.NewResourceGroupUseCase(resourceGroupRepo, logger)
	resourceGroupService := service.NewResourceGroupService(resourceGroupUseCase, logger)
	resourceStorageRepo := data.NewResourceStorageRepo(dataData, logger)
	resourceStorageUseCase := biz.NewResourceStorageUseCase(resourceStorageRepo, logger)
	resourceStorageService := service.NewResourceStorageService(resourceStorageUseCase, logger)
	scoreProductRepo := data.NewScoreProductRepo(dataData, logger)
	scoreProductUseCase := biz.NewScoreProductUseCase(scoreProductRepo, logger)
	scoreProductService := service.NewScoreProductService(scoreProductUseCase, logger)
	taskRepo := data.NewTaskRepo(dataData, logger)
	taskUseCase := biz.NewTaskUseCase(taskRepo, logger)
	taskService := service.NewTaskService(taskUseCase, logger)
	userAnalysisStatisticsRepo := data.NewUserAnalysisStatisticsRepo(dataData, logger)
	userAnalysisStatisticsUseCase := biz.NewUserAnalysisStatisticsUseCase(userAnalysisStatisticsRepo, logger)
	userAnalysisStatisticsService := service.NewUserAnalysisStatisticsService(userAnalysisStatisticsUseCase, logger)
	userConsumeRepo := data.NewUserConsumeRepo(dataData, logger)
	userConsumeUseCase := biz.NewUserConsumeUseCase(userConsumeRepo, logger)
	userConsumeService := service.NewUserConsumeService(userConsumeUseCase, logger)
	userResourceRepo := data.NewUserResourceRepo(dataData, logger)
	userResourceUseCase := biz.NewUserResourceUseCase(userResourceRepo, logger)
	userResourceService := service.NewUserResourceService(userResourceUseCase, logger)
	userResourceRecordRepo := data.NewUserResourceRecordRepo(dataData, logger)
	userResourceRecordUseCase := biz.NewUserResourceRecordUseCase(userResourceRecordRepo, logger)
	userResourceRecordService := service.NewUserResourceRecordService(userResourceRecordUseCase, logger)
	vipTypeRepo := data.NewVipTypeRepo(dataData, logger)
	vipTypeUseCase := biz.NewVipTypeUseCase(vipTypeRepo, logger)
	vipTypeService := service.NewVipTypeService(vipTypeUseCase, logger)
	v := server.RegisterHTTPServer(novelPayConfigService, novelTagService, pageConfigService, qiniuConfigService, resourceGroupService, resourceStorageService, scoreProductService, taskService, userAnalysisStatisticsService, userConsumeService, userResourceService, userResourceRecordService, vipTypeService)
	httpServer := provider.NewHTTPServer(confServer, v, redisClient, logger)
	v2 := server.RegisterGRPCServer(novelPayConfigService, novelTagService, pageConfigService, qiniuConfigService, resourceGroupService, resourceStorageService, scoreProductService, taskService, userAnalysisStatisticsService, userConsumeService, userResourceService, userResourceRecordService, vipTypeService)
	grpcServer := provider.NewGRPCServer(confServer, v2, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
