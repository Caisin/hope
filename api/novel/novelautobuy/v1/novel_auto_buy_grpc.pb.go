// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/novelautobuy/v1/novel_auto_buy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelAutoBuyClient is the client API for NovelAutoBuy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelAutoBuyClient interface {
	// 分页查询NovelAutoBuy
	GetNovelAutoBuyPage(ctx context.Context, in *NovelAutoBuyPageReq, opts ...grpc.CallOption) (*NovelAutoBuyPageReply, error)
	// 获取NovelAutoBuy
	GetNovelAutoBuy(ctx context.Context, in *NovelAutoBuyReq, opts ...grpc.CallOption) (*NovelAutoBuyReply, error)
	// 更新NovelAutoBuy
	UpdateNovelAutoBuy(ctx context.Context, in *NovelAutoBuyUpdateReq, opts ...grpc.CallOption) (*NovelAutoBuyUpdateReply, error)
	// 创建NovelAutoBuy
	CreateNovelAutoBuy(ctx context.Context, in *NovelAutoBuyCreateReq, opts ...grpc.CallOption) (*NovelAutoBuyCreateReply, error)
	// 删除NovelAutoBuy
	DeleteNovelAutoBuy(ctx context.Context, in *NovelAutoBuyDeleteReq, opts ...grpc.CallOption) (*NovelAutoBuyDeleteReply, error)
	// 批量删除NovelAutoBuy
	BatchDeleteNovelAutoBuy(ctx context.Context, in *NovelAutoBuyBatchDeleteReq, opts ...grpc.CallOption) (*NovelAutoBuyDeleteReply, error)
}

type novelAutoBuyClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelAutoBuyClient(cc grpc.ClientConnInterface) NovelAutoBuyClient {
	return &novelAutoBuyClient{cc}
}

func (c *novelAutoBuyClient) GetNovelAutoBuyPage(ctx context.Context, in *NovelAutoBuyPageReq, opts ...grpc.CallOption) (*NovelAutoBuyPageReply, error) {
	out := new(NovelAutoBuyPageReply)
	err := c.cc.Invoke(ctx, "/novelautobuy.v1.NovelAutoBuy/GetNovelAutoBuyPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelAutoBuyClient) GetNovelAutoBuy(ctx context.Context, in *NovelAutoBuyReq, opts ...grpc.CallOption) (*NovelAutoBuyReply, error) {
	out := new(NovelAutoBuyReply)
	err := c.cc.Invoke(ctx, "/novelautobuy.v1.NovelAutoBuy/GetNovelAutoBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelAutoBuyClient) UpdateNovelAutoBuy(ctx context.Context, in *NovelAutoBuyUpdateReq, opts ...grpc.CallOption) (*NovelAutoBuyUpdateReply, error) {
	out := new(NovelAutoBuyUpdateReply)
	err := c.cc.Invoke(ctx, "/novelautobuy.v1.NovelAutoBuy/UpdateNovelAutoBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelAutoBuyClient) CreateNovelAutoBuy(ctx context.Context, in *NovelAutoBuyCreateReq, opts ...grpc.CallOption) (*NovelAutoBuyCreateReply, error) {
	out := new(NovelAutoBuyCreateReply)
	err := c.cc.Invoke(ctx, "/novelautobuy.v1.NovelAutoBuy/CreateNovelAutoBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelAutoBuyClient) DeleteNovelAutoBuy(ctx context.Context, in *NovelAutoBuyDeleteReq, opts ...grpc.CallOption) (*NovelAutoBuyDeleteReply, error) {
	out := new(NovelAutoBuyDeleteReply)
	err := c.cc.Invoke(ctx, "/novelautobuy.v1.NovelAutoBuy/DeleteNovelAutoBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelAutoBuyClient) BatchDeleteNovelAutoBuy(ctx context.Context, in *NovelAutoBuyBatchDeleteReq, opts ...grpc.CallOption) (*NovelAutoBuyDeleteReply, error) {
	out := new(NovelAutoBuyDeleteReply)
	err := c.cc.Invoke(ctx, "/novelautobuy.v1.NovelAutoBuy/BatchDeleteNovelAutoBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelAutoBuyServer is the server API for NovelAutoBuy service.
// All implementations must embed UnimplementedNovelAutoBuyServer
// for forward compatibility
type NovelAutoBuyServer interface {
	// 分页查询NovelAutoBuy
	GetNovelAutoBuyPage(context.Context, *NovelAutoBuyPageReq) (*NovelAutoBuyPageReply, error)
	// 获取NovelAutoBuy
	GetNovelAutoBuy(context.Context, *NovelAutoBuyReq) (*NovelAutoBuyReply, error)
	// 更新NovelAutoBuy
	UpdateNovelAutoBuy(context.Context, *NovelAutoBuyUpdateReq) (*NovelAutoBuyUpdateReply, error)
	// 创建NovelAutoBuy
	CreateNovelAutoBuy(context.Context, *NovelAutoBuyCreateReq) (*NovelAutoBuyCreateReply, error)
	// 删除NovelAutoBuy
	DeleteNovelAutoBuy(context.Context, *NovelAutoBuyDeleteReq) (*NovelAutoBuyDeleteReply, error)
	// 批量删除NovelAutoBuy
	BatchDeleteNovelAutoBuy(context.Context, *NovelAutoBuyBatchDeleteReq) (*NovelAutoBuyDeleteReply, error)
	mustEmbedUnimplementedNovelAutoBuyServer()
}

// UnimplementedNovelAutoBuyServer must be embedded to have forward compatible implementations.
type UnimplementedNovelAutoBuyServer struct {
}

func (UnimplementedNovelAutoBuyServer) GetNovelAutoBuyPage(context.Context, *NovelAutoBuyPageReq) (*NovelAutoBuyPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelAutoBuyPage not implemented")
}
func (UnimplementedNovelAutoBuyServer) GetNovelAutoBuy(context.Context, *NovelAutoBuyReq) (*NovelAutoBuyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelAutoBuy not implemented")
}
func (UnimplementedNovelAutoBuyServer) UpdateNovelAutoBuy(context.Context, *NovelAutoBuyUpdateReq) (*NovelAutoBuyUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNovelAutoBuy not implemented")
}
func (UnimplementedNovelAutoBuyServer) CreateNovelAutoBuy(context.Context, *NovelAutoBuyCreateReq) (*NovelAutoBuyCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNovelAutoBuy not implemented")
}
func (UnimplementedNovelAutoBuyServer) DeleteNovelAutoBuy(context.Context, *NovelAutoBuyDeleteReq) (*NovelAutoBuyDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNovelAutoBuy not implemented")
}
func (UnimplementedNovelAutoBuyServer) BatchDeleteNovelAutoBuy(context.Context, *NovelAutoBuyBatchDeleteReq) (*NovelAutoBuyDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNovelAutoBuy not implemented")
}
func (UnimplementedNovelAutoBuyServer) mustEmbedUnimplementedNovelAutoBuyServer() {}

// UnsafeNovelAutoBuyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelAutoBuyServer will
// result in compilation errors.
type UnsafeNovelAutoBuyServer interface {
	mustEmbedUnimplementedNovelAutoBuyServer()
}

func RegisterNovelAutoBuyServer(s grpc.ServiceRegistrar, srv NovelAutoBuyServer) {
	s.RegisterService(&NovelAutoBuy_ServiceDesc, srv)
}

func _NovelAutoBuy_GetNovelAutoBuyPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelAutoBuyPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelAutoBuyServer).GetNovelAutoBuyPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelautobuy.v1.NovelAutoBuy/GetNovelAutoBuyPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelAutoBuyServer).GetNovelAutoBuyPage(ctx, req.(*NovelAutoBuyPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelAutoBuy_GetNovelAutoBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelAutoBuyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelAutoBuyServer).GetNovelAutoBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelautobuy.v1.NovelAutoBuy/GetNovelAutoBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelAutoBuyServer).GetNovelAutoBuy(ctx, req.(*NovelAutoBuyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelAutoBuy_UpdateNovelAutoBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelAutoBuyUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelAutoBuyServer).UpdateNovelAutoBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelautobuy.v1.NovelAutoBuy/UpdateNovelAutoBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelAutoBuyServer).UpdateNovelAutoBuy(ctx, req.(*NovelAutoBuyUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelAutoBuy_CreateNovelAutoBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelAutoBuyCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelAutoBuyServer).CreateNovelAutoBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelautobuy.v1.NovelAutoBuy/CreateNovelAutoBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelAutoBuyServer).CreateNovelAutoBuy(ctx, req.(*NovelAutoBuyCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelAutoBuy_DeleteNovelAutoBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelAutoBuyDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelAutoBuyServer).DeleteNovelAutoBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelautobuy.v1.NovelAutoBuy/DeleteNovelAutoBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelAutoBuyServer).DeleteNovelAutoBuy(ctx, req.(*NovelAutoBuyDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelAutoBuy_BatchDeleteNovelAutoBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelAutoBuyBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelAutoBuyServer).BatchDeleteNovelAutoBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelautobuy.v1.NovelAutoBuy/BatchDeleteNovelAutoBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelAutoBuyServer).BatchDeleteNovelAutoBuy(ctx, req.(*NovelAutoBuyBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelAutoBuy_ServiceDesc is the grpc.ServiceDesc for NovelAutoBuy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelAutoBuy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novelautobuy.v1.NovelAutoBuy",
	HandlerType: (*NovelAutoBuyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNovelAutoBuyPage",
			Handler:    _NovelAutoBuy_GetNovelAutoBuyPage_Handler,
		},
		{
			MethodName: "GetNovelAutoBuy",
			Handler:    _NovelAutoBuy_GetNovelAutoBuy_Handler,
		},
		{
			MethodName: "UpdateNovelAutoBuy",
			Handler:    _NovelAutoBuy_UpdateNovelAutoBuy_Handler,
		},
		{
			MethodName: "CreateNovelAutoBuy",
			Handler:    _NovelAutoBuy_CreateNovelAutoBuy_Handler,
		},
		{
			MethodName: "DeleteNovelAutoBuy",
			Handler:    _NovelAutoBuy_DeleteNovelAutoBuy_Handler,
		},
		{
			MethodName: "BatchDeleteNovelAutoBuy",
			Handler:    _NovelAutoBuy_BatchDeleteNovelAutoBuy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/novelautobuy/v1/novel_auto_buy.proto",
}
