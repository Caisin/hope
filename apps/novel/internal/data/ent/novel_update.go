// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/bookpackage"
	"hope/apps/novel/internal/data/ent/novel"
	"hope/apps/novel/internal/data/ent/novelchapter"
	"hope/apps/novel/internal/data/ent/novelclassify"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelUpdate is the builder for updating Novel entities.
type NovelUpdate struct {
	config
	hooks    []Hook
	mutation *NovelMutation
}

// Where appends a list predicates to the NovelUpdate builder.
func (nu *NovelUpdate) Where(ps ...predicate.Novel) *NovelUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetClassifyId sets the "classifyId" field.
func (nu *NovelUpdate) SetClassifyId(i int64) *NovelUpdate {
	nu.mutation.SetClassifyId(i)
	return nu
}

// SetNillableClassifyId sets the "classifyId" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableClassifyId(i *int64) *NovelUpdate {
	if i != nil {
		nu.SetClassifyId(*i)
	}
	return nu
}

// ClearClassifyId clears the value of the "classifyId" field.
func (nu *NovelUpdate) ClearClassifyId() *NovelUpdate {
	nu.mutation.ClearClassifyId()
	return nu
}

// SetClassifyName sets the "classifyName" field.
func (nu *NovelUpdate) SetClassifyName(s string) *NovelUpdate {
	nu.mutation.SetClassifyName(s)
	return nu
}

// SetNillableClassifyName sets the "classifyName" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableClassifyName(s *string) *NovelUpdate {
	if s != nil {
		nu.SetClassifyName(*s)
	}
	return nu
}

// ClearClassifyName clears the value of the "classifyName" field.
func (nu *NovelUpdate) ClearClassifyName() *NovelUpdate {
	nu.mutation.ClearClassifyName()
	return nu
}

// SetAuthorId sets the "authorId" field.
func (nu *NovelUpdate) SetAuthorId(s string) *NovelUpdate {
	nu.mutation.SetAuthorId(s)
	return nu
}

// SetNillableAuthorId sets the "authorId" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableAuthorId(s *string) *NovelUpdate {
	if s != nil {
		nu.SetAuthorId(*s)
	}
	return nu
}

// ClearAuthorId clears the value of the "authorId" field.
func (nu *NovelUpdate) ClearAuthorId() *NovelUpdate {
	nu.mutation.ClearAuthorId()
	return nu
}

// SetTitle sets the "title" field.
func (nu *NovelUpdate) SetTitle(s string) *NovelUpdate {
	nu.mutation.SetTitle(s)
	return nu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableTitle(s *string) *NovelUpdate {
	if s != nil {
		nu.SetTitle(*s)
	}
	return nu
}

// ClearTitle clears the value of the "title" field.
func (nu *NovelUpdate) ClearTitle() *NovelUpdate {
	nu.mutation.ClearTitle()
	return nu
}

// SetSummary sets the "summary" field.
func (nu *NovelUpdate) SetSummary(s string) *NovelUpdate {
	nu.mutation.SetSummary(s)
	return nu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableSummary(s *string) *NovelUpdate {
	if s != nil {
		nu.SetSummary(*s)
	}
	return nu
}

// ClearSummary clears the value of the "summary" field.
func (nu *NovelUpdate) ClearSummary() *NovelUpdate {
	nu.mutation.ClearSummary()
	return nu
}

// SetAuthor sets the "author" field.
func (nu *NovelUpdate) SetAuthor(s string) *NovelUpdate {
	nu.mutation.SetAuthor(s)
	return nu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableAuthor(s *string) *NovelUpdate {
	if s != nil {
		nu.SetAuthor(*s)
	}
	return nu
}

// ClearAuthor clears the value of the "author" field.
func (nu *NovelUpdate) ClearAuthor() *NovelUpdate {
	nu.mutation.ClearAuthor()
	return nu
}

// SetAnchor sets the "anchor" field.
func (nu *NovelUpdate) SetAnchor(s string) *NovelUpdate {
	nu.mutation.SetAnchor(s)
	return nu
}

// SetNillableAnchor sets the "anchor" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableAnchor(s *string) *NovelUpdate {
	if s != nil {
		nu.SetAnchor(*s)
	}
	return nu
}

// ClearAnchor clears the value of the "anchor" field.
func (nu *NovelUpdate) ClearAnchor() *NovelUpdate {
	nu.mutation.ClearAnchor()
	return nu
}

// SetHits sets the "hits" field.
func (nu *NovelUpdate) SetHits(i int64) *NovelUpdate {
	nu.mutation.ResetHits()
	nu.mutation.SetHits(i)
	return nu
}

// SetNillableHits sets the "hits" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableHits(i *int64) *NovelUpdate {
	if i != nil {
		nu.SetHits(*i)
	}
	return nu
}

// AddHits adds i to the "hits" field.
func (nu *NovelUpdate) AddHits(i int64) *NovelUpdate {
	nu.mutation.AddHits(i)
	return nu
}

// ClearHits clears the value of the "hits" field.
func (nu *NovelUpdate) ClearHits() *NovelUpdate {
	nu.mutation.ClearHits()
	return nu
}

// SetKeywords sets the "keywords" field.
func (nu *NovelUpdate) SetKeywords(s string) *NovelUpdate {
	nu.mutation.SetKeywords(s)
	return nu
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableKeywords(s *string) *NovelUpdate {
	if s != nil {
		nu.SetKeywords(*s)
	}
	return nu
}

// ClearKeywords clears the value of the "keywords" field.
func (nu *NovelUpdate) ClearKeywords() *NovelUpdate {
	nu.mutation.ClearKeywords()
	return nu
}

// SetSource sets the "source" field.
func (nu *NovelUpdate) SetSource(s string) *NovelUpdate {
	nu.mutation.SetSource(s)
	return nu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableSource(s *string) *NovelUpdate {
	if s != nil {
		nu.SetSource(*s)
	}
	return nu
}

// ClearSource clears the value of the "source" field.
func (nu *NovelUpdate) ClearSource() *NovelUpdate {
	nu.mutation.ClearSource()
	return nu
}

// SetScore sets the "score" field.
func (nu *NovelUpdate) SetScore(i int32) *NovelUpdate {
	nu.mutation.ResetScore()
	nu.mutation.SetScore(i)
	return nu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableScore(i *int32) *NovelUpdate {
	if i != nil {
		nu.SetScore(*i)
	}
	return nu
}

// AddScore adds i to the "score" field.
func (nu *NovelUpdate) AddScore(i int32) *NovelUpdate {
	nu.mutation.AddScore(i)
	return nu
}

// ClearScore clears the value of the "score" field.
func (nu *NovelUpdate) ClearScore() *NovelUpdate {
	nu.mutation.ClearScore()
	return nu
}

// SetCover sets the "cover" field.
func (nu *NovelUpdate) SetCover(s string) *NovelUpdate {
	nu.mutation.SetCover(s)
	return nu
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableCover(s *string) *NovelUpdate {
	if s != nil {
		nu.SetCover(*s)
	}
	return nu
}

// ClearCover clears the value of the "cover" field.
func (nu *NovelUpdate) ClearCover() *NovelUpdate {
	nu.mutation.ClearCover()
	return nu
}

// SetTagIds sets the "tagIds" field.
func (nu *NovelUpdate) SetTagIds(s string) *NovelUpdate {
	nu.mutation.SetTagIds(s)
	return nu
}

// SetNillableTagIds sets the "tagIds" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableTagIds(s *string) *NovelUpdate {
	if s != nil {
		nu.SetTagIds(*s)
	}
	return nu
}

// ClearTagIds clears the value of the "tagIds" field.
func (nu *NovelUpdate) ClearTagIds() *NovelUpdate {
	nu.mutation.ClearTagIds()
	return nu
}

// SetWordNum sets the "wordNum" field.
func (nu *NovelUpdate) SetWordNum(i int32) *NovelUpdate {
	nu.mutation.ResetWordNum()
	nu.mutation.SetWordNum(i)
	return nu
}

// SetNillableWordNum sets the "wordNum" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableWordNum(i *int32) *NovelUpdate {
	if i != nil {
		nu.SetWordNum(*i)
	}
	return nu
}

// AddWordNum adds i to the "wordNum" field.
func (nu *NovelUpdate) AddWordNum(i int32) *NovelUpdate {
	nu.mutation.AddWordNum(i)
	return nu
}

// ClearWordNum clears the value of the "wordNum" field.
func (nu *NovelUpdate) ClearWordNum() *NovelUpdate {
	nu.mutation.ClearWordNum()
	return nu
}

// SetFreeNum sets the "freeNum" field.
func (nu *NovelUpdate) SetFreeNum(i int32) *NovelUpdate {
	nu.mutation.ResetFreeNum()
	nu.mutation.SetFreeNum(i)
	return nu
}

// SetNillableFreeNum sets the "freeNum" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableFreeNum(i *int32) *NovelUpdate {
	if i != nil {
		nu.SetFreeNum(*i)
	}
	return nu
}

// AddFreeNum adds i to the "freeNum" field.
func (nu *NovelUpdate) AddFreeNum(i int32) *NovelUpdate {
	nu.mutation.AddFreeNum(i)
	return nu
}

// ClearFreeNum clears the value of the "freeNum" field.
func (nu *NovelUpdate) ClearFreeNum() *NovelUpdate {
	nu.mutation.ClearFreeNum()
	return nu
}

// SetOnlineState sets the "onlineState" field.
func (nu *NovelUpdate) SetOnlineState(i int32) *NovelUpdate {
	nu.mutation.ResetOnlineState()
	nu.mutation.SetOnlineState(i)
	return nu
}

// SetNillableOnlineState sets the "onlineState" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableOnlineState(i *int32) *NovelUpdate {
	if i != nil {
		nu.SetOnlineState(*i)
	}
	return nu
}

// AddOnlineState adds i to the "onlineState" field.
func (nu *NovelUpdate) AddOnlineState(i int32) *NovelUpdate {
	nu.mutation.AddOnlineState(i)
	return nu
}

// ClearOnlineState clears the value of the "onlineState" field.
func (nu *NovelUpdate) ClearOnlineState() *NovelUpdate {
	nu.mutation.ClearOnlineState()
	return nu
}

// SetPrice sets the "price" field.
func (nu *NovelUpdate) SetPrice(i int64) *NovelUpdate {
	nu.mutation.ResetPrice()
	nu.mutation.SetPrice(i)
	return nu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (nu *NovelUpdate) SetNillablePrice(i *int64) *NovelUpdate {
	if i != nil {
		nu.SetPrice(*i)
	}
	return nu
}

// AddPrice adds i to the "price" field.
func (nu *NovelUpdate) AddPrice(i int64) *NovelUpdate {
	nu.mutation.AddPrice(i)
	return nu
}

// ClearPrice clears the value of the "price" field.
func (nu *NovelUpdate) ClearPrice() *NovelUpdate {
	nu.mutation.ClearPrice()
	return nu
}

// SetPublish sets the "publish" field.
func (nu *NovelUpdate) SetPublish(i int32) *NovelUpdate {
	nu.mutation.ResetPublish()
	nu.mutation.SetPublish(i)
	return nu
}

// SetNillablePublish sets the "publish" field if the given value is not nil.
func (nu *NovelUpdate) SetNillablePublish(i *int32) *NovelUpdate {
	if i != nil {
		nu.SetPublish(*i)
	}
	return nu
}

// AddPublish adds i to the "publish" field.
func (nu *NovelUpdate) AddPublish(i int32) *NovelUpdate {
	nu.mutation.AddPublish(i)
	return nu
}

// ClearPublish clears the value of the "publish" field.
func (nu *NovelUpdate) ClearPublish() *NovelUpdate {
	nu.mutation.ClearPublish()
	return nu
}

// SetOriginalPrice sets the "originalPrice" field.
func (nu *NovelUpdate) SetOriginalPrice(i int64) *NovelUpdate {
	nu.mutation.ResetOriginalPrice()
	nu.mutation.SetOriginalPrice(i)
	return nu
}

// SetNillableOriginalPrice sets the "originalPrice" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableOriginalPrice(i *int64) *NovelUpdate {
	if i != nil {
		nu.SetOriginalPrice(*i)
	}
	return nu
}

// AddOriginalPrice adds i to the "originalPrice" field.
func (nu *NovelUpdate) AddOriginalPrice(i int64) *NovelUpdate {
	nu.mutation.AddOriginalPrice(i)
	return nu
}

// ClearOriginalPrice clears the value of the "originalPrice" field.
func (nu *NovelUpdate) ClearOriginalPrice() *NovelUpdate {
	nu.mutation.ClearOriginalPrice()
	return nu
}

// SetChapterPrice sets the "chapterPrice" field.
func (nu *NovelUpdate) SetChapterPrice(i int32) *NovelUpdate {
	nu.mutation.ResetChapterPrice()
	nu.mutation.SetChapterPrice(i)
	return nu
}

// SetNillableChapterPrice sets the "chapterPrice" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableChapterPrice(i *int32) *NovelUpdate {
	if i != nil {
		nu.SetChapterPrice(*i)
	}
	return nu
}

// AddChapterPrice adds i to the "chapterPrice" field.
func (nu *NovelUpdate) AddChapterPrice(i int32) *NovelUpdate {
	nu.mutation.AddChapterPrice(i)
	return nu
}

// ClearChapterPrice clears the value of the "chapterPrice" field.
func (nu *NovelUpdate) ClearChapterPrice() *NovelUpdate {
	nu.mutation.ClearChapterPrice()
	return nu
}

// SetChapterCount sets the "chapterCount" field.
func (nu *NovelUpdate) SetChapterCount(i int32) *NovelUpdate {
	nu.mutation.ResetChapterCount()
	nu.mutation.SetChapterCount(i)
	return nu
}

// SetNillableChapterCount sets the "chapterCount" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableChapterCount(i *int32) *NovelUpdate {
	if i != nil {
		nu.SetChapterCount(*i)
	}
	return nu
}

// AddChapterCount adds i to the "chapterCount" field.
func (nu *NovelUpdate) AddChapterCount(i int32) *NovelUpdate {
	nu.mutation.AddChapterCount(i)
	return nu
}

// ClearChapterCount clears the value of the "chapterCount" field.
func (nu *NovelUpdate) ClearChapterCount() *NovelUpdate {
	nu.mutation.ClearChapterCount()
	return nu
}

// SetSignType sets the "signType" field.
func (nu *NovelUpdate) SetSignType(i int32) *NovelUpdate {
	nu.mutation.ResetSignType()
	nu.mutation.SetSignType(i)
	return nu
}

// SetNillableSignType sets the "signType" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableSignType(i *int32) *NovelUpdate {
	if i != nil {
		nu.SetSignType(*i)
	}
	return nu
}

// AddSignType adds i to the "signType" field.
func (nu *NovelUpdate) AddSignType(i int32) *NovelUpdate {
	nu.mutation.AddSignType(i)
	return nu
}

// ClearSignType clears the value of the "signType" field.
func (nu *NovelUpdate) ClearSignType() *NovelUpdate {
	nu.mutation.ClearSignType()
	return nu
}

// SetSignDate sets the "signDate" field.
func (nu *NovelUpdate) SetSignDate(t time.Time) *NovelUpdate {
	nu.mutation.SetSignDate(t)
	return nu
}

// SetNillableSignDate sets the "signDate" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableSignDate(t *time.Time) *NovelUpdate {
	if t != nil {
		nu.SetSignDate(*t)
	}
	return nu
}

// ClearSignDate clears the value of the "signDate" field.
func (nu *NovelUpdate) ClearSignDate() *NovelUpdate {
	nu.mutation.ClearSignDate()
	return nu
}

// SetLeadingMan sets the "leadingMan" field.
func (nu *NovelUpdate) SetLeadingMan(s string) *NovelUpdate {
	nu.mutation.SetLeadingMan(s)
	return nu
}

// SetNillableLeadingMan sets the "leadingMan" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableLeadingMan(s *string) *NovelUpdate {
	if s != nil {
		nu.SetLeadingMan(*s)
	}
	return nu
}

// ClearLeadingMan clears the value of the "leadingMan" field.
func (nu *NovelUpdate) ClearLeadingMan() *NovelUpdate {
	nu.mutation.ClearLeadingMan()
	return nu
}

// SetLeadingLady sets the "leadingLady" field.
func (nu *NovelUpdate) SetLeadingLady(s string) *NovelUpdate {
	nu.mutation.SetLeadingLady(s)
	return nu
}

// SetNillableLeadingLady sets the "leadingLady" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableLeadingLady(s *string) *NovelUpdate {
	if s != nil {
		nu.SetLeadingLady(*s)
	}
	return nu
}

// ClearLeadingLady clears the value of the "leadingLady" field.
func (nu *NovelUpdate) ClearLeadingLady() *NovelUpdate {
	nu.mutation.ClearLeadingLady()
	return nu
}

// SetRemark sets the "remark" field.
func (nu *NovelUpdate) SetRemark(s string) *NovelUpdate {
	nu.mutation.SetRemark(s)
	return nu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableRemark(s *string) *NovelUpdate {
	if s != nil {
		nu.SetRemark(*s)
	}
	return nu
}

// ClearRemark clears the value of the "remark" field.
func (nu *NovelUpdate) ClearRemark() *NovelUpdate {
	nu.mutation.ClearRemark()
	return nu
}

// SetMediaKey sets the "mediaKey" field.
func (nu *NovelUpdate) SetMediaKey(s string) *NovelUpdate {
	nu.mutation.SetMediaKey(s)
	return nu
}

// SetNillableMediaKey sets the "mediaKey" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableMediaKey(s *string) *NovelUpdate {
	if s != nil {
		nu.SetMediaKey(*s)
	}
	return nu
}

// ClearMediaKey clears the value of the "mediaKey" field.
func (nu *NovelUpdate) ClearMediaKey() *NovelUpdate {
	nu.mutation.ClearMediaKey()
	return nu
}

// SetUpdatedAt sets the "updatedAt" field.
func (nu *NovelUpdate) SetUpdatedAt(t time.Time) *NovelUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// SetCreateBy sets the "createBy" field.
func (nu *NovelUpdate) SetCreateBy(i int64) *NovelUpdate {
	nu.mutation.ResetCreateBy()
	nu.mutation.SetCreateBy(i)
	return nu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableCreateBy(i *int64) *NovelUpdate {
	if i != nil {
		nu.SetCreateBy(*i)
	}
	return nu
}

// AddCreateBy adds i to the "createBy" field.
func (nu *NovelUpdate) AddCreateBy(i int64) *NovelUpdate {
	nu.mutation.AddCreateBy(i)
	return nu
}

// SetUpdateBy sets the "updateBy" field.
func (nu *NovelUpdate) SetUpdateBy(i int64) *NovelUpdate {
	nu.mutation.ResetUpdateBy()
	nu.mutation.SetUpdateBy(i)
	return nu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableUpdateBy(i *int64) *NovelUpdate {
	if i != nil {
		nu.SetUpdateBy(*i)
	}
	return nu
}

// AddUpdateBy adds i to the "updateBy" field.
func (nu *NovelUpdate) AddUpdateBy(i int64) *NovelUpdate {
	nu.mutation.AddUpdateBy(i)
	return nu
}

// SetTenantId sets the "tenantId" field.
func (nu *NovelUpdate) SetTenantId(i int64) *NovelUpdate {
	nu.mutation.ResetTenantId()
	nu.mutation.SetTenantId(i)
	return nu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (nu *NovelUpdate) SetNillableTenantId(i *int64) *NovelUpdate {
	if i != nil {
		nu.SetTenantId(*i)
	}
	return nu
}

// AddTenantId adds i to the "tenantId" field.
func (nu *NovelUpdate) AddTenantId(i int64) *NovelUpdate {
	nu.mutation.AddTenantId(i)
	return nu
}

// AddChapterIDs adds the "chapters" edge to the NovelChapter entity by IDs.
func (nu *NovelUpdate) AddChapterIDs(ids ...int64) *NovelUpdate {
	nu.mutation.AddChapterIDs(ids...)
	return nu
}

// AddChapters adds the "chapters" edges to the NovelChapter entity.
func (nu *NovelUpdate) AddChapters(n ...*NovelChapter) *NovelUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddChapterIDs(ids...)
}

// AddPkgIDs adds the "pkgs" edge to the BookPackage entity by IDs.
func (nu *NovelUpdate) AddPkgIDs(ids ...int64) *NovelUpdate {
	nu.mutation.AddPkgIDs(ids...)
	return nu
}

// AddPkgs adds the "pkgs" edges to the BookPackage entity.
func (nu *NovelUpdate) AddPkgs(b ...*BookPackage) *NovelUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nu.AddPkgIDs(ids...)
}

// SetClassifyID sets the "classify" edge to the NovelClassify entity by ID.
func (nu *NovelUpdate) SetClassifyID(id int64) *NovelUpdate {
	nu.mutation.SetClassifyID(id)
	return nu
}

// SetNillableClassifyID sets the "classify" edge to the NovelClassify entity by ID if the given value is not nil.
func (nu *NovelUpdate) SetNillableClassifyID(id *int64) *NovelUpdate {
	if id != nil {
		nu = nu.SetClassifyID(*id)
	}
	return nu
}

// SetClassify sets the "classify" edge to the NovelClassify entity.
func (nu *NovelUpdate) SetClassify(n *NovelClassify) *NovelUpdate {
	return nu.SetClassifyID(n.ID)
}

// Mutation returns the NovelMutation object of the builder.
func (nu *NovelUpdate) Mutation() *NovelMutation {
	return nu.mutation
}

// ClearChapters clears all "chapters" edges to the NovelChapter entity.
func (nu *NovelUpdate) ClearChapters() *NovelUpdate {
	nu.mutation.ClearChapters()
	return nu
}

// RemoveChapterIDs removes the "chapters" edge to NovelChapter entities by IDs.
func (nu *NovelUpdate) RemoveChapterIDs(ids ...int64) *NovelUpdate {
	nu.mutation.RemoveChapterIDs(ids...)
	return nu
}

// RemoveChapters removes "chapters" edges to NovelChapter entities.
func (nu *NovelUpdate) RemoveChapters(n ...*NovelChapter) *NovelUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveChapterIDs(ids...)
}

// ClearPkgs clears all "pkgs" edges to the BookPackage entity.
func (nu *NovelUpdate) ClearPkgs() *NovelUpdate {
	nu.mutation.ClearPkgs()
	return nu
}

// RemovePkgIDs removes the "pkgs" edge to BookPackage entities by IDs.
func (nu *NovelUpdate) RemovePkgIDs(ids ...int64) *NovelUpdate {
	nu.mutation.RemovePkgIDs(ids...)
	return nu
}

// RemovePkgs removes "pkgs" edges to BookPackage entities.
func (nu *NovelUpdate) RemovePkgs(b ...*BookPackage) *NovelUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nu.RemovePkgIDs(ids...)
}

// ClearClassify clears the "classify" edge to the NovelClassify entity.
func (nu *NovelUpdate) ClearClassify() *NovelUpdate {
	nu.mutation.ClearClassify()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NovelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nu.defaults()
	if len(nu.hooks) == 0 {
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NovelUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NovelUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NovelUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NovelUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := novel.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

func (nu *NovelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novel.Table,
			Columns: novel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novel.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.ClassifyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldClassifyName,
		})
	}
	if nu.mutation.ClassifyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldClassifyName,
		})
	}
	if value, ok := nu.mutation.AuthorId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldAuthorId,
		})
	}
	if nu.mutation.AuthorIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldAuthorId,
		})
	}
	if value, ok := nu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldTitle,
		})
	}
	if nu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldTitle,
		})
	}
	if value, ok := nu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldSummary,
		})
	}
	if nu.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldSummary,
		})
	}
	if value, ok := nu.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldAuthor,
		})
	}
	if nu.mutation.AuthorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldAuthor,
		})
	}
	if value, ok := nu.mutation.Anchor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldAnchor,
		})
	}
	if nu.mutation.AnchorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldAnchor,
		})
	}
	if value, ok := nu.mutation.Hits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldHits,
		})
	}
	if value, ok := nu.mutation.AddedHits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldHits,
		})
	}
	if nu.mutation.HitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novel.FieldHits,
		})
	}
	if value, ok := nu.mutation.Keywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldKeywords,
		})
	}
	if nu.mutation.KeywordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldKeywords,
		})
	}
	if value, ok := nu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldSource,
		})
	}
	if nu.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldSource,
		})
	}
	if value, ok := nu.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldScore,
		})
	}
	if value, ok := nu.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldScore,
		})
	}
	if nu.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldScore,
		})
	}
	if value, ok := nu.mutation.Cover(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldCover,
		})
	}
	if nu.mutation.CoverCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldCover,
		})
	}
	if value, ok := nu.mutation.TagIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldTagIds,
		})
	}
	if nu.mutation.TagIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldTagIds,
		})
	}
	if value, ok := nu.mutation.WordNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldWordNum,
		})
	}
	if value, ok := nu.mutation.AddedWordNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldWordNum,
		})
	}
	if nu.mutation.WordNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldWordNum,
		})
	}
	if value, ok := nu.mutation.FreeNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldFreeNum,
		})
	}
	if value, ok := nu.mutation.AddedFreeNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldFreeNum,
		})
	}
	if nu.mutation.FreeNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldFreeNum,
		})
	}
	if value, ok := nu.mutation.OnlineState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldOnlineState,
		})
	}
	if value, ok := nu.mutation.AddedOnlineState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldOnlineState,
		})
	}
	if nu.mutation.OnlineStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldOnlineState,
		})
	}
	if value, ok := nu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldPrice,
		})
	}
	if value, ok := nu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldPrice,
		})
	}
	if nu.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novel.FieldPrice,
		})
	}
	if value, ok := nu.mutation.Publish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldPublish,
		})
	}
	if value, ok := nu.mutation.AddedPublish(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldPublish,
		})
	}
	if nu.mutation.PublishCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldPublish,
		})
	}
	if value, ok := nu.mutation.OriginalPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldOriginalPrice,
		})
	}
	if value, ok := nu.mutation.AddedOriginalPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldOriginalPrice,
		})
	}
	if nu.mutation.OriginalPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novel.FieldOriginalPrice,
		})
	}
	if value, ok := nu.mutation.ChapterPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldChapterPrice,
		})
	}
	if value, ok := nu.mutation.AddedChapterPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldChapterPrice,
		})
	}
	if nu.mutation.ChapterPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldChapterPrice,
		})
	}
	if value, ok := nu.mutation.ChapterCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldChapterCount,
		})
	}
	if value, ok := nu.mutation.AddedChapterCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldChapterCount,
		})
	}
	if nu.mutation.ChapterCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldChapterCount,
		})
	}
	if value, ok := nu.mutation.SignType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldSignType,
		})
	}
	if value, ok := nu.mutation.AddedSignType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldSignType,
		})
	}
	if nu.mutation.SignTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldSignType,
		})
	}
	if value, ok := nu.mutation.SignDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novel.FieldSignDate,
		})
	}
	if nu.mutation.SignDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: novel.FieldSignDate,
		})
	}
	if value, ok := nu.mutation.LeadingMan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldLeadingMan,
		})
	}
	if nu.mutation.LeadingManCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldLeadingMan,
		})
	}
	if value, ok := nu.mutation.LeadingLady(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldLeadingLady,
		})
	}
	if nu.mutation.LeadingLadyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldLeadingLady,
		})
	}
	if value, ok := nu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldRemark,
		})
	}
	if nu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldRemark,
		})
	}
	if value, ok := nu.mutation.MediaKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldMediaKey,
		})
	}
	if nu.mutation.MediaKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldMediaKey,
		})
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novel.FieldUpdatedAt,
		})
	}
	if value, ok := nu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldCreateBy,
		})
	}
	if value, ok := nu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldCreateBy,
		})
	}
	if value, ok := nu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldUpdateBy,
		})
	}
	if value, ok := nu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldUpdateBy,
		})
	}
	if value, ok := nu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldTenantId,
		})
	}
	if value, ok := nu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldTenantId,
		})
	}
	if nu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ChaptersTable,
			Columns: []string{novel.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !nu.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ChaptersTable,
			Columns: []string{novel.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ChaptersTable,
			Columns: []string{novel.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.PkgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   novel.PkgsTable,
			Columns: novel.PkgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: bookpackage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedPkgsIDs(); len(nodes) > 0 && !nu.mutation.PkgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   novel.PkgsTable,
			Columns: novel.PkgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: bookpackage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.PkgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   novel.PkgsTable,
			Columns: novel.PkgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: bookpackage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.ClassifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novel.ClassifyTable,
			Columns: []string{novel.ClassifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelclassify.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ClassifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novel.ClassifyTable,
			Columns: []string{novel.ClassifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelclassify.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NovelUpdateOne is the builder for updating a single Novel entity.
type NovelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NovelMutation
}

// SetClassifyId sets the "classifyId" field.
func (nuo *NovelUpdateOne) SetClassifyId(i int64) *NovelUpdateOne {
	nuo.mutation.SetClassifyId(i)
	return nuo
}

// SetNillableClassifyId sets the "classifyId" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableClassifyId(i *int64) *NovelUpdateOne {
	if i != nil {
		nuo.SetClassifyId(*i)
	}
	return nuo
}

// ClearClassifyId clears the value of the "classifyId" field.
func (nuo *NovelUpdateOne) ClearClassifyId() *NovelUpdateOne {
	nuo.mutation.ClearClassifyId()
	return nuo
}

// SetClassifyName sets the "classifyName" field.
func (nuo *NovelUpdateOne) SetClassifyName(s string) *NovelUpdateOne {
	nuo.mutation.SetClassifyName(s)
	return nuo
}

// SetNillableClassifyName sets the "classifyName" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableClassifyName(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetClassifyName(*s)
	}
	return nuo
}

// ClearClassifyName clears the value of the "classifyName" field.
func (nuo *NovelUpdateOne) ClearClassifyName() *NovelUpdateOne {
	nuo.mutation.ClearClassifyName()
	return nuo
}

// SetAuthorId sets the "authorId" field.
func (nuo *NovelUpdateOne) SetAuthorId(s string) *NovelUpdateOne {
	nuo.mutation.SetAuthorId(s)
	return nuo
}

// SetNillableAuthorId sets the "authorId" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableAuthorId(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetAuthorId(*s)
	}
	return nuo
}

// ClearAuthorId clears the value of the "authorId" field.
func (nuo *NovelUpdateOne) ClearAuthorId() *NovelUpdateOne {
	nuo.mutation.ClearAuthorId()
	return nuo
}

// SetTitle sets the "title" field.
func (nuo *NovelUpdateOne) SetTitle(s string) *NovelUpdateOne {
	nuo.mutation.SetTitle(s)
	return nuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableTitle(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetTitle(*s)
	}
	return nuo
}

// ClearTitle clears the value of the "title" field.
func (nuo *NovelUpdateOne) ClearTitle() *NovelUpdateOne {
	nuo.mutation.ClearTitle()
	return nuo
}

// SetSummary sets the "summary" field.
func (nuo *NovelUpdateOne) SetSummary(s string) *NovelUpdateOne {
	nuo.mutation.SetSummary(s)
	return nuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableSummary(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetSummary(*s)
	}
	return nuo
}

// ClearSummary clears the value of the "summary" field.
func (nuo *NovelUpdateOne) ClearSummary() *NovelUpdateOne {
	nuo.mutation.ClearSummary()
	return nuo
}

// SetAuthor sets the "author" field.
func (nuo *NovelUpdateOne) SetAuthor(s string) *NovelUpdateOne {
	nuo.mutation.SetAuthor(s)
	return nuo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableAuthor(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetAuthor(*s)
	}
	return nuo
}

// ClearAuthor clears the value of the "author" field.
func (nuo *NovelUpdateOne) ClearAuthor() *NovelUpdateOne {
	nuo.mutation.ClearAuthor()
	return nuo
}

// SetAnchor sets the "anchor" field.
func (nuo *NovelUpdateOne) SetAnchor(s string) *NovelUpdateOne {
	nuo.mutation.SetAnchor(s)
	return nuo
}

// SetNillableAnchor sets the "anchor" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableAnchor(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetAnchor(*s)
	}
	return nuo
}

// ClearAnchor clears the value of the "anchor" field.
func (nuo *NovelUpdateOne) ClearAnchor() *NovelUpdateOne {
	nuo.mutation.ClearAnchor()
	return nuo
}

// SetHits sets the "hits" field.
func (nuo *NovelUpdateOne) SetHits(i int64) *NovelUpdateOne {
	nuo.mutation.ResetHits()
	nuo.mutation.SetHits(i)
	return nuo
}

// SetNillableHits sets the "hits" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableHits(i *int64) *NovelUpdateOne {
	if i != nil {
		nuo.SetHits(*i)
	}
	return nuo
}

// AddHits adds i to the "hits" field.
func (nuo *NovelUpdateOne) AddHits(i int64) *NovelUpdateOne {
	nuo.mutation.AddHits(i)
	return nuo
}

// ClearHits clears the value of the "hits" field.
func (nuo *NovelUpdateOne) ClearHits() *NovelUpdateOne {
	nuo.mutation.ClearHits()
	return nuo
}

// SetKeywords sets the "keywords" field.
func (nuo *NovelUpdateOne) SetKeywords(s string) *NovelUpdateOne {
	nuo.mutation.SetKeywords(s)
	return nuo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableKeywords(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetKeywords(*s)
	}
	return nuo
}

// ClearKeywords clears the value of the "keywords" field.
func (nuo *NovelUpdateOne) ClearKeywords() *NovelUpdateOne {
	nuo.mutation.ClearKeywords()
	return nuo
}

// SetSource sets the "source" field.
func (nuo *NovelUpdateOne) SetSource(s string) *NovelUpdateOne {
	nuo.mutation.SetSource(s)
	return nuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableSource(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetSource(*s)
	}
	return nuo
}

// ClearSource clears the value of the "source" field.
func (nuo *NovelUpdateOne) ClearSource() *NovelUpdateOne {
	nuo.mutation.ClearSource()
	return nuo
}

// SetScore sets the "score" field.
func (nuo *NovelUpdateOne) SetScore(i int32) *NovelUpdateOne {
	nuo.mutation.ResetScore()
	nuo.mutation.SetScore(i)
	return nuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableScore(i *int32) *NovelUpdateOne {
	if i != nil {
		nuo.SetScore(*i)
	}
	return nuo
}

// AddScore adds i to the "score" field.
func (nuo *NovelUpdateOne) AddScore(i int32) *NovelUpdateOne {
	nuo.mutation.AddScore(i)
	return nuo
}

// ClearScore clears the value of the "score" field.
func (nuo *NovelUpdateOne) ClearScore() *NovelUpdateOne {
	nuo.mutation.ClearScore()
	return nuo
}

// SetCover sets the "cover" field.
func (nuo *NovelUpdateOne) SetCover(s string) *NovelUpdateOne {
	nuo.mutation.SetCover(s)
	return nuo
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableCover(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetCover(*s)
	}
	return nuo
}

// ClearCover clears the value of the "cover" field.
func (nuo *NovelUpdateOne) ClearCover() *NovelUpdateOne {
	nuo.mutation.ClearCover()
	return nuo
}

// SetTagIds sets the "tagIds" field.
func (nuo *NovelUpdateOne) SetTagIds(s string) *NovelUpdateOne {
	nuo.mutation.SetTagIds(s)
	return nuo
}

// SetNillableTagIds sets the "tagIds" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableTagIds(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetTagIds(*s)
	}
	return nuo
}

// ClearTagIds clears the value of the "tagIds" field.
func (nuo *NovelUpdateOne) ClearTagIds() *NovelUpdateOne {
	nuo.mutation.ClearTagIds()
	return nuo
}

// SetWordNum sets the "wordNum" field.
func (nuo *NovelUpdateOne) SetWordNum(i int32) *NovelUpdateOne {
	nuo.mutation.ResetWordNum()
	nuo.mutation.SetWordNum(i)
	return nuo
}

// SetNillableWordNum sets the "wordNum" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableWordNum(i *int32) *NovelUpdateOne {
	if i != nil {
		nuo.SetWordNum(*i)
	}
	return nuo
}

// AddWordNum adds i to the "wordNum" field.
func (nuo *NovelUpdateOne) AddWordNum(i int32) *NovelUpdateOne {
	nuo.mutation.AddWordNum(i)
	return nuo
}

// ClearWordNum clears the value of the "wordNum" field.
func (nuo *NovelUpdateOne) ClearWordNum() *NovelUpdateOne {
	nuo.mutation.ClearWordNum()
	return nuo
}

// SetFreeNum sets the "freeNum" field.
func (nuo *NovelUpdateOne) SetFreeNum(i int32) *NovelUpdateOne {
	nuo.mutation.ResetFreeNum()
	nuo.mutation.SetFreeNum(i)
	return nuo
}

// SetNillableFreeNum sets the "freeNum" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableFreeNum(i *int32) *NovelUpdateOne {
	if i != nil {
		nuo.SetFreeNum(*i)
	}
	return nuo
}

// AddFreeNum adds i to the "freeNum" field.
func (nuo *NovelUpdateOne) AddFreeNum(i int32) *NovelUpdateOne {
	nuo.mutation.AddFreeNum(i)
	return nuo
}

// ClearFreeNum clears the value of the "freeNum" field.
func (nuo *NovelUpdateOne) ClearFreeNum() *NovelUpdateOne {
	nuo.mutation.ClearFreeNum()
	return nuo
}

// SetOnlineState sets the "onlineState" field.
func (nuo *NovelUpdateOne) SetOnlineState(i int32) *NovelUpdateOne {
	nuo.mutation.ResetOnlineState()
	nuo.mutation.SetOnlineState(i)
	return nuo
}

// SetNillableOnlineState sets the "onlineState" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableOnlineState(i *int32) *NovelUpdateOne {
	if i != nil {
		nuo.SetOnlineState(*i)
	}
	return nuo
}

// AddOnlineState adds i to the "onlineState" field.
func (nuo *NovelUpdateOne) AddOnlineState(i int32) *NovelUpdateOne {
	nuo.mutation.AddOnlineState(i)
	return nuo
}

// ClearOnlineState clears the value of the "onlineState" field.
func (nuo *NovelUpdateOne) ClearOnlineState() *NovelUpdateOne {
	nuo.mutation.ClearOnlineState()
	return nuo
}

// SetPrice sets the "price" field.
func (nuo *NovelUpdateOne) SetPrice(i int64) *NovelUpdateOne {
	nuo.mutation.ResetPrice()
	nuo.mutation.SetPrice(i)
	return nuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillablePrice(i *int64) *NovelUpdateOne {
	if i != nil {
		nuo.SetPrice(*i)
	}
	return nuo
}

// AddPrice adds i to the "price" field.
func (nuo *NovelUpdateOne) AddPrice(i int64) *NovelUpdateOne {
	nuo.mutation.AddPrice(i)
	return nuo
}

// ClearPrice clears the value of the "price" field.
func (nuo *NovelUpdateOne) ClearPrice() *NovelUpdateOne {
	nuo.mutation.ClearPrice()
	return nuo
}

// SetPublish sets the "publish" field.
func (nuo *NovelUpdateOne) SetPublish(i int32) *NovelUpdateOne {
	nuo.mutation.ResetPublish()
	nuo.mutation.SetPublish(i)
	return nuo
}

// SetNillablePublish sets the "publish" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillablePublish(i *int32) *NovelUpdateOne {
	if i != nil {
		nuo.SetPublish(*i)
	}
	return nuo
}

// AddPublish adds i to the "publish" field.
func (nuo *NovelUpdateOne) AddPublish(i int32) *NovelUpdateOne {
	nuo.mutation.AddPublish(i)
	return nuo
}

// ClearPublish clears the value of the "publish" field.
func (nuo *NovelUpdateOne) ClearPublish() *NovelUpdateOne {
	nuo.mutation.ClearPublish()
	return nuo
}

// SetOriginalPrice sets the "originalPrice" field.
func (nuo *NovelUpdateOne) SetOriginalPrice(i int64) *NovelUpdateOne {
	nuo.mutation.ResetOriginalPrice()
	nuo.mutation.SetOriginalPrice(i)
	return nuo
}

// SetNillableOriginalPrice sets the "originalPrice" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableOriginalPrice(i *int64) *NovelUpdateOne {
	if i != nil {
		nuo.SetOriginalPrice(*i)
	}
	return nuo
}

// AddOriginalPrice adds i to the "originalPrice" field.
func (nuo *NovelUpdateOne) AddOriginalPrice(i int64) *NovelUpdateOne {
	nuo.mutation.AddOriginalPrice(i)
	return nuo
}

// ClearOriginalPrice clears the value of the "originalPrice" field.
func (nuo *NovelUpdateOne) ClearOriginalPrice() *NovelUpdateOne {
	nuo.mutation.ClearOriginalPrice()
	return nuo
}

// SetChapterPrice sets the "chapterPrice" field.
func (nuo *NovelUpdateOne) SetChapterPrice(i int32) *NovelUpdateOne {
	nuo.mutation.ResetChapterPrice()
	nuo.mutation.SetChapterPrice(i)
	return nuo
}

// SetNillableChapterPrice sets the "chapterPrice" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableChapterPrice(i *int32) *NovelUpdateOne {
	if i != nil {
		nuo.SetChapterPrice(*i)
	}
	return nuo
}

// AddChapterPrice adds i to the "chapterPrice" field.
func (nuo *NovelUpdateOne) AddChapterPrice(i int32) *NovelUpdateOne {
	nuo.mutation.AddChapterPrice(i)
	return nuo
}

// ClearChapterPrice clears the value of the "chapterPrice" field.
func (nuo *NovelUpdateOne) ClearChapterPrice() *NovelUpdateOne {
	nuo.mutation.ClearChapterPrice()
	return nuo
}

// SetChapterCount sets the "chapterCount" field.
func (nuo *NovelUpdateOne) SetChapterCount(i int32) *NovelUpdateOne {
	nuo.mutation.ResetChapterCount()
	nuo.mutation.SetChapterCount(i)
	return nuo
}

// SetNillableChapterCount sets the "chapterCount" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableChapterCount(i *int32) *NovelUpdateOne {
	if i != nil {
		nuo.SetChapterCount(*i)
	}
	return nuo
}

// AddChapterCount adds i to the "chapterCount" field.
func (nuo *NovelUpdateOne) AddChapterCount(i int32) *NovelUpdateOne {
	nuo.mutation.AddChapterCount(i)
	return nuo
}

// ClearChapterCount clears the value of the "chapterCount" field.
func (nuo *NovelUpdateOne) ClearChapterCount() *NovelUpdateOne {
	nuo.mutation.ClearChapterCount()
	return nuo
}

// SetSignType sets the "signType" field.
func (nuo *NovelUpdateOne) SetSignType(i int32) *NovelUpdateOne {
	nuo.mutation.ResetSignType()
	nuo.mutation.SetSignType(i)
	return nuo
}

// SetNillableSignType sets the "signType" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableSignType(i *int32) *NovelUpdateOne {
	if i != nil {
		nuo.SetSignType(*i)
	}
	return nuo
}

// AddSignType adds i to the "signType" field.
func (nuo *NovelUpdateOne) AddSignType(i int32) *NovelUpdateOne {
	nuo.mutation.AddSignType(i)
	return nuo
}

// ClearSignType clears the value of the "signType" field.
func (nuo *NovelUpdateOne) ClearSignType() *NovelUpdateOne {
	nuo.mutation.ClearSignType()
	return nuo
}

// SetSignDate sets the "signDate" field.
func (nuo *NovelUpdateOne) SetSignDate(t time.Time) *NovelUpdateOne {
	nuo.mutation.SetSignDate(t)
	return nuo
}

// SetNillableSignDate sets the "signDate" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableSignDate(t *time.Time) *NovelUpdateOne {
	if t != nil {
		nuo.SetSignDate(*t)
	}
	return nuo
}

// ClearSignDate clears the value of the "signDate" field.
func (nuo *NovelUpdateOne) ClearSignDate() *NovelUpdateOne {
	nuo.mutation.ClearSignDate()
	return nuo
}

// SetLeadingMan sets the "leadingMan" field.
func (nuo *NovelUpdateOne) SetLeadingMan(s string) *NovelUpdateOne {
	nuo.mutation.SetLeadingMan(s)
	return nuo
}

// SetNillableLeadingMan sets the "leadingMan" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableLeadingMan(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetLeadingMan(*s)
	}
	return nuo
}

// ClearLeadingMan clears the value of the "leadingMan" field.
func (nuo *NovelUpdateOne) ClearLeadingMan() *NovelUpdateOne {
	nuo.mutation.ClearLeadingMan()
	return nuo
}

// SetLeadingLady sets the "leadingLady" field.
func (nuo *NovelUpdateOne) SetLeadingLady(s string) *NovelUpdateOne {
	nuo.mutation.SetLeadingLady(s)
	return nuo
}

// SetNillableLeadingLady sets the "leadingLady" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableLeadingLady(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetLeadingLady(*s)
	}
	return nuo
}

// ClearLeadingLady clears the value of the "leadingLady" field.
func (nuo *NovelUpdateOne) ClearLeadingLady() *NovelUpdateOne {
	nuo.mutation.ClearLeadingLady()
	return nuo
}

// SetRemark sets the "remark" field.
func (nuo *NovelUpdateOne) SetRemark(s string) *NovelUpdateOne {
	nuo.mutation.SetRemark(s)
	return nuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableRemark(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetRemark(*s)
	}
	return nuo
}

// ClearRemark clears the value of the "remark" field.
func (nuo *NovelUpdateOne) ClearRemark() *NovelUpdateOne {
	nuo.mutation.ClearRemark()
	return nuo
}

// SetMediaKey sets the "mediaKey" field.
func (nuo *NovelUpdateOne) SetMediaKey(s string) *NovelUpdateOne {
	nuo.mutation.SetMediaKey(s)
	return nuo
}

// SetNillableMediaKey sets the "mediaKey" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableMediaKey(s *string) *NovelUpdateOne {
	if s != nil {
		nuo.SetMediaKey(*s)
	}
	return nuo
}

// ClearMediaKey clears the value of the "mediaKey" field.
func (nuo *NovelUpdateOne) ClearMediaKey() *NovelUpdateOne {
	nuo.mutation.ClearMediaKey()
	return nuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (nuo *NovelUpdateOne) SetUpdatedAt(t time.Time) *NovelUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// SetCreateBy sets the "createBy" field.
func (nuo *NovelUpdateOne) SetCreateBy(i int64) *NovelUpdateOne {
	nuo.mutation.ResetCreateBy()
	nuo.mutation.SetCreateBy(i)
	return nuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableCreateBy(i *int64) *NovelUpdateOne {
	if i != nil {
		nuo.SetCreateBy(*i)
	}
	return nuo
}

// AddCreateBy adds i to the "createBy" field.
func (nuo *NovelUpdateOne) AddCreateBy(i int64) *NovelUpdateOne {
	nuo.mutation.AddCreateBy(i)
	return nuo
}

// SetUpdateBy sets the "updateBy" field.
func (nuo *NovelUpdateOne) SetUpdateBy(i int64) *NovelUpdateOne {
	nuo.mutation.ResetUpdateBy()
	nuo.mutation.SetUpdateBy(i)
	return nuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableUpdateBy(i *int64) *NovelUpdateOne {
	if i != nil {
		nuo.SetUpdateBy(*i)
	}
	return nuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (nuo *NovelUpdateOne) AddUpdateBy(i int64) *NovelUpdateOne {
	nuo.mutation.AddUpdateBy(i)
	return nuo
}

// SetTenantId sets the "tenantId" field.
func (nuo *NovelUpdateOne) SetTenantId(i int64) *NovelUpdateOne {
	nuo.mutation.ResetTenantId()
	nuo.mutation.SetTenantId(i)
	return nuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableTenantId(i *int64) *NovelUpdateOne {
	if i != nil {
		nuo.SetTenantId(*i)
	}
	return nuo
}

// AddTenantId adds i to the "tenantId" field.
func (nuo *NovelUpdateOne) AddTenantId(i int64) *NovelUpdateOne {
	nuo.mutation.AddTenantId(i)
	return nuo
}

// AddChapterIDs adds the "chapters" edge to the NovelChapter entity by IDs.
func (nuo *NovelUpdateOne) AddChapterIDs(ids ...int64) *NovelUpdateOne {
	nuo.mutation.AddChapterIDs(ids...)
	return nuo
}

// AddChapters adds the "chapters" edges to the NovelChapter entity.
func (nuo *NovelUpdateOne) AddChapters(n ...*NovelChapter) *NovelUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddChapterIDs(ids...)
}

// AddPkgIDs adds the "pkgs" edge to the BookPackage entity by IDs.
func (nuo *NovelUpdateOne) AddPkgIDs(ids ...int64) *NovelUpdateOne {
	nuo.mutation.AddPkgIDs(ids...)
	return nuo
}

// AddPkgs adds the "pkgs" edges to the BookPackage entity.
func (nuo *NovelUpdateOne) AddPkgs(b ...*BookPackage) *NovelUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nuo.AddPkgIDs(ids...)
}

// SetClassifyID sets the "classify" edge to the NovelClassify entity by ID.
func (nuo *NovelUpdateOne) SetClassifyID(id int64) *NovelUpdateOne {
	nuo.mutation.SetClassifyID(id)
	return nuo
}

// SetNillableClassifyID sets the "classify" edge to the NovelClassify entity by ID if the given value is not nil.
func (nuo *NovelUpdateOne) SetNillableClassifyID(id *int64) *NovelUpdateOne {
	if id != nil {
		nuo = nuo.SetClassifyID(*id)
	}
	return nuo
}

// SetClassify sets the "classify" edge to the NovelClassify entity.
func (nuo *NovelUpdateOne) SetClassify(n *NovelClassify) *NovelUpdateOne {
	return nuo.SetClassifyID(n.ID)
}

// Mutation returns the NovelMutation object of the builder.
func (nuo *NovelUpdateOne) Mutation() *NovelMutation {
	return nuo.mutation
}

// ClearChapters clears all "chapters" edges to the NovelChapter entity.
func (nuo *NovelUpdateOne) ClearChapters() *NovelUpdateOne {
	nuo.mutation.ClearChapters()
	return nuo
}

// RemoveChapterIDs removes the "chapters" edge to NovelChapter entities by IDs.
func (nuo *NovelUpdateOne) RemoveChapterIDs(ids ...int64) *NovelUpdateOne {
	nuo.mutation.RemoveChapterIDs(ids...)
	return nuo
}

// RemoveChapters removes "chapters" edges to NovelChapter entities.
func (nuo *NovelUpdateOne) RemoveChapters(n ...*NovelChapter) *NovelUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveChapterIDs(ids...)
}

// ClearPkgs clears all "pkgs" edges to the BookPackage entity.
func (nuo *NovelUpdateOne) ClearPkgs() *NovelUpdateOne {
	nuo.mutation.ClearPkgs()
	return nuo
}

// RemovePkgIDs removes the "pkgs" edge to BookPackage entities by IDs.
func (nuo *NovelUpdateOne) RemovePkgIDs(ids ...int64) *NovelUpdateOne {
	nuo.mutation.RemovePkgIDs(ids...)
	return nuo
}

// RemovePkgs removes "pkgs" edges to BookPackage entities.
func (nuo *NovelUpdateOne) RemovePkgs(b ...*BookPackage) *NovelUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return nuo.RemovePkgIDs(ids...)
}

// ClearClassify clears the "classify" edge to the NovelClassify entity.
func (nuo *NovelUpdateOne) ClearClassify() *NovelUpdateOne {
	nuo.mutation.ClearClassify()
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NovelUpdateOne) Select(field string, fields ...string) *NovelUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Novel entity.
func (nuo *NovelUpdateOne) Save(ctx context.Context) (*Novel, error) {
	var (
		err  error
		node *Novel
	)
	nuo.defaults()
	if len(nuo.hooks) == 0 {
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NovelUpdateOne) SaveX(ctx context.Context) *Novel {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NovelUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NovelUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NovelUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := novel.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

func (nuo *NovelUpdateOne) sqlSave(ctx context.Context) (_node *Novel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novel.Table,
			Columns: novel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novel.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Novel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, novel.FieldID)
		for _, f := range fields {
			if !novel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != novel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.ClassifyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldClassifyName,
		})
	}
	if nuo.mutation.ClassifyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldClassifyName,
		})
	}
	if value, ok := nuo.mutation.AuthorId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldAuthorId,
		})
	}
	if nuo.mutation.AuthorIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldAuthorId,
		})
	}
	if value, ok := nuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldTitle,
		})
	}
	if nuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldTitle,
		})
	}
	if value, ok := nuo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldSummary,
		})
	}
	if nuo.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldSummary,
		})
	}
	if value, ok := nuo.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldAuthor,
		})
	}
	if nuo.mutation.AuthorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldAuthor,
		})
	}
	if value, ok := nuo.mutation.Anchor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldAnchor,
		})
	}
	if nuo.mutation.AnchorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldAnchor,
		})
	}
	if value, ok := nuo.mutation.Hits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldHits,
		})
	}
	if value, ok := nuo.mutation.AddedHits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldHits,
		})
	}
	if nuo.mutation.HitsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novel.FieldHits,
		})
	}
	if value, ok := nuo.mutation.Keywords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldKeywords,
		})
	}
	if nuo.mutation.KeywordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldKeywords,
		})
	}
	if value, ok := nuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldSource,
		})
	}
	if nuo.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldSource,
		})
	}
	if value, ok := nuo.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldScore,
		})
	}
	if value, ok := nuo.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldScore,
		})
	}
	if nuo.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldScore,
		})
	}
	if value, ok := nuo.mutation.Cover(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldCover,
		})
	}
	if nuo.mutation.CoverCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldCover,
		})
	}
	if value, ok := nuo.mutation.TagIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldTagIds,
		})
	}
	if nuo.mutation.TagIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldTagIds,
		})
	}
	if value, ok := nuo.mutation.WordNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldWordNum,
		})
	}
	if value, ok := nuo.mutation.AddedWordNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldWordNum,
		})
	}
	if nuo.mutation.WordNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldWordNum,
		})
	}
	if value, ok := nuo.mutation.FreeNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldFreeNum,
		})
	}
	if value, ok := nuo.mutation.AddedFreeNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldFreeNum,
		})
	}
	if nuo.mutation.FreeNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldFreeNum,
		})
	}
	if value, ok := nuo.mutation.OnlineState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldOnlineState,
		})
	}
	if value, ok := nuo.mutation.AddedOnlineState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldOnlineState,
		})
	}
	if nuo.mutation.OnlineStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldOnlineState,
		})
	}
	if value, ok := nuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldPrice,
		})
	}
	if value, ok := nuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldPrice,
		})
	}
	if nuo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novel.FieldPrice,
		})
	}
	if value, ok := nuo.mutation.Publish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldPublish,
		})
	}
	if value, ok := nuo.mutation.AddedPublish(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldPublish,
		})
	}
	if nuo.mutation.PublishCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldPublish,
		})
	}
	if value, ok := nuo.mutation.OriginalPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldOriginalPrice,
		})
	}
	if value, ok := nuo.mutation.AddedOriginalPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldOriginalPrice,
		})
	}
	if nuo.mutation.OriginalPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novel.FieldOriginalPrice,
		})
	}
	if value, ok := nuo.mutation.ChapterPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldChapterPrice,
		})
	}
	if value, ok := nuo.mutation.AddedChapterPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldChapterPrice,
		})
	}
	if nuo.mutation.ChapterPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldChapterPrice,
		})
	}
	if value, ok := nuo.mutation.ChapterCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldChapterCount,
		})
	}
	if value, ok := nuo.mutation.AddedChapterCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldChapterCount,
		})
	}
	if nuo.mutation.ChapterCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldChapterCount,
		})
	}
	if value, ok := nuo.mutation.SignType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldSignType,
		})
	}
	if value, ok := nuo.mutation.AddedSignType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novel.FieldSignType,
		})
	}
	if nuo.mutation.SignTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novel.FieldSignType,
		})
	}
	if value, ok := nuo.mutation.SignDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novel.FieldSignDate,
		})
	}
	if nuo.mutation.SignDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: novel.FieldSignDate,
		})
	}
	if value, ok := nuo.mutation.LeadingMan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldLeadingMan,
		})
	}
	if nuo.mutation.LeadingManCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldLeadingMan,
		})
	}
	if value, ok := nuo.mutation.LeadingLady(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldLeadingLady,
		})
	}
	if nuo.mutation.LeadingLadyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldLeadingLady,
		})
	}
	if value, ok := nuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldRemark,
		})
	}
	if nuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldRemark,
		})
	}
	if value, ok := nuo.mutation.MediaKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novel.FieldMediaKey,
		})
	}
	if nuo.mutation.MediaKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novel.FieldMediaKey,
		})
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novel.FieldUpdatedAt,
		})
	}
	if value, ok := nuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldCreateBy,
		})
	}
	if value, ok := nuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldCreateBy,
		})
	}
	if value, ok := nuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldUpdateBy,
		})
	}
	if value, ok := nuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldUpdateBy,
		})
	}
	if value, ok := nuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldTenantId,
		})
	}
	if value, ok := nuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novel.FieldTenantId,
		})
	}
	if nuo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ChaptersTable,
			Columns: []string{novel.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !nuo.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ChaptersTable,
			Columns: []string{novel.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novel.ChaptersTable,
			Columns: []string{novel.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelchapter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.PkgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   novel.PkgsTable,
			Columns: novel.PkgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: bookpackage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedPkgsIDs(); len(nodes) > 0 && !nuo.mutation.PkgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   novel.PkgsTable,
			Columns: novel.PkgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: bookpackage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.PkgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   novel.PkgsTable,
			Columns: novel.PkgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: bookpackage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.ClassifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novel.ClassifyTable,
			Columns: []string{novel.ClassifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelclassify.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ClassifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novel.ClassifyTable,
			Columns: []string{novel.ClassifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelclassify.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Novel{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
