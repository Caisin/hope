// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/tasklog/v1/task_log.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskLogClient is the client API for TaskLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskLogClient interface {
	// 分页查询TaskLog
	GetTaskLogPage(ctx context.Context, in *TaskLogPageReq, opts ...grpc.CallOption) (*TaskLogPageReply, error)
	// 获取TaskLog
	GetTaskLog(ctx context.Context, in *TaskLogReq, opts ...grpc.CallOption) (*TaskLogReply, error)
	// 更新TaskLog
	UpdateTaskLog(ctx context.Context, in *TaskLogUpdateReq, opts ...grpc.CallOption) (*TaskLogUpdateReply, error)
	// 创建TaskLog
	CreateTaskLog(ctx context.Context, in *TaskLogCreateReq, opts ...grpc.CallOption) (*TaskLogCreateReply, error)
	// 删除TaskLog
	DeleteTaskLog(ctx context.Context, in *TaskLogDeleteReq, opts ...grpc.CallOption) (*TaskLogDeleteReply, error)
	// 批量删除TaskLog
	BatchDeleteTaskLog(ctx context.Context, in *TaskLogBatchDeleteReq, opts ...grpc.CallOption) (*TaskLogDeleteReply, error)
}

type taskLogClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskLogClient(cc grpc.ClientConnInterface) TaskLogClient {
	return &taskLogClient{cc}
}

func (c *taskLogClient) GetTaskLogPage(ctx context.Context, in *TaskLogPageReq, opts ...grpc.CallOption) (*TaskLogPageReply, error) {
	out := new(TaskLogPageReply)
	err := c.cc.Invoke(ctx, "/tasklog.v1.TaskLog/GetTaskLogPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLogClient) GetTaskLog(ctx context.Context, in *TaskLogReq, opts ...grpc.CallOption) (*TaskLogReply, error) {
	out := new(TaskLogReply)
	err := c.cc.Invoke(ctx, "/tasklog.v1.TaskLog/GetTaskLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLogClient) UpdateTaskLog(ctx context.Context, in *TaskLogUpdateReq, opts ...grpc.CallOption) (*TaskLogUpdateReply, error) {
	out := new(TaskLogUpdateReply)
	err := c.cc.Invoke(ctx, "/tasklog.v1.TaskLog/UpdateTaskLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLogClient) CreateTaskLog(ctx context.Context, in *TaskLogCreateReq, opts ...grpc.CallOption) (*TaskLogCreateReply, error) {
	out := new(TaskLogCreateReply)
	err := c.cc.Invoke(ctx, "/tasklog.v1.TaskLog/CreateTaskLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLogClient) DeleteTaskLog(ctx context.Context, in *TaskLogDeleteReq, opts ...grpc.CallOption) (*TaskLogDeleteReply, error) {
	out := new(TaskLogDeleteReply)
	err := c.cc.Invoke(ctx, "/tasklog.v1.TaskLog/DeleteTaskLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLogClient) BatchDeleteTaskLog(ctx context.Context, in *TaskLogBatchDeleteReq, opts ...grpc.CallOption) (*TaskLogDeleteReply, error) {
	out := new(TaskLogDeleteReply)
	err := c.cc.Invoke(ctx, "/tasklog.v1.TaskLog/BatchDeleteTaskLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskLogServer is the server API for TaskLog service.
// All implementations must embed UnimplementedTaskLogServer
// for forward compatibility
type TaskLogServer interface {
	// 分页查询TaskLog
	GetTaskLogPage(context.Context, *TaskLogPageReq) (*TaskLogPageReply, error)
	// 获取TaskLog
	GetTaskLog(context.Context, *TaskLogReq) (*TaskLogReply, error)
	// 更新TaskLog
	UpdateTaskLog(context.Context, *TaskLogUpdateReq) (*TaskLogUpdateReply, error)
	// 创建TaskLog
	CreateTaskLog(context.Context, *TaskLogCreateReq) (*TaskLogCreateReply, error)
	// 删除TaskLog
	DeleteTaskLog(context.Context, *TaskLogDeleteReq) (*TaskLogDeleteReply, error)
	// 批量删除TaskLog
	BatchDeleteTaskLog(context.Context, *TaskLogBatchDeleteReq) (*TaskLogDeleteReply, error)
	mustEmbedUnimplementedTaskLogServer()
}

// UnimplementedTaskLogServer must be embedded to have forward compatible implementations.
type UnimplementedTaskLogServer struct {
}

func (UnimplementedTaskLogServer) GetTaskLogPage(context.Context, *TaskLogPageReq) (*TaskLogPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskLogPage not implemented")
}
func (UnimplementedTaskLogServer) GetTaskLog(context.Context, *TaskLogReq) (*TaskLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskLog not implemented")
}
func (UnimplementedTaskLogServer) UpdateTaskLog(context.Context, *TaskLogUpdateReq) (*TaskLogUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskLog not implemented")
}
func (UnimplementedTaskLogServer) CreateTaskLog(context.Context, *TaskLogCreateReq) (*TaskLogCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskLog not implemented")
}
func (UnimplementedTaskLogServer) DeleteTaskLog(context.Context, *TaskLogDeleteReq) (*TaskLogDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskLog not implemented")
}
func (UnimplementedTaskLogServer) BatchDeleteTaskLog(context.Context, *TaskLogBatchDeleteReq) (*TaskLogDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteTaskLog not implemented")
}
func (UnimplementedTaskLogServer) mustEmbedUnimplementedTaskLogServer() {}

// UnsafeTaskLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskLogServer will
// result in compilation errors.
type UnsafeTaskLogServer interface {
	mustEmbedUnimplementedTaskLogServer()
}

func RegisterTaskLogServer(s grpc.ServiceRegistrar, srv TaskLogServer) {
	s.RegisterService(&TaskLog_ServiceDesc, srv)
}

func _TaskLog_GetTaskLogPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLogPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLogServer).GetTaskLogPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasklog.v1.TaskLog/GetTaskLogPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLogServer).GetTaskLogPage(ctx, req.(*TaskLogPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLog_GetTaskLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLogServer).GetTaskLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasklog.v1.TaskLog/GetTaskLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLogServer).GetTaskLog(ctx, req.(*TaskLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLog_UpdateTaskLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLogUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLogServer).UpdateTaskLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasklog.v1.TaskLog/UpdateTaskLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLogServer).UpdateTaskLog(ctx, req.(*TaskLogUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLog_CreateTaskLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLogCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLogServer).CreateTaskLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasklog.v1.TaskLog/CreateTaskLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLogServer).CreateTaskLog(ctx, req.(*TaskLogCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLog_DeleteTaskLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLogServer).DeleteTaskLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasklog.v1.TaskLog/DeleteTaskLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLogServer).DeleteTaskLog(ctx, req.(*TaskLogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLog_BatchDeleteTaskLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLogBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLogServer).BatchDeleteTaskLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasklog.v1.TaskLog/BatchDeleteTaskLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLogServer).BatchDeleteTaskLog(ctx, req.(*TaskLogBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskLog_ServiceDesc is the grpc.ServiceDesc for TaskLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tasklog.v1.TaskLog",
	HandlerType: (*TaskLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskLogPage",
			Handler:    _TaskLog_GetTaskLogPage_Handler,
		},
		{
			MethodName: "GetTaskLog",
			Handler:    _TaskLog_GetTaskLog_Handler,
		},
		{
			MethodName: "UpdateTaskLog",
			Handler:    _TaskLog_UpdateTaskLog_Handler,
		},
		{
			MethodName: "CreateTaskLog",
			Handler:    _TaskLog_CreateTaskLog_Handler,
		},
		{
			MethodName: "DeleteTaskLog",
			Handler:    _TaskLog_DeleteTaskLog_Handler,
		},
		{
			MethodName: "BatchDeleteTaskLog",
			Handler:    _TaskLog_BatchDeleteTaskLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/tasklog/v1/task_log.proto",
}
