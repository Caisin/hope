// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/assetchangelog"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AssetChangeLogUpdate is the builder for updating AssetChangeLog entities.
type AssetChangeLogUpdate struct {
	config
	hooks    []Hook
	mutation *AssetChangeLogMutation
}

// Where appends a list predicates to the AssetChangeLogUpdate builder.
func (aclu *AssetChangeLogUpdate) Where(ps ...predicate.AssetChangeLog) *AssetChangeLogUpdate {
	aclu.mutation.Where(ps...)
	return aclu
}

// SetOrderId sets the "orderId" field.
func (aclu *AssetChangeLogUpdate) SetOrderId(s string) *AssetChangeLogUpdate {
	aclu.mutation.SetOrderId(s)
	return aclu
}

// SetNillableOrderId sets the "orderId" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableOrderId(s *string) *AssetChangeLogUpdate {
	if s != nil {
		aclu.SetOrderId(*s)
	}
	return aclu
}

// ClearOrderId clears the value of the "orderId" field.
func (aclu *AssetChangeLogUpdate) ClearOrderId() *AssetChangeLogUpdate {
	aclu.mutation.ClearOrderId()
	return aclu
}

// SetBalanceId sets the "balanceId" field.
func (aclu *AssetChangeLogUpdate) SetBalanceId(i int64) *AssetChangeLogUpdate {
	aclu.mutation.ResetBalanceId()
	aclu.mutation.SetBalanceId(i)
	return aclu
}

// SetNillableBalanceId sets the "balanceId" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableBalanceId(i *int64) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetBalanceId(*i)
	}
	return aclu
}

// AddBalanceId adds i to the "balanceId" field.
func (aclu *AssetChangeLogUpdate) AddBalanceId(i int64) *AssetChangeLogUpdate {
	aclu.mutation.AddBalanceId(i)
	return aclu
}

// ClearBalanceId clears the value of the "balanceId" field.
func (aclu *AssetChangeLogUpdate) ClearBalanceId() *AssetChangeLogUpdate {
	aclu.mutation.ClearBalanceId()
	return aclu
}

// SetEventId sets the "eventId" field.
func (aclu *AssetChangeLogUpdate) SetEventId(i int64) *AssetChangeLogUpdate {
	aclu.mutation.ResetEventId()
	aclu.mutation.SetEventId(i)
	return aclu
}

// SetNillableEventId sets the "eventId" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableEventId(i *int64) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetEventId(*i)
	}
	return aclu
}

// AddEventId adds i to the "eventId" field.
func (aclu *AssetChangeLogUpdate) AddEventId(i int64) *AssetChangeLogUpdate {
	aclu.mutation.AddEventId(i)
	return aclu
}

// ClearEventId clears the value of the "eventId" field.
func (aclu *AssetChangeLogUpdate) ClearEventId() *AssetChangeLogUpdate {
	aclu.mutation.ClearEventId()
	return aclu
}

// SetUserId sets the "userId" field.
func (aclu *AssetChangeLogUpdate) SetUserId(i int64) *AssetChangeLogUpdate {
	aclu.mutation.ResetUserId()
	aclu.mutation.SetUserId(i)
	return aclu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableUserId(i *int64) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetUserId(*i)
	}
	return aclu
}

// AddUserId adds i to the "userId" field.
func (aclu *AssetChangeLogUpdate) AddUserId(i int64) *AssetChangeLogUpdate {
	aclu.mutation.AddUserId(i)
	return aclu
}

// ClearUserId clears the value of the "userId" field.
func (aclu *AssetChangeLogUpdate) ClearUserId() *AssetChangeLogUpdate {
	aclu.mutation.ClearUserId()
	return aclu
}

// SetAssetItemId sets the "assetItemId" field.
func (aclu *AssetChangeLogUpdate) SetAssetItemId(i int32) *AssetChangeLogUpdate {
	aclu.mutation.ResetAssetItemId()
	aclu.mutation.SetAssetItemId(i)
	return aclu
}

// SetNillableAssetItemId sets the "assetItemId" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableAssetItemId(i *int32) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetAssetItemId(*i)
	}
	return aclu
}

// AddAssetItemId adds i to the "assetItemId" field.
func (aclu *AssetChangeLogUpdate) AddAssetItemId(i int32) *AssetChangeLogUpdate {
	aclu.mutation.AddAssetItemId(i)
	return aclu
}

// ClearAssetItemId clears the value of the "assetItemId" field.
func (aclu *AssetChangeLogUpdate) ClearAssetItemId() *AssetChangeLogUpdate {
	aclu.mutation.ClearAssetItemId()
	return aclu
}

// SetAmount sets the "amount" field.
func (aclu *AssetChangeLogUpdate) SetAmount(i int64) *AssetChangeLogUpdate {
	aclu.mutation.ResetAmount()
	aclu.mutation.SetAmount(i)
	return aclu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableAmount(i *int64) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetAmount(*i)
	}
	return aclu
}

// AddAmount adds i to the "amount" field.
func (aclu *AssetChangeLogUpdate) AddAmount(i int64) *AssetChangeLogUpdate {
	aclu.mutation.AddAmount(i)
	return aclu
}

// ClearAmount clears the value of the "amount" field.
func (aclu *AssetChangeLogUpdate) ClearAmount() *AssetChangeLogUpdate {
	aclu.mutation.ClearAmount()
	return aclu
}

// SetOldBalance sets the "oldBalance" field.
func (aclu *AssetChangeLogUpdate) SetOldBalance(i int64) *AssetChangeLogUpdate {
	aclu.mutation.ResetOldBalance()
	aclu.mutation.SetOldBalance(i)
	return aclu
}

// SetNillableOldBalance sets the "oldBalance" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableOldBalance(i *int64) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetOldBalance(*i)
	}
	return aclu
}

// AddOldBalance adds i to the "oldBalance" field.
func (aclu *AssetChangeLogUpdate) AddOldBalance(i int64) *AssetChangeLogUpdate {
	aclu.mutation.AddOldBalance(i)
	return aclu
}

// ClearOldBalance clears the value of the "oldBalance" field.
func (aclu *AssetChangeLogUpdate) ClearOldBalance() *AssetChangeLogUpdate {
	aclu.mutation.ClearOldBalance()
	return aclu
}

// SetNewBalance sets the "newBalance" field.
func (aclu *AssetChangeLogUpdate) SetNewBalance(i int64) *AssetChangeLogUpdate {
	aclu.mutation.ResetNewBalance()
	aclu.mutation.SetNewBalance(i)
	return aclu
}

// SetNillableNewBalance sets the "newBalance" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableNewBalance(i *int64) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetNewBalance(*i)
	}
	return aclu
}

// AddNewBalance adds i to the "newBalance" field.
func (aclu *AssetChangeLogUpdate) AddNewBalance(i int64) *AssetChangeLogUpdate {
	aclu.mutation.AddNewBalance(i)
	return aclu
}

// ClearNewBalance clears the value of the "newBalance" field.
func (aclu *AssetChangeLogUpdate) ClearNewBalance() *AssetChangeLogUpdate {
	aclu.mutation.ClearNewBalance()
	return aclu
}

// SetRemark sets the "remark" field.
func (aclu *AssetChangeLogUpdate) SetRemark(s string) *AssetChangeLogUpdate {
	aclu.mutation.SetRemark(s)
	return aclu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableRemark(s *string) *AssetChangeLogUpdate {
	if s != nil {
		aclu.SetRemark(*s)
	}
	return aclu
}

// ClearRemark clears the value of the "remark" field.
func (aclu *AssetChangeLogUpdate) ClearRemark() *AssetChangeLogUpdate {
	aclu.mutation.ClearRemark()
	return aclu
}

// SetUpdatedAt sets the "updatedAt" field.
func (aclu *AssetChangeLogUpdate) SetUpdatedAt(t time.Time) *AssetChangeLogUpdate {
	aclu.mutation.SetUpdatedAt(t)
	return aclu
}

// SetCreateBy sets the "createBy" field.
func (aclu *AssetChangeLogUpdate) SetCreateBy(i int64) *AssetChangeLogUpdate {
	aclu.mutation.ResetCreateBy()
	aclu.mutation.SetCreateBy(i)
	return aclu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableCreateBy(i *int64) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetCreateBy(*i)
	}
	return aclu
}

// AddCreateBy adds i to the "createBy" field.
func (aclu *AssetChangeLogUpdate) AddCreateBy(i int64) *AssetChangeLogUpdate {
	aclu.mutation.AddCreateBy(i)
	return aclu
}

// SetUpdateBy sets the "updateBy" field.
func (aclu *AssetChangeLogUpdate) SetUpdateBy(i int64) *AssetChangeLogUpdate {
	aclu.mutation.ResetUpdateBy()
	aclu.mutation.SetUpdateBy(i)
	return aclu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableUpdateBy(i *int64) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetUpdateBy(*i)
	}
	return aclu
}

// AddUpdateBy adds i to the "updateBy" field.
func (aclu *AssetChangeLogUpdate) AddUpdateBy(i int64) *AssetChangeLogUpdate {
	aclu.mutation.AddUpdateBy(i)
	return aclu
}

// SetTenantId sets the "tenantId" field.
func (aclu *AssetChangeLogUpdate) SetTenantId(i int64) *AssetChangeLogUpdate {
	aclu.mutation.ResetTenantId()
	aclu.mutation.SetTenantId(i)
	return aclu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableTenantId(i *int64) *AssetChangeLogUpdate {
	if i != nil {
		aclu.SetTenantId(*i)
	}
	return aclu
}

// AddTenantId adds i to the "tenantId" field.
func (aclu *AssetChangeLogUpdate) AddTenantId(i int64) *AssetChangeLogUpdate {
	aclu.mutation.AddTenantId(i)
	return aclu
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (aclu *AssetChangeLogUpdate) SetUserID(id int64) *AssetChangeLogUpdate {
	aclu.mutation.SetUserID(id)
	return aclu
}

// SetNillableUserID sets the "user" edge to the SocialUser entity by ID if the given value is not nil.
func (aclu *AssetChangeLogUpdate) SetNillableUserID(id *int64) *AssetChangeLogUpdate {
	if id != nil {
		aclu = aclu.SetUserID(*id)
	}
	return aclu
}

// SetUser sets the "user" edge to the SocialUser entity.
func (aclu *AssetChangeLogUpdate) SetUser(s *SocialUser) *AssetChangeLogUpdate {
	return aclu.SetUserID(s.ID)
}

// Mutation returns the AssetChangeLogMutation object of the builder.
func (aclu *AssetChangeLogUpdate) Mutation() *AssetChangeLogMutation {
	return aclu.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (aclu *AssetChangeLogUpdate) ClearUser() *AssetChangeLogUpdate {
	aclu.mutation.ClearUser()
	return aclu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aclu *AssetChangeLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aclu.defaults()
	if len(aclu.hooks) == 0 {
		affected, err = aclu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssetChangeLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aclu.mutation = mutation
			affected, err = aclu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aclu.hooks) - 1; i >= 0; i-- {
			if aclu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aclu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aclu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aclu *AssetChangeLogUpdate) SaveX(ctx context.Context) int {
	affected, err := aclu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aclu *AssetChangeLogUpdate) Exec(ctx context.Context) error {
	_, err := aclu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aclu *AssetChangeLogUpdate) ExecX(ctx context.Context) {
	if err := aclu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aclu *AssetChangeLogUpdate) defaults() {
	if _, ok := aclu.mutation.UpdatedAt(); !ok {
		v := assetchangelog.UpdateDefaultUpdatedAt()
		aclu.mutation.SetUpdatedAt(v)
	}
}

func (aclu *AssetChangeLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assetchangelog.Table,
			Columns: assetchangelog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: assetchangelog.FieldID,
			},
		},
	}
	if ps := aclu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aclu.mutation.OrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assetchangelog.FieldOrderId,
		})
	}
	if aclu.mutation.OrderIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assetchangelog.FieldOrderId,
		})
	}
	if value, ok := aclu.mutation.BalanceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldBalanceId,
		})
	}
	if value, ok := aclu.mutation.AddedBalanceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldBalanceId,
		})
	}
	if aclu.mutation.BalanceIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldBalanceId,
		})
	}
	if value, ok := aclu.mutation.EventId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldEventId,
		})
	}
	if value, ok := aclu.mutation.AddedEventId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldEventId,
		})
	}
	if aclu.mutation.EventIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldEventId,
		})
	}
	if value, ok := aclu.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldUserId,
		})
	}
	if value, ok := aclu.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldUserId,
		})
	}
	if aclu.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldUserId,
		})
	}
	if value, ok := aclu.mutation.AssetItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: assetchangelog.FieldAssetItemId,
		})
	}
	if value, ok := aclu.mutation.AddedAssetItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: assetchangelog.FieldAssetItemId,
		})
	}
	if aclu.mutation.AssetItemIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: assetchangelog.FieldAssetItemId,
		})
	}
	if value, ok := aclu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldAmount,
		})
	}
	if value, ok := aclu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldAmount,
		})
	}
	if aclu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldAmount,
		})
	}
	if value, ok := aclu.mutation.OldBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldOldBalance,
		})
	}
	if value, ok := aclu.mutation.AddedOldBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldOldBalance,
		})
	}
	if aclu.mutation.OldBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldOldBalance,
		})
	}
	if value, ok := aclu.mutation.NewBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldNewBalance,
		})
	}
	if value, ok := aclu.mutation.AddedNewBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldNewBalance,
		})
	}
	if aclu.mutation.NewBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldNewBalance,
		})
	}
	if value, ok := aclu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assetchangelog.FieldRemark,
		})
	}
	if aclu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assetchangelog.FieldRemark,
		})
	}
	if value, ok := aclu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assetchangelog.FieldUpdatedAt,
		})
	}
	if value, ok := aclu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldCreateBy,
		})
	}
	if value, ok := aclu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldCreateBy,
		})
	}
	if value, ok := aclu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldUpdateBy,
		})
	}
	if value, ok := aclu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldUpdateBy,
		})
	}
	if value, ok := aclu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldTenantId,
		})
	}
	if value, ok := aclu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldTenantId,
		})
	}
	if aclu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetchangelog.UserTable,
			Columns: []string{assetchangelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aclu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetchangelog.UserTable,
			Columns: []string{assetchangelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aclu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetchangelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AssetChangeLogUpdateOne is the builder for updating a single AssetChangeLog entity.
type AssetChangeLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetChangeLogMutation
}

// SetOrderId sets the "orderId" field.
func (acluo *AssetChangeLogUpdateOne) SetOrderId(s string) *AssetChangeLogUpdateOne {
	acluo.mutation.SetOrderId(s)
	return acluo
}

// SetNillableOrderId sets the "orderId" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableOrderId(s *string) *AssetChangeLogUpdateOne {
	if s != nil {
		acluo.SetOrderId(*s)
	}
	return acluo
}

// ClearOrderId clears the value of the "orderId" field.
func (acluo *AssetChangeLogUpdateOne) ClearOrderId() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearOrderId()
	return acluo
}

// SetBalanceId sets the "balanceId" field.
func (acluo *AssetChangeLogUpdateOne) SetBalanceId(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetBalanceId()
	acluo.mutation.SetBalanceId(i)
	return acluo
}

// SetNillableBalanceId sets the "balanceId" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableBalanceId(i *int64) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetBalanceId(*i)
	}
	return acluo
}

// AddBalanceId adds i to the "balanceId" field.
func (acluo *AssetChangeLogUpdateOne) AddBalanceId(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.AddBalanceId(i)
	return acluo
}

// ClearBalanceId clears the value of the "balanceId" field.
func (acluo *AssetChangeLogUpdateOne) ClearBalanceId() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearBalanceId()
	return acluo
}

// SetEventId sets the "eventId" field.
func (acluo *AssetChangeLogUpdateOne) SetEventId(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetEventId()
	acluo.mutation.SetEventId(i)
	return acluo
}

// SetNillableEventId sets the "eventId" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableEventId(i *int64) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetEventId(*i)
	}
	return acluo
}

// AddEventId adds i to the "eventId" field.
func (acluo *AssetChangeLogUpdateOne) AddEventId(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.AddEventId(i)
	return acluo
}

// ClearEventId clears the value of the "eventId" field.
func (acluo *AssetChangeLogUpdateOne) ClearEventId() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearEventId()
	return acluo
}

// SetUserId sets the "userId" field.
func (acluo *AssetChangeLogUpdateOne) SetUserId(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetUserId()
	acluo.mutation.SetUserId(i)
	return acluo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableUserId(i *int64) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetUserId(*i)
	}
	return acluo
}

// AddUserId adds i to the "userId" field.
func (acluo *AssetChangeLogUpdateOne) AddUserId(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.AddUserId(i)
	return acluo
}

// ClearUserId clears the value of the "userId" field.
func (acluo *AssetChangeLogUpdateOne) ClearUserId() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearUserId()
	return acluo
}

// SetAssetItemId sets the "assetItemId" field.
func (acluo *AssetChangeLogUpdateOne) SetAssetItemId(i int32) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetAssetItemId()
	acluo.mutation.SetAssetItemId(i)
	return acluo
}

// SetNillableAssetItemId sets the "assetItemId" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableAssetItemId(i *int32) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetAssetItemId(*i)
	}
	return acluo
}

// AddAssetItemId adds i to the "assetItemId" field.
func (acluo *AssetChangeLogUpdateOne) AddAssetItemId(i int32) *AssetChangeLogUpdateOne {
	acluo.mutation.AddAssetItemId(i)
	return acluo
}

// ClearAssetItemId clears the value of the "assetItemId" field.
func (acluo *AssetChangeLogUpdateOne) ClearAssetItemId() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearAssetItemId()
	return acluo
}

// SetAmount sets the "amount" field.
func (acluo *AssetChangeLogUpdateOne) SetAmount(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetAmount()
	acluo.mutation.SetAmount(i)
	return acluo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableAmount(i *int64) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetAmount(*i)
	}
	return acluo
}

// AddAmount adds i to the "amount" field.
func (acluo *AssetChangeLogUpdateOne) AddAmount(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.AddAmount(i)
	return acluo
}

// ClearAmount clears the value of the "amount" field.
func (acluo *AssetChangeLogUpdateOne) ClearAmount() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearAmount()
	return acluo
}

// SetOldBalance sets the "oldBalance" field.
func (acluo *AssetChangeLogUpdateOne) SetOldBalance(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetOldBalance()
	acluo.mutation.SetOldBalance(i)
	return acluo
}

// SetNillableOldBalance sets the "oldBalance" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableOldBalance(i *int64) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetOldBalance(*i)
	}
	return acluo
}

// AddOldBalance adds i to the "oldBalance" field.
func (acluo *AssetChangeLogUpdateOne) AddOldBalance(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.AddOldBalance(i)
	return acluo
}

// ClearOldBalance clears the value of the "oldBalance" field.
func (acluo *AssetChangeLogUpdateOne) ClearOldBalance() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearOldBalance()
	return acluo
}

// SetNewBalance sets the "newBalance" field.
func (acluo *AssetChangeLogUpdateOne) SetNewBalance(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetNewBalance()
	acluo.mutation.SetNewBalance(i)
	return acluo
}

// SetNillableNewBalance sets the "newBalance" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableNewBalance(i *int64) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetNewBalance(*i)
	}
	return acluo
}

// AddNewBalance adds i to the "newBalance" field.
func (acluo *AssetChangeLogUpdateOne) AddNewBalance(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.AddNewBalance(i)
	return acluo
}

// ClearNewBalance clears the value of the "newBalance" field.
func (acluo *AssetChangeLogUpdateOne) ClearNewBalance() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearNewBalance()
	return acluo
}

// SetRemark sets the "remark" field.
func (acluo *AssetChangeLogUpdateOne) SetRemark(s string) *AssetChangeLogUpdateOne {
	acluo.mutation.SetRemark(s)
	return acluo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableRemark(s *string) *AssetChangeLogUpdateOne {
	if s != nil {
		acluo.SetRemark(*s)
	}
	return acluo
}

// ClearRemark clears the value of the "remark" field.
func (acluo *AssetChangeLogUpdateOne) ClearRemark() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearRemark()
	return acluo
}

// SetUpdatedAt sets the "updatedAt" field.
func (acluo *AssetChangeLogUpdateOne) SetUpdatedAt(t time.Time) *AssetChangeLogUpdateOne {
	acluo.mutation.SetUpdatedAt(t)
	return acluo
}

// SetCreateBy sets the "createBy" field.
func (acluo *AssetChangeLogUpdateOne) SetCreateBy(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetCreateBy()
	acluo.mutation.SetCreateBy(i)
	return acluo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableCreateBy(i *int64) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetCreateBy(*i)
	}
	return acluo
}

// AddCreateBy adds i to the "createBy" field.
func (acluo *AssetChangeLogUpdateOne) AddCreateBy(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.AddCreateBy(i)
	return acluo
}

// SetUpdateBy sets the "updateBy" field.
func (acluo *AssetChangeLogUpdateOne) SetUpdateBy(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetUpdateBy()
	acluo.mutation.SetUpdateBy(i)
	return acluo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableUpdateBy(i *int64) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetUpdateBy(*i)
	}
	return acluo
}

// AddUpdateBy adds i to the "updateBy" field.
func (acluo *AssetChangeLogUpdateOne) AddUpdateBy(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.AddUpdateBy(i)
	return acluo
}

// SetTenantId sets the "tenantId" field.
func (acluo *AssetChangeLogUpdateOne) SetTenantId(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.ResetTenantId()
	acluo.mutation.SetTenantId(i)
	return acluo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableTenantId(i *int64) *AssetChangeLogUpdateOne {
	if i != nil {
		acluo.SetTenantId(*i)
	}
	return acluo
}

// AddTenantId adds i to the "tenantId" field.
func (acluo *AssetChangeLogUpdateOne) AddTenantId(i int64) *AssetChangeLogUpdateOne {
	acluo.mutation.AddTenantId(i)
	return acluo
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (acluo *AssetChangeLogUpdateOne) SetUserID(id int64) *AssetChangeLogUpdateOne {
	acluo.mutation.SetUserID(id)
	return acluo
}

// SetNillableUserID sets the "user" edge to the SocialUser entity by ID if the given value is not nil.
func (acluo *AssetChangeLogUpdateOne) SetNillableUserID(id *int64) *AssetChangeLogUpdateOne {
	if id != nil {
		acluo = acluo.SetUserID(*id)
	}
	return acluo
}

// SetUser sets the "user" edge to the SocialUser entity.
func (acluo *AssetChangeLogUpdateOne) SetUser(s *SocialUser) *AssetChangeLogUpdateOne {
	return acluo.SetUserID(s.ID)
}

// Mutation returns the AssetChangeLogMutation object of the builder.
func (acluo *AssetChangeLogUpdateOne) Mutation() *AssetChangeLogMutation {
	return acluo.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (acluo *AssetChangeLogUpdateOne) ClearUser() *AssetChangeLogUpdateOne {
	acluo.mutation.ClearUser()
	return acluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acluo *AssetChangeLogUpdateOne) Select(field string, fields ...string) *AssetChangeLogUpdateOne {
	acluo.fields = append([]string{field}, fields...)
	return acluo
}

// Save executes the query and returns the updated AssetChangeLog entity.
func (acluo *AssetChangeLogUpdateOne) Save(ctx context.Context) (*AssetChangeLog, error) {
	var (
		err  error
		node *AssetChangeLog
	)
	acluo.defaults()
	if len(acluo.hooks) == 0 {
		node, err = acluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssetChangeLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acluo.mutation = mutation
			node, err = acluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acluo.hooks) - 1; i >= 0; i-- {
			if acluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (acluo *AssetChangeLogUpdateOne) SaveX(ctx context.Context) *AssetChangeLog {
	node, err := acluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acluo *AssetChangeLogUpdateOne) Exec(ctx context.Context) error {
	_, err := acluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acluo *AssetChangeLogUpdateOne) ExecX(ctx context.Context) {
	if err := acluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acluo *AssetChangeLogUpdateOne) defaults() {
	if _, ok := acluo.mutation.UpdatedAt(); !ok {
		v := assetchangelog.UpdateDefaultUpdatedAt()
		acluo.mutation.SetUpdatedAt(v)
	}
}

func (acluo *AssetChangeLogUpdateOne) sqlSave(ctx context.Context) (_node *AssetChangeLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assetchangelog.Table,
			Columns: assetchangelog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: assetchangelog.FieldID,
			},
		},
	}
	id, ok := acluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AssetChangeLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := acluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetchangelog.FieldID)
		for _, f := range fields {
			if !assetchangelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetchangelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acluo.mutation.OrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assetchangelog.FieldOrderId,
		})
	}
	if acluo.mutation.OrderIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assetchangelog.FieldOrderId,
		})
	}
	if value, ok := acluo.mutation.BalanceId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldBalanceId,
		})
	}
	if value, ok := acluo.mutation.AddedBalanceId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldBalanceId,
		})
	}
	if acluo.mutation.BalanceIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldBalanceId,
		})
	}
	if value, ok := acluo.mutation.EventId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldEventId,
		})
	}
	if value, ok := acluo.mutation.AddedEventId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldEventId,
		})
	}
	if acluo.mutation.EventIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldEventId,
		})
	}
	if value, ok := acluo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldUserId,
		})
	}
	if value, ok := acluo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldUserId,
		})
	}
	if acluo.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldUserId,
		})
	}
	if value, ok := acluo.mutation.AssetItemId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: assetchangelog.FieldAssetItemId,
		})
	}
	if value, ok := acluo.mutation.AddedAssetItemId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: assetchangelog.FieldAssetItemId,
		})
	}
	if acluo.mutation.AssetItemIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: assetchangelog.FieldAssetItemId,
		})
	}
	if value, ok := acluo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldAmount,
		})
	}
	if value, ok := acluo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldAmount,
		})
	}
	if acluo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldAmount,
		})
	}
	if value, ok := acluo.mutation.OldBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldOldBalance,
		})
	}
	if value, ok := acluo.mutation.AddedOldBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldOldBalance,
		})
	}
	if acluo.mutation.OldBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldOldBalance,
		})
	}
	if value, ok := acluo.mutation.NewBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldNewBalance,
		})
	}
	if value, ok := acluo.mutation.AddedNewBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldNewBalance,
		})
	}
	if acluo.mutation.NewBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: assetchangelog.FieldNewBalance,
		})
	}
	if value, ok := acluo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assetchangelog.FieldRemark,
		})
	}
	if acluo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assetchangelog.FieldRemark,
		})
	}
	if value, ok := acluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assetchangelog.FieldUpdatedAt,
		})
	}
	if value, ok := acluo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldCreateBy,
		})
	}
	if value, ok := acluo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldCreateBy,
		})
	}
	if value, ok := acluo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldUpdateBy,
		})
	}
	if value, ok := acluo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldUpdateBy,
		})
	}
	if value, ok := acluo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldTenantId,
		})
	}
	if value, ok := acluo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetchangelog.FieldTenantId,
		})
	}
	if acluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetchangelog.UserTable,
			Columns: []string{assetchangelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetchangelog.UserTable,
			Columns: []string{assetchangelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AssetChangeLog{config: acluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetchangelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
