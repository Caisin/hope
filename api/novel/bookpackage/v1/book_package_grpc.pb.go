// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/bookpackage/v1/book_package.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookPackageClient is the client API for BookPackage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookPackageClient interface {
	// 分页查询BookPackage
	GetPageBookPackage(ctx context.Context, in *BookPackagePageReq, opts ...grpc.CallOption) (*BookPackagePageReply, error)
	// 获取BookPackage
	GetBookPackage(ctx context.Context, in *BookPackageReq, opts ...grpc.CallOption) (*BookPackageReply, error)
	// 更新BookPackage
	UpdateBookPackage(ctx context.Context, in *BookPackageUpdateReq, opts ...grpc.CallOption) (*BookPackageUpdateReply, error)
	// 创建BookPackage
	CreateBookPackage(ctx context.Context, in *BookPackageCreateReq, opts ...grpc.CallOption) (*BookPackageCreateReply, error)
	// 删除BookPackage
	DeleteBookPackage(ctx context.Context, in *BookPackageDeleteReq, opts ...grpc.CallOption) (*BookPackageDeleteReply, error)
	// 批量删除BookPackage
	BatchDeleteBookPackage(ctx context.Context, in *BookPackageBatchDeleteReq, opts ...grpc.CallOption) (*BookPackageDeleteReply, error)
}

type bookPackageClient struct {
	cc grpc.ClientConnInterface
}

func NewBookPackageClient(cc grpc.ClientConnInterface) BookPackageClient {
	return &bookPackageClient{cc}
}

func (c *bookPackageClient) GetPageBookPackage(ctx context.Context, in *BookPackagePageReq, opts ...grpc.CallOption) (*BookPackagePageReply, error) {
	out := new(BookPackagePageReply)
	err := c.cc.Invoke(ctx, "/bookpackage.v1.BookPackage/GetPageBookPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookPackageClient) GetBookPackage(ctx context.Context, in *BookPackageReq, opts ...grpc.CallOption) (*BookPackageReply, error) {
	out := new(BookPackageReply)
	err := c.cc.Invoke(ctx, "/bookpackage.v1.BookPackage/GetBookPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookPackageClient) UpdateBookPackage(ctx context.Context, in *BookPackageUpdateReq, opts ...grpc.CallOption) (*BookPackageUpdateReply, error) {
	out := new(BookPackageUpdateReply)
	err := c.cc.Invoke(ctx, "/bookpackage.v1.BookPackage/UpdateBookPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookPackageClient) CreateBookPackage(ctx context.Context, in *BookPackageCreateReq, opts ...grpc.CallOption) (*BookPackageCreateReply, error) {
	out := new(BookPackageCreateReply)
	err := c.cc.Invoke(ctx, "/bookpackage.v1.BookPackage/CreateBookPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookPackageClient) DeleteBookPackage(ctx context.Context, in *BookPackageDeleteReq, opts ...grpc.CallOption) (*BookPackageDeleteReply, error) {
	out := new(BookPackageDeleteReply)
	err := c.cc.Invoke(ctx, "/bookpackage.v1.BookPackage/DeleteBookPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookPackageClient) BatchDeleteBookPackage(ctx context.Context, in *BookPackageBatchDeleteReq, opts ...grpc.CallOption) (*BookPackageDeleteReply, error) {
	out := new(BookPackageDeleteReply)
	err := c.cc.Invoke(ctx, "/bookpackage.v1.BookPackage/BatchDeleteBookPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookPackageServer is the server API for BookPackage service.
// All implementations must embed UnimplementedBookPackageServer
// for forward compatibility
type BookPackageServer interface {
	// 分页查询BookPackage
	GetPageBookPackage(context.Context, *BookPackagePageReq) (*BookPackagePageReply, error)
	// 获取BookPackage
	GetBookPackage(context.Context, *BookPackageReq) (*BookPackageReply, error)
	// 更新BookPackage
	UpdateBookPackage(context.Context, *BookPackageUpdateReq) (*BookPackageUpdateReply, error)
	// 创建BookPackage
	CreateBookPackage(context.Context, *BookPackageCreateReq) (*BookPackageCreateReply, error)
	// 删除BookPackage
	DeleteBookPackage(context.Context, *BookPackageDeleteReq) (*BookPackageDeleteReply, error)
	// 批量删除BookPackage
	BatchDeleteBookPackage(context.Context, *BookPackageBatchDeleteReq) (*BookPackageDeleteReply, error)
	mustEmbedUnimplementedBookPackageServer()
}

// UnimplementedBookPackageServer must be embedded to have forward compatible implementations.
type UnimplementedBookPackageServer struct {
}

func (UnimplementedBookPackageServer) GetPageBookPackage(context.Context, *BookPackagePageReq) (*BookPackagePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageBookPackage not implemented")
}
func (UnimplementedBookPackageServer) GetBookPackage(context.Context, *BookPackageReq) (*BookPackageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookPackage not implemented")
}
func (UnimplementedBookPackageServer) UpdateBookPackage(context.Context, *BookPackageUpdateReq) (*BookPackageUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookPackage not implemented")
}
func (UnimplementedBookPackageServer) CreateBookPackage(context.Context, *BookPackageCreateReq) (*BookPackageCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookPackage not implemented")
}
func (UnimplementedBookPackageServer) DeleteBookPackage(context.Context, *BookPackageDeleteReq) (*BookPackageDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookPackage not implemented")
}
func (UnimplementedBookPackageServer) BatchDeleteBookPackage(context.Context, *BookPackageBatchDeleteReq) (*BookPackageDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteBookPackage not implemented")
}
func (UnimplementedBookPackageServer) mustEmbedUnimplementedBookPackageServer() {}

// UnsafeBookPackageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookPackageServer will
// result in compilation errors.
type UnsafeBookPackageServer interface {
	mustEmbedUnimplementedBookPackageServer()
}

func RegisterBookPackageServer(s grpc.ServiceRegistrar, srv BookPackageServer) {
	s.RegisterService(&BookPackage_ServiceDesc, srv)
}

func _BookPackage_GetPageBookPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookPackagePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookPackageServer).GetPageBookPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookpackage.v1.BookPackage/GetPageBookPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookPackageServer).GetPageBookPackage(ctx, req.(*BookPackagePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookPackage_GetBookPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookPackageServer).GetBookPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookpackage.v1.BookPackage/GetBookPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookPackageServer).GetBookPackage(ctx, req.(*BookPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookPackage_UpdateBookPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookPackageUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookPackageServer).UpdateBookPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookpackage.v1.BookPackage/UpdateBookPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookPackageServer).UpdateBookPackage(ctx, req.(*BookPackageUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookPackage_CreateBookPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookPackageCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookPackageServer).CreateBookPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookpackage.v1.BookPackage/CreateBookPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookPackageServer).CreateBookPackage(ctx, req.(*BookPackageCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookPackage_DeleteBookPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookPackageDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookPackageServer).DeleteBookPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookpackage.v1.BookPackage/DeleteBookPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookPackageServer).DeleteBookPackage(ctx, req.(*BookPackageDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookPackage_BatchDeleteBookPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookPackageBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookPackageServer).BatchDeleteBookPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookpackage.v1.BookPackage/BatchDeleteBookPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookPackageServer).BatchDeleteBookPackage(ctx, req.(*BookPackageBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BookPackage_ServiceDesc is the grpc.ServiceDesc for BookPackage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookPackage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookpackage.v1.BookPackage",
	HandlerType: (*BookPackageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageBookPackage",
			Handler:    _BookPackage_GetPageBookPackage_Handler,
		},
		{
			MethodName: "GetBookPackage",
			Handler:    _BookPackage_GetBookPackage_Handler,
		},
		{
			MethodName: "UpdateBookPackage",
			Handler:    _BookPackage_UpdateBookPackage_Handler,
		},
		{
			MethodName: "CreateBookPackage",
			Handler:    _BookPackage_CreateBookPackage_Handler,
		},
		{
			MethodName: "DeleteBookPackage",
			Handler:    _BookPackage_DeleteBookPackage_Handler,
		},
		{
			MethodName: "BatchDeleteBookPackage",
			Handler:    _BookPackage_BatchDeleteBookPackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/bookpackage/v1/book_package.proto",
}
