// Code generated by entc, DO NOT EDIT.

package tasklog

import (
	"time"
)

const (
	// Label holds the string label denoting the tasklog type in the database.
	Label = "task_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldTaskGroup holds the string denoting the taskgroup field in the database.
	FieldTaskGroup = "task_group"
	// FieldTaskCode holds the string denoting the taskcode field in the database.
	FieldTaskCode = "task_code"
	// FieldTaskId holds the string denoting the taskid field in the database.
	FieldTaskId = "task_id"
	// FieldTaskName holds the string denoting the taskname field in the database.
	FieldTaskName = "task_name"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldReward holds the string denoting the reward field in the database.
	FieldReward = "reward"
	// FieldAmountItem holds the string denoting the amountitem field in the database.
	FieldAmountItem = "amount_item"
	// FieldRewardItem holds the string denoting the rewarditem field in the database.
	FieldRewardItem = "reward_item"
	// FieldTargetAmount holds the string denoting the targetamount field in the database.
	FieldTargetAmount = "target_amount"
	// FieldDoneAmount holds the string denoting the doneamount field in the database.
	FieldDoneAmount = "done_amount"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldDoneAt holds the string denoting the doneat field in the database.
	FieldDoneAt = "done_at"
	// FieldObtainAt holds the string denoting the obtainat field in the database.
	FieldObtainAt = "obtain_at"
	// FieldDoneTimes holds the string denoting the donetimes field in the database.
	FieldDoneTimes = "done_times"
	// FieldAllTimes holds the string denoting the alltimes field in the database.
	FieldAllTimes = "all_times"
	// FieldEffectTime holds the string denoting the effecttime field in the database.
	FieldEffectTime = "effect_time"
	// FieldExpiredTime holds the string denoting the expiredtime field in the database.
	FieldExpiredTime = "expired_time"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreateBy holds the string denoting the createby field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateBy holds the string denoting the updateby field in the database.
	FieldUpdateBy = "update_by"
	// FieldTenantId holds the string denoting the tenantid field in the database.
	FieldTenantId = "tenant_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the tasklog in the database.
	Table = "task_logs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "task_logs"
	// UserInverseTable is the table name for the SocialUser entity.
	// It exists in this package in order to avoid circular dependency with the "socialuser" package.
	UserInverseTable = "social_users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "social_user_tasks"
)

// Columns holds all SQL columns for tasklog fields.
var Columns = []string{
	FieldID,
	FieldUserId,
	FieldTaskGroup,
	FieldTaskCode,
	FieldTaskId,
	FieldTaskName,
	FieldAmount,
	FieldReward,
	FieldAmountItem,
	FieldRewardItem,
	FieldTargetAmount,
	FieldDoneAmount,
	FieldState,
	FieldDoneAt,
	FieldObtainAt,
	FieldDoneTimes,
	FieldAllTimes,
	FieldEffectTime,
	FieldExpiredTime,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreateBy,
	FieldUpdateBy,
	FieldTenantId,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "task_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"social_user_tasks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEffectTime holds the default value on creation for the "effectTime" field.
	DefaultEffectTime func() time.Time
	// DefaultExpiredTime holds the default value on creation for the "expiredTime" field.
	DefaultExpiredTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreateBy holds the default value on creation for the "createBy" field.
	DefaultCreateBy int64
	// DefaultUpdateBy holds the default value on creation for the "updateBy" field.
	DefaultUpdateBy int64
	// DefaultTenantId holds the default value on creation for the "tenantId" field.
	DefaultTenantId int64
)
