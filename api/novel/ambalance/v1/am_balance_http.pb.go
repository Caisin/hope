// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AmBalanceHTTPServer interface {
	BatchDeleteAmBalance(context.Context, *AmBalanceBatchDeleteReq) (*AmBalanceDeleteReply, error)
	CreateAmBalance(context.Context, *AmBalanceCreateReq) (*AmBalanceCreateReply, error)
	DeleteAmBalance(context.Context, *AmBalanceDeleteReq) (*AmBalanceDeleteReply, error)
	GetAmBalance(context.Context, *AmBalanceReq) (*AmBalanceReply, error)
	GetPageAmBalance(context.Context, *AmBalancePageReq) (*AmBalancePageReply, error)
	UpdateAmBalance(context.Context, *AmBalanceUpdateReq) (*AmBalanceUpdateReply, error)
}

func RegisterAmBalanceHTTPServer(s *http.Server, srv AmBalanceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/ambalance/page", _AmBalance_GetPageAmBalance0_HTTP_Handler(srv))
	r.GET("/v1/ambalance/{id}", _AmBalance_GetAmBalance0_HTTP_Handler(srv))
	r.PUT("/v1/ambalance/{id}", _AmBalance_UpdateAmBalance0_HTTP_Handler(srv))
	r.POST("/v1/ambalance", _AmBalance_CreateAmBalance0_HTTP_Handler(srv))
	r.DELETE("/v1/ambalance/{id}", _AmBalance_DeleteAmBalance0_HTTP_Handler(srv))
	r.DELETE("/v1/ambalance", _AmBalance_BatchDeleteAmBalance0_HTTP_Handler(srv))
}

func _AmBalance_GetPageAmBalance0_HTTP_Handler(srv AmBalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AmBalancePageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ambalance.v1.AmBalance/GetPageAmBalance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageAmBalance(ctx, req.(*AmBalancePageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AmBalancePageReply)
		return ctx.Result(200, reply)
	}
}

func _AmBalance_GetAmBalance0_HTTP_Handler(srv AmBalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AmBalanceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ambalance.v1.AmBalance/GetAmBalance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAmBalance(ctx, req.(*AmBalanceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AmBalanceReply)
		return ctx.Result(200, reply)
	}
}

func _AmBalance_UpdateAmBalance0_HTTP_Handler(srv AmBalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AmBalanceUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ambalance.v1.AmBalance/UpdateAmBalance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAmBalance(ctx, req.(*AmBalanceUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AmBalanceUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _AmBalance_CreateAmBalance0_HTTP_Handler(srv AmBalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AmBalanceCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ambalance.v1.AmBalance/CreateAmBalance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAmBalance(ctx, req.(*AmBalanceCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AmBalanceCreateReply)
		return ctx.Result(200, reply)
	}
}

func _AmBalance_DeleteAmBalance0_HTTP_Handler(srv AmBalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AmBalanceDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ambalance.v1.AmBalance/DeleteAmBalance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAmBalance(ctx, req.(*AmBalanceDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AmBalanceDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _AmBalance_BatchDeleteAmBalance0_HTTP_Handler(srv AmBalanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AmBalanceBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ambalance.v1.AmBalance/BatchDeleteAmBalance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteAmBalance(ctx, req.(*AmBalanceBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AmBalanceDeleteReply)
		return ctx.Result(200, reply)
	}
}

type AmBalanceHTTPClient interface {
	BatchDeleteAmBalance(ctx context.Context, req *AmBalanceBatchDeleteReq, opts ...http.CallOption) (rsp *AmBalanceDeleteReply, err error)
	CreateAmBalance(ctx context.Context, req *AmBalanceCreateReq, opts ...http.CallOption) (rsp *AmBalanceCreateReply, err error)
	DeleteAmBalance(ctx context.Context, req *AmBalanceDeleteReq, opts ...http.CallOption) (rsp *AmBalanceDeleteReply, err error)
	GetAmBalance(ctx context.Context, req *AmBalanceReq, opts ...http.CallOption) (rsp *AmBalanceReply, err error)
	GetPageAmBalance(ctx context.Context, req *AmBalancePageReq, opts ...http.CallOption) (rsp *AmBalancePageReply, err error)
	UpdateAmBalance(ctx context.Context, req *AmBalanceUpdateReq, opts ...http.CallOption) (rsp *AmBalanceUpdateReply, err error)
}

type AmBalanceHTTPClientImpl struct {
	cc *http.Client
}

func NewAmBalanceHTTPClient(client *http.Client) AmBalanceHTTPClient {
	return &AmBalanceHTTPClientImpl{client}
}

func (c *AmBalanceHTTPClientImpl) BatchDeleteAmBalance(ctx context.Context, in *AmBalanceBatchDeleteReq, opts ...http.CallOption) (*AmBalanceDeleteReply, error) {
	var out AmBalanceDeleteReply
	pattern := "/v1/ambalance"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ambalance.v1.AmBalance/BatchDeleteAmBalance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AmBalanceHTTPClientImpl) CreateAmBalance(ctx context.Context, in *AmBalanceCreateReq, opts ...http.CallOption) (*AmBalanceCreateReply, error) {
	var out AmBalanceCreateReply
	pattern := "/v1/ambalance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/ambalance.v1.AmBalance/CreateAmBalance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AmBalanceHTTPClientImpl) DeleteAmBalance(ctx context.Context, in *AmBalanceDeleteReq, opts ...http.CallOption) (*AmBalanceDeleteReply, error) {
	var out AmBalanceDeleteReply
	pattern := "/v1/ambalance/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ambalance.v1.AmBalance/DeleteAmBalance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AmBalanceHTTPClientImpl) GetAmBalance(ctx context.Context, in *AmBalanceReq, opts ...http.CallOption) (*AmBalanceReply, error) {
	var out AmBalanceReply
	pattern := "/v1/ambalance/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ambalance.v1.AmBalance/GetAmBalance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AmBalanceHTTPClientImpl) GetPageAmBalance(ctx context.Context, in *AmBalancePageReq, opts ...http.CallOption) (*AmBalancePageReply, error) {
	var out AmBalancePageReply
	pattern := "/v1/ambalance/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ambalance.v1.AmBalance/GetPageAmBalance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AmBalanceHTTPClientImpl) UpdateAmBalance(ctx context.Context, in *AmBalanceUpdateReq, opts ...http.CallOption) (*AmBalanceUpdateReply, error) {
	var out AmBalanceUpdateReply
	pattern := "/v1/ambalance/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/ambalance.v1.AmBalance/UpdateAmBalance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
