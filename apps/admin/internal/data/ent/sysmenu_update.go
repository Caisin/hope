// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysmenu"
	"hope/apps/admin/internal/data/ent/sysrole"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysMenuUpdate is the builder for updating SysMenu entities.
type SysMenuUpdate struct {
	config
	hooks    []Hook
	mutation *SysMenuMutation
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smu *SysMenuUpdate) Where(ps ...predicate.SysMenu) *SysMenuUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetMenuName sets the "menuName" field.
func (smu *SysMenuUpdate) SetMenuName(s string) *SysMenuUpdate {
	smu.mutation.SetMenuName(s)
	return smu
}

// SetNillableMenuName sets the "menuName" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableMenuName(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetMenuName(*s)
	}
	return smu
}

// ClearMenuName clears the value of the "menuName" field.
func (smu *SysMenuUpdate) ClearMenuName() *SysMenuUpdate {
	smu.mutation.ClearMenuName()
	return smu
}

// SetTitle sets the "title" field.
func (smu *SysMenuUpdate) SetTitle(s string) *SysMenuUpdate {
	smu.mutation.SetTitle(s)
	return smu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableTitle(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetTitle(*s)
	}
	return smu
}

// ClearTitle clears the value of the "title" field.
func (smu *SysMenuUpdate) ClearTitle() *SysMenuUpdate {
	smu.mutation.ClearTitle()
	return smu
}

// SetIcon sets the "icon" field.
func (smu *SysMenuUpdate) SetIcon(s string) *SysMenuUpdate {
	smu.mutation.SetIcon(s)
	return smu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIcon(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetIcon(*s)
	}
	return smu
}

// ClearIcon clears the value of the "icon" field.
func (smu *SysMenuUpdate) ClearIcon() *SysMenuUpdate {
	smu.mutation.ClearIcon()
	return smu
}

// SetPath sets the "path" field.
func (smu *SysMenuUpdate) SetPath(s string) *SysMenuUpdate {
	smu.mutation.SetPath(s)
	return smu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePath(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetPath(*s)
	}
	return smu
}

// ClearPath clears the value of the "path" field.
func (smu *SysMenuUpdate) ClearPath() *SysMenuUpdate {
	smu.mutation.ClearPath()
	return smu
}

// SetPaths sets the "paths" field.
func (smu *SysMenuUpdate) SetPaths(s string) *SysMenuUpdate {
	smu.mutation.SetPaths(s)
	return smu
}

// SetNillablePaths sets the "paths" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePaths(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetPaths(*s)
	}
	return smu
}

// ClearPaths clears the value of the "paths" field.
func (smu *SysMenuUpdate) ClearPaths() *SysMenuUpdate {
	smu.mutation.ClearPaths()
	return smu
}

// SetMenuType sets the "menuType" field.
func (smu *SysMenuUpdate) SetMenuType(s string) *SysMenuUpdate {
	smu.mutation.SetMenuType(s)
	return smu
}

// SetNillableMenuType sets the "menuType" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableMenuType(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetMenuType(*s)
	}
	return smu
}

// ClearMenuType clears the value of the "menuType" field.
func (smu *SysMenuUpdate) ClearMenuType() *SysMenuUpdate {
	smu.mutation.ClearMenuType()
	return smu
}

// SetAction sets the "action" field.
func (smu *SysMenuUpdate) SetAction(s string) *SysMenuUpdate {
	smu.mutation.SetAction(s)
	return smu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableAction(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetAction(*s)
	}
	return smu
}

// ClearAction clears the value of the "action" field.
func (smu *SysMenuUpdate) ClearAction() *SysMenuUpdate {
	smu.mutation.ClearAction()
	return smu
}

// SetPermission sets the "permission" field.
func (smu *SysMenuUpdate) SetPermission(s string) *SysMenuUpdate {
	smu.mutation.SetPermission(s)
	return smu
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePermission(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetPermission(*s)
	}
	return smu
}

// ClearPermission clears the value of the "permission" field.
func (smu *SysMenuUpdate) ClearPermission() *SysMenuUpdate {
	smu.mutation.ClearPermission()
	return smu
}

// SetNoCache sets the "noCache" field.
func (smu *SysMenuUpdate) SetNoCache(b bool) *SysMenuUpdate {
	smu.mutation.SetNoCache(b)
	return smu
}

// SetNillableNoCache sets the "noCache" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableNoCache(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetNoCache(*b)
	}
	return smu
}

// ClearNoCache clears the value of the "noCache" field.
func (smu *SysMenuUpdate) ClearNoCache() *SysMenuUpdate {
	smu.mutation.ClearNoCache()
	return smu
}

// SetBreadcrumb sets the "breadcrumb" field.
func (smu *SysMenuUpdate) SetBreadcrumb(s string) *SysMenuUpdate {
	smu.mutation.SetBreadcrumb(s)
	return smu
}

// SetNillableBreadcrumb sets the "breadcrumb" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableBreadcrumb(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetBreadcrumb(*s)
	}
	return smu
}

// ClearBreadcrumb clears the value of the "breadcrumb" field.
func (smu *SysMenuUpdate) ClearBreadcrumb() *SysMenuUpdate {
	smu.mutation.ClearBreadcrumb()
	return smu
}

// SetComponent sets the "component" field.
func (smu *SysMenuUpdate) SetComponent(s string) *SysMenuUpdate {
	smu.mutation.SetComponent(s)
	return smu
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableComponent(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetComponent(*s)
	}
	return smu
}

// ClearComponent clears the value of the "component" field.
func (smu *SysMenuUpdate) ClearComponent() *SysMenuUpdate {
	smu.mutation.ClearComponent()
	return smu
}

// SetSort sets the "sort" field.
func (smu *SysMenuUpdate) SetSort(i int32) *SysMenuUpdate {
	smu.mutation.ResetSort()
	smu.mutation.SetSort(i)
	return smu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableSort(i *int32) *SysMenuUpdate {
	if i != nil {
		smu.SetSort(*i)
	}
	return smu
}

// AddSort adds i to the "sort" field.
func (smu *SysMenuUpdate) AddSort(i int32) *SysMenuUpdate {
	smu.mutation.AddSort(i)
	return smu
}

// ClearSort clears the value of the "sort" field.
func (smu *SysMenuUpdate) ClearSort() *SysMenuUpdate {
	smu.mutation.ClearSort()
	return smu
}

// SetVisible sets the "visible" field.
func (smu *SysMenuUpdate) SetVisible(b bool) *SysMenuUpdate {
	smu.mutation.SetVisible(b)
	return smu
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableVisible(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetVisible(*b)
	}
	return smu
}

// ClearVisible clears the value of the "visible" field.
func (smu *SysMenuUpdate) ClearVisible() *SysMenuUpdate {
	smu.mutation.ClearVisible()
	return smu
}

// SetIsFrame sets the "isFrame" field.
func (smu *SysMenuUpdate) SetIsFrame(b bool) *SysMenuUpdate {
	smu.mutation.SetIsFrame(b)
	return smu
}

// SetNillableIsFrame sets the "isFrame" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsFrame(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetIsFrame(*b)
	}
	return smu
}

// ClearIsFrame clears the value of the "isFrame" field.
func (smu *SysMenuUpdate) ClearIsFrame() *SysMenuUpdate {
	smu.mutation.ClearIsFrame()
	return smu
}

// SetSysApi sets the "sysApi" field.
func (smu *SysMenuUpdate) SetSysApi(s string) *SysMenuUpdate {
	smu.mutation.SetSysApi(s)
	return smu
}

// SetNillableSysApi sets the "sysApi" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableSysApi(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetSysApi(*s)
	}
	return smu
}

// ClearSysApi clears the value of the "sysApi" field.
func (smu *SysMenuUpdate) ClearSysApi() *SysMenuUpdate {
	smu.mutation.ClearSysApi()
	return smu
}

// SetUpdatedAt sets the "updatedAt" field.
func (smu *SysMenuUpdate) SetUpdatedAt(t time.Time) *SysMenuUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// SetCreateBy sets the "createBy" field.
func (smu *SysMenuUpdate) SetCreateBy(i int64) *SysMenuUpdate {
	smu.mutation.ResetCreateBy()
	smu.mutation.SetCreateBy(i)
	return smu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableCreateBy(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetCreateBy(*i)
	}
	return smu
}

// AddCreateBy adds i to the "createBy" field.
func (smu *SysMenuUpdate) AddCreateBy(i int64) *SysMenuUpdate {
	smu.mutation.AddCreateBy(i)
	return smu
}

// SetUpdateBy sets the "updateBy" field.
func (smu *SysMenuUpdate) SetUpdateBy(i int64) *SysMenuUpdate {
	smu.mutation.ResetUpdateBy()
	smu.mutation.SetUpdateBy(i)
	return smu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableUpdateBy(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetUpdateBy(*i)
	}
	return smu
}

// AddUpdateBy adds i to the "updateBy" field.
func (smu *SysMenuUpdate) AddUpdateBy(i int64) *SysMenuUpdate {
	smu.mutation.AddUpdateBy(i)
	return smu
}

// SetTenantId sets the "tenantId" field.
func (smu *SysMenuUpdate) SetTenantId(i int64) *SysMenuUpdate {
	smu.mutation.ResetTenantId()
	smu.mutation.SetTenantId(i)
	return smu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableTenantId(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetTenantId(*i)
	}
	return smu
}

// AddTenantId adds i to the "tenantId" field.
func (smu *SysMenuUpdate) AddTenantId(i int64) *SysMenuUpdate {
	smu.mutation.AddTenantId(i)
	return smu
}

// AddRoleIDs adds the "role" edge to the SysRole entity by IDs.
func (smu *SysMenuUpdate) AddRoleIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.AddRoleIDs(ids...)
	return smu
}

// AddRole adds the "role" edges to the SysRole entity.
func (smu *SysMenuUpdate) AddRole(s ...*SysRole) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddRoleIDs(ids...)
}

// SetParentID sets the "parent" edge to the SysMenu entity by ID.
func (smu *SysMenuUpdate) SetParentID(id int64) *SysMenuUpdate {
	smu.mutation.SetParentID(id)
	return smu
}

// SetNillableParentID sets the "parent" edge to the SysMenu entity by ID if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableParentID(id *int64) *SysMenuUpdate {
	if id != nil {
		smu = smu.SetParentID(*id)
	}
	return smu
}

// SetParent sets the "parent" edge to the SysMenu entity.
func (smu *SysMenuUpdate) SetParent(s *SysMenu) *SysMenuUpdate {
	return smu.SetParentID(s.ID)
}

// AddChildeIDs adds the "childes" edge to the SysMenu entity by IDs.
func (smu *SysMenuUpdate) AddChildeIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.AddChildeIDs(ids...)
	return smu
}

// AddChildes adds the "childes" edges to the SysMenu entity.
func (smu *SysMenuUpdate) AddChildes(s ...*SysMenu) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddChildeIDs(ids...)
}

// Mutation returns the SysMenuMutation object of the builder.
func (smu *SysMenuUpdate) Mutation() *SysMenuMutation {
	return smu.mutation
}

// ClearRole clears all "role" edges to the SysRole entity.
func (smu *SysMenuUpdate) ClearRole() *SysMenuUpdate {
	smu.mutation.ClearRole()
	return smu
}

// RemoveRoleIDs removes the "role" edge to SysRole entities by IDs.
func (smu *SysMenuUpdate) RemoveRoleIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.RemoveRoleIDs(ids...)
	return smu
}

// RemoveRole removes "role" edges to SysRole entities.
func (smu *SysMenuUpdate) RemoveRole(s ...*SysRole) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the SysMenu entity.
func (smu *SysMenuUpdate) ClearParent() *SysMenuUpdate {
	smu.mutation.ClearParent()
	return smu
}

// ClearChildes clears all "childes" edges to the SysMenu entity.
func (smu *SysMenuUpdate) ClearChildes() *SysMenuUpdate {
	smu.mutation.ClearChildes()
	return smu
}

// RemoveChildeIDs removes the "childes" edge to SysMenu entities by IDs.
func (smu *SysMenuUpdate) RemoveChildeIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.RemoveChildeIDs(ids...)
	return smu
}

// RemoveChildes removes "childes" edges to SysMenu entities.
func (smu *SysMenuUpdate) RemoveChildes(s ...*SysMenu) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveChildeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SysMenuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	smu.defaults()
	if len(smu.hooks) == 0 {
		affected, err = smu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smu.mutation = mutation
			affected, err = smu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smu.hooks) - 1; i >= 0; i-- {
			if smu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SysMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SysMenuUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SysMenuUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SysMenuUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok {
		v := sysmenu.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

func (smu *SysMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenu.Table,
			Columns: sysmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysmenu.FieldID,
			},
		},
	}
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.MenuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldMenuName,
		})
	}
	if smu.mutation.MenuNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldMenuName,
		})
	}
	if value, ok := smu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldTitle,
		})
	}
	if smu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldTitle,
		})
	}
	if value, ok := smu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldIcon,
		})
	}
	if smu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldIcon,
		})
	}
	if value, ok := smu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPath,
		})
	}
	if smu.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPath,
		})
	}
	if value, ok := smu.mutation.Paths(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPaths,
		})
	}
	if smu.mutation.PathsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPaths,
		})
	}
	if value, ok := smu.mutation.MenuType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldMenuType,
		})
	}
	if smu.mutation.MenuTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldMenuType,
		})
	}
	if value, ok := smu.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldAction,
		})
	}
	if smu.mutation.ActionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldAction,
		})
	}
	if value, ok := smu.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPermission,
		})
	}
	if smu.mutation.PermissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPermission,
		})
	}
	if value, ok := smu.mutation.NoCache(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldNoCache,
		})
	}
	if smu.mutation.NoCacheCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldNoCache,
		})
	}
	if value, ok := smu.mutation.Breadcrumb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldBreadcrumb,
		})
	}
	if smu.mutation.BreadcrumbCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldBreadcrumb,
		})
	}
	if value, ok := smu.mutation.Component(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldComponent,
		})
	}
	if smu.mutation.ComponentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldComponent,
		})
	}
	if value, ok := smu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenu.FieldSort,
		})
	}
	if value, ok := smu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenu.FieldSort,
		})
	}
	if smu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysmenu.FieldSort,
		})
	}
	if value, ok := smu.mutation.Visible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldVisible,
		})
	}
	if smu.mutation.VisibleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldVisible,
		})
	}
	if value, ok := smu.mutation.IsFrame(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldIsFrame,
		})
	}
	if smu.mutation.IsFrameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldIsFrame,
		})
	}
	if value, ok := smu.mutation.SysApi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldSysApi,
		})
	}
	if smu.mutation.SysApiCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldSysApi,
		})
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenu.FieldUpdatedAt,
		})
	}
	if value, ok := smu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldCreateBy,
		})
	}
	if value, ok := smu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldCreateBy,
		})
	}
	if value, ok := smu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldUpdateBy,
		})
	}
	if value, ok := smu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldUpdateBy,
		})
	}
	if value, ok := smu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldTenantId,
		})
	}
	if value, ok := smu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldTenantId,
		})
	}
	if smu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedRoleIDs(); len(nodes) > 0 && !smu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildesTable,
			Columns: []string{sysmenu.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedChildesIDs(); len(nodes) > 0 && !smu.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildesTable,
			Columns: []string{sysmenu.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ChildesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildesTable,
			Columns: []string{sysmenu.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysMenuUpdateOne is the builder for updating a single SysMenu entity.
type SysMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysMenuMutation
}

// SetMenuName sets the "menuName" field.
func (smuo *SysMenuUpdateOne) SetMenuName(s string) *SysMenuUpdateOne {
	smuo.mutation.SetMenuName(s)
	return smuo
}

// SetNillableMenuName sets the "menuName" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableMenuName(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetMenuName(*s)
	}
	return smuo
}

// ClearMenuName clears the value of the "menuName" field.
func (smuo *SysMenuUpdateOne) ClearMenuName() *SysMenuUpdateOne {
	smuo.mutation.ClearMenuName()
	return smuo
}

// SetTitle sets the "title" field.
func (smuo *SysMenuUpdateOne) SetTitle(s string) *SysMenuUpdateOne {
	smuo.mutation.SetTitle(s)
	return smuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableTitle(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetTitle(*s)
	}
	return smuo
}

// ClearTitle clears the value of the "title" field.
func (smuo *SysMenuUpdateOne) ClearTitle() *SysMenuUpdateOne {
	smuo.mutation.ClearTitle()
	return smuo
}

// SetIcon sets the "icon" field.
func (smuo *SysMenuUpdateOne) SetIcon(s string) *SysMenuUpdateOne {
	smuo.mutation.SetIcon(s)
	return smuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIcon(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetIcon(*s)
	}
	return smuo
}

// ClearIcon clears the value of the "icon" field.
func (smuo *SysMenuUpdateOne) ClearIcon() *SysMenuUpdateOne {
	smuo.mutation.ClearIcon()
	return smuo
}

// SetPath sets the "path" field.
func (smuo *SysMenuUpdateOne) SetPath(s string) *SysMenuUpdateOne {
	smuo.mutation.SetPath(s)
	return smuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePath(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetPath(*s)
	}
	return smuo
}

// ClearPath clears the value of the "path" field.
func (smuo *SysMenuUpdateOne) ClearPath() *SysMenuUpdateOne {
	smuo.mutation.ClearPath()
	return smuo
}

// SetPaths sets the "paths" field.
func (smuo *SysMenuUpdateOne) SetPaths(s string) *SysMenuUpdateOne {
	smuo.mutation.SetPaths(s)
	return smuo
}

// SetNillablePaths sets the "paths" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePaths(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetPaths(*s)
	}
	return smuo
}

// ClearPaths clears the value of the "paths" field.
func (smuo *SysMenuUpdateOne) ClearPaths() *SysMenuUpdateOne {
	smuo.mutation.ClearPaths()
	return smuo
}

// SetMenuType sets the "menuType" field.
func (smuo *SysMenuUpdateOne) SetMenuType(s string) *SysMenuUpdateOne {
	smuo.mutation.SetMenuType(s)
	return smuo
}

// SetNillableMenuType sets the "menuType" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableMenuType(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetMenuType(*s)
	}
	return smuo
}

// ClearMenuType clears the value of the "menuType" field.
func (smuo *SysMenuUpdateOne) ClearMenuType() *SysMenuUpdateOne {
	smuo.mutation.ClearMenuType()
	return smuo
}

// SetAction sets the "action" field.
func (smuo *SysMenuUpdateOne) SetAction(s string) *SysMenuUpdateOne {
	smuo.mutation.SetAction(s)
	return smuo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableAction(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetAction(*s)
	}
	return smuo
}

// ClearAction clears the value of the "action" field.
func (smuo *SysMenuUpdateOne) ClearAction() *SysMenuUpdateOne {
	smuo.mutation.ClearAction()
	return smuo
}

// SetPermission sets the "permission" field.
func (smuo *SysMenuUpdateOne) SetPermission(s string) *SysMenuUpdateOne {
	smuo.mutation.SetPermission(s)
	return smuo
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePermission(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetPermission(*s)
	}
	return smuo
}

// ClearPermission clears the value of the "permission" field.
func (smuo *SysMenuUpdateOne) ClearPermission() *SysMenuUpdateOne {
	smuo.mutation.ClearPermission()
	return smuo
}

// SetNoCache sets the "noCache" field.
func (smuo *SysMenuUpdateOne) SetNoCache(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetNoCache(b)
	return smuo
}

// SetNillableNoCache sets the "noCache" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableNoCache(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetNoCache(*b)
	}
	return smuo
}

// ClearNoCache clears the value of the "noCache" field.
func (smuo *SysMenuUpdateOne) ClearNoCache() *SysMenuUpdateOne {
	smuo.mutation.ClearNoCache()
	return smuo
}

// SetBreadcrumb sets the "breadcrumb" field.
func (smuo *SysMenuUpdateOne) SetBreadcrumb(s string) *SysMenuUpdateOne {
	smuo.mutation.SetBreadcrumb(s)
	return smuo
}

// SetNillableBreadcrumb sets the "breadcrumb" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableBreadcrumb(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetBreadcrumb(*s)
	}
	return smuo
}

// ClearBreadcrumb clears the value of the "breadcrumb" field.
func (smuo *SysMenuUpdateOne) ClearBreadcrumb() *SysMenuUpdateOne {
	smuo.mutation.ClearBreadcrumb()
	return smuo
}

// SetComponent sets the "component" field.
func (smuo *SysMenuUpdateOne) SetComponent(s string) *SysMenuUpdateOne {
	smuo.mutation.SetComponent(s)
	return smuo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableComponent(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetComponent(*s)
	}
	return smuo
}

// ClearComponent clears the value of the "component" field.
func (smuo *SysMenuUpdateOne) ClearComponent() *SysMenuUpdateOne {
	smuo.mutation.ClearComponent()
	return smuo
}

// SetSort sets the "sort" field.
func (smuo *SysMenuUpdateOne) SetSort(i int32) *SysMenuUpdateOne {
	smuo.mutation.ResetSort()
	smuo.mutation.SetSort(i)
	return smuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableSort(i *int32) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetSort(*i)
	}
	return smuo
}

// AddSort adds i to the "sort" field.
func (smuo *SysMenuUpdateOne) AddSort(i int32) *SysMenuUpdateOne {
	smuo.mutation.AddSort(i)
	return smuo
}

// ClearSort clears the value of the "sort" field.
func (smuo *SysMenuUpdateOne) ClearSort() *SysMenuUpdateOne {
	smuo.mutation.ClearSort()
	return smuo
}

// SetVisible sets the "visible" field.
func (smuo *SysMenuUpdateOne) SetVisible(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetVisible(b)
	return smuo
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableVisible(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetVisible(*b)
	}
	return smuo
}

// ClearVisible clears the value of the "visible" field.
func (smuo *SysMenuUpdateOne) ClearVisible() *SysMenuUpdateOne {
	smuo.mutation.ClearVisible()
	return smuo
}

// SetIsFrame sets the "isFrame" field.
func (smuo *SysMenuUpdateOne) SetIsFrame(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetIsFrame(b)
	return smuo
}

// SetNillableIsFrame sets the "isFrame" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsFrame(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetIsFrame(*b)
	}
	return smuo
}

// ClearIsFrame clears the value of the "isFrame" field.
func (smuo *SysMenuUpdateOne) ClearIsFrame() *SysMenuUpdateOne {
	smuo.mutation.ClearIsFrame()
	return smuo
}

// SetSysApi sets the "sysApi" field.
func (smuo *SysMenuUpdateOne) SetSysApi(s string) *SysMenuUpdateOne {
	smuo.mutation.SetSysApi(s)
	return smuo
}

// SetNillableSysApi sets the "sysApi" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableSysApi(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetSysApi(*s)
	}
	return smuo
}

// ClearSysApi clears the value of the "sysApi" field.
func (smuo *SysMenuUpdateOne) ClearSysApi() *SysMenuUpdateOne {
	smuo.mutation.ClearSysApi()
	return smuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (smuo *SysMenuUpdateOne) SetUpdatedAt(t time.Time) *SysMenuUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// SetCreateBy sets the "createBy" field.
func (smuo *SysMenuUpdateOne) SetCreateBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetCreateBy()
	smuo.mutation.SetCreateBy(i)
	return smuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableCreateBy(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetCreateBy(*i)
	}
	return smuo
}

// AddCreateBy adds i to the "createBy" field.
func (smuo *SysMenuUpdateOne) AddCreateBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddCreateBy(i)
	return smuo
}

// SetUpdateBy sets the "updateBy" field.
func (smuo *SysMenuUpdateOne) SetUpdateBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetUpdateBy()
	smuo.mutation.SetUpdateBy(i)
	return smuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableUpdateBy(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetUpdateBy(*i)
	}
	return smuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (smuo *SysMenuUpdateOne) AddUpdateBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddUpdateBy(i)
	return smuo
}

// SetTenantId sets the "tenantId" field.
func (smuo *SysMenuUpdateOne) SetTenantId(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetTenantId()
	smuo.mutation.SetTenantId(i)
	return smuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableTenantId(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetTenantId(*i)
	}
	return smuo
}

// AddTenantId adds i to the "tenantId" field.
func (smuo *SysMenuUpdateOne) AddTenantId(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddTenantId(i)
	return smuo
}

// AddRoleIDs adds the "role" edge to the SysRole entity by IDs.
func (smuo *SysMenuUpdateOne) AddRoleIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.AddRoleIDs(ids...)
	return smuo
}

// AddRole adds the "role" edges to the SysRole entity.
func (smuo *SysMenuUpdateOne) AddRole(s ...*SysRole) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddRoleIDs(ids...)
}

// SetParentID sets the "parent" edge to the SysMenu entity by ID.
func (smuo *SysMenuUpdateOne) SetParentID(id int64) *SysMenuUpdateOne {
	smuo.mutation.SetParentID(id)
	return smuo
}

// SetNillableParentID sets the "parent" edge to the SysMenu entity by ID if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableParentID(id *int64) *SysMenuUpdateOne {
	if id != nil {
		smuo = smuo.SetParentID(*id)
	}
	return smuo
}

// SetParent sets the "parent" edge to the SysMenu entity.
func (smuo *SysMenuUpdateOne) SetParent(s *SysMenu) *SysMenuUpdateOne {
	return smuo.SetParentID(s.ID)
}

// AddChildeIDs adds the "childes" edge to the SysMenu entity by IDs.
func (smuo *SysMenuUpdateOne) AddChildeIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.AddChildeIDs(ids...)
	return smuo
}

// AddChildes adds the "childes" edges to the SysMenu entity.
func (smuo *SysMenuUpdateOne) AddChildes(s ...*SysMenu) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddChildeIDs(ids...)
}

// Mutation returns the SysMenuMutation object of the builder.
func (smuo *SysMenuUpdateOne) Mutation() *SysMenuMutation {
	return smuo.mutation
}

// ClearRole clears all "role" edges to the SysRole entity.
func (smuo *SysMenuUpdateOne) ClearRole() *SysMenuUpdateOne {
	smuo.mutation.ClearRole()
	return smuo
}

// RemoveRoleIDs removes the "role" edge to SysRole entities by IDs.
func (smuo *SysMenuUpdateOne) RemoveRoleIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.RemoveRoleIDs(ids...)
	return smuo
}

// RemoveRole removes "role" edges to SysRole entities.
func (smuo *SysMenuUpdateOne) RemoveRole(s ...*SysRole) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the SysMenu entity.
func (smuo *SysMenuUpdateOne) ClearParent() *SysMenuUpdateOne {
	smuo.mutation.ClearParent()
	return smuo
}

// ClearChildes clears all "childes" edges to the SysMenu entity.
func (smuo *SysMenuUpdateOne) ClearChildes() *SysMenuUpdateOne {
	smuo.mutation.ClearChildes()
	return smuo
}

// RemoveChildeIDs removes the "childes" edge to SysMenu entities by IDs.
func (smuo *SysMenuUpdateOne) RemoveChildeIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.RemoveChildeIDs(ids...)
	return smuo
}

// RemoveChildes removes "childes" edges to SysMenu entities.
func (smuo *SysMenuUpdateOne) RemoveChildes(s ...*SysMenu) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveChildeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SysMenuUpdateOne) Select(field string, fields ...string) *SysMenuUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SysMenu entity.
func (smuo *SysMenuUpdateOne) Save(ctx context.Context) (*SysMenu, error) {
	var (
		err  error
		node *SysMenu
	)
	smuo.defaults()
	if len(smuo.hooks) == 0 {
		node, err = smuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smuo.mutation = mutation
			node, err = smuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smuo.hooks) - 1; i >= 0; i-- {
			if smuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) SaveX(ctx context.Context) *SysMenu {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SysMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SysMenuUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok {
		v := sysmenu.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

func (smuo *SysMenuUpdateOne) sqlSave(ctx context.Context) (_node *SysMenu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenu.Table,
			Columns: sysmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysmenu.FieldID,
			},
		},
	}
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysMenu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysmenu.FieldID)
		for _, f := range fields {
			if !sysmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.MenuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldMenuName,
		})
	}
	if smuo.mutation.MenuNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldMenuName,
		})
	}
	if value, ok := smuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldTitle,
		})
	}
	if smuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldTitle,
		})
	}
	if value, ok := smuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldIcon,
		})
	}
	if smuo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldIcon,
		})
	}
	if value, ok := smuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPath,
		})
	}
	if smuo.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPath,
		})
	}
	if value, ok := smuo.mutation.Paths(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPaths,
		})
	}
	if smuo.mutation.PathsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPaths,
		})
	}
	if value, ok := smuo.mutation.MenuType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldMenuType,
		})
	}
	if smuo.mutation.MenuTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldMenuType,
		})
	}
	if value, ok := smuo.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldAction,
		})
	}
	if smuo.mutation.ActionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldAction,
		})
	}
	if value, ok := smuo.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPermission,
		})
	}
	if smuo.mutation.PermissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPermission,
		})
	}
	if value, ok := smuo.mutation.NoCache(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldNoCache,
		})
	}
	if smuo.mutation.NoCacheCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldNoCache,
		})
	}
	if value, ok := smuo.mutation.Breadcrumb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldBreadcrumb,
		})
	}
	if smuo.mutation.BreadcrumbCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldBreadcrumb,
		})
	}
	if value, ok := smuo.mutation.Component(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldComponent,
		})
	}
	if smuo.mutation.ComponentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldComponent,
		})
	}
	if value, ok := smuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenu.FieldSort,
		})
	}
	if value, ok := smuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenu.FieldSort,
		})
	}
	if smuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysmenu.FieldSort,
		})
	}
	if value, ok := smuo.mutation.Visible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldVisible,
		})
	}
	if smuo.mutation.VisibleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldVisible,
		})
	}
	if value, ok := smuo.mutation.IsFrame(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldIsFrame,
		})
	}
	if smuo.mutation.IsFrameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldIsFrame,
		})
	}
	if value, ok := smuo.mutation.SysApi(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldSysApi,
		})
	}
	if smuo.mutation.SysApiCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldSysApi,
		})
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenu.FieldUpdatedAt,
		})
	}
	if value, ok := smuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldCreateBy,
		})
	}
	if value, ok := smuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldCreateBy,
		})
	}
	if value, ok := smuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldUpdateBy,
		})
	}
	if value, ok := smuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldUpdateBy,
		})
	}
	if value, ok := smuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldTenantId,
		})
	}
	if value, ok := smuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldTenantId,
		})
	}
	if smuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedRoleIDs(); len(nodes) > 0 && !smuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildesTable,
			Columns: []string{sysmenu.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedChildesIDs(); len(nodes) > 0 && !smuo.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildesTable,
			Columns: []string{sysmenu.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ChildesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildesTable,
			Columns: []string{sysmenu.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysMenu{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
