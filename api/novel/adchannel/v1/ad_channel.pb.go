// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/adchannel/v1/ad_channel.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询搜索请求
type AdChannelPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *AdChannelReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *AdChannelPageReq) Reset() {
	*x = AdChannelPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelPageReq) ProtoMessage() {}

func (x *AdChannelPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelPageReq.ProtoReflect.Descriptor instead.
func (*AdChannelPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{0}
}

func (x *AdChannelPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *AdChannelPageReq) GetParam() *AdChannelReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type AdChannelPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条目
	Items []*AdChannelReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AdChannelPageReply) Reset() {
	*x = AdChannelPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelPageReply) ProtoMessage() {}

func (x *AdChannelPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelPageReply.ProtoReflect.Descriptor instead.
func (*AdChannelPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{1}
}

func (x *AdChannelPageReply) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *AdChannelPageReply) GetItems() []*AdChannelReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type AdChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//渠道名称
	ChannelName string `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,3,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//充值回传比例
	Reg int64 `protobuf:"varint,4,opt,name=reg,proto3" json:"reg,omitempty"`
	//付费回传比例
	Pay int64 `protobuf:"varint,5,opt,name=pay,proto3" json:"pay,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,6,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节号
	ChapterId int64 `protobuf:"varint,7,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节数
	ChapterNum int32 `protobuf:"varint,8,opt,name=chapterNum,proto3" json:"chapterNum,omitempty"`
	//投放渠道
	AdType string `protobuf:"bytes,9,opt,name=adType,proto3" json:"adType,omitempty"`
	//落地页图片uri
	Img string `protobuf:"bytes,10,opt,name=img,proto3" json:"img,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,13,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,14,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *AdChannelReq) Reset() {
	*x = AdChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelReq) ProtoMessage() {}

func (x *AdChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelReq.ProtoReflect.Descriptor instead.
func (*AdChannelReq) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{2}
}

func (x *AdChannelReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdChannelReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *AdChannelReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *AdChannelReq) GetReg() int64 {
	if x != nil {
		return x.Reg
	}
	return 0
}

func (x *AdChannelReq) GetPay() int64 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *AdChannelReq) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *AdChannelReq) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *AdChannelReq) GetChapterNum() int32 {
	if x != nil {
		return x.ChapterNum
	}
	return 0
}

func (x *AdChannelReq) GetAdType() string {
	if x != nil {
		return x.AdType
	}
	return ""
}

func (x *AdChannelReq) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *AdChannelReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AdChannelReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AdChannelReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *AdChannelReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *AdChannelReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索返回
type AdChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//渠道名称
	ChannelName string `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,3,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//充值回传比例
	Reg int64 `protobuf:"varint,4,opt,name=reg,proto3" json:"reg,omitempty"`
	//付费回传比例
	Pay int64 `protobuf:"varint,5,opt,name=pay,proto3" json:"pay,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,6,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节号
	ChapterId int64 `protobuf:"varint,7,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节数
	ChapterNum int32 `protobuf:"varint,8,opt,name=chapterNum,proto3" json:"chapterNum,omitempty"`
	//投放渠道
	AdType string `protobuf:"bytes,9,opt,name=adType,proto3" json:"adType,omitempty"`
	//落地页图片uri
	Img string `protobuf:"bytes,10,opt,name=img,proto3" json:"img,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,13,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,14,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *AdChannelReply) Reset() {
	*x = AdChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelReply) ProtoMessage() {}

func (x *AdChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelReply.ProtoReflect.Descriptor instead.
func (*AdChannelReply) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{3}
}

func (x *AdChannelReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdChannelReply) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *AdChannelReply) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *AdChannelReply) GetReg() int64 {
	if x != nil {
		return x.Reg
	}
	return 0
}

func (x *AdChannelReply) GetPay() int64 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *AdChannelReply) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *AdChannelReply) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *AdChannelReply) GetChapterNum() int32 {
	if x != nil {
		return x.ChapterNum
	}
	return 0
}

func (x *AdChannelReply) GetAdType() string {
	if x != nil {
		return x.AdType
	}
	return ""
}

func (x *AdChannelReply) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *AdChannelReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AdChannelReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AdChannelReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *AdChannelReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *AdChannelReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 创建AdChannel请求
type AdChannelCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//渠道名称
	ChannelName string `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,2,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//充值回传比例
	Reg int64 `protobuf:"varint,3,opt,name=reg,proto3" json:"reg,omitempty"`
	//付费回传比例
	Pay int64 `protobuf:"varint,4,opt,name=pay,proto3" json:"pay,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,5,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节号
	ChapterId int64 `protobuf:"varint,6,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节数
	ChapterNum int32 `protobuf:"varint,7,opt,name=chapterNum,proto3" json:"chapterNum,omitempty"`
	//投放渠道
	AdType string `protobuf:"bytes,8,opt,name=adType,proto3" json:"adType,omitempty"`
	//落地页图片uri
	Img string `protobuf:"bytes,9,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *AdChannelCreateReq) Reset() {
	*x = AdChannelCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelCreateReq) ProtoMessage() {}

func (x *AdChannelCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelCreateReq.ProtoReflect.Descriptor instead.
func (*AdChannelCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{4}
}

func (x *AdChannelCreateReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *AdChannelCreateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *AdChannelCreateReq) GetReg() int64 {
	if x != nil {
		return x.Reg
	}
	return 0
}

func (x *AdChannelCreateReq) GetPay() int64 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *AdChannelCreateReq) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *AdChannelCreateReq) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *AdChannelCreateReq) GetChapterNum() int32 {
	if x != nil {
		return x.ChapterNum
	}
	return 0
}

func (x *AdChannelCreateReq) GetAdType() string {
	if x != nil {
		return x.AdType
	}
	return ""
}

func (x *AdChannelCreateReq) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

// 创建AdChannel返回
type AdChannelCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//渠道名称
	ChannelName string `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,3,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//充值回传比例
	Reg int64 `protobuf:"varint,4,opt,name=reg,proto3" json:"reg,omitempty"`
	//付费回传比例
	Pay int64 `protobuf:"varint,5,opt,name=pay,proto3" json:"pay,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,6,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节号
	ChapterId int64 `protobuf:"varint,7,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节数
	ChapterNum int32 `protobuf:"varint,8,opt,name=chapterNum,proto3" json:"chapterNum,omitempty"`
	//投放渠道
	AdType string `protobuf:"bytes,9,opt,name=adType,proto3" json:"adType,omitempty"`
	//落地页图片uri
	Img string `protobuf:"bytes,10,opt,name=img,proto3" json:"img,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,13,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,14,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *AdChannelCreateReply) Reset() {
	*x = AdChannelCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelCreateReply) ProtoMessage() {}

func (x *AdChannelCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelCreateReply.ProtoReflect.Descriptor instead.
func (*AdChannelCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{5}
}

func (x *AdChannelCreateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdChannelCreateReply) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *AdChannelCreateReply) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *AdChannelCreateReply) GetReg() int64 {
	if x != nil {
		return x.Reg
	}
	return 0
}

func (x *AdChannelCreateReply) GetPay() int64 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *AdChannelCreateReply) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *AdChannelCreateReply) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *AdChannelCreateReply) GetChapterNum() int32 {
	if x != nil {
		return x.ChapterNum
	}
	return 0
}

func (x *AdChannelCreateReply) GetAdType() string {
	if x != nil {
		return x.AdType
	}
	return ""
}

func (x *AdChannelCreateReply) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *AdChannelCreateReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AdChannelCreateReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AdChannelCreateReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *AdChannelCreateReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *AdChannelCreateReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 更新AdChannel请求
type AdChannelUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//渠道名称
	ChannelName string `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,3,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//充值回传比例
	Reg int64 `protobuf:"varint,4,opt,name=reg,proto3" json:"reg,omitempty"`
	//付费回传比例
	Pay int64 `protobuf:"varint,5,opt,name=pay,proto3" json:"pay,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,6,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节号
	ChapterId int64 `protobuf:"varint,7,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节数
	ChapterNum int32 `protobuf:"varint,8,opt,name=chapterNum,proto3" json:"chapterNum,omitempty"`
	//投放渠道
	AdType string `protobuf:"bytes,9,opt,name=adType,proto3" json:"adType,omitempty"`
	//落地页图片uri
	Img string `protobuf:"bytes,10,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *AdChannelUpdateReq) Reset() {
	*x = AdChannelUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelUpdateReq) ProtoMessage() {}

func (x *AdChannelUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelUpdateReq.ProtoReflect.Descriptor instead.
func (*AdChannelUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{6}
}

func (x *AdChannelUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdChannelUpdateReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *AdChannelUpdateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *AdChannelUpdateReq) GetReg() int64 {
	if x != nil {
		return x.Reg
	}
	return 0
}

func (x *AdChannelUpdateReq) GetPay() int64 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *AdChannelUpdateReq) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *AdChannelUpdateReq) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *AdChannelUpdateReq) GetChapterNum() int32 {
	if x != nil {
		return x.ChapterNum
	}
	return 0
}

func (x *AdChannelUpdateReq) GetAdType() string {
	if x != nil {
		return x.AdType
	}
	return ""
}

func (x *AdChannelUpdateReq) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

// 更新AdChannel返回
type AdChannelUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//渠道名称
	ChannelName string `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	//书号
	NovelId int64 `protobuf:"varint,3,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//充值回传比例
	Reg int64 `protobuf:"varint,4,opt,name=reg,proto3" json:"reg,omitempty"`
	//付费回传比例
	Pay int64 `protobuf:"varint,5,opt,name=pay,proto3" json:"pay,omitempty"`
	//书名
	NovelName string `protobuf:"bytes,6,opt,name=novelName,proto3" json:"novelName,omitempty"`
	//章节号
	ChapterId int64 `protobuf:"varint,7,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	//章节数
	ChapterNum int32 `protobuf:"varint,8,opt,name=chapterNum,proto3" json:"chapterNum,omitempty"`
	//投放渠道
	AdType string `protobuf:"bytes,9,opt,name=adType,proto3" json:"adType,omitempty"`
	//落地页图片uri
	Img string `protobuf:"bytes,10,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *AdChannelUpdateReply) Reset() {
	*x = AdChannelUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelUpdateReply) ProtoMessage() {}

func (x *AdChannelUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelUpdateReply.ProtoReflect.Descriptor instead.
func (*AdChannelUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{7}
}

func (x *AdChannelUpdateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdChannelUpdateReply) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *AdChannelUpdateReply) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *AdChannelUpdateReply) GetReg() int64 {
	if x != nil {
		return x.Reg
	}
	return 0
}

func (x *AdChannelUpdateReply) GetPay() int64 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *AdChannelUpdateReply) GetNovelName() string {
	if x != nil {
		return x.NovelName
	}
	return ""
}

func (x *AdChannelUpdateReply) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *AdChannelUpdateReply) GetChapterNum() int32 {
	if x != nil {
		return x.ChapterNum
	}
	return 0
}

func (x *AdChannelUpdateReply) GetAdType() string {
	if x != nil {
		return x.AdType
	}
	return ""
}

func (x *AdChannelUpdateReply) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

// 删除AdChannel请求
type AdChannelDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdChannelDeleteReq) Reset() {
	*x = AdChannelDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelDeleteReq) ProtoMessage() {}

func (x *AdChannelDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelDeleteReq.ProtoReflect.Descriptor instead.
func (*AdChannelDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{8}
}

func (x *AdChannelDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除AdChannel请求
type AdChannelBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *AdChannelBatchDeleteReq) Reset() {
	*x = AdChannelBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelBatchDeleteReq) ProtoMessage() {}

func (x *AdChannelBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*AdChannelBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{9}
}

func (x *AdChannelBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除AdChannel返回
type AdChannelDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AdChannelDeleteReply) Reset() {
	*x = AdChannelDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdChannelDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdChannelDeleteReply) ProtoMessage() {}

func (x *AdChannelDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdChannelDeleteReply.ProtoReflect.Descriptor instead.
func (*AdChannelDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP(), []int{10}
}

func (x *AdChannelDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_adchannel_v1_ad_channel_proto protoreflect.FileDescriptor

var file_api_novel_adchannel_v1_ad_channel_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x61, 0x64, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x64, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x10, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x71, 0x0a, 0x12, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcc, 0x03, 0x0a, 0x0c, 0x41, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x72, 0x65, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x6d, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xce, 0x03, 0x0a, 0x0e, 0x41, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6d, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x61, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x6d, 0x67, 0x22, 0xd4, 0x03, 0x0a, 0x14, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x61, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x6d, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x12,
	0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70,
	0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x41, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x61,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x22, 0x24, 0x0a, 0x12, 0x41, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a,
	0x17, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x41, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xbd, 0x05, 0x0a, 0x09, 0x41,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x70, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x61,
	0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61,
	0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x2e, 0x61, 0x64, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x76, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x1a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x61, 0x64,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20,
	0x2e, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x78, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x20, 0x5a, 0x1e, 0x68, 0x6f,
	0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x61, 0x64, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_novel_adchannel_v1_ad_channel_proto_rawDescOnce sync.Once
	file_api_novel_adchannel_v1_ad_channel_proto_rawDescData = file_api_novel_adchannel_v1_ad_channel_proto_rawDesc
)

func file_api_novel_adchannel_v1_ad_channel_proto_rawDescGZIP() []byte {
	file_api_novel_adchannel_v1_ad_channel_proto_rawDescOnce.Do(func() {
		file_api_novel_adchannel_v1_ad_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_adchannel_v1_ad_channel_proto_rawDescData)
	})
	return file_api_novel_adchannel_v1_ad_channel_proto_rawDescData
}

var file_api_novel_adchannel_v1_ad_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_novel_adchannel_v1_ad_channel_proto_goTypes = []interface{}{
	(*AdChannelPageReq)(nil),        // 0: adchannel.v1.AdChannelPageReq
	(*AdChannelPageReply)(nil),      // 1: adchannel.v1.AdChannelPageReply
	(*AdChannelReq)(nil),            // 2: adchannel.v1.AdChannelReq
	(*AdChannelReply)(nil),          // 3: adchannel.v1.AdChannelReply
	(*AdChannelCreateReq)(nil),      // 4: adchannel.v1.AdChannelCreateReq
	(*AdChannelCreateReply)(nil),    // 5: adchannel.v1.AdChannelCreateReply
	(*AdChannelUpdateReq)(nil),      // 6: adchannel.v1.AdChannelUpdateReq
	(*AdChannelUpdateReply)(nil),    // 7: adchannel.v1.AdChannelUpdateReply
	(*AdChannelDeleteReq)(nil),      // 8: adchannel.v1.AdChannelDeleteReq
	(*AdChannelBatchDeleteReq)(nil), // 9: adchannel.v1.AdChannelBatchDeleteReq
	(*AdChannelDeleteReply)(nil),    // 10: adchannel.v1.AdChannelDeleteReply
	(*pagin.Pagination)(nil),        // 11: pagin.Pagination
	(*timestamppb.Timestamp)(nil),   // 12: google.protobuf.Timestamp
}
var file_api_novel_adchannel_v1_ad_channel_proto_depIdxs = []int32{
	11, // 0: adchannel.v1.AdChannelPageReq.pagin:type_name -> pagin.Pagination
	2,  // 1: adchannel.v1.AdChannelPageReq.param:type_name -> adchannel.v1.AdChannelReq
	11, // 2: adchannel.v1.AdChannelPageReply.pagin:type_name -> pagin.Pagination
	3,  // 3: adchannel.v1.AdChannelPageReply.items:type_name -> adchannel.v1.AdChannelReply
	12, // 4: adchannel.v1.AdChannelReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 5: adchannel.v1.AdChannelReq.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 6: adchannel.v1.AdChannelReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 7: adchannel.v1.AdChannelReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 8: adchannel.v1.AdChannelCreateReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 9: adchannel.v1.AdChannelCreateReply.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 10: adchannel.v1.AdChannel.GetPageAdChannel:input_type -> adchannel.v1.AdChannelPageReq
	2,  // 11: adchannel.v1.AdChannel.GetAdChannel:input_type -> adchannel.v1.AdChannelReq
	6,  // 12: adchannel.v1.AdChannel.UpdateAdChannel:input_type -> adchannel.v1.AdChannelUpdateReq
	4,  // 13: adchannel.v1.AdChannel.CreateAdChannel:input_type -> adchannel.v1.AdChannelCreateReq
	8,  // 14: adchannel.v1.AdChannel.DeleteAdChannel:input_type -> adchannel.v1.AdChannelDeleteReq
	9,  // 15: adchannel.v1.AdChannel.BatchDeleteAdChannel:input_type -> adchannel.v1.AdChannelBatchDeleteReq
	1,  // 16: adchannel.v1.AdChannel.GetPageAdChannel:output_type -> adchannel.v1.AdChannelPageReply
	3,  // 17: adchannel.v1.AdChannel.GetAdChannel:output_type -> adchannel.v1.AdChannelReply
	7,  // 18: adchannel.v1.AdChannel.UpdateAdChannel:output_type -> adchannel.v1.AdChannelUpdateReply
	5,  // 19: adchannel.v1.AdChannel.CreateAdChannel:output_type -> adchannel.v1.AdChannelCreateReply
	10, // 20: adchannel.v1.AdChannel.DeleteAdChannel:output_type -> adchannel.v1.AdChannelDeleteReply
	10, // 21: adchannel.v1.AdChannel.BatchDeleteAdChannel:output_type -> adchannel.v1.AdChannelDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_novel_adchannel_v1_ad_channel_proto_init() }
func file_api_novel_adchannel_v1_ad_channel_proto_init() {
	if File_api_novel_adchannel_v1_ad_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_adchannel_v1_ad_channel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdChannelDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_adchannel_v1_ad_channel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_adchannel_v1_ad_channel_proto_goTypes,
		DependencyIndexes: file_api_novel_adchannel_v1_ad_channel_proto_depIdxs,
		MessageInfos:      file_api_novel_adchannel_v1_ad_channel_proto_msgTypes,
	}.Build()
	File_api_novel_adchannel_v1_ad_channel_proto = out.File
	file_api_novel_adchannel_v1_ad_channel_proto_rawDesc = nil
	file_api_novel_adchannel_v1_ad_channel_proto_goTypes = nil
	file_api_novel_adchannel_v1_ad_channel_proto_depIdxs = nil
}
