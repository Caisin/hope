// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/novel_comment.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/novelcomment/v1"
	"hope/apps/novel/internal/data/ent"
	"hope/apps/novel/internal/data/ent/novelcomment"
)

func NovelCommentUpdateReq2Data(v *v1.NovelCommentUpdateReq) *ent.NovelComment {
	if v == nil {
		return nil
	}
	return &ent.NovelComment{
		ID:          v.Id,
		NovelId:     v.NovelId,
		UserId:      v.UserId,
		Avatar:      v.Avatar,
		UserName:    v.UserName,
		RepUserId:   v.RepUserId,
		RepUserName: v.RepUserName,
		Content:     v.Content,
		Score:       v.Score,
		PId:         v.PId,
		IsTop:       v.IsTop,
		State:       novelcomment.State(v.State),
		IsHighlight: v.IsHighlight,
		IsHot:       v.IsHot,
	}
}

func NovelCommentData2UpdateReq(v *ent.NovelComment) *v1.NovelCommentUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.NovelCommentUpdateReq{
		Id:          v.ID,
		NovelId:     v.NovelId,
		UserId:      v.UserId,
		Avatar:      v.Avatar,
		UserName:    v.UserName,
		RepUserId:   v.RepUserId,
		RepUserName: v.RepUserName,
		Content:     v.Content,
		Score:       v.Score,
		PId:         v.PId,
		IsTop:       v.IsTop,
		State:       string(v.State),
		IsHighlight: v.IsHighlight,
		IsHot:       v.IsHot,
	}
}

func NovelCommentCreateReq2Data(v *v1.NovelCommentCreateReq) *ent.NovelComment {
	if v == nil {
		return nil
	}
	return &ent.NovelComment{
		NovelId:     v.NovelId,
		UserId:      v.UserId,
		Avatar:      v.Avatar,
		UserName:    v.UserName,
		RepUserId:   v.RepUserId,
		RepUserName: v.RepUserName,
		Content:     v.Content,
		Score:       v.Score,
		PId:         v.PId,
		IsTop:       v.IsTop,
		State:       novelcomment.State(v.State),
		IsHighlight: v.IsHighlight,
		IsHot:       v.IsHot,
	}
}

func NovelCommentData2CreateReq(v *ent.NovelComment) *v1.NovelCommentCreateReq {
	if v == nil {
		return nil
	}
	return &v1.NovelCommentCreateReq{
		NovelId:     v.NovelId,
		UserId:      v.UserId,
		Avatar:      v.Avatar,
		UserName:    v.UserName,
		RepUserId:   v.RepUserId,
		RepUserName: v.RepUserName,
		Content:     v.Content,
		Score:       v.Score,
		PId:         v.PId,
		IsTop:       v.IsTop,
		State:       string(v.State),
		IsHighlight: v.IsHighlight,
		IsHot:       v.IsHot,
	}
}

func NovelCommentReq2Data(v *v1.NovelCommentReq) *ent.NovelComment {
	if v == nil {
		return nil
	}
	return &ent.NovelComment{
		NovelId:     v.NovelId,
		UserId:      v.UserId,
		Avatar:      v.Avatar,
		UserName:    v.UserName,
		RepUserId:   v.RepUserId,
		RepUserName: v.RepUserName,
		Content:     v.Content,
		Score:       v.Score,
		PId:         v.PId,
		IsTop:       v.IsTop,
		State:       novelcomment.State(v.State),
		IsHighlight: v.IsHighlight,
		IsHot:       v.IsHot,
	}
}

func NovelCommentData2Req(v *ent.NovelComment) *v1.NovelCommentReq {
	if v == nil {
		return nil
	}
	return &v1.NovelCommentReq{
		NovelId:     v.NovelId,
		UserId:      v.UserId,
		Avatar:      v.Avatar,
		UserName:    v.UserName,
		RepUserId:   v.RepUserId,
		RepUserName: v.RepUserName,
		Content:     v.Content,
		Score:       v.Score,
		PId:         v.PId,
		IsTop:       v.IsTop,
		State:       string(v.State),
		IsHighlight: v.IsHighlight,
		IsHot:       v.IsHot,
	}
}

func NovelCommentData2Reply(v *ent.NovelComment) *v1.NovelCommentData {
	if v == nil {
		return nil
	}
	return &v1.NovelCommentData{
		Id:          v.ID,
		NovelId:     v.NovelId,
		UserId:      v.UserId,
		Avatar:      v.Avatar,
		UserName:    v.UserName,
		RepUserId:   v.RepUserId,
		RepUserName: v.RepUserName,
		Content:     v.Content,
		Score:       v.Score,
		PId:         v.PId,
		IsTop:       v.IsTop,
		State:       string(v.State),
		IsHighlight: v.IsHighlight,
		IsHot:       v.IsHot,
		Remark:      v.Remark,
		CreatedAt:   timestamppb.New(v.CreatedAt),
		UpdatedAt:   timestamppb.New(v.UpdatedAt),
		CreateBy:    v.CreateBy,
		UpdateBy:    v.UpdateBy,
		TenantId:    v.TenantId,
	}
}
