// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysjob"
	"hope/apps/admin/internal/data/ent/sysjoblog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysJobLogUpdate is the builder for updating SysJobLog entities.
type SysJobLogUpdate struct {
	config
	hooks    []Hook
	mutation *SysJobLogMutation
}

// Where appends a list predicates to the SysJobLogUpdate builder.
func (sjlu *SysJobLogUpdate) Where(ps ...predicate.SysJobLog) *SysJobLogUpdate {
	sjlu.mutation.Where(ps...)
	return sjlu
}

// SetJobId sets the "jobId" field.
func (sjlu *SysJobLogUpdate) SetJobId(i int32) *SysJobLogUpdate {
	sjlu.mutation.ResetJobId()
	sjlu.mutation.SetJobId(i)
	return sjlu
}

// SetNillableJobId sets the "jobId" field if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableJobId(i *int32) *SysJobLogUpdate {
	if i != nil {
		sjlu.SetJobId(*i)
	}
	return sjlu
}

// AddJobId adds i to the "jobId" field.
func (sjlu *SysJobLogUpdate) AddJobId(i int32) *SysJobLogUpdate {
	sjlu.mutation.AddJobId(i)
	return sjlu
}

// ClearJobId clears the value of the "jobId" field.
func (sjlu *SysJobLogUpdate) ClearJobId() *SysJobLogUpdate {
	sjlu.mutation.ClearJobId()
	return sjlu
}

// SetJobName sets the "jobName" field.
func (sjlu *SysJobLogUpdate) SetJobName(s string) *SysJobLogUpdate {
	sjlu.mutation.SetJobName(s)
	return sjlu
}

// SetNillableJobName sets the "jobName" field if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableJobName(s *string) *SysJobLogUpdate {
	if s != nil {
		sjlu.SetJobName(*s)
	}
	return sjlu
}

// ClearJobName clears the value of the "jobName" field.
func (sjlu *SysJobLogUpdate) ClearJobName() *SysJobLogUpdate {
	sjlu.mutation.ClearJobName()
	return sjlu
}

// SetEntryId sets the "entryId" field.
func (sjlu *SysJobLogUpdate) SetEntryId(i int32) *SysJobLogUpdate {
	sjlu.mutation.ResetEntryId()
	sjlu.mutation.SetEntryId(i)
	return sjlu
}

// SetNillableEntryId sets the "entryId" field if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableEntryId(i *int32) *SysJobLogUpdate {
	if i != nil {
		sjlu.SetEntryId(*i)
	}
	return sjlu
}

// AddEntryId adds i to the "entryId" field.
func (sjlu *SysJobLogUpdate) AddEntryId(i int32) *SysJobLogUpdate {
	sjlu.mutation.AddEntryId(i)
	return sjlu
}

// ClearEntryId clears the value of the "entryId" field.
func (sjlu *SysJobLogUpdate) ClearEntryId() *SysJobLogUpdate {
	sjlu.mutation.ClearEntryId()
	return sjlu
}

// SetStatus sets the "status" field.
func (sjlu *SysJobLogUpdate) SetStatus(b bool) *SysJobLogUpdate {
	sjlu.mutation.SetStatus(b)
	return sjlu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableStatus(b *bool) *SysJobLogUpdate {
	if b != nil {
		sjlu.SetStatus(*b)
	}
	return sjlu
}

// ClearStatus clears the value of the "status" field.
func (sjlu *SysJobLogUpdate) ClearStatus() *SysJobLogUpdate {
	sjlu.mutation.ClearStatus()
	return sjlu
}

// SetDuration sets the "duration" field.
func (sjlu *SysJobLogUpdate) SetDuration(t time.Duration) *SysJobLogUpdate {
	sjlu.mutation.ResetDuration()
	sjlu.mutation.SetDuration(t)
	return sjlu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableDuration(t *time.Duration) *SysJobLogUpdate {
	if t != nil {
		sjlu.SetDuration(*t)
	}
	return sjlu
}

// AddDuration adds t to the "duration" field.
func (sjlu *SysJobLogUpdate) AddDuration(t time.Duration) *SysJobLogUpdate {
	sjlu.mutation.AddDuration(t)
	return sjlu
}

// ClearDuration clears the value of the "duration" field.
func (sjlu *SysJobLogUpdate) ClearDuration() *SysJobLogUpdate {
	sjlu.mutation.ClearDuration()
	return sjlu
}

// SetInfo sets the "info" field.
func (sjlu *SysJobLogUpdate) SetInfo(s string) *SysJobLogUpdate {
	sjlu.mutation.SetInfo(s)
	return sjlu
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableInfo(s *string) *SysJobLogUpdate {
	if s != nil {
		sjlu.SetInfo(*s)
	}
	return sjlu
}

// ClearInfo clears the value of the "info" field.
func (sjlu *SysJobLogUpdate) ClearInfo() *SysJobLogUpdate {
	sjlu.mutation.ClearInfo()
	return sjlu
}

// SetUpdatedAt sets the "updatedAt" field.
func (sjlu *SysJobLogUpdate) SetUpdatedAt(t time.Time) *SysJobLogUpdate {
	sjlu.mutation.SetUpdatedAt(t)
	return sjlu
}

// SetCreateBy sets the "createBy" field.
func (sjlu *SysJobLogUpdate) SetCreateBy(i int64) *SysJobLogUpdate {
	sjlu.mutation.ResetCreateBy()
	sjlu.mutation.SetCreateBy(i)
	return sjlu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableCreateBy(i *int64) *SysJobLogUpdate {
	if i != nil {
		sjlu.SetCreateBy(*i)
	}
	return sjlu
}

// AddCreateBy adds i to the "createBy" field.
func (sjlu *SysJobLogUpdate) AddCreateBy(i int64) *SysJobLogUpdate {
	sjlu.mutation.AddCreateBy(i)
	return sjlu
}

// SetUpdateBy sets the "updateBy" field.
func (sjlu *SysJobLogUpdate) SetUpdateBy(i int64) *SysJobLogUpdate {
	sjlu.mutation.ResetUpdateBy()
	sjlu.mutation.SetUpdateBy(i)
	return sjlu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableUpdateBy(i *int64) *SysJobLogUpdate {
	if i != nil {
		sjlu.SetUpdateBy(*i)
	}
	return sjlu
}

// AddUpdateBy adds i to the "updateBy" field.
func (sjlu *SysJobLogUpdate) AddUpdateBy(i int64) *SysJobLogUpdate {
	sjlu.mutation.AddUpdateBy(i)
	return sjlu
}

// SetTenantId sets the "tenantId" field.
func (sjlu *SysJobLogUpdate) SetTenantId(i int64) *SysJobLogUpdate {
	sjlu.mutation.ResetTenantId()
	sjlu.mutation.SetTenantId(i)
	return sjlu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableTenantId(i *int64) *SysJobLogUpdate {
	if i != nil {
		sjlu.SetTenantId(*i)
	}
	return sjlu
}

// AddTenantId adds i to the "tenantId" field.
func (sjlu *SysJobLogUpdate) AddTenantId(i int64) *SysJobLogUpdate {
	sjlu.mutation.AddTenantId(i)
	return sjlu
}

// SetJobID sets the "job" edge to the SysJob entity by ID.
func (sjlu *SysJobLogUpdate) SetJobID(id int64) *SysJobLogUpdate {
	sjlu.mutation.SetJobID(id)
	return sjlu
}

// SetNillableJobID sets the "job" edge to the SysJob entity by ID if the given value is not nil.
func (sjlu *SysJobLogUpdate) SetNillableJobID(id *int64) *SysJobLogUpdate {
	if id != nil {
		sjlu = sjlu.SetJobID(*id)
	}
	return sjlu
}

// SetJob sets the "job" edge to the SysJob entity.
func (sjlu *SysJobLogUpdate) SetJob(s *SysJob) *SysJobLogUpdate {
	return sjlu.SetJobID(s.ID)
}

// Mutation returns the SysJobLogMutation object of the builder.
func (sjlu *SysJobLogUpdate) Mutation() *SysJobLogMutation {
	return sjlu.mutation
}

// ClearJob clears the "job" edge to the SysJob entity.
func (sjlu *SysJobLogUpdate) ClearJob() *SysJobLogUpdate {
	sjlu.mutation.ClearJob()
	return sjlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sjlu *SysJobLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sjlu.defaults()
	if len(sjlu.hooks) == 0 {
		affected, err = sjlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysJobLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sjlu.mutation = mutation
			affected, err = sjlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sjlu.hooks) - 1; i >= 0; i-- {
			if sjlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sjlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sjlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sjlu *SysJobLogUpdate) SaveX(ctx context.Context) int {
	affected, err := sjlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sjlu *SysJobLogUpdate) Exec(ctx context.Context) error {
	_, err := sjlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjlu *SysJobLogUpdate) ExecX(ctx context.Context) {
	if err := sjlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjlu *SysJobLogUpdate) defaults() {
	if _, ok := sjlu.mutation.UpdatedAt(); !ok {
		v := sysjoblog.UpdateDefaultUpdatedAt()
		sjlu.mutation.SetUpdatedAt(v)
	}
}

func (sjlu *SysJobLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysjoblog.Table,
			Columns: sysjoblog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysjoblog.FieldID,
			},
		},
	}
	if ps := sjlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sjlu.mutation.JobId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldJobId,
		})
	}
	if value, ok := sjlu.mutation.AddedJobId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldJobId,
		})
	}
	if sjlu.mutation.JobIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysjoblog.FieldJobId,
		})
	}
	if value, ok := sjlu.mutation.JobName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysjoblog.FieldJobName,
		})
	}
	if sjlu.mutation.JobNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysjoblog.FieldJobName,
		})
	}
	if value, ok := sjlu.mutation.EntryId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldEntryId,
		})
	}
	if value, ok := sjlu.mutation.AddedEntryId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldEntryId,
		})
	}
	if sjlu.mutation.EntryIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysjoblog.FieldEntryId,
		})
	}
	if value, ok := sjlu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysjoblog.FieldStatus,
		})
	}
	if sjlu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysjoblog.FieldStatus,
		})
	}
	if value, ok := sjlu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldDuration,
		})
	}
	if value, ok := sjlu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldDuration,
		})
	}
	if sjlu.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: sysjoblog.FieldDuration,
		})
	}
	if value, ok := sjlu.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysjoblog.FieldInfo,
		})
	}
	if sjlu.mutation.InfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysjoblog.FieldInfo,
		})
	}
	if value, ok := sjlu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysjoblog.FieldUpdatedAt,
		})
	}
	if value, ok := sjlu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldCreateBy,
		})
	}
	if value, ok := sjlu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldCreateBy,
		})
	}
	if value, ok := sjlu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldUpdateBy,
		})
	}
	if value, ok := sjlu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldUpdateBy,
		})
	}
	if value, ok := sjlu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldTenantId,
		})
	}
	if value, ok := sjlu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldTenantId,
		})
	}
	if sjlu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysjoblog.JobTable,
			Columns: []string{sysjoblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjlu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysjoblog.JobTable,
			Columns: []string{sysjoblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sjlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysjoblog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysJobLogUpdateOne is the builder for updating a single SysJobLog entity.
type SysJobLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysJobLogMutation
}

// SetJobId sets the "jobId" field.
func (sjluo *SysJobLogUpdateOne) SetJobId(i int32) *SysJobLogUpdateOne {
	sjluo.mutation.ResetJobId()
	sjluo.mutation.SetJobId(i)
	return sjluo
}

// SetNillableJobId sets the "jobId" field if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableJobId(i *int32) *SysJobLogUpdateOne {
	if i != nil {
		sjluo.SetJobId(*i)
	}
	return sjluo
}

// AddJobId adds i to the "jobId" field.
func (sjluo *SysJobLogUpdateOne) AddJobId(i int32) *SysJobLogUpdateOne {
	sjluo.mutation.AddJobId(i)
	return sjluo
}

// ClearJobId clears the value of the "jobId" field.
func (sjluo *SysJobLogUpdateOne) ClearJobId() *SysJobLogUpdateOne {
	sjluo.mutation.ClearJobId()
	return sjluo
}

// SetJobName sets the "jobName" field.
func (sjluo *SysJobLogUpdateOne) SetJobName(s string) *SysJobLogUpdateOne {
	sjluo.mutation.SetJobName(s)
	return sjluo
}

// SetNillableJobName sets the "jobName" field if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableJobName(s *string) *SysJobLogUpdateOne {
	if s != nil {
		sjluo.SetJobName(*s)
	}
	return sjluo
}

// ClearJobName clears the value of the "jobName" field.
func (sjluo *SysJobLogUpdateOne) ClearJobName() *SysJobLogUpdateOne {
	sjluo.mutation.ClearJobName()
	return sjluo
}

// SetEntryId sets the "entryId" field.
func (sjluo *SysJobLogUpdateOne) SetEntryId(i int32) *SysJobLogUpdateOne {
	sjluo.mutation.ResetEntryId()
	sjluo.mutation.SetEntryId(i)
	return sjluo
}

// SetNillableEntryId sets the "entryId" field if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableEntryId(i *int32) *SysJobLogUpdateOne {
	if i != nil {
		sjluo.SetEntryId(*i)
	}
	return sjluo
}

// AddEntryId adds i to the "entryId" field.
func (sjluo *SysJobLogUpdateOne) AddEntryId(i int32) *SysJobLogUpdateOne {
	sjluo.mutation.AddEntryId(i)
	return sjluo
}

// ClearEntryId clears the value of the "entryId" field.
func (sjluo *SysJobLogUpdateOne) ClearEntryId() *SysJobLogUpdateOne {
	sjluo.mutation.ClearEntryId()
	return sjluo
}

// SetStatus sets the "status" field.
func (sjluo *SysJobLogUpdateOne) SetStatus(b bool) *SysJobLogUpdateOne {
	sjluo.mutation.SetStatus(b)
	return sjluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableStatus(b *bool) *SysJobLogUpdateOne {
	if b != nil {
		sjluo.SetStatus(*b)
	}
	return sjluo
}

// ClearStatus clears the value of the "status" field.
func (sjluo *SysJobLogUpdateOne) ClearStatus() *SysJobLogUpdateOne {
	sjluo.mutation.ClearStatus()
	return sjluo
}

// SetDuration sets the "duration" field.
func (sjluo *SysJobLogUpdateOne) SetDuration(t time.Duration) *SysJobLogUpdateOne {
	sjluo.mutation.ResetDuration()
	sjluo.mutation.SetDuration(t)
	return sjluo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableDuration(t *time.Duration) *SysJobLogUpdateOne {
	if t != nil {
		sjluo.SetDuration(*t)
	}
	return sjluo
}

// AddDuration adds t to the "duration" field.
func (sjluo *SysJobLogUpdateOne) AddDuration(t time.Duration) *SysJobLogUpdateOne {
	sjluo.mutation.AddDuration(t)
	return sjluo
}

// ClearDuration clears the value of the "duration" field.
func (sjluo *SysJobLogUpdateOne) ClearDuration() *SysJobLogUpdateOne {
	sjluo.mutation.ClearDuration()
	return sjluo
}

// SetInfo sets the "info" field.
func (sjluo *SysJobLogUpdateOne) SetInfo(s string) *SysJobLogUpdateOne {
	sjluo.mutation.SetInfo(s)
	return sjluo
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableInfo(s *string) *SysJobLogUpdateOne {
	if s != nil {
		sjluo.SetInfo(*s)
	}
	return sjluo
}

// ClearInfo clears the value of the "info" field.
func (sjluo *SysJobLogUpdateOne) ClearInfo() *SysJobLogUpdateOne {
	sjluo.mutation.ClearInfo()
	return sjluo
}

// SetUpdatedAt sets the "updatedAt" field.
func (sjluo *SysJobLogUpdateOne) SetUpdatedAt(t time.Time) *SysJobLogUpdateOne {
	sjluo.mutation.SetUpdatedAt(t)
	return sjluo
}

// SetCreateBy sets the "createBy" field.
func (sjluo *SysJobLogUpdateOne) SetCreateBy(i int64) *SysJobLogUpdateOne {
	sjluo.mutation.ResetCreateBy()
	sjluo.mutation.SetCreateBy(i)
	return sjluo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableCreateBy(i *int64) *SysJobLogUpdateOne {
	if i != nil {
		sjluo.SetCreateBy(*i)
	}
	return sjluo
}

// AddCreateBy adds i to the "createBy" field.
func (sjluo *SysJobLogUpdateOne) AddCreateBy(i int64) *SysJobLogUpdateOne {
	sjluo.mutation.AddCreateBy(i)
	return sjluo
}

// SetUpdateBy sets the "updateBy" field.
func (sjluo *SysJobLogUpdateOne) SetUpdateBy(i int64) *SysJobLogUpdateOne {
	sjluo.mutation.ResetUpdateBy()
	sjluo.mutation.SetUpdateBy(i)
	return sjluo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableUpdateBy(i *int64) *SysJobLogUpdateOne {
	if i != nil {
		sjluo.SetUpdateBy(*i)
	}
	return sjluo
}

// AddUpdateBy adds i to the "updateBy" field.
func (sjluo *SysJobLogUpdateOne) AddUpdateBy(i int64) *SysJobLogUpdateOne {
	sjluo.mutation.AddUpdateBy(i)
	return sjluo
}

// SetTenantId sets the "tenantId" field.
func (sjluo *SysJobLogUpdateOne) SetTenantId(i int64) *SysJobLogUpdateOne {
	sjluo.mutation.ResetTenantId()
	sjluo.mutation.SetTenantId(i)
	return sjluo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableTenantId(i *int64) *SysJobLogUpdateOne {
	if i != nil {
		sjluo.SetTenantId(*i)
	}
	return sjluo
}

// AddTenantId adds i to the "tenantId" field.
func (sjluo *SysJobLogUpdateOne) AddTenantId(i int64) *SysJobLogUpdateOne {
	sjluo.mutation.AddTenantId(i)
	return sjluo
}

// SetJobID sets the "job" edge to the SysJob entity by ID.
func (sjluo *SysJobLogUpdateOne) SetJobID(id int64) *SysJobLogUpdateOne {
	sjluo.mutation.SetJobID(id)
	return sjluo
}

// SetNillableJobID sets the "job" edge to the SysJob entity by ID if the given value is not nil.
func (sjluo *SysJobLogUpdateOne) SetNillableJobID(id *int64) *SysJobLogUpdateOne {
	if id != nil {
		sjluo = sjluo.SetJobID(*id)
	}
	return sjluo
}

// SetJob sets the "job" edge to the SysJob entity.
func (sjluo *SysJobLogUpdateOne) SetJob(s *SysJob) *SysJobLogUpdateOne {
	return sjluo.SetJobID(s.ID)
}

// Mutation returns the SysJobLogMutation object of the builder.
func (sjluo *SysJobLogUpdateOne) Mutation() *SysJobLogMutation {
	return sjluo.mutation
}

// ClearJob clears the "job" edge to the SysJob entity.
func (sjluo *SysJobLogUpdateOne) ClearJob() *SysJobLogUpdateOne {
	sjluo.mutation.ClearJob()
	return sjluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sjluo *SysJobLogUpdateOne) Select(field string, fields ...string) *SysJobLogUpdateOne {
	sjluo.fields = append([]string{field}, fields...)
	return sjluo
}

// Save executes the query and returns the updated SysJobLog entity.
func (sjluo *SysJobLogUpdateOne) Save(ctx context.Context) (*SysJobLog, error) {
	var (
		err  error
		node *SysJobLog
	)
	sjluo.defaults()
	if len(sjluo.hooks) == 0 {
		node, err = sjluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysJobLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sjluo.mutation = mutation
			node, err = sjluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sjluo.hooks) - 1; i >= 0; i-- {
			if sjluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sjluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sjluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sjluo *SysJobLogUpdateOne) SaveX(ctx context.Context) *SysJobLog {
	node, err := sjluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sjluo *SysJobLogUpdateOne) Exec(ctx context.Context) error {
	_, err := sjluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjluo *SysJobLogUpdateOne) ExecX(ctx context.Context) {
	if err := sjluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjluo *SysJobLogUpdateOne) defaults() {
	if _, ok := sjluo.mutation.UpdatedAt(); !ok {
		v := sysjoblog.UpdateDefaultUpdatedAt()
		sjluo.mutation.SetUpdatedAt(v)
	}
}

func (sjluo *SysJobLogUpdateOne) sqlSave(ctx context.Context) (_node *SysJobLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysjoblog.Table,
			Columns: sysjoblog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysjoblog.FieldID,
			},
		},
	}
	id, ok := sjluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysJobLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sjluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysjoblog.FieldID)
		for _, f := range fields {
			if !sysjoblog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysjoblog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sjluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sjluo.mutation.JobId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldJobId,
		})
	}
	if value, ok := sjluo.mutation.AddedJobId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldJobId,
		})
	}
	if sjluo.mutation.JobIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysjoblog.FieldJobId,
		})
	}
	if value, ok := sjluo.mutation.JobName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysjoblog.FieldJobName,
		})
	}
	if sjluo.mutation.JobNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysjoblog.FieldJobName,
		})
	}
	if value, ok := sjluo.mutation.EntryId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldEntryId,
		})
	}
	if value, ok := sjluo.mutation.AddedEntryId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldEntryId,
		})
	}
	if sjluo.mutation.EntryIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysjoblog.FieldEntryId,
		})
	}
	if value, ok := sjluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysjoblog.FieldStatus,
		})
	}
	if sjluo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysjoblog.FieldStatus,
		})
	}
	if value, ok := sjluo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldDuration,
		})
	}
	if value, ok := sjluo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldDuration,
		})
	}
	if sjluo.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: sysjoblog.FieldDuration,
		})
	}
	if value, ok := sjluo.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysjoblog.FieldInfo,
		})
	}
	if sjluo.mutation.InfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysjoblog.FieldInfo,
		})
	}
	if value, ok := sjluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysjoblog.FieldUpdatedAt,
		})
	}
	if value, ok := sjluo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldCreateBy,
		})
	}
	if value, ok := sjluo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldCreateBy,
		})
	}
	if value, ok := sjluo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldUpdateBy,
		})
	}
	if value, ok := sjluo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldUpdateBy,
		})
	}
	if value, ok := sjluo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldTenantId,
		})
	}
	if value, ok := sjluo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldTenantId,
		})
	}
	if sjluo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysjoblog.JobTable,
			Columns: []string{sysjoblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjluo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysjoblog.JobTable,
			Columns: []string{sysjoblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysJobLog{config: sjluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sjluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysjoblog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
