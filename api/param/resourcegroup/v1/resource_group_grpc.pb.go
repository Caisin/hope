// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/param/resourcegroup/v1/resource_group.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceGroupClient is the client API for ResourceGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceGroupClient interface {
	// 分页查询ResourceGroup
	GetPageResourceGroup(ctx context.Context, in *ResourceGroupPageReq, opts ...grpc.CallOption) (*ResourceGroupPageReply, error)
	// 获取ResourceGroup
	GetResourceGroup(ctx context.Context, in *ResourceGroupReq, opts ...grpc.CallOption) (*ResourceGroupReply, error)
	// 更新ResourceGroup
	UpdateResourceGroup(ctx context.Context, in *ResourceGroupUpdateReq, opts ...grpc.CallOption) (*ResourceGroupUpdateReply, error)
	// 创建ResourceGroup
	CreateResourceGroup(ctx context.Context, in *ResourceGroupCreateReq, opts ...grpc.CallOption) (*ResourceGroupCreateReply, error)
	// 删除ResourceGroup
	DeleteResourceGroup(ctx context.Context, in *ResourceGroupDeleteReq, opts ...grpc.CallOption) (*ResourceGroupDeleteReply, error)
	// 批量删除ResourceGroup
	BatchDeleteResourceGroup(ctx context.Context, in *ResourceGroupBatchDeleteReq, opts ...grpc.CallOption) (*ResourceGroupDeleteReply, error)
}

type resourceGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceGroupClient(cc grpc.ClientConnInterface) ResourceGroupClient {
	return &resourceGroupClient{cc}
}

func (c *resourceGroupClient) GetPageResourceGroup(ctx context.Context, in *ResourceGroupPageReq, opts ...grpc.CallOption) (*ResourceGroupPageReply, error) {
	out := new(ResourceGroupPageReply)
	err := c.cc.Invoke(ctx, "/resourcegroup.v1.ResourceGroup/GetPageResourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceGroupClient) GetResourceGroup(ctx context.Context, in *ResourceGroupReq, opts ...grpc.CallOption) (*ResourceGroupReply, error) {
	out := new(ResourceGroupReply)
	err := c.cc.Invoke(ctx, "/resourcegroup.v1.ResourceGroup/GetResourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceGroupClient) UpdateResourceGroup(ctx context.Context, in *ResourceGroupUpdateReq, opts ...grpc.CallOption) (*ResourceGroupUpdateReply, error) {
	out := new(ResourceGroupUpdateReply)
	err := c.cc.Invoke(ctx, "/resourcegroup.v1.ResourceGroup/UpdateResourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceGroupClient) CreateResourceGroup(ctx context.Context, in *ResourceGroupCreateReq, opts ...grpc.CallOption) (*ResourceGroupCreateReply, error) {
	out := new(ResourceGroupCreateReply)
	err := c.cc.Invoke(ctx, "/resourcegroup.v1.ResourceGroup/CreateResourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceGroupClient) DeleteResourceGroup(ctx context.Context, in *ResourceGroupDeleteReq, opts ...grpc.CallOption) (*ResourceGroupDeleteReply, error) {
	out := new(ResourceGroupDeleteReply)
	err := c.cc.Invoke(ctx, "/resourcegroup.v1.ResourceGroup/DeleteResourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceGroupClient) BatchDeleteResourceGroup(ctx context.Context, in *ResourceGroupBatchDeleteReq, opts ...grpc.CallOption) (*ResourceGroupDeleteReply, error) {
	out := new(ResourceGroupDeleteReply)
	err := c.cc.Invoke(ctx, "/resourcegroup.v1.ResourceGroup/BatchDeleteResourceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceGroupServer is the server API for ResourceGroup service.
// All implementations must embed UnimplementedResourceGroupServer
// for forward compatibility
type ResourceGroupServer interface {
	// 分页查询ResourceGroup
	GetPageResourceGroup(context.Context, *ResourceGroupPageReq) (*ResourceGroupPageReply, error)
	// 获取ResourceGroup
	GetResourceGroup(context.Context, *ResourceGroupReq) (*ResourceGroupReply, error)
	// 更新ResourceGroup
	UpdateResourceGroup(context.Context, *ResourceGroupUpdateReq) (*ResourceGroupUpdateReply, error)
	// 创建ResourceGroup
	CreateResourceGroup(context.Context, *ResourceGroupCreateReq) (*ResourceGroupCreateReply, error)
	// 删除ResourceGroup
	DeleteResourceGroup(context.Context, *ResourceGroupDeleteReq) (*ResourceGroupDeleteReply, error)
	// 批量删除ResourceGroup
	BatchDeleteResourceGroup(context.Context, *ResourceGroupBatchDeleteReq) (*ResourceGroupDeleteReply, error)
	mustEmbedUnimplementedResourceGroupServer()
}

// UnimplementedResourceGroupServer must be embedded to have forward compatible implementations.
type UnimplementedResourceGroupServer struct {
}

func (UnimplementedResourceGroupServer) GetPageResourceGroup(context.Context, *ResourceGroupPageReq) (*ResourceGroupPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageResourceGroup not implemented")
}
func (UnimplementedResourceGroupServer) GetResourceGroup(context.Context, *ResourceGroupReq) (*ResourceGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceGroup not implemented")
}
func (UnimplementedResourceGroupServer) UpdateResourceGroup(context.Context, *ResourceGroupUpdateReq) (*ResourceGroupUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceGroup not implemented")
}
func (UnimplementedResourceGroupServer) CreateResourceGroup(context.Context, *ResourceGroupCreateReq) (*ResourceGroupCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceGroup not implemented")
}
func (UnimplementedResourceGroupServer) DeleteResourceGroup(context.Context, *ResourceGroupDeleteReq) (*ResourceGroupDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceGroup not implemented")
}
func (UnimplementedResourceGroupServer) BatchDeleteResourceGroup(context.Context, *ResourceGroupBatchDeleteReq) (*ResourceGroupDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteResourceGroup not implemented")
}
func (UnimplementedResourceGroupServer) mustEmbedUnimplementedResourceGroupServer() {}

// UnsafeResourceGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceGroupServer will
// result in compilation errors.
type UnsafeResourceGroupServer interface {
	mustEmbedUnimplementedResourceGroupServer()
}

func RegisterResourceGroupServer(s grpc.ServiceRegistrar, srv ResourceGroupServer) {
	s.RegisterService(&ResourceGroup_ServiceDesc, srv)
}

func _ResourceGroup_GetPageResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceGroupServer).GetPageResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcegroup.v1.ResourceGroup/GetPageResourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceGroupServer).GetPageResourceGroup(ctx, req.(*ResourceGroupPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceGroup_GetResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceGroupServer).GetResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcegroup.v1.ResourceGroup/GetResourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceGroupServer).GetResourceGroup(ctx, req.(*ResourceGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceGroup_UpdateResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceGroupServer).UpdateResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcegroup.v1.ResourceGroup/UpdateResourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceGroupServer).UpdateResourceGroup(ctx, req.(*ResourceGroupUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceGroup_CreateResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceGroupServer).CreateResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcegroup.v1.ResourceGroup/CreateResourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceGroupServer).CreateResourceGroup(ctx, req.(*ResourceGroupCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceGroup_DeleteResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceGroupServer).DeleteResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcegroup.v1.ResourceGroup/DeleteResourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceGroupServer).DeleteResourceGroup(ctx, req.(*ResourceGroupDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceGroup_BatchDeleteResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGroupBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceGroupServer).BatchDeleteResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcegroup.v1.ResourceGroup/BatchDeleteResourceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceGroupServer).BatchDeleteResourceGroup(ctx, req.(*ResourceGroupBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceGroup_ServiceDesc is the grpc.ServiceDesc for ResourceGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resourcegroup.v1.ResourceGroup",
	HandlerType: (*ResourceGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageResourceGroup",
			Handler:    _ResourceGroup_GetPageResourceGroup_Handler,
		},
		{
			MethodName: "GetResourceGroup",
			Handler:    _ResourceGroup_GetResourceGroup_Handler,
		},
		{
			MethodName: "UpdateResourceGroup",
			Handler:    _ResourceGroup_UpdateResourceGroup_Handler,
		},
		{
			MethodName: "CreateResourceGroup",
			Handler:    _ResourceGroup_CreateResourceGroup_Handler,
		},
		{
			MethodName: "DeleteResourceGroup",
			Handler:    _ResourceGroup_DeleteResourceGroup_Handler,
		},
		{
			MethodName: "BatchDeleteResourceGroup",
			Handler:    _ResourceGroup_BatchDeleteResourceGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/param/resourcegroup/v1/resource_group.proto",
}
