// Code generated by Caisin. DO NOT EDIT.
// source: apps/novel/internal/data/ent/schema/novel_buy_chapter_record.go

package convert

import (
	"google.golang.org/protobuf/types/known/timestamppb"
	v1 "hope/api/novel/novelbuychapterrecord/v1"
	"hope/apps/novel/internal/data/ent"
)

func NovelBuyChapterRecordUpdateReq2Data(v *v1.NovelBuyChapterRecordUpdateReq) *ent.NovelBuyChapterRecord {
	if v == nil {
		return nil
	}
	return &ent.NovelBuyChapterRecord{
		ID:              v.Id,
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
	}
}

func NovelBuyChapterRecordData2UpdateReq(v *ent.NovelBuyChapterRecord) *v1.NovelBuyChapterRecordUpdateReq {
	if v == nil {
		return nil
	}
	return &v1.NovelBuyChapterRecordUpdateReq{
		Id:              v.ID,
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
	}
}

func NovelBuyChapterRecordCreateReq2Data(v *v1.NovelBuyChapterRecordCreateReq) *ent.NovelBuyChapterRecord {
	if v == nil {
		return nil
	}
	return &ent.NovelBuyChapterRecord{
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
	}
}

func NovelBuyChapterRecordData2CreateReq(v *ent.NovelBuyChapterRecord) *v1.NovelBuyChapterRecordCreateReq {
	if v == nil {
		return nil
	}
	return &v1.NovelBuyChapterRecordCreateReq{
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
	}
}

func NovelBuyChapterRecordReq2Data(v *v1.NovelBuyChapterRecordReq) *ent.NovelBuyChapterRecord {
	if v == nil {
		return nil
	}
	return &ent.NovelBuyChapterRecord{
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
	}
}

func NovelBuyChapterRecordData2Req(v *ent.NovelBuyChapterRecord) *v1.NovelBuyChapterRecordReq {
	if v == nil {
		return nil
	}
	return &v1.NovelBuyChapterRecordReq{
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
	}
}

func NovelBuyChapterRecordReply2Data(v *v1.NovelBuyChapterRecordReply) *ent.NovelBuyChapterRecord {
	if v == nil {
		return nil
	}
	return &ent.NovelBuyChapterRecord{
		ID:              v.Id,
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
		Remark:          v.Remark,
		CreatedAt:       v.CreatedAt.AsTime(),
		UpdatedAt:       v.UpdatedAt.AsTime(),
		CreateBy:        v.CreateBy,
		UpdateBy:        v.UpdateBy,
		TenantId:        v.TenantId,
	}
}

func NovelBuyChapterRecordData2Reply(v *ent.NovelBuyChapterRecord) *v1.NovelBuyChapterRecordReply {
	if v == nil {
		return nil
	}
	return &v1.NovelBuyChapterRecordReply{
		Id:              v.ID,
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
		Remark:          v.Remark,
		CreatedAt:       timestamppb.New(v.CreatedAt),
		UpdatedAt:       timestamppb.New(v.UpdatedAt),
		CreateBy:        v.CreateBy,
		UpdateBy:        v.UpdateBy,
		TenantId:        v.TenantId,
	}
}

func NovelBuyChapterRecordUpdateReply2Data(v *v1.NovelBuyChapterRecordUpdateReply) *ent.NovelBuyChapterRecord {
	if v == nil {
		return nil
	}
	return &ent.NovelBuyChapterRecord{
		ID:              v.Id,
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
	}
}

func NovelBuyChapterRecordData2UpdateReply(v *ent.NovelBuyChapterRecord) *v1.NovelBuyChapterRecordUpdateReply {
	if v == nil {
		return nil
	}
	return &v1.NovelBuyChapterRecordUpdateReply{
		Id:              v.ID,
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
	}
}

func NovelBuyChapterRecordCreateReply2Data(v *v1.NovelBuyChapterRecordCreateReply) *ent.NovelBuyChapterRecord {
	if v == nil {
		return nil
	}
	return &ent.NovelBuyChapterRecord{
		ID:              v.Id,
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
		Remark:          v.Remark,
		CreatedAt:       v.CreatedAt.AsTime(),
		UpdatedAt:       v.UpdatedAt.AsTime(),
		CreateBy:        v.CreateBy,
		UpdateBy:        v.UpdateBy,
		TenantId:        v.TenantId,
	}
}

func NovelBuyChapterRecordData2CreateReply(v *ent.NovelBuyChapterRecord) *v1.NovelBuyChapterRecordCreateReply {
	if v == nil {
		return nil
	}
	return &v1.NovelBuyChapterRecordCreateReply{
		Id:              v.ID,
		UserId:          v.UserId,
		UserName:        v.UserName,
		ChapterId:       v.ChapterId,
		ChapterOrderNum: v.ChapterOrderNum,
		NovelId:         v.NovelId,
		NovelName:       v.NovelName,
		ChapterName:     v.ChapterName,
		IsSvip:          v.IsSvip,
		Coin:            v.Coin,
		Coupon:          v.Coupon,
		Discount:        v.Discount,
		Remark:          v.Remark,
		CreatedAt:       timestamppb.New(v.CreatedAt),
		UpdatedAt:       timestamppb.New(v.UpdatedAt),
		CreateBy:        v.CreateBy,
		UpdateBy:        v.UpdateBy,
		TenantId:        v.TenantId,
	}
}
