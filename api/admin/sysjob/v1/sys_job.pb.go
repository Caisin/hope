// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/admin/sysjob/v1/sys_job.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询搜索请求
type SysJobPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *SysJobReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *SysJobPageReq) Reset() {
	*x = SysJobPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobPageReq) ProtoMessage() {}

func (x *SysJobPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobPageReq.ProtoReflect.Descriptor instead.
func (*SysJobPageReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{0}
}

func (x *SysJobPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *SysJobPageReq) GetParam() *SysJobReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type SysJobPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条目
	Items []*SysJobReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SysJobPageReply) Reset() {
	*x = SysJobPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobPageReply) ProtoMessage() {}

func (x *SysJobPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobPageReply.ProtoReflect.Descriptor instead.
func (*SysJobPageReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{1}
}

func (x *SysJobPageReply) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *SysJobPageReply) GetItems() []*SysJobReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type SysJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//名称
	JobName string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`
	//任务分组
	JobGroup string `protobuf:"bytes,3,opt,name=jobGroup,proto3" json:"jobGroup,omitempty"`
	//任务类型 1
	JobType int32 `protobuf:"varint,4,opt,name=jobType,proto3" json:"jobType,omitempty"`
	//cron表达式
	CronExpression string `protobuf:"bytes,5,opt,name=cronExpression,proto3" json:"cronExpression,omitempty"`
	//调用目标
	InvokeTarget string `protobuf:"bytes,6,opt,name=invokeTarget,proto3" json:"invokeTarget,omitempty"`
	//目标参数
	Args string `protobuf:"bytes,7,opt,name=args,proto3" json:"args,omitempty"`
	//执行策略
	ExecPolicy int32 `protobuf:"varint,8,opt,name=execPolicy,proto3" json:"execPolicy,omitempty"`
	//是否并发
	Concurrent int32 `protobuf:"varint,9,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	//状态
	State string `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	//job启动时返回的id
	EntryId int32 `protobuf:"varint,11,opt,name=entryId,proto3" json:"entryId,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,14,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,15,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,16,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysJobReq) Reset() {
	*x = SysJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobReq) ProtoMessage() {}

func (x *SysJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobReq.ProtoReflect.Descriptor instead.
func (*SysJobReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{2}
}

func (x *SysJobReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysJobReq) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *SysJobReq) GetJobGroup() string {
	if x != nil {
		return x.JobGroup
	}
	return ""
}

func (x *SysJobReq) GetJobType() int32 {
	if x != nil {
		return x.JobType
	}
	return 0
}

func (x *SysJobReq) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *SysJobReq) GetInvokeTarget() string {
	if x != nil {
		return x.InvokeTarget
	}
	return ""
}

func (x *SysJobReq) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *SysJobReq) GetExecPolicy() int32 {
	if x != nil {
		return x.ExecPolicy
	}
	return 0
}

func (x *SysJobReq) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *SysJobReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SysJobReq) GetEntryId() int32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *SysJobReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysJobReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysJobReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysJobReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysJobReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索返回
type SysJobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//名称
	JobName string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`
	//任务分组
	JobGroup string `protobuf:"bytes,3,opt,name=jobGroup,proto3" json:"jobGroup,omitempty"`
	//任务类型 1
	JobType int32 `protobuf:"varint,4,opt,name=jobType,proto3" json:"jobType,omitempty"`
	//cron表达式
	CronExpression string `protobuf:"bytes,5,opt,name=cronExpression,proto3" json:"cronExpression,omitempty"`
	//调用目标
	InvokeTarget string `protobuf:"bytes,6,opt,name=invokeTarget,proto3" json:"invokeTarget,omitempty"`
	//目标参数
	Args string `protobuf:"bytes,7,opt,name=args,proto3" json:"args,omitempty"`
	//执行策略
	ExecPolicy int32 `protobuf:"varint,8,opt,name=execPolicy,proto3" json:"execPolicy,omitempty"`
	//是否并发
	Concurrent int32 `protobuf:"varint,9,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	//状态
	State string `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	//job启动时返回的id
	EntryId int32 `protobuf:"varint,11,opt,name=entryId,proto3" json:"entryId,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,14,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,15,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,16,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysJobReply) Reset() {
	*x = SysJobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobReply) ProtoMessage() {}

func (x *SysJobReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobReply.ProtoReflect.Descriptor instead.
func (*SysJobReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{3}
}

func (x *SysJobReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysJobReply) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *SysJobReply) GetJobGroup() string {
	if x != nil {
		return x.JobGroup
	}
	return ""
}

func (x *SysJobReply) GetJobType() int32 {
	if x != nil {
		return x.JobType
	}
	return 0
}

func (x *SysJobReply) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *SysJobReply) GetInvokeTarget() string {
	if x != nil {
		return x.InvokeTarget
	}
	return ""
}

func (x *SysJobReply) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *SysJobReply) GetExecPolicy() int32 {
	if x != nil {
		return x.ExecPolicy
	}
	return 0
}

func (x *SysJobReply) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *SysJobReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SysJobReply) GetEntryId() int32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *SysJobReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysJobReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysJobReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysJobReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysJobReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 创建SysJob请求
type SysJobCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//名称
	JobName string `protobuf:"bytes,1,opt,name=jobName,proto3" json:"jobName,omitempty"`
	//任务分组
	JobGroup string `protobuf:"bytes,2,opt,name=jobGroup,proto3" json:"jobGroup,omitempty"`
	//任务类型 1
	JobType int32 `protobuf:"varint,3,opt,name=jobType,proto3" json:"jobType,omitempty"`
	//cron表达式
	CronExpression string `protobuf:"bytes,4,opt,name=cronExpression,proto3" json:"cronExpression,omitempty"`
	//调用目标
	InvokeTarget string `protobuf:"bytes,5,opt,name=invokeTarget,proto3" json:"invokeTarget,omitempty"`
	//目标参数
	Args string `protobuf:"bytes,6,opt,name=args,proto3" json:"args,omitempty"`
	//执行策略
	ExecPolicy int32 `protobuf:"varint,7,opt,name=execPolicy,proto3" json:"execPolicy,omitempty"`
	//是否并发
	Concurrent int32 `protobuf:"varint,8,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	//状态
	State string `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	//job启动时返回的id
	EntryId int32 `protobuf:"varint,10,opt,name=entryId,proto3" json:"entryId,omitempty"`
}

func (x *SysJobCreateReq) Reset() {
	*x = SysJobCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobCreateReq) ProtoMessage() {}

func (x *SysJobCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobCreateReq.ProtoReflect.Descriptor instead.
func (*SysJobCreateReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{4}
}

func (x *SysJobCreateReq) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *SysJobCreateReq) GetJobGroup() string {
	if x != nil {
		return x.JobGroup
	}
	return ""
}

func (x *SysJobCreateReq) GetJobType() int32 {
	if x != nil {
		return x.JobType
	}
	return 0
}

func (x *SysJobCreateReq) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *SysJobCreateReq) GetInvokeTarget() string {
	if x != nil {
		return x.InvokeTarget
	}
	return ""
}

func (x *SysJobCreateReq) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *SysJobCreateReq) GetExecPolicy() int32 {
	if x != nil {
		return x.ExecPolicy
	}
	return 0
}

func (x *SysJobCreateReq) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *SysJobCreateReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SysJobCreateReq) GetEntryId() int32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

// 创建SysJob返回
type SysJobCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//名称
	JobName string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`
	//任务分组
	JobGroup string `protobuf:"bytes,3,opt,name=jobGroup,proto3" json:"jobGroup,omitempty"`
	//任务类型 1
	JobType int32 `protobuf:"varint,4,opt,name=jobType,proto3" json:"jobType,omitempty"`
	//cron表达式
	CronExpression string `protobuf:"bytes,5,opt,name=cronExpression,proto3" json:"cronExpression,omitempty"`
	//调用目标
	InvokeTarget string `protobuf:"bytes,6,opt,name=invokeTarget,proto3" json:"invokeTarget,omitempty"`
	//目标参数
	Args string `protobuf:"bytes,7,opt,name=args,proto3" json:"args,omitempty"`
	//执行策略
	ExecPolicy int32 `protobuf:"varint,8,opt,name=execPolicy,proto3" json:"execPolicy,omitempty"`
	//是否并发
	Concurrent int32 `protobuf:"varint,9,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	//状态
	State string `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	//job启动时返回的id
	EntryId int32 `protobuf:"varint,11,opt,name=entryId,proto3" json:"entryId,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,14,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,15,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,16,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SysJobCreateReply) Reset() {
	*x = SysJobCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobCreateReply) ProtoMessage() {}

func (x *SysJobCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobCreateReply.ProtoReflect.Descriptor instead.
func (*SysJobCreateReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{5}
}

func (x *SysJobCreateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysJobCreateReply) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *SysJobCreateReply) GetJobGroup() string {
	if x != nil {
		return x.JobGroup
	}
	return ""
}

func (x *SysJobCreateReply) GetJobType() int32 {
	if x != nil {
		return x.JobType
	}
	return 0
}

func (x *SysJobCreateReply) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *SysJobCreateReply) GetInvokeTarget() string {
	if x != nil {
		return x.InvokeTarget
	}
	return ""
}

func (x *SysJobCreateReply) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *SysJobCreateReply) GetExecPolicy() int32 {
	if x != nil {
		return x.ExecPolicy
	}
	return 0
}

func (x *SysJobCreateReply) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *SysJobCreateReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SysJobCreateReply) GetEntryId() int32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *SysJobCreateReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SysJobCreateReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SysJobCreateReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *SysJobCreateReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *SysJobCreateReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 更新SysJob请求
type SysJobUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//名称
	JobName string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`
	//任务分组
	JobGroup string `protobuf:"bytes,3,opt,name=jobGroup,proto3" json:"jobGroup,omitempty"`
	//任务类型 1
	JobType int32 `protobuf:"varint,4,opt,name=jobType,proto3" json:"jobType,omitempty"`
	//cron表达式
	CronExpression string `protobuf:"bytes,5,opt,name=cronExpression,proto3" json:"cronExpression,omitempty"`
	//调用目标
	InvokeTarget string `protobuf:"bytes,6,opt,name=invokeTarget,proto3" json:"invokeTarget,omitempty"`
	//目标参数
	Args string `protobuf:"bytes,7,opt,name=args,proto3" json:"args,omitempty"`
	//执行策略
	ExecPolicy int32 `protobuf:"varint,8,opt,name=execPolicy,proto3" json:"execPolicy,omitempty"`
	//是否并发
	Concurrent int32 `protobuf:"varint,9,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	//状态
	State string `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	//job启动时返回的id
	EntryId int32 `protobuf:"varint,11,opt,name=entryId,proto3" json:"entryId,omitempty"`
}

func (x *SysJobUpdateReq) Reset() {
	*x = SysJobUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobUpdateReq) ProtoMessage() {}

func (x *SysJobUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobUpdateReq.ProtoReflect.Descriptor instead.
func (*SysJobUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{6}
}

func (x *SysJobUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysJobUpdateReq) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *SysJobUpdateReq) GetJobGroup() string {
	if x != nil {
		return x.JobGroup
	}
	return ""
}

func (x *SysJobUpdateReq) GetJobType() int32 {
	if x != nil {
		return x.JobType
	}
	return 0
}

func (x *SysJobUpdateReq) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *SysJobUpdateReq) GetInvokeTarget() string {
	if x != nil {
		return x.InvokeTarget
	}
	return ""
}

func (x *SysJobUpdateReq) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *SysJobUpdateReq) GetExecPolicy() int32 {
	if x != nil {
		return x.ExecPolicy
	}
	return 0
}

func (x *SysJobUpdateReq) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *SysJobUpdateReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SysJobUpdateReq) GetEntryId() int32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

// 更新SysJob返回
type SysJobUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//名称
	JobName string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`
	//任务分组
	JobGroup string `protobuf:"bytes,3,opt,name=jobGroup,proto3" json:"jobGroup,omitempty"`
	//任务类型 1
	JobType int32 `protobuf:"varint,4,opt,name=jobType,proto3" json:"jobType,omitempty"`
	//cron表达式
	CronExpression string `protobuf:"bytes,5,opt,name=cronExpression,proto3" json:"cronExpression,omitempty"`
	//调用目标
	InvokeTarget string `protobuf:"bytes,6,opt,name=invokeTarget,proto3" json:"invokeTarget,omitempty"`
	//目标参数
	Args string `protobuf:"bytes,7,opt,name=args,proto3" json:"args,omitempty"`
	//执行策略
	ExecPolicy int32 `protobuf:"varint,8,opt,name=execPolicy,proto3" json:"execPolicy,omitempty"`
	//是否并发
	Concurrent int32 `protobuf:"varint,9,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	//状态
	State string `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	//job启动时返回的id
	EntryId int32 `protobuf:"varint,11,opt,name=entryId,proto3" json:"entryId,omitempty"`
}

func (x *SysJobUpdateReply) Reset() {
	*x = SysJobUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobUpdateReply) ProtoMessage() {}

func (x *SysJobUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobUpdateReply.ProtoReflect.Descriptor instead.
func (*SysJobUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{7}
}

func (x *SysJobUpdateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SysJobUpdateReply) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *SysJobUpdateReply) GetJobGroup() string {
	if x != nil {
		return x.JobGroup
	}
	return ""
}

func (x *SysJobUpdateReply) GetJobType() int32 {
	if x != nil {
		return x.JobType
	}
	return 0
}

func (x *SysJobUpdateReply) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (x *SysJobUpdateReply) GetInvokeTarget() string {
	if x != nil {
		return x.InvokeTarget
	}
	return ""
}

func (x *SysJobUpdateReply) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *SysJobUpdateReply) GetExecPolicy() int32 {
	if x != nil {
		return x.ExecPolicy
	}
	return 0
}

func (x *SysJobUpdateReply) GetConcurrent() int32 {
	if x != nil {
		return x.Concurrent
	}
	return 0
}

func (x *SysJobUpdateReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SysJobUpdateReply) GetEntryId() int32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

// 删除SysJob请求
type SysJobDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SysJobDeleteReq) Reset() {
	*x = SysJobDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobDeleteReq) ProtoMessage() {}

func (x *SysJobDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobDeleteReq.ProtoReflect.Descriptor instead.
func (*SysJobDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{8}
}

func (x *SysJobDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除SysJob请求
type SysJobBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SysJobBatchDeleteReq) Reset() {
	*x = SysJobBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobBatchDeleteReq) ProtoMessage() {}

func (x *SysJobBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*SysJobBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{9}
}

func (x *SysJobBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除SysJob返回
type SysJobDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SysJobDeleteReply) Reset() {
	*x = SysJobDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysJobDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysJobDeleteReply) ProtoMessage() {}

func (x *SysJobDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_admin_sysjob_v1_sys_job_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysJobDeleteReply.ProtoReflect.Descriptor instead.
func (*SysJobDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP(), []int{10}
}

func (x *SysJobDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_admin_sysjob_v1_sys_job_proto protoreflect.FileDescriptor

var file_api_admin_sysjob_v1_sys_job_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x6a,
	0x6f, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x5f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x0d,
	0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x68, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x2c,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x83, 0x04, 0x0a,
	0x09, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x65, 0x78, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x85, 0x04, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x0f, 0x53,
	0x79, 0x73, 0x4a, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x8b,
	0x04, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc1, 0x02, 0x0a,
	0x0f, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f,
	0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f,
	0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x22, 0xc3, 0x02, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x14, 0x53, 0x79, 0x73,
	0x4a, 0x6f, 0x62, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0xce, 0x04, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x5e, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x73,
	0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x14, 0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x64, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x12,
	0x1a, 0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a,
	0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x79,
	0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x4a, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73,
	0x6a, 0x6f, 0x62, 0x3a, 0x01, 0x2a, 0x12, 0x61, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79,
	0x73, 0x6a, 0x6f, 0x62, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x66, 0x0a, 0x11, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x1f,
	0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a, 0x6f,
	0x62, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x4a,
	0x6f, 0x62, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x12, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x2a, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x6a, 0x6f,
	0x62, 0x42, 0x1d, 0x5a, 0x1b, 0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x79, 0x73, 0x6a, 0x6f, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_admin_sysjob_v1_sys_job_proto_rawDescOnce sync.Once
	file_api_admin_sysjob_v1_sys_job_proto_rawDescData = file_api_admin_sysjob_v1_sys_job_proto_rawDesc
)

func file_api_admin_sysjob_v1_sys_job_proto_rawDescGZIP() []byte {
	file_api_admin_sysjob_v1_sys_job_proto_rawDescOnce.Do(func() {
		file_api_admin_sysjob_v1_sys_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_admin_sysjob_v1_sys_job_proto_rawDescData)
	})
	return file_api_admin_sysjob_v1_sys_job_proto_rawDescData
}

var file_api_admin_sysjob_v1_sys_job_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_admin_sysjob_v1_sys_job_proto_goTypes = []interface{}{
	(*SysJobPageReq)(nil),         // 0: sysjob.v1.SysJobPageReq
	(*SysJobPageReply)(nil),       // 1: sysjob.v1.SysJobPageReply
	(*SysJobReq)(nil),             // 2: sysjob.v1.SysJobReq
	(*SysJobReply)(nil),           // 3: sysjob.v1.SysJobReply
	(*SysJobCreateReq)(nil),       // 4: sysjob.v1.SysJobCreateReq
	(*SysJobCreateReply)(nil),     // 5: sysjob.v1.SysJobCreateReply
	(*SysJobUpdateReq)(nil),       // 6: sysjob.v1.SysJobUpdateReq
	(*SysJobUpdateReply)(nil),     // 7: sysjob.v1.SysJobUpdateReply
	(*SysJobDeleteReq)(nil),       // 8: sysjob.v1.SysJobDeleteReq
	(*SysJobBatchDeleteReq)(nil),  // 9: sysjob.v1.SysJobBatchDeleteReq
	(*SysJobDeleteReply)(nil),     // 10: sysjob.v1.SysJobDeleteReply
	(*pagin.Pagination)(nil),      // 11: pagin.Pagination
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_api_admin_sysjob_v1_sys_job_proto_depIdxs = []int32{
	11, // 0: sysjob.v1.SysJobPageReq.pagin:type_name -> pagin.Pagination
	2,  // 1: sysjob.v1.SysJobPageReq.param:type_name -> sysjob.v1.SysJobReq
	11, // 2: sysjob.v1.SysJobPageReply.pagin:type_name -> pagin.Pagination
	3,  // 3: sysjob.v1.SysJobPageReply.items:type_name -> sysjob.v1.SysJobReply
	12, // 4: sysjob.v1.SysJobReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 5: sysjob.v1.SysJobReq.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 6: sysjob.v1.SysJobReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 7: sysjob.v1.SysJobReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 8: sysjob.v1.SysJobCreateReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 9: sysjob.v1.SysJobCreateReply.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 10: sysjob.v1.SysJob.GetPageSysJob:input_type -> sysjob.v1.SysJobPageReq
	2,  // 11: sysjob.v1.SysJob.GetSysJob:input_type -> sysjob.v1.SysJobReq
	6,  // 12: sysjob.v1.SysJob.UpdateSysJob:input_type -> sysjob.v1.SysJobUpdateReq
	4,  // 13: sysjob.v1.SysJob.CreateSysJob:input_type -> sysjob.v1.SysJobCreateReq
	8,  // 14: sysjob.v1.SysJob.DeleteSysJob:input_type -> sysjob.v1.SysJobDeleteReq
	9,  // 15: sysjob.v1.SysJob.BatchDeleteSysJob:input_type -> sysjob.v1.SysJobBatchDeleteReq
	1,  // 16: sysjob.v1.SysJob.GetPageSysJob:output_type -> sysjob.v1.SysJobPageReply
	3,  // 17: sysjob.v1.SysJob.GetSysJob:output_type -> sysjob.v1.SysJobReply
	7,  // 18: sysjob.v1.SysJob.UpdateSysJob:output_type -> sysjob.v1.SysJobUpdateReply
	5,  // 19: sysjob.v1.SysJob.CreateSysJob:output_type -> sysjob.v1.SysJobCreateReply
	10, // 20: sysjob.v1.SysJob.DeleteSysJob:output_type -> sysjob.v1.SysJobDeleteReply
	10, // 21: sysjob.v1.SysJob.BatchDeleteSysJob:output_type -> sysjob.v1.SysJobDeleteReply
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_admin_sysjob_v1_sys_job_proto_init() }
func file_api_admin_sysjob_v1_sys_job_proto_init() {
	if File_api_admin_sysjob_v1_sys_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_admin_sysjob_v1_sys_job_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysJobDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_admin_sysjob_v1_sys_job_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_admin_sysjob_v1_sys_job_proto_goTypes,
		DependencyIndexes: file_api_admin_sysjob_v1_sys_job_proto_depIdxs,
		MessageInfos:      file_api_admin_sysjob_v1_sys_job_proto_msgTypes,
	}.Build()
	File_api_admin_sysjob_v1_sys_job_proto = out.File
	file_api_admin_sysjob_v1_sys_job_proto_rawDesc = nil
	file_api_admin_sysjob_v1_sys_job_proto_goTypes = nil
	file_api_admin_sysjob_v1_sys_job_proto_depIdxs = nil
}
