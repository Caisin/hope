// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysdept"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysDept is the model entity for the SysDept schema.
type SysDept struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// DeptPath holds the value of the "deptPath" field.
	// 部门路径
	DeptPath string `json:"deptPath,omitempty"`
	// DeptName holds the value of the "deptName" field.
	// 部门名称
	DeptName string `json:"deptName,omitempty"`
	// Sort holds the value of the "sort" field.
	// 排序
	Sort int32 `json:"sort,omitempty"`
	// Leader holds the value of the "leader" field.
	// 负责人
	Leader string `json:"leader,omitempty"`
	// Phone holds the value of the "phone" field.
	// 手机
	Phone string `json:"phone,omitempty"`
	// Email holds the value of the "email" field.
	// 邮箱
	Email string `json:"email,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status int32 `json:"status,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysDeptQuery when eager-loading is set.
	Edges            SysDeptEdges `json:"edges"`
	sys_dept_childes *int64
}

// SysDeptEdges holds the relations/edges for other nodes in the graph.
type SysDeptEdges struct {
	// Parent holds the value of the parent edge.
	Parent *SysDept `json:"parent,omitempty"`
	// Childes holds the value of the childes edge.
	Childes []*SysDept `json:"childes,omitempty"`
	// Users holds the value of the users edge.
	Users []*SysUser `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysDeptEdges) ParentOrErr() (*SysDept, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sysdept.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildesOrErr returns the Childes value or an error if the edge
// was not loaded in eager-loading.
func (e SysDeptEdges) ChildesOrErr() ([]*SysDept, error) {
	if e.loadedTypes[1] {
		return e.Childes, nil
	}
	return nil, &NotLoadedError{edge: "childes"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e SysDeptEdges) UsersOrErr() ([]*SysUser, error) {
	if e.loadedTypes[2] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysDept) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysdept.FieldID, sysdept.FieldSort, sysdept.FieldStatus, sysdept.FieldCreateBy, sysdept.FieldUpdateBy, sysdept.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysdept.FieldDeptPath, sysdept.FieldDeptName, sysdept.FieldLeader, sysdept.FieldPhone, sysdept.FieldEmail:
			values[i] = new(sql.NullString)
		case sysdept.FieldCreatedAt, sysdept.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sysdept.ForeignKeys[0]: // sys_dept_childes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysDept", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysDept fields.
func (sd *SysDept) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysdept.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int64(value.Int64)
		case sysdept.FieldDeptPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deptPath", values[i])
			} else if value.Valid {
				sd.DeptPath = value.String
			}
		case sysdept.FieldDeptName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deptName", values[i])
			} else if value.Valid {
				sd.DeptName = value.String
			}
		case sysdept.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sd.Sort = int32(value.Int64)
			}
		case sysdept.FieldLeader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field leader", values[i])
			} else if value.Valid {
				sd.Leader = value.String
			}
		case sysdept.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				sd.Phone = value.String
			}
		case sysdept.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				sd.Email = value.String
			}
		case sysdept.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sd.Status = int32(value.Int64)
			}
		case sysdept.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				sd.CreatedAt = value.Time
			}
		case sysdept.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				sd.UpdatedAt = value.Time
			}
		case sysdept.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				sd.CreateBy = value.Int64
			}
		case sysdept.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				sd.UpdateBy = value.Int64
			}
		case sysdept.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				sd.TenantId = value.Int64
			}
		case sysdept.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sys_dept_childes", value)
			} else if value.Valid {
				sd.sys_dept_childes = new(int64)
				*sd.sys_dept_childes = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the SysDept entity.
func (sd *SysDept) QueryParent() *SysDeptQuery {
	return (&SysDeptClient{config: sd.config}).QueryParent(sd)
}

// QueryChildes queries the "childes" edge of the SysDept entity.
func (sd *SysDept) QueryChildes() *SysDeptQuery {
	return (&SysDeptClient{config: sd.config}).QueryChildes(sd)
}

// QueryUsers queries the "users" edge of the SysDept entity.
func (sd *SysDept) QueryUsers() *SysUserQuery {
	return (&SysDeptClient{config: sd.config}).QueryUsers(sd)
}

// Update returns a builder for updating this SysDept.
// Note that you need to call SysDept.Unwrap() before calling this method if this SysDept
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SysDept) Update() *SysDeptUpdateOne {
	return (&SysDeptClient{config: sd.config}).UpdateOne(sd)
}

// Unwrap unwraps the SysDept entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SysDept) Unwrap() *SysDept {
	tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysDept is not a transactional entity")
	}
	sd.config.driver = tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SysDept) String() string {
	var builder strings.Builder
	builder.WriteString("SysDept(")
	builder.WriteString(fmt.Sprintf("id=%v", sd.ID))
	builder.WriteString(", deptPath=")
	builder.WriteString(sd.DeptPath)
	builder.WriteString(", deptName=")
	builder.WriteString(sd.DeptName)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", sd.Sort))
	builder.WriteString(", leader=")
	builder.WriteString(sd.Leader)
	builder.WriteString(", phone=")
	builder.WriteString(sd.Phone)
	builder.WriteString(", email=")
	builder.WriteString(sd.Email)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", sd.Status))
	builder.WriteString(", createdAt=")
	builder.WriteString(sd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(sd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", sd.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", sd.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", sd.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysDepts is a parsable slice of SysDept.
type SysDepts []*SysDept

func (sd SysDepts) config(cfg config) {
	for _i := range sd {
		sd[_i].config = cfg
	}
}
