// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/adchannel/v1/ad_channel.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdChannelClient is the client API for AdChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdChannelClient interface {
	// 分页查询AdChannel
	GetAdChannelPage(ctx context.Context, in *AdChannelPageReq, opts ...grpc.CallOption) (*AdChannelPageReply, error)
	// 获取AdChannel
	GetAdChannel(ctx context.Context, in *AdChannelReq, opts ...grpc.CallOption) (*AdChannelReply, error)
	// 更新AdChannel
	UpdateAdChannel(ctx context.Context, in *AdChannelUpdateReq, opts ...grpc.CallOption) (*AdChannelUpdateReply, error)
	// 创建AdChannel
	CreateAdChannel(ctx context.Context, in *AdChannelCreateReq, opts ...grpc.CallOption) (*AdChannelCreateReply, error)
	// 删除AdChannel
	DeleteAdChannel(ctx context.Context, in *AdChannelDeleteReq, opts ...grpc.CallOption) (*AdChannelDeleteReply, error)
	// 批量删除AdChannel
	BatchDeleteAdChannel(ctx context.Context, in *AdChannelBatchDeleteReq, opts ...grpc.CallOption) (*AdChannelDeleteReply, error)
}

type adChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewAdChannelClient(cc grpc.ClientConnInterface) AdChannelClient {
	return &adChannelClient{cc}
}

func (c *adChannelClient) GetAdChannelPage(ctx context.Context, in *AdChannelPageReq, opts ...grpc.CallOption) (*AdChannelPageReply, error) {
	out := new(AdChannelPageReply)
	err := c.cc.Invoke(ctx, "/adchannel.v1.AdChannel/GetAdChannelPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adChannelClient) GetAdChannel(ctx context.Context, in *AdChannelReq, opts ...grpc.CallOption) (*AdChannelReply, error) {
	out := new(AdChannelReply)
	err := c.cc.Invoke(ctx, "/adchannel.v1.AdChannel/GetAdChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adChannelClient) UpdateAdChannel(ctx context.Context, in *AdChannelUpdateReq, opts ...grpc.CallOption) (*AdChannelUpdateReply, error) {
	out := new(AdChannelUpdateReply)
	err := c.cc.Invoke(ctx, "/adchannel.v1.AdChannel/UpdateAdChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adChannelClient) CreateAdChannel(ctx context.Context, in *AdChannelCreateReq, opts ...grpc.CallOption) (*AdChannelCreateReply, error) {
	out := new(AdChannelCreateReply)
	err := c.cc.Invoke(ctx, "/adchannel.v1.AdChannel/CreateAdChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adChannelClient) DeleteAdChannel(ctx context.Context, in *AdChannelDeleteReq, opts ...grpc.CallOption) (*AdChannelDeleteReply, error) {
	out := new(AdChannelDeleteReply)
	err := c.cc.Invoke(ctx, "/adchannel.v1.AdChannel/DeleteAdChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adChannelClient) BatchDeleteAdChannel(ctx context.Context, in *AdChannelBatchDeleteReq, opts ...grpc.CallOption) (*AdChannelDeleteReply, error) {
	out := new(AdChannelDeleteReply)
	err := c.cc.Invoke(ctx, "/adchannel.v1.AdChannel/BatchDeleteAdChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdChannelServer is the server API for AdChannel service.
// All implementations must embed UnimplementedAdChannelServer
// for forward compatibility
type AdChannelServer interface {
	// 分页查询AdChannel
	GetAdChannelPage(context.Context, *AdChannelPageReq) (*AdChannelPageReply, error)
	// 获取AdChannel
	GetAdChannel(context.Context, *AdChannelReq) (*AdChannelReply, error)
	// 更新AdChannel
	UpdateAdChannel(context.Context, *AdChannelUpdateReq) (*AdChannelUpdateReply, error)
	// 创建AdChannel
	CreateAdChannel(context.Context, *AdChannelCreateReq) (*AdChannelCreateReply, error)
	// 删除AdChannel
	DeleteAdChannel(context.Context, *AdChannelDeleteReq) (*AdChannelDeleteReply, error)
	// 批量删除AdChannel
	BatchDeleteAdChannel(context.Context, *AdChannelBatchDeleteReq) (*AdChannelDeleteReply, error)
	mustEmbedUnimplementedAdChannelServer()
}

// UnimplementedAdChannelServer must be embedded to have forward compatible implementations.
type UnimplementedAdChannelServer struct {
}

func (UnimplementedAdChannelServer) GetAdChannelPage(context.Context, *AdChannelPageReq) (*AdChannelPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdChannelPage not implemented")
}
func (UnimplementedAdChannelServer) GetAdChannel(context.Context, *AdChannelReq) (*AdChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdChannel not implemented")
}
func (UnimplementedAdChannelServer) UpdateAdChannel(context.Context, *AdChannelUpdateReq) (*AdChannelUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdChannel not implemented")
}
func (UnimplementedAdChannelServer) CreateAdChannel(context.Context, *AdChannelCreateReq) (*AdChannelCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdChannel not implemented")
}
func (UnimplementedAdChannelServer) DeleteAdChannel(context.Context, *AdChannelDeleteReq) (*AdChannelDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdChannel not implemented")
}
func (UnimplementedAdChannelServer) BatchDeleteAdChannel(context.Context, *AdChannelBatchDeleteReq) (*AdChannelDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteAdChannel not implemented")
}
func (UnimplementedAdChannelServer) mustEmbedUnimplementedAdChannelServer() {}

// UnsafeAdChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdChannelServer will
// result in compilation errors.
type UnsafeAdChannelServer interface {
	mustEmbedUnimplementedAdChannelServer()
}

func RegisterAdChannelServer(s grpc.ServiceRegistrar, srv AdChannelServer) {
	s.RegisterService(&AdChannel_ServiceDesc, srv)
}

func _AdChannel_GetAdChannelPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdChannelPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdChannelServer).GetAdChannelPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adchannel.v1.AdChannel/GetAdChannelPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdChannelServer).GetAdChannelPage(ctx, req.(*AdChannelPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdChannel_GetAdChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdChannelServer).GetAdChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adchannel.v1.AdChannel/GetAdChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdChannelServer).GetAdChannel(ctx, req.(*AdChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdChannel_UpdateAdChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdChannelUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdChannelServer).UpdateAdChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adchannel.v1.AdChannel/UpdateAdChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdChannelServer).UpdateAdChannel(ctx, req.(*AdChannelUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdChannel_CreateAdChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdChannelCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdChannelServer).CreateAdChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adchannel.v1.AdChannel/CreateAdChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdChannelServer).CreateAdChannel(ctx, req.(*AdChannelCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdChannel_DeleteAdChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdChannelDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdChannelServer).DeleteAdChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adchannel.v1.AdChannel/DeleteAdChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdChannelServer).DeleteAdChannel(ctx, req.(*AdChannelDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdChannel_BatchDeleteAdChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdChannelBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdChannelServer).BatchDeleteAdChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adchannel.v1.AdChannel/BatchDeleteAdChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdChannelServer).BatchDeleteAdChannel(ctx, req.(*AdChannelBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdChannel_ServiceDesc is the grpc.ServiceDesc for AdChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adchannel.v1.AdChannel",
	HandlerType: (*AdChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdChannelPage",
			Handler:    _AdChannel_GetAdChannelPage_Handler,
		},
		{
			MethodName: "GetAdChannel",
			Handler:    _AdChannel_GetAdChannel_Handler,
		},
		{
			MethodName: "UpdateAdChannel",
			Handler:    _AdChannel_UpdateAdChannel_Handler,
		},
		{
			MethodName: "CreateAdChannel",
			Handler:    _AdChannel_CreateAdChannel_Handler,
		},
		{
			MethodName: "DeleteAdChannel",
			Handler:    _AdChannel_DeleteAdChannel_Handler,
		},
		{
			MethodName: "BatchDeleteAdChannel",
			Handler:    _AdChannel_BatchDeleteAdChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/adchannel/v1/ad_channel.proto",
}
