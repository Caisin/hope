// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: api/novel/novelbookshelf/v1/novel_bookshelf.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	pagin "hope/pkg/pagin"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查询搜索请求
type NovelBookshelfPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页查询参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条件参数
	Param *NovelBookshelfReq `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *NovelBookshelfPageReq) Reset() {
	*x = NovelBookshelfPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfPageReq) ProtoMessage() {}

func (x *NovelBookshelfPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfPageReq.ProtoReflect.Descriptor instead.
func (*NovelBookshelfPageReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{0}
}

func (x *NovelBookshelfPageReq) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *NovelBookshelfPageReq) GetParam() *NovelBookshelfReq {
	if x != nil {
		return x.Param
	}
	return nil
}

// 查询搜索返回
type NovelBookshelfPageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//分页参数
	Pagin *pagin.Pagination `protobuf:"bytes,1,opt,name=pagin,proto3" json:"pagin,omitempty"`
	//查询条目
	Items []*NovelBookshelfReply `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NovelBookshelfPageReply) Reset() {
	*x = NovelBookshelfPageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfPageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfPageReply) ProtoMessage() {}

func (x *NovelBookshelfPageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfPageReply.ProtoReflect.Descriptor instead.
func (*NovelBookshelfPageReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{1}
}

func (x *NovelBookshelfPageReply) GetPagin() *pagin.Pagination {
	if x != nil {
		return x.Pagin
	}
	return nil
}

func (x *NovelBookshelfPageReply) GetItems() []*NovelBookshelfReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// 查询搜索请求
type NovelBookshelfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//最后阅读时间
	LastReadTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastReadTime,proto3" json:"lastReadTime,omitempty"`
	//章节序号
	LastChapterOrder int32 `protobuf:"varint,6,opt,name=lastChapterOrder,proto3" json:"lastChapterOrder,omitempty"`
	//章节ID
	LastChapterId int64 `protobuf:"varint,7,opt,name=lastChapterId,proto3" json:"lastChapterId,omitempty"`
	//最后阅读章节名称
	LastChapterName string `protobuf:"bytes,8,opt,name=lastChapterName,proto3" json:"lastChapterName,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,12,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,13,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,14,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelBookshelfReq) Reset() {
	*x = NovelBookshelfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfReq) ProtoMessage() {}

func (x *NovelBookshelfReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfReq.ProtoReflect.Descriptor instead.
func (*NovelBookshelfReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{2}
}

func (x *NovelBookshelfReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBookshelfReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBookshelfReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBookshelfReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBookshelfReq) GetLastReadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReadTime
	}
	return nil
}

func (x *NovelBookshelfReq) GetLastChapterOrder() int32 {
	if x != nil {
		return x.LastChapterOrder
	}
	return 0
}

func (x *NovelBookshelfReq) GetLastChapterId() int64 {
	if x != nil {
		return x.LastChapterId
	}
	return 0
}

func (x *NovelBookshelfReq) GetLastChapterName() string {
	if x != nil {
		return x.LastChapterName
	}
	return ""
}

func (x *NovelBookshelfReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelBookshelfReq) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelBookshelfReq) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelBookshelfReq) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelBookshelfReq) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelBookshelfReq) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 查询搜索返回
type NovelBookshelfReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//最后阅读时间
	LastReadTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastReadTime,proto3" json:"lastReadTime,omitempty"`
	//章节序号
	LastChapterOrder int32 `protobuf:"varint,6,opt,name=lastChapterOrder,proto3" json:"lastChapterOrder,omitempty"`
	//章节ID
	LastChapterId int64 `protobuf:"varint,7,opt,name=lastChapterId,proto3" json:"lastChapterId,omitempty"`
	//最后阅读章节名称
	LastChapterName string `protobuf:"bytes,8,opt,name=lastChapterName,proto3" json:"lastChapterName,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,12,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,13,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,14,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelBookshelfReply) Reset() {
	*x = NovelBookshelfReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfReply) ProtoMessage() {}

func (x *NovelBookshelfReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfReply.ProtoReflect.Descriptor instead.
func (*NovelBookshelfReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{3}
}

func (x *NovelBookshelfReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBookshelfReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBookshelfReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBookshelfReply) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBookshelfReply) GetLastReadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReadTime
	}
	return nil
}

func (x *NovelBookshelfReply) GetLastChapterOrder() int32 {
	if x != nil {
		return x.LastChapterOrder
	}
	return 0
}

func (x *NovelBookshelfReply) GetLastChapterId() int64 {
	if x != nil {
		return x.LastChapterId
	}
	return 0
}

func (x *NovelBookshelfReply) GetLastChapterName() string {
	if x != nil {
		return x.LastChapterName
	}
	return ""
}

func (x *NovelBookshelfReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelBookshelfReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelBookshelfReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelBookshelfReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelBookshelfReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelBookshelfReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 创建NovelBookshelf请求
type NovelBookshelfCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//用户ID
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,3,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//最后阅读时间
	LastReadTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lastReadTime,proto3" json:"lastReadTime,omitempty"`
	//章节序号
	LastChapterOrder int32 `protobuf:"varint,5,opt,name=lastChapterOrder,proto3" json:"lastChapterOrder,omitempty"`
	//章节ID
	LastChapterId int64 `protobuf:"varint,6,opt,name=lastChapterId,proto3" json:"lastChapterId,omitempty"`
	//最后阅读章节名称
	LastChapterName string `protobuf:"bytes,7,opt,name=lastChapterName,proto3" json:"lastChapterName,omitempty"`
	//备注
	Remark string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelBookshelfCreateReq) Reset() {
	*x = NovelBookshelfCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfCreateReq) ProtoMessage() {}

func (x *NovelBookshelfCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfCreateReq.ProtoReflect.Descriptor instead.
func (*NovelBookshelfCreateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{4}
}

func (x *NovelBookshelfCreateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBookshelfCreateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBookshelfCreateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBookshelfCreateReq) GetLastReadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReadTime
	}
	return nil
}

func (x *NovelBookshelfCreateReq) GetLastChapterOrder() int32 {
	if x != nil {
		return x.LastChapterOrder
	}
	return 0
}

func (x *NovelBookshelfCreateReq) GetLastChapterId() int64 {
	if x != nil {
		return x.LastChapterId
	}
	return 0
}

func (x *NovelBookshelfCreateReq) GetLastChapterName() string {
	if x != nil {
		return x.LastChapterName
	}
	return ""
}

func (x *NovelBookshelfCreateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 创建NovelBookshelf返回
type NovelBookshelfCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//最后阅读时间
	LastReadTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastReadTime,proto3" json:"lastReadTime,omitempty"`
	//章节序号
	LastChapterOrder int32 `protobuf:"varint,6,opt,name=lastChapterOrder,proto3" json:"lastChapterOrder,omitempty"`
	//章节ID
	LastChapterId int64 `protobuf:"varint,7,opt,name=lastChapterId,proto3" json:"lastChapterId,omitempty"`
	//最后阅读章节名称
	LastChapterName string `protobuf:"bytes,8,opt,name=lastChapterName,proto3" json:"lastChapterName,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	//创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//创建者
	CreateBy int64 `protobuf:"varint,12,opt,name=createBy,proto3" json:"createBy,omitempty"`
	//更新者
	UpdateBy int64 `protobuf:"varint,13,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	//租户
	TenantId int64 `protobuf:"varint,14,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *NovelBookshelfCreateReply) Reset() {
	*x = NovelBookshelfCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfCreateReply) ProtoMessage() {}

func (x *NovelBookshelfCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfCreateReply.ProtoReflect.Descriptor instead.
func (*NovelBookshelfCreateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{5}
}

func (x *NovelBookshelfCreateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBookshelfCreateReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBookshelfCreateReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBookshelfCreateReply) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBookshelfCreateReply) GetLastReadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReadTime
	}
	return nil
}

func (x *NovelBookshelfCreateReply) GetLastChapterOrder() int32 {
	if x != nil {
		return x.LastChapterOrder
	}
	return 0
}

func (x *NovelBookshelfCreateReply) GetLastChapterId() int64 {
	if x != nil {
		return x.LastChapterId
	}
	return 0
}

func (x *NovelBookshelfCreateReply) GetLastChapterName() string {
	if x != nil {
		return x.LastChapterName
	}
	return ""
}

func (x *NovelBookshelfCreateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *NovelBookshelfCreateReply) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NovelBookshelfCreateReply) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NovelBookshelfCreateReply) GetCreateBy() int64 {
	if x != nil {
		return x.CreateBy
	}
	return 0
}

func (x *NovelBookshelfCreateReply) GetUpdateBy() int64 {
	if x != nil {
		return x.UpdateBy
	}
	return 0
}

func (x *NovelBookshelfCreateReply) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

// 更新NovelBookshelf请求
type NovelBookshelfUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//最后阅读时间
	LastReadTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastReadTime,proto3" json:"lastReadTime,omitempty"`
	//章节序号
	LastChapterOrder int32 `protobuf:"varint,6,opt,name=lastChapterOrder,proto3" json:"lastChapterOrder,omitempty"`
	//章节ID
	LastChapterId int64 `protobuf:"varint,7,opt,name=lastChapterId,proto3" json:"lastChapterId,omitempty"`
	//最后阅读章节名称
	LastChapterName string `protobuf:"bytes,8,opt,name=lastChapterName,proto3" json:"lastChapterName,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelBookshelfUpdateReq) Reset() {
	*x = NovelBookshelfUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfUpdateReq) ProtoMessage() {}

func (x *NovelBookshelfUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfUpdateReq.ProtoReflect.Descriptor instead.
func (*NovelBookshelfUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{6}
}

func (x *NovelBookshelfUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBookshelfUpdateReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBookshelfUpdateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBookshelfUpdateReq) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBookshelfUpdateReq) GetLastReadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReadTime
	}
	return nil
}

func (x *NovelBookshelfUpdateReq) GetLastChapterOrder() int32 {
	if x != nil {
		return x.LastChapterOrder
	}
	return 0
}

func (x *NovelBookshelfUpdateReq) GetLastChapterId() int64 {
	if x != nil {
		return x.LastChapterId
	}
	return 0
}

func (x *NovelBookshelfUpdateReq) GetLastChapterName() string {
	if x != nil {
		return x.LastChapterName
	}
	return ""
}

func (x *NovelBookshelfUpdateReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 更新NovelBookshelf返回
type NovelBookshelfUpdateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//用户ID
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	//用户名
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	//小说编号
	NovelId int64 `protobuf:"varint,4,opt,name=novelId,proto3" json:"novelId,omitempty"`
	//最后阅读时间
	LastReadTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastReadTime,proto3" json:"lastReadTime,omitempty"`
	//章节序号
	LastChapterOrder int32 `protobuf:"varint,6,opt,name=lastChapterOrder,proto3" json:"lastChapterOrder,omitempty"`
	//章节ID
	LastChapterId int64 `protobuf:"varint,7,opt,name=lastChapterId,proto3" json:"lastChapterId,omitempty"`
	//最后阅读章节名称
	LastChapterName string `protobuf:"bytes,8,opt,name=lastChapterName,proto3" json:"lastChapterName,omitempty"`
	//备注
	Remark string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *NovelBookshelfUpdateReply) Reset() {
	*x = NovelBookshelfUpdateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfUpdateReply) ProtoMessage() {}

func (x *NovelBookshelfUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfUpdateReply.ProtoReflect.Descriptor instead.
func (*NovelBookshelfUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{7}
}

func (x *NovelBookshelfUpdateReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NovelBookshelfUpdateReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NovelBookshelfUpdateReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *NovelBookshelfUpdateReply) GetNovelId() int64 {
	if x != nil {
		return x.NovelId
	}
	return 0
}

func (x *NovelBookshelfUpdateReply) GetLastReadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReadTime
	}
	return nil
}

func (x *NovelBookshelfUpdateReply) GetLastChapterOrder() int32 {
	if x != nil {
		return x.LastChapterOrder
	}
	return 0
}

func (x *NovelBookshelfUpdateReply) GetLastChapterId() int64 {
	if x != nil {
		return x.LastChapterId
	}
	return 0
}

func (x *NovelBookshelfUpdateReply) GetLastChapterName() string {
	if x != nil {
		return x.LastChapterName
	}
	return ""
}

func (x *NovelBookshelfUpdateReply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 删除NovelBookshelf请求
type NovelBookshelfDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NovelBookshelfDeleteReq) Reset() {
	*x = NovelBookshelfDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfDeleteReq) ProtoMessage() {}

func (x *NovelBookshelfDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelBookshelfDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{8}
}

func (x *NovelBookshelfDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除NovelBookshelf请求
type NovelBookshelfBatchDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *NovelBookshelfBatchDeleteReq) Reset() {
	*x = NovelBookshelfBatchDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfBatchDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfBatchDeleteReq) ProtoMessage() {}

func (x *NovelBookshelfBatchDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfBatchDeleteReq.ProtoReflect.Descriptor instead.
func (*NovelBookshelfBatchDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{9}
}

func (x *NovelBookshelfBatchDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除NovelBookshelf返回
type NovelBookshelfDeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *NovelBookshelfDeleteReply) Reset() {
	*x = NovelBookshelfDeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NovelBookshelfDeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NovelBookshelfDeleteReply) ProtoMessage() {}

func (x *NovelBookshelfDeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NovelBookshelfDeleteReply.ProtoReflect.Descriptor instead.
func (*NovelBookshelfDeleteReply) Descriptor() ([]byte, []int) {
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP(), []int{10}
}

func (x *NovelBookshelfDeleteReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_api_novel_novelbookshelf_v1_novel_bookshelf_proto protoreflect.FileDescriptor

var file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDesc = []byte{
	0x0a, 0x31, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x76, 0x65,
	0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68,
	0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7c, 0x0a, 0x15, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f,
	0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x71, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b,
	0x73, 0x68, 0x65, 0x6c, 0x66, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f,
	0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8d, 0x04, 0x0a, 0x11, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x04, 0x0a, 0x13, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x95, 0x04, 0x0a, 0x19, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xcb, 0x02,
	0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xcd, 0x02, 0x0a, 0x19,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x29, 0x0a, 0x17, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1c, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x19, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xfc, 0x06,
	0x0a, 0x0e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66,
	0x12, 0x8e, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x12, 0x28, 0x2e, 0x6e, 0x6f, 0x76,
	0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f,
	0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2f, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f,
	0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x12, 0x24, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62,
	0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c,
	0x66, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x12,
	0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65,
	0x6c, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x1a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x68, 0x65, 0x6c, 0x66, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f,
	0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x12, 0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f,
	0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c,
	0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68,
	0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b,
	0x73, 0x68, 0x65, 0x6c, 0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x3a, 0x01, 0x2a, 0x12,
	0x91, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42,
	0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x12, 0x2a, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76,
	0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x68, 0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f,
	0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x96, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c,
	0x66, 0x12, 0x2f, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65,
	0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x73,
	0x68, 0x65, 0x6c, 0x66, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68,
	0x65, 0x6c, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x42, 0x6f, 0x6f, 0x6b,
	0x73, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x42, 0x25, 0x5a, 0x23,
	0x68, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x2f, 0x6e,
	0x6f, 0x76, 0x65, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x2f, 0x76, 0x31,
	0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescOnce sync.Once
	file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescData = file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDesc
)

func file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescGZIP() []byte {
	file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescOnce.Do(func() {
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescData)
	})
	return file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDescData
}

var file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_goTypes = []interface{}{
	(*NovelBookshelfPageReq)(nil),        // 0: novelbookshelf.v1.NovelBookshelfPageReq
	(*NovelBookshelfPageReply)(nil),      // 1: novelbookshelf.v1.NovelBookshelfPageReply
	(*NovelBookshelfReq)(nil),            // 2: novelbookshelf.v1.NovelBookshelfReq
	(*NovelBookshelfReply)(nil),          // 3: novelbookshelf.v1.NovelBookshelfReply
	(*NovelBookshelfCreateReq)(nil),      // 4: novelbookshelf.v1.NovelBookshelfCreateReq
	(*NovelBookshelfCreateReply)(nil),    // 5: novelbookshelf.v1.NovelBookshelfCreateReply
	(*NovelBookshelfUpdateReq)(nil),      // 6: novelbookshelf.v1.NovelBookshelfUpdateReq
	(*NovelBookshelfUpdateReply)(nil),    // 7: novelbookshelf.v1.NovelBookshelfUpdateReply
	(*NovelBookshelfDeleteReq)(nil),      // 8: novelbookshelf.v1.NovelBookshelfDeleteReq
	(*NovelBookshelfBatchDeleteReq)(nil), // 9: novelbookshelf.v1.NovelBookshelfBatchDeleteReq
	(*NovelBookshelfDeleteReply)(nil),    // 10: novelbookshelf.v1.NovelBookshelfDeleteReply
	(*pagin.Pagination)(nil),             // 11: pagin.Pagination
	(*timestamppb.Timestamp)(nil),        // 12: google.protobuf.Timestamp
}
var file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_depIdxs = []int32{
	11, // 0: novelbookshelf.v1.NovelBookshelfPageReq.pagin:type_name -> pagin.Pagination
	2,  // 1: novelbookshelf.v1.NovelBookshelfPageReq.param:type_name -> novelbookshelf.v1.NovelBookshelfReq
	11, // 2: novelbookshelf.v1.NovelBookshelfPageReply.pagin:type_name -> pagin.Pagination
	3,  // 3: novelbookshelf.v1.NovelBookshelfPageReply.items:type_name -> novelbookshelf.v1.NovelBookshelfReply
	12, // 4: novelbookshelf.v1.NovelBookshelfReq.lastReadTime:type_name -> google.protobuf.Timestamp
	12, // 5: novelbookshelf.v1.NovelBookshelfReq.createdAt:type_name -> google.protobuf.Timestamp
	12, // 6: novelbookshelf.v1.NovelBookshelfReq.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 7: novelbookshelf.v1.NovelBookshelfReply.lastReadTime:type_name -> google.protobuf.Timestamp
	12, // 8: novelbookshelf.v1.NovelBookshelfReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 9: novelbookshelf.v1.NovelBookshelfReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 10: novelbookshelf.v1.NovelBookshelfCreateReq.lastReadTime:type_name -> google.protobuf.Timestamp
	12, // 11: novelbookshelf.v1.NovelBookshelfCreateReply.lastReadTime:type_name -> google.protobuf.Timestamp
	12, // 12: novelbookshelf.v1.NovelBookshelfCreateReply.createdAt:type_name -> google.protobuf.Timestamp
	12, // 13: novelbookshelf.v1.NovelBookshelfCreateReply.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 14: novelbookshelf.v1.NovelBookshelfUpdateReq.lastReadTime:type_name -> google.protobuf.Timestamp
	12, // 15: novelbookshelf.v1.NovelBookshelfUpdateReply.lastReadTime:type_name -> google.protobuf.Timestamp
	0,  // 16: novelbookshelf.v1.NovelBookshelf.GetPageNovelBookshelf:input_type -> novelbookshelf.v1.NovelBookshelfPageReq
	2,  // 17: novelbookshelf.v1.NovelBookshelf.GetNovelBookshelf:input_type -> novelbookshelf.v1.NovelBookshelfReq
	6,  // 18: novelbookshelf.v1.NovelBookshelf.UpdateNovelBookshelf:input_type -> novelbookshelf.v1.NovelBookshelfUpdateReq
	4,  // 19: novelbookshelf.v1.NovelBookshelf.CreateNovelBookshelf:input_type -> novelbookshelf.v1.NovelBookshelfCreateReq
	8,  // 20: novelbookshelf.v1.NovelBookshelf.DeleteNovelBookshelf:input_type -> novelbookshelf.v1.NovelBookshelfDeleteReq
	9,  // 21: novelbookshelf.v1.NovelBookshelf.BatchDeleteNovelBookshelf:input_type -> novelbookshelf.v1.NovelBookshelfBatchDeleteReq
	1,  // 22: novelbookshelf.v1.NovelBookshelf.GetPageNovelBookshelf:output_type -> novelbookshelf.v1.NovelBookshelfPageReply
	3,  // 23: novelbookshelf.v1.NovelBookshelf.GetNovelBookshelf:output_type -> novelbookshelf.v1.NovelBookshelfReply
	7,  // 24: novelbookshelf.v1.NovelBookshelf.UpdateNovelBookshelf:output_type -> novelbookshelf.v1.NovelBookshelfUpdateReply
	5,  // 25: novelbookshelf.v1.NovelBookshelf.CreateNovelBookshelf:output_type -> novelbookshelf.v1.NovelBookshelfCreateReply
	10, // 26: novelbookshelf.v1.NovelBookshelf.DeleteNovelBookshelf:output_type -> novelbookshelf.v1.NovelBookshelfDeleteReply
	10, // 27: novelbookshelf.v1.NovelBookshelf.BatchDeleteNovelBookshelf:output_type -> novelbookshelf.v1.NovelBookshelfDeleteReply
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_init() }
func file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_init() {
	if File_api_novel_novelbookshelf_v1_novel_bookshelf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfPageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfUpdateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfBatchDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NovelBookshelfDeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_goTypes,
		DependencyIndexes: file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_depIdxs,
		MessageInfos:      file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_msgTypes,
	}.Build()
	File_api_novel_novelbookshelf_v1_novel_bookshelf_proto = out.File
	file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_rawDesc = nil
	file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_goTypes = nil
	file_api_novel_novelbookshelf_v1_novel_bookshelf_proto_depIdxs = nil
}
