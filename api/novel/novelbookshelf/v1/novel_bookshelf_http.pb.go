// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type NovelBookshelfHTTPServer interface {
	BatchDeleteNovelBookshelf(context.Context, *NovelBookshelfBatchDeleteReq) (*NovelBookshelfDeleteReply, error)
	CreateNovelBookshelf(context.Context, *NovelBookshelfCreateReq) (*NovelBookshelfCreateReply, error)
	DeleteNovelBookshelf(context.Context, *NovelBookshelfDeleteReq) (*NovelBookshelfDeleteReply, error)
	GetNovelBookshelf(context.Context, *NovelBookshelfReq) (*NovelBookshelfReply, error)
	GetPageNovelBookshelf(context.Context, *NovelBookshelfPageReq) (*NovelBookshelfPageReply, error)
	UpdateNovelBookshelf(context.Context, *NovelBookshelfUpdateReq) (*NovelBookshelfUpdateReply, error)
}

func RegisterNovelBookshelfHTTPServer(s *http.Server, srv NovelBookshelfHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/novel/bookshelf/page", _NovelBookshelf_GetPageNovelBookshelf0_HTTP_Handler(srv))
	r.GET("/v1/novel/bookshelf/{id}", _NovelBookshelf_GetNovelBookshelf0_HTTP_Handler(srv))
	r.PUT("/v1/novel/bookshelf/{id}", _NovelBookshelf_UpdateNovelBookshelf0_HTTP_Handler(srv))
	r.POST("/v1/novel/bookshelf", _NovelBookshelf_CreateNovelBookshelf0_HTTP_Handler(srv))
	r.DELETE("/v1/novel/bookshelf/{id}", _NovelBookshelf_DeleteNovelBookshelf0_HTTP_Handler(srv))
	r.DELETE("/v1/novel/bookshelf", _NovelBookshelf_BatchDeleteNovelBookshelf0_HTTP_Handler(srv))
}

func _NovelBookshelf_GetPageNovelBookshelf0_HTTP_Handler(srv NovelBookshelfHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelBookshelfPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelbookshelf.v1.NovelBookshelf/GetPageNovelBookshelf")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageNovelBookshelf(ctx, req.(*NovelBookshelfPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelBookshelfPageReply)
		return ctx.Result(200, reply)
	}
}

func _NovelBookshelf_GetNovelBookshelf0_HTTP_Handler(srv NovelBookshelfHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelBookshelfReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelbookshelf.v1.NovelBookshelf/GetNovelBookshelf")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNovelBookshelf(ctx, req.(*NovelBookshelfReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelBookshelfReply)
		return ctx.Result(200, reply)
	}
}

func _NovelBookshelf_UpdateNovelBookshelf0_HTTP_Handler(srv NovelBookshelfHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelBookshelfUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelbookshelf.v1.NovelBookshelf/UpdateNovelBookshelf")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNovelBookshelf(ctx, req.(*NovelBookshelfUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelBookshelfUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _NovelBookshelf_CreateNovelBookshelf0_HTTP_Handler(srv NovelBookshelfHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelBookshelfCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelbookshelf.v1.NovelBookshelf/CreateNovelBookshelf")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNovelBookshelf(ctx, req.(*NovelBookshelfCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelBookshelfCreateReply)
		return ctx.Result(200, reply)
	}
}

func _NovelBookshelf_DeleteNovelBookshelf0_HTTP_Handler(srv NovelBookshelfHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelBookshelfDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelbookshelf.v1.NovelBookshelf/DeleteNovelBookshelf")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNovelBookshelf(ctx, req.(*NovelBookshelfDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelBookshelfDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _NovelBookshelf_BatchDeleteNovelBookshelf0_HTTP_Handler(srv NovelBookshelfHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NovelBookshelfBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/novelbookshelf.v1.NovelBookshelf/BatchDeleteNovelBookshelf")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteNovelBookshelf(ctx, req.(*NovelBookshelfBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NovelBookshelfDeleteReply)
		return ctx.Result(200, reply)
	}
}

type NovelBookshelfHTTPClient interface {
	BatchDeleteNovelBookshelf(ctx context.Context, req *NovelBookshelfBatchDeleteReq, opts ...http.CallOption) (rsp *NovelBookshelfDeleteReply, err error)
	CreateNovelBookshelf(ctx context.Context, req *NovelBookshelfCreateReq, opts ...http.CallOption) (rsp *NovelBookshelfCreateReply, err error)
	DeleteNovelBookshelf(ctx context.Context, req *NovelBookshelfDeleteReq, opts ...http.CallOption) (rsp *NovelBookshelfDeleteReply, err error)
	GetNovelBookshelf(ctx context.Context, req *NovelBookshelfReq, opts ...http.CallOption) (rsp *NovelBookshelfReply, err error)
	GetPageNovelBookshelf(ctx context.Context, req *NovelBookshelfPageReq, opts ...http.CallOption) (rsp *NovelBookshelfPageReply, err error)
	UpdateNovelBookshelf(ctx context.Context, req *NovelBookshelfUpdateReq, opts ...http.CallOption) (rsp *NovelBookshelfUpdateReply, err error)
}

type NovelBookshelfHTTPClientImpl struct {
	cc *http.Client
}

func NewNovelBookshelfHTTPClient(client *http.Client) NovelBookshelfHTTPClient {
	return &NovelBookshelfHTTPClientImpl{client}
}

func (c *NovelBookshelfHTTPClientImpl) BatchDeleteNovelBookshelf(ctx context.Context, in *NovelBookshelfBatchDeleteReq, opts ...http.CallOption) (*NovelBookshelfDeleteReply, error) {
	var out NovelBookshelfDeleteReply
	pattern := "/v1/novel/bookshelf"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelbookshelf.v1.NovelBookshelf/BatchDeleteNovelBookshelf"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelBookshelfHTTPClientImpl) CreateNovelBookshelf(ctx context.Context, in *NovelBookshelfCreateReq, opts ...http.CallOption) (*NovelBookshelfCreateReply, error) {
	var out NovelBookshelfCreateReply
	pattern := "/v1/novel/bookshelf"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/novelbookshelf.v1.NovelBookshelf/CreateNovelBookshelf"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelBookshelfHTTPClientImpl) DeleteNovelBookshelf(ctx context.Context, in *NovelBookshelfDeleteReq, opts ...http.CallOption) (*NovelBookshelfDeleteReply, error) {
	var out NovelBookshelfDeleteReply
	pattern := "/v1/novel/bookshelf/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelbookshelf.v1.NovelBookshelf/DeleteNovelBookshelf"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelBookshelfHTTPClientImpl) GetNovelBookshelf(ctx context.Context, in *NovelBookshelfReq, opts ...http.CallOption) (*NovelBookshelfReply, error) {
	var out NovelBookshelfReply
	pattern := "/v1/novel/bookshelf/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelbookshelf.v1.NovelBookshelf/GetNovelBookshelf"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelBookshelfHTTPClientImpl) GetPageNovelBookshelf(ctx context.Context, in *NovelBookshelfPageReq, opts ...http.CallOption) (*NovelBookshelfPageReply, error) {
	var out NovelBookshelfPageReply
	pattern := "/v1/novel/bookshelf/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/novelbookshelf.v1.NovelBookshelf/GetPageNovelBookshelf"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NovelBookshelfHTTPClientImpl) UpdateNovelBookshelf(ctx context.Context, in *NovelBookshelfUpdateReq, opts ...http.CallOption) (*NovelBookshelfUpdateReply, error) {
	var out NovelBookshelfUpdateReply
	pattern := "/v1/novel/bookshelf/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/novelbookshelf.v1.NovelBookshelf/UpdateNovelBookshelf"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
