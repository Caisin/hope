// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/novelchapter/v1/novel_chapter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelChapterClient is the client API for NovelChapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelChapterClient interface {
	// 分页查询NovelChapter
	GetNovelChapterPage(ctx context.Context, in *NovelChapterPageReq, opts ...grpc.CallOption) (*NovelChapterPageReply, error)
	// 获取NovelChapter
	GetNovelChapter(ctx context.Context, in *NovelChapterReq, opts ...grpc.CallOption) (*NovelChapterReply, error)
	// 更新NovelChapter
	UpdateNovelChapter(ctx context.Context, in *NovelChapterUpdateReq, opts ...grpc.CallOption) (*NovelChapterUpdateReply, error)
	// 创建NovelChapter
	CreateNovelChapter(ctx context.Context, in *NovelChapterCreateReq, opts ...grpc.CallOption) (*NovelChapterCreateReply, error)
	// 删除NovelChapter
	DeleteNovelChapter(ctx context.Context, in *NovelChapterDeleteReq, opts ...grpc.CallOption) (*NovelChapterDeleteReply, error)
	// 批量删除NovelChapter
	BatchDeleteNovelChapter(ctx context.Context, in *NovelChapterBatchDeleteReq, opts ...grpc.CallOption) (*NovelChapterDeleteReply, error)
}

type novelChapterClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelChapterClient(cc grpc.ClientConnInterface) NovelChapterClient {
	return &novelChapterClient{cc}
}

func (c *novelChapterClient) GetNovelChapterPage(ctx context.Context, in *NovelChapterPageReq, opts ...grpc.CallOption) (*NovelChapterPageReply, error) {
	out := new(NovelChapterPageReply)
	err := c.cc.Invoke(ctx, "/novelchapter.v1.NovelChapter/GetNovelChapterPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelChapterClient) GetNovelChapter(ctx context.Context, in *NovelChapterReq, opts ...grpc.CallOption) (*NovelChapterReply, error) {
	out := new(NovelChapterReply)
	err := c.cc.Invoke(ctx, "/novelchapter.v1.NovelChapter/GetNovelChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelChapterClient) UpdateNovelChapter(ctx context.Context, in *NovelChapterUpdateReq, opts ...grpc.CallOption) (*NovelChapterUpdateReply, error) {
	out := new(NovelChapterUpdateReply)
	err := c.cc.Invoke(ctx, "/novelchapter.v1.NovelChapter/UpdateNovelChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelChapterClient) CreateNovelChapter(ctx context.Context, in *NovelChapterCreateReq, opts ...grpc.CallOption) (*NovelChapterCreateReply, error) {
	out := new(NovelChapterCreateReply)
	err := c.cc.Invoke(ctx, "/novelchapter.v1.NovelChapter/CreateNovelChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelChapterClient) DeleteNovelChapter(ctx context.Context, in *NovelChapterDeleteReq, opts ...grpc.CallOption) (*NovelChapterDeleteReply, error) {
	out := new(NovelChapterDeleteReply)
	err := c.cc.Invoke(ctx, "/novelchapter.v1.NovelChapter/DeleteNovelChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelChapterClient) BatchDeleteNovelChapter(ctx context.Context, in *NovelChapterBatchDeleteReq, opts ...grpc.CallOption) (*NovelChapterDeleteReply, error) {
	out := new(NovelChapterDeleteReply)
	err := c.cc.Invoke(ctx, "/novelchapter.v1.NovelChapter/BatchDeleteNovelChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelChapterServer is the server API for NovelChapter service.
// All implementations must embed UnimplementedNovelChapterServer
// for forward compatibility
type NovelChapterServer interface {
	// 分页查询NovelChapter
	GetNovelChapterPage(context.Context, *NovelChapterPageReq) (*NovelChapterPageReply, error)
	// 获取NovelChapter
	GetNovelChapter(context.Context, *NovelChapterReq) (*NovelChapterReply, error)
	// 更新NovelChapter
	UpdateNovelChapter(context.Context, *NovelChapterUpdateReq) (*NovelChapterUpdateReply, error)
	// 创建NovelChapter
	CreateNovelChapter(context.Context, *NovelChapterCreateReq) (*NovelChapterCreateReply, error)
	// 删除NovelChapter
	DeleteNovelChapter(context.Context, *NovelChapterDeleteReq) (*NovelChapterDeleteReply, error)
	// 批量删除NovelChapter
	BatchDeleteNovelChapter(context.Context, *NovelChapterBatchDeleteReq) (*NovelChapterDeleteReply, error)
	mustEmbedUnimplementedNovelChapterServer()
}

// UnimplementedNovelChapterServer must be embedded to have forward compatible implementations.
type UnimplementedNovelChapterServer struct {
}

func (UnimplementedNovelChapterServer) GetNovelChapterPage(context.Context, *NovelChapterPageReq) (*NovelChapterPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelChapterPage not implemented")
}
func (UnimplementedNovelChapterServer) GetNovelChapter(context.Context, *NovelChapterReq) (*NovelChapterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelChapter not implemented")
}
func (UnimplementedNovelChapterServer) UpdateNovelChapter(context.Context, *NovelChapterUpdateReq) (*NovelChapterUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNovelChapter not implemented")
}
func (UnimplementedNovelChapterServer) CreateNovelChapter(context.Context, *NovelChapterCreateReq) (*NovelChapterCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNovelChapter not implemented")
}
func (UnimplementedNovelChapterServer) DeleteNovelChapter(context.Context, *NovelChapterDeleteReq) (*NovelChapterDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNovelChapter not implemented")
}
func (UnimplementedNovelChapterServer) BatchDeleteNovelChapter(context.Context, *NovelChapterBatchDeleteReq) (*NovelChapterDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNovelChapter not implemented")
}
func (UnimplementedNovelChapterServer) mustEmbedUnimplementedNovelChapterServer() {}

// UnsafeNovelChapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelChapterServer will
// result in compilation errors.
type UnsafeNovelChapterServer interface {
	mustEmbedUnimplementedNovelChapterServer()
}

func RegisterNovelChapterServer(s grpc.ServiceRegistrar, srv NovelChapterServer) {
	s.RegisterService(&NovelChapter_ServiceDesc, srv)
}

func _NovelChapter_GetNovelChapterPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelChapterPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelChapterServer).GetNovelChapterPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelchapter.v1.NovelChapter/GetNovelChapterPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelChapterServer).GetNovelChapterPage(ctx, req.(*NovelChapterPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelChapter_GetNovelChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelChapterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelChapterServer).GetNovelChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelchapter.v1.NovelChapter/GetNovelChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelChapterServer).GetNovelChapter(ctx, req.(*NovelChapterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelChapter_UpdateNovelChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelChapterUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelChapterServer).UpdateNovelChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelchapter.v1.NovelChapter/UpdateNovelChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelChapterServer).UpdateNovelChapter(ctx, req.(*NovelChapterUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelChapter_CreateNovelChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelChapterCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelChapterServer).CreateNovelChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelchapter.v1.NovelChapter/CreateNovelChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelChapterServer).CreateNovelChapter(ctx, req.(*NovelChapterCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelChapter_DeleteNovelChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelChapterDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelChapterServer).DeleteNovelChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelchapter.v1.NovelChapter/DeleteNovelChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelChapterServer).DeleteNovelChapter(ctx, req.(*NovelChapterDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelChapter_BatchDeleteNovelChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelChapterBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelChapterServer).BatchDeleteNovelChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelchapter.v1.NovelChapter/BatchDeleteNovelChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelChapterServer).BatchDeleteNovelChapter(ctx, req.(*NovelChapterBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelChapter_ServiceDesc is the grpc.ServiceDesc for NovelChapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelChapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novelchapter.v1.NovelChapter",
	HandlerType: (*NovelChapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNovelChapterPage",
			Handler:    _NovelChapter_GetNovelChapterPage_Handler,
		},
		{
			MethodName: "GetNovelChapter",
			Handler:    _NovelChapter_GetNovelChapter_Handler,
		},
		{
			MethodName: "UpdateNovelChapter",
			Handler:    _NovelChapter_UpdateNovelChapter_Handler,
		},
		{
			MethodName: "CreateNovelChapter",
			Handler:    _NovelChapter_CreateNovelChapter_Handler,
		},
		{
			MethodName: "DeleteNovelChapter",
			Handler:    _NovelChapter_DeleteNovelChapter_Handler,
		},
		{
			MethodName: "BatchDeleteNovelChapter",
			Handler:    _NovelChapter_BatchDeleteNovelChapter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/novelchapter/v1/novel_chapter.proto",
}
