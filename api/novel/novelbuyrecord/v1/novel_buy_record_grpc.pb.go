// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/novelbuyrecord/v1/novel_buy_record.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelBuyRecordClient is the client API for NovelBuyRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelBuyRecordClient interface {
	// 分页查询NovelBuyRecord
	GetPageNovelBuyRecord(ctx context.Context, in *NovelBuyRecordPageReq, opts ...grpc.CallOption) (*NovelBuyRecordPageReply, error)
	// 获取NovelBuyRecord
	GetNovelBuyRecord(ctx context.Context, in *NovelBuyRecordReq, opts ...grpc.CallOption) (*NovelBuyRecordReply, error)
	// 更新NovelBuyRecord
	UpdateNovelBuyRecord(ctx context.Context, in *NovelBuyRecordUpdateReq, opts ...grpc.CallOption) (*NovelBuyRecordUpdateReply, error)
	// 创建NovelBuyRecord
	CreateNovelBuyRecord(ctx context.Context, in *NovelBuyRecordCreateReq, opts ...grpc.CallOption) (*NovelBuyRecordCreateReply, error)
	// 删除NovelBuyRecord
	DeleteNovelBuyRecord(ctx context.Context, in *NovelBuyRecordDeleteReq, opts ...grpc.CallOption) (*NovelBuyRecordDeleteReply, error)
	// 批量删除NovelBuyRecord
	BatchDeleteNovelBuyRecord(ctx context.Context, in *NovelBuyRecordBatchDeleteReq, opts ...grpc.CallOption) (*NovelBuyRecordDeleteReply, error)
}

type novelBuyRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelBuyRecordClient(cc grpc.ClientConnInterface) NovelBuyRecordClient {
	return &novelBuyRecordClient{cc}
}

func (c *novelBuyRecordClient) GetPageNovelBuyRecord(ctx context.Context, in *NovelBuyRecordPageReq, opts ...grpc.CallOption) (*NovelBuyRecordPageReply, error) {
	out := new(NovelBuyRecordPageReply)
	err := c.cc.Invoke(ctx, "/novelbuyrecord.v1.NovelBuyRecord/GetPageNovelBuyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyRecordClient) GetNovelBuyRecord(ctx context.Context, in *NovelBuyRecordReq, opts ...grpc.CallOption) (*NovelBuyRecordReply, error) {
	out := new(NovelBuyRecordReply)
	err := c.cc.Invoke(ctx, "/novelbuyrecord.v1.NovelBuyRecord/GetNovelBuyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyRecordClient) UpdateNovelBuyRecord(ctx context.Context, in *NovelBuyRecordUpdateReq, opts ...grpc.CallOption) (*NovelBuyRecordUpdateReply, error) {
	out := new(NovelBuyRecordUpdateReply)
	err := c.cc.Invoke(ctx, "/novelbuyrecord.v1.NovelBuyRecord/UpdateNovelBuyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyRecordClient) CreateNovelBuyRecord(ctx context.Context, in *NovelBuyRecordCreateReq, opts ...grpc.CallOption) (*NovelBuyRecordCreateReply, error) {
	out := new(NovelBuyRecordCreateReply)
	err := c.cc.Invoke(ctx, "/novelbuyrecord.v1.NovelBuyRecord/CreateNovelBuyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyRecordClient) DeleteNovelBuyRecord(ctx context.Context, in *NovelBuyRecordDeleteReq, opts ...grpc.CallOption) (*NovelBuyRecordDeleteReply, error) {
	out := new(NovelBuyRecordDeleteReply)
	err := c.cc.Invoke(ctx, "/novelbuyrecord.v1.NovelBuyRecord/DeleteNovelBuyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelBuyRecordClient) BatchDeleteNovelBuyRecord(ctx context.Context, in *NovelBuyRecordBatchDeleteReq, opts ...grpc.CallOption) (*NovelBuyRecordDeleteReply, error) {
	out := new(NovelBuyRecordDeleteReply)
	err := c.cc.Invoke(ctx, "/novelbuyrecord.v1.NovelBuyRecord/BatchDeleteNovelBuyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelBuyRecordServer is the server API for NovelBuyRecord service.
// All implementations must embed UnimplementedNovelBuyRecordServer
// for forward compatibility
type NovelBuyRecordServer interface {
	// 分页查询NovelBuyRecord
	GetPageNovelBuyRecord(context.Context, *NovelBuyRecordPageReq) (*NovelBuyRecordPageReply, error)
	// 获取NovelBuyRecord
	GetNovelBuyRecord(context.Context, *NovelBuyRecordReq) (*NovelBuyRecordReply, error)
	// 更新NovelBuyRecord
	UpdateNovelBuyRecord(context.Context, *NovelBuyRecordUpdateReq) (*NovelBuyRecordUpdateReply, error)
	// 创建NovelBuyRecord
	CreateNovelBuyRecord(context.Context, *NovelBuyRecordCreateReq) (*NovelBuyRecordCreateReply, error)
	// 删除NovelBuyRecord
	DeleteNovelBuyRecord(context.Context, *NovelBuyRecordDeleteReq) (*NovelBuyRecordDeleteReply, error)
	// 批量删除NovelBuyRecord
	BatchDeleteNovelBuyRecord(context.Context, *NovelBuyRecordBatchDeleteReq) (*NovelBuyRecordDeleteReply, error)
	mustEmbedUnimplementedNovelBuyRecordServer()
}

// UnimplementedNovelBuyRecordServer must be embedded to have forward compatible implementations.
type UnimplementedNovelBuyRecordServer struct {
}

func (UnimplementedNovelBuyRecordServer) GetPageNovelBuyRecord(context.Context, *NovelBuyRecordPageReq) (*NovelBuyRecordPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageNovelBuyRecord not implemented")
}
func (UnimplementedNovelBuyRecordServer) GetNovelBuyRecord(context.Context, *NovelBuyRecordReq) (*NovelBuyRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelBuyRecord not implemented")
}
func (UnimplementedNovelBuyRecordServer) UpdateNovelBuyRecord(context.Context, *NovelBuyRecordUpdateReq) (*NovelBuyRecordUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNovelBuyRecord not implemented")
}
func (UnimplementedNovelBuyRecordServer) CreateNovelBuyRecord(context.Context, *NovelBuyRecordCreateReq) (*NovelBuyRecordCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNovelBuyRecord not implemented")
}
func (UnimplementedNovelBuyRecordServer) DeleteNovelBuyRecord(context.Context, *NovelBuyRecordDeleteReq) (*NovelBuyRecordDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNovelBuyRecord not implemented")
}
func (UnimplementedNovelBuyRecordServer) BatchDeleteNovelBuyRecord(context.Context, *NovelBuyRecordBatchDeleteReq) (*NovelBuyRecordDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNovelBuyRecord not implemented")
}
func (UnimplementedNovelBuyRecordServer) mustEmbedUnimplementedNovelBuyRecordServer() {}

// UnsafeNovelBuyRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelBuyRecordServer will
// result in compilation errors.
type UnsafeNovelBuyRecordServer interface {
	mustEmbedUnimplementedNovelBuyRecordServer()
}

func RegisterNovelBuyRecordServer(s grpc.ServiceRegistrar, srv NovelBuyRecordServer) {
	s.RegisterService(&NovelBuyRecord_ServiceDesc, srv)
}

func _NovelBuyRecord_GetPageNovelBuyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyRecordPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyRecordServer).GetPageNovelBuyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuyrecord.v1.NovelBuyRecord/GetPageNovelBuyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyRecordServer).GetPageNovelBuyRecord(ctx, req.(*NovelBuyRecordPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyRecord_GetNovelBuyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyRecordServer).GetNovelBuyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuyrecord.v1.NovelBuyRecord/GetNovelBuyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyRecordServer).GetNovelBuyRecord(ctx, req.(*NovelBuyRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyRecord_UpdateNovelBuyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyRecordUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyRecordServer).UpdateNovelBuyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuyrecord.v1.NovelBuyRecord/UpdateNovelBuyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyRecordServer).UpdateNovelBuyRecord(ctx, req.(*NovelBuyRecordUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyRecord_CreateNovelBuyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyRecordCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyRecordServer).CreateNovelBuyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuyrecord.v1.NovelBuyRecord/CreateNovelBuyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyRecordServer).CreateNovelBuyRecord(ctx, req.(*NovelBuyRecordCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyRecord_DeleteNovelBuyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyRecordDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyRecordServer).DeleteNovelBuyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuyrecord.v1.NovelBuyRecord/DeleteNovelBuyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyRecordServer).DeleteNovelBuyRecord(ctx, req.(*NovelBuyRecordDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelBuyRecord_BatchDeleteNovelBuyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelBuyRecordBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelBuyRecordServer).BatchDeleteNovelBuyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelbuyrecord.v1.NovelBuyRecord/BatchDeleteNovelBuyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelBuyRecordServer).BatchDeleteNovelBuyRecord(ctx, req.(*NovelBuyRecordBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelBuyRecord_ServiceDesc is the grpc.ServiceDesc for NovelBuyRecord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelBuyRecord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novelbuyrecord.v1.NovelBuyRecord",
	HandlerType: (*NovelBuyRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageNovelBuyRecord",
			Handler:    _NovelBuyRecord_GetPageNovelBuyRecord_Handler,
		},
		{
			MethodName: "GetNovelBuyRecord",
			Handler:    _NovelBuyRecord_GetNovelBuyRecord_Handler,
		},
		{
			MethodName: "UpdateNovelBuyRecord",
			Handler:    _NovelBuyRecord_UpdateNovelBuyRecord_Handler,
		},
		{
			MethodName: "CreateNovelBuyRecord",
			Handler:    _NovelBuyRecord_CreateNovelBuyRecord_Handler,
		},
		{
			MethodName: "DeleteNovelBuyRecord",
			Handler:    _NovelBuyRecord_DeleteNovelBuyRecord_Handler,
		},
		{
			MethodName: "BatchDeleteNovelBuyRecord",
			Handler:    _NovelBuyRecord_BatchDeleteNovelBuyRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/novelbuyrecord/v1/novel_buy_record.proto",
}
