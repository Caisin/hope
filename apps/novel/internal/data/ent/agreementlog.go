// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/agreementlog"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AgreementLog is the model entity for the AgreementLog schema.
type AgreementLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// OuterAgreementNo holds the value of the "outerAgreementNo" field.
	// 外部签约协议号
	OuterAgreementNo string `json:"outerAgreementNo,omitempty"`
	// OrderId holds the value of the "orderId" field.
	// 订单号
	OrderId string `json:"orderId,omitempty"`
	// UserId holds the value of the "userId" field.
	// 用户ID
	UserId int64 `json:"userId,omitempty"`
	// ChId holds the value of the "chId" field.
	// 渠道
	ChId int64 `json:"chId,omitempty"`
	// UserName holds the value of the "userName" field.
	// 用户名称
	UserName string `json:"userName,omitempty"`
	// PaymentName holds the value of the "paymentName" field.
	// 商品名称
	PaymentName string `json:"paymentName,omitempty"`
	// PaymentId holds the value of the "paymentId" field.
	// 支付配置ID payment_config表的ID
	PaymentId int64 `json:"paymentId,omitempty"`
	// State holds the value of the "state" field.
	// 状态：1、待签约，2、签约成功，3、取消签约
	State int32 `json:"state,omitempty"`
	// Payment holds the value of the "payment" field.
	// 每期扣款金额,单位：分
	Payment int64 `json:"payment,omitempty"`
	// AgreementType holds the value of the "agreementType" field.
	// 支付方式：Alipay,Google,WeChat
	AgreementType agreementlog.AgreementType `json:"agreementType,omitempty"`
	// VipType holds the value of the "vipType" field.
	// vip类型
	VipType int64 `json:"vipType,omitempty"`
	// Times holds the value of the "times" field.
	// 第几期
	Times int64 `json:"times,omitempty"`
	// CycleDays holds the value of the "cycleDays" field.
	// 周期天数
	CycleDays int32 `json:"cycleDays,omitempty"`
	// NextExecTime holds the value of the "nextExecTime" field.
	// 下次执行时间
	NextExecTime time.Time `json:"nextExecTime,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgreementLogQuery when eager-loading is set.
	Edges AgreementLogEdges `json:"edges"`
}

// AgreementLogEdges holds the relations/edges for other nodes in the graph.
type AgreementLogEdges struct {
	// Orders holds the value of the orders edge.
	Orders []*PayOrder `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e AgreementLogEdges) OrdersOrErr() ([]*PayOrder, error) {
	if e.loadedTypes[0] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AgreementLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case agreementlog.FieldID, agreementlog.FieldUserId, agreementlog.FieldChId, agreementlog.FieldPaymentId, agreementlog.FieldState, agreementlog.FieldPayment, agreementlog.FieldVipType, agreementlog.FieldTimes, agreementlog.FieldCycleDays, agreementlog.FieldCreateBy, agreementlog.FieldUpdateBy, agreementlog.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case agreementlog.FieldOuterAgreementNo, agreementlog.FieldOrderId, agreementlog.FieldUserName, agreementlog.FieldPaymentName, agreementlog.FieldAgreementType, agreementlog.FieldRemark:
			values[i] = new(sql.NullString)
		case agreementlog.FieldNextExecTime, agreementlog.FieldCreatedAt, agreementlog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AgreementLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AgreementLog fields.
func (al *AgreementLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agreementlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int64(value.Int64)
		case agreementlog.FieldOuterAgreementNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field outerAgreementNo", values[i])
			} else if value.Valid {
				al.OuterAgreementNo = value.String
			}
		case agreementlog.FieldOrderId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field orderId", values[i])
			} else if value.Valid {
				al.OrderId = value.String
			}
		case agreementlog.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				al.UserId = value.Int64
			}
		case agreementlog.FieldChId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chId", values[i])
			} else if value.Valid {
				al.ChId = value.Int64
			}
		case agreementlog.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				al.UserName = value.String
			}
		case agreementlog.FieldPaymentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field paymentName", values[i])
			} else if value.Valid {
				al.PaymentName = value.String
			}
		case agreementlog.FieldPaymentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field paymentId", values[i])
			} else if value.Valid {
				al.PaymentId = value.Int64
			}
		case agreementlog.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				al.State = int32(value.Int64)
			}
		case agreementlog.FieldPayment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment", values[i])
			} else if value.Valid {
				al.Payment = value.Int64
			}
		case agreementlog.FieldAgreementType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agreementType", values[i])
			} else if value.Valid {
				al.AgreementType = agreementlog.AgreementType(value.String)
			}
		case agreementlog.FieldVipType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vipType", values[i])
			} else if value.Valid {
				al.VipType = value.Int64
			}
		case agreementlog.FieldTimes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field times", values[i])
			} else if value.Valid {
				al.Times = value.Int64
			}
		case agreementlog.FieldCycleDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cycleDays", values[i])
			} else if value.Valid {
				al.CycleDays = int32(value.Int64)
			}
		case agreementlog.FieldNextExecTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field nextExecTime", values[i])
			} else if value.Valid {
				al.NextExecTime = value.Time
			}
		case agreementlog.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				al.Remark = value.String
			}
		case agreementlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		case agreementlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				al.UpdatedAt = value.Time
			}
		case agreementlog.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				al.CreateBy = value.Int64
			}
		case agreementlog.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				al.UpdateBy = value.Int64
			}
		case agreementlog.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				al.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryOrders queries the "orders" edge of the AgreementLog entity.
func (al *AgreementLog) QueryOrders() *PayOrderQuery {
	return (&AgreementLogClient{config: al.config}).QueryOrders(al)
}

// Update returns a builder for updating this AgreementLog.
// Note that you need to call AgreementLog.Unwrap() before calling this method if this AgreementLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AgreementLog) Update() *AgreementLogUpdateOne {
	return (&AgreementLogClient{config: al.config}).UpdateOne(al)
}

// Unwrap unwraps the AgreementLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AgreementLog) Unwrap() *AgreementLog {
	tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AgreementLog is not a transactional entity")
	}
	al.config.driver = tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AgreementLog) String() string {
	var builder strings.Builder
	builder.WriteString("AgreementLog(")
	builder.WriteString(fmt.Sprintf("id=%v", al.ID))
	builder.WriteString(", outerAgreementNo=")
	builder.WriteString(al.OuterAgreementNo)
	builder.WriteString(", orderId=")
	builder.WriteString(al.OrderId)
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", al.UserId))
	builder.WriteString(", chId=")
	builder.WriteString(fmt.Sprintf("%v", al.ChId))
	builder.WriteString(", userName=")
	builder.WriteString(al.UserName)
	builder.WriteString(", paymentName=")
	builder.WriteString(al.PaymentName)
	builder.WriteString(", paymentId=")
	builder.WriteString(fmt.Sprintf("%v", al.PaymentId))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", al.State))
	builder.WriteString(", payment=")
	builder.WriteString(fmt.Sprintf("%v", al.Payment))
	builder.WriteString(", agreementType=")
	builder.WriteString(fmt.Sprintf("%v", al.AgreementType))
	builder.WriteString(", vipType=")
	builder.WriteString(fmt.Sprintf("%v", al.VipType))
	builder.WriteString(", times=")
	builder.WriteString(fmt.Sprintf("%v", al.Times))
	builder.WriteString(", cycleDays=")
	builder.WriteString(fmt.Sprintf("%v", al.CycleDays))
	builder.WriteString(", nextExecTime=")
	builder.WriteString(al.NextExecTime.Format(time.ANSIC))
	builder.WriteString(", remark=")
	builder.WriteString(al.Remark)
	builder.WriteString(", createdAt=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(al.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", al.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", al.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", al.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// AgreementLogs is a parsable slice of AgreementLog.
type AgreementLogs []*AgreementLog

func (al AgreementLogs) config(cfg config) {
	for _i := range al {
		al[_i].config = cfg
	}
}
