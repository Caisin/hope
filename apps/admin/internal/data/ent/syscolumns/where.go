// Code generated by entc, DO NOT EDIT.

package syscolumns

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ColumnId applies equality check predicate on the "columnId" field. It's identical to ColumnIdEQ.
func ColumnId(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumnId), v))
	})
}

// ColumnName applies equality check predicate on the "columnName" field. It's identical to ColumnNameEQ.
func ColumnName(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumnName), v))
	})
}

// ColumnComment applies equality check predicate on the "columnComment" field. It's identical to ColumnCommentEQ.
func ColumnComment(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumnComment), v))
	})
}

// ColumnType applies equality check predicate on the "columnType" field. It's identical to ColumnTypeEQ.
func ColumnType(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumnType), v))
	})
}

// GoType applies equality check predicate on the "goType" field. It's identical to GoTypeEQ.
func GoType(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoType), v))
	})
}

// GoField applies equality check predicate on the "goField" field. It's identical to GoFieldEQ.
func GoField(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoField), v))
	})
}

// JsonField applies equality check predicate on the "jsonField" field. It's identical to JsonFieldEQ.
func JsonField(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJsonField), v))
	})
}

// IsPk applies equality check predicate on the "isPk" field. It's identical to IsPkEQ.
func IsPk(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPk), v))
	})
}

// IsIncrement applies equality check predicate on the "isIncrement" field. It's identical to IsIncrementEQ.
func IsIncrement(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsIncrement), v))
	})
}

// IsRequired applies equality check predicate on the "isRequired" field. It's identical to IsRequiredEQ.
func IsRequired(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRequired), v))
	})
}

// IsInsert applies equality check predicate on the "isInsert" field. It's identical to IsInsertEQ.
func IsInsert(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsInsert), v))
	})
}

// IsEdit applies equality check predicate on the "isEdit" field. It's identical to IsEditEQ.
func IsEdit(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEdit), v))
	})
}

// IsList applies equality check predicate on the "isList" field. It's identical to IsListEQ.
func IsList(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsList), v))
	})
}

// IsQuery applies equality check predicate on the "isQuery" field. It's identical to IsQueryEQ.
func IsQuery(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsQuery), v))
	})
}

// QueryType applies equality check predicate on the "queryType" field. It's identical to QueryTypeEQ.
func QueryType(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQueryType), v))
	})
}

// HtmlType applies equality check predicate on the "htmlType" field. It's identical to HtmlTypeEQ.
func HtmlType(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHtmlType), v))
	})
}

// DictType applies equality check predicate on the "dictType" field. It's identical to DictTypeEQ.
func DictType(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictType), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// List applies equality check predicate on the "list" field. It's identical to ListEQ.
func List(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldList), v))
	})
}

// Pk applies equality check predicate on the "pk" field. It's identical to PkEQ.
func Pk(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPk), v))
	})
}

// Required applies equality check predicate on the "required" field. It's identical to RequiredEQ.
func Required(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequired), v))
	})
}

// SuperColumn applies equality check predicate on the "superColumn" field. It's identical to SuperColumnEQ.
func SuperColumn(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuperColumn), v))
	})
}

// UsableColumn applies equality check predicate on the "usableColumn" field. It's identical to UsableColumnEQ.
func UsableColumn(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsableColumn), v))
	})
}

// Increment applies equality check predicate on the "increment" field. It's identical to IncrementEQ.
func Increment(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIncrement), v))
	})
}

// Insert applies equality check predicate on the "insert" field. It's identical to InsertEQ.
func Insert(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInsert), v))
	})
}

// Edit applies equality check predicate on the "edit" field. It's identical to EditEQ.
func Edit(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEdit), v))
	})
}

// Query applies equality check predicate on the "query" field. It's identical to QueryEQ.
func Query(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuery), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// FkLabelName applies equality check predicate on the "fkLabelName" field. It's identical to FkLabelNameEQ.
func FkLabelName(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFkLabelName), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// ColumnIdEQ applies the EQ predicate on the "columnId" field.
func ColumnIdEQ(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumnId), v))
	})
}

// ColumnIdNEQ applies the NEQ predicate on the "columnId" field.
func ColumnIdNEQ(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldColumnId), v))
	})
}

// ColumnIdIn applies the In predicate on the "columnId" field.
func ColumnIdIn(vs ...int32) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldColumnId), v...))
	})
}

// ColumnIdNotIn applies the NotIn predicate on the "columnId" field.
func ColumnIdNotIn(vs ...int32) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldColumnId), v...))
	})
}

// ColumnIdGT applies the GT predicate on the "columnId" field.
func ColumnIdGT(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldColumnId), v))
	})
}

// ColumnIdGTE applies the GTE predicate on the "columnId" field.
func ColumnIdGTE(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldColumnId), v))
	})
}

// ColumnIdLT applies the LT predicate on the "columnId" field.
func ColumnIdLT(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldColumnId), v))
	})
}

// ColumnIdLTE applies the LTE predicate on the "columnId" field.
func ColumnIdLTE(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldColumnId), v))
	})
}

// ColumnNameEQ applies the EQ predicate on the "columnName" field.
func ColumnNameEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumnName), v))
	})
}

// ColumnNameNEQ applies the NEQ predicate on the "columnName" field.
func ColumnNameNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldColumnName), v))
	})
}

// ColumnNameIn applies the In predicate on the "columnName" field.
func ColumnNameIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldColumnName), v...))
	})
}

// ColumnNameNotIn applies the NotIn predicate on the "columnName" field.
func ColumnNameNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldColumnName), v...))
	})
}

// ColumnNameGT applies the GT predicate on the "columnName" field.
func ColumnNameGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldColumnName), v))
	})
}

// ColumnNameGTE applies the GTE predicate on the "columnName" field.
func ColumnNameGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldColumnName), v))
	})
}

// ColumnNameLT applies the LT predicate on the "columnName" field.
func ColumnNameLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldColumnName), v))
	})
}

// ColumnNameLTE applies the LTE predicate on the "columnName" field.
func ColumnNameLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldColumnName), v))
	})
}

// ColumnNameContains applies the Contains predicate on the "columnName" field.
func ColumnNameContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldColumnName), v))
	})
}

// ColumnNameHasPrefix applies the HasPrefix predicate on the "columnName" field.
func ColumnNameHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldColumnName), v))
	})
}

// ColumnNameHasSuffix applies the HasSuffix predicate on the "columnName" field.
func ColumnNameHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldColumnName), v))
	})
}

// ColumnNameIsNil applies the IsNil predicate on the "columnName" field.
func ColumnNameIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldColumnName)))
	})
}

// ColumnNameNotNil applies the NotNil predicate on the "columnName" field.
func ColumnNameNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldColumnName)))
	})
}

// ColumnNameEqualFold applies the EqualFold predicate on the "columnName" field.
func ColumnNameEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldColumnName), v))
	})
}

// ColumnNameContainsFold applies the ContainsFold predicate on the "columnName" field.
func ColumnNameContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldColumnName), v))
	})
}

// ColumnCommentEQ applies the EQ predicate on the "columnComment" field.
func ColumnCommentEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentNEQ applies the NEQ predicate on the "columnComment" field.
func ColumnCommentNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentIn applies the In predicate on the "columnComment" field.
func ColumnCommentIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldColumnComment), v...))
	})
}

// ColumnCommentNotIn applies the NotIn predicate on the "columnComment" field.
func ColumnCommentNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldColumnComment), v...))
	})
}

// ColumnCommentGT applies the GT predicate on the "columnComment" field.
func ColumnCommentGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentGTE applies the GTE predicate on the "columnComment" field.
func ColumnCommentGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentLT applies the LT predicate on the "columnComment" field.
func ColumnCommentLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentLTE applies the LTE predicate on the "columnComment" field.
func ColumnCommentLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentContains applies the Contains predicate on the "columnComment" field.
func ColumnCommentContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentHasPrefix applies the HasPrefix predicate on the "columnComment" field.
func ColumnCommentHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentHasSuffix applies the HasSuffix predicate on the "columnComment" field.
func ColumnCommentHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentIsNil applies the IsNil predicate on the "columnComment" field.
func ColumnCommentIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldColumnComment)))
	})
}

// ColumnCommentNotNil applies the NotNil predicate on the "columnComment" field.
func ColumnCommentNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldColumnComment)))
	})
}

// ColumnCommentEqualFold applies the EqualFold predicate on the "columnComment" field.
func ColumnCommentEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldColumnComment), v))
	})
}

// ColumnCommentContainsFold applies the ContainsFold predicate on the "columnComment" field.
func ColumnCommentContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldColumnComment), v))
	})
}

// ColumnTypeEQ applies the EQ predicate on the "columnType" field.
func ColumnTypeEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColumnType), v))
	})
}

// ColumnTypeNEQ applies the NEQ predicate on the "columnType" field.
func ColumnTypeNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldColumnType), v))
	})
}

// ColumnTypeIn applies the In predicate on the "columnType" field.
func ColumnTypeIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldColumnType), v...))
	})
}

// ColumnTypeNotIn applies the NotIn predicate on the "columnType" field.
func ColumnTypeNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldColumnType), v...))
	})
}

// ColumnTypeGT applies the GT predicate on the "columnType" field.
func ColumnTypeGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldColumnType), v))
	})
}

// ColumnTypeGTE applies the GTE predicate on the "columnType" field.
func ColumnTypeGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldColumnType), v))
	})
}

// ColumnTypeLT applies the LT predicate on the "columnType" field.
func ColumnTypeLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldColumnType), v))
	})
}

// ColumnTypeLTE applies the LTE predicate on the "columnType" field.
func ColumnTypeLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldColumnType), v))
	})
}

// ColumnTypeContains applies the Contains predicate on the "columnType" field.
func ColumnTypeContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldColumnType), v))
	})
}

// ColumnTypeHasPrefix applies the HasPrefix predicate on the "columnType" field.
func ColumnTypeHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldColumnType), v))
	})
}

// ColumnTypeHasSuffix applies the HasSuffix predicate on the "columnType" field.
func ColumnTypeHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldColumnType), v))
	})
}

// ColumnTypeIsNil applies the IsNil predicate on the "columnType" field.
func ColumnTypeIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldColumnType)))
	})
}

// ColumnTypeNotNil applies the NotNil predicate on the "columnType" field.
func ColumnTypeNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldColumnType)))
	})
}

// ColumnTypeEqualFold applies the EqualFold predicate on the "columnType" field.
func ColumnTypeEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldColumnType), v))
	})
}

// ColumnTypeContainsFold applies the ContainsFold predicate on the "columnType" field.
func ColumnTypeContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldColumnType), v))
	})
}

// GoTypeEQ applies the EQ predicate on the "goType" field.
func GoTypeEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoType), v))
	})
}

// GoTypeNEQ applies the NEQ predicate on the "goType" field.
func GoTypeNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoType), v))
	})
}

// GoTypeIn applies the In predicate on the "goType" field.
func GoTypeIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGoType), v...))
	})
}

// GoTypeNotIn applies the NotIn predicate on the "goType" field.
func GoTypeNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGoType), v...))
	})
}

// GoTypeGT applies the GT predicate on the "goType" field.
func GoTypeGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoType), v))
	})
}

// GoTypeGTE applies the GTE predicate on the "goType" field.
func GoTypeGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoType), v))
	})
}

// GoTypeLT applies the LT predicate on the "goType" field.
func GoTypeLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoType), v))
	})
}

// GoTypeLTE applies the LTE predicate on the "goType" field.
func GoTypeLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoType), v))
	})
}

// GoTypeContains applies the Contains predicate on the "goType" field.
func GoTypeContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoType), v))
	})
}

// GoTypeHasPrefix applies the HasPrefix predicate on the "goType" field.
func GoTypeHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoType), v))
	})
}

// GoTypeHasSuffix applies the HasSuffix predicate on the "goType" field.
func GoTypeHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoType), v))
	})
}

// GoTypeIsNil applies the IsNil predicate on the "goType" field.
func GoTypeIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoType)))
	})
}

// GoTypeNotNil applies the NotNil predicate on the "goType" field.
func GoTypeNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoType)))
	})
}

// GoTypeEqualFold applies the EqualFold predicate on the "goType" field.
func GoTypeEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoType), v))
	})
}

// GoTypeContainsFold applies the ContainsFold predicate on the "goType" field.
func GoTypeContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoType), v))
	})
}

// GoFieldEQ applies the EQ predicate on the "goField" field.
func GoFieldEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoField), v))
	})
}

// GoFieldNEQ applies the NEQ predicate on the "goField" field.
func GoFieldNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoField), v))
	})
}

// GoFieldIn applies the In predicate on the "goField" field.
func GoFieldIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGoField), v...))
	})
}

// GoFieldNotIn applies the NotIn predicate on the "goField" field.
func GoFieldNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGoField), v...))
	})
}

// GoFieldGT applies the GT predicate on the "goField" field.
func GoFieldGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoField), v))
	})
}

// GoFieldGTE applies the GTE predicate on the "goField" field.
func GoFieldGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoField), v))
	})
}

// GoFieldLT applies the LT predicate on the "goField" field.
func GoFieldLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoField), v))
	})
}

// GoFieldLTE applies the LTE predicate on the "goField" field.
func GoFieldLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoField), v))
	})
}

// GoFieldContains applies the Contains predicate on the "goField" field.
func GoFieldContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoField), v))
	})
}

// GoFieldHasPrefix applies the HasPrefix predicate on the "goField" field.
func GoFieldHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoField), v))
	})
}

// GoFieldHasSuffix applies the HasSuffix predicate on the "goField" field.
func GoFieldHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoField), v))
	})
}

// GoFieldIsNil applies the IsNil predicate on the "goField" field.
func GoFieldIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoField)))
	})
}

// GoFieldNotNil applies the NotNil predicate on the "goField" field.
func GoFieldNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoField)))
	})
}

// GoFieldEqualFold applies the EqualFold predicate on the "goField" field.
func GoFieldEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoField), v))
	})
}

// GoFieldContainsFold applies the ContainsFold predicate on the "goField" field.
func GoFieldContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoField), v))
	})
}

// JsonFieldEQ applies the EQ predicate on the "jsonField" field.
func JsonFieldEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJsonField), v))
	})
}

// JsonFieldNEQ applies the NEQ predicate on the "jsonField" field.
func JsonFieldNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJsonField), v))
	})
}

// JsonFieldIn applies the In predicate on the "jsonField" field.
func JsonFieldIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJsonField), v...))
	})
}

// JsonFieldNotIn applies the NotIn predicate on the "jsonField" field.
func JsonFieldNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJsonField), v...))
	})
}

// JsonFieldGT applies the GT predicate on the "jsonField" field.
func JsonFieldGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJsonField), v))
	})
}

// JsonFieldGTE applies the GTE predicate on the "jsonField" field.
func JsonFieldGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJsonField), v))
	})
}

// JsonFieldLT applies the LT predicate on the "jsonField" field.
func JsonFieldLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJsonField), v))
	})
}

// JsonFieldLTE applies the LTE predicate on the "jsonField" field.
func JsonFieldLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJsonField), v))
	})
}

// JsonFieldContains applies the Contains predicate on the "jsonField" field.
func JsonFieldContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJsonField), v))
	})
}

// JsonFieldHasPrefix applies the HasPrefix predicate on the "jsonField" field.
func JsonFieldHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJsonField), v))
	})
}

// JsonFieldHasSuffix applies the HasSuffix predicate on the "jsonField" field.
func JsonFieldHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJsonField), v))
	})
}

// JsonFieldIsNil applies the IsNil predicate on the "jsonField" field.
func JsonFieldIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJsonField)))
	})
}

// JsonFieldNotNil applies the NotNil predicate on the "jsonField" field.
func JsonFieldNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJsonField)))
	})
}

// JsonFieldEqualFold applies the EqualFold predicate on the "jsonField" field.
func JsonFieldEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJsonField), v))
	})
}

// JsonFieldContainsFold applies the ContainsFold predicate on the "jsonField" field.
func JsonFieldContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJsonField), v))
	})
}

// IsPkEQ applies the EQ predicate on the "isPk" field.
func IsPkEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPk), v))
	})
}

// IsPkNEQ applies the NEQ predicate on the "isPk" field.
func IsPkNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPk), v))
	})
}

// IsPkIn applies the In predicate on the "isPk" field.
func IsPkIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsPk), v...))
	})
}

// IsPkNotIn applies the NotIn predicate on the "isPk" field.
func IsPkNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsPk), v...))
	})
}

// IsPkGT applies the GT predicate on the "isPk" field.
func IsPkGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsPk), v))
	})
}

// IsPkGTE applies the GTE predicate on the "isPk" field.
func IsPkGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsPk), v))
	})
}

// IsPkLT applies the LT predicate on the "isPk" field.
func IsPkLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsPk), v))
	})
}

// IsPkLTE applies the LTE predicate on the "isPk" field.
func IsPkLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsPk), v))
	})
}

// IsPkContains applies the Contains predicate on the "isPk" field.
func IsPkContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsPk), v))
	})
}

// IsPkHasPrefix applies the HasPrefix predicate on the "isPk" field.
func IsPkHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsPk), v))
	})
}

// IsPkHasSuffix applies the HasSuffix predicate on the "isPk" field.
func IsPkHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsPk), v))
	})
}

// IsPkIsNil applies the IsNil predicate on the "isPk" field.
func IsPkIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsPk)))
	})
}

// IsPkNotNil applies the NotNil predicate on the "isPk" field.
func IsPkNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsPk)))
	})
}

// IsPkEqualFold applies the EqualFold predicate on the "isPk" field.
func IsPkEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsPk), v))
	})
}

// IsPkContainsFold applies the ContainsFold predicate on the "isPk" field.
func IsPkContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsPk), v))
	})
}

// IsIncrementEQ applies the EQ predicate on the "isIncrement" field.
func IsIncrementEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementNEQ applies the NEQ predicate on the "isIncrement" field.
func IsIncrementNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementIn applies the In predicate on the "isIncrement" field.
func IsIncrementIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsIncrement), v...))
	})
}

// IsIncrementNotIn applies the NotIn predicate on the "isIncrement" field.
func IsIncrementNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsIncrement), v...))
	})
}

// IsIncrementGT applies the GT predicate on the "isIncrement" field.
func IsIncrementGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementGTE applies the GTE predicate on the "isIncrement" field.
func IsIncrementGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementLT applies the LT predicate on the "isIncrement" field.
func IsIncrementLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementLTE applies the LTE predicate on the "isIncrement" field.
func IsIncrementLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementContains applies the Contains predicate on the "isIncrement" field.
func IsIncrementContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementHasPrefix applies the HasPrefix predicate on the "isIncrement" field.
func IsIncrementHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementHasSuffix applies the HasSuffix predicate on the "isIncrement" field.
func IsIncrementHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementIsNil applies the IsNil predicate on the "isIncrement" field.
func IsIncrementIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsIncrement)))
	})
}

// IsIncrementNotNil applies the NotNil predicate on the "isIncrement" field.
func IsIncrementNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsIncrement)))
	})
}

// IsIncrementEqualFold applies the EqualFold predicate on the "isIncrement" field.
func IsIncrementEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsIncrement), v))
	})
}

// IsIncrementContainsFold applies the ContainsFold predicate on the "isIncrement" field.
func IsIncrementContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsIncrement), v))
	})
}

// IsRequiredEQ applies the EQ predicate on the "isRequired" field.
func IsRequiredEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsRequired), v))
	})
}

// IsRequiredNEQ applies the NEQ predicate on the "isRequired" field.
func IsRequiredNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsRequired), v))
	})
}

// IsRequiredIn applies the In predicate on the "isRequired" field.
func IsRequiredIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsRequired), v...))
	})
}

// IsRequiredNotIn applies the NotIn predicate on the "isRequired" field.
func IsRequiredNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsRequired), v...))
	})
}

// IsRequiredGT applies the GT predicate on the "isRequired" field.
func IsRequiredGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsRequired), v))
	})
}

// IsRequiredGTE applies the GTE predicate on the "isRequired" field.
func IsRequiredGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsRequired), v))
	})
}

// IsRequiredLT applies the LT predicate on the "isRequired" field.
func IsRequiredLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsRequired), v))
	})
}

// IsRequiredLTE applies the LTE predicate on the "isRequired" field.
func IsRequiredLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsRequired), v))
	})
}

// IsRequiredContains applies the Contains predicate on the "isRequired" field.
func IsRequiredContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsRequired), v))
	})
}

// IsRequiredHasPrefix applies the HasPrefix predicate on the "isRequired" field.
func IsRequiredHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsRequired), v))
	})
}

// IsRequiredHasSuffix applies the HasSuffix predicate on the "isRequired" field.
func IsRequiredHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsRequired), v))
	})
}

// IsRequiredIsNil applies the IsNil predicate on the "isRequired" field.
func IsRequiredIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsRequired)))
	})
}

// IsRequiredNotNil applies the NotNil predicate on the "isRequired" field.
func IsRequiredNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsRequired)))
	})
}

// IsRequiredEqualFold applies the EqualFold predicate on the "isRequired" field.
func IsRequiredEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsRequired), v))
	})
}

// IsRequiredContainsFold applies the ContainsFold predicate on the "isRequired" field.
func IsRequiredContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsRequired), v))
	})
}

// IsInsertEQ applies the EQ predicate on the "isInsert" field.
func IsInsertEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsInsert), v))
	})
}

// IsInsertNEQ applies the NEQ predicate on the "isInsert" field.
func IsInsertNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsInsert), v))
	})
}

// IsInsertIn applies the In predicate on the "isInsert" field.
func IsInsertIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsInsert), v...))
	})
}

// IsInsertNotIn applies the NotIn predicate on the "isInsert" field.
func IsInsertNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsInsert), v...))
	})
}

// IsInsertGT applies the GT predicate on the "isInsert" field.
func IsInsertGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsInsert), v))
	})
}

// IsInsertGTE applies the GTE predicate on the "isInsert" field.
func IsInsertGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsInsert), v))
	})
}

// IsInsertLT applies the LT predicate on the "isInsert" field.
func IsInsertLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsInsert), v))
	})
}

// IsInsertLTE applies the LTE predicate on the "isInsert" field.
func IsInsertLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsInsert), v))
	})
}

// IsInsertContains applies the Contains predicate on the "isInsert" field.
func IsInsertContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsInsert), v))
	})
}

// IsInsertHasPrefix applies the HasPrefix predicate on the "isInsert" field.
func IsInsertHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsInsert), v))
	})
}

// IsInsertHasSuffix applies the HasSuffix predicate on the "isInsert" field.
func IsInsertHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsInsert), v))
	})
}

// IsInsertIsNil applies the IsNil predicate on the "isInsert" field.
func IsInsertIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsInsert)))
	})
}

// IsInsertNotNil applies the NotNil predicate on the "isInsert" field.
func IsInsertNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsInsert)))
	})
}

// IsInsertEqualFold applies the EqualFold predicate on the "isInsert" field.
func IsInsertEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsInsert), v))
	})
}

// IsInsertContainsFold applies the ContainsFold predicate on the "isInsert" field.
func IsInsertContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsInsert), v))
	})
}

// IsEditEQ applies the EQ predicate on the "isEdit" field.
func IsEditEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsEdit), v))
	})
}

// IsEditNEQ applies the NEQ predicate on the "isEdit" field.
func IsEditNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsEdit), v))
	})
}

// IsEditIn applies the In predicate on the "isEdit" field.
func IsEditIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsEdit), v...))
	})
}

// IsEditNotIn applies the NotIn predicate on the "isEdit" field.
func IsEditNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsEdit), v...))
	})
}

// IsEditGT applies the GT predicate on the "isEdit" field.
func IsEditGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsEdit), v))
	})
}

// IsEditGTE applies the GTE predicate on the "isEdit" field.
func IsEditGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsEdit), v))
	})
}

// IsEditLT applies the LT predicate on the "isEdit" field.
func IsEditLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsEdit), v))
	})
}

// IsEditLTE applies the LTE predicate on the "isEdit" field.
func IsEditLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsEdit), v))
	})
}

// IsEditContains applies the Contains predicate on the "isEdit" field.
func IsEditContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsEdit), v))
	})
}

// IsEditHasPrefix applies the HasPrefix predicate on the "isEdit" field.
func IsEditHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsEdit), v))
	})
}

// IsEditHasSuffix applies the HasSuffix predicate on the "isEdit" field.
func IsEditHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsEdit), v))
	})
}

// IsEditIsNil applies the IsNil predicate on the "isEdit" field.
func IsEditIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsEdit)))
	})
}

// IsEditNotNil applies the NotNil predicate on the "isEdit" field.
func IsEditNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsEdit)))
	})
}

// IsEditEqualFold applies the EqualFold predicate on the "isEdit" field.
func IsEditEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsEdit), v))
	})
}

// IsEditContainsFold applies the ContainsFold predicate on the "isEdit" field.
func IsEditContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsEdit), v))
	})
}

// IsListEQ applies the EQ predicate on the "isList" field.
func IsListEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsList), v))
	})
}

// IsListNEQ applies the NEQ predicate on the "isList" field.
func IsListNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsList), v))
	})
}

// IsListIn applies the In predicate on the "isList" field.
func IsListIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsList), v...))
	})
}

// IsListNotIn applies the NotIn predicate on the "isList" field.
func IsListNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsList), v...))
	})
}

// IsListGT applies the GT predicate on the "isList" field.
func IsListGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsList), v))
	})
}

// IsListGTE applies the GTE predicate on the "isList" field.
func IsListGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsList), v))
	})
}

// IsListLT applies the LT predicate on the "isList" field.
func IsListLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsList), v))
	})
}

// IsListLTE applies the LTE predicate on the "isList" field.
func IsListLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsList), v))
	})
}

// IsListContains applies the Contains predicate on the "isList" field.
func IsListContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsList), v))
	})
}

// IsListHasPrefix applies the HasPrefix predicate on the "isList" field.
func IsListHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsList), v))
	})
}

// IsListHasSuffix applies the HasSuffix predicate on the "isList" field.
func IsListHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsList), v))
	})
}

// IsListIsNil applies the IsNil predicate on the "isList" field.
func IsListIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsList)))
	})
}

// IsListNotNil applies the NotNil predicate on the "isList" field.
func IsListNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsList)))
	})
}

// IsListEqualFold applies the EqualFold predicate on the "isList" field.
func IsListEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsList), v))
	})
}

// IsListContainsFold applies the ContainsFold predicate on the "isList" field.
func IsListContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsList), v))
	})
}

// IsQueryEQ applies the EQ predicate on the "isQuery" field.
func IsQueryEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsQuery), v))
	})
}

// IsQueryNEQ applies the NEQ predicate on the "isQuery" field.
func IsQueryNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsQuery), v))
	})
}

// IsQueryIn applies the In predicate on the "isQuery" field.
func IsQueryIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsQuery), v...))
	})
}

// IsQueryNotIn applies the NotIn predicate on the "isQuery" field.
func IsQueryNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsQuery), v...))
	})
}

// IsQueryGT applies the GT predicate on the "isQuery" field.
func IsQueryGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsQuery), v))
	})
}

// IsQueryGTE applies the GTE predicate on the "isQuery" field.
func IsQueryGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsQuery), v))
	})
}

// IsQueryLT applies the LT predicate on the "isQuery" field.
func IsQueryLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsQuery), v))
	})
}

// IsQueryLTE applies the LTE predicate on the "isQuery" field.
func IsQueryLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsQuery), v))
	})
}

// IsQueryContains applies the Contains predicate on the "isQuery" field.
func IsQueryContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsQuery), v))
	})
}

// IsQueryHasPrefix applies the HasPrefix predicate on the "isQuery" field.
func IsQueryHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsQuery), v))
	})
}

// IsQueryHasSuffix applies the HasSuffix predicate on the "isQuery" field.
func IsQueryHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsQuery), v))
	})
}

// IsQueryIsNil applies the IsNil predicate on the "isQuery" field.
func IsQueryIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsQuery)))
	})
}

// IsQueryNotNil applies the NotNil predicate on the "isQuery" field.
func IsQueryNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsQuery)))
	})
}

// IsQueryEqualFold applies the EqualFold predicate on the "isQuery" field.
func IsQueryEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsQuery), v))
	})
}

// IsQueryContainsFold applies the ContainsFold predicate on the "isQuery" field.
func IsQueryContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsQuery), v))
	})
}

// QueryTypeEQ applies the EQ predicate on the "queryType" field.
func QueryTypeEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQueryType), v))
	})
}

// QueryTypeNEQ applies the NEQ predicate on the "queryType" field.
func QueryTypeNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQueryType), v))
	})
}

// QueryTypeIn applies the In predicate on the "queryType" field.
func QueryTypeIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQueryType), v...))
	})
}

// QueryTypeNotIn applies the NotIn predicate on the "queryType" field.
func QueryTypeNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQueryType), v...))
	})
}

// QueryTypeGT applies the GT predicate on the "queryType" field.
func QueryTypeGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQueryType), v))
	})
}

// QueryTypeGTE applies the GTE predicate on the "queryType" field.
func QueryTypeGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQueryType), v))
	})
}

// QueryTypeLT applies the LT predicate on the "queryType" field.
func QueryTypeLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQueryType), v))
	})
}

// QueryTypeLTE applies the LTE predicate on the "queryType" field.
func QueryTypeLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQueryType), v))
	})
}

// QueryTypeContains applies the Contains predicate on the "queryType" field.
func QueryTypeContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQueryType), v))
	})
}

// QueryTypeHasPrefix applies the HasPrefix predicate on the "queryType" field.
func QueryTypeHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQueryType), v))
	})
}

// QueryTypeHasSuffix applies the HasSuffix predicate on the "queryType" field.
func QueryTypeHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQueryType), v))
	})
}

// QueryTypeIsNil applies the IsNil predicate on the "queryType" field.
func QueryTypeIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQueryType)))
	})
}

// QueryTypeNotNil applies the NotNil predicate on the "queryType" field.
func QueryTypeNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQueryType)))
	})
}

// QueryTypeEqualFold applies the EqualFold predicate on the "queryType" field.
func QueryTypeEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQueryType), v))
	})
}

// QueryTypeContainsFold applies the ContainsFold predicate on the "queryType" field.
func QueryTypeContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQueryType), v))
	})
}

// HtmlTypeEQ applies the EQ predicate on the "htmlType" field.
func HtmlTypeEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeNEQ applies the NEQ predicate on the "htmlType" field.
func HtmlTypeNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeIn applies the In predicate on the "htmlType" field.
func HtmlTypeIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHtmlType), v...))
	})
}

// HtmlTypeNotIn applies the NotIn predicate on the "htmlType" field.
func HtmlTypeNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHtmlType), v...))
	})
}

// HtmlTypeGT applies the GT predicate on the "htmlType" field.
func HtmlTypeGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeGTE applies the GTE predicate on the "htmlType" field.
func HtmlTypeGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeLT applies the LT predicate on the "htmlType" field.
func HtmlTypeLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeLTE applies the LTE predicate on the "htmlType" field.
func HtmlTypeLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeContains applies the Contains predicate on the "htmlType" field.
func HtmlTypeContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeHasPrefix applies the HasPrefix predicate on the "htmlType" field.
func HtmlTypeHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeHasSuffix applies the HasSuffix predicate on the "htmlType" field.
func HtmlTypeHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeIsNil applies the IsNil predicate on the "htmlType" field.
func HtmlTypeIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHtmlType)))
	})
}

// HtmlTypeNotNil applies the NotNil predicate on the "htmlType" field.
func HtmlTypeNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHtmlType)))
	})
}

// HtmlTypeEqualFold applies the EqualFold predicate on the "htmlType" field.
func HtmlTypeEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHtmlType), v))
	})
}

// HtmlTypeContainsFold applies the ContainsFold predicate on the "htmlType" field.
func HtmlTypeContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHtmlType), v))
	})
}

// DictTypeEQ applies the EQ predicate on the "dictType" field.
func DictTypeEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDictType), v))
	})
}

// DictTypeNEQ applies the NEQ predicate on the "dictType" field.
func DictTypeNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDictType), v))
	})
}

// DictTypeIn applies the In predicate on the "dictType" field.
func DictTypeIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDictType), v...))
	})
}

// DictTypeNotIn applies the NotIn predicate on the "dictType" field.
func DictTypeNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDictType), v...))
	})
}

// DictTypeGT applies the GT predicate on the "dictType" field.
func DictTypeGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDictType), v))
	})
}

// DictTypeGTE applies the GTE predicate on the "dictType" field.
func DictTypeGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDictType), v))
	})
}

// DictTypeLT applies the LT predicate on the "dictType" field.
func DictTypeLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDictType), v))
	})
}

// DictTypeLTE applies the LTE predicate on the "dictType" field.
func DictTypeLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDictType), v))
	})
}

// DictTypeContains applies the Contains predicate on the "dictType" field.
func DictTypeContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDictType), v))
	})
}

// DictTypeHasPrefix applies the HasPrefix predicate on the "dictType" field.
func DictTypeHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDictType), v))
	})
}

// DictTypeHasSuffix applies the HasSuffix predicate on the "dictType" field.
func DictTypeHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDictType), v))
	})
}

// DictTypeIsNil applies the IsNil predicate on the "dictType" field.
func DictTypeIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDictType)))
	})
}

// DictTypeNotNil applies the NotNil predicate on the "dictType" field.
func DictTypeNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDictType)))
	})
}

// DictTypeEqualFold applies the EqualFold predicate on the "dictType" field.
func DictTypeEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDictType), v))
	})
}

// DictTypeContainsFold applies the ContainsFold predicate on the "dictType" field.
func DictTypeContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDictType), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int32) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int32) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int32) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// SortIsNil applies the IsNil predicate on the "sort" field.
func SortIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSort)))
	})
}

// SortNotNil applies the NotNil predicate on the "sort" field.
func SortNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSort)))
	})
}

// ListEQ applies the EQ predicate on the "list" field.
func ListEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldList), v))
	})
}

// ListNEQ applies the NEQ predicate on the "list" field.
func ListNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldList), v))
	})
}

// ListIn applies the In predicate on the "list" field.
func ListIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldList), v...))
	})
}

// ListNotIn applies the NotIn predicate on the "list" field.
func ListNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldList), v...))
	})
}

// ListGT applies the GT predicate on the "list" field.
func ListGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldList), v))
	})
}

// ListGTE applies the GTE predicate on the "list" field.
func ListGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldList), v))
	})
}

// ListLT applies the LT predicate on the "list" field.
func ListLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldList), v))
	})
}

// ListLTE applies the LTE predicate on the "list" field.
func ListLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldList), v))
	})
}

// ListContains applies the Contains predicate on the "list" field.
func ListContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldList), v))
	})
}

// ListHasPrefix applies the HasPrefix predicate on the "list" field.
func ListHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldList), v))
	})
}

// ListHasSuffix applies the HasSuffix predicate on the "list" field.
func ListHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldList), v))
	})
}

// ListIsNil applies the IsNil predicate on the "list" field.
func ListIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldList)))
	})
}

// ListNotNil applies the NotNil predicate on the "list" field.
func ListNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldList)))
	})
}

// ListEqualFold applies the EqualFold predicate on the "list" field.
func ListEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldList), v))
	})
}

// ListContainsFold applies the ContainsFold predicate on the "list" field.
func ListContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldList), v))
	})
}

// PkEQ applies the EQ predicate on the "pk" field.
func PkEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPk), v))
	})
}

// PkNEQ applies the NEQ predicate on the "pk" field.
func PkNEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPk), v))
	})
}

// PkIsNil applies the IsNil predicate on the "pk" field.
func PkIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPk)))
	})
}

// PkNotNil applies the NotNil predicate on the "pk" field.
func PkNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPk)))
	})
}

// RequiredEQ applies the EQ predicate on the "required" field.
func RequiredEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequired), v))
	})
}

// RequiredNEQ applies the NEQ predicate on the "required" field.
func RequiredNEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequired), v))
	})
}

// RequiredIsNil applies the IsNil predicate on the "required" field.
func RequiredIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequired)))
	})
}

// RequiredNotNil applies the NotNil predicate on the "required" field.
func RequiredNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequired)))
	})
}

// SuperColumnEQ applies the EQ predicate on the "superColumn" field.
func SuperColumnEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuperColumn), v))
	})
}

// SuperColumnNEQ applies the NEQ predicate on the "superColumn" field.
func SuperColumnNEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuperColumn), v))
	})
}

// SuperColumnIsNil applies the IsNil predicate on the "superColumn" field.
func SuperColumnIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSuperColumn)))
	})
}

// SuperColumnNotNil applies the NotNil predicate on the "superColumn" field.
func SuperColumnNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSuperColumn)))
	})
}

// UsableColumnEQ applies the EQ predicate on the "usableColumn" field.
func UsableColumnEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsableColumn), v))
	})
}

// UsableColumnNEQ applies the NEQ predicate on the "usableColumn" field.
func UsableColumnNEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsableColumn), v))
	})
}

// UsableColumnIsNil applies the IsNil predicate on the "usableColumn" field.
func UsableColumnIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsableColumn)))
	})
}

// UsableColumnNotNil applies the NotNil predicate on the "usableColumn" field.
func UsableColumnNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsableColumn)))
	})
}

// IncrementEQ applies the EQ predicate on the "increment" field.
func IncrementEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIncrement), v))
	})
}

// IncrementNEQ applies the NEQ predicate on the "increment" field.
func IncrementNEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIncrement), v))
	})
}

// IncrementIsNil applies the IsNil predicate on the "increment" field.
func IncrementIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIncrement)))
	})
}

// IncrementNotNil applies the NotNil predicate on the "increment" field.
func IncrementNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIncrement)))
	})
}

// InsertEQ applies the EQ predicate on the "insert" field.
func InsertEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInsert), v))
	})
}

// InsertNEQ applies the NEQ predicate on the "insert" field.
func InsertNEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInsert), v))
	})
}

// InsertIsNil applies the IsNil predicate on the "insert" field.
func InsertIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInsert)))
	})
}

// InsertNotNil applies the NotNil predicate on the "insert" field.
func InsertNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInsert)))
	})
}

// EditEQ applies the EQ predicate on the "edit" field.
func EditEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEdit), v))
	})
}

// EditNEQ applies the NEQ predicate on the "edit" field.
func EditNEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEdit), v))
	})
}

// EditIsNil applies the IsNil predicate on the "edit" field.
func EditIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEdit)))
	})
}

// EditNotNil applies the NotNil predicate on the "edit" field.
func EditNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEdit)))
	})
}

// QueryEQ applies the EQ predicate on the "query" field.
func QueryEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuery), v))
	})
}

// QueryNEQ applies the NEQ predicate on the "query" field.
func QueryNEQ(v bool) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuery), v))
	})
}

// QueryIsNil applies the IsNil predicate on the "query" field.
func QueryIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuery)))
	})
}

// QueryNotNil applies the NotNil predicate on the "query" field.
func QueryNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuery)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// FkLabelNameEQ applies the EQ predicate on the "fkLabelName" field.
func FkLabelNameEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameNEQ applies the NEQ predicate on the "fkLabelName" field.
func FkLabelNameNEQ(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameIn applies the In predicate on the "fkLabelName" field.
func FkLabelNameIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFkLabelName), v...))
	})
}

// FkLabelNameNotIn applies the NotIn predicate on the "fkLabelName" field.
func FkLabelNameNotIn(vs ...string) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFkLabelName), v...))
	})
}

// FkLabelNameGT applies the GT predicate on the "fkLabelName" field.
func FkLabelNameGT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameGTE applies the GTE predicate on the "fkLabelName" field.
func FkLabelNameGTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameLT applies the LT predicate on the "fkLabelName" field.
func FkLabelNameLT(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameLTE applies the LTE predicate on the "fkLabelName" field.
func FkLabelNameLTE(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameContains applies the Contains predicate on the "fkLabelName" field.
func FkLabelNameContains(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameHasPrefix applies the HasPrefix predicate on the "fkLabelName" field.
func FkLabelNameHasPrefix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameHasSuffix applies the HasSuffix predicate on the "fkLabelName" field.
func FkLabelNameHasSuffix(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameIsNil applies the IsNil predicate on the "fkLabelName" field.
func FkLabelNameIsNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFkLabelName)))
	})
}

// FkLabelNameNotNil applies the NotNil predicate on the "fkLabelName" field.
func FkLabelNameNotNil() predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFkLabelName)))
	})
}

// FkLabelNameEqualFold applies the EqualFold predicate on the "fkLabelName" field.
func FkLabelNameEqualFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFkLabelName), v))
	})
}

// FkLabelNameContainsFold applies the ContainsFold predicate on the "fkLabelName" field.
func FkLabelNameContainsFold(v string) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFkLabelName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysColumns {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysColumns(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysColumns) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysColumns) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysColumns) predicate.SysColumns {
	return predicate.SysColumns(func(s *sql.Selector) {
		p(s.Not())
	})
}
