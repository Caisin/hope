// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/novelmsg"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelMsgCreate is the builder for creating a NovelMsg entity.
type NovelMsgCreate struct {
	config
	mutation *NovelMsgMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (nmc *NovelMsgCreate) SetTitle(s string) *NovelMsgCreate {
	nmc.mutation.SetTitle(s)
	return nmc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nmc *NovelMsgCreate) SetNillableTitle(s *string) *NovelMsgCreate {
	if s != nil {
		nmc.SetTitle(*s)
	}
	return nmc
}

// SetMsg sets the "msg" field.
func (nmc *NovelMsgCreate) SetMsg(s string) *NovelMsgCreate {
	nmc.mutation.SetMsg(s)
	return nmc
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (nmc *NovelMsgCreate) SetNillableMsg(s *string) *NovelMsgCreate {
	if s != nil {
		nmc.SetMsg(*s)
	}
	return nmc
}

// SetMsgType sets the "msgType" field.
func (nmc *NovelMsgCreate) SetMsgType(s string) *NovelMsgCreate {
	nmc.mutation.SetMsgType(s)
	return nmc
}

// SetNillableMsgType sets the "msgType" field if the given value is not nil.
func (nmc *NovelMsgCreate) SetNillableMsgType(s *string) *NovelMsgCreate {
	if s != nil {
		nmc.SetMsgType(*s)
	}
	return nmc
}

// SetStatus sets the "status" field.
func (nmc *NovelMsgCreate) SetStatus(b bool) *NovelMsgCreate {
	nmc.mutation.SetStatus(b)
	return nmc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (nmc *NovelMsgCreate) SetNillableStatus(b *bool) *NovelMsgCreate {
	if b != nil {
		nmc.SetStatus(*b)
	}
	return nmc
}

// SetCreatedAt sets the "createdAt" field.
func (nmc *NovelMsgCreate) SetCreatedAt(t time.Time) *NovelMsgCreate {
	nmc.mutation.SetCreatedAt(t)
	return nmc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (nmc *NovelMsgCreate) SetNillableCreatedAt(t *time.Time) *NovelMsgCreate {
	if t != nil {
		nmc.SetCreatedAt(*t)
	}
	return nmc
}

// SetUpdatedAt sets the "updatedAt" field.
func (nmc *NovelMsgCreate) SetUpdatedAt(t time.Time) *NovelMsgCreate {
	nmc.mutation.SetUpdatedAt(t)
	return nmc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (nmc *NovelMsgCreate) SetNillableUpdatedAt(t *time.Time) *NovelMsgCreate {
	if t != nil {
		nmc.SetUpdatedAt(*t)
	}
	return nmc
}

// SetCreateBy sets the "createBy" field.
func (nmc *NovelMsgCreate) SetCreateBy(i int64) *NovelMsgCreate {
	nmc.mutation.SetCreateBy(i)
	return nmc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (nmc *NovelMsgCreate) SetNillableCreateBy(i *int64) *NovelMsgCreate {
	if i != nil {
		nmc.SetCreateBy(*i)
	}
	return nmc
}

// SetUpdateBy sets the "updateBy" field.
func (nmc *NovelMsgCreate) SetUpdateBy(i int64) *NovelMsgCreate {
	nmc.mutation.SetUpdateBy(i)
	return nmc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (nmc *NovelMsgCreate) SetNillableUpdateBy(i *int64) *NovelMsgCreate {
	if i != nil {
		nmc.SetUpdateBy(*i)
	}
	return nmc
}

// SetTenantId sets the "tenantId" field.
func (nmc *NovelMsgCreate) SetTenantId(i int64) *NovelMsgCreate {
	nmc.mutation.SetTenantId(i)
	return nmc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (nmc *NovelMsgCreate) SetNillableTenantId(i *int64) *NovelMsgCreate {
	if i != nil {
		nmc.SetTenantId(*i)
	}
	return nmc
}

// Mutation returns the NovelMsgMutation object of the builder.
func (nmc *NovelMsgCreate) Mutation() *NovelMsgMutation {
	return nmc.mutation
}

// Save creates the NovelMsg in the database.
func (nmc *NovelMsgCreate) Save(ctx context.Context) (*NovelMsg, error) {
	var (
		err  error
		node *NovelMsg
	)
	nmc.defaults()
	if len(nmc.hooks) == 0 {
		if err = nmc.check(); err != nil {
			return nil, err
		}
		node, err = nmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelMsgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nmc.check(); err != nil {
				return nil, err
			}
			nmc.mutation = mutation
			if node, err = nmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nmc.hooks) - 1; i >= 0; i-- {
			if nmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nmc *NovelMsgCreate) SaveX(ctx context.Context) *NovelMsg {
	v, err := nmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nmc *NovelMsgCreate) Exec(ctx context.Context) error {
	_, err := nmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nmc *NovelMsgCreate) ExecX(ctx context.Context) {
	if err := nmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nmc *NovelMsgCreate) defaults() {
	if _, ok := nmc.mutation.CreatedAt(); !ok {
		v := novelmsg.DefaultCreatedAt()
		nmc.mutation.SetCreatedAt(v)
	}
	if _, ok := nmc.mutation.UpdatedAt(); !ok {
		v := novelmsg.DefaultUpdatedAt()
		nmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nmc.mutation.CreateBy(); !ok {
		v := novelmsg.DefaultCreateBy
		nmc.mutation.SetCreateBy(v)
	}
	if _, ok := nmc.mutation.UpdateBy(); !ok {
		v := novelmsg.DefaultUpdateBy
		nmc.mutation.SetUpdateBy(v)
	}
	if _, ok := nmc.mutation.TenantId(); !ok {
		v := novelmsg.DefaultTenantId
		nmc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nmc *NovelMsgCreate) check() error {
	if _, ok := nmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "NovelMsg.createdAt"`)}
	}
	if _, ok := nmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "NovelMsg.updatedAt"`)}
	}
	if _, ok := nmc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "NovelMsg.createBy"`)}
	}
	if _, ok := nmc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "NovelMsg.updateBy"`)}
	}
	if _, ok := nmc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "NovelMsg.tenantId"`)}
	}
	return nil
}

func (nmc *NovelMsgCreate) sqlSave(ctx context.Context) (*NovelMsg, error) {
	_node, _spec := nmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (nmc *NovelMsgCreate) createSpec() (*NovelMsg, *sqlgraph.CreateSpec) {
	var (
		_node = &NovelMsg{config: nmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: novelmsg.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelmsg.FieldID,
			},
		}
	)
	if value, ok := nmc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelmsg.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := nmc.mutation.Msg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelmsg.FieldMsg,
		})
		_node.Msg = value
	}
	if value, ok := nmc.mutation.MsgType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelmsg.FieldMsgType,
		})
		_node.MsgType = value
	}
	if value, ok := nmc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelmsg.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := nmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelmsg.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := nmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelmsg.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := nmc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelmsg.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := nmc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelmsg.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := nmc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelmsg.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// NovelMsgCreateBulk is the builder for creating many NovelMsg entities in bulk.
type NovelMsgCreateBulk struct {
	config
	builders []*NovelMsgCreate
}

// Save creates the NovelMsg entities in the database.
func (nmcb *NovelMsgCreateBulk) Save(ctx context.Context) ([]*NovelMsg, error) {
	specs := make([]*sqlgraph.CreateSpec, len(nmcb.builders))
	nodes := make([]*NovelMsg, len(nmcb.builders))
	mutators := make([]Mutator, len(nmcb.builders))
	for i := range nmcb.builders {
		func(i int, root context.Context) {
			builder := nmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NovelMsgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nmcb *NovelMsgCreateBulk) SaveX(ctx context.Context) []*NovelMsg {
	v, err := nmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nmcb *NovelMsgCreateBulk) Exec(ctx context.Context) error {
	_, err := nmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nmcb *NovelMsgCreateBulk) ExecX(ctx context.Context) {
	if err := nmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
