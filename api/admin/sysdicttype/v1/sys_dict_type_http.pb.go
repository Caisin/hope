// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysDictTypeHTTPServer interface {
	BatchDeleteSysDictType(context.Context, *SysDictTypeBatchDeleteReq) (*SysDictTypeDeleteReply, error)
	CreateSysDictType(context.Context, *SysDictTypeCreateReq) (*SysDictTypeCreateReply, error)
	DeleteSysDictType(context.Context, *SysDictTypeDeleteReq) (*SysDictTypeDeleteReply, error)
	GetSysDictType(context.Context, *SysDictTypeReq) (*SysDictTypeReply, error)
	GetSysDictTypePage(context.Context, *SysDictTypePageReq) (*SysDictTypePageReply, error)
	UpdateSysDictType(context.Context, *SysDictTypeUpdateReq) (*SysDictTypeUpdateReply, error)
}

func RegisterSysDictTypeHTTPServer(s *http.Server, srv SysDictTypeHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sys/dict/type/page", _SysDictType_GetSysDictTypePage0_HTTP_Handler(srv))
	r.GET("/v1/sys/dict/type/{id}", _SysDictType_GetSysDictType0_HTTP_Handler(srv))
	r.PUT("/v1/sys/dict/type/{id}", _SysDictType_UpdateSysDictType0_HTTP_Handler(srv))
	r.POST("/v1/sys/dict/type", _SysDictType_CreateSysDictType0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/dict/type/{id}", _SysDictType_DeleteSysDictType0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/dict/type", _SysDictType_BatchDeleteSysDictType0_HTTP_Handler(srv))
}

func _SysDictType_GetSysDictTypePage0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictTypePageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdicttype.v1.SysDictType/GetSysDictTypePage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysDictTypePage(ctx, req.(*SysDictTypePageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictTypePageReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictType_GetSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictTypeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdicttype.v1.SysDictType/GetSysDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysDictType(ctx, req.(*SysDictTypeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictTypeReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictType_UpdateSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictTypeUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdicttype.v1.SysDictType/UpdateSysDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysDictType(ctx, req.(*SysDictTypeUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictTypeUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictType_CreateSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictTypeCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdicttype.v1.SysDictType/CreateSysDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysDictType(ctx, req.(*SysDictTypeCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictTypeCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictType_DeleteSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictTypeDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdicttype.v1.SysDictType/DeleteSysDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysDictType(ctx, req.(*SysDictTypeDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictTypeDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysDictType_BatchDeleteSysDictType0_HTTP_Handler(srv SysDictTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysDictTypeBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/sysdicttype.v1.SysDictType/BatchDeleteSysDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysDictType(ctx, req.(*SysDictTypeBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysDictTypeDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysDictTypeHTTPClient interface {
	BatchDeleteSysDictType(ctx context.Context, req *SysDictTypeBatchDeleteReq, opts ...http.CallOption) (rsp *SysDictTypeDeleteReply, err error)
	CreateSysDictType(ctx context.Context, req *SysDictTypeCreateReq, opts ...http.CallOption) (rsp *SysDictTypeCreateReply, err error)
	DeleteSysDictType(ctx context.Context, req *SysDictTypeDeleteReq, opts ...http.CallOption) (rsp *SysDictTypeDeleteReply, err error)
	GetSysDictType(ctx context.Context, req *SysDictTypeReq, opts ...http.CallOption) (rsp *SysDictTypeReply, err error)
	GetSysDictTypePage(ctx context.Context, req *SysDictTypePageReq, opts ...http.CallOption) (rsp *SysDictTypePageReply, err error)
	UpdateSysDictType(ctx context.Context, req *SysDictTypeUpdateReq, opts ...http.CallOption) (rsp *SysDictTypeUpdateReply, err error)
}

type SysDictTypeHTTPClientImpl struct {
	cc *http.Client
}

func NewSysDictTypeHTTPClient(client *http.Client) SysDictTypeHTTPClient {
	return &SysDictTypeHTTPClientImpl{client}
}

func (c *SysDictTypeHTTPClientImpl) BatchDeleteSysDictType(ctx context.Context, in *SysDictTypeBatchDeleteReq, opts ...http.CallOption) (*SysDictTypeDeleteReply, error) {
	var out SysDictTypeDeleteReply
	pattern := "/v1/sys/dict/type"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdicttype.v1.SysDictType/BatchDeleteSysDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictTypeHTTPClientImpl) CreateSysDictType(ctx context.Context, in *SysDictTypeCreateReq, opts ...http.CallOption) (*SysDictTypeCreateReply, error) {
	var out SysDictTypeCreateReply
	pattern := "/v1/sys/dict/type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysdicttype.v1.SysDictType/CreateSysDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictTypeHTTPClientImpl) DeleteSysDictType(ctx context.Context, in *SysDictTypeDeleteReq, opts ...http.CallOption) (*SysDictTypeDeleteReply, error) {
	var out SysDictTypeDeleteReply
	pattern := "/v1/sys/dict/type/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdicttype.v1.SysDictType/DeleteSysDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictTypeHTTPClientImpl) GetSysDictType(ctx context.Context, in *SysDictTypeReq, opts ...http.CallOption) (*SysDictTypeReply, error) {
	var out SysDictTypeReply
	pattern := "/v1/sys/dict/type/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdicttype.v1.SysDictType/GetSysDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictTypeHTTPClientImpl) GetSysDictTypePage(ctx context.Context, in *SysDictTypePageReq, opts ...http.CallOption) (*SysDictTypePageReply, error) {
	var out SysDictTypePageReply
	pattern := "/v1/sys/dict/type/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/sysdicttype.v1.SysDictType/GetSysDictTypePage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysDictTypeHTTPClientImpl) UpdateSysDictType(ctx context.Context, in *SysDictTypeUpdateReq, opts ...http.CallOption) (*SysDictTypeUpdateReply, error) {
	var out SysDictTypeUpdateReply
	pattern := "/v1/sys/dict/type/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/sysdicttype.v1.SysDictType/UpdateSysDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
