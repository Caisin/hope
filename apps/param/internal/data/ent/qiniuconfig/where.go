// Code generated by entc, DO NOT EDIT.

package qiniuconfig

import (
	"hope/apps/param/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AccessKey applies equality check predicate on the "accessKey" field. It's identical to AccessKeyEQ.
func AccessKey(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessKey), v))
	})
}

// Bucket applies equality check predicate on the "bucket" field. It's identical to BucketEQ.
func Bucket(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBucket), v))
	})
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// SecretKey applies equality check predicate on the "secretKey" field. It's identical to SecretKeyEQ.
func SecretKey(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecretKey), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Zone applies equality check predicate on the "zone" field. It's identical to ZoneEQ.
func Zone(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZone), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// AccessKeyEQ applies the EQ predicate on the "accessKey" field.
func AccessKeyEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccessKey), v))
	})
}

// AccessKeyNEQ applies the NEQ predicate on the "accessKey" field.
func AccessKeyNEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccessKey), v))
	})
}

// AccessKeyIn applies the In predicate on the "accessKey" field.
func AccessKeyIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccessKey), v...))
	})
}

// AccessKeyNotIn applies the NotIn predicate on the "accessKey" field.
func AccessKeyNotIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccessKey), v...))
	})
}

// AccessKeyGT applies the GT predicate on the "accessKey" field.
func AccessKeyGT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccessKey), v))
	})
}

// AccessKeyGTE applies the GTE predicate on the "accessKey" field.
func AccessKeyGTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccessKey), v))
	})
}

// AccessKeyLT applies the LT predicate on the "accessKey" field.
func AccessKeyLT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccessKey), v))
	})
}

// AccessKeyLTE applies the LTE predicate on the "accessKey" field.
func AccessKeyLTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccessKey), v))
	})
}

// AccessKeyContains applies the Contains predicate on the "accessKey" field.
func AccessKeyContains(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccessKey), v))
	})
}

// AccessKeyHasPrefix applies the HasPrefix predicate on the "accessKey" field.
func AccessKeyHasPrefix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccessKey), v))
	})
}

// AccessKeyHasSuffix applies the HasSuffix predicate on the "accessKey" field.
func AccessKeyHasSuffix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccessKey), v))
	})
}

// AccessKeyIsNil applies the IsNil predicate on the "accessKey" field.
func AccessKeyIsNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccessKey)))
	})
}

// AccessKeyNotNil applies the NotNil predicate on the "accessKey" field.
func AccessKeyNotNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccessKey)))
	})
}

// AccessKeyEqualFold applies the EqualFold predicate on the "accessKey" field.
func AccessKeyEqualFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccessKey), v))
	})
}

// AccessKeyContainsFold applies the ContainsFold predicate on the "accessKey" field.
func AccessKeyContainsFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccessKey), v))
	})
}

// BucketEQ applies the EQ predicate on the "bucket" field.
func BucketEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBucket), v))
	})
}

// BucketNEQ applies the NEQ predicate on the "bucket" field.
func BucketNEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBucket), v))
	})
}

// BucketIn applies the In predicate on the "bucket" field.
func BucketIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBucket), v...))
	})
}

// BucketNotIn applies the NotIn predicate on the "bucket" field.
func BucketNotIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBucket), v...))
	})
}

// BucketGT applies the GT predicate on the "bucket" field.
func BucketGT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBucket), v))
	})
}

// BucketGTE applies the GTE predicate on the "bucket" field.
func BucketGTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBucket), v))
	})
}

// BucketLT applies the LT predicate on the "bucket" field.
func BucketLT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBucket), v))
	})
}

// BucketLTE applies the LTE predicate on the "bucket" field.
func BucketLTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBucket), v))
	})
}

// BucketContains applies the Contains predicate on the "bucket" field.
func BucketContains(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBucket), v))
	})
}

// BucketHasPrefix applies the HasPrefix predicate on the "bucket" field.
func BucketHasPrefix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBucket), v))
	})
}

// BucketHasSuffix applies the HasSuffix predicate on the "bucket" field.
func BucketHasSuffix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBucket), v))
	})
}

// BucketIsNil applies the IsNil predicate on the "bucket" field.
func BucketIsNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBucket)))
	})
}

// BucketNotNil applies the NotNil predicate on the "bucket" field.
func BucketNotNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBucket)))
	})
}

// BucketEqualFold applies the EqualFold predicate on the "bucket" field.
func BucketEqualFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBucket), v))
	})
}

// BucketContainsFold applies the ContainsFold predicate on the "bucket" field.
func BucketContainsFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBucket), v))
	})
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHost), v))
	})
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHost), v))
	})
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHost), v...))
	})
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHost), v...))
	})
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHost), v))
	})
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHost), v))
	})
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHost), v))
	})
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHost), v))
	})
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHost), v))
	})
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHost), v))
	})
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHost), v))
	})
}

// HostIsNil applies the IsNil predicate on the "host" field.
func HostIsNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHost)))
	})
}

// HostNotNil applies the NotNil predicate on the "host" field.
func HostNotNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHost)))
	})
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHost), v))
	})
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHost), v))
	})
}

// SecretKeyEQ applies the EQ predicate on the "secretKey" field.
func SecretKeyEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecretKey), v))
	})
}

// SecretKeyNEQ applies the NEQ predicate on the "secretKey" field.
func SecretKeyNEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecretKey), v))
	})
}

// SecretKeyIn applies the In predicate on the "secretKey" field.
func SecretKeyIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSecretKey), v...))
	})
}

// SecretKeyNotIn applies the NotIn predicate on the "secretKey" field.
func SecretKeyNotIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSecretKey), v...))
	})
}

// SecretKeyGT applies the GT predicate on the "secretKey" field.
func SecretKeyGT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecretKey), v))
	})
}

// SecretKeyGTE applies the GTE predicate on the "secretKey" field.
func SecretKeyGTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecretKey), v))
	})
}

// SecretKeyLT applies the LT predicate on the "secretKey" field.
func SecretKeyLT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecretKey), v))
	})
}

// SecretKeyLTE applies the LTE predicate on the "secretKey" field.
func SecretKeyLTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecretKey), v))
	})
}

// SecretKeyContains applies the Contains predicate on the "secretKey" field.
func SecretKeyContains(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSecretKey), v))
	})
}

// SecretKeyHasPrefix applies the HasPrefix predicate on the "secretKey" field.
func SecretKeyHasPrefix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSecretKey), v))
	})
}

// SecretKeyHasSuffix applies the HasSuffix predicate on the "secretKey" field.
func SecretKeyHasSuffix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSecretKey), v))
	})
}

// SecretKeyIsNil applies the IsNil predicate on the "secretKey" field.
func SecretKeyIsNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSecretKey)))
	})
}

// SecretKeyNotNil applies the NotNil predicate on the "secretKey" field.
func SecretKeyNotNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSecretKey)))
	})
}

// SecretKeyEqualFold applies the EqualFold predicate on the "secretKey" field.
func SecretKeyEqualFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSecretKey), v))
	})
}

// SecretKeyContainsFold applies the ContainsFold predicate on the "secretKey" field.
func SecretKeyContainsFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSecretKey), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// ZoneEQ applies the EQ predicate on the "zone" field.
func ZoneEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZone), v))
	})
}

// ZoneNEQ applies the NEQ predicate on the "zone" field.
func ZoneNEQ(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZone), v))
	})
}

// ZoneIn applies the In predicate on the "zone" field.
func ZoneIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldZone), v...))
	})
}

// ZoneNotIn applies the NotIn predicate on the "zone" field.
func ZoneNotIn(vs ...string) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldZone), v...))
	})
}

// ZoneGT applies the GT predicate on the "zone" field.
func ZoneGT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZone), v))
	})
}

// ZoneGTE applies the GTE predicate on the "zone" field.
func ZoneGTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZone), v))
	})
}

// ZoneLT applies the LT predicate on the "zone" field.
func ZoneLT(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZone), v))
	})
}

// ZoneLTE applies the LTE predicate on the "zone" field.
func ZoneLTE(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZone), v))
	})
}

// ZoneContains applies the Contains predicate on the "zone" field.
func ZoneContains(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldZone), v))
	})
}

// ZoneHasPrefix applies the HasPrefix predicate on the "zone" field.
func ZoneHasPrefix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldZone), v))
	})
}

// ZoneHasSuffix applies the HasSuffix predicate on the "zone" field.
func ZoneHasSuffix(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldZone), v))
	})
}

// ZoneIsNil applies the IsNil predicate on the "zone" field.
func ZoneIsNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldZone)))
	})
}

// ZoneNotNil applies the NotNil predicate on the "zone" field.
func ZoneNotNil() predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldZone)))
	})
}

// ZoneEqualFold applies the EqualFold predicate on the "zone" field.
func ZoneEqualFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldZone), v))
	})
}

// ZoneContainsFold applies the ContainsFold predicate on the "zone" field.
func ZoneContainsFold(v string) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldZone), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.QiniuConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QiniuConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QiniuConfig) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QiniuConfig) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QiniuConfig) predicate.QiniuConfig {
	return predicate.QiniuConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
