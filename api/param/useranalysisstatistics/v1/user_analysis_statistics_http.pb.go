// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UserAnalysisStatisticsHTTPServer interface {
	BatchDeleteUserAnalysisStatistics(context.Context, *UserAnalysisStatisticsBatchDeleteReq) (*UserAnalysisStatisticsDeleteReply, error)
	CreateUserAnalysisStatistics(context.Context, *UserAnalysisStatisticsCreateReq) (*UserAnalysisStatisticsCreateReply, error)
	DeleteUserAnalysisStatistics(context.Context, *UserAnalysisStatisticsDeleteReq) (*UserAnalysisStatisticsDeleteReply, error)
	GetPageUserAnalysisStatistics(context.Context, *UserAnalysisStatisticsPageReq) (*UserAnalysisStatisticsPageReply, error)
	GetUserAnalysisStatistics(context.Context, *UserAnalysisStatisticsReq) (*UserAnalysisStatisticsReply, error)
	UpdateUserAnalysisStatistics(context.Context, *UserAnalysisStatisticsUpdateReq) (*UserAnalysisStatisticsUpdateReply, error)
}

func RegisterUserAnalysisStatisticsHTTPServer(s *http.Server, srv UserAnalysisStatisticsHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/useranalysisstatistics/page", _UserAnalysisStatistics_GetPageUserAnalysisStatistics0_HTTP_Handler(srv))
	r.GET("/v1/useranalysisstatistics/{id}", _UserAnalysisStatistics_GetUserAnalysisStatistics0_HTTP_Handler(srv))
	r.PUT("/v1/useranalysisstatistics/{id}", _UserAnalysisStatistics_UpdateUserAnalysisStatistics0_HTTP_Handler(srv))
	r.POST("/v1/useranalysisstatistics", _UserAnalysisStatistics_CreateUserAnalysisStatistics0_HTTP_Handler(srv))
	r.DELETE("/v1/useranalysisstatistics/{id}", _UserAnalysisStatistics_DeleteUserAnalysisStatistics0_HTTP_Handler(srv))
	r.DELETE("/v1/useranalysisstatistics", _UserAnalysisStatistics_BatchDeleteUserAnalysisStatistics0_HTTP_Handler(srv))
}

func _UserAnalysisStatistics_GetPageUserAnalysisStatistics0_HTTP_Handler(srv UserAnalysisStatisticsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAnalysisStatisticsPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/useranalysisstatistics.v1.UserAnalysisStatistics/GetPageUserAnalysisStatistics")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageUserAnalysisStatistics(ctx, req.(*UserAnalysisStatisticsPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserAnalysisStatisticsPageReply)
		return ctx.Result(200, reply)
	}
}

func _UserAnalysisStatistics_GetUserAnalysisStatistics0_HTTP_Handler(srv UserAnalysisStatisticsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAnalysisStatisticsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/useranalysisstatistics.v1.UserAnalysisStatistics/GetUserAnalysisStatistics")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserAnalysisStatistics(ctx, req.(*UserAnalysisStatisticsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserAnalysisStatisticsReply)
		return ctx.Result(200, reply)
	}
}

func _UserAnalysisStatistics_UpdateUserAnalysisStatistics0_HTTP_Handler(srv UserAnalysisStatisticsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAnalysisStatisticsUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/useranalysisstatistics.v1.UserAnalysisStatistics/UpdateUserAnalysisStatistics")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserAnalysisStatistics(ctx, req.(*UserAnalysisStatisticsUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserAnalysisStatisticsUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _UserAnalysisStatistics_CreateUserAnalysisStatistics0_HTTP_Handler(srv UserAnalysisStatisticsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAnalysisStatisticsCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/useranalysisstatistics.v1.UserAnalysisStatistics/CreateUserAnalysisStatistics")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserAnalysisStatistics(ctx, req.(*UserAnalysisStatisticsCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserAnalysisStatisticsCreateReply)
		return ctx.Result(200, reply)
	}
}

func _UserAnalysisStatistics_DeleteUserAnalysisStatistics0_HTTP_Handler(srv UserAnalysisStatisticsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAnalysisStatisticsDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/useranalysisstatistics.v1.UserAnalysisStatistics/DeleteUserAnalysisStatistics")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserAnalysisStatistics(ctx, req.(*UserAnalysisStatisticsDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserAnalysisStatisticsDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _UserAnalysisStatistics_BatchDeleteUserAnalysisStatistics0_HTTP_Handler(srv UserAnalysisStatisticsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserAnalysisStatisticsBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/useranalysisstatistics.v1.UserAnalysisStatistics/BatchDeleteUserAnalysisStatistics")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteUserAnalysisStatistics(ctx, req.(*UserAnalysisStatisticsBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserAnalysisStatisticsDeleteReply)
		return ctx.Result(200, reply)
	}
}

type UserAnalysisStatisticsHTTPClient interface {
	BatchDeleteUserAnalysisStatistics(ctx context.Context, req *UserAnalysisStatisticsBatchDeleteReq, opts ...http.CallOption) (rsp *UserAnalysisStatisticsDeleteReply, err error)
	CreateUserAnalysisStatistics(ctx context.Context, req *UserAnalysisStatisticsCreateReq, opts ...http.CallOption) (rsp *UserAnalysisStatisticsCreateReply, err error)
	DeleteUserAnalysisStatistics(ctx context.Context, req *UserAnalysisStatisticsDeleteReq, opts ...http.CallOption) (rsp *UserAnalysisStatisticsDeleteReply, err error)
	GetPageUserAnalysisStatistics(ctx context.Context, req *UserAnalysisStatisticsPageReq, opts ...http.CallOption) (rsp *UserAnalysisStatisticsPageReply, err error)
	GetUserAnalysisStatistics(ctx context.Context, req *UserAnalysisStatisticsReq, opts ...http.CallOption) (rsp *UserAnalysisStatisticsReply, err error)
	UpdateUserAnalysisStatistics(ctx context.Context, req *UserAnalysisStatisticsUpdateReq, opts ...http.CallOption) (rsp *UserAnalysisStatisticsUpdateReply, err error)
}

type UserAnalysisStatisticsHTTPClientImpl struct {
	cc *http.Client
}

func NewUserAnalysisStatisticsHTTPClient(client *http.Client) UserAnalysisStatisticsHTTPClient {
	return &UserAnalysisStatisticsHTTPClientImpl{client}
}

func (c *UserAnalysisStatisticsHTTPClientImpl) BatchDeleteUserAnalysisStatistics(ctx context.Context, in *UserAnalysisStatisticsBatchDeleteReq, opts ...http.CallOption) (*UserAnalysisStatisticsDeleteReply, error) {
	var out UserAnalysisStatisticsDeleteReply
	pattern := "/v1/useranalysisstatistics"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/useranalysisstatistics.v1.UserAnalysisStatistics/BatchDeleteUserAnalysisStatistics"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserAnalysisStatisticsHTTPClientImpl) CreateUserAnalysisStatistics(ctx context.Context, in *UserAnalysisStatisticsCreateReq, opts ...http.CallOption) (*UserAnalysisStatisticsCreateReply, error) {
	var out UserAnalysisStatisticsCreateReply
	pattern := "/v1/useranalysisstatistics"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/useranalysisstatistics.v1.UserAnalysisStatistics/CreateUserAnalysisStatistics"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserAnalysisStatisticsHTTPClientImpl) DeleteUserAnalysisStatistics(ctx context.Context, in *UserAnalysisStatisticsDeleteReq, opts ...http.CallOption) (*UserAnalysisStatisticsDeleteReply, error) {
	var out UserAnalysisStatisticsDeleteReply
	pattern := "/v1/useranalysisstatistics/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/useranalysisstatistics.v1.UserAnalysisStatistics/DeleteUserAnalysisStatistics"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserAnalysisStatisticsHTTPClientImpl) GetPageUserAnalysisStatistics(ctx context.Context, in *UserAnalysisStatisticsPageReq, opts ...http.CallOption) (*UserAnalysisStatisticsPageReply, error) {
	var out UserAnalysisStatisticsPageReply
	pattern := "/v1/useranalysisstatistics/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/useranalysisstatistics.v1.UserAnalysisStatistics/GetPageUserAnalysisStatistics"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserAnalysisStatisticsHTTPClientImpl) GetUserAnalysisStatistics(ctx context.Context, in *UserAnalysisStatisticsReq, opts ...http.CallOption) (*UserAnalysisStatisticsReply, error) {
	var out UserAnalysisStatisticsReply
	pattern := "/v1/useranalysisstatistics/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/useranalysisstatistics.v1.UserAnalysisStatistics/GetUserAnalysisStatistics"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserAnalysisStatisticsHTTPClientImpl) UpdateUserAnalysisStatistics(ctx context.Context, in *UserAnalysisStatisticsUpdateReq, opts ...http.CallOption) (*UserAnalysisStatisticsUpdateReply, error) {
	var out UserAnalysisStatisticsUpdateReply
	pattern := "/v1/useranalysisstatistics/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/useranalysisstatistics.v1.UserAnalysisStatistics/UpdateUserAnalysisStatistics"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
