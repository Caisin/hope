// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/userevent"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserEventCreate is the builder for creating a UserEvent entity.
type UserEventCreate struct {
	config
	mutation *UserEventMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (uec *UserEventCreate) SetUserId(i int64) *UserEventCreate {
	uec.mutation.SetUserId(i)
	return uec
}

// SetEventType sets the "eventType" field.
func (uec *UserEventCreate) SetEventType(s string) *UserEventCreate {
	uec.mutation.SetEventType(s)
	return uec
}

// SetNillableEventType sets the "eventType" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableEventType(s *string) *UserEventCreate {
	if s != nil {
		uec.SetEventType(*s)
	}
	return uec
}

// SetNovelId sets the "novelId" field.
func (uec *UserEventCreate) SetNovelId(i int64) *UserEventCreate {
	uec.mutation.SetNovelId(i)
	return uec
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableNovelId(i *int64) *UserEventCreate {
	if i != nil {
		uec.SetNovelId(*i)
	}
	return uec
}

// SetChapterId sets the "chapterId" field.
func (uec *UserEventCreate) SetChapterId(i int64) *UserEventCreate {
	uec.mutation.SetChapterId(i)
	return uec
}

// SetNillableChapterId sets the "chapterId" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableChapterId(i *int64) *UserEventCreate {
	if i != nil {
		uec.SetChapterId(*i)
	}
	return uec
}

// SetCoin sets the "coin" field.
func (uec *UserEventCreate) SetCoin(i int64) *UserEventCreate {
	uec.mutation.SetCoin(i)
	return uec
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableCoin(i *int64) *UserEventCreate {
	if i != nil {
		uec.SetCoin(*i)
	}
	return uec
}

// SetCoupon sets the "coupon" field.
func (uec *UserEventCreate) SetCoupon(i int64) *UserEventCreate {
	uec.mutation.SetCoupon(i)
	return uec
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableCoupon(i *int64) *UserEventCreate {
	if i != nil {
		uec.SetCoupon(*i)
	}
	return uec
}

// SetMoney sets the "money" field.
func (uec *UserEventCreate) SetMoney(i int64) *UserEventCreate {
	uec.mutation.SetMoney(i)
	return uec
}

// SetNillableMoney sets the "money" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableMoney(i *int64) *UserEventCreate {
	if i != nil {
		uec.SetMoney(*i)
	}
	return uec
}

// SetKeyword sets the "keyword" field.
func (uec *UserEventCreate) SetKeyword(s string) *UserEventCreate {
	uec.mutation.SetKeyword(s)
	return uec
}

// SetNillableKeyword sets the "keyword" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableKeyword(s *string) *UserEventCreate {
	if s != nil {
		uec.SetKeyword(*s)
	}
	return uec
}

// SetCreatedAt sets the "createdAt" field.
func (uec *UserEventCreate) SetCreatedAt(t time.Time) *UserEventCreate {
	uec.mutation.SetCreatedAt(t)
	return uec
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableCreatedAt(t *time.Time) *UserEventCreate {
	if t != nil {
		uec.SetCreatedAt(*t)
	}
	return uec
}

// SetUpdatedAt sets the "updatedAt" field.
func (uec *UserEventCreate) SetUpdatedAt(t time.Time) *UserEventCreate {
	uec.mutation.SetUpdatedAt(t)
	return uec
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableUpdatedAt(t *time.Time) *UserEventCreate {
	if t != nil {
		uec.SetUpdatedAt(*t)
	}
	return uec
}

// SetCreateBy sets the "createBy" field.
func (uec *UserEventCreate) SetCreateBy(i int64) *UserEventCreate {
	uec.mutation.SetCreateBy(i)
	return uec
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableCreateBy(i *int64) *UserEventCreate {
	if i != nil {
		uec.SetCreateBy(*i)
	}
	return uec
}

// SetUpdateBy sets the "updateBy" field.
func (uec *UserEventCreate) SetUpdateBy(i int64) *UserEventCreate {
	uec.mutation.SetUpdateBy(i)
	return uec
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableUpdateBy(i *int64) *UserEventCreate {
	if i != nil {
		uec.SetUpdateBy(*i)
	}
	return uec
}

// SetTenantId sets the "tenantId" field.
func (uec *UserEventCreate) SetTenantId(i int64) *UserEventCreate {
	uec.mutation.SetTenantId(i)
	return uec
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (uec *UserEventCreate) SetNillableTenantId(i *int64) *UserEventCreate {
	if i != nil {
		uec.SetTenantId(*i)
	}
	return uec
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (uec *UserEventCreate) SetUserID(id int64) *UserEventCreate {
	uec.mutation.SetUserID(id)
	return uec
}

// SetUser sets the "user" edge to the SocialUser entity.
func (uec *UserEventCreate) SetUser(s *SocialUser) *UserEventCreate {
	return uec.SetUserID(s.ID)
}

// Mutation returns the UserEventMutation object of the builder.
func (uec *UserEventCreate) Mutation() *UserEventMutation {
	return uec.mutation
}

// Save creates the UserEvent in the database.
func (uec *UserEventCreate) Save(ctx context.Context) (*UserEvent, error) {
	var (
		err  error
		node *UserEvent
	)
	uec.defaults()
	if len(uec.hooks) == 0 {
		if err = uec.check(); err != nil {
			return nil, err
		}
		node, err = uec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uec.check(); err != nil {
				return nil, err
			}
			uec.mutation = mutation
			if node, err = uec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uec.hooks) - 1; i >= 0; i-- {
			if uec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uec *UserEventCreate) SaveX(ctx context.Context) *UserEvent {
	v, err := uec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uec *UserEventCreate) Exec(ctx context.Context) error {
	_, err := uec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uec *UserEventCreate) ExecX(ctx context.Context) {
	if err := uec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uec *UserEventCreate) defaults() {
	if _, ok := uec.mutation.CreatedAt(); !ok {
		v := userevent.DefaultCreatedAt()
		uec.mutation.SetCreatedAt(v)
	}
	if _, ok := uec.mutation.UpdatedAt(); !ok {
		v := userevent.DefaultUpdatedAt()
		uec.mutation.SetUpdatedAt(v)
	}
	if _, ok := uec.mutation.CreateBy(); !ok {
		v := userevent.DefaultCreateBy
		uec.mutation.SetCreateBy(v)
	}
	if _, ok := uec.mutation.UpdateBy(); !ok {
		v := userevent.DefaultUpdateBy
		uec.mutation.SetUpdateBy(v)
	}
	if _, ok := uec.mutation.TenantId(); !ok {
		v := userevent.DefaultTenantId
		uec.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uec *UserEventCreate) check() error {
	if _, ok := uec.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "UserEvent.userId"`)}
	}
	if _, ok := uec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "UserEvent.createdAt"`)}
	}
	if _, ok := uec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "UserEvent.updatedAt"`)}
	}
	if _, ok := uec.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "UserEvent.createBy"`)}
	}
	if _, ok := uec.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "UserEvent.updateBy"`)}
	}
	if _, ok := uec.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "UserEvent.tenantId"`)}
	}
	if _, ok := uec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserEvent.user"`)}
	}
	return nil
}

func (uec *UserEventCreate) sqlSave(ctx context.Context) (*UserEvent, error) {
	_node, _spec := uec.createSpec()
	if err := sqlgraph.CreateNode(ctx, uec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (uec *UserEventCreate) createSpec() (*UserEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &UserEvent{config: uec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userevent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: userevent.FieldID,
			},
		}
	)
	if value, ok := uec.mutation.EventType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userevent.FieldEventType,
		})
		_node.EventType = value
	}
	if value, ok := uec.mutation.NovelId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldNovelId,
		})
		_node.NovelId = value
	}
	if value, ok := uec.mutation.ChapterId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldChapterId,
		})
		_node.ChapterId = value
	}
	if value, ok := uec.mutation.Coin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoin,
		})
		_node.Coin = value
	}
	if value, ok := uec.mutation.Coupon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCoupon,
		})
		_node.Coupon = value
	}
	if value, ok := uec.mutation.Money(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldMoney,
		})
		_node.Money = value
	}
	if value, ok := uec.mutation.Keyword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userevent.FieldKeyword,
		})
		_node.Keyword = value
	}
	if value, ok := uec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userevent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userevent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := uec.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := uec.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := uec.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userevent.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := uec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userevent.UserTable,
			Columns: []string{userevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserEventCreateBulk is the builder for creating many UserEvent entities in bulk.
type UserEventCreateBulk struct {
	config
	builders []*UserEventCreate
}

// Save creates the UserEvent entities in the database.
func (uecb *UserEventCreateBulk) Save(ctx context.Context) ([]*UserEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uecb.builders))
	nodes := make([]*UserEvent, len(uecb.builders))
	mutators := make([]Mutator, len(uecb.builders))
	for i := range uecb.builders {
		func(i int, root context.Context) {
			builder := uecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uecb *UserEventCreateBulk) SaveX(ctx context.Context) []*UserEvent {
	v, err := uecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uecb *UserEventCreateBulk) Exec(ctx context.Context) error {
	_, err := uecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uecb *UserEventCreateBulk) ExecX(ctx context.Context) {
	if err := uecb.Exec(ctx); err != nil {
		panic(err)
	}
}
