// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdChannelHTTPServer interface {
	BatchDeleteAdChannel(context.Context, *AdChannelBatchDeleteReq) (*AdChannelDeleteReply, error)
	CreateAdChannel(context.Context, *AdChannelCreateReq) (*AdChannelCreateReply, error)
	DeleteAdChannel(context.Context, *AdChannelDeleteReq) (*AdChannelDeleteReply, error)
	GetAdChannel(context.Context, *AdChannelReq) (*AdChannelReply, error)
	GetAdChannelPage(context.Context, *AdChannelPageReq) (*AdChannelPageReply, error)
	UpdateAdChannel(context.Context, *AdChannelUpdateReq) (*AdChannelUpdateReply, error)
}

func RegisterAdChannelHTTPServer(s *http.Server, srv AdChannelHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/ad/channel/page", _AdChannel_GetAdChannelPage0_HTTP_Handler(srv))
	r.GET("/v1/ad/channel/{id}", _AdChannel_GetAdChannel0_HTTP_Handler(srv))
	r.PUT("/v1/ad/channel/{id}", _AdChannel_UpdateAdChannel0_HTTP_Handler(srv))
	r.POST("/v1/ad/channel", _AdChannel_CreateAdChannel0_HTTP_Handler(srv))
	r.DELETE("/v1/ad/channel/{id}", _AdChannel_DeleteAdChannel0_HTTP_Handler(srv))
	r.DELETE("/v1/ad/channel", _AdChannel_BatchDeleteAdChannel0_HTTP_Handler(srv))
}

func _AdChannel_GetAdChannelPage0_HTTP_Handler(srv AdChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdChannelPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/adchannel.v1.AdChannel/GetAdChannelPage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdChannelPage(ctx, req.(*AdChannelPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdChannelPageReply)
		return ctx.Result(200, reply)
	}
}

func _AdChannel_GetAdChannel0_HTTP_Handler(srv AdChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdChannelReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/adchannel.v1.AdChannel/GetAdChannel")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdChannel(ctx, req.(*AdChannelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdChannelReply)
		return ctx.Result(200, reply)
	}
}

func _AdChannel_UpdateAdChannel0_HTTP_Handler(srv AdChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdChannelUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/adchannel.v1.AdChannel/UpdateAdChannel")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdChannel(ctx, req.(*AdChannelUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdChannelUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _AdChannel_CreateAdChannel0_HTTP_Handler(srv AdChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdChannelCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/adchannel.v1.AdChannel/CreateAdChannel")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAdChannel(ctx, req.(*AdChannelCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdChannelCreateReply)
		return ctx.Result(200, reply)
	}
}

func _AdChannel_DeleteAdChannel0_HTTP_Handler(srv AdChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdChannelDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/adchannel.v1.AdChannel/DeleteAdChannel")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdChannel(ctx, req.(*AdChannelDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdChannelDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _AdChannel_BatchDeleteAdChannel0_HTTP_Handler(srv AdChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdChannelBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/adchannel.v1.AdChannel/BatchDeleteAdChannel")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteAdChannel(ctx, req.(*AdChannelBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdChannelDeleteReply)
		return ctx.Result(200, reply)
	}
}

type AdChannelHTTPClient interface {
	BatchDeleteAdChannel(ctx context.Context, req *AdChannelBatchDeleteReq, opts ...http.CallOption) (rsp *AdChannelDeleteReply, err error)
	CreateAdChannel(ctx context.Context, req *AdChannelCreateReq, opts ...http.CallOption) (rsp *AdChannelCreateReply, err error)
	DeleteAdChannel(ctx context.Context, req *AdChannelDeleteReq, opts ...http.CallOption) (rsp *AdChannelDeleteReply, err error)
	GetAdChannel(ctx context.Context, req *AdChannelReq, opts ...http.CallOption) (rsp *AdChannelReply, err error)
	GetAdChannelPage(ctx context.Context, req *AdChannelPageReq, opts ...http.CallOption) (rsp *AdChannelPageReply, err error)
	UpdateAdChannel(ctx context.Context, req *AdChannelUpdateReq, opts ...http.CallOption) (rsp *AdChannelUpdateReply, err error)
}

type AdChannelHTTPClientImpl struct {
	cc *http.Client
}

func NewAdChannelHTTPClient(client *http.Client) AdChannelHTTPClient {
	return &AdChannelHTTPClientImpl{client}
}

func (c *AdChannelHTTPClientImpl) BatchDeleteAdChannel(ctx context.Context, in *AdChannelBatchDeleteReq, opts ...http.CallOption) (*AdChannelDeleteReply, error) {
	var out AdChannelDeleteReply
	pattern := "/v1/ad/channel"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/adchannel.v1.AdChannel/BatchDeleteAdChannel"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdChannelHTTPClientImpl) CreateAdChannel(ctx context.Context, in *AdChannelCreateReq, opts ...http.CallOption) (*AdChannelCreateReply, error) {
	var out AdChannelCreateReply
	pattern := "/v1/ad/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/adchannel.v1.AdChannel/CreateAdChannel"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdChannelHTTPClientImpl) DeleteAdChannel(ctx context.Context, in *AdChannelDeleteReq, opts ...http.CallOption) (*AdChannelDeleteReply, error) {
	var out AdChannelDeleteReply
	pattern := "/v1/ad/channel/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/adchannel.v1.AdChannel/DeleteAdChannel"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdChannelHTTPClientImpl) GetAdChannel(ctx context.Context, in *AdChannelReq, opts ...http.CallOption) (*AdChannelReply, error) {
	var out AdChannelReply
	pattern := "/v1/ad/channel/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/adchannel.v1.AdChannel/GetAdChannel"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdChannelHTTPClientImpl) GetAdChannelPage(ctx context.Context, in *AdChannelPageReq, opts ...http.CallOption) (*AdChannelPageReply, error) {
	var out AdChannelPageReply
	pattern := "/v1/ad/channel/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/adchannel.v1.AdChannel/GetAdChannelPage"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdChannelHTTPClientImpl) UpdateAdChannel(ctx context.Context, in *AdChannelUpdateReq, opts ...http.CallOption) (*AdChannelUpdateReply, error) {
	var out AdChannelUpdateReply
	pattern := "/v1/ad/channel/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/adchannel.v1.AdChannel/UpdateAdChannel"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
