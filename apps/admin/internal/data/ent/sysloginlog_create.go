// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/sysloginlog"
	"hope/apps/admin/internal/data/ent/sysuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysLoginLogCreate is the builder for creating a SysLoginLog entity.
type SysLoginLogCreate struct {
	config
	mutation *SysLoginLogMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (sllc *SysLoginLogCreate) SetStatus(s string) *SysLoginLogCreate {
	sllc.mutation.SetStatus(s)
	return sllc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableStatus(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetStatus(*s)
	}
	return sllc
}

// SetIpaddr sets the "ipaddr" field.
func (sllc *SysLoginLogCreate) SetIpaddr(s string) *SysLoginLogCreate {
	sllc.mutation.SetIpaddr(s)
	return sllc
}

// SetNillableIpaddr sets the "ipaddr" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableIpaddr(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetIpaddr(*s)
	}
	return sllc
}

// SetLoginLocation sets the "loginLocation" field.
func (sllc *SysLoginLogCreate) SetLoginLocation(s string) *SysLoginLogCreate {
	sllc.mutation.SetLoginLocation(s)
	return sllc
}

// SetNillableLoginLocation sets the "loginLocation" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableLoginLocation(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetLoginLocation(*s)
	}
	return sllc
}

// SetBrowser sets the "browser" field.
func (sllc *SysLoginLogCreate) SetBrowser(s string) *SysLoginLogCreate {
	sllc.mutation.SetBrowser(s)
	return sllc
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableBrowser(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetBrowser(*s)
	}
	return sllc
}

// SetOs sets the "os" field.
func (sllc *SysLoginLogCreate) SetOs(s string) *SysLoginLogCreate {
	sllc.mutation.SetOs(s)
	return sllc
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableOs(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetOs(*s)
	}
	return sllc
}

// SetPlatform sets the "platform" field.
func (sllc *SysLoginLogCreate) SetPlatform(s string) *SysLoginLogCreate {
	sllc.mutation.SetPlatform(s)
	return sllc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillablePlatform(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetPlatform(*s)
	}
	return sllc
}

// SetLoginTime sets the "loginTime" field.
func (sllc *SysLoginLogCreate) SetLoginTime(t time.Time) *SysLoginLogCreate {
	sllc.mutation.SetLoginTime(t)
	return sllc
}

// SetNillableLoginTime sets the "loginTime" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableLoginTime(t *time.Time) *SysLoginLogCreate {
	if t != nil {
		sllc.SetLoginTime(*t)
	}
	return sllc
}

// SetRemark sets the "remark" field.
func (sllc *SysLoginLogCreate) SetRemark(s string) *SysLoginLogCreate {
	sllc.mutation.SetRemark(s)
	return sllc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableRemark(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetRemark(*s)
	}
	return sllc
}

// SetMsg sets the "msg" field.
func (sllc *SysLoginLogCreate) SetMsg(s string) *SysLoginLogCreate {
	sllc.mutation.SetMsg(s)
	return sllc
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableMsg(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetMsg(*s)
	}
	return sllc
}

// SetCreatedAt sets the "createdAt" field.
func (sllc *SysLoginLogCreate) SetCreatedAt(t time.Time) *SysLoginLogCreate {
	sllc.mutation.SetCreatedAt(t)
	return sllc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableCreatedAt(t *time.Time) *SysLoginLogCreate {
	if t != nil {
		sllc.SetCreatedAt(*t)
	}
	return sllc
}

// SetUpdatedAt sets the "updatedAt" field.
func (sllc *SysLoginLogCreate) SetUpdatedAt(t time.Time) *SysLoginLogCreate {
	sllc.mutation.SetUpdatedAt(t)
	return sllc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableUpdatedAt(t *time.Time) *SysLoginLogCreate {
	if t != nil {
		sllc.SetUpdatedAt(*t)
	}
	return sllc
}

// SetCreateBy sets the "createBy" field.
func (sllc *SysLoginLogCreate) SetCreateBy(i int64) *SysLoginLogCreate {
	sllc.mutation.SetCreateBy(i)
	return sllc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableCreateBy(i *int64) *SysLoginLogCreate {
	if i != nil {
		sllc.SetCreateBy(*i)
	}
	return sllc
}

// SetUpdateBy sets the "updateBy" field.
func (sllc *SysLoginLogCreate) SetUpdateBy(i int64) *SysLoginLogCreate {
	sllc.mutation.SetUpdateBy(i)
	return sllc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableUpdateBy(i *int64) *SysLoginLogCreate {
	if i != nil {
		sllc.SetUpdateBy(*i)
	}
	return sllc
}

// SetTenantId sets the "tenantId" field.
func (sllc *SysLoginLogCreate) SetTenantId(i int64) *SysLoginLogCreate {
	sllc.mutation.SetTenantId(i)
	return sllc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableTenantId(i *int64) *SysLoginLogCreate {
	if i != nil {
		sllc.SetTenantId(*i)
	}
	return sllc
}

// SetUserID sets the "user" edge to the SysUser entity by ID.
func (sllc *SysLoginLogCreate) SetUserID(id int64) *SysLoginLogCreate {
	sllc.mutation.SetUserID(id)
	return sllc
}

// SetNillableUserID sets the "user" edge to the SysUser entity by ID if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableUserID(id *int64) *SysLoginLogCreate {
	if id != nil {
		sllc = sllc.SetUserID(*id)
	}
	return sllc
}

// SetUser sets the "user" edge to the SysUser entity.
func (sllc *SysLoginLogCreate) SetUser(s *SysUser) *SysLoginLogCreate {
	return sllc.SetUserID(s.ID)
}

// Mutation returns the SysLoginLogMutation object of the builder.
func (sllc *SysLoginLogCreate) Mutation() *SysLoginLogMutation {
	return sllc.mutation
}

// Save creates the SysLoginLog in the database.
func (sllc *SysLoginLogCreate) Save(ctx context.Context) (*SysLoginLog, error) {
	var (
		err  error
		node *SysLoginLog
	)
	sllc.defaults()
	if len(sllc.hooks) == 0 {
		if err = sllc.check(); err != nil {
			return nil, err
		}
		node, err = sllc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysLoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sllc.check(); err != nil {
				return nil, err
			}
			sllc.mutation = mutation
			if node, err = sllc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sllc.hooks) - 1; i >= 0; i-- {
			if sllc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sllc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sllc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sllc *SysLoginLogCreate) SaveX(ctx context.Context) *SysLoginLog {
	v, err := sllc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sllc *SysLoginLogCreate) Exec(ctx context.Context) error {
	_, err := sllc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sllc *SysLoginLogCreate) ExecX(ctx context.Context) {
	if err := sllc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sllc *SysLoginLogCreate) defaults() {
	if _, ok := sllc.mutation.CreatedAt(); !ok {
		v := sysloginlog.DefaultCreatedAt()
		sllc.mutation.SetCreatedAt(v)
	}
	if _, ok := sllc.mutation.UpdatedAt(); !ok {
		v := sysloginlog.DefaultUpdatedAt()
		sllc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sllc.mutation.CreateBy(); !ok {
		v := sysloginlog.DefaultCreateBy
		sllc.mutation.SetCreateBy(v)
	}
	if _, ok := sllc.mutation.UpdateBy(); !ok {
		v := sysloginlog.DefaultUpdateBy
		sllc.mutation.SetUpdateBy(v)
	}
	if _, ok := sllc.mutation.TenantId(); !ok {
		v := sysloginlog.DefaultTenantId
		sllc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sllc *SysLoginLogCreate) check() error {
	if _, ok := sllc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := sllc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := sllc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := sllc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := sllc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (sllc *SysLoginLogCreate) sqlSave(ctx context.Context) (*SysLoginLog, error) {
	_node, _spec := sllc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sllc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (sllc *SysLoginLogCreate) createSpec() (*SysLoginLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SysLoginLog{config: sllc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysloginlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysloginlog.FieldID,
			},
		}
	)
	if value, ok := sllc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sllc.mutation.Ipaddr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldIpaddr,
		})
		_node.Ipaddr = value
	}
	if value, ok := sllc.mutation.LoginLocation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldLoginLocation,
		})
		_node.LoginLocation = value
	}
	if value, ok := sllc.mutation.Browser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldBrowser,
		})
		_node.Browser = value
	}
	if value, ok := sllc.mutation.Os(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldOs,
		})
		_node.Os = value
	}
	if value, ok := sllc.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldPlatform,
		})
		_node.Platform = value
	}
	if value, ok := sllc.mutation.LoginTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysloginlog.FieldLoginTime,
		})
		_node.LoginTime = value
	}
	if value, ok := sllc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := sllc.mutation.Msg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysloginlog.FieldMsg,
		})
		_node.Msg = value
	}
	if value, ok := sllc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysloginlog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sllc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysloginlog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sllc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := sllc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := sllc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysloginlog.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := sllc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysloginlog.UserTable,
			Columns: []string{sysloginlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sys_user_login_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SysLoginLogCreateBulk is the builder for creating many SysLoginLog entities in bulk.
type SysLoginLogCreateBulk struct {
	config
	builders []*SysLoginLogCreate
}

// Save creates the SysLoginLog entities in the database.
func (sllcb *SysLoginLogCreateBulk) Save(ctx context.Context) ([]*SysLoginLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sllcb.builders))
	nodes := make([]*SysLoginLog, len(sllcb.builders))
	mutators := make([]Mutator, len(sllcb.builders))
	for i := range sllcb.builders {
		func(i int, root context.Context) {
			builder := sllcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysLoginLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sllcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sllcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sllcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sllcb *SysLoginLogCreateBulk) SaveX(ctx context.Context) []*SysLoginLog {
	v, err := sllcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sllcb *SysLoginLogCreateBulk) Exec(ctx context.Context) error {
	_, err := sllcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sllcb *SysLoginLogCreateBulk) ExecX(ctx context.Context) {
	if err := sllcb.Exec(ctx); err != nil {
		panic(err)
	}
}
