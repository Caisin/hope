// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/bookpackage"
	"hope/apps/novel/internal/data/ent/novel"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookPackageUpdate is the builder for updating BookPackage entities.
type BookPackageUpdate struct {
	config
	hooks    []Hook
	mutation *BookPackageMutation
}

// Where appends a list predicates to the BookPackageUpdate builder.
func (bpu *BookPackageUpdate) Where(ps ...predicate.BookPackage) *BookPackageUpdate {
	bpu.mutation.Where(ps...)
	return bpu
}

// SetActivityCode sets the "activityCode" field.
func (bpu *BookPackageUpdate) SetActivityCode(s string) *BookPackageUpdate {
	bpu.mutation.SetActivityCode(s)
	return bpu
}

// SetNillableActivityCode sets the "activityCode" field if the given value is not nil.
func (bpu *BookPackageUpdate) SetNillableActivityCode(s *string) *BookPackageUpdate {
	if s != nil {
		bpu.SetActivityCode(*s)
	}
	return bpu
}

// ClearActivityCode clears the value of the "activityCode" field.
func (bpu *BookPackageUpdate) ClearActivityCode() *BookPackageUpdate {
	bpu.mutation.ClearActivityCode()
	return bpu
}

// SetPackageName sets the "packageName" field.
func (bpu *BookPackageUpdate) SetPackageName(s string) *BookPackageUpdate {
	bpu.mutation.SetPackageName(s)
	return bpu
}

// SetNillablePackageName sets the "packageName" field if the given value is not nil.
func (bpu *BookPackageUpdate) SetNillablePackageName(s *string) *BookPackageUpdate {
	if s != nil {
		bpu.SetPackageName(*s)
	}
	return bpu
}

// ClearPackageName clears the value of the "packageName" field.
func (bpu *BookPackageUpdate) ClearPackageName() *BookPackageUpdate {
	bpu.mutation.ClearPackageName()
	return bpu
}

// SetPrice sets the "price" field.
func (bpu *BookPackageUpdate) SetPrice(i int64) *BookPackageUpdate {
	bpu.mutation.ResetPrice()
	bpu.mutation.SetPrice(i)
	return bpu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (bpu *BookPackageUpdate) SetNillablePrice(i *int64) *BookPackageUpdate {
	if i != nil {
		bpu.SetPrice(*i)
	}
	return bpu
}

// AddPrice adds i to the "price" field.
func (bpu *BookPackageUpdate) AddPrice(i int64) *BookPackageUpdate {
	bpu.mutation.AddPrice(i)
	return bpu
}

// ClearPrice clears the value of the "price" field.
func (bpu *BookPackageUpdate) ClearPrice() *BookPackageUpdate {
	bpu.mutation.ClearPrice()
	return bpu
}

// SetDailyPrice sets the "dailyPrice" field.
func (bpu *BookPackageUpdate) SetDailyPrice(i int64) *BookPackageUpdate {
	bpu.mutation.ResetDailyPrice()
	bpu.mutation.SetDailyPrice(i)
	return bpu
}

// SetNillableDailyPrice sets the "dailyPrice" field if the given value is not nil.
func (bpu *BookPackageUpdate) SetNillableDailyPrice(i *int64) *BookPackageUpdate {
	if i != nil {
		bpu.SetDailyPrice(*i)
	}
	return bpu
}

// AddDailyPrice adds i to the "dailyPrice" field.
func (bpu *BookPackageUpdate) AddDailyPrice(i int64) *BookPackageUpdate {
	bpu.mutation.AddDailyPrice(i)
	return bpu
}

// ClearDailyPrice clears the value of the "dailyPrice" field.
func (bpu *BookPackageUpdate) ClearDailyPrice() *BookPackageUpdate {
	bpu.mutation.ClearDailyPrice()
	return bpu
}

// SetEffectTime sets the "effectTime" field.
func (bpu *BookPackageUpdate) SetEffectTime(t time.Time) *BookPackageUpdate {
	bpu.mutation.SetEffectTime(t)
	return bpu
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (bpu *BookPackageUpdate) SetNillableEffectTime(t *time.Time) *BookPackageUpdate {
	if t != nil {
		bpu.SetEffectTime(*t)
	}
	return bpu
}

// SetExpiredTime sets the "expiredTime" field.
func (bpu *BookPackageUpdate) SetExpiredTime(t time.Time) *BookPackageUpdate {
	bpu.mutation.SetExpiredTime(t)
	return bpu
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (bpu *BookPackageUpdate) SetNillableExpiredTime(t *time.Time) *BookPackageUpdate {
	if t != nil {
		bpu.SetExpiredTime(*t)
	}
	return bpu
}

// SetUpdatedAt sets the "updatedAt" field.
func (bpu *BookPackageUpdate) SetUpdatedAt(t time.Time) *BookPackageUpdate {
	bpu.mutation.SetUpdatedAt(t)
	return bpu
}

// SetCreateBy sets the "createBy" field.
func (bpu *BookPackageUpdate) SetCreateBy(i int64) *BookPackageUpdate {
	bpu.mutation.ResetCreateBy()
	bpu.mutation.SetCreateBy(i)
	return bpu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (bpu *BookPackageUpdate) SetNillableCreateBy(i *int64) *BookPackageUpdate {
	if i != nil {
		bpu.SetCreateBy(*i)
	}
	return bpu
}

// AddCreateBy adds i to the "createBy" field.
func (bpu *BookPackageUpdate) AddCreateBy(i int64) *BookPackageUpdate {
	bpu.mutation.AddCreateBy(i)
	return bpu
}

// SetUpdateBy sets the "updateBy" field.
func (bpu *BookPackageUpdate) SetUpdateBy(i int64) *BookPackageUpdate {
	bpu.mutation.ResetUpdateBy()
	bpu.mutation.SetUpdateBy(i)
	return bpu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (bpu *BookPackageUpdate) SetNillableUpdateBy(i *int64) *BookPackageUpdate {
	if i != nil {
		bpu.SetUpdateBy(*i)
	}
	return bpu
}

// AddUpdateBy adds i to the "updateBy" field.
func (bpu *BookPackageUpdate) AddUpdateBy(i int64) *BookPackageUpdate {
	bpu.mutation.AddUpdateBy(i)
	return bpu
}

// SetTenantId sets the "tenantId" field.
func (bpu *BookPackageUpdate) SetTenantId(i int64) *BookPackageUpdate {
	bpu.mutation.ResetTenantId()
	bpu.mutation.SetTenantId(i)
	return bpu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (bpu *BookPackageUpdate) SetNillableTenantId(i *int64) *BookPackageUpdate {
	if i != nil {
		bpu.SetTenantId(*i)
	}
	return bpu
}

// AddTenantId adds i to the "tenantId" field.
func (bpu *BookPackageUpdate) AddTenantId(i int64) *BookPackageUpdate {
	bpu.mutation.AddTenantId(i)
	return bpu
}

// AddBookIDs adds the "books" edge to the Novel entity by IDs.
func (bpu *BookPackageUpdate) AddBookIDs(ids ...int64) *BookPackageUpdate {
	bpu.mutation.AddBookIDs(ids...)
	return bpu
}

// AddBooks adds the "books" edges to the Novel entity.
func (bpu *BookPackageUpdate) AddBooks(n ...*Novel) *BookPackageUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bpu.AddBookIDs(ids...)
}

// Mutation returns the BookPackageMutation object of the builder.
func (bpu *BookPackageUpdate) Mutation() *BookPackageMutation {
	return bpu.mutation
}

// ClearBooks clears all "books" edges to the Novel entity.
func (bpu *BookPackageUpdate) ClearBooks() *BookPackageUpdate {
	bpu.mutation.ClearBooks()
	return bpu
}

// RemoveBookIDs removes the "books" edge to Novel entities by IDs.
func (bpu *BookPackageUpdate) RemoveBookIDs(ids ...int64) *BookPackageUpdate {
	bpu.mutation.RemoveBookIDs(ids...)
	return bpu
}

// RemoveBooks removes "books" edges to Novel entities.
func (bpu *BookPackageUpdate) RemoveBooks(n ...*Novel) *BookPackageUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bpu.RemoveBookIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bpu *BookPackageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bpu.defaults()
	if len(bpu.hooks) == 0 {
		affected, err = bpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookPackageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bpu.mutation = mutation
			affected, err = bpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bpu.hooks) - 1; i >= 0; i-- {
			if bpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bpu *BookPackageUpdate) SaveX(ctx context.Context) int {
	affected, err := bpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bpu *BookPackageUpdate) Exec(ctx context.Context) error {
	_, err := bpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpu *BookPackageUpdate) ExecX(ctx context.Context) {
	if err := bpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpu *BookPackageUpdate) defaults() {
	if _, ok := bpu.mutation.UpdatedAt(); !ok {
		v := bookpackage.UpdateDefaultUpdatedAt()
		bpu.mutation.SetUpdatedAt(v)
	}
}

func (bpu *BookPackageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookpackage.Table,
			Columns: bookpackage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bookpackage.FieldID,
			},
		},
	}
	if ps := bpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpu.mutation.ActivityCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookpackage.FieldActivityCode,
		})
	}
	if bpu.mutation.ActivityCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bookpackage.FieldActivityCode,
		})
	}
	if value, ok := bpu.mutation.PackageName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookpackage.FieldPackageName,
		})
	}
	if bpu.mutation.PackageNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bookpackage.FieldPackageName,
		})
	}
	if value, ok := bpu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldPrice,
		})
	}
	if value, ok := bpu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldPrice,
		})
	}
	if bpu.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: bookpackage.FieldPrice,
		})
	}
	if value, ok := bpu.mutation.DailyPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldDailyPrice,
		})
	}
	if value, ok := bpu.mutation.AddedDailyPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldDailyPrice,
		})
	}
	if bpu.mutation.DailyPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: bookpackage.FieldDailyPrice,
		})
	}
	if value, ok := bpu.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldEffectTime,
		})
	}
	if value, ok := bpu.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldExpiredTime,
		})
	}
	if value, ok := bpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldUpdatedAt,
		})
	}
	if value, ok := bpu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldCreateBy,
		})
	}
	if value, ok := bpu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldCreateBy,
		})
	}
	if value, ok := bpu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldUpdateBy,
		})
	}
	if value, ok := bpu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldUpdateBy,
		})
	}
	if value, ok := bpu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldTenantId,
		})
	}
	if value, ok := bpu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldTenantId,
		})
	}
	if bpu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bookpackage.BooksTable,
			Columns: bookpackage.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.RemovedBooksIDs(); len(nodes) > 0 && !bpu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bookpackage.BooksTable,
			Columns: bookpackage.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bookpackage.BooksTable,
			Columns: bookpackage.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookpackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BookPackageUpdateOne is the builder for updating a single BookPackage entity.
type BookPackageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookPackageMutation
}

// SetActivityCode sets the "activityCode" field.
func (bpuo *BookPackageUpdateOne) SetActivityCode(s string) *BookPackageUpdateOne {
	bpuo.mutation.SetActivityCode(s)
	return bpuo
}

// SetNillableActivityCode sets the "activityCode" field if the given value is not nil.
func (bpuo *BookPackageUpdateOne) SetNillableActivityCode(s *string) *BookPackageUpdateOne {
	if s != nil {
		bpuo.SetActivityCode(*s)
	}
	return bpuo
}

// ClearActivityCode clears the value of the "activityCode" field.
func (bpuo *BookPackageUpdateOne) ClearActivityCode() *BookPackageUpdateOne {
	bpuo.mutation.ClearActivityCode()
	return bpuo
}

// SetPackageName sets the "packageName" field.
func (bpuo *BookPackageUpdateOne) SetPackageName(s string) *BookPackageUpdateOne {
	bpuo.mutation.SetPackageName(s)
	return bpuo
}

// SetNillablePackageName sets the "packageName" field if the given value is not nil.
func (bpuo *BookPackageUpdateOne) SetNillablePackageName(s *string) *BookPackageUpdateOne {
	if s != nil {
		bpuo.SetPackageName(*s)
	}
	return bpuo
}

// ClearPackageName clears the value of the "packageName" field.
func (bpuo *BookPackageUpdateOne) ClearPackageName() *BookPackageUpdateOne {
	bpuo.mutation.ClearPackageName()
	return bpuo
}

// SetPrice sets the "price" field.
func (bpuo *BookPackageUpdateOne) SetPrice(i int64) *BookPackageUpdateOne {
	bpuo.mutation.ResetPrice()
	bpuo.mutation.SetPrice(i)
	return bpuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (bpuo *BookPackageUpdateOne) SetNillablePrice(i *int64) *BookPackageUpdateOne {
	if i != nil {
		bpuo.SetPrice(*i)
	}
	return bpuo
}

// AddPrice adds i to the "price" field.
func (bpuo *BookPackageUpdateOne) AddPrice(i int64) *BookPackageUpdateOne {
	bpuo.mutation.AddPrice(i)
	return bpuo
}

// ClearPrice clears the value of the "price" field.
func (bpuo *BookPackageUpdateOne) ClearPrice() *BookPackageUpdateOne {
	bpuo.mutation.ClearPrice()
	return bpuo
}

// SetDailyPrice sets the "dailyPrice" field.
func (bpuo *BookPackageUpdateOne) SetDailyPrice(i int64) *BookPackageUpdateOne {
	bpuo.mutation.ResetDailyPrice()
	bpuo.mutation.SetDailyPrice(i)
	return bpuo
}

// SetNillableDailyPrice sets the "dailyPrice" field if the given value is not nil.
func (bpuo *BookPackageUpdateOne) SetNillableDailyPrice(i *int64) *BookPackageUpdateOne {
	if i != nil {
		bpuo.SetDailyPrice(*i)
	}
	return bpuo
}

// AddDailyPrice adds i to the "dailyPrice" field.
func (bpuo *BookPackageUpdateOne) AddDailyPrice(i int64) *BookPackageUpdateOne {
	bpuo.mutation.AddDailyPrice(i)
	return bpuo
}

// ClearDailyPrice clears the value of the "dailyPrice" field.
func (bpuo *BookPackageUpdateOne) ClearDailyPrice() *BookPackageUpdateOne {
	bpuo.mutation.ClearDailyPrice()
	return bpuo
}

// SetEffectTime sets the "effectTime" field.
func (bpuo *BookPackageUpdateOne) SetEffectTime(t time.Time) *BookPackageUpdateOne {
	bpuo.mutation.SetEffectTime(t)
	return bpuo
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (bpuo *BookPackageUpdateOne) SetNillableEffectTime(t *time.Time) *BookPackageUpdateOne {
	if t != nil {
		bpuo.SetEffectTime(*t)
	}
	return bpuo
}

// SetExpiredTime sets the "expiredTime" field.
func (bpuo *BookPackageUpdateOne) SetExpiredTime(t time.Time) *BookPackageUpdateOne {
	bpuo.mutation.SetExpiredTime(t)
	return bpuo
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (bpuo *BookPackageUpdateOne) SetNillableExpiredTime(t *time.Time) *BookPackageUpdateOne {
	if t != nil {
		bpuo.SetExpiredTime(*t)
	}
	return bpuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (bpuo *BookPackageUpdateOne) SetUpdatedAt(t time.Time) *BookPackageUpdateOne {
	bpuo.mutation.SetUpdatedAt(t)
	return bpuo
}

// SetCreateBy sets the "createBy" field.
func (bpuo *BookPackageUpdateOne) SetCreateBy(i int64) *BookPackageUpdateOne {
	bpuo.mutation.ResetCreateBy()
	bpuo.mutation.SetCreateBy(i)
	return bpuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (bpuo *BookPackageUpdateOne) SetNillableCreateBy(i *int64) *BookPackageUpdateOne {
	if i != nil {
		bpuo.SetCreateBy(*i)
	}
	return bpuo
}

// AddCreateBy adds i to the "createBy" field.
func (bpuo *BookPackageUpdateOne) AddCreateBy(i int64) *BookPackageUpdateOne {
	bpuo.mutation.AddCreateBy(i)
	return bpuo
}

// SetUpdateBy sets the "updateBy" field.
func (bpuo *BookPackageUpdateOne) SetUpdateBy(i int64) *BookPackageUpdateOne {
	bpuo.mutation.ResetUpdateBy()
	bpuo.mutation.SetUpdateBy(i)
	return bpuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (bpuo *BookPackageUpdateOne) SetNillableUpdateBy(i *int64) *BookPackageUpdateOne {
	if i != nil {
		bpuo.SetUpdateBy(*i)
	}
	return bpuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (bpuo *BookPackageUpdateOne) AddUpdateBy(i int64) *BookPackageUpdateOne {
	bpuo.mutation.AddUpdateBy(i)
	return bpuo
}

// SetTenantId sets the "tenantId" field.
func (bpuo *BookPackageUpdateOne) SetTenantId(i int64) *BookPackageUpdateOne {
	bpuo.mutation.ResetTenantId()
	bpuo.mutation.SetTenantId(i)
	return bpuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (bpuo *BookPackageUpdateOne) SetNillableTenantId(i *int64) *BookPackageUpdateOne {
	if i != nil {
		bpuo.SetTenantId(*i)
	}
	return bpuo
}

// AddTenantId adds i to the "tenantId" field.
func (bpuo *BookPackageUpdateOne) AddTenantId(i int64) *BookPackageUpdateOne {
	bpuo.mutation.AddTenantId(i)
	return bpuo
}

// AddBookIDs adds the "books" edge to the Novel entity by IDs.
func (bpuo *BookPackageUpdateOne) AddBookIDs(ids ...int64) *BookPackageUpdateOne {
	bpuo.mutation.AddBookIDs(ids...)
	return bpuo
}

// AddBooks adds the "books" edges to the Novel entity.
func (bpuo *BookPackageUpdateOne) AddBooks(n ...*Novel) *BookPackageUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bpuo.AddBookIDs(ids...)
}

// Mutation returns the BookPackageMutation object of the builder.
func (bpuo *BookPackageUpdateOne) Mutation() *BookPackageMutation {
	return bpuo.mutation
}

// ClearBooks clears all "books" edges to the Novel entity.
func (bpuo *BookPackageUpdateOne) ClearBooks() *BookPackageUpdateOne {
	bpuo.mutation.ClearBooks()
	return bpuo
}

// RemoveBookIDs removes the "books" edge to Novel entities by IDs.
func (bpuo *BookPackageUpdateOne) RemoveBookIDs(ids ...int64) *BookPackageUpdateOne {
	bpuo.mutation.RemoveBookIDs(ids...)
	return bpuo
}

// RemoveBooks removes "books" edges to Novel entities.
func (bpuo *BookPackageUpdateOne) RemoveBooks(n ...*Novel) *BookPackageUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return bpuo.RemoveBookIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bpuo *BookPackageUpdateOne) Select(field string, fields ...string) *BookPackageUpdateOne {
	bpuo.fields = append([]string{field}, fields...)
	return bpuo
}

// Save executes the query and returns the updated BookPackage entity.
func (bpuo *BookPackageUpdateOne) Save(ctx context.Context) (*BookPackage, error) {
	var (
		err  error
		node *BookPackage
	)
	bpuo.defaults()
	if len(bpuo.hooks) == 0 {
		node, err = bpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookPackageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bpuo.mutation = mutation
			node, err = bpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bpuo.hooks) - 1; i >= 0; i-- {
			if bpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bpuo *BookPackageUpdateOne) SaveX(ctx context.Context) *BookPackage {
	node, err := bpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bpuo *BookPackageUpdateOne) Exec(ctx context.Context) error {
	_, err := bpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpuo *BookPackageUpdateOne) ExecX(ctx context.Context) {
	if err := bpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpuo *BookPackageUpdateOne) defaults() {
	if _, ok := bpuo.mutation.UpdatedAt(); !ok {
		v := bookpackage.UpdateDefaultUpdatedAt()
		bpuo.mutation.SetUpdatedAt(v)
	}
}

func (bpuo *BookPackageUpdateOne) sqlSave(ctx context.Context) (_node *BookPackage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookpackage.Table,
			Columns: bookpackage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: bookpackage.FieldID,
			},
		},
	}
	id, ok := bpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BookPackage.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := bpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookpackage.FieldID)
		for _, f := range fields {
			if !bookpackage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookpackage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpuo.mutation.ActivityCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookpackage.FieldActivityCode,
		})
	}
	if bpuo.mutation.ActivityCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bookpackage.FieldActivityCode,
		})
	}
	if value, ok := bpuo.mutation.PackageName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookpackage.FieldPackageName,
		})
	}
	if bpuo.mutation.PackageNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bookpackage.FieldPackageName,
		})
	}
	if value, ok := bpuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldPrice,
		})
	}
	if value, ok := bpuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldPrice,
		})
	}
	if bpuo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: bookpackage.FieldPrice,
		})
	}
	if value, ok := bpuo.mutation.DailyPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldDailyPrice,
		})
	}
	if value, ok := bpuo.mutation.AddedDailyPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldDailyPrice,
		})
	}
	if bpuo.mutation.DailyPriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: bookpackage.FieldDailyPrice,
		})
	}
	if value, ok := bpuo.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldEffectTime,
		})
	}
	if value, ok := bpuo.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldExpiredTime,
		})
	}
	if value, ok := bpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bookpackage.FieldUpdatedAt,
		})
	}
	if value, ok := bpuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldCreateBy,
		})
	}
	if value, ok := bpuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldCreateBy,
		})
	}
	if value, ok := bpuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldUpdateBy,
		})
	}
	if value, ok := bpuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldUpdateBy,
		})
	}
	if value, ok := bpuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldTenantId,
		})
	}
	if value, ok := bpuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: bookpackage.FieldTenantId,
		})
	}
	if bpuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bookpackage.BooksTable,
			Columns: bookpackage.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !bpuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bookpackage.BooksTable,
			Columns: bookpackage.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   bookpackage.BooksTable,
			Columns: bookpackage.BooksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BookPackage{config: bpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookpackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
