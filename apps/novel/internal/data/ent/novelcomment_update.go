// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/novelcomment"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelCommentUpdate is the builder for updating NovelComment entities.
type NovelCommentUpdate struct {
	config
	hooks    []Hook
	mutation *NovelCommentMutation
}

// Where appends a list predicates to the NovelCommentUpdate builder.
func (ncu *NovelCommentUpdate) Where(ps ...predicate.NovelComment) *NovelCommentUpdate {
	ncu.mutation.Where(ps...)
	return ncu
}

// SetNovelId sets the "novelId" field.
func (ncu *NovelCommentUpdate) SetNovelId(i int64) *NovelCommentUpdate {
	ncu.mutation.ResetNovelId()
	ncu.mutation.SetNovelId(i)
	return ncu
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableNovelId(i *int64) *NovelCommentUpdate {
	if i != nil {
		ncu.SetNovelId(*i)
	}
	return ncu
}

// AddNovelId adds i to the "novelId" field.
func (ncu *NovelCommentUpdate) AddNovelId(i int64) *NovelCommentUpdate {
	ncu.mutation.AddNovelId(i)
	return ncu
}

// ClearNovelId clears the value of the "novelId" field.
func (ncu *NovelCommentUpdate) ClearNovelId() *NovelCommentUpdate {
	ncu.mutation.ClearNovelId()
	return ncu
}

// SetUserId sets the "userId" field.
func (ncu *NovelCommentUpdate) SetUserId(i int64) *NovelCommentUpdate {
	ncu.mutation.SetUserId(i)
	return ncu
}

// SetAvatar sets the "avatar" field.
func (ncu *NovelCommentUpdate) SetAvatar(s string) *NovelCommentUpdate {
	ncu.mutation.SetAvatar(s)
	return ncu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableAvatar(s *string) *NovelCommentUpdate {
	if s != nil {
		ncu.SetAvatar(*s)
	}
	return ncu
}

// ClearAvatar clears the value of the "avatar" field.
func (ncu *NovelCommentUpdate) ClearAvatar() *NovelCommentUpdate {
	ncu.mutation.ClearAvatar()
	return ncu
}

// SetUserName sets the "userName" field.
func (ncu *NovelCommentUpdate) SetUserName(s string) *NovelCommentUpdate {
	ncu.mutation.SetUserName(s)
	return ncu
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableUserName(s *string) *NovelCommentUpdate {
	if s != nil {
		ncu.SetUserName(*s)
	}
	return ncu
}

// ClearUserName clears the value of the "userName" field.
func (ncu *NovelCommentUpdate) ClearUserName() *NovelCommentUpdate {
	ncu.mutation.ClearUserName()
	return ncu
}

// SetRepUserId sets the "repUserId" field.
func (ncu *NovelCommentUpdate) SetRepUserId(i int64) *NovelCommentUpdate {
	ncu.mutation.ResetRepUserId()
	ncu.mutation.SetRepUserId(i)
	return ncu
}

// SetNillableRepUserId sets the "repUserId" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableRepUserId(i *int64) *NovelCommentUpdate {
	if i != nil {
		ncu.SetRepUserId(*i)
	}
	return ncu
}

// AddRepUserId adds i to the "repUserId" field.
func (ncu *NovelCommentUpdate) AddRepUserId(i int64) *NovelCommentUpdate {
	ncu.mutation.AddRepUserId(i)
	return ncu
}

// ClearRepUserId clears the value of the "repUserId" field.
func (ncu *NovelCommentUpdate) ClearRepUserId() *NovelCommentUpdate {
	ncu.mutation.ClearRepUserId()
	return ncu
}

// SetRepUserName sets the "repUserName" field.
func (ncu *NovelCommentUpdate) SetRepUserName(s string) *NovelCommentUpdate {
	ncu.mutation.SetRepUserName(s)
	return ncu
}

// SetNillableRepUserName sets the "repUserName" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableRepUserName(s *string) *NovelCommentUpdate {
	if s != nil {
		ncu.SetRepUserName(*s)
	}
	return ncu
}

// ClearRepUserName clears the value of the "repUserName" field.
func (ncu *NovelCommentUpdate) ClearRepUserName() *NovelCommentUpdate {
	ncu.mutation.ClearRepUserName()
	return ncu
}

// SetContent sets the "content" field.
func (ncu *NovelCommentUpdate) SetContent(s string) *NovelCommentUpdate {
	ncu.mutation.SetContent(s)
	return ncu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableContent(s *string) *NovelCommentUpdate {
	if s != nil {
		ncu.SetContent(*s)
	}
	return ncu
}

// ClearContent clears the value of the "content" field.
func (ncu *NovelCommentUpdate) ClearContent() *NovelCommentUpdate {
	ncu.mutation.ClearContent()
	return ncu
}

// SetScore sets the "score" field.
func (ncu *NovelCommentUpdate) SetScore(i int32) *NovelCommentUpdate {
	ncu.mutation.ResetScore()
	ncu.mutation.SetScore(i)
	return ncu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableScore(i *int32) *NovelCommentUpdate {
	if i != nil {
		ncu.SetScore(*i)
	}
	return ncu
}

// AddScore adds i to the "score" field.
func (ncu *NovelCommentUpdate) AddScore(i int32) *NovelCommentUpdate {
	ncu.mutation.AddScore(i)
	return ncu
}

// ClearScore clears the value of the "score" field.
func (ncu *NovelCommentUpdate) ClearScore() *NovelCommentUpdate {
	ncu.mutation.ClearScore()
	return ncu
}

// SetPId sets the "pId" field.
func (ncu *NovelCommentUpdate) SetPId(i int64) *NovelCommentUpdate {
	ncu.mutation.ResetPId()
	ncu.mutation.SetPId(i)
	return ncu
}

// SetNillablePId sets the "pId" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillablePId(i *int64) *NovelCommentUpdate {
	if i != nil {
		ncu.SetPId(*i)
	}
	return ncu
}

// AddPId adds i to the "pId" field.
func (ncu *NovelCommentUpdate) AddPId(i int64) *NovelCommentUpdate {
	ncu.mutation.AddPId(i)
	return ncu
}

// ClearPId clears the value of the "pId" field.
func (ncu *NovelCommentUpdate) ClearPId() *NovelCommentUpdate {
	ncu.mutation.ClearPId()
	return ncu
}

// SetIsTop sets the "isTop" field.
func (ncu *NovelCommentUpdate) SetIsTop(b bool) *NovelCommentUpdate {
	ncu.mutation.SetIsTop(b)
	return ncu
}

// SetNillableIsTop sets the "isTop" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableIsTop(b *bool) *NovelCommentUpdate {
	if b != nil {
		ncu.SetIsTop(*b)
	}
	return ncu
}

// ClearIsTop clears the value of the "isTop" field.
func (ncu *NovelCommentUpdate) ClearIsTop() *NovelCommentUpdate {
	ncu.mutation.ClearIsTop()
	return ncu
}

// SetState sets the "state" field.
func (ncu *NovelCommentUpdate) SetState(n novelcomment.State) *NovelCommentUpdate {
	ncu.mutation.SetState(n)
	return ncu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableState(n *novelcomment.State) *NovelCommentUpdate {
	if n != nil {
		ncu.SetState(*n)
	}
	return ncu
}

// ClearState clears the value of the "state" field.
func (ncu *NovelCommentUpdate) ClearState() *NovelCommentUpdate {
	ncu.mutation.ClearState()
	return ncu
}

// SetIsHighlight sets the "isHighlight" field.
func (ncu *NovelCommentUpdate) SetIsHighlight(b bool) *NovelCommentUpdate {
	ncu.mutation.SetIsHighlight(b)
	return ncu
}

// SetNillableIsHighlight sets the "isHighlight" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableIsHighlight(b *bool) *NovelCommentUpdate {
	if b != nil {
		ncu.SetIsHighlight(*b)
	}
	return ncu
}

// ClearIsHighlight clears the value of the "isHighlight" field.
func (ncu *NovelCommentUpdate) ClearIsHighlight() *NovelCommentUpdate {
	ncu.mutation.ClearIsHighlight()
	return ncu
}

// SetIsHot sets the "isHot" field.
func (ncu *NovelCommentUpdate) SetIsHot(b bool) *NovelCommentUpdate {
	ncu.mutation.SetIsHot(b)
	return ncu
}

// SetNillableIsHot sets the "isHot" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableIsHot(b *bool) *NovelCommentUpdate {
	if b != nil {
		ncu.SetIsHot(*b)
	}
	return ncu
}

// ClearIsHot clears the value of the "isHot" field.
func (ncu *NovelCommentUpdate) ClearIsHot() *NovelCommentUpdate {
	ncu.mutation.ClearIsHot()
	return ncu
}

// SetRemark sets the "remark" field.
func (ncu *NovelCommentUpdate) SetRemark(s string) *NovelCommentUpdate {
	ncu.mutation.SetRemark(s)
	return ncu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableRemark(s *string) *NovelCommentUpdate {
	if s != nil {
		ncu.SetRemark(*s)
	}
	return ncu
}

// ClearRemark clears the value of the "remark" field.
func (ncu *NovelCommentUpdate) ClearRemark() *NovelCommentUpdate {
	ncu.mutation.ClearRemark()
	return ncu
}

// SetUpdatedAt sets the "updatedAt" field.
func (ncu *NovelCommentUpdate) SetUpdatedAt(t time.Time) *NovelCommentUpdate {
	ncu.mutation.SetUpdatedAt(t)
	return ncu
}

// SetCreateBy sets the "createBy" field.
func (ncu *NovelCommentUpdate) SetCreateBy(i int64) *NovelCommentUpdate {
	ncu.mutation.ResetCreateBy()
	ncu.mutation.SetCreateBy(i)
	return ncu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableCreateBy(i *int64) *NovelCommentUpdate {
	if i != nil {
		ncu.SetCreateBy(*i)
	}
	return ncu
}

// AddCreateBy adds i to the "createBy" field.
func (ncu *NovelCommentUpdate) AddCreateBy(i int64) *NovelCommentUpdate {
	ncu.mutation.AddCreateBy(i)
	return ncu
}

// SetUpdateBy sets the "updateBy" field.
func (ncu *NovelCommentUpdate) SetUpdateBy(i int64) *NovelCommentUpdate {
	ncu.mutation.ResetUpdateBy()
	ncu.mutation.SetUpdateBy(i)
	return ncu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableUpdateBy(i *int64) *NovelCommentUpdate {
	if i != nil {
		ncu.SetUpdateBy(*i)
	}
	return ncu
}

// AddUpdateBy adds i to the "updateBy" field.
func (ncu *NovelCommentUpdate) AddUpdateBy(i int64) *NovelCommentUpdate {
	ncu.mutation.AddUpdateBy(i)
	return ncu
}

// SetTenantId sets the "tenantId" field.
func (ncu *NovelCommentUpdate) SetTenantId(i int64) *NovelCommentUpdate {
	ncu.mutation.ResetTenantId()
	ncu.mutation.SetTenantId(i)
	return ncu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableTenantId(i *int64) *NovelCommentUpdate {
	if i != nil {
		ncu.SetTenantId(*i)
	}
	return ncu
}

// AddTenantId adds i to the "tenantId" field.
func (ncu *NovelCommentUpdate) AddTenantId(i int64) *NovelCommentUpdate {
	ncu.mutation.AddTenantId(i)
	return ncu
}

// SetParentID sets the "parent" edge to the NovelComment entity by ID.
func (ncu *NovelCommentUpdate) SetParentID(id int64) *NovelCommentUpdate {
	ncu.mutation.SetParentID(id)
	return ncu
}

// SetNillableParentID sets the "parent" edge to the NovelComment entity by ID if the given value is not nil.
func (ncu *NovelCommentUpdate) SetNillableParentID(id *int64) *NovelCommentUpdate {
	if id != nil {
		ncu = ncu.SetParentID(*id)
	}
	return ncu
}

// SetParent sets the "parent" edge to the NovelComment entity.
func (ncu *NovelCommentUpdate) SetParent(n *NovelComment) *NovelCommentUpdate {
	return ncu.SetParentID(n.ID)
}

// AddChildeIDs adds the "childes" edge to the NovelComment entity by IDs.
func (ncu *NovelCommentUpdate) AddChildeIDs(ids ...int64) *NovelCommentUpdate {
	ncu.mutation.AddChildeIDs(ids...)
	return ncu
}

// AddChildes adds the "childes" edges to the NovelComment entity.
func (ncu *NovelCommentUpdate) AddChildes(n ...*NovelComment) *NovelCommentUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncu.AddChildeIDs(ids...)
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (ncu *NovelCommentUpdate) SetUserID(id int64) *NovelCommentUpdate {
	ncu.mutation.SetUserID(id)
	return ncu
}

// SetUser sets the "user" edge to the SocialUser entity.
func (ncu *NovelCommentUpdate) SetUser(s *SocialUser) *NovelCommentUpdate {
	return ncu.SetUserID(s.ID)
}

// Mutation returns the NovelCommentMutation object of the builder.
func (ncu *NovelCommentUpdate) Mutation() *NovelCommentMutation {
	return ncu.mutation
}

// ClearParent clears the "parent" edge to the NovelComment entity.
func (ncu *NovelCommentUpdate) ClearParent() *NovelCommentUpdate {
	ncu.mutation.ClearParent()
	return ncu
}

// ClearChildes clears all "childes" edges to the NovelComment entity.
func (ncu *NovelCommentUpdate) ClearChildes() *NovelCommentUpdate {
	ncu.mutation.ClearChildes()
	return ncu
}

// RemoveChildeIDs removes the "childes" edge to NovelComment entities by IDs.
func (ncu *NovelCommentUpdate) RemoveChildeIDs(ids ...int64) *NovelCommentUpdate {
	ncu.mutation.RemoveChildeIDs(ids...)
	return ncu
}

// RemoveChildes removes "childes" edges to NovelComment entities.
func (ncu *NovelCommentUpdate) RemoveChildes(n ...*NovelComment) *NovelCommentUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncu.RemoveChildeIDs(ids...)
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (ncu *NovelCommentUpdate) ClearUser() *NovelCommentUpdate {
	ncu.mutation.ClearUser()
	return ncu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ncu *NovelCommentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ncu.defaults()
	if len(ncu.hooks) == 0 {
		if err = ncu.check(); err != nil {
			return 0, err
		}
		affected, err = ncu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ncu.check(); err != nil {
				return 0, err
			}
			ncu.mutation = mutation
			affected, err = ncu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ncu.hooks) - 1; i >= 0; i-- {
			if ncu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ncu *NovelCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := ncu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ncu *NovelCommentUpdate) Exec(ctx context.Context) error {
	_, err := ncu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncu *NovelCommentUpdate) ExecX(ctx context.Context) {
	if err := ncu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncu *NovelCommentUpdate) defaults() {
	if _, ok := ncu.mutation.UpdatedAt(); !ok {
		v := novelcomment.UpdateDefaultUpdatedAt()
		ncu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncu *NovelCommentUpdate) check() error {
	if v, ok := ncu.mutation.State(); ok {
		if err := novelcomment.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	if _, ok := ncu.mutation.UserID(); ncu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (ncu *NovelCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelcomment.Table,
			Columns: novelcomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelcomment.FieldID,
			},
		},
	}
	if ps := ncu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncu.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldNovelId,
		})
	}
	if value, ok := ncu.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldNovelId,
		})
	}
	if ncu.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelcomment.FieldNovelId,
		})
	}
	if value, ok := ncu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldAvatar,
		})
	}
	if ncu.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldAvatar,
		})
	}
	if value, ok := ncu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldUserName,
		})
	}
	if ncu.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldUserName,
		})
	}
	if value, ok := ncu.mutation.RepUserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldRepUserId,
		})
	}
	if value, ok := ncu.mutation.AddedRepUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldRepUserId,
		})
	}
	if ncu.mutation.RepUserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelcomment.FieldRepUserId,
		})
	}
	if value, ok := ncu.mutation.RepUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldRepUserName,
		})
	}
	if ncu.mutation.RepUserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldRepUserName,
		})
	}
	if value, ok := ncu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldContent,
		})
	}
	if ncu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldContent,
		})
	}
	if value, ok := ncu.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelcomment.FieldScore,
		})
	}
	if value, ok := ncu.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelcomment.FieldScore,
		})
	}
	if ncu.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelcomment.FieldScore,
		})
	}
	if value, ok := ncu.mutation.PId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldPId,
		})
	}
	if value, ok := ncu.mutation.AddedPId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldPId,
		})
	}
	if ncu.mutation.PIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelcomment.FieldPId,
		})
	}
	if value, ok := ncu.mutation.IsTop(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelcomment.FieldIsTop,
		})
	}
	if ncu.mutation.IsTopCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelcomment.FieldIsTop,
		})
	}
	if value, ok := ncu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: novelcomment.FieldState,
		})
	}
	if ncu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: novelcomment.FieldState,
		})
	}
	if value, ok := ncu.mutation.IsHighlight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelcomment.FieldIsHighlight,
		})
	}
	if ncu.mutation.IsHighlightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelcomment.FieldIsHighlight,
		})
	}
	if value, ok := ncu.mutation.IsHot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelcomment.FieldIsHot,
		})
	}
	if ncu.mutation.IsHotCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelcomment.FieldIsHot,
		})
	}
	if value, ok := ncu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldRemark,
		})
	}
	if ncu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldRemark,
		})
	}
	if value, ok := ncu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelcomment.FieldUpdatedAt,
		})
	}
	if value, ok := ncu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldCreateBy,
		})
	}
	if value, ok := ncu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldCreateBy,
		})
	}
	if value, ok := ncu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldUpdateBy,
		})
	}
	if value, ok := ncu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldUpdateBy,
		})
	}
	if value, ok := ncu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldTenantId,
		})
	}
	if value, ok := ncu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldTenantId,
		})
	}
	if ncu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.ParentTable,
			Columns: []string{novelcomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.ParentTable,
			Columns: []string{novelcomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncu.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelcomment.ChildesTable,
			Columns: []string{novelcomment.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.RemovedChildesIDs(); len(nodes) > 0 && !ncu.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelcomment.ChildesTable,
			Columns: []string{novelcomment.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.ChildesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelcomment.ChildesTable,
			Columns: []string{novelcomment.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.UserTable,
			Columns: []string{novelcomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.UserTable,
			Columns: []string{novelcomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ncu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NovelCommentUpdateOne is the builder for updating a single NovelComment entity.
type NovelCommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NovelCommentMutation
}

// SetNovelId sets the "novelId" field.
func (ncuo *NovelCommentUpdateOne) SetNovelId(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.ResetNovelId()
	ncuo.mutation.SetNovelId(i)
	return ncuo
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableNovelId(i *int64) *NovelCommentUpdateOne {
	if i != nil {
		ncuo.SetNovelId(*i)
	}
	return ncuo
}

// AddNovelId adds i to the "novelId" field.
func (ncuo *NovelCommentUpdateOne) AddNovelId(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.AddNovelId(i)
	return ncuo
}

// ClearNovelId clears the value of the "novelId" field.
func (ncuo *NovelCommentUpdateOne) ClearNovelId() *NovelCommentUpdateOne {
	ncuo.mutation.ClearNovelId()
	return ncuo
}

// SetUserId sets the "userId" field.
func (ncuo *NovelCommentUpdateOne) SetUserId(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.SetUserId(i)
	return ncuo
}

// SetAvatar sets the "avatar" field.
func (ncuo *NovelCommentUpdateOne) SetAvatar(s string) *NovelCommentUpdateOne {
	ncuo.mutation.SetAvatar(s)
	return ncuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableAvatar(s *string) *NovelCommentUpdateOne {
	if s != nil {
		ncuo.SetAvatar(*s)
	}
	return ncuo
}

// ClearAvatar clears the value of the "avatar" field.
func (ncuo *NovelCommentUpdateOne) ClearAvatar() *NovelCommentUpdateOne {
	ncuo.mutation.ClearAvatar()
	return ncuo
}

// SetUserName sets the "userName" field.
func (ncuo *NovelCommentUpdateOne) SetUserName(s string) *NovelCommentUpdateOne {
	ncuo.mutation.SetUserName(s)
	return ncuo
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableUserName(s *string) *NovelCommentUpdateOne {
	if s != nil {
		ncuo.SetUserName(*s)
	}
	return ncuo
}

// ClearUserName clears the value of the "userName" field.
func (ncuo *NovelCommentUpdateOne) ClearUserName() *NovelCommentUpdateOne {
	ncuo.mutation.ClearUserName()
	return ncuo
}

// SetRepUserId sets the "repUserId" field.
func (ncuo *NovelCommentUpdateOne) SetRepUserId(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.ResetRepUserId()
	ncuo.mutation.SetRepUserId(i)
	return ncuo
}

// SetNillableRepUserId sets the "repUserId" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableRepUserId(i *int64) *NovelCommentUpdateOne {
	if i != nil {
		ncuo.SetRepUserId(*i)
	}
	return ncuo
}

// AddRepUserId adds i to the "repUserId" field.
func (ncuo *NovelCommentUpdateOne) AddRepUserId(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.AddRepUserId(i)
	return ncuo
}

// ClearRepUserId clears the value of the "repUserId" field.
func (ncuo *NovelCommentUpdateOne) ClearRepUserId() *NovelCommentUpdateOne {
	ncuo.mutation.ClearRepUserId()
	return ncuo
}

// SetRepUserName sets the "repUserName" field.
func (ncuo *NovelCommentUpdateOne) SetRepUserName(s string) *NovelCommentUpdateOne {
	ncuo.mutation.SetRepUserName(s)
	return ncuo
}

// SetNillableRepUserName sets the "repUserName" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableRepUserName(s *string) *NovelCommentUpdateOne {
	if s != nil {
		ncuo.SetRepUserName(*s)
	}
	return ncuo
}

// ClearRepUserName clears the value of the "repUserName" field.
func (ncuo *NovelCommentUpdateOne) ClearRepUserName() *NovelCommentUpdateOne {
	ncuo.mutation.ClearRepUserName()
	return ncuo
}

// SetContent sets the "content" field.
func (ncuo *NovelCommentUpdateOne) SetContent(s string) *NovelCommentUpdateOne {
	ncuo.mutation.SetContent(s)
	return ncuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableContent(s *string) *NovelCommentUpdateOne {
	if s != nil {
		ncuo.SetContent(*s)
	}
	return ncuo
}

// ClearContent clears the value of the "content" field.
func (ncuo *NovelCommentUpdateOne) ClearContent() *NovelCommentUpdateOne {
	ncuo.mutation.ClearContent()
	return ncuo
}

// SetScore sets the "score" field.
func (ncuo *NovelCommentUpdateOne) SetScore(i int32) *NovelCommentUpdateOne {
	ncuo.mutation.ResetScore()
	ncuo.mutation.SetScore(i)
	return ncuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableScore(i *int32) *NovelCommentUpdateOne {
	if i != nil {
		ncuo.SetScore(*i)
	}
	return ncuo
}

// AddScore adds i to the "score" field.
func (ncuo *NovelCommentUpdateOne) AddScore(i int32) *NovelCommentUpdateOne {
	ncuo.mutation.AddScore(i)
	return ncuo
}

// ClearScore clears the value of the "score" field.
func (ncuo *NovelCommentUpdateOne) ClearScore() *NovelCommentUpdateOne {
	ncuo.mutation.ClearScore()
	return ncuo
}

// SetPId sets the "pId" field.
func (ncuo *NovelCommentUpdateOne) SetPId(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.ResetPId()
	ncuo.mutation.SetPId(i)
	return ncuo
}

// SetNillablePId sets the "pId" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillablePId(i *int64) *NovelCommentUpdateOne {
	if i != nil {
		ncuo.SetPId(*i)
	}
	return ncuo
}

// AddPId adds i to the "pId" field.
func (ncuo *NovelCommentUpdateOne) AddPId(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.AddPId(i)
	return ncuo
}

// ClearPId clears the value of the "pId" field.
func (ncuo *NovelCommentUpdateOne) ClearPId() *NovelCommentUpdateOne {
	ncuo.mutation.ClearPId()
	return ncuo
}

// SetIsTop sets the "isTop" field.
func (ncuo *NovelCommentUpdateOne) SetIsTop(b bool) *NovelCommentUpdateOne {
	ncuo.mutation.SetIsTop(b)
	return ncuo
}

// SetNillableIsTop sets the "isTop" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableIsTop(b *bool) *NovelCommentUpdateOne {
	if b != nil {
		ncuo.SetIsTop(*b)
	}
	return ncuo
}

// ClearIsTop clears the value of the "isTop" field.
func (ncuo *NovelCommentUpdateOne) ClearIsTop() *NovelCommentUpdateOne {
	ncuo.mutation.ClearIsTop()
	return ncuo
}

// SetState sets the "state" field.
func (ncuo *NovelCommentUpdateOne) SetState(n novelcomment.State) *NovelCommentUpdateOne {
	ncuo.mutation.SetState(n)
	return ncuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableState(n *novelcomment.State) *NovelCommentUpdateOne {
	if n != nil {
		ncuo.SetState(*n)
	}
	return ncuo
}

// ClearState clears the value of the "state" field.
func (ncuo *NovelCommentUpdateOne) ClearState() *NovelCommentUpdateOne {
	ncuo.mutation.ClearState()
	return ncuo
}

// SetIsHighlight sets the "isHighlight" field.
func (ncuo *NovelCommentUpdateOne) SetIsHighlight(b bool) *NovelCommentUpdateOne {
	ncuo.mutation.SetIsHighlight(b)
	return ncuo
}

// SetNillableIsHighlight sets the "isHighlight" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableIsHighlight(b *bool) *NovelCommentUpdateOne {
	if b != nil {
		ncuo.SetIsHighlight(*b)
	}
	return ncuo
}

// ClearIsHighlight clears the value of the "isHighlight" field.
func (ncuo *NovelCommentUpdateOne) ClearIsHighlight() *NovelCommentUpdateOne {
	ncuo.mutation.ClearIsHighlight()
	return ncuo
}

// SetIsHot sets the "isHot" field.
func (ncuo *NovelCommentUpdateOne) SetIsHot(b bool) *NovelCommentUpdateOne {
	ncuo.mutation.SetIsHot(b)
	return ncuo
}

// SetNillableIsHot sets the "isHot" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableIsHot(b *bool) *NovelCommentUpdateOne {
	if b != nil {
		ncuo.SetIsHot(*b)
	}
	return ncuo
}

// ClearIsHot clears the value of the "isHot" field.
func (ncuo *NovelCommentUpdateOne) ClearIsHot() *NovelCommentUpdateOne {
	ncuo.mutation.ClearIsHot()
	return ncuo
}

// SetRemark sets the "remark" field.
func (ncuo *NovelCommentUpdateOne) SetRemark(s string) *NovelCommentUpdateOne {
	ncuo.mutation.SetRemark(s)
	return ncuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableRemark(s *string) *NovelCommentUpdateOne {
	if s != nil {
		ncuo.SetRemark(*s)
	}
	return ncuo
}

// ClearRemark clears the value of the "remark" field.
func (ncuo *NovelCommentUpdateOne) ClearRemark() *NovelCommentUpdateOne {
	ncuo.mutation.ClearRemark()
	return ncuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ncuo *NovelCommentUpdateOne) SetUpdatedAt(t time.Time) *NovelCommentUpdateOne {
	ncuo.mutation.SetUpdatedAt(t)
	return ncuo
}

// SetCreateBy sets the "createBy" field.
func (ncuo *NovelCommentUpdateOne) SetCreateBy(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.ResetCreateBy()
	ncuo.mutation.SetCreateBy(i)
	return ncuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableCreateBy(i *int64) *NovelCommentUpdateOne {
	if i != nil {
		ncuo.SetCreateBy(*i)
	}
	return ncuo
}

// AddCreateBy adds i to the "createBy" field.
func (ncuo *NovelCommentUpdateOne) AddCreateBy(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.AddCreateBy(i)
	return ncuo
}

// SetUpdateBy sets the "updateBy" field.
func (ncuo *NovelCommentUpdateOne) SetUpdateBy(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.ResetUpdateBy()
	ncuo.mutation.SetUpdateBy(i)
	return ncuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableUpdateBy(i *int64) *NovelCommentUpdateOne {
	if i != nil {
		ncuo.SetUpdateBy(*i)
	}
	return ncuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (ncuo *NovelCommentUpdateOne) AddUpdateBy(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.AddUpdateBy(i)
	return ncuo
}

// SetTenantId sets the "tenantId" field.
func (ncuo *NovelCommentUpdateOne) SetTenantId(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.ResetTenantId()
	ncuo.mutation.SetTenantId(i)
	return ncuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableTenantId(i *int64) *NovelCommentUpdateOne {
	if i != nil {
		ncuo.SetTenantId(*i)
	}
	return ncuo
}

// AddTenantId adds i to the "tenantId" field.
func (ncuo *NovelCommentUpdateOne) AddTenantId(i int64) *NovelCommentUpdateOne {
	ncuo.mutation.AddTenantId(i)
	return ncuo
}

// SetParentID sets the "parent" edge to the NovelComment entity by ID.
func (ncuo *NovelCommentUpdateOne) SetParentID(id int64) *NovelCommentUpdateOne {
	ncuo.mutation.SetParentID(id)
	return ncuo
}

// SetNillableParentID sets the "parent" edge to the NovelComment entity by ID if the given value is not nil.
func (ncuo *NovelCommentUpdateOne) SetNillableParentID(id *int64) *NovelCommentUpdateOne {
	if id != nil {
		ncuo = ncuo.SetParentID(*id)
	}
	return ncuo
}

// SetParent sets the "parent" edge to the NovelComment entity.
func (ncuo *NovelCommentUpdateOne) SetParent(n *NovelComment) *NovelCommentUpdateOne {
	return ncuo.SetParentID(n.ID)
}

// AddChildeIDs adds the "childes" edge to the NovelComment entity by IDs.
func (ncuo *NovelCommentUpdateOne) AddChildeIDs(ids ...int64) *NovelCommentUpdateOne {
	ncuo.mutation.AddChildeIDs(ids...)
	return ncuo
}

// AddChildes adds the "childes" edges to the NovelComment entity.
func (ncuo *NovelCommentUpdateOne) AddChildes(n ...*NovelComment) *NovelCommentUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncuo.AddChildeIDs(ids...)
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (ncuo *NovelCommentUpdateOne) SetUserID(id int64) *NovelCommentUpdateOne {
	ncuo.mutation.SetUserID(id)
	return ncuo
}

// SetUser sets the "user" edge to the SocialUser entity.
func (ncuo *NovelCommentUpdateOne) SetUser(s *SocialUser) *NovelCommentUpdateOne {
	return ncuo.SetUserID(s.ID)
}

// Mutation returns the NovelCommentMutation object of the builder.
func (ncuo *NovelCommentUpdateOne) Mutation() *NovelCommentMutation {
	return ncuo.mutation
}

// ClearParent clears the "parent" edge to the NovelComment entity.
func (ncuo *NovelCommentUpdateOne) ClearParent() *NovelCommentUpdateOne {
	ncuo.mutation.ClearParent()
	return ncuo
}

// ClearChildes clears all "childes" edges to the NovelComment entity.
func (ncuo *NovelCommentUpdateOne) ClearChildes() *NovelCommentUpdateOne {
	ncuo.mutation.ClearChildes()
	return ncuo
}

// RemoveChildeIDs removes the "childes" edge to NovelComment entities by IDs.
func (ncuo *NovelCommentUpdateOne) RemoveChildeIDs(ids ...int64) *NovelCommentUpdateOne {
	ncuo.mutation.RemoveChildeIDs(ids...)
	return ncuo
}

// RemoveChildes removes "childes" edges to NovelComment entities.
func (ncuo *NovelCommentUpdateOne) RemoveChildes(n ...*NovelComment) *NovelCommentUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncuo.RemoveChildeIDs(ids...)
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (ncuo *NovelCommentUpdateOne) ClearUser() *NovelCommentUpdateOne {
	ncuo.mutation.ClearUser()
	return ncuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ncuo *NovelCommentUpdateOne) Select(field string, fields ...string) *NovelCommentUpdateOne {
	ncuo.fields = append([]string{field}, fields...)
	return ncuo
}

// Save executes the query and returns the updated NovelComment entity.
func (ncuo *NovelCommentUpdateOne) Save(ctx context.Context) (*NovelComment, error) {
	var (
		err  error
		node *NovelComment
	)
	ncuo.defaults()
	if len(ncuo.hooks) == 0 {
		if err = ncuo.check(); err != nil {
			return nil, err
		}
		node, err = ncuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ncuo.check(); err != nil {
				return nil, err
			}
			ncuo.mutation = mutation
			node, err = ncuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ncuo.hooks) - 1; i >= 0; i-- {
			if ncuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ncuo *NovelCommentUpdateOne) SaveX(ctx context.Context) *NovelComment {
	node, err := ncuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ncuo *NovelCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := ncuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncuo *NovelCommentUpdateOne) ExecX(ctx context.Context) {
	if err := ncuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncuo *NovelCommentUpdateOne) defaults() {
	if _, ok := ncuo.mutation.UpdatedAt(); !ok {
		v := novelcomment.UpdateDefaultUpdatedAt()
		ncuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncuo *NovelCommentUpdateOne) check() error {
	if v, ok := ncuo.mutation.State(); ok {
		if err := novelcomment.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	if _, ok := ncuo.mutation.UserID(); ncuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (ncuo *NovelCommentUpdateOne) sqlSave(ctx context.Context) (_node *NovelComment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelcomment.Table,
			Columns: novelcomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelcomment.FieldID,
			},
		},
	}
	id, ok := ncuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NovelComment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ncuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, novelcomment.FieldID)
		for _, f := range fields {
			if !novelcomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != novelcomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ncuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncuo.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldNovelId,
		})
	}
	if value, ok := ncuo.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldNovelId,
		})
	}
	if ncuo.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelcomment.FieldNovelId,
		})
	}
	if value, ok := ncuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldAvatar,
		})
	}
	if ncuo.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldAvatar,
		})
	}
	if value, ok := ncuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldUserName,
		})
	}
	if ncuo.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldUserName,
		})
	}
	if value, ok := ncuo.mutation.RepUserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldRepUserId,
		})
	}
	if value, ok := ncuo.mutation.AddedRepUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldRepUserId,
		})
	}
	if ncuo.mutation.RepUserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelcomment.FieldRepUserId,
		})
	}
	if value, ok := ncuo.mutation.RepUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldRepUserName,
		})
	}
	if ncuo.mutation.RepUserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldRepUserName,
		})
	}
	if value, ok := ncuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldContent,
		})
	}
	if ncuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldContent,
		})
	}
	if value, ok := ncuo.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelcomment.FieldScore,
		})
	}
	if value, ok := ncuo.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelcomment.FieldScore,
		})
	}
	if ncuo.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelcomment.FieldScore,
		})
	}
	if value, ok := ncuo.mutation.PId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldPId,
		})
	}
	if value, ok := ncuo.mutation.AddedPId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldPId,
		})
	}
	if ncuo.mutation.PIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelcomment.FieldPId,
		})
	}
	if value, ok := ncuo.mutation.IsTop(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelcomment.FieldIsTop,
		})
	}
	if ncuo.mutation.IsTopCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelcomment.FieldIsTop,
		})
	}
	if value, ok := ncuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: novelcomment.FieldState,
		})
	}
	if ncuo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: novelcomment.FieldState,
		})
	}
	if value, ok := ncuo.mutation.IsHighlight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelcomment.FieldIsHighlight,
		})
	}
	if ncuo.mutation.IsHighlightCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelcomment.FieldIsHighlight,
		})
	}
	if value, ok := ncuo.mutation.IsHot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelcomment.FieldIsHot,
		})
	}
	if ncuo.mutation.IsHotCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelcomment.FieldIsHot,
		})
	}
	if value, ok := ncuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelcomment.FieldRemark,
		})
	}
	if ncuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelcomment.FieldRemark,
		})
	}
	if value, ok := ncuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelcomment.FieldUpdatedAt,
		})
	}
	if value, ok := ncuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldCreateBy,
		})
	}
	if value, ok := ncuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldCreateBy,
		})
	}
	if value, ok := ncuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldUpdateBy,
		})
	}
	if value, ok := ncuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldUpdateBy,
		})
	}
	if value, ok := ncuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldTenantId,
		})
	}
	if value, ok := ncuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelcomment.FieldTenantId,
		})
	}
	if ncuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.ParentTable,
			Columns: []string{novelcomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.ParentTable,
			Columns: []string{novelcomment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncuo.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelcomment.ChildesTable,
			Columns: []string{novelcomment.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.RemovedChildesIDs(); len(nodes) > 0 && !ncuo.mutation.ChildesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelcomment.ChildesTable,
			Columns: []string{novelcomment.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.ChildesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelcomment.ChildesTable,
			Columns: []string{novelcomment.ChildesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ncuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.UserTable,
			Columns: []string{novelcomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelcomment.UserTable,
			Columns: []string{novelcomment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NovelComment{config: ncuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ncuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
