// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysmenu"
	"hope/apps/admin/internal/data/ent/sysrole"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysMenuUpdate is the builder for updating SysMenu entities.
type SysMenuUpdate struct {
	config
	hooks    []Hook
	mutation *SysMenuMutation
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smu *SysMenuUpdate) Where(ps ...predicate.SysMenu) *SysMenuUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetParentId sets the "parentId" field.
func (smu *SysMenuUpdate) SetParentId(i int64) *SysMenuUpdate {
	smu.mutation.SetParentId(i)
	return smu
}

// SetNillableParentId sets the "parentId" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableParentId(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetParentId(*i)
	}
	return smu
}

// SetName sets the "name" field.
func (smu *SysMenuUpdate) SetName(s string) *SysMenuUpdate {
	smu.mutation.SetName(s)
	return smu
}

// SetTitle sets the "title" field.
func (smu *SysMenuUpdate) SetTitle(s string) *SysMenuUpdate {
	smu.mutation.SetTitle(s)
	return smu
}

// SetRedirect sets the "redirect" field.
func (smu *SysMenuUpdate) SetRedirect(s string) *SysMenuUpdate {
	smu.mutation.SetRedirect(s)
	return smu
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableRedirect(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetRedirect(*s)
	}
	return smu
}

// ClearRedirect clears the value of the "redirect" field.
func (smu *SysMenuUpdate) ClearRedirect() *SysMenuUpdate {
	smu.mutation.ClearRedirect()
	return smu
}

// SetIcon sets the "icon" field.
func (smu *SysMenuUpdate) SetIcon(s string) *SysMenuUpdate {
	smu.mutation.SetIcon(s)
	return smu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIcon(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetIcon(*s)
	}
	return smu
}

// ClearIcon clears the value of the "icon" field.
func (smu *SysMenuUpdate) ClearIcon() *SysMenuUpdate {
	smu.mutation.ClearIcon()
	return smu
}

// SetPath sets the "path" field.
func (smu *SysMenuUpdate) SetPath(s string) *SysMenuUpdate {
	smu.mutation.SetPath(s)
	return smu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePath(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetPath(*s)
	}
	return smu
}

// ClearPath clears the value of the "path" field.
func (smu *SysMenuUpdate) ClearPath() *SysMenuUpdate {
	smu.mutation.ClearPath()
	return smu
}

// SetPaths sets the "paths" field.
func (smu *SysMenuUpdate) SetPaths(s string) *SysMenuUpdate {
	smu.mutation.SetPaths(s)
	return smu
}

// SetNillablePaths sets the "paths" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePaths(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetPaths(*s)
	}
	return smu
}

// ClearPaths clears the value of the "paths" field.
func (smu *SysMenuUpdate) ClearPaths() *SysMenuUpdate {
	smu.mutation.ClearPaths()
	return smu
}

// SetMenuType sets the "menuType" field.
func (smu *SysMenuUpdate) SetMenuType(s string) *SysMenuUpdate {
	smu.mutation.SetMenuType(s)
	return smu
}

// SetNillableMenuType sets the "menuType" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableMenuType(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetMenuType(*s)
	}
	return smu
}

// ClearMenuType clears the value of the "menuType" field.
func (smu *SysMenuUpdate) ClearMenuType() *SysMenuUpdate {
	smu.mutation.ClearMenuType()
	return smu
}

// SetAction sets the "action" field.
func (smu *SysMenuUpdate) SetAction(s string) *SysMenuUpdate {
	smu.mutation.SetAction(s)
	return smu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableAction(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetAction(*s)
	}
	return smu
}

// ClearAction clears the value of the "action" field.
func (smu *SysMenuUpdate) ClearAction() *SysMenuUpdate {
	smu.mutation.ClearAction()
	return smu
}

// SetPermission sets the "permission" field.
func (smu *SysMenuUpdate) SetPermission(s string) *SysMenuUpdate {
	smu.mutation.SetPermission(s)
	return smu
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePermission(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetPermission(*s)
	}
	return smu
}

// ClearPermission clears the value of the "permission" field.
func (smu *SysMenuUpdate) ClearPermission() *SysMenuUpdate {
	smu.mutation.ClearPermission()
	return smu
}

// SetIgnoreKeepAlive sets the "ignoreKeepAlive" field.
func (smu *SysMenuUpdate) SetIgnoreKeepAlive(b bool) *SysMenuUpdate {
	smu.mutation.SetIgnoreKeepAlive(b)
	return smu
}

// SetNillableIgnoreKeepAlive sets the "ignoreKeepAlive" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIgnoreKeepAlive(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetIgnoreKeepAlive(*b)
	}
	return smu
}

// ClearIgnoreKeepAlive clears the value of the "ignoreKeepAlive" field.
func (smu *SysMenuUpdate) ClearIgnoreKeepAlive() *SysMenuUpdate {
	smu.mutation.ClearIgnoreKeepAlive()
	return smu
}

// SetHideBreadcrumb sets the "hideBreadcrumb" field.
func (smu *SysMenuUpdate) SetHideBreadcrumb(b bool) *SysMenuUpdate {
	smu.mutation.SetHideBreadcrumb(b)
	return smu
}

// SetNillableHideBreadcrumb sets the "hideBreadcrumb" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableHideBreadcrumb(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetHideBreadcrumb(*b)
	}
	return smu
}

// ClearHideBreadcrumb clears the value of the "hideBreadcrumb" field.
func (smu *SysMenuUpdate) ClearHideBreadcrumb() *SysMenuUpdate {
	smu.mutation.ClearHideBreadcrumb()
	return smu
}

// SetHideChildrenInMenu sets the "hideChildrenInMenu" field.
func (smu *SysMenuUpdate) SetHideChildrenInMenu(b bool) *SysMenuUpdate {
	smu.mutation.SetHideChildrenInMenu(b)
	return smu
}

// SetNillableHideChildrenInMenu sets the "hideChildrenInMenu" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableHideChildrenInMenu(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetHideChildrenInMenu(*b)
	}
	return smu
}

// ClearHideChildrenInMenu clears the value of the "hideChildrenInMenu" field.
func (smu *SysMenuUpdate) ClearHideChildrenInMenu() *SysMenuUpdate {
	smu.mutation.ClearHideChildrenInMenu()
	return smu
}

// SetComponent sets the "component" field.
func (smu *SysMenuUpdate) SetComponent(s string) *SysMenuUpdate {
	smu.mutation.SetComponent(s)
	return smu
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableComponent(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetComponent(*s)
	}
	return smu
}

// ClearComponent clears the value of the "component" field.
func (smu *SysMenuUpdate) ClearComponent() *SysMenuUpdate {
	smu.mutation.ClearComponent()
	return smu
}

// SetSort sets the "sort" field.
func (smu *SysMenuUpdate) SetSort(i int32) *SysMenuUpdate {
	smu.mutation.ResetSort()
	smu.mutation.SetSort(i)
	return smu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableSort(i *int32) *SysMenuUpdate {
	if i != nil {
		smu.SetSort(*i)
	}
	return smu
}

// AddSort adds i to the "sort" field.
func (smu *SysMenuUpdate) AddSort(i int32) *SysMenuUpdate {
	smu.mutation.AddSort(i)
	return smu
}

// ClearSort clears the value of the "sort" field.
func (smu *SysMenuUpdate) ClearSort() *SysMenuUpdate {
	smu.mutation.ClearSort()
	return smu
}

// SetHideMenu sets the "hideMenu" field.
func (smu *SysMenuUpdate) SetHideMenu(b bool) *SysMenuUpdate {
	smu.mutation.SetHideMenu(b)
	return smu
}

// SetNillableHideMenu sets the "hideMenu" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableHideMenu(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetHideMenu(*b)
	}
	return smu
}

// ClearHideMenu clears the value of the "hideMenu" field.
func (smu *SysMenuUpdate) ClearHideMenu() *SysMenuUpdate {
	smu.mutation.ClearHideMenu()
	return smu
}

// SetFrameSrc sets the "frameSrc" field.
func (smu *SysMenuUpdate) SetFrameSrc(s string) *SysMenuUpdate {
	smu.mutation.SetFrameSrc(s)
	return smu
}

// SetNillableFrameSrc sets the "frameSrc" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableFrameSrc(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetFrameSrc(*s)
	}
	return smu
}

// ClearFrameSrc clears the value of the "frameSrc" field.
func (smu *SysMenuUpdate) ClearFrameSrc() *SysMenuUpdate {
	smu.mutation.ClearFrameSrc()
	return smu
}

// SetState sets the "state" field.
func (smu *SysMenuUpdate) SetState(s sysmenu.State) *SysMenuUpdate {
	smu.mutation.SetState(s)
	return smu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableState(s *sysmenu.State) *SysMenuUpdate {
	if s != nil {
		smu.SetState(*s)
	}
	return smu
}

// SetCheckPermission sets the "checkPermission" field.
func (smu *SysMenuUpdate) SetCheckPermission(b bool) *SysMenuUpdate {
	smu.mutation.SetCheckPermission(b)
	return smu
}

// SetNillableCheckPermission sets the "checkPermission" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableCheckPermission(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetCheckPermission(*b)
	}
	return smu
}

// SetOperation sets the "operation" field.
func (smu *SysMenuUpdate) SetOperation(s string) *SysMenuUpdate {
	smu.mutation.SetOperation(s)
	return smu
}

// SetUpdatedAt sets the "updatedAt" field.
func (smu *SysMenuUpdate) SetUpdatedAt(t time.Time) *SysMenuUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// SetCreateBy sets the "createBy" field.
func (smu *SysMenuUpdate) SetCreateBy(i int64) *SysMenuUpdate {
	smu.mutation.ResetCreateBy()
	smu.mutation.SetCreateBy(i)
	return smu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableCreateBy(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetCreateBy(*i)
	}
	return smu
}

// AddCreateBy adds i to the "createBy" field.
func (smu *SysMenuUpdate) AddCreateBy(i int64) *SysMenuUpdate {
	smu.mutation.AddCreateBy(i)
	return smu
}

// SetUpdateBy sets the "updateBy" field.
func (smu *SysMenuUpdate) SetUpdateBy(i int64) *SysMenuUpdate {
	smu.mutation.ResetUpdateBy()
	smu.mutation.SetUpdateBy(i)
	return smu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableUpdateBy(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetUpdateBy(*i)
	}
	return smu
}

// AddUpdateBy adds i to the "updateBy" field.
func (smu *SysMenuUpdate) AddUpdateBy(i int64) *SysMenuUpdate {
	smu.mutation.AddUpdateBy(i)
	return smu
}

// SetTenantId sets the "tenantId" field.
func (smu *SysMenuUpdate) SetTenantId(i int64) *SysMenuUpdate {
	smu.mutation.ResetTenantId()
	smu.mutation.SetTenantId(i)
	return smu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableTenantId(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetTenantId(*i)
	}
	return smu
}

// AddTenantId adds i to the "tenantId" field.
func (smu *SysMenuUpdate) AddTenantId(i int64) *SysMenuUpdate {
	smu.mutation.AddTenantId(i)
	return smu
}

// AddRoleIDs adds the "role" edge to the SysRole entity by IDs.
func (smu *SysMenuUpdate) AddRoleIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.AddRoleIDs(ids...)
	return smu
}

// AddRole adds the "role" edges to the SysRole entity.
func (smu *SysMenuUpdate) AddRole(s ...*SysRole) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddRoleIDs(ids...)
}

// SetParentID sets the "parent" edge to the SysMenu entity by ID.
func (smu *SysMenuUpdate) SetParentID(id int64) *SysMenuUpdate {
	smu.mutation.SetParentID(id)
	return smu
}

// SetParent sets the "parent" edge to the SysMenu entity.
func (smu *SysMenuUpdate) SetParent(s *SysMenu) *SysMenuUpdate {
	return smu.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysMenu entity by IDs.
func (smu *SysMenuUpdate) AddChildIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.AddChildIDs(ids...)
	return smu
}

// AddChildren adds the "children" edges to the SysMenu entity.
func (smu *SysMenuUpdate) AddChildren(s ...*SysMenu) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddChildIDs(ids...)
}

// Mutation returns the SysMenuMutation object of the builder.
func (smu *SysMenuUpdate) Mutation() *SysMenuMutation {
	return smu.mutation
}

// ClearRole clears all "role" edges to the SysRole entity.
func (smu *SysMenuUpdate) ClearRole() *SysMenuUpdate {
	smu.mutation.ClearRole()
	return smu
}

// RemoveRoleIDs removes the "role" edge to SysRole entities by IDs.
func (smu *SysMenuUpdate) RemoveRoleIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.RemoveRoleIDs(ids...)
	return smu
}

// RemoveRole removes "role" edges to SysRole entities.
func (smu *SysMenuUpdate) RemoveRole(s ...*SysRole) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the SysMenu entity.
func (smu *SysMenuUpdate) ClearParent() *SysMenuUpdate {
	smu.mutation.ClearParent()
	return smu
}

// ClearChildren clears all "children" edges to the SysMenu entity.
func (smu *SysMenuUpdate) ClearChildren() *SysMenuUpdate {
	smu.mutation.ClearChildren()
	return smu
}

// RemoveChildIDs removes the "children" edge to SysMenu entities by IDs.
func (smu *SysMenuUpdate) RemoveChildIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.RemoveChildIDs(ids...)
	return smu
}

// RemoveChildren removes "children" edges to SysMenu entities.
func (smu *SysMenuUpdate) RemoveChildren(s ...*SysMenu) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SysMenuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	smu.defaults()
	if len(smu.hooks) == 0 {
		if err = smu.check(); err != nil {
			return 0, err
		}
		affected, err = smu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smu.check(); err != nil {
				return 0, err
			}
			smu.mutation = mutation
			affected, err = smu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smu.hooks) - 1; i >= 0; i-- {
			if smu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SysMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SysMenuUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SysMenuUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SysMenuUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok {
		v := sysmenu.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *SysMenuUpdate) check() error {
	if v, ok := smu.mutation.State(); ok {
		if err := sysmenu.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	if _, ok := smu.mutation.ParentID(); smu.mutation.ParentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"parent\"")
	}
	return nil
}

func (smu *SysMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenu.Table,
			Columns: sysmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysmenu.FieldID,
			},
		},
	}
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldName,
		})
	}
	if value, ok := smu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldTitle,
		})
	}
	if value, ok := smu.mutation.Redirect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldRedirect,
		})
	}
	if smu.mutation.RedirectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldRedirect,
		})
	}
	if value, ok := smu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldIcon,
		})
	}
	if smu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldIcon,
		})
	}
	if value, ok := smu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPath,
		})
	}
	if smu.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPath,
		})
	}
	if value, ok := smu.mutation.Paths(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPaths,
		})
	}
	if smu.mutation.PathsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPaths,
		})
	}
	if value, ok := smu.mutation.MenuType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldMenuType,
		})
	}
	if smu.mutation.MenuTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldMenuType,
		})
	}
	if value, ok := smu.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldAction,
		})
	}
	if smu.mutation.ActionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldAction,
		})
	}
	if value, ok := smu.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPermission,
		})
	}
	if smu.mutation.PermissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPermission,
		})
	}
	if value, ok := smu.mutation.IgnoreKeepAlive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldIgnoreKeepAlive,
		})
	}
	if smu.mutation.IgnoreKeepAliveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldIgnoreKeepAlive,
		})
	}
	if value, ok := smu.mutation.HideBreadcrumb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldHideBreadcrumb,
		})
	}
	if smu.mutation.HideBreadcrumbCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldHideBreadcrumb,
		})
	}
	if value, ok := smu.mutation.HideChildrenInMenu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldHideChildrenInMenu,
		})
	}
	if smu.mutation.HideChildrenInMenuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldHideChildrenInMenu,
		})
	}
	if value, ok := smu.mutation.Component(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldComponent,
		})
	}
	if smu.mutation.ComponentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldComponent,
		})
	}
	if value, ok := smu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenu.FieldSort,
		})
	}
	if value, ok := smu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenu.FieldSort,
		})
	}
	if smu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysmenu.FieldSort,
		})
	}
	if value, ok := smu.mutation.HideMenu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldHideMenu,
		})
	}
	if smu.mutation.HideMenuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldHideMenu,
		})
	}
	if value, ok := smu.mutation.FrameSrc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldFrameSrc,
		})
	}
	if smu.mutation.FrameSrcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldFrameSrc,
		})
	}
	if value, ok := smu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sysmenu.FieldState,
		})
	}
	if value, ok := smu.mutation.CheckPermission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldCheckPermission,
		})
	}
	if value, ok := smu.mutation.Operation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldOperation,
		})
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenu.FieldUpdatedAt,
		})
	}
	if value, ok := smu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldCreateBy,
		})
	}
	if value, ok := smu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldCreateBy,
		})
	}
	if value, ok := smu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldUpdateBy,
		})
	}
	if value, ok := smu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldUpdateBy,
		})
	}
	if value, ok := smu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldTenantId,
		})
	}
	if value, ok := smu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldTenantId,
		})
	}
	if smu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedRoleIDs(); len(nodes) > 0 && !smu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !smu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysMenuUpdateOne is the builder for updating a single SysMenu entity.
type SysMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysMenuMutation
}

// SetParentId sets the "parentId" field.
func (smuo *SysMenuUpdateOne) SetParentId(i int64) *SysMenuUpdateOne {
	smuo.mutation.SetParentId(i)
	return smuo
}

// SetNillableParentId sets the "parentId" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableParentId(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetParentId(*i)
	}
	return smuo
}

// SetName sets the "name" field.
func (smuo *SysMenuUpdateOne) SetName(s string) *SysMenuUpdateOne {
	smuo.mutation.SetName(s)
	return smuo
}

// SetTitle sets the "title" field.
func (smuo *SysMenuUpdateOne) SetTitle(s string) *SysMenuUpdateOne {
	smuo.mutation.SetTitle(s)
	return smuo
}

// SetRedirect sets the "redirect" field.
func (smuo *SysMenuUpdateOne) SetRedirect(s string) *SysMenuUpdateOne {
	smuo.mutation.SetRedirect(s)
	return smuo
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableRedirect(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetRedirect(*s)
	}
	return smuo
}

// ClearRedirect clears the value of the "redirect" field.
func (smuo *SysMenuUpdateOne) ClearRedirect() *SysMenuUpdateOne {
	smuo.mutation.ClearRedirect()
	return smuo
}

// SetIcon sets the "icon" field.
func (smuo *SysMenuUpdateOne) SetIcon(s string) *SysMenuUpdateOne {
	smuo.mutation.SetIcon(s)
	return smuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIcon(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetIcon(*s)
	}
	return smuo
}

// ClearIcon clears the value of the "icon" field.
func (smuo *SysMenuUpdateOne) ClearIcon() *SysMenuUpdateOne {
	smuo.mutation.ClearIcon()
	return smuo
}

// SetPath sets the "path" field.
func (smuo *SysMenuUpdateOne) SetPath(s string) *SysMenuUpdateOne {
	smuo.mutation.SetPath(s)
	return smuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePath(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetPath(*s)
	}
	return smuo
}

// ClearPath clears the value of the "path" field.
func (smuo *SysMenuUpdateOne) ClearPath() *SysMenuUpdateOne {
	smuo.mutation.ClearPath()
	return smuo
}

// SetPaths sets the "paths" field.
func (smuo *SysMenuUpdateOne) SetPaths(s string) *SysMenuUpdateOne {
	smuo.mutation.SetPaths(s)
	return smuo
}

// SetNillablePaths sets the "paths" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePaths(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetPaths(*s)
	}
	return smuo
}

// ClearPaths clears the value of the "paths" field.
func (smuo *SysMenuUpdateOne) ClearPaths() *SysMenuUpdateOne {
	smuo.mutation.ClearPaths()
	return smuo
}

// SetMenuType sets the "menuType" field.
func (smuo *SysMenuUpdateOne) SetMenuType(s string) *SysMenuUpdateOne {
	smuo.mutation.SetMenuType(s)
	return smuo
}

// SetNillableMenuType sets the "menuType" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableMenuType(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetMenuType(*s)
	}
	return smuo
}

// ClearMenuType clears the value of the "menuType" field.
func (smuo *SysMenuUpdateOne) ClearMenuType() *SysMenuUpdateOne {
	smuo.mutation.ClearMenuType()
	return smuo
}

// SetAction sets the "action" field.
func (smuo *SysMenuUpdateOne) SetAction(s string) *SysMenuUpdateOne {
	smuo.mutation.SetAction(s)
	return smuo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableAction(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetAction(*s)
	}
	return smuo
}

// ClearAction clears the value of the "action" field.
func (smuo *SysMenuUpdateOne) ClearAction() *SysMenuUpdateOne {
	smuo.mutation.ClearAction()
	return smuo
}

// SetPermission sets the "permission" field.
func (smuo *SysMenuUpdateOne) SetPermission(s string) *SysMenuUpdateOne {
	smuo.mutation.SetPermission(s)
	return smuo
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePermission(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetPermission(*s)
	}
	return smuo
}

// ClearPermission clears the value of the "permission" field.
func (smuo *SysMenuUpdateOne) ClearPermission() *SysMenuUpdateOne {
	smuo.mutation.ClearPermission()
	return smuo
}

// SetIgnoreKeepAlive sets the "ignoreKeepAlive" field.
func (smuo *SysMenuUpdateOne) SetIgnoreKeepAlive(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetIgnoreKeepAlive(b)
	return smuo
}

// SetNillableIgnoreKeepAlive sets the "ignoreKeepAlive" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIgnoreKeepAlive(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetIgnoreKeepAlive(*b)
	}
	return smuo
}

// ClearIgnoreKeepAlive clears the value of the "ignoreKeepAlive" field.
func (smuo *SysMenuUpdateOne) ClearIgnoreKeepAlive() *SysMenuUpdateOne {
	smuo.mutation.ClearIgnoreKeepAlive()
	return smuo
}

// SetHideBreadcrumb sets the "hideBreadcrumb" field.
func (smuo *SysMenuUpdateOne) SetHideBreadcrumb(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetHideBreadcrumb(b)
	return smuo
}

// SetNillableHideBreadcrumb sets the "hideBreadcrumb" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableHideBreadcrumb(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetHideBreadcrumb(*b)
	}
	return smuo
}

// ClearHideBreadcrumb clears the value of the "hideBreadcrumb" field.
func (smuo *SysMenuUpdateOne) ClearHideBreadcrumb() *SysMenuUpdateOne {
	smuo.mutation.ClearHideBreadcrumb()
	return smuo
}

// SetHideChildrenInMenu sets the "hideChildrenInMenu" field.
func (smuo *SysMenuUpdateOne) SetHideChildrenInMenu(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetHideChildrenInMenu(b)
	return smuo
}

// SetNillableHideChildrenInMenu sets the "hideChildrenInMenu" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableHideChildrenInMenu(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetHideChildrenInMenu(*b)
	}
	return smuo
}

// ClearHideChildrenInMenu clears the value of the "hideChildrenInMenu" field.
func (smuo *SysMenuUpdateOne) ClearHideChildrenInMenu() *SysMenuUpdateOne {
	smuo.mutation.ClearHideChildrenInMenu()
	return smuo
}

// SetComponent sets the "component" field.
func (smuo *SysMenuUpdateOne) SetComponent(s string) *SysMenuUpdateOne {
	smuo.mutation.SetComponent(s)
	return smuo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableComponent(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetComponent(*s)
	}
	return smuo
}

// ClearComponent clears the value of the "component" field.
func (smuo *SysMenuUpdateOne) ClearComponent() *SysMenuUpdateOne {
	smuo.mutation.ClearComponent()
	return smuo
}

// SetSort sets the "sort" field.
func (smuo *SysMenuUpdateOne) SetSort(i int32) *SysMenuUpdateOne {
	smuo.mutation.ResetSort()
	smuo.mutation.SetSort(i)
	return smuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableSort(i *int32) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetSort(*i)
	}
	return smuo
}

// AddSort adds i to the "sort" field.
func (smuo *SysMenuUpdateOne) AddSort(i int32) *SysMenuUpdateOne {
	smuo.mutation.AddSort(i)
	return smuo
}

// ClearSort clears the value of the "sort" field.
func (smuo *SysMenuUpdateOne) ClearSort() *SysMenuUpdateOne {
	smuo.mutation.ClearSort()
	return smuo
}

// SetHideMenu sets the "hideMenu" field.
func (smuo *SysMenuUpdateOne) SetHideMenu(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetHideMenu(b)
	return smuo
}

// SetNillableHideMenu sets the "hideMenu" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableHideMenu(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetHideMenu(*b)
	}
	return smuo
}

// ClearHideMenu clears the value of the "hideMenu" field.
func (smuo *SysMenuUpdateOne) ClearHideMenu() *SysMenuUpdateOne {
	smuo.mutation.ClearHideMenu()
	return smuo
}

// SetFrameSrc sets the "frameSrc" field.
func (smuo *SysMenuUpdateOne) SetFrameSrc(s string) *SysMenuUpdateOne {
	smuo.mutation.SetFrameSrc(s)
	return smuo
}

// SetNillableFrameSrc sets the "frameSrc" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableFrameSrc(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetFrameSrc(*s)
	}
	return smuo
}

// ClearFrameSrc clears the value of the "frameSrc" field.
func (smuo *SysMenuUpdateOne) ClearFrameSrc() *SysMenuUpdateOne {
	smuo.mutation.ClearFrameSrc()
	return smuo
}

// SetState sets the "state" field.
func (smuo *SysMenuUpdateOne) SetState(s sysmenu.State) *SysMenuUpdateOne {
	smuo.mutation.SetState(s)
	return smuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableState(s *sysmenu.State) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetState(*s)
	}
	return smuo
}

// SetCheckPermission sets the "checkPermission" field.
func (smuo *SysMenuUpdateOne) SetCheckPermission(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetCheckPermission(b)
	return smuo
}

// SetNillableCheckPermission sets the "checkPermission" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableCheckPermission(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetCheckPermission(*b)
	}
	return smuo
}

// SetOperation sets the "operation" field.
func (smuo *SysMenuUpdateOne) SetOperation(s string) *SysMenuUpdateOne {
	smuo.mutation.SetOperation(s)
	return smuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (smuo *SysMenuUpdateOne) SetUpdatedAt(t time.Time) *SysMenuUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// SetCreateBy sets the "createBy" field.
func (smuo *SysMenuUpdateOne) SetCreateBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetCreateBy()
	smuo.mutation.SetCreateBy(i)
	return smuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableCreateBy(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetCreateBy(*i)
	}
	return smuo
}

// AddCreateBy adds i to the "createBy" field.
func (smuo *SysMenuUpdateOne) AddCreateBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddCreateBy(i)
	return smuo
}

// SetUpdateBy sets the "updateBy" field.
func (smuo *SysMenuUpdateOne) SetUpdateBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetUpdateBy()
	smuo.mutation.SetUpdateBy(i)
	return smuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableUpdateBy(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetUpdateBy(*i)
	}
	return smuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (smuo *SysMenuUpdateOne) AddUpdateBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddUpdateBy(i)
	return smuo
}

// SetTenantId sets the "tenantId" field.
func (smuo *SysMenuUpdateOne) SetTenantId(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetTenantId()
	smuo.mutation.SetTenantId(i)
	return smuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableTenantId(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetTenantId(*i)
	}
	return smuo
}

// AddTenantId adds i to the "tenantId" field.
func (smuo *SysMenuUpdateOne) AddTenantId(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddTenantId(i)
	return smuo
}

// AddRoleIDs adds the "role" edge to the SysRole entity by IDs.
func (smuo *SysMenuUpdateOne) AddRoleIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.AddRoleIDs(ids...)
	return smuo
}

// AddRole adds the "role" edges to the SysRole entity.
func (smuo *SysMenuUpdateOne) AddRole(s ...*SysRole) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddRoleIDs(ids...)
}

// SetParentID sets the "parent" edge to the SysMenu entity by ID.
func (smuo *SysMenuUpdateOne) SetParentID(id int64) *SysMenuUpdateOne {
	smuo.mutation.SetParentID(id)
	return smuo
}

// SetParent sets the "parent" edge to the SysMenu entity.
func (smuo *SysMenuUpdateOne) SetParent(s *SysMenu) *SysMenuUpdateOne {
	return smuo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysMenu entity by IDs.
func (smuo *SysMenuUpdateOne) AddChildIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.AddChildIDs(ids...)
	return smuo
}

// AddChildren adds the "children" edges to the SysMenu entity.
func (smuo *SysMenuUpdateOne) AddChildren(s ...*SysMenu) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddChildIDs(ids...)
}

// Mutation returns the SysMenuMutation object of the builder.
func (smuo *SysMenuUpdateOne) Mutation() *SysMenuMutation {
	return smuo.mutation
}

// ClearRole clears all "role" edges to the SysRole entity.
func (smuo *SysMenuUpdateOne) ClearRole() *SysMenuUpdateOne {
	smuo.mutation.ClearRole()
	return smuo
}

// RemoveRoleIDs removes the "role" edge to SysRole entities by IDs.
func (smuo *SysMenuUpdateOne) RemoveRoleIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.RemoveRoleIDs(ids...)
	return smuo
}

// RemoveRole removes "role" edges to SysRole entities.
func (smuo *SysMenuUpdateOne) RemoveRole(s ...*SysRole) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the SysMenu entity.
func (smuo *SysMenuUpdateOne) ClearParent() *SysMenuUpdateOne {
	smuo.mutation.ClearParent()
	return smuo
}

// ClearChildren clears all "children" edges to the SysMenu entity.
func (smuo *SysMenuUpdateOne) ClearChildren() *SysMenuUpdateOne {
	smuo.mutation.ClearChildren()
	return smuo
}

// RemoveChildIDs removes the "children" edge to SysMenu entities by IDs.
func (smuo *SysMenuUpdateOne) RemoveChildIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.RemoveChildIDs(ids...)
	return smuo
}

// RemoveChildren removes "children" edges to SysMenu entities.
func (smuo *SysMenuUpdateOne) RemoveChildren(s ...*SysMenu) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveChildIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SysMenuUpdateOne) Select(field string, fields ...string) *SysMenuUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SysMenu entity.
func (smuo *SysMenuUpdateOne) Save(ctx context.Context) (*SysMenu, error) {
	var (
		err  error
		node *SysMenu
	)
	smuo.defaults()
	if len(smuo.hooks) == 0 {
		if err = smuo.check(); err != nil {
			return nil, err
		}
		node, err = smuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smuo.check(); err != nil {
				return nil, err
			}
			smuo.mutation = mutation
			node, err = smuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smuo.hooks) - 1; i >= 0; i-- {
			if smuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) SaveX(ctx context.Context) *SysMenu {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SysMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SysMenuUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok {
		v := sysmenu.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *SysMenuUpdateOne) check() error {
	if v, ok := smuo.mutation.State(); ok {
		if err := sysmenu.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	if _, ok := smuo.mutation.ParentID(); smuo.mutation.ParentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"parent\"")
	}
	return nil
}

func (smuo *SysMenuUpdateOne) sqlSave(ctx context.Context) (_node *SysMenu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenu.Table,
			Columns: sysmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysmenu.FieldID,
			},
		},
	}
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysMenu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysmenu.FieldID)
		for _, f := range fields {
			if !sysmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldName,
		})
	}
	if value, ok := smuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldTitle,
		})
	}
	if value, ok := smuo.mutation.Redirect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldRedirect,
		})
	}
	if smuo.mutation.RedirectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldRedirect,
		})
	}
	if value, ok := smuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldIcon,
		})
	}
	if smuo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldIcon,
		})
	}
	if value, ok := smuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPath,
		})
	}
	if smuo.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPath,
		})
	}
	if value, ok := smuo.mutation.Paths(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPaths,
		})
	}
	if smuo.mutation.PathsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPaths,
		})
	}
	if value, ok := smuo.mutation.MenuType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldMenuType,
		})
	}
	if smuo.mutation.MenuTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldMenuType,
		})
	}
	if value, ok := smuo.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldAction,
		})
	}
	if smuo.mutation.ActionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldAction,
		})
	}
	if value, ok := smuo.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldPermission,
		})
	}
	if smuo.mutation.PermissionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldPermission,
		})
	}
	if value, ok := smuo.mutation.IgnoreKeepAlive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldIgnoreKeepAlive,
		})
	}
	if smuo.mutation.IgnoreKeepAliveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldIgnoreKeepAlive,
		})
	}
	if value, ok := smuo.mutation.HideBreadcrumb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldHideBreadcrumb,
		})
	}
	if smuo.mutation.HideBreadcrumbCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldHideBreadcrumb,
		})
	}
	if value, ok := smuo.mutation.HideChildrenInMenu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldHideChildrenInMenu,
		})
	}
	if smuo.mutation.HideChildrenInMenuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldHideChildrenInMenu,
		})
	}
	if value, ok := smuo.mutation.Component(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldComponent,
		})
	}
	if smuo.mutation.ComponentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldComponent,
		})
	}
	if value, ok := smuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenu.FieldSort,
		})
	}
	if value, ok := smuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenu.FieldSort,
		})
	}
	if smuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysmenu.FieldSort,
		})
	}
	if value, ok := smuo.mutation.HideMenu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldHideMenu,
		})
	}
	if smuo.mutation.HideMenuCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: sysmenu.FieldHideMenu,
		})
	}
	if value, ok := smuo.mutation.FrameSrc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldFrameSrc,
		})
	}
	if smuo.mutation.FrameSrcCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenu.FieldFrameSrc,
		})
	}
	if value, ok := smuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sysmenu.FieldState,
		})
	}
	if value, ok := smuo.mutation.CheckPermission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenu.FieldCheckPermission,
		})
	}
	if value, ok := smuo.mutation.Operation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenu.FieldOperation,
		})
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenu.FieldUpdatedAt,
		})
	}
	if value, ok := smuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldCreateBy,
		})
	}
	if value, ok := smuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldCreateBy,
		})
	}
	if value, ok := smuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldUpdateBy,
		})
	}
	if value, ok := smuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldUpdateBy,
		})
	}
	if value, ok := smuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldTenantId,
		})
	}
	if value, ok := smuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysmenu.FieldTenantId,
		})
	}
	if smuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedRoleIDs(); len(nodes) > 0 && !smuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.RoleTable,
			Columns: sysmenu.RolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !smuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysMenu{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
