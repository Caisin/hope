// Code generated by entc, DO NOT EDIT.

package activity

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ActivityCode applies equality check predicate on the "activityCode" field. It's identical to ActivityCodeEQ.
func ActivityCode(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityCode), v))
	})
}

// ActivityName applies equality check predicate on the "activityName" field. It's identical to ActivityNameEQ.
func ActivityName(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityName), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// RuleImgSc applies equality check predicate on the "ruleImgSc" field. It's identical to RuleImgScEQ.
func RuleImgSc(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgTc applies equality check predicate on the "ruleImgTc" field. It's identical to RuleImgTcEQ.
func RuleImgTc(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuleImgTc), v))
	})
}

// PopupImg applies equality check predicate on the "popupImg" field. It's identical to PopupImgEQ.
func PopupImg(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopupImg), v))
	})
}

// RegDays applies equality check predicate on the "regDays" field. It's identical to RegDaysEQ.
func RegDays(v int32) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegDays), v))
	})
}

// CycleType applies equality check predicate on the "cycleType" field. It's identical to CycleTypeEQ.
func CycleType(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCycleType), v))
	})
}

// EffectTime applies equality check predicate on the "effectTime" field. It's identical to EffectTimeEQ.
func EffectTime(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// ExpiredTime applies equality check predicate on the "expiredTime" field. It's identical to ExpiredTimeEQ.
func ExpiredTime(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// ActivityCodeEQ applies the EQ predicate on the "activityCode" field.
func ActivityCodeEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeNEQ applies the NEQ predicate on the "activityCode" field.
func ActivityCodeNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeIn applies the In predicate on the "activityCode" field.
func ActivityCodeIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivityCode), v...))
	})
}

// ActivityCodeNotIn applies the NotIn predicate on the "activityCode" field.
func ActivityCodeNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivityCode), v...))
	})
}

// ActivityCodeGT applies the GT predicate on the "activityCode" field.
func ActivityCodeGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeGTE applies the GTE predicate on the "activityCode" field.
func ActivityCodeGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeLT applies the LT predicate on the "activityCode" field.
func ActivityCodeLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeLTE applies the LTE predicate on the "activityCode" field.
func ActivityCodeLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeContains applies the Contains predicate on the "activityCode" field.
func ActivityCodeContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeHasPrefix applies the HasPrefix predicate on the "activityCode" field.
func ActivityCodeHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeHasSuffix applies the HasSuffix predicate on the "activityCode" field.
func ActivityCodeHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeIsNil applies the IsNil predicate on the "activityCode" field.
func ActivityCodeIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActivityCode)))
	})
}

// ActivityCodeNotNil applies the NotNil predicate on the "activityCode" field.
func ActivityCodeNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActivityCode)))
	})
}

// ActivityCodeEqualFold applies the EqualFold predicate on the "activityCode" field.
func ActivityCodeEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActivityCode), v))
	})
}

// ActivityCodeContainsFold applies the ContainsFold predicate on the "activityCode" field.
func ActivityCodeContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActivityCode), v))
	})
}

// ActivityNameEQ applies the EQ predicate on the "activityName" field.
func ActivityNameEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivityName), v))
	})
}

// ActivityNameNEQ applies the NEQ predicate on the "activityName" field.
func ActivityNameNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivityName), v))
	})
}

// ActivityNameIn applies the In predicate on the "activityName" field.
func ActivityNameIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivityName), v...))
	})
}

// ActivityNameNotIn applies the NotIn predicate on the "activityName" field.
func ActivityNameNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivityName), v...))
	})
}

// ActivityNameGT applies the GT predicate on the "activityName" field.
func ActivityNameGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActivityName), v))
	})
}

// ActivityNameGTE applies the GTE predicate on the "activityName" field.
func ActivityNameGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActivityName), v))
	})
}

// ActivityNameLT applies the LT predicate on the "activityName" field.
func ActivityNameLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActivityName), v))
	})
}

// ActivityNameLTE applies the LTE predicate on the "activityName" field.
func ActivityNameLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActivityName), v))
	})
}

// ActivityNameContains applies the Contains predicate on the "activityName" field.
func ActivityNameContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActivityName), v))
	})
}

// ActivityNameHasPrefix applies the HasPrefix predicate on the "activityName" field.
func ActivityNameHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActivityName), v))
	})
}

// ActivityNameHasSuffix applies the HasSuffix predicate on the "activityName" field.
func ActivityNameHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActivityName), v))
	})
}

// ActivityNameIsNil applies the IsNil predicate on the "activityName" field.
func ActivityNameIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldActivityName)))
	})
}

// ActivityNameNotNil applies the NotNil predicate on the "activityName" field.
func ActivityNameNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldActivityName)))
	})
}

// ActivityNameEqualFold applies the EqualFold predicate on the "activityName" field.
func ActivityNameEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActivityName), v))
	})
}

// ActivityNameContainsFold applies the ContainsFold predicate on the "activityName" field.
func ActivityNameContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActivityName), v))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSummary)))
	})
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSummary)))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// RuleImgScEQ applies the EQ predicate on the "ruleImgSc" field.
func RuleImgScEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScNEQ applies the NEQ predicate on the "ruleImgSc" field.
func RuleImgScNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScIn applies the In predicate on the "ruleImgSc" field.
func RuleImgScIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRuleImgSc), v...))
	})
}

// RuleImgScNotIn applies the NotIn predicate on the "ruleImgSc" field.
func RuleImgScNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRuleImgSc), v...))
	})
}

// RuleImgScGT applies the GT predicate on the "ruleImgSc" field.
func RuleImgScGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScGTE applies the GTE predicate on the "ruleImgSc" field.
func RuleImgScGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScLT applies the LT predicate on the "ruleImgSc" field.
func RuleImgScLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScLTE applies the LTE predicate on the "ruleImgSc" field.
func RuleImgScLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScContains applies the Contains predicate on the "ruleImgSc" field.
func RuleImgScContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScHasPrefix applies the HasPrefix predicate on the "ruleImgSc" field.
func RuleImgScHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScHasSuffix applies the HasSuffix predicate on the "ruleImgSc" field.
func RuleImgScHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScIsNil applies the IsNil predicate on the "ruleImgSc" field.
func RuleImgScIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRuleImgSc)))
	})
}

// RuleImgScNotNil applies the NotNil predicate on the "ruleImgSc" field.
func RuleImgScNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRuleImgSc)))
	})
}

// RuleImgScEqualFold applies the EqualFold predicate on the "ruleImgSc" field.
func RuleImgScEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgScContainsFold applies the ContainsFold predicate on the "ruleImgSc" field.
func RuleImgScContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRuleImgSc), v))
	})
}

// RuleImgTcEQ applies the EQ predicate on the "ruleImgTc" field.
func RuleImgTcEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcNEQ applies the NEQ predicate on the "ruleImgTc" field.
func RuleImgTcNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcIn applies the In predicate on the "ruleImgTc" field.
func RuleImgTcIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRuleImgTc), v...))
	})
}

// RuleImgTcNotIn applies the NotIn predicate on the "ruleImgTc" field.
func RuleImgTcNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRuleImgTc), v...))
	})
}

// RuleImgTcGT applies the GT predicate on the "ruleImgTc" field.
func RuleImgTcGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcGTE applies the GTE predicate on the "ruleImgTc" field.
func RuleImgTcGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcLT applies the LT predicate on the "ruleImgTc" field.
func RuleImgTcLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcLTE applies the LTE predicate on the "ruleImgTc" field.
func RuleImgTcLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcContains applies the Contains predicate on the "ruleImgTc" field.
func RuleImgTcContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcHasPrefix applies the HasPrefix predicate on the "ruleImgTc" field.
func RuleImgTcHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcHasSuffix applies the HasSuffix predicate on the "ruleImgTc" field.
func RuleImgTcHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcIsNil applies the IsNil predicate on the "ruleImgTc" field.
func RuleImgTcIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRuleImgTc)))
	})
}

// RuleImgTcNotNil applies the NotNil predicate on the "ruleImgTc" field.
func RuleImgTcNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRuleImgTc)))
	})
}

// RuleImgTcEqualFold applies the EqualFold predicate on the "ruleImgTc" field.
func RuleImgTcEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRuleImgTc), v))
	})
}

// RuleImgTcContainsFold applies the ContainsFold predicate on the "ruleImgTc" field.
func RuleImgTcContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRuleImgTc), v))
	})
}

// PopupImgEQ applies the EQ predicate on the "popupImg" field.
func PopupImgEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopupImg), v))
	})
}

// PopupImgNEQ applies the NEQ predicate on the "popupImg" field.
func PopupImgNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPopupImg), v))
	})
}

// PopupImgIn applies the In predicate on the "popupImg" field.
func PopupImgIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPopupImg), v...))
	})
}

// PopupImgNotIn applies the NotIn predicate on the "popupImg" field.
func PopupImgNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPopupImg), v...))
	})
}

// PopupImgGT applies the GT predicate on the "popupImg" field.
func PopupImgGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPopupImg), v))
	})
}

// PopupImgGTE applies the GTE predicate on the "popupImg" field.
func PopupImgGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPopupImg), v))
	})
}

// PopupImgLT applies the LT predicate on the "popupImg" field.
func PopupImgLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPopupImg), v))
	})
}

// PopupImgLTE applies the LTE predicate on the "popupImg" field.
func PopupImgLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPopupImg), v))
	})
}

// PopupImgContains applies the Contains predicate on the "popupImg" field.
func PopupImgContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPopupImg), v))
	})
}

// PopupImgHasPrefix applies the HasPrefix predicate on the "popupImg" field.
func PopupImgHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPopupImg), v))
	})
}

// PopupImgHasSuffix applies the HasSuffix predicate on the "popupImg" field.
func PopupImgHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPopupImg), v))
	})
}

// PopupImgIsNil applies the IsNil predicate on the "popupImg" field.
func PopupImgIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPopupImg)))
	})
}

// PopupImgNotNil applies the NotNil predicate on the "popupImg" field.
func PopupImgNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPopupImg)))
	})
}

// PopupImgEqualFold applies the EqualFold predicate on the "popupImg" field.
func PopupImgEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPopupImg), v))
	})
}

// PopupImgContainsFold applies the ContainsFold predicate on the "popupImg" field.
func PopupImgContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPopupImg), v))
	})
}

// RegDaysEQ applies the EQ predicate on the "regDays" field.
func RegDaysEQ(v int32) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegDays), v))
	})
}

// RegDaysNEQ applies the NEQ predicate on the "regDays" field.
func RegDaysNEQ(v int32) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegDays), v))
	})
}

// RegDaysIn applies the In predicate on the "regDays" field.
func RegDaysIn(vs ...int32) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegDays), v...))
	})
}

// RegDaysNotIn applies the NotIn predicate on the "regDays" field.
func RegDaysNotIn(vs ...int32) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegDays), v...))
	})
}

// RegDaysGT applies the GT predicate on the "regDays" field.
func RegDaysGT(v int32) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegDays), v))
	})
}

// RegDaysGTE applies the GTE predicate on the "regDays" field.
func RegDaysGTE(v int32) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegDays), v))
	})
}

// RegDaysLT applies the LT predicate on the "regDays" field.
func RegDaysLT(v int32) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegDays), v))
	})
}

// RegDaysLTE applies the LTE predicate on the "regDays" field.
func RegDaysLTE(v int32) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegDays), v))
	})
}

// RegDaysIsNil applies the IsNil predicate on the "regDays" field.
func RegDaysIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRegDays)))
	})
}

// RegDaysNotNil applies the NotNil predicate on the "regDays" field.
func RegDaysNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRegDays)))
	})
}

// CycleTypeEQ applies the EQ predicate on the "cycleType" field.
func CycleTypeEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCycleType), v))
	})
}

// CycleTypeNEQ applies the NEQ predicate on the "cycleType" field.
func CycleTypeNEQ(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCycleType), v))
	})
}

// CycleTypeIn applies the In predicate on the "cycleType" field.
func CycleTypeIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCycleType), v...))
	})
}

// CycleTypeNotIn applies the NotIn predicate on the "cycleType" field.
func CycleTypeNotIn(vs ...string) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCycleType), v...))
	})
}

// CycleTypeGT applies the GT predicate on the "cycleType" field.
func CycleTypeGT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCycleType), v))
	})
}

// CycleTypeGTE applies the GTE predicate on the "cycleType" field.
func CycleTypeGTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCycleType), v))
	})
}

// CycleTypeLT applies the LT predicate on the "cycleType" field.
func CycleTypeLT(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCycleType), v))
	})
}

// CycleTypeLTE applies the LTE predicate on the "cycleType" field.
func CycleTypeLTE(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCycleType), v))
	})
}

// CycleTypeContains applies the Contains predicate on the "cycleType" field.
func CycleTypeContains(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCycleType), v))
	})
}

// CycleTypeHasPrefix applies the HasPrefix predicate on the "cycleType" field.
func CycleTypeHasPrefix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCycleType), v))
	})
}

// CycleTypeHasSuffix applies the HasSuffix predicate on the "cycleType" field.
func CycleTypeHasSuffix(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCycleType), v))
	})
}

// CycleTypeIsNil applies the IsNil predicate on the "cycleType" field.
func CycleTypeIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCycleType)))
	})
}

// CycleTypeNotNil applies the NotNil predicate on the "cycleType" field.
func CycleTypeNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCycleType)))
	})
}

// CycleTypeEqualFold applies the EqualFold predicate on the "cycleType" field.
func CycleTypeEqualFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCycleType), v))
	})
}

// CycleTypeContainsFold applies the ContainsFold predicate on the "cycleType" field.
func CycleTypeContainsFold(v string) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCycleType), v))
	})
}

// EffectTimeEQ applies the EQ predicate on the "effectTime" field.
func EffectTimeEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeNEQ applies the NEQ predicate on the "effectTime" field.
func EffectTimeNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeIn applies the In predicate on the "effectTime" field.
func EffectTimeIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeNotIn applies the NotIn predicate on the "effectTime" field.
func EffectTimeNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeGT applies the GT predicate on the "effectTime" field.
func EffectTimeGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeGTE applies the GTE predicate on the "effectTime" field.
func EffectTimeGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLT applies the LT predicate on the "effectTime" field.
func EffectTimeLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLTE applies the LTE predicate on the "effectTime" field.
func EffectTimeLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEffectTime), v))
	})
}

// EffectTimeIsNil applies the IsNil predicate on the "effectTime" field.
func EffectTimeIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEffectTime)))
	})
}

// EffectTimeNotNil applies the NotNil predicate on the "effectTime" field.
func EffectTimeNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEffectTime)))
	})
}

// ExpiredTimeEQ applies the EQ predicate on the "expiredTime" field.
func ExpiredTimeEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeNEQ applies the NEQ predicate on the "expiredTime" field.
func ExpiredTimeNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeIn applies the In predicate on the "expiredTime" field.
func ExpiredTimeIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeNotIn applies the NotIn predicate on the "expiredTime" field.
func ExpiredTimeNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeGT applies the GT predicate on the "expiredTime" field.
func ExpiredTimeGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeGTE applies the GTE predicate on the "expiredTime" field.
func ExpiredTimeGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLT applies the LT predicate on the "expiredTime" field.
func ExpiredTimeLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLTE applies the LTE predicate on the "expiredTime" field.
func ExpiredTimeLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeIsNil applies the IsNil predicate on the "expiredTime" field.
func ExpiredTimeIsNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExpiredTime)))
	})
}

// ExpiredTimeNotNil applies the NotNil predicate on the "expiredTime" field.
func ExpiredTimeNotNil() predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExpiredTime)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.Activity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Activity) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Activity) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Activity) predicate.Activity {
	return predicate.Activity(func(s *sql.Selector) {
		p(s.Not())
	})
}
