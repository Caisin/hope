// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/predicate"
	"hope/apps/param/internal/data/ent/task"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTaskName sets the "taskName" field.
func (tu *TaskUpdate) SetTaskName(s string) *TaskUpdate {
	tu.mutation.SetTaskName(s)
	return tu
}

// SetNillableTaskName sets the "taskName" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTaskName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTaskName(*s)
	}
	return tu
}

// ClearTaskName clears the value of the "taskName" field.
func (tu *TaskUpdate) ClearTaskName() *TaskUpdate {
	tu.mutation.ClearTaskName()
	return tu
}

// SetTaskGroup sets the "taskGroup" field.
func (tu *TaskUpdate) SetTaskGroup(s string) *TaskUpdate {
	tu.mutation.SetTaskGroup(s)
	return tu
}

// SetNillableTaskGroup sets the "taskGroup" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTaskGroup(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTaskGroup(*s)
	}
	return tu
}

// ClearTaskGroup clears the value of the "taskGroup" field.
func (tu *TaskUpdate) ClearTaskGroup() *TaskUpdate {
	tu.mutation.ClearTaskGroup()
	return tu
}

// SetUnit sets the "unit" field.
func (tu *TaskUpdate) SetUnit(s string) *TaskUpdate {
	tu.mutation.SetUnit(s)
	return tu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUnit(s *string) *TaskUpdate {
	if s != nil {
		tu.SetUnit(*s)
	}
	return tu
}

// ClearUnit clears the value of the "unit" field.
func (tu *TaskUpdate) ClearUnit() *TaskUpdate {
	tu.mutation.ClearUnit()
	return tu
}

// SetTopic sets the "topic" field.
func (tu *TaskUpdate) SetTopic(s string) *TaskUpdate {
	tu.mutation.SetTopic(s)
	return tu
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTopic(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTopic(*s)
	}
	return tu
}

// ClearTopic clears the value of the "topic" field.
func (tu *TaskUpdate) ClearTopic() *TaskUpdate {
	tu.mutation.ClearTopic()
	return tu
}

// SetFunction sets the "function" field.
func (tu *TaskUpdate) SetFunction(s string) *TaskUpdate {
	tu.mutation.SetFunction(s)
	return tu
}

// SetNillableFunction sets the "function" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableFunction(s *string) *TaskUpdate {
	if s != nil {
		tu.SetFunction(*s)
	}
	return tu
}

// ClearFunction clears the value of the "function" field.
func (tu *TaskUpdate) ClearFunction() *TaskUpdate {
	tu.mutation.ClearFunction()
	return tu
}

// SetTaskCode sets the "taskCode" field.
func (tu *TaskUpdate) SetTaskCode(s string) *TaskUpdate {
	tu.mutation.SetTaskCode(s)
	return tu
}

// SetNillableTaskCode sets the "taskCode" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTaskCode(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTaskCode(*s)
	}
	return tu
}

// ClearTaskCode clears the value of the "taskCode" field.
func (tu *TaskUpdate) ClearTaskCode() *TaskUpdate {
	tu.mutation.ClearTaskCode()
	return tu
}

// SetPreTask sets the "preTask" field.
func (tu *TaskUpdate) SetPreTask(i int64) *TaskUpdate {
	tu.mutation.ResetPreTask()
	tu.mutation.SetPreTask(i)
	return tu
}

// SetNillablePreTask sets the "preTask" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePreTask(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetPreTask(*i)
	}
	return tu
}

// AddPreTask adds i to the "preTask" field.
func (tu *TaskUpdate) AddPreTask(i int64) *TaskUpdate {
	tu.mutation.AddPreTask(i)
	return tu
}

// ClearPreTask clears the value of the "preTask" field.
func (tu *TaskUpdate) ClearPreTask() *TaskUpdate {
	tu.mutation.ClearPreTask()
	return tu
}

// SetNovelId sets the "novelId" field.
func (tu *TaskUpdate) SetNovelId(i int64) *TaskUpdate {
	tu.mutation.ResetNovelId()
	tu.mutation.SetNovelId(i)
	return tu
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNovelId(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetNovelId(*i)
	}
	return tu
}

// AddNovelId adds i to the "novelId" field.
func (tu *TaskUpdate) AddNovelId(i int64) *TaskUpdate {
	tu.mutation.AddNovelId(i)
	return tu
}

// ClearNovelId clears the value of the "novelId" field.
func (tu *TaskUpdate) ClearNovelId() *TaskUpdate {
	tu.mutation.ClearNovelId()
	return tu
}

// SetCycleType sets the "cycleType" field.
func (tu *TaskUpdate) SetCycleType(s string) *TaskUpdate {
	tu.mutation.SetCycleType(s)
	return tu
}

// SetNillableCycleType sets the "cycleType" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCycleType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetCycleType(*s)
	}
	return tu
}

// ClearCycleType clears the value of the "cycleType" field.
func (tu *TaskUpdate) ClearCycleType() *TaskUpdate {
	tu.mutation.ClearCycleType()
	return tu
}

// SetRemark sets the "remark" field.
func (tu *TaskUpdate) SetRemark(s string) *TaskUpdate {
	tu.mutation.SetRemark(s)
	return tu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRemark(s *string) *TaskUpdate {
	if s != nil {
		tu.SetRemark(*s)
	}
	return tu
}

// ClearRemark clears the value of the "remark" field.
func (tu *TaskUpdate) ClearRemark() *TaskUpdate {
	tu.mutation.ClearRemark()
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TaskUpdate) SetAmount(i int64) *TaskUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(i)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAmount(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetAmount(*i)
	}
	return tu
}

// AddAmount adds i to the "amount" field.
func (tu *TaskUpdate) AddAmount(i int64) *TaskUpdate {
	tu.mutation.AddAmount(i)
	return tu
}

// ClearAmount clears the value of the "amount" field.
func (tu *TaskUpdate) ClearAmount() *TaskUpdate {
	tu.mutation.ClearAmount()
	return tu
}

// SetReward sets the "reward" field.
func (tu *TaskUpdate) SetReward(i int64) *TaskUpdate {
	tu.mutation.ResetReward()
	tu.mutation.SetReward(i)
	return tu
}

// SetNillableReward sets the "reward" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableReward(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetReward(*i)
	}
	return tu
}

// AddReward adds i to the "reward" field.
func (tu *TaskUpdate) AddReward(i int64) *TaskUpdate {
	tu.mutation.AddReward(i)
	return tu
}

// ClearReward clears the value of the "reward" field.
func (tu *TaskUpdate) ClearReward() *TaskUpdate {
	tu.mutation.ClearReward()
	return tu
}

// SetAmountItem sets the "amountItem" field.
func (tu *TaskUpdate) SetAmountItem(i int32) *TaskUpdate {
	tu.mutation.ResetAmountItem()
	tu.mutation.SetAmountItem(i)
	return tu
}

// SetNillableAmountItem sets the "amountItem" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAmountItem(i *int32) *TaskUpdate {
	if i != nil {
		tu.SetAmountItem(*i)
	}
	return tu
}

// AddAmountItem adds i to the "amountItem" field.
func (tu *TaskUpdate) AddAmountItem(i int32) *TaskUpdate {
	tu.mutation.AddAmountItem(i)
	return tu
}

// ClearAmountItem clears the value of the "amountItem" field.
func (tu *TaskUpdate) ClearAmountItem() *TaskUpdate {
	tu.mutation.ClearAmountItem()
	return tu
}

// SetRewardItem sets the "rewardItem" field.
func (tu *TaskUpdate) SetRewardItem(i int32) *TaskUpdate {
	tu.mutation.ResetRewardItem()
	tu.mutation.SetRewardItem(i)
	return tu
}

// SetNillableRewardItem sets the "rewardItem" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRewardItem(i *int32) *TaskUpdate {
	if i != nil {
		tu.SetRewardItem(*i)
	}
	return tu
}

// AddRewardItem adds i to the "rewardItem" field.
func (tu *TaskUpdate) AddRewardItem(i int32) *TaskUpdate {
	tu.mutation.AddRewardItem(i)
	return tu
}

// ClearRewardItem clears the value of the "rewardItem" field.
func (tu *TaskUpdate) ClearRewardItem() *TaskUpdate {
	tu.mutation.ClearRewardItem()
	return tu
}

// SetTargetNames sets the "targetNames" field.
func (tu *TaskUpdate) SetTargetNames(s string) *TaskUpdate {
	tu.mutation.SetTargetNames(s)
	return tu
}

// SetNillableTargetNames sets the "targetNames" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTargetNames(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTargetNames(*s)
	}
	return tu
}

// ClearTargetNames clears the value of the "targetNames" field.
func (tu *TaskUpdate) ClearTargetNames() *TaskUpdate {
	tu.mutation.ClearTargetNames()
	return tu
}

// SetTargetAmounts sets the "targetAmounts" field.
func (tu *TaskUpdate) SetTargetAmounts(s string) *TaskUpdate {
	tu.mutation.SetTargetAmounts(s)
	return tu
}

// SetNillableTargetAmounts sets the "targetAmounts" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTargetAmounts(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTargetAmounts(*s)
	}
	return tu
}

// ClearTargetAmounts clears the value of the "targetAmounts" field.
func (tu *TaskUpdate) ClearTargetAmounts() *TaskUpdate {
	tu.mutation.ClearTargetAmounts()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(b bool) *TaskUpdate {
	tu.mutation.SetStatus(b)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetStatus(*b)
	}
	return tu
}

// ClearStatus clears the value of the "status" field.
func (tu *TaskUpdate) ClearStatus() *TaskUpdate {
	tu.mutation.ClearStatus()
	return tu
}

// SetSortNum sets the "sortNum" field.
func (tu *TaskUpdate) SetSortNum(i int64) *TaskUpdate {
	tu.mutation.ResetSortNum()
	tu.mutation.SetSortNum(i)
	return tu
}

// SetNillableSortNum sets the "sortNum" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSortNum(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetSortNum(*i)
	}
	return tu
}

// AddSortNum adds i to the "sortNum" field.
func (tu *TaskUpdate) AddSortNum(i int64) *TaskUpdate {
	tu.mutation.AddSortNum(i)
	return tu
}

// ClearSortNum clears the value of the "sortNum" field.
func (tu *TaskUpdate) ClearSortNum() *TaskUpdate {
	tu.mutation.ClearSortNum()
	return tu
}

// SetActionType sets the "actionType" field.
func (tu *TaskUpdate) SetActionType(s string) *TaskUpdate {
	tu.mutation.SetActionType(s)
	return tu
}

// SetNillableActionType sets the "actionType" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableActionType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetActionType(*s)
	}
	return tu
}

// ClearActionType clears the value of the "actionType" field.
func (tu *TaskUpdate) ClearActionType() *TaskUpdate {
	tu.mutation.ClearActionType()
	return tu
}

// SetEffectTime sets the "effectTime" field.
func (tu *TaskUpdate) SetEffectTime(t time.Time) *TaskUpdate {
	tu.mutation.SetEffectTime(t)
	return tu
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEffectTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetEffectTime(*t)
	}
	return tu
}

// SetExpiredTime sets the "expiredTime" field.
func (tu *TaskUpdate) SetExpiredTime(t time.Time) *TaskUpdate {
	tu.mutation.SetExpiredTime(t)
	return tu
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableExpiredTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetExpiredTime(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updatedAt" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetCreateBy sets the "createBy" field.
func (tu *TaskUpdate) SetCreateBy(i int64) *TaskUpdate {
	tu.mutation.ResetCreateBy()
	tu.mutation.SetCreateBy(i)
	return tu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreateBy(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetCreateBy(*i)
	}
	return tu
}

// AddCreateBy adds i to the "createBy" field.
func (tu *TaskUpdate) AddCreateBy(i int64) *TaskUpdate {
	tu.mutation.AddCreateBy(i)
	return tu
}

// SetUpdateBy sets the "updateBy" field.
func (tu *TaskUpdate) SetUpdateBy(i int64) *TaskUpdate {
	tu.mutation.ResetUpdateBy()
	tu.mutation.SetUpdateBy(i)
	return tu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdateBy(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetUpdateBy(*i)
	}
	return tu
}

// AddUpdateBy adds i to the "updateBy" field.
func (tu *TaskUpdate) AddUpdateBy(i int64) *TaskUpdate {
	tu.mutation.AddUpdateBy(i)
	return tu
}

// SetTenantId sets the "tenantId" field.
func (tu *TaskUpdate) SetTenantId(i int64) *TaskUpdate {
	tu.mutation.ResetTenantId()
	tu.mutation.SetTenantId(i)
	return tu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTenantId(i *int64) *TaskUpdate {
	if i != nil {
		tu.SetTenantId(*i)
	}
	return tu
}

// AddTenantId adds i to the "tenantId" field.
func (tu *TaskUpdate) AddTenantId(i int64) *TaskUpdate {
	tu.mutation.AddTenantId(i)
	return tu
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: task.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TaskName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTaskName,
		})
	}
	if tu.mutation.TaskNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTaskName,
		})
	}
	if value, ok := tu.mutation.TaskGroup(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTaskGroup,
		})
	}
	if tu.mutation.TaskGroupCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTaskGroup,
		})
	}
	if value, ok := tu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldUnit,
		})
	}
	if tu.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldUnit,
		})
	}
	if value, ok := tu.mutation.Topic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTopic,
		})
	}
	if tu.mutation.TopicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTopic,
		})
	}
	if value, ok := tu.mutation.Function(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldFunction,
		})
	}
	if tu.mutation.FunctionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldFunction,
		})
	}
	if value, ok := tu.mutation.TaskCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTaskCode,
		})
	}
	if tu.mutation.TaskCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTaskCode,
		})
	}
	if value, ok := tu.mutation.PreTask(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldPreTask,
		})
	}
	if value, ok := tu.mutation.AddedPreTask(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldPreTask,
		})
	}
	if tu.mutation.PreTaskCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldPreTask,
		})
	}
	if value, ok := tu.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldNovelId,
		})
	}
	if value, ok := tu.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldNovelId,
		})
	}
	if tu.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldNovelId,
		})
	}
	if value, ok := tu.mutation.CycleType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCycleType,
		})
	}
	if tu.mutation.CycleTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldCycleType,
		})
	}
	if value, ok := tu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldRemark,
		})
	}
	if tu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldRemark,
		})
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldAmount,
		})
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldAmount,
		})
	}
	if tu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldAmount,
		})
	}
	if value, ok := tu.mutation.Reward(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldReward,
		})
	}
	if value, ok := tu.mutation.AddedReward(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldReward,
		})
	}
	if tu.mutation.RewardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldReward,
		})
	}
	if value, ok := tu.mutation.AmountItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldAmountItem,
		})
	}
	if value, ok := tu.mutation.AddedAmountItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldAmountItem,
		})
	}
	if tu.mutation.AmountItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: task.FieldAmountItem,
		})
	}
	if value, ok := tu.mutation.RewardItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldRewardItem,
		})
	}
	if value, ok := tu.mutation.AddedRewardItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldRewardItem,
		})
	}
	if tu.mutation.RewardItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: task.FieldRewardItem,
		})
	}
	if value, ok := tu.mutation.TargetNames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTargetNames,
		})
	}
	if tu.mutation.TargetNamesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTargetNames,
		})
	}
	if value, ok := tu.mutation.TargetAmounts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTargetAmounts,
		})
	}
	if tu.mutation.TargetAmountsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTargetAmounts,
		})
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: task.FieldStatus,
		})
	}
	if tu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: task.FieldStatus,
		})
	}
	if value, ok := tu.mutation.SortNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldSortNum,
		})
	}
	if value, ok := tu.mutation.AddedSortNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldSortNum,
		})
	}
	if tu.mutation.SortNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldSortNum,
		})
	}
	if value, ok := tu.mutation.ActionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldActionType,
		})
	}
	if tu.mutation.ActionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldActionType,
		})
	}
	if value, ok := tu.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldEffectTime,
		})
	}
	if value, ok := tu.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldExpiredTime,
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldCreateBy,
		})
	}
	if value, ok := tu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldCreateBy,
		})
	}
	if value, ok := tu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldUpdateBy,
		})
	}
	if value, ok := tu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldUpdateBy,
		})
	}
	if value, ok := tu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldTenantId,
		})
	}
	if value, ok := tu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTaskName sets the "taskName" field.
func (tuo *TaskUpdateOne) SetTaskName(s string) *TaskUpdateOne {
	tuo.mutation.SetTaskName(s)
	return tuo
}

// SetNillableTaskName sets the "taskName" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTaskName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTaskName(*s)
	}
	return tuo
}

// ClearTaskName clears the value of the "taskName" field.
func (tuo *TaskUpdateOne) ClearTaskName() *TaskUpdateOne {
	tuo.mutation.ClearTaskName()
	return tuo
}

// SetTaskGroup sets the "taskGroup" field.
func (tuo *TaskUpdateOne) SetTaskGroup(s string) *TaskUpdateOne {
	tuo.mutation.SetTaskGroup(s)
	return tuo
}

// SetNillableTaskGroup sets the "taskGroup" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTaskGroup(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTaskGroup(*s)
	}
	return tuo
}

// ClearTaskGroup clears the value of the "taskGroup" field.
func (tuo *TaskUpdateOne) ClearTaskGroup() *TaskUpdateOne {
	tuo.mutation.ClearTaskGroup()
	return tuo
}

// SetUnit sets the "unit" field.
func (tuo *TaskUpdateOne) SetUnit(s string) *TaskUpdateOne {
	tuo.mutation.SetUnit(s)
	return tuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUnit(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetUnit(*s)
	}
	return tuo
}

// ClearUnit clears the value of the "unit" field.
func (tuo *TaskUpdateOne) ClearUnit() *TaskUpdateOne {
	tuo.mutation.ClearUnit()
	return tuo
}

// SetTopic sets the "topic" field.
func (tuo *TaskUpdateOne) SetTopic(s string) *TaskUpdateOne {
	tuo.mutation.SetTopic(s)
	return tuo
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTopic(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTopic(*s)
	}
	return tuo
}

// ClearTopic clears the value of the "topic" field.
func (tuo *TaskUpdateOne) ClearTopic() *TaskUpdateOne {
	tuo.mutation.ClearTopic()
	return tuo
}

// SetFunction sets the "function" field.
func (tuo *TaskUpdateOne) SetFunction(s string) *TaskUpdateOne {
	tuo.mutation.SetFunction(s)
	return tuo
}

// SetNillableFunction sets the "function" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableFunction(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetFunction(*s)
	}
	return tuo
}

// ClearFunction clears the value of the "function" field.
func (tuo *TaskUpdateOne) ClearFunction() *TaskUpdateOne {
	tuo.mutation.ClearFunction()
	return tuo
}

// SetTaskCode sets the "taskCode" field.
func (tuo *TaskUpdateOne) SetTaskCode(s string) *TaskUpdateOne {
	tuo.mutation.SetTaskCode(s)
	return tuo
}

// SetNillableTaskCode sets the "taskCode" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTaskCode(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTaskCode(*s)
	}
	return tuo
}

// ClearTaskCode clears the value of the "taskCode" field.
func (tuo *TaskUpdateOne) ClearTaskCode() *TaskUpdateOne {
	tuo.mutation.ClearTaskCode()
	return tuo
}

// SetPreTask sets the "preTask" field.
func (tuo *TaskUpdateOne) SetPreTask(i int64) *TaskUpdateOne {
	tuo.mutation.ResetPreTask()
	tuo.mutation.SetPreTask(i)
	return tuo
}

// SetNillablePreTask sets the "preTask" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePreTask(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetPreTask(*i)
	}
	return tuo
}

// AddPreTask adds i to the "preTask" field.
func (tuo *TaskUpdateOne) AddPreTask(i int64) *TaskUpdateOne {
	tuo.mutation.AddPreTask(i)
	return tuo
}

// ClearPreTask clears the value of the "preTask" field.
func (tuo *TaskUpdateOne) ClearPreTask() *TaskUpdateOne {
	tuo.mutation.ClearPreTask()
	return tuo
}

// SetNovelId sets the "novelId" field.
func (tuo *TaskUpdateOne) SetNovelId(i int64) *TaskUpdateOne {
	tuo.mutation.ResetNovelId()
	tuo.mutation.SetNovelId(i)
	return tuo
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNovelId(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetNovelId(*i)
	}
	return tuo
}

// AddNovelId adds i to the "novelId" field.
func (tuo *TaskUpdateOne) AddNovelId(i int64) *TaskUpdateOne {
	tuo.mutation.AddNovelId(i)
	return tuo
}

// ClearNovelId clears the value of the "novelId" field.
func (tuo *TaskUpdateOne) ClearNovelId() *TaskUpdateOne {
	tuo.mutation.ClearNovelId()
	return tuo
}

// SetCycleType sets the "cycleType" field.
func (tuo *TaskUpdateOne) SetCycleType(s string) *TaskUpdateOne {
	tuo.mutation.SetCycleType(s)
	return tuo
}

// SetNillableCycleType sets the "cycleType" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCycleType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetCycleType(*s)
	}
	return tuo
}

// ClearCycleType clears the value of the "cycleType" field.
func (tuo *TaskUpdateOne) ClearCycleType() *TaskUpdateOne {
	tuo.mutation.ClearCycleType()
	return tuo
}

// SetRemark sets the "remark" field.
func (tuo *TaskUpdateOne) SetRemark(s string) *TaskUpdateOne {
	tuo.mutation.SetRemark(s)
	return tuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRemark(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetRemark(*s)
	}
	return tuo
}

// ClearRemark clears the value of the "remark" field.
func (tuo *TaskUpdateOne) ClearRemark() *TaskUpdateOne {
	tuo.mutation.ClearRemark()
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TaskUpdateOne) SetAmount(i int64) *TaskUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(i)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAmount(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetAmount(*i)
	}
	return tuo
}

// AddAmount adds i to the "amount" field.
func (tuo *TaskUpdateOne) AddAmount(i int64) *TaskUpdateOne {
	tuo.mutation.AddAmount(i)
	return tuo
}

// ClearAmount clears the value of the "amount" field.
func (tuo *TaskUpdateOne) ClearAmount() *TaskUpdateOne {
	tuo.mutation.ClearAmount()
	return tuo
}

// SetReward sets the "reward" field.
func (tuo *TaskUpdateOne) SetReward(i int64) *TaskUpdateOne {
	tuo.mutation.ResetReward()
	tuo.mutation.SetReward(i)
	return tuo
}

// SetNillableReward sets the "reward" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableReward(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetReward(*i)
	}
	return tuo
}

// AddReward adds i to the "reward" field.
func (tuo *TaskUpdateOne) AddReward(i int64) *TaskUpdateOne {
	tuo.mutation.AddReward(i)
	return tuo
}

// ClearReward clears the value of the "reward" field.
func (tuo *TaskUpdateOne) ClearReward() *TaskUpdateOne {
	tuo.mutation.ClearReward()
	return tuo
}

// SetAmountItem sets the "amountItem" field.
func (tuo *TaskUpdateOne) SetAmountItem(i int32) *TaskUpdateOne {
	tuo.mutation.ResetAmountItem()
	tuo.mutation.SetAmountItem(i)
	return tuo
}

// SetNillableAmountItem sets the "amountItem" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAmountItem(i *int32) *TaskUpdateOne {
	if i != nil {
		tuo.SetAmountItem(*i)
	}
	return tuo
}

// AddAmountItem adds i to the "amountItem" field.
func (tuo *TaskUpdateOne) AddAmountItem(i int32) *TaskUpdateOne {
	tuo.mutation.AddAmountItem(i)
	return tuo
}

// ClearAmountItem clears the value of the "amountItem" field.
func (tuo *TaskUpdateOne) ClearAmountItem() *TaskUpdateOne {
	tuo.mutation.ClearAmountItem()
	return tuo
}

// SetRewardItem sets the "rewardItem" field.
func (tuo *TaskUpdateOne) SetRewardItem(i int32) *TaskUpdateOne {
	tuo.mutation.ResetRewardItem()
	tuo.mutation.SetRewardItem(i)
	return tuo
}

// SetNillableRewardItem sets the "rewardItem" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRewardItem(i *int32) *TaskUpdateOne {
	if i != nil {
		tuo.SetRewardItem(*i)
	}
	return tuo
}

// AddRewardItem adds i to the "rewardItem" field.
func (tuo *TaskUpdateOne) AddRewardItem(i int32) *TaskUpdateOne {
	tuo.mutation.AddRewardItem(i)
	return tuo
}

// ClearRewardItem clears the value of the "rewardItem" field.
func (tuo *TaskUpdateOne) ClearRewardItem() *TaskUpdateOne {
	tuo.mutation.ClearRewardItem()
	return tuo
}

// SetTargetNames sets the "targetNames" field.
func (tuo *TaskUpdateOne) SetTargetNames(s string) *TaskUpdateOne {
	tuo.mutation.SetTargetNames(s)
	return tuo
}

// SetNillableTargetNames sets the "targetNames" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTargetNames(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTargetNames(*s)
	}
	return tuo
}

// ClearTargetNames clears the value of the "targetNames" field.
func (tuo *TaskUpdateOne) ClearTargetNames() *TaskUpdateOne {
	tuo.mutation.ClearTargetNames()
	return tuo
}

// SetTargetAmounts sets the "targetAmounts" field.
func (tuo *TaskUpdateOne) SetTargetAmounts(s string) *TaskUpdateOne {
	tuo.mutation.SetTargetAmounts(s)
	return tuo
}

// SetNillableTargetAmounts sets the "targetAmounts" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTargetAmounts(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTargetAmounts(*s)
	}
	return tuo
}

// ClearTargetAmounts clears the value of the "targetAmounts" field.
func (tuo *TaskUpdateOne) ClearTargetAmounts() *TaskUpdateOne {
	tuo.mutation.ClearTargetAmounts()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(b bool) *TaskUpdateOne {
	tuo.mutation.SetStatus(b)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetStatus(*b)
	}
	return tuo
}

// ClearStatus clears the value of the "status" field.
func (tuo *TaskUpdateOne) ClearStatus() *TaskUpdateOne {
	tuo.mutation.ClearStatus()
	return tuo
}

// SetSortNum sets the "sortNum" field.
func (tuo *TaskUpdateOne) SetSortNum(i int64) *TaskUpdateOne {
	tuo.mutation.ResetSortNum()
	tuo.mutation.SetSortNum(i)
	return tuo
}

// SetNillableSortNum sets the "sortNum" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSortNum(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetSortNum(*i)
	}
	return tuo
}

// AddSortNum adds i to the "sortNum" field.
func (tuo *TaskUpdateOne) AddSortNum(i int64) *TaskUpdateOne {
	tuo.mutation.AddSortNum(i)
	return tuo
}

// ClearSortNum clears the value of the "sortNum" field.
func (tuo *TaskUpdateOne) ClearSortNum() *TaskUpdateOne {
	tuo.mutation.ClearSortNum()
	return tuo
}

// SetActionType sets the "actionType" field.
func (tuo *TaskUpdateOne) SetActionType(s string) *TaskUpdateOne {
	tuo.mutation.SetActionType(s)
	return tuo
}

// SetNillableActionType sets the "actionType" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableActionType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetActionType(*s)
	}
	return tuo
}

// ClearActionType clears the value of the "actionType" field.
func (tuo *TaskUpdateOne) ClearActionType() *TaskUpdateOne {
	tuo.mutation.ClearActionType()
	return tuo
}

// SetEffectTime sets the "effectTime" field.
func (tuo *TaskUpdateOne) SetEffectTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetEffectTime(t)
	return tuo
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEffectTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetEffectTime(*t)
	}
	return tuo
}

// SetExpiredTime sets the "expiredTime" field.
func (tuo *TaskUpdateOne) SetExpiredTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetExpiredTime(t)
	return tuo
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExpiredTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetExpiredTime(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetCreateBy sets the "createBy" field.
func (tuo *TaskUpdateOne) SetCreateBy(i int64) *TaskUpdateOne {
	tuo.mutation.ResetCreateBy()
	tuo.mutation.SetCreateBy(i)
	return tuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreateBy(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetCreateBy(*i)
	}
	return tuo
}

// AddCreateBy adds i to the "createBy" field.
func (tuo *TaskUpdateOne) AddCreateBy(i int64) *TaskUpdateOne {
	tuo.mutation.AddCreateBy(i)
	return tuo
}

// SetUpdateBy sets the "updateBy" field.
func (tuo *TaskUpdateOne) SetUpdateBy(i int64) *TaskUpdateOne {
	tuo.mutation.ResetUpdateBy()
	tuo.mutation.SetUpdateBy(i)
	return tuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdateBy(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetUpdateBy(*i)
	}
	return tuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (tuo *TaskUpdateOne) AddUpdateBy(i int64) *TaskUpdateOne {
	tuo.mutation.AddUpdateBy(i)
	return tuo
}

// SetTenantId sets the "tenantId" field.
func (tuo *TaskUpdateOne) SetTenantId(i int64) *TaskUpdateOne {
	tuo.mutation.ResetTenantId()
	tuo.mutation.SetTenantId(i)
	return tuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTenantId(i *int64) *TaskUpdateOne {
	if i != nil {
		tuo.SetTenantId(*i)
	}
	return tuo
}

// AddTenantId adds i to the "tenantId" field.
func (tuo *TaskUpdateOne) AddTenantId(i int64) *TaskUpdateOne {
	tuo.mutation.AddTenantId(i)
	return tuo
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	var (
		err  error
		node *Task
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: task.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TaskName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTaskName,
		})
	}
	if tuo.mutation.TaskNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTaskName,
		})
	}
	if value, ok := tuo.mutation.TaskGroup(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTaskGroup,
		})
	}
	if tuo.mutation.TaskGroupCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTaskGroup,
		})
	}
	if value, ok := tuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldUnit,
		})
	}
	if tuo.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldUnit,
		})
	}
	if value, ok := tuo.mutation.Topic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTopic,
		})
	}
	if tuo.mutation.TopicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTopic,
		})
	}
	if value, ok := tuo.mutation.Function(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldFunction,
		})
	}
	if tuo.mutation.FunctionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldFunction,
		})
	}
	if value, ok := tuo.mutation.TaskCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTaskCode,
		})
	}
	if tuo.mutation.TaskCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTaskCode,
		})
	}
	if value, ok := tuo.mutation.PreTask(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldPreTask,
		})
	}
	if value, ok := tuo.mutation.AddedPreTask(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldPreTask,
		})
	}
	if tuo.mutation.PreTaskCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldPreTask,
		})
	}
	if value, ok := tuo.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldNovelId,
		})
	}
	if value, ok := tuo.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldNovelId,
		})
	}
	if tuo.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldNovelId,
		})
	}
	if value, ok := tuo.mutation.CycleType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCycleType,
		})
	}
	if tuo.mutation.CycleTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldCycleType,
		})
	}
	if value, ok := tuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldRemark,
		})
	}
	if tuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldRemark,
		})
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldAmount,
		})
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldAmount,
		})
	}
	if tuo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldAmount,
		})
	}
	if value, ok := tuo.mutation.Reward(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldReward,
		})
	}
	if value, ok := tuo.mutation.AddedReward(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldReward,
		})
	}
	if tuo.mutation.RewardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldReward,
		})
	}
	if value, ok := tuo.mutation.AmountItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldAmountItem,
		})
	}
	if value, ok := tuo.mutation.AddedAmountItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldAmountItem,
		})
	}
	if tuo.mutation.AmountItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: task.FieldAmountItem,
		})
	}
	if value, ok := tuo.mutation.RewardItem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldRewardItem,
		})
	}
	if value, ok := tuo.mutation.AddedRewardItem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: task.FieldRewardItem,
		})
	}
	if tuo.mutation.RewardItemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: task.FieldRewardItem,
		})
	}
	if value, ok := tuo.mutation.TargetNames(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTargetNames,
		})
	}
	if tuo.mutation.TargetNamesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTargetNames,
		})
	}
	if value, ok := tuo.mutation.TargetAmounts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldTargetAmounts,
		})
	}
	if tuo.mutation.TargetAmountsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldTargetAmounts,
		})
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: task.FieldStatus,
		})
	}
	if tuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: task.FieldStatus,
		})
	}
	if value, ok := tuo.mutation.SortNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldSortNum,
		})
	}
	if value, ok := tuo.mutation.AddedSortNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldSortNum,
		})
	}
	if tuo.mutation.SortNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: task.FieldSortNum,
		})
	}
	if value, ok := tuo.mutation.ActionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldActionType,
		})
	}
	if tuo.mutation.ActionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldActionType,
		})
	}
	if value, ok := tuo.mutation.EffectTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldEffectTime,
		})
	}
	if value, ok := tuo.mutation.ExpiredTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldExpiredTime,
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldCreateBy,
		})
	}
	if value, ok := tuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldCreateBy,
		})
	}
	if value, ok := tuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldUpdateBy,
		})
	}
	if value, ok := tuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldUpdateBy,
		})
	}
	if value, ok := tuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldTenantId,
		})
	}
	if value, ok := tuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: task.FieldTenantId,
		})
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
