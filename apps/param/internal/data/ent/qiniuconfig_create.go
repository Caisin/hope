// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/param/internal/data/ent/qiniuconfig"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QiniuConfigCreate is the builder for creating a QiniuConfig entity.
type QiniuConfigCreate struct {
	config
	mutation *QiniuConfigMutation
	hooks    []Hook
}

// SetAccessKey sets the "accessKey" field.
func (qcc *QiniuConfigCreate) SetAccessKey(s string) *QiniuConfigCreate {
	qcc.mutation.SetAccessKey(s)
	return qcc
}

// SetNillableAccessKey sets the "accessKey" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableAccessKey(s *string) *QiniuConfigCreate {
	if s != nil {
		qcc.SetAccessKey(*s)
	}
	return qcc
}

// SetBucket sets the "bucket" field.
func (qcc *QiniuConfigCreate) SetBucket(s string) *QiniuConfigCreate {
	qcc.mutation.SetBucket(s)
	return qcc
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableBucket(s *string) *QiniuConfigCreate {
	if s != nil {
		qcc.SetBucket(*s)
	}
	return qcc
}

// SetHost sets the "host" field.
func (qcc *QiniuConfigCreate) SetHost(s string) *QiniuConfigCreate {
	qcc.mutation.SetHost(s)
	return qcc
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableHost(s *string) *QiniuConfigCreate {
	if s != nil {
		qcc.SetHost(*s)
	}
	return qcc
}

// SetSecretKey sets the "secretKey" field.
func (qcc *QiniuConfigCreate) SetSecretKey(s string) *QiniuConfigCreate {
	qcc.mutation.SetSecretKey(s)
	return qcc
}

// SetNillableSecretKey sets the "secretKey" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableSecretKey(s *string) *QiniuConfigCreate {
	if s != nil {
		qcc.SetSecretKey(*s)
	}
	return qcc
}

// SetType sets the "type" field.
func (qcc *QiniuConfigCreate) SetType(s string) *QiniuConfigCreate {
	qcc.mutation.SetType(s)
	return qcc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableType(s *string) *QiniuConfigCreate {
	if s != nil {
		qcc.SetType(*s)
	}
	return qcc
}

// SetZone sets the "zone" field.
func (qcc *QiniuConfigCreate) SetZone(s string) *QiniuConfigCreate {
	qcc.mutation.SetZone(s)
	return qcc
}

// SetNillableZone sets the "zone" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableZone(s *string) *QiniuConfigCreate {
	if s != nil {
		qcc.SetZone(*s)
	}
	return qcc
}

// SetCreatedAt sets the "createdAt" field.
func (qcc *QiniuConfigCreate) SetCreatedAt(t time.Time) *QiniuConfigCreate {
	qcc.mutation.SetCreatedAt(t)
	return qcc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableCreatedAt(t *time.Time) *QiniuConfigCreate {
	if t != nil {
		qcc.SetCreatedAt(*t)
	}
	return qcc
}

// SetUpdatedAt sets the "updatedAt" field.
func (qcc *QiniuConfigCreate) SetUpdatedAt(t time.Time) *QiniuConfigCreate {
	qcc.mutation.SetUpdatedAt(t)
	return qcc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableUpdatedAt(t *time.Time) *QiniuConfigCreate {
	if t != nil {
		qcc.SetUpdatedAt(*t)
	}
	return qcc
}

// SetCreateBy sets the "createBy" field.
func (qcc *QiniuConfigCreate) SetCreateBy(i int64) *QiniuConfigCreate {
	qcc.mutation.SetCreateBy(i)
	return qcc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableCreateBy(i *int64) *QiniuConfigCreate {
	if i != nil {
		qcc.SetCreateBy(*i)
	}
	return qcc
}

// SetUpdateBy sets the "updateBy" field.
func (qcc *QiniuConfigCreate) SetUpdateBy(i int64) *QiniuConfigCreate {
	qcc.mutation.SetUpdateBy(i)
	return qcc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableUpdateBy(i *int64) *QiniuConfigCreate {
	if i != nil {
		qcc.SetUpdateBy(*i)
	}
	return qcc
}

// SetTenantId sets the "tenantId" field.
func (qcc *QiniuConfigCreate) SetTenantId(i int64) *QiniuConfigCreate {
	qcc.mutation.SetTenantId(i)
	return qcc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (qcc *QiniuConfigCreate) SetNillableTenantId(i *int64) *QiniuConfigCreate {
	if i != nil {
		qcc.SetTenantId(*i)
	}
	return qcc
}

// Mutation returns the QiniuConfigMutation object of the builder.
func (qcc *QiniuConfigCreate) Mutation() *QiniuConfigMutation {
	return qcc.mutation
}

// Save creates the QiniuConfig in the database.
func (qcc *QiniuConfigCreate) Save(ctx context.Context) (*QiniuConfig, error) {
	var (
		err  error
		node *QiniuConfig
	)
	qcc.defaults()
	if len(qcc.hooks) == 0 {
		if err = qcc.check(); err != nil {
			return nil, err
		}
		node, err = qcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QiniuConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qcc.check(); err != nil {
				return nil, err
			}
			qcc.mutation = mutation
			if node, err = qcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(qcc.hooks) - 1; i >= 0; i-- {
			if qcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (qcc *QiniuConfigCreate) SaveX(ctx context.Context) *QiniuConfig {
	v, err := qcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcc *QiniuConfigCreate) Exec(ctx context.Context) error {
	_, err := qcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcc *QiniuConfigCreate) ExecX(ctx context.Context) {
	if err := qcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcc *QiniuConfigCreate) defaults() {
	if _, ok := qcc.mutation.CreatedAt(); !ok {
		v := qiniuconfig.DefaultCreatedAt()
		qcc.mutation.SetCreatedAt(v)
	}
	if _, ok := qcc.mutation.UpdatedAt(); !ok {
		v := qiniuconfig.DefaultUpdatedAt()
		qcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := qcc.mutation.CreateBy(); !ok {
		v := qiniuconfig.DefaultCreateBy
		qcc.mutation.SetCreateBy(v)
	}
	if _, ok := qcc.mutation.UpdateBy(); !ok {
		v := qiniuconfig.DefaultUpdateBy
		qcc.mutation.SetUpdateBy(v)
	}
	if _, ok := qcc.mutation.TenantId(); !ok {
		v := qiniuconfig.DefaultTenantId
		qcc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcc *QiniuConfigCreate) check() error {
	if _, ok := qcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := qcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := qcc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := qcc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := qcc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (qcc *QiniuConfigCreate) sqlSave(ctx context.Context) (*QiniuConfig, error) {
	_node, _spec := qcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (qcc *QiniuConfigCreate) createSpec() (*QiniuConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &QiniuConfig{config: qcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: qiniuconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: qiniuconfig.FieldID,
			},
		}
	)
	if value, ok := qcc.mutation.AccessKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: qiniuconfig.FieldAccessKey,
		})
		_node.AccessKey = value
	}
	if value, ok := qcc.mutation.Bucket(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: qiniuconfig.FieldBucket,
		})
		_node.Bucket = value
	}
	if value, ok := qcc.mutation.Host(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: qiniuconfig.FieldHost,
		})
		_node.Host = value
	}
	if value, ok := qcc.mutation.SecretKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: qiniuconfig.FieldSecretKey,
		})
		_node.SecretKey = value
	}
	if value, ok := qcc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: qiniuconfig.FieldType,
		})
		_node.Type = value
	}
	if value, ok := qcc.mutation.Zone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: qiniuconfig.FieldZone,
		})
		_node.Zone = value
	}
	if value, ok := qcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: qiniuconfig.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := qcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: qiniuconfig.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := qcc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: qiniuconfig.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := qcc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: qiniuconfig.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := qcc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: qiniuconfig.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// QiniuConfigCreateBulk is the builder for creating many QiniuConfig entities in bulk.
type QiniuConfigCreateBulk struct {
	config
	builders []*QiniuConfigCreate
}

// Save creates the QiniuConfig entities in the database.
func (qccb *QiniuConfigCreateBulk) Save(ctx context.Context) ([]*QiniuConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(qccb.builders))
	nodes := make([]*QiniuConfig, len(qccb.builders))
	mutators := make([]Mutator, len(qccb.builders))
	for i := range qccb.builders {
		func(i int, root context.Context) {
			builder := qccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QiniuConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qccb *QiniuConfigCreateBulk) SaveX(ctx context.Context) []*QiniuConfig {
	v, err := qccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qccb *QiniuConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := qccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qccb *QiniuConfigCreateBulk) ExecX(ctx context.Context) {
	if err := qccb.Exec(ctx); err != nil {
		panic(err)
	}
}
