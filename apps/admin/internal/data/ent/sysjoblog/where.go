// Code generated by entc, DO NOT EDIT.

package sysjoblog

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// JobId applies equality check predicate on the "jobId" field. It's identical to JobIdEQ.
func JobId(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobId), v))
	})
}

// JobName applies equality check predicate on the "jobName" field. It's identical to JobNameEQ.
func JobName(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobName), v))
	})
}

// EntryId applies equality check predicate on the "entryId" field. It's identical to EntryIdEQ.
func EntryId(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryId), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v time.Duration) predicate.SysJobLog {
	vc := int64(v)
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), vc))
	})
}

// Info applies equality check predicate on the "info" field. It's identical to InfoEQ.
func Info(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInfo), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// JobIdEQ applies the EQ predicate on the "jobId" field.
func JobIdEQ(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobId), v))
	})
}

// JobIdNEQ applies the NEQ predicate on the "jobId" field.
func JobIdNEQ(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJobId), v))
	})
}

// JobIdIn applies the In predicate on the "jobId" field.
func JobIdIn(vs ...int32) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJobId), v...))
	})
}

// JobIdNotIn applies the NotIn predicate on the "jobId" field.
func JobIdNotIn(vs ...int32) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJobId), v...))
	})
}

// JobIdGT applies the GT predicate on the "jobId" field.
func JobIdGT(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJobId), v))
	})
}

// JobIdGTE applies the GTE predicate on the "jobId" field.
func JobIdGTE(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJobId), v))
	})
}

// JobIdLT applies the LT predicate on the "jobId" field.
func JobIdLT(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJobId), v))
	})
}

// JobIdLTE applies the LTE predicate on the "jobId" field.
func JobIdLTE(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJobId), v))
	})
}

// JobIdIsNil applies the IsNil predicate on the "jobId" field.
func JobIdIsNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJobId)))
	})
}

// JobIdNotNil applies the NotNil predicate on the "jobId" field.
func JobIdNotNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJobId)))
	})
}

// JobNameEQ applies the EQ predicate on the "jobName" field.
func JobNameEQ(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobName), v))
	})
}

// JobNameNEQ applies the NEQ predicate on the "jobName" field.
func JobNameNEQ(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJobName), v))
	})
}

// JobNameIn applies the In predicate on the "jobName" field.
func JobNameIn(vs ...string) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJobName), v...))
	})
}

// JobNameNotIn applies the NotIn predicate on the "jobName" field.
func JobNameNotIn(vs ...string) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJobName), v...))
	})
}

// JobNameGT applies the GT predicate on the "jobName" field.
func JobNameGT(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJobName), v))
	})
}

// JobNameGTE applies the GTE predicate on the "jobName" field.
func JobNameGTE(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJobName), v))
	})
}

// JobNameLT applies the LT predicate on the "jobName" field.
func JobNameLT(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJobName), v))
	})
}

// JobNameLTE applies the LTE predicate on the "jobName" field.
func JobNameLTE(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJobName), v))
	})
}

// JobNameContains applies the Contains predicate on the "jobName" field.
func JobNameContains(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJobName), v))
	})
}

// JobNameHasPrefix applies the HasPrefix predicate on the "jobName" field.
func JobNameHasPrefix(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJobName), v))
	})
}

// JobNameHasSuffix applies the HasSuffix predicate on the "jobName" field.
func JobNameHasSuffix(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJobName), v))
	})
}

// JobNameIsNil applies the IsNil predicate on the "jobName" field.
func JobNameIsNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJobName)))
	})
}

// JobNameNotNil applies the NotNil predicate on the "jobName" field.
func JobNameNotNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJobName)))
	})
}

// JobNameEqualFold applies the EqualFold predicate on the "jobName" field.
func JobNameEqualFold(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJobName), v))
	})
}

// JobNameContainsFold applies the ContainsFold predicate on the "jobName" field.
func JobNameContainsFold(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJobName), v))
	})
}

// EntryIdEQ applies the EQ predicate on the "entryId" field.
func EntryIdEQ(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryId), v))
	})
}

// EntryIdNEQ applies the NEQ predicate on the "entryId" field.
func EntryIdNEQ(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntryId), v))
	})
}

// EntryIdIn applies the In predicate on the "entryId" field.
func EntryIdIn(vs ...int32) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEntryId), v...))
	})
}

// EntryIdNotIn applies the NotIn predicate on the "entryId" field.
func EntryIdNotIn(vs ...int32) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEntryId), v...))
	})
}

// EntryIdGT applies the GT predicate on the "entryId" field.
func EntryIdGT(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntryId), v))
	})
}

// EntryIdGTE applies the GTE predicate on the "entryId" field.
func EntryIdGTE(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntryId), v))
	})
}

// EntryIdLT applies the LT predicate on the "entryId" field.
func EntryIdLT(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntryId), v))
	})
}

// EntryIdLTE applies the LTE predicate on the "entryId" field.
func EntryIdLTE(v int32) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntryId), v))
	})
}

// EntryIdIsNil applies the IsNil predicate on the "entryId" field.
func EntryIdIsNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEntryId)))
	})
}

// EntryIdNotNil applies the NotNil predicate on the "entryId" field.
func EntryIdNotNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEntryId)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v time.Duration) predicate.SysJobLog {
	vc := int64(v)
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), vc))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v time.Duration) predicate.SysJobLog {
	vc := int64(v)
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), vc))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...time.Duration) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...time.Duration) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v time.Duration) predicate.SysJobLog {
	vc := int64(v)
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), vc))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v time.Duration) predicate.SysJobLog {
	vc := int64(v)
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), vc))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v time.Duration) predicate.SysJobLog {
	vc := int64(v)
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), vc))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v time.Duration) predicate.SysJobLog {
	vc := int64(v)
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), vc))
	})
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDuration)))
	})
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDuration)))
	})
}

// InfoEQ applies the EQ predicate on the "info" field.
func InfoEQ(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInfo), v))
	})
}

// InfoNEQ applies the NEQ predicate on the "info" field.
func InfoNEQ(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInfo), v))
	})
}

// InfoIn applies the In predicate on the "info" field.
func InfoIn(vs ...string) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInfo), v...))
	})
}

// InfoNotIn applies the NotIn predicate on the "info" field.
func InfoNotIn(vs ...string) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInfo), v...))
	})
}

// InfoGT applies the GT predicate on the "info" field.
func InfoGT(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInfo), v))
	})
}

// InfoGTE applies the GTE predicate on the "info" field.
func InfoGTE(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInfo), v))
	})
}

// InfoLT applies the LT predicate on the "info" field.
func InfoLT(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInfo), v))
	})
}

// InfoLTE applies the LTE predicate on the "info" field.
func InfoLTE(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInfo), v))
	})
}

// InfoContains applies the Contains predicate on the "info" field.
func InfoContains(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInfo), v))
	})
}

// InfoHasPrefix applies the HasPrefix predicate on the "info" field.
func InfoHasPrefix(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInfo), v))
	})
}

// InfoHasSuffix applies the HasSuffix predicate on the "info" field.
func InfoHasSuffix(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInfo), v))
	})
}

// InfoIsNil applies the IsNil predicate on the "info" field.
func InfoIsNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInfo)))
	})
}

// InfoNotNil applies the NotNil predicate on the "info" field.
func InfoNotNil() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInfo)))
	})
}

// InfoEqualFold applies the EqualFold predicate on the "info" field.
func InfoEqualFold(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInfo), v))
	})
}

// InfoContainsFold applies the ContainsFold predicate on the "info" field.
func InfoContainsFold(v string) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInfo), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysJobLog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJobLog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.SysJob) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysJobLog) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysJobLog) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysJobLog) predicate.SysJobLog {
	return predicate.SysJobLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
