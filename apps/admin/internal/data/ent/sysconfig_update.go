// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/admin/internal/data/ent/predicate"
	"hope/apps/admin/internal/data/ent/sysconfig"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysConfigUpdate is the builder for updating SysConfig entities.
type SysConfigUpdate struct {
	config
	hooks    []Hook
	mutation *SysConfigMutation
}

// Where appends a list predicates to the SysConfigUpdate builder.
func (scu *SysConfigUpdate) Where(ps ...predicate.SysConfig) *SysConfigUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetConfigName sets the "configName" field.
func (scu *SysConfigUpdate) SetConfigName(s string) *SysConfigUpdate {
	scu.mutation.SetConfigName(s)
	return scu
}

// SetNillableConfigName sets the "configName" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableConfigName(s *string) *SysConfigUpdate {
	if s != nil {
		scu.SetConfigName(*s)
	}
	return scu
}

// ClearConfigName clears the value of the "configName" field.
func (scu *SysConfigUpdate) ClearConfigName() *SysConfigUpdate {
	scu.mutation.ClearConfigName()
	return scu
}

// SetConfigKey sets the "configKey" field.
func (scu *SysConfigUpdate) SetConfigKey(s string) *SysConfigUpdate {
	scu.mutation.SetConfigKey(s)
	return scu
}

// SetNillableConfigKey sets the "configKey" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableConfigKey(s *string) *SysConfigUpdate {
	if s != nil {
		scu.SetConfigKey(*s)
	}
	return scu
}

// ClearConfigKey clears the value of the "configKey" field.
func (scu *SysConfigUpdate) ClearConfigKey() *SysConfigUpdate {
	scu.mutation.ClearConfigKey()
	return scu
}

// SetConfigValue sets the "configValue" field.
func (scu *SysConfigUpdate) SetConfigValue(s string) *SysConfigUpdate {
	scu.mutation.SetConfigValue(s)
	return scu
}

// SetNillableConfigValue sets the "configValue" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableConfigValue(s *string) *SysConfigUpdate {
	if s != nil {
		scu.SetConfigValue(*s)
	}
	return scu
}

// ClearConfigValue clears the value of the "configValue" field.
func (scu *SysConfigUpdate) ClearConfigValue() *SysConfigUpdate {
	scu.mutation.ClearConfigValue()
	return scu
}

// SetConfigType sets the "configType" field.
func (scu *SysConfigUpdate) SetConfigType(s string) *SysConfigUpdate {
	scu.mutation.SetConfigType(s)
	return scu
}

// SetNillableConfigType sets the "configType" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableConfigType(s *string) *SysConfigUpdate {
	if s != nil {
		scu.SetConfigType(*s)
	}
	return scu
}

// ClearConfigType clears the value of the "configType" field.
func (scu *SysConfigUpdate) ClearConfigType() *SysConfigUpdate {
	scu.mutation.ClearConfigType()
	return scu
}

// SetIsFrontend sets the "isFrontend" field.
func (scu *SysConfigUpdate) SetIsFrontend(i int32) *SysConfigUpdate {
	scu.mutation.ResetIsFrontend()
	scu.mutation.SetIsFrontend(i)
	return scu
}

// SetNillableIsFrontend sets the "isFrontend" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableIsFrontend(i *int32) *SysConfigUpdate {
	if i != nil {
		scu.SetIsFrontend(*i)
	}
	return scu
}

// AddIsFrontend adds i to the "isFrontend" field.
func (scu *SysConfigUpdate) AddIsFrontend(i int32) *SysConfigUpdate {
	scu.mutation.AddIsFrontend(i)
	return scu
}

// ClearIsFrontend clears the value of the "isFrontend" field.
func (scu *SysConfigUpdate) ClearIsFrontend() *SysConfigUpdate {
	scu.mutation.ClearIsFrontend()
	return scu
}

// SetState sets the "state" field.
func (scu *SysConfigUpdate) SetState(s sysconfig.State) *SysConfigUpdate {
	scu.mutation.SetState(s)
	return scu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableState(s *sysconfig.State) *SysConfigUpdate {
	if s != nil {
		scu.SetState(*s)
	}
	return scu
}

// SetRemark sets the "remark" field.
func (scu *SysConfigUpdate) SetRemark(s string) *SysConfigUpdate {
	scu.mutation.SetRemark(s)
	return scu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableRemark(s *string) *SysConfigUpdate {
	if s != nil {
		scu.SetRemark(*s)
	}
	return scu
}

// ClearRemark clears the value of the "remark" field.
func (scu *SysConfigUpdate) ClearRemark() *SysConfigUpdate {
	scu.mutation.ClearRemark()
	return scu
}

// SetUpdatedAt sets the "updatedAt" field.
func (scu *SysConfigUpdate) SetUpdatedAt(t time.Time) *SysConfigUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetCreateBy sets the "createBy" field.
func (scu *SysConfigUpdate) SetCreateBy(i int64) *SysConfigUpdate {
	scu.mutation.ResetCreateBy()
	scu.mutation.SetCreateBy(i)
	return scu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableCreateBy(i *int64) *SysConfigUpdate {
	if i != nil {
		scu.SetCreateBy(*i)
	}
	return scu
}

// AddCreateBy adds i to the "createBy" field.
func (scu *SysConfigUpdate) AddCreateBy(i int64) *SysConfigUpdate {
	scu.mutation.AddCreateBy(i)
	return scu
}

// SetUpdateBy sets the "updateBy" field.
func (scu *SysConfigUpdate) SetUpdateBy(i int64) *SysConfigUpdate {
	scu.mutation.ResetUpdateBy()
	scu.mutation.SetUpdateBy(i)
	return scu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableUpdateBy(i *int64) *SysConfigUpdate {
	if i != nil {
		scu.SetUpdateBy(*i)
	}
	return scu
}

// AddUpdateBy adds i to the "updateBy" field.
func (scu *SysConfigUpdate) AddUpdateBy(i int64) *SysConfigUpdate {
	scu.mutation.AddUpdateBy(i)
	return scu
}

// SetTenantId sets the "tenantId" field.
func (scu *SysConfigUpdate) SetTenantId(i int64) *SysConfigUpdate {
	scu.mutation.ResetTenantId()
	scu.mutation.SetTenantId(i)
	return scu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableTenantId(i *int64) *SysConfigUpdate {
	if i != nil {
		scu.SetTenantId(*i)
	}
	return scu
}

// AddTenantId adds i to the "tenantId" field.
func (scu *SysConfigUpdate) AddTenantId(i int64) *SysConfigUpdate {
	scu.mutation.AddTenantId(i)
	return scu
}

// Mutation returns the SysConfigMutation object of the builder.
func (scu *SysConfigUpdate) Mutation() *SysConfigMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SysConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	scu.defaults()
	if len(scu.hooks) == 0 {
		if err = scu.check(); err != nil {
			return 0, err
		}
		affected, err = scu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scu.check(); err != nil {
				return 0, err
			}
			scu.mutation = mutation
			affected, err = scu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scu.hooks) - 1; i >= 0; i-- {
			if scu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SysConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SysConfigUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SysConfigUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SysConfigUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := sysconfig.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SysConfigUpdate) check() error {
	if v, ok := scu.mutation.State(); ok {
		if err := sysconfig.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	return nil
}

func (scu *SysConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysconfig.Table,
			Columns: sysconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysconfig.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.ConfigName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigName,
		})
	}
	if scu.mutation.ConfigNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldConfigName,
		})
	}
	if value, ok := scu.mutation.ConfigKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigKey,
		})
	}
	if scu.mutation.ConfigKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldConfigKey,
		})
	}
	if value, ok := scu.mutation.ConfigValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigValue,
		})
	}
	if scu.mutation.ConfigValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldConfigValue,
		})
	}
	if value, ok := scu.mutation.ConfigType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigType,
		})
	}
	if scu.mutation.ConfigTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldConfigType,
		})
	}
	if value, ok := scu.mutation.IsFrontend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysconfig.FieldIsFrontend,
		})
	}
	if value, ok := scu.mutation.AddedIsFrontend(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysconfig.FieldIsFrontend,
		})
	}
	if scu.mutation.IsFrontendCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysconfig.FieldIsFrontend,
		})
	}
	if value, ok := scu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sysconfig.FieldState,
		})
	}
	if value, ok := scu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldRemark,
		})
	}
	if scu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldRemark,
		})
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysconfig.FieldUpdatedAt,
		})
	}
	if value, ok := scu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldCreateBy,
		})
	}
	if value, ok := scu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldCreateBy,
		})
	}
	if value, ok := scu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldUpdateBy,
		})
	}
	if value, ok := scu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldUpdateBy,
		})
	}
	if value, ok := scu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldTenantId,
		})
	}
	if value, ok := scu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SysConfigUpdateOne is the builder for updating a single SysConfig entity.
type SysConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysConfigMutation
}

// SetConfigName sets the "configName" field.
func (scuo *SysConfigUpdateOne) SetConfigName(s string) *SysConfigUpdateOne {
	scuo.mutation.SetConfigName(s)
	return scuo
}

// SetNillableConfigName sets the "configName" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableConfigName(s *string) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetConfigName(*s)
	}
	return scuo
}

// ClearConfigName clears the value of the "configName" field.
func (scuo *SysConfigUpdateOne) ClearConfigName() *SysConfigUpdateOne {
	scuo.mutation.ClearConfigName()
	return scuo
}

// SetConfigKey sets the "configKey" field.
func (scuo *SysConfigUpdateOne) SetConfigKey(s string) *SysConfigUpdateOne {
	scuo.mutation.SetConfigKey(s)
	return scuo
}

// SetNillableConfigKey sets the "configKey" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableConfigKey(s *string) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetConfigKey(*s)
	}
	return scuo
}

// ClearConfigKey clears the value of the "configKey" field.
func (scuo *SysConfigUpdateOne) ClearConfigKey() *SysConfigUpdateOne {
	scuo.mutation.ClearConfigKey()
	return scuo
}

// SetConfigValue sets the "configValue" field.
func (scuo *SysConfigUpdateOne) SetConfigValue(s string) *SysConfigUpdateOne {
	scuo.mutation.SetConfigValue(s)
	return scuo
}

// SetNillableConfigValue sets the "configValue" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableConfigValue(s *string) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetConfigValue(*s)
	}
	return scuo
}

// ClearConfigValue clears the value of the "configValue" field.
func (scuo *SysConfigUpdateOne) ClearConfigValue() *SysConfigUpdateOne {
	scuo.mutation.ClearConfigValue()
	return scuo
}

// SetConfigType sets the "configType" field.
func (scuo *SysConfigUpdateOne) SetConfigType(s string) *SysConfigUpdateOne {
	scuo.mutation.SetConfigType(s)
	return scuo
}

// SetNillableConfigType sets the "configType" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableConfigType(s *string) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetConfigType(*s)
	}
	return scuo
}

// ClearConfigType clears the value of the "configType" field.
func (scuo *SysConfigUpdateOne) ClearConfigType() *SysConfigUpdateOne {
	scuo.mutation.ClearConfigType()
	return scuo
}

// SetIsFrontend sets the "isFrontend" field.
func (scuo *SysConfigUpdateOne) SetIsFrontend(i int32) *SysConfigUpdateOne {
	scuo.mutation.ResetIsFrontend()
	scuo.mutation.SetIsFrontend(i)
	return scuo
}

// SetNillableIsFrontend sets the "isFrontend" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableIsFrontend(i *int32) *SysConfigUpdateOne {
	if i != nil {
		scuo.SetIsFrontend(*i)
	}
	return scuo
}

// AddIsFrontend adds i to the "isFrontend" field.
func (scuo *SysConfigUpdateOne) AddIsFrontend(i int32) *SysConfigUpdateOne {
	scuo.mutation.AddIsFrontend(i)
	return scuo
}

// ClearIsFrontend clears the value of the "isFrontend" field.
func (scuo *SysConfigUpdateOne) ClearIsFrontend() *SysConfigUpdateOne {
	scuo.mutation.ClearIsFrontend()
	return scuo
}

// SetState sets the "state" field.
func (scuo *SysConfigUpdateOne) SetState(s sysconfig.State) *SysConfigUpdateOne {
	scuo.mutation.SetState(s)
	return scuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableState(s *sysconfig.State) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetState(*s)
	}
	return scuo
}

// SetRemark sets the "remark" field.
func (scuo *SysConfigUpdateOne) SetRemark(s string) *SysConfigUpdateOne {
	scuo.mutation.SetRemark(s)
	return scuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableRemark(s *string) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetRemark(*s)
	}
	return scuo
}

// ClearRemark clears the value of the "remark" field.
func (scuo *SysConfigUpdateOne) ClearRemark() *SysConfigUpdateOne {
	scuo.mutation.ClearRemark()
	return scuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (scuo *SysConfigUpdateOne) SetUpdatedAt(t time.Time) *SysConfigUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetCreateBy sets the "createBy" field.
func (scuo *SysConfigUpdateOne) SetCreateBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.ResetCreateBy()
	scuo.mutation.SetCreateBy(i)
	return scuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableCreateBy(i *int64) *SysConfigUpdateOne {
	if i != nil {
		scuo.SetCreateBy(*i)
	}
	return scuo
}

// AddCreateBy adds i to the "createBy" field.
func (scuo *SysConfigUpdateOne) AddCreateBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.AddCreateBy(i)
	return scuo
}

// SetUpdateBy sets the "updateBy" field.
func (scuo *SysConfigUpdateOne) SetUpdateBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.ResetUpdateBy()
	scuo.mutation.SetUpdateBy(i)
	return scuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableUpdateBy(i *int64) *SysConfigUpdateOne {
	if i != nil {
		scuo.SetUpdateBy(*i)
	}
	return scuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (scuo *SysConfigUpdateOne) AddUpdateBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.AddUpdateBy(i)
	return scuo
}

// SetTenantId sets the "tenantId" field.
func (scuo *SysConfigUpdateOne) SetTenantId(i int64) *SysConfigUpdateOne {
	scuo.mutation.ResetTenantId()
	scuo.mutation.SetTenantId(i)
	return scuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableTenantId(i *int64) *SysConfigUpdateOne {
	if i != nil {
		scuo.SetTenantId(*i)
	}
	return scuo
}

// AddTenantId adds i to the "tenantId" field.
func (scuo *SysConfigUpdateOne) AddTenantId(i int64) *SysConfigUpdateOne {
	scuo.mutation.AddTenantId(i)
	return scuo
}

// Mutation returns the SysConfigMutation object of the builder.
func (scuo *SysConfigUpdateOne) Mutation() *SysConfigMutation {
	return scuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SysConfigUpdateOne) Select(field string, fields ...string) *SysConfigUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SysConfig entity.
func (scuo *SysConfigUpdateOne) Save(ctx context.Context) (*SysConfig, error) {
	var (
		err  error
		node *SysConfig
	)
	scuo.defaults()
	if len(scuo.hooks) == 0 {
		if err = scuo.check(); err != nil {
			return nil, err
		}
		node, err = scuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scuo.check(); err != nil {
				return nil, err
			}
			scuo.mutation = mutation
			node, err = scuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scuo.hooks) - 1; i >= 0; i-- {
			if scuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SysConfigUpdateOne) SaveX(ctx context.Context) *SysConfig {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SysConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SysConfigUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SysConfigUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := sysconfig.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SysConfigUpdateOne) check() error {
	if v, ok := scuo.mutation.State(); ok {
		if err := sysconfig.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	return nil
}

func (scuo *SysConfigUpdateOne) sqlSave(ctx context.Context) (_node *SysConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysconfig.Table,
			Columns: sysconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysconfig.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SysConfig.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysconfig.FieldID)
		for _, f := range fields {
			if !sysconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.ConfigName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigName,
		})
	}
	if scuo.mutation.ConfigNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldConfigName,
		})
	}
	if value, ok := scuo.mutation.ConfigKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigKey,
		})
	}
	if scuo.mutation.ConfigKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldConfigKey,
		})
	}
	if value, ok := scuo.mutation.ConfigValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigValue,
		})
	}
	if scuo.mutation.ConfigValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldConfigValue,
		})
	}
	if value, ok := scuo.mutation.ConfigType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldConfigType,
		})
	}
	if scuo.mutation.ConfigTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldConfigType,
		})
	}
	if value, ok := scuo.mutation.IsFrontend(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysconfig.FieldIsFrontend,
		})
	}
	if value, ok := scuo.mutation.AddedIsFrontend(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysconfig.FieldIsFrontend,
		})
	}
	if scuo.mutation.IsFrontendCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: sysconfig.FieldIsFrontend,
		})
	}
	if value, ok := scuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sysconfig.FieldState,
		})
	}
	if value, ok := scuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysconfig.FieldRemark,
		})
	}
	if scuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysconfig.FieldRemark,
		})
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysconfig.FieldUpdatedAt,
		})
	}
	if value, ok := scuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldCreateBy,
		})
	}
	if value, ok := scuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldCreateBy,
		})
	}
	if value, ok := scuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldUpdateBy,
		})
	}
	if value, ok := scuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldUpdateBy,
		})
	}
	if value, ok := scuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldTenantId,
		})
	}
	if value, ok := scuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysconfig.FieldTenantId,
		})
	}
	_node = &SysConfig{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
