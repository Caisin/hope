// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/novelbuychapterrecord"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelBuyChapterRecordUpdate is the builder for updating NovelBuyChapterRecord entities.
type NovelBuyChapterRecordUpdate struct {
	config
	hooks    []Hook
	mutation *NovelBuyChapterRecordMutation
}

// Where appends a list predicates to the NovelBuyChapterRecordUpdate builder.
func (nbcru *NovelBuyChapterRecordUpdate) Where(ps ...predicate.NovelBuyChapterRecord) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.Where(ps...)
	return nbcru
}

// SetUserId sets the "userId" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetUserId(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.SetUserId(i)
	return nbcru
}

// SetUserName sets the "userName" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetUserName(s string) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.SetUserName(s)
	return nbcru
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableUserName(s *string) *NovelBuyChapterRecordUpdate {
	if s != nil {
		nbcru.SetUserName(*s)
	}
	return nbcru
}

// ClearUserName clears the value of the "userName" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearUserName() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearUserName()
	return nbcru
}

// SetChapterId sets the "chapterId" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetChapterId(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ResetChapterId()
	nbcru.mutation.SetChapterId(i)
	return nbcru
}

// SetNillableChapterId sets the "chapterId" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableChapterId(i *int64) *NovelBuyChapterRecordUpdate {
	if i != nil {
		nbcru.SetChapterId(*i)
	}
	return nbcru
}

// AddChapterId adds i to the "chapterId" field.
func (nbcru *NovelBuyChapterRecordUpdate) AddChapterId(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.AddChapterId(i)
	return nbcru
}

// ClearChapterId clears the value of the "chapterId" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearChapterId() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearChapterId()
	return nbcru
}

// SetChapterOrderNum sets the "chapterOrderNum" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetChapterOrderNum(i int32) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ResetChapterOrderNum()
	nbcru.mutation.SetChapterOrderNum(i)
	return nbcru
}

// SetNillableChapterOrderNum sets the "chapterOrderNum" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableChapterOrderNum(i *int32) *NovelBuyChapterRecordUpdate {
	if i != nil {
		nbcru.SetChapterOrderNum(*i)
	}
	return nbcru
}

// AddChapterOrderNum adds i to the "chapterOrderNum" field.
func (nbcru *NovelBuyChapterRecordUpdate) AddChapterOrderNum(i int32) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.AddChapterOrderNum(i)
	return nbcru
}

// ClearChapterOrderNum clears the value of the "chapterOrderNum" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearChapterOrderNum() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearChapterOrderNum()
	return nbcru
}

// SetNovelId sets the "novelId" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetNovelId(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ResetNovelId()
	nbcru.mutation.SetNovelId(i)
	return nbcru
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableNovelId(i *int64) *NovelBuyChapterRecordUpdate {
	if i != nil {
		nbcru.SetNovelId(*i)
	}
	return nbcru
}

// AddNovelId adds i to the "novelId" field.
func (nbcru *NovelBuyChapterRecordUpdate) AddNovelId(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.AddNovelId(i)
	return nbcru
}

// ClearNovelId clears the value of the "novelId" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearNovelId() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearNovelId()
	return nbcru
}

// SetNovelName sets the "novelName" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetNovelName(s string) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.SetNovelName(s)
	return nbcru
}

// SetNillableNovelName sets the "novelName" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableNovelName(s *string) *NovelBuyChapterRecordUpdate {
	if s != nil {
		nbcru.SetNovelName(*s)
	}
	return nbcru
}

// ClearNovelName clears the value of the "novelName" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearNovelName() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearNovelName()
	return nbcru
}

// SetChapterName sets the "chapterName" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetChapterName(s string) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.SetChapterName(s)
	return nbcru
}

// SetNillableChapterName sets the "chapterName" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableChapterName(s *string) *NovelBuyChapterRecordUpdate {
	if s != nil {
		nbcru.SetChapterName(*s)
	}
	return nbcru
}

// ClearChapterName clears the value of the "chapterName" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearChapterName() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearChapterName()
	return nbcru
}

// SetIsSvip sets the "isSvip" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetIsSvip(b bool) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.SetIsSvip(b)
	return nbcru
}

// SetNillableIsSvip sets the "isSvip" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableIsSvip(b *bool) *NovelBuyChapterRecordUpdate {
	if b != nil {
		nbcru.SetIsSvip(*b)
	}
	return nbcru
}

// ClearIsSvip clears the value of the "isSvip" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearIsSvip() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearIsSvip()
	return nbcru
}

// SetCoin sets the "coin" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetCoin(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ResetCoin()
	nbcru.mutation.SetCoin(i)
	return nbcru
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableCoin(i *int64) *NovelBuyChapterRecordUpdate {
	if i != nil {
		nbcru.SetCoin(*i)
	}
	return nbcru
}

// AddCoin adds i to the "coin" field.
func (nbcru *NovelBuyChapterRecordUpdate) AddCoin(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.AddCoin(i)
	return nbcru
}

// ClearCoin clears the value of the "coin" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearCoin() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearCoin()
	return nbcru
}

// SetCoupon sets the "coupon" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetCoupon(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ResetCoupon()
	nbcru.mutation.SetCoupon(i)
	return nbcru
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableCoupon(i *int64) *NovelBuyChapterRecordUpdate {
	if i != nil {
		nbcru.SetCoupon(*i)
	}
	return nbcru
}

// AddCoupon adds i to the "coupon" field.
func (nbcru *NovelBuyChapterRecordUpdate) AddCoupon(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.AddCoupon(i)
	return nbcru
}

// ClearCoupon clears the value of the "coupon" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearCoupon() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearCoupon()
	return nbcru
}

// SetDiscount sets the "discount" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetDiscount(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ResetDiscount()
	nbcru.mutation.SetDiscount(i)
	return nbcru
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableDiscount(i *int64) *NovelBuyChapterRecordUpdate {
	if i != nil {
		nbcru.SetDiscount(*i)
	}
	return nbcru
}

// AddDiscount adds i to the "discount" field.
func (nbcru *NovelBuyChapterRecordUpdate) AddDiscount(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.AddDiscount(i)
	return nbcru
}

// ClearDiscount clears the value of the "discount" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearDiscount() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearDiscount()
	return nbcru
}

// SetRemark sets the "remark" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetRemark(s string) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.SetRemark(s)
	return nbcru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableRemark(s *string) *NovelBuyChapterRecordUpdate {
	if s != nil {
		nbcru.SetRemark(*s)
	}
	return nbcru
}

// ClearRemark clears the value of the "remark" field.
func (nbcru *NovelBuyChapterRecordUpdate) ClearRemark() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearRemark()
	return nbcru
}

// SetUpdatedAt sets the "updatedAt" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetUpdatedAt(t time.Time) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.SetUpdatedAt(t)
	return nbcru
}

// SetCreateBy sets the "createBy" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetCreateBy(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ResetCreateBy()
	nbcru.mutation.SetCreateBy(i)
	return nbcru
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableCreateBy(i *int64) *NovelBuyChapterRecordUpdate {
	if i != nil {
		nbcru.SetCreateBy(*i)
	}
	return nbcru
}

// AddCreateBy adds i to the "createBy" field.
func (nbcru *NovelBuyChapterRecordUpdate) AddCreateBy(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.AddCreateBy(i)
	return nbcru
}

// SetUpdateBy sets the "updateBy" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetUpdateBy(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ResetUpdateBy()
	nbcru.mutation.SetUpdateBy(i)
	return nbcru
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableUpdateBy(i *int64) *NovelBuyChapterRecordUpdate {
	if i != nil {
		nbcru.SetUpdateBy(*i)
	}
	return nbcru
}

// AddUpdateBy adds i to the "updateBy" field.
func (nbcru *NovelBuyChapterRecordUpdate) AddUpdateBy(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.AddUpdateBy(i)
	return nbcru
}

// SetTenantId sets the "tenantId" field.
func (nbcru *NovelBuyChapterRecordUpdate) SetTenantId(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ResetTenantId()
	nbcru.mutation.SetTenantId(i)
	return nbcru
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (nbcru *NovelBuyChapterRecordUpdate) SetNillableTenantId(i *int64) *NovelBuyChapterRecordUpdate {
	if i != nil {
		nbcru.SetTenantId(*i)
	}
	return nbcru
}

// AddTenantId adds i to the "tenantId" field.
func (nbcru *NovelBuyChapterRecordUpdate) AddTenantId(i int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.AddTenantId(i)
	return nbcru
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (nbcru *NovelBuyChapterRecordUpdate) SetUserID(id int64) *NovelBuyChapterRecordUpdate {
	nbcru.mutation.SetUserID(id)
	return nbcru
}

// SetUser sets the "user" edge to the SocialUser entity.
func (nbcru *NovelBuyChapterRecordUpdate) SetUser(s *SocialUser) *NovelBuyChapterRecordUpdate {
	return nbcru.SetUserID(s.ID)
}

// Mutation returns the NovelBuyChapterRecordMutation object of the builder.
func (nbcru *NovelBuyChapterRecordUpdate) Mutation() *NovelBuyChapterRecordMutation {
	return nbcru.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (nbcru *NovelBuyChapterRecordUpdate) ClearUser() *NovelBuyChapterRecordUpdate {
	nbcru.mutation.ClearUser()
	return nbcru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nbcru *NovelBuyChapterRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nbcru.defaults()
	if len(nbcru.hooks) == 0 {
		if err = nbcru.check(); err != nil {
			return 0, err
		}
		affected, err = nbcru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelBuyChapterRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nbcru.check(); err != nil {
				return 0, err
			}
			nbcru.mutation = mutation
			affected, err = nbcru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nbcru.hooks) - 1; i >= 0; i-- {
			if nbcru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nbcru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nbcru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nbcru *NovelBuyChapterRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := nbcru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nbcru *NovelBuyChapterRecordUpdate) Exec(ctx context.Context) error {
	_, err := nbcru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nbcru *NovelBuyChapterRecordUpdate) ExecX(ctx context.Context) {
	if err := nbcru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nbcru *NovelBuyChapterRecordUpdate) defaults() {
	if _, ok := nbcru.mutation.UpdatedAt(); !ok {
		v := novelbuychapterrecord.UpdateDefaultUpdatedAt()
		nbcru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nbcru *NovelBuyChapterRecordUpdate) check() error {
	if _, ok := nbcru.mutation.UserID(); nbcru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NovelBuyChapterRecord.user"`)
	}
	return nil
}

func (nbcru *NovelBuyChapterRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelbuychapterrecord.Table,
			Columns: novelbuychapterrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelbuychapterrecord.FieldID,
			},
		},
	}
	if ps := nbcru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nbcru.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelbuychapterrecord.FieldUserName,
		})
	}
	if nbcru.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelbuychapterrecord.FieldUserName,
		})
	}
	if value, ok := nbcru.mutation.ChapterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterId,
		})
	}
	if value, ok := nbcru.mutation.AddedChapterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterId,
		})
	}
	if nbcru.mutation.ChapterIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldChapterId,
		})
	}
	if value, ok := nbcru.mutation.ChapterOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterOrderNum,
		})
	}
	if value, ok := nbcru.mutation.AddedChapterOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterOrderNum,
		})
	}
	if nbcru.mutation.ChapterOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelbuychapterrecord.FieldChapterOrderNum,
		})
	}
	if value, ok := nbcru.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldNovelId,
		})
	}
	if value, ok := nbcru.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldNovelId,
		})
	}
	if nbcru.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldNovelId,
		})
	}
	if value, ok := nbcru.mutation.NovelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelbuychapterrecord.FieldNovelName,
		})
	}
	if nbcru.mutation.NovelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelbuychapterrecord.FieldNovelName,
		})
	}
	if value, ok := nbcru.mutation.ChapterName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterName,
		})
	}
	if nbcru.mutation.ChapterNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelbuychapterrecord.FieldChapterName,
		})
	}
	if value, ok := nbcru.mutation.IsSvip(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelbuychapterrecord.FieldIsSvip,
		})
	}
	if nbcru.mutation.IsSvipCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelbuychapterrecord.FieldIsSvip,
		})
	}
	if value, ok := nbcru.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCoin,
		})
	}
	if value, ok := nbcru.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCoin,
		})
	}
	if nbcru.mutation.CoinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldCoin,
		})
	}
	if value, ok := nbcru.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCoupon,
		})
	}
	if value, ok := nbcru.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCoupon,
		})
	}
	if nbcru.mutation.CouponCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldCoupon,
		})
	}
	if value, ok := nbcru.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldDiscount,
		})
	}
	if value, ok := nbcru.mutation.AddedDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldDiscount,
		})
	}
	if nbcru.mutation.DiscountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldDiscount,
		})
	}
	if value, ok := nbcru.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelbuychapterrecord.FieldRemark,
		})
	}
	if nbcru.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelbuychapterrecord.FieldRemark,
		})
	}
	if value, ok := nbcru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelbuychapterrecord.FieldUpdatedAt,
		})
	}
	if value, ok := nbcru.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCreateBy,
		})
	}
	if value, ok := nbcru.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCreateBy,
		})
	}
	if value, ok := nbcru.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldUpdateBy,
		})
	}
	if value, ok := nbcru.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldUpdateBy,
		})
	}
	if value, ok := nbcru.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldTenantId,
		})
	}
	if value, ok := nbcru.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldTenantId,
		})
	}
	if nbcru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelbuychapterrecord.UserTable,
			Columns: []string{novelbuychapterrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nbcru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelbuychapterrecord.UserTable,
			Columns: []string{novelbuychapterrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nbcru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelbuychapterrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NovelBuyChapterRecordUpdateOne is the builder for updating a single NovelBuyChapterRecord entity.
type NovelBuyChapterRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NovelBuyChapterRecordMutation
}

// SetUserId sets the "userId" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetUserId(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.SetUserId(i)
	return nbcruo
}

// SetUserName sets the "userName" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetUserName(s string) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.SetUserName(s)
	return nbcruo
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableUserName(s *string) *NovelBuyChapterRecordUpdateOne {
	if s != nil {
		nbcruo.SetUserName(*s)
	}
	return nbcruo
}

// ClearUserName clears the value of the "userName" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearUserName() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearUserName()
	return nbcruo
}

// SetChapterId sets the "chapterId" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetChapterId(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ResetChapterId()
	nbcruo.mutation.SetChapterId(i)
	return nbcruo
}

// SetNillableChapterId sets the "chapterId" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableChapterId(i *int64) *NovelBuyChapterRecordUpdateOne {
	if i != nil {
		nbcruo.SetChapterId(*i)
	}
	return nbcruo
}

// AddChapterId adds i to the "chapterId" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) AddChapterId(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.AddChapterId(i)
	return nbcruo
}

// ClearChapterId clears the value of the "chapterId" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearChapterId() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearChapterId()
	return nbcruo
}

// SetChapterOrderNum sets the "chapterOrderNum" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetChapterOrderNum(i int32) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ResetChapterOrderNum()
	nbcruo.mutation.SetChapterOrderNum(i)
	return nbcruo
}

// SetNillableChapterOrderNum sets the "chapterOrderNum" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableChapterOrderNum(i *int32) *NovelBuyChapterRecordUpdateOne {
	if i != nil {
		nbcruo.SetChapterOrderNum(*i)
	}
	return nbcruo
}

// AddChapterOrderNum adds i to the "chapterOrderNum" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) AddChapterOrderNum(i int32) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.AddChapterOrderNum(i)
	return nbcruo
}

// ClearChapterOrderNum clears the value of the "chapterOrderNum" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearChapterOrderNum() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearChapterOrderNum()
	return nbcruo
}

// SetNovelId sets the "novelId" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNovelId(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ResetNovelId()
	nbcruo.mutation.SetNovelId(i)
	return nbcruo
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableNovelId(i *int64) *NovelBuyChapterRecordUpdateOne {
	if i != nil {
		nbcruo.SetNovelId(*i)
	}
	return nbcruo
}

// AddNovelId adds i to the "novelId" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) AddNovelId(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.AddNovelId(i)
	return nbcruo
}

// ClearNovelId clears the value of the "novelId" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearNovelId() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearNovelId()
	return nbcruo
}

// SetNovelName sets the "novelName" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNovelName(s string) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.SetNovelName(s)
	return nbcruo
}

// SetNillableNovelName sets the "novelName" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableNovelName(s *string) *NovelBuyChapterRecordUpdateOne {
	if s != nil {
		nbcruo.SetNovelName(*s)
	}
	return nbcruo
}

// ClearNovelName clears the value of the "novelName" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearNovelName() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearNovelName()
	return nbcruo
}

// SetChapterName sets the "chapterName" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetChapterName(s string) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.SetChapterName(s)
	return nbcruo
}

// SetNillableChapterName sets the "chapterName" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableChapterName(s *string) *NovelBuyChapterRecordUpdateOne {
	if s != nil {
		nbcruo.SetChapterName(*s)
	}
	return nbcruo
}

// ClearChapterName clears the value of the "chapterName" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearChapterName() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearChapterName()
	return nbcruo
}

// SetIsSvip sets the "isSvip" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetIsSvip(b bool) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.SetIsSvip(b)
	return nbcruo
}

// SetNillableIsSvip sets the "isSvip" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableIsSvip(b *bool) *NovelBuyChapterRecordUpdateOne {
	if b != nil {
		nbcruo.SetIsSvip(*b)
	}
	return nbcruo
}

// ClearIsSvip clears the value of the "isSvip" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearIsSvip() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearIsSvip()
	return nbcruo
}

// SetCoin sets the "coin" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetCoin(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ResetCoin()
	nbcruo.mutation.SetCoin(i)
	return nbcruo
}

// SetNillableCoin sets the "coin" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableCoin(i *int64) *NovelBuyChapterRecordUpdateOne {
	if i != nil {
		nbcruo.SetCoin(*i)
	}
	return nbcruo
}

// AddCoin adds i to the "coin" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) AddCoin(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.AddCoin(i)
	return nbcruo
}

// ClearCoin clears the value of the "coin" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearCoin() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearCoin()
	return nbcruo
}

// SetCoupon sets the "coupon" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetCoupon(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ResetCoupon()
	nbcruo.mutation.SetCoupon(i)
	return nbcruo
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableCoupon(i *int64) *NovelBuyChapterRecordUpdateOne {
	if i != nil {
		nbcruo.SetCoupon(*i)
	}
	return nbcruo
}

// AddCoupon adds i to the "coupon" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) AddCoupon(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.AddCoupon(i)
	return nbcruo
}

// ClearCoupon clears the value of the "coupon" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearCoupon() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearCoupon()
	return nbcruo
}

// SetDiscount sets the "discount" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetDiscount(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ResetDiscount()
	nbcruo.mutation.SetDiscount(i)
	return nbcruo
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableDiscount(i *int64) *NovelBuyChapterRecordUpdateOne {
	if i != nil {
		nbcruo.SetDiscount(*i)
	}
	return nbcruo
}

// AddDiscount adds i to the "discount" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) AddDiscount(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.AddDiscount(i)
	return nbcruo
}

// ClearDiscount clears the value of the "discount" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearDiscount() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearDiscount()
	return nbcruo
}

// SetRemark sets the "remark" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetRemark(s string) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.SetRemark(s)
	return nbcruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableRemark(s *string) *NovelBuyChapterRecordUpdateOne {
	if s != nil {
		nbcruo.SetRemark(*s)
	}
	return nbcruo
}

// ClearRemark clears the value of the "remark" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearRemark() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearRemark()
	return nbcruo
}

// SetUpdatedAt sets the "updatedAt" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetUpdatedAt(t time.Time) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.SetUpdatedAt(t)
	return nbcruo
}

// SetCreateBy sets the "createBy" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetCreateBy(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ResetCreateBy()
	nbcruo.mutation.SetCreateBy(i)
	return nbcruo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableCreateBy(i *int64) *NovelBuyChapterRecordUpdateOne {
	if i != nil {
		nbcruo.SetCreateBy(*i)
	}
	return nbcruo
}

// AddCreateBy adds i to the "createBy" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) AddCreateBy(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.AddCreateBy(i)
	return nbcruo
}

// SetUpdateBy sets the "updateBy" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetUpdateBy(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ResetUpdateBy()
	nbcruo.mutation.SetUpdateBy(i)
	return nbcruo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableUpdateBy(i *int64) *NovelBuyChapterRecordUpdateOne {
	if i != nil {
		nbcruo.SetUpdateBy(*i)
	}
	return nbcruo
}

// AddUpdateBy adds i to the "updateBy" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) AddUpdateBy(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.AddUpdateBy(i)
	return nbcruo
}

// SetTenantId sets the "tenantId" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetTenantId(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ResetTenantId()
	nbcruo.mutation.SetTenantId(i)
	return nbcruo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetNillableTenantId(i *int64) *NovelBuyChapterRecordUpdateOne {
	if i != nil {
		nbcruo.SetTenantId(*i)
	}
	return nbcruo
}

// AddTenantId adds i to the "tenantId" field.
func (nbcruo *NovelBuyChapterRecordUpdateOne) AddTenantId(i int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.AddTenantId(i)
	return nbcruo
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetUserID(id int64) *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.SetUserID(id)
	return nbcruo
}

// SetUser sets the "user" edge to the SocialUser entity.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SetUser(s *SocialUser) *NovelBuyChapterRecordUpdateOne {
	return nbcruo.SetUserID(s.ID)
}

// Mutation returns the NovelBuyChapterRecordMutation object of the builder.
func (nbcruo *NovelBuyChapterRecordUpdateOne) Mutation() *NovelBuyChapterRecordMutation {
	return nbcruo.mutation
}

// ClearUser clears the "user" edge to the SocialUser entity.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ClearUser() *NovelBuyChapterRecordUpdateOne {
	nbcruo.mutation.ClearUser()
	return nbcruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nbcruo *NovelBuyChapterRecordUpdateOne) Select(field string, fields ...string) *NovelBuyChapterRecordUpdateOne {
	nbcruo.fields = append([]string{field}, fields...)
	return nbcruo
}

// Save executes the query and returns the updated NovelBuyChapterRecord entity.
func (nbcruo *NovelBuyChapterRecordUpdateOne) Save(ctx context.Context) (*NovelBuyChapterRecord, error) {
	var (
		err  error
		node *NovelBuyChapterRecord
	)
	nbcruo.defaults()
	if len(nbcruo.hooks) == 0 {
		if err = nbcruo.check(); err != nil {
			return nil, err
		}
		node, err = nbcruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelBuyChapterRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nbcruo.check(); err != nil {
				return nil, err
			}
			nbcruo.mutation = mutation
			node, err = nbcruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nbcruo.hooks) - 1; i >= 0; i-- {
			if nbcruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nbcruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nbcruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nbcruo *NovelBuyChapterRecordUpdateOne) SaveX(ctx context.Context) *NovelBuyChapterRecord {
	node, err := nbcruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nbcruo *NovelBuyChapterRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := nbcruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nbcruo *NovelBuyChapterRecordUpdateOne) ExecX(ctx context.Context) {
	if err := nbcruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nbcruo *NovelBuyChapterRecordUpdateOne) defaults() {
	if _, ok := nbcruo.mutation.UpdatedAt(); !ok {
		v := novelbuychapterrecord.UpdateDefaultUpdatedAt()
		nbcruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nbcruo *NovelBuyChapterRecordUpdateOne) check() error {
	if _, ok := nbcruo.mutation.UserID(); nbcruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NovelBuyChapterRecord.user"`)
	}
	return nil
}

func (nbcruo *NovelBuyChapterRecordUpdateOne) sqlSave(ctx context.Context) (_node *NovelBuyChapterRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelbuychapterrecord.Table,
			Columns: novelbuychapterrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelbuychapterrecord.FieldID,
			},
		},
	}
	id, ok := nbcruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NovelBuyChapterRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nbcruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, novelbuychapterrecord.FieldID)
		for _, f := range fields {
			if !novelbuychapterrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != novelbuychapterrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nbcruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nbcruo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelbuychapterrecord.FieldUserName,
		})
	}
	if nbcruo.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelbuychapterrecord.FieldUserName,
		})
	}
	if value, ok := nbcruo.mutation.ChapterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterId,
		})
	}
	if value, ok := nbcruo.mutation.AddedChapterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterId,
		})
	}
	if nbcruo.mutation.ChapterIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldChapterId,
		})
	}
	if value, ok := nbcruo.mutation.ChapterOrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterOrderNum,
		})
	}
	if value, ok := nbcruo.mutation.AddedChapterOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterOrderNum,
		})
	}
	if nbcruo.mutation.ChapterOrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelbuychapterrecord.FieldChapterOrderNum,
		})
	}
	if value, ok := nbcruo.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldNovelId,
		})
	}
	if value, ok := nbcruo.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldNovelId,
		})
	}
	if nbcruo.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldNovelId,
		})
	}
	if value, ok := nbcruo.mutation.NovelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelbuychapterrecord.FieldNovelName,
		})
	}
	if nbcruo.mutation.NovelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelbuychapterrecord.FieldNovelName,
		})
	}
	if value, ok := nbcruo.mutation.ChapterName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelbuychapterrecord.FieldChapterName,
		})
	}
	if nbcruo.mutation.ChapterNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelbuychapterrecord.FieldChapterName,
		})
	}
	if value, ok := nbcruo.mutation.IsSvip(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: novelbuychapterrecord.FieldIsSvip,
		})
	}
	if nbcruo.mutation.IsSvipCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: novelbuychapterrecord.FieldIsSvip,
		})
	}
	if value, ok := nbcruo.mutation.Coin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCoin,
		})
	}
	if value, ok := nbcruo.mutation.AddedCoin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCoin,
		})
	}
	if nbcruo.mutation.CoinCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldCoin,
		})
	}
	if value, ok := nbcruo.mutation.Coupon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCoupon,
		})
	}
	if value, ok := nbcruo.mutation.AddedCoupon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCoupon,
		})
	}
	if nbcruo.mutation.CouponCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldCoupon,
		})
	}
	if value, ok := nbcruo.mutation.Discount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldDiscount,
		})
	}
	if value, ok := nbcruo.mutation.AddedDiscount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldDiscount,
		})
	}
	if nbcruo.mutation.DiscountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelbuychapterrecord.FieldDiscount,
		})
	}
	if value, ok := nbcruo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelbuychapterrecord.FieldRemark,
		})
	}
	if nbcruo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelbuychapterrecord.FieldRemark,
		})
	}
	if value, ok := nbcruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelbuychapterrecord.FieldUpdatedAt,
		})
	}
	if value, ok := nbcruo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCreateBy,
		})
	}
	if value, ok := nbcruo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldCreateBy,
		})
	}
	if value, ok := nbcruo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldUpdateBy,
		})
	}
	if value, ok := nbcruo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldUpdateBy,
		})
	}
	if value, ok := nbcruo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldTenantId,
		})
	}
	if value, ok := nbcruo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelbuychapterrecord.FieldTenantId,
		})
	}
	if nbcruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelbuychapterrecord.UserTable,
			Columns: []string{novelbuychapterrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nbcruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   novelbuychapterrecord.UserTable,
			Columns: []string{novelbuychapterrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NovelBuyChapterRecord{config: nbcruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nbcruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelbuychapterrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
