// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/param/internal/data/ent/noveltag"
	"hope/apps/param/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelTagUpdate is the builder for updating NovelTag entities.
type NovelTagUpdate struct {
	config
	hooks    []Hook
	mutation *NovelTagMutation
}

// Where appends a list predicates to the NovelTagUpdate builder.
func (ntu *NovelTagUpdate) Where(ps ...predicate.NovelTag) *NovelTagUpdate {
	ntu.mutation.Where(ps...)
	return ntu
}

// SetTagId sets the "tagId" field.
func (ntu *NovelTagUpdate) SetTagId(i int64) *NovelTagUpdate {
	ntu.mutation.ResetTagId()
	ntu.mutation.SetTagId(i)
	return ntu
}

// AddTagId adds i to the "tagId" field.
func (ntu *NovelTagUpdate) AddTagId(i int64) *NovelTagUpdate {
	ntu.mutation.AddTagId(i)
	return ntu
}

// SetTagName sets the "tagName" field.
func (ntu *NovelTagUpdate) SetTagName(s string) *NovelTagUpdate {
	ntu.mutation.SetTagName(s)
	return ntu
}

// SetNillableTagName sets the "tagName" field if the given value is not nil.
func (ntu *NovelTagUpdate) SetNillableTagName(s *string) *NovelTagUpdate {
	if s != nil {
		ntu.SetTagName(*s)
	}
	return ntu
}

// ClearTagName clears the value of the "tagName" field.
func (ntu *NovelTagUpdate) ClearTagName() *NovelTagUpdate {
	ntu.mutation.ClearTagName()
	return ntu
}

// SetRemark sets the "remark" field.
func (ntu *NovelTagUpdate) SetRemark(s string) *NovelTagUpdate {
	ntu.mutation.SetRemark(s)
	return ntu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ntu *NovelTagUpdate) SetNillableRemark(s *string) *NovelTagUpdate {
	if s != nil {
		ntu.SetRemark(*s)
	}
	return ntu
}

// ClearRemark clears the value of the "remark" field.
func (ntu *NovelTagUpdate) ClearRemark() *NovelTagUpdate {
	ntu.mutation.ClearRemark()
	return ntu
}

// SetUpdatedAt sets the "updatedAt" field.
func (ntu *NovelTagUpdate) SetUpdatedAt(t time.Time) *NovelTagUpdate {
	ntu.mutation.SetUpdatedAt(t)
	return ntu
}

// SetCreateBy sets the "createBy" field.
func (ntu *NovelTagUpdate) SetCreateBy(i int64) *NovelTagUpdate {
	ntu.mutation.ResetCreateBy()
	ntu.mutation.SetCreateBy(i)
	return ntu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ntu *NovelTagUpdate) SetNillableCreateBy(i *int64) *NovelTagUpdate {
	if i != nil {
		ntu.SetCreateBy(*i)
	}
	return ntu
}

// AddCreateBy adds i to the "createBy" field.
func (ntu *NovelTagUpdate) AddCreateBy(i int64) *NovelTagUpdate {
	ntu.mutation.AddCreateBy(i)
	return ntu
}

// SetUpdateBy sets the "updateBy" field.
func (ntu *NovelTagUpdate) SetUpdateBy(i int64) *NovelTagUpdate {
	ntu.mutation.ResetUpdateBy()
	ntu.mutation.SetUpdateBy(i)
	return ntu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ntu *NovelTagUpdate) SetNillableUpdateBy(i *int64) *NovelTagUpdate {
	if i != nil {
		ntu.SetUpdateBy(*i)
	}
	return ntu
}

// AddUpdateBy adds i to the "updateBy" field.
func (ntu *NovelTagUpdate) AddUpdateBy(i int64) *NovelTagUpdate {
	ntu.mutation.AddUpdateBy(i)
	return ntu
}

// SetTenantId sets the "tenantId" field.
func (ntu *NovelTagUpdate) SetTenantId(i int64) *NovelTagUpdate {
	ntu.mutation.ResetTenantId()
	ntu.mutation.SetTenantId(i)
	return ntu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ntu *NovelTagUpdate) SetNillableTenantId(i *int64) *NovelTagUpdate {
	if i != nil {
		ntu.SetTenantId(*i)
	}
	return ntu
}

// AddTenantId adds i to the "tenantId" field.
func (ntu *NovelTagUpdate) AddTenantId(i int64) *NovelTagUpdate {
	ntu.mutation.AddTenantId(i)
	return ntu
}

// Mutation returns the NovelTagMutation object of the builder.
func (ntu *NovelTagUpdate) Mutation() *NovelTagMutation {
	return ntu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ntu *NovelTagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ntu.defaults()
	if len(ntu.hooks) == 0 {
		affected, err = ntu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ntu.mutation = mutation
			affected, err = ntu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ntu.hooks) - 1; i >= 0; i-- {
			if ntu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ntu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntu *NovelTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ntu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntu *NovelTagUpdate) Exec(ctx context.Context) error {
	_, err := ntu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntu *NovelTagUpdate) ExecX(ctx context.Context) {
	if err := ntu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ntu *NovelTagUpdate) defaults() {
	if _, ok := ntu.mutation.UpdatedAt(); !ok {
		v := noveltag.UpdateDefaultUpdatedAt()
		ntu.mutation.SetUpdatedAt(v)
	}
}

func (ntu *NovelTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   noveltag.Table,
			Columns: noveltag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: noveltag.FieldID,
			},
		},
	}
	if ps := ntu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntu.mutation.TagId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldTagId,
		})
	}
	if value, ok := ntu.mutation.AddedTagId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldTagId,
		})
	}
	if value, ok := ntu.mutation.TagName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: noveltag.FieldTagName,
		})
	}
	if ntu.mutation.TagNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: noveltag.FieldTagName,
		})
	}
	if value, ok := ntu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: noveltag.FieldRemark,
		})
	}
	if ntu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: noveltag.FieldRemark,
		})
	}
	if value, ok := ntu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: noveltag.FieldUpdatedAt,
		})
	}
	if value, ok := ntu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldCreateBy,
		})
	}
	if value, ok := ntu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldCreateBy,
		})
	}
	if value, ok := ntu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldUpdateBy,
		})
	}
	if value, ok := ntu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldUpdateBy,
		})
	}
	if value, ok := ntu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldTenantId,
		})
	}
	if value, ok := ntu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldTenantId,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{noveltag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NovelTagUpdateOne is the builder for updating a single NovelTag entity.
type NovelTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NovelTagMutation
}

// SetTagId sets the "tagId" field.
func (ntuo *NovelTagUpdateOne) SetTagId(i int64) *NovelTagUpdateOne {
	ntuo.mutation.ResetTagId()
	ntuo.mutation.SetTagId(i)
	return ntuo
}

// AddTagId adds i to the "tagId" field.
func (ntuo *NovelTagUpdateOne) AddTagId(i int64) *NovelTagUpdateOne {
	ntuo.mutation.AddTagId(i)
	return ntuo
}

// SetTagName sets the "tagName" field.
func (ntuo *NovelTagUpdateOne) SetTagName(s string) *NovelTagUpdateOne {
	ntuo.mutation.SetTagName(s)
	return ntuo
}

// SetNillableTagName sets the "tagName" field if the given value is not nil.
func (ntuo *NovelTagUpdateOne) SetNillableTagName(s *string) *NovelTagUpdateOne {
	if s != nil {
		ntuo.SetTagName(*s)
	}
	return ntuo
}

// ClearTagName clears the value of the "tagName" field.
func (ntuo *NovelTagUpdateOne) ClearTagName() *NovelTagUpdateOne {
	ntuo.mutation.ClearTagName()
	return ntuo
}

// SetRemark sets the "remark" field.
func (ntuo *NovelTagUpdateOne) SetRemark(s string) *NovelTagUpdateOne {
	ntuo.mutation.SetRemark(s)
	return ntuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ntuo *NovelTagUpdateOne) SetNillableRemark(s *string) *NovelTagUpdateOne {
	if s != nil {
		ntuo.SetRemark(*s)
	}
	return ntuo
}

// ClearRemark clears the value of the "remark" field.
func (ntuo *NovelTagUpdateOne) ClearRemark() *NovelTagUpdateOne {
	ntuo.mutation.ClearRemark()
	return ntuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ntuo *NovelTagUpdateOne) SetUpdatedAt(t time.Time) *NovelTagUpdateOne {
	ntuo.mutation.SetUpdatedAt(t)
	return ntuo
}

// SetCreateBy sets the "createBy" field.
func (ntuo *NovelTagUpdateOne) SetCreateBy(i int64) *NovelTagUpdateOne {
	ntuo.mutation.ResetCreateBy()
	ntuo.mutation.SetCreateBy(i)
	return ntuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ntuo *NovelTagUpdateOne) SetNillableCreateBy(i *int64) *NovelTagUpdateOne {
	if i != nil {
		ntuo.SetCreateBy(*i)
	}
	return ntuo
}

// AddCreateBy adds i to the "createBy" field.
func (ntuo *NovelTagUpdateOne) AddCreateBy(i int64) *NovelTagUpdateOne {
	ntuo.mutation.AddCreateBy(i)
	return ntuo
}

// SetUpdateBy sets the "updateBy" field.
func (ntuo *NovelTagUpdateOne) SetUpdateBy(i int64) *NovelTagUpdateOne {
	ntuo.mutation.ResetUpdateBy()
	ntuo.mutation.SetUpdateBy(i)
	return ntuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ntuo *NovelTagUpdateOne) SetNillableUpdateBy(i *int64) *NovelTagUpdateOne {
	if i != nil {
		ntuo.SetUpdateBy(*i)
	}
	return ntuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (ntuo *NovelTagUpdateOne) AddUpdateBy(i int64) *NovelTagUpdateOne {
	ntuo.mutation.AddUpdateBy(i)
	return ntuo
}

// SetTenantId sets the "tenantId" field.
func (ntuo *NovelTagUpdateOne) SetTenantId(i int64) *NovelTagUpdateOne {
	ntuo.mutation.ResetTenantId()
	ntuo.mutation.SetTenantId(i)
	return ntuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ntuo *NovelTagUpdateOne) SetNillableTenantId(i *int64) *NovelTagUpdateOne {
	if i != nil {
		ntuo.SetTenantId(*i)
	}
	return ntuo
}

// AddTenantId adds i to the "tenantId" field.
func (ntuo *NovelTagUpdateOne) AddTenantId(i int64) *NovelTagUpdateOne {
	ntuo.mutation.AddTenantId(i)
	return ntuo
}

// Mutation returns the NovelTagMutation object of the builder.
func (ntuo *NovelTagUpdateOne) Mutation() *NovelTagMutation {
	return ntuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ntuo *NovelTagUpdateOne) Select(field string, fields ...string) *NovelTagUpdateOne {
	ntuo.fields = append([]string{field}, fields...)
	return ntuo
}

// Save executes the query and returns the updated NovelTag entity.
func (ntuo *NovelTagUpdateOne) Save(ctx context.Context) (*NovelTag, error) {
	var (
		err  error
		node *NovelTag
	)
	ntuo.defaults()
	if len(ntuo.hooks) == 0 {
		node, err = ntuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ntuo.mutation = mutation
			node, err = ntuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntuo.hooks) - 1; i >= 0; i-- {
			if ntuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ntuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntuo *NovelTagUpdateOne) SaveX(ctx context.Context) *NovelTag {
	node, err := ntuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ntuo *NovelTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ntuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntuo *NovelTagUpdateOne) ExecX(ctx context.Context) {
	if err := ntuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ntuo *NovelTagUpdateOne) defaults() {
	if _, ok := ntuo.mutation.UpdatedAt(); !ok {
		v := noveltag.UpdateDefaultUpdatedAt()
		ntuo.mutation.SetUpdatedAt(v)
	}
}

func (ntuo *NovelTagUpdateOne) sqlSave(ctx context.Context) (_node *NovelTag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   noveltag.Table,
			Columns: noveltag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: noveltag.FieldID,
			},
		},
	}
	id, ok := ntuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NovelTag.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ntuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, noveltag.FieldID)
		for _, f := range fields {
			if !noveltag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != noveltag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ntuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntuo.mutation.TagId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldTagId,
		})
	}
	if value, ok := ntuo.mutation.AddedTagId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldTagId,
		})
	}
	if value, ok := ntuo.mutation.TagName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: noveltag.FieldTagName,
		})
	}
	if ntuo.mutation.TagNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: noveltag.FieldTagName,
		})
	}
	if value, ok := ntuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: noveltag.FieldRemark,
		})
	}
	if ntuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: noveltag.FieldRemark,
		})
	}
	if value, ok := ntuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: noveltag.FieldUpdatedAt,
		})
	}
	if value, ok := ntuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldCreateBy,
		})
	}
	if value, ok := ntuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldCreateBy,
		})
	}
	if value, ok := ntuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldUpdateBy,
		})
	}
	if value, ok := ntuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldUpdateBy,
		})
	}
	if value, ok := ntuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldTenantId,
		})
	}
	if value, ok := ntuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: noveltag.FieldTenantId,
		})
	}
	_node = &NovelTag{config: ntuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ntuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{noveltag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
