// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/admin/internal/data/ent/sysdept"
	"hope/apps/admin/internal/data/ent/syspost"
	"hope/apps/admin/internal/data/ent/sysuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SysUser is the model entity for the SysUser schema.
type SysUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	// 用户名
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	// 密码
	Password string `json:"password,omitempty"`
	// NickName holds the value of the "nickName" field.
	// 昵称
	NickName string `json:"nickName,omitempty"`
	// Phone holds the value of the "phone" field.
	// 手机号
	Phone string `json:"phone,omitempty"`
	// DeptId holds the value of the "deptId" field.
	// 部门ID
	DeptId int64 `json:"deptId,omitempty"`
	// PostId holds the value of the "postId" field.
	// 岗位ID
	PostId int64 `json:"postId,omitempty"`
	// RoleId holds the value of the "roleId" field.
	// 角色ID
	RoleId int64 `json:"roleId,omitempty"`
	// Avatar holds the value of the "avatar" field.
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// Sex holds the value of the "sex" field.
	// 性别,0保密,1男,2女
	Sex int32 `json:"sex,omitempty"`
	// Email holds the value of the "email" field.
	// 邮箱
	Email string `json:"email,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// Desc holds the value of the "desc" field.
	// 个人简介
	Desc string `json:"desc,omitempty"`
	// HomePath holds the value of the "homePath" field.
	// 登陆默认打开页面
	HomePath string `json:"homePath,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysUserQuery when eager-loading is set.
	Edges SysUserEdges `json:"edges"`
}

// SysUserEdges holds the relations/edges for other nodes in the graph.
type SysUserEdges struct {
	// Dept holds the value of the dept edge.
	Dept *SysDept `json:"dept,omitempty"`
	// Post holds the value of the post edge.
	Post *SysPost `json:"post,omitempty"`
	// Role holds the value of the role edge.
	Role []*SysRole `json:"role,omitempty"`
	// LoginLogs holds the value of the loginLogs edge.
	LoginLogs []*SysLoginLog `json:"loginLogs,omitempty"`
	// OperaLogs holds the value of the operaLogs edge.
	OperaLogs []*SysOperaLog `json:"operaLogs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// DeptOrErr returns the Dept value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysUserEdges) DeptOrErr() (*SysDept, error) {
	if e.loadedTypes[0] {
		if e.Dept == nil {
			// The edge dept was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sysdept.Label}
		}
		return e.Dept, nil
	}
	return nil, &NotLoadedError{edge: "dept"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysUserEdges) PostOrErr() (*SysPost, error) {
	if e.loadedTypes[1] {
		if e.Post == nil {
			// The edge post was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: syspost.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading.
func (e SysUserEdges) RoleOrErr() ([]*SysRole, error) {
	if e.loadedTypes[2] {
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// LoginLogsOrErr returns the LoginLogs value or an error if the edge
// was not loaded in eager-loading.
func (e SysUserEdges) LoginLogsOrErr() ([]*SysLoginLog, error) {
	if e.loadedTypes[3] {
		return e.LoginLogs, nil
	}
	return nil, &NotLoadedError{edge: "loginLogs"}
}

// OperaLogsOrErr returns the OperaLogs value or an error if the edge
// was not loaded in eager-loading.
func (e SysUserEdges) OperaLogsOrErr() ([]*SysOperaLog, error) {
	if e.loadedTypes[4] {
		return e.OperaLogs, nil
	}
	return nil, &NotLoadedError{edge: "operaLogs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID, sysuser.FieldDeptId, sysuser.FieldPostId, sysuser.FieldRoleId, sysuser.FieldSex, sysuser.FieldCreateBy, sysuser.FieldUpdateBy, sysuser.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case sysuser.FieldUsername, sysuser.FieldPassword, sysuser.FieldNickName, sysuser.FieldPhone, sysuser.FieldAvatar, sysuser.FieldEmail, sysuser.FieldRemark, sysuser.FieldDesc, sysuser.FieldHomePath, sysuser.FieldStatus:
			values[i] = new(sql.NullString)
		case sysuser.FieldCreatedAt, sysuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysUser fields.
func (su *SysUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			su.ID = int64(value.Int64)
		case sysuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				su.Username = value.String
			}
		case sysuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				su.Password = value.String
			}
		case sysuser.FieldNickName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickName", values[i])
			} else if value.Valid {
				su.NickName = value.String
			}
		case sysuser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				su.Phone = value.String
			}
		case sysuser.FieldDeptId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deptId", values[i])
			} else if value.Valid {
				su.DeptId = value.Int64
			}
		case sysuser.FieldPostId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field postId", values[i])
			} else if value.Valid {
				su.PostId = value.Int64
			}
		case sysuser.FieldRoleId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field roleId", values[i])
			} else if value.Valid {
				su.RoleId = value.Int64
			}
		case sysuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				su.Avatar = value.String
			}
		case sysuser.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				su.Sex = int32(value.Int64)
			}
		case sysuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				su.Email = value.String
			}
		case sysuser.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				su.Remark = value.String
			}
		case sysuser.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				su.Desc = value.String
			}
		case sysuser.FieldHomePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homePath", values[i])
			} else if value.Valid {
				su.HomePath = value.String
			}
		case sysuser.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				su.Status = value.String
			}
		case sysuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				su.CreatedAt = value.Time
			}
		case sysuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				su.UpdatedAt = value.Time
			}
		case sysuser.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				su.CreateBy = value.Int64
			}
		case sysuser.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				su.UpdateBy = value.Int64
			}
		case sysuser.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				su.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryDept queries the "dept" edge of the SysUser entity.
func (su *SysUser) QueryDept() *SysDeptQuery {
	return (&SysUserClient{config: su.config}).QueryDept(su)
}

// QueryPost queries the "post" edge of the SysUser entity.
func (su *SysUser) QueryPost() *SysPostQuery {
	return (&SysUserClient{config: su.config}).QueryPost(su)
}

// QueryRole queries the "role" edge of the SysUser entity.
func (su *SysUser) QueryRole() *SysRoleQuery {
	return (&SysUserClient{config: su.config}).QueryRole(su)
}

// QueryLoginLogs queries the "loginLogs" edge of the SysUser entity.
func (su *SysUser) QueryLoginLogs() *SysLoginLogQuery {
	return (&SysUserClient{config: su.config}).QueryLoginLogs(su)
}

// QueryOperaLogs queries the "operaLogs" edge of the SysUser entity.
func (su *SysUser) QueryOperaLogs() *SysOperaLogQuery {
	return (&SysUserClient{config: su.config}).QueryOperaLogs(su)
}

// Update returns a builder for updating this SysUser.
// Note that you need to call SysUser.Unwrap() before calling this method if this SysUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *SysUser) Update() *SysUserUpdateOne {
	return (&SysUserClient{config: su.config}).UpdateOne(su)
}

// Unwrap unwraps the SysUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (su *SysUser) Unwrap() *SysUser {
	tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysUser is not a transactional entity")
	}
	su.config.driver = tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *SysUser) String() string {
	var builder strings.Builder
	builder.WriteString("SysUser(")
	builder.WriteString(fmt.Sprintf("id=%v", su.ID))
	builder.WriteString(", username=")
	builder.WriteString(su.Username)
	builder.WriteString(", password=")
	builder.WriteString(su.Password)
	builder.WriteString(", nickName=")
	builder.WriteString(su.NickName)
	builder.WriteString(", phone=")
	builder.WriteString(su.Phone)
	builder.WriteString(", deptId=")
	builder.WriteString(fmt.Sprintf("%v", su.DeptId))
	builder.WriteString(", postId=")
	builder.WriteString(fmt.Sprintf("%v", su.PostId))
	builder.WriteString(", roleId=")
	builder.WriteString(fmt.Sprintf("%v", su.RoleId))
	builder.WriteString(", avatar=")
	builder.WriteString(su.Avatar)
	builder.WriteString(", sex=")
	builder.WriteString(fmt.Sprintf("%v", su.Sex))
	builder.WriteString(", email=")
	builder.WriteString(su.Email)
	builder.WriteString(", remark=")
	builder.WriteString(su.Remark)
	builder.WriteString(", desc=")
	builder.WriteString(su.Desc)
	builder.WriteString(", homePath=")
	builder.WriteString(su.HomePath)
	builder.WriteString(", status=")
	builder.WriteString(su.Status)
	builder.WriteString(", createdAt=")
	builder.WriteString(su.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(su.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", su.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", su.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", su.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// SysUsers is a parsable slice of SysUser.
type SysUsers []*SysUser

func (su SysUsers) config(cfg config) {
	for _i := range su {
		su[_i].config = cfg
	}
}
