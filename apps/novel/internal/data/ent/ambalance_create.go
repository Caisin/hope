// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/ambalance"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AmBalanceCreate is the builder for creating a AmBalance entity.
type AmBalanceCreate struct {
	config
	mutation *AmBalanceMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (abc *AmBalanceCreate) SetUserId(i int64) *AmBalanceCreate {
	abc.mutation.SetUserId(i)
	return abc
}

// SetOrderId sets the "orderId" field.
func (abc *AmBalanceCreate) SetOrderId(s string) *AmBalanceCreate {
	abc.mutation.SetOrderId(s)
	return abc
}

// SetNillableOrderId sets the "orderId" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableOrderId(s *string) *AmBalanceCreate {
	if s != nil {
		abc.SetOrderId(*s)
	}
	return abc
}

// SetEventId sets the "eventId" field.
func (abc *AmBalanceCreate) SetEventId(i int64) *AmBalanceCreate {
	abc.mutation.SetEventId(i)
	return abc
}

// SetNillableEventId sets the "eventId" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableEventId(i *int64) *AmBalanceCreate {
	if i != nil {
		abc.SetEventId(*i)
	}
	return abc
}

// SetCashTag sets the "cashTag" field.
func (abc *AmBalanceCreate) SetCashTag(i int32) *AmBalanceCreate {
	abc.mutation.SetCashTag(i)
	return abc
}

// SetNillableCashTag sets the "cashTag" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableCashTag(i *int32) *AmBalanceCreate {
	if i != nil {
		abc.SetCashTag(*i)
	}
	return abc
}

// SetAssetItemId sets the "assetItemId" field.
func (abc *AmBalanceCreate) SetAssetItemId(i int32) *AmBalanceCreate {
	abc.mutation.SetAssetItemId(i)
	return abc
}

// SetNillableAssetItemId sets the "assetItemId" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableAssetItemId(i *int32) *AmBalanceCreate {
	if i != nil {
		abc.SetAssetItemId(*i)
	}
	return abc
}

// SetAmount sets the "amount" field.
func (abc *AmBalanceCreate) SetAmount(i int64) *AmBalanceCreate {
	abc.mutation.SetAmount(i)
	return abc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableAmount(i *int64) *AmBalanceCreate {
	if i != nil {
		abc.SetAmount(*i)
	}
	return abc
}

// SetBalance sets the "balance" field.
func (abc *AmBalanceCreate) SetBalance(i int64) *AmBalanceCreate {
	abc.mutation.SetBalance(i)
	return abc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableBalance(i *int64) *AmBalanceCreate {
	if i != nil {
		abc.SetBalance(*i)
	}
	return abc
}

// SetRemark sets the "remark" field.
func (abc *AmBalanceCreate) SetRemark(s string) *AmBalanceCreate {
	abc.mutation.SetRemark(s)
	return abc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableRemark(s *string) *AmBalanceCreate {
	if s != nil {
		abc.SetRemark(*s)
	}
	return abc
}

// SetEffectTime sets the "effectTime" field.
func (abc *AmBalanceCreate) SetEffectTime(t time.Time) *AmBalanceCreate {
	abc.mutation.SetEffectTime(t)
	return abc
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableEffectTime(t *time.Time) *AmBalanceCreate {
	if t != nil {
		abc.SetEffectTime(*t)
	}
	return abc
}

// SetExpiredTime sets the "expiredTime" field.
func (abc *AmBalanceCreate) SetExpiredTime(t time.Time) *AmBalanceCreate {
	abc.mutation.SetExpiredTime(t)
	return abc
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableExpiredTime(t *time.Time) *AmBalanceCreate {
	if t != nil {
		abc.SetExpiredTime(*t)
	}
	return abc
}

// SetCreatedAt sets the "createdAt" field.
func (abc *AmBalanceCreate) SetCreatedAt(t time.Time) *AmBalanceCreate {
	abc.mutation.SetCreatedAt(t)
	return abc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableCreatedAt(t *time.Time) *AmBalanceCreate {
	if t != nil {
		abc.SetCreatedAt(*t)
	}
	return abc
}

// SetUpdatedAt sets the "updatedAt" field.
func (abc *AmBalanceCreate) SetUpdatedAt(t time.Time) *AmBalanceCreate {
	abc.mutation.SetUpdatedAt(t)
	return abc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableUpdatedAt(t *time.Time) *AmBalanceCreate {
	if t != nil {
		abc.SetUpdatedAt(*t)
	}
	return abc
}

// SetCreateBy sets the "createBy" field.
func (abc *AmBalanceCreate) SetCreateBy(i int64) *AmBalanceCreate {
	abc.mutation.SetCreateBy(i)
	return abc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableCreateBy(i *int64) *AmBalanceCreate {
	if i != nil {
		abc.SetCreateBy(*i)
	}
	return abc
}

// SetUpdateBy sets the "updateBy" field.
func (abc *AmBalanceCreate) SetUpdateBy(i int64) *AmBalanceCreate {
	abc.mutation.SetUpdateBy(i)
	return abc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableUpdateBy(i *int64) *AmBalanceCreate {
	if i != nil {
		abc.SetUpdateBy(*i)
	}
	return abc
}

// SetTenantId sets the "tenantId" field.
func (abc *AmBalanceCreate) SetTenantId(i int64) *AmBalanceCreate {
	abc.mutation.SetTenantId(i)
	return abc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (abc *AmBalanceCreate) SetNillableTenantId(i *int64) *AmBalanceCreate {
	if i != nil {
		abc.SetTenantId(*i)
	}
	return abc
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (abc *AmBalanceCreate) SetUserID(id int64) *AmBalanceCreate {
	abc.mutation.SetUserID(id)
	return abc
}

// SetUser sets the "user" edge to the SocialUser entity.
func (abc *AmBalanceCreate) SetUser(s *SocialUser) *AmBalanceCreate {
	return abc.SetUserID(s.ID)
}

// Mutation returns the AmBalanceMutation object of the builder.
func (abc *AmBalanceCreate) Mutation() *AmBalanceMutation {
	return abc.mutation
}

// Save creates the AmBalance in the database.
func (abc *AmBalanceCreate) Save(ctx context.Context) (*AmBalance, error) {
	var (
		err  error
		node *AmBalance
	)
	abc.defaults()
	if len(abc.hooks) == 0 {
		if err = abc.check(); err != nil {
			return nil, err
		}
		node, err = abc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AmBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = abc.check(); err != nil {
				return nil, err
			}
			abc.mutation = mutation
			if node, err = abc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(abc.hooks) - 1; i >= 0; i-- {
			if abc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = abc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, abc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (abc *AmBalanceCreate) SaveX(ctx context.Context) *AmBalance {
	v, err := abc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (abc *AmBalanceCreate) Exec(ctx context.Context) error {
	_, err := abc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abc *AmBalanceCreate) ExecX(ctx context.Context) {
	if err := abc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (abc *AmBalanceCreate) defaults() {
	if _, ok := abc.mutation.EffectTime(); !ok {
		v := ambalance.DefaultEffectTime()
		abc.mutation.SetEffectTime(v)
	}
	if _, ok := abc.mutation.ExpiredTime(); !ok {
		v := ambalance.DefaultExpiredTime()
		abc.mutation.SetExpiredTime(v)
	}
	if _, ok := abc.mutation.CreatedAt(); !ok {
		v := ambalance.DefaultCreatedAt()
		abc.mutation.SetCreatedAt(v)
	}
	if _, ok := abc.mutation.UpdatedAt(); !ok {
		v := ambalance.DefaultUpdatedAt()
		abc.mutation.SetUpdatedAt(v)
	}
	if _, ok := abc.mutation.CreateBy(); !ok {
		v := ambalance.DefaultCreateBy
		abc.mutation.SetCreateBy(v)
	}
	if _, ok := abc.mutation.UpdateBy(); !ok {
		v := ambalance.DefaultUpdateBy
		abc.mutation.SetUpdateBy(v)
	}
	if _, ok := abc.mutation.TenantId(); !ok {
		v := ambalance.DefaultTenantId
		abc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (abc *AmBalanceCreate) check() error {
	if _, ok := abc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "userId"`)}
	}
	if _, ok := abc.mutation.EffectTime(); !ok {
		return &ValidationError{Name: "effectTime", err: errors.New(`ent: missing required field "effectTime"`)}
	}
	if _, ok := abc.mutation.ExpiredTime(); !ok {
		return &ValidationError{Name: "expiredTime", err: errors.New(`ent: missing required field "expiredTime"`)}
	}
	if _, ok := abc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := abc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := abc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := abc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := abc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	if _, ok := abc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (abc *AmBalanceCreate) sqlSave(ctx context.Context) (*AmBalance, error) {
	_node, _spec := abc.createSpec()
	if err := sqlgraph.CreateNode(ctx, abc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (abc *AmBalanceCreate) createSpec() (*AmBalance, *sqlgraph.CreateSpec) {
	var (
		_node = &AmBalance{config: abc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ambalance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: ambalance.FieldID,
			},
		}
	)
	if value, ok := abc.mutation.OrderId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ambalance.FieldOrderId,
		})
		_node.OrderId = value
	}
	if value, ok := abc.mutation.EventId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldEventId,
		})
		_node.EventId = value
	}
	if value, ok := abc.mutation.CashTag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldCashTag,
		})
		_node.CashTag = value
	}
	if value, ok := abc.mutation.AssetItemId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: ambalance.FieldAssetItemId,
		})
		_node.AssetItemId = value
	}
	if value, ok := abc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := abc.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldBalance,
		})
		_node.Balance = value
	}
	if value, ok := abc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ambalance.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := abc.mutation.EffectTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldEffectTime,
		})
		_node.EffectTime = value
	}
	if value, ok := abc.mutation.ExpiredTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldExpiredTime,
		})
		_node.ExpiredTime = value
	}
	if value, ok := abc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := abc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ambalance.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := abc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := abc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := abc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: ambalance.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := abc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ambalance.UserTable,
			Columns: []string{ambalance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AmBalanceCreateBulk is the builder for creating many AmBalance entities in bulk.
type AmBalanceCreateBulk struct {
	config
	builders []*AmBalanceCreate
}

// Save creates the AmBalance entities in the database.
func (abcb *AmBalanceCreateBulk) Save(ctx context.Context) ([]*AmBalance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(abcb.builders))
	nodes := make([]*AmBalance, len(abcb.builders))
	mutators := make([]Mutator, len(abcb.builders))
	for i := range abcb.builders {
		func(i int, root context.Context) {
			builder := abcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AmBalanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, abcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, abcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, abcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (abcb *AmBalanceCreateBulk) SaveX(ctx context.Context) []*AmBalance {
	v, err := abcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (abcb *AmBalanceCreateBulk) Exec(ctx context.Context) error {
	_, err := abcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abcb *AmBalanceCreateBulk) ExecX(ctx context.Context) {
	if err := abcb.Exec(ctx); err != nil {
		panic(err)
	}
}
