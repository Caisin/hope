// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"hope/apps/admin/internal/data/ent/migrate"

	"hope/apps/admin/internal/data/ent/casbinrule"
	"hope/apps/admin/internal/data/ent/sysapi"
	"hope/apps/admin/internal/data/ent/syscolumns"
	"hope/apps/admin/internal/data/ent/sysconfig"
	"hope/apps/admin/internal/data/ent/sysdept"
	"hope/apps/admin/internal/data/ent/sysdictdata"
	"hope/apps/admin/internal/data/ent/sysdicttype"
	"hope/apps/admin/internal/data/ent/sysjob"
	"hope/apps/admin/internal/data/ent/sysjoblog"
	"hope/apps/admin/internal/data/ent/sysloginlog"
	"hope/apps/admin/internal/data/ent/sysmenu"
	"hope/apps/admin/internal/data/ent/sysoperalog"
	"hope/apps/admin/internal/data/ent/syspost"
	"hope/apps/admin/internal/data/ent/sysrole"
	"hope/apps/admin/internal/data/ent/systables"
	"hope/apps/admin/internal/data/ent/sysuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CasbinRule is the client for interacting with the CasbinRule builders.
	CasbinRule *CasbinRuleClient
	// SysApi is the client for interacting with the SysApi builders.
	SysApi *SysApiClient
	// SysColumns is the client for interacting with the SysColumns builders.
	SysColumns *SysColumnsClient
	// SysConfig is the client for interacting with the SysConfig builders.
	SysConfig *SysConfigClient
	// SysDept is the client for interacting with the SysDept builders.
	SysDept *SysDeptClient
	// SysDictData is the client for interacting with the SysDictData builders.
	SysDictData *SysDictDataClient
	// SysDictType is the client for interacting with the SysDictType builders.
	SysDictType *SysDictTypeClient
	// SysJob is the client for interacting with the SysJob builders.
	SysJob *SysJobClient
	// SysJobLog is the client for interacting with the SysJobLog builders.
	SysJobLog *SysJobLogClient
	// SysLoginLog is the client for interacting with the SysLoginLog builders.
	SysLoginLog *SysLoginLogClient
	// SysMenu is the client for interacting with the SysMenu builders.
	SysMenu *SysMenuClient
	// SysOperaLog is the client for interacting with the SysOperaLog builders.
	SysOperaLog *SysOperaLogClient
	// SysPost is the client for interacting with the SysPost builders.
	SysPost *SysPostClient
	// SysRole is the client for interacting with the SysRole builders.
	SysRole *SysRoleClient
	// SysTables is the client for interacting with the SysTables builders.
	SysTables *SysTablesClient
	// SysUser is the client for interacting with the SysUser builders.
	SysUser *SysUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CasbinRule = NewCasbinRuleClient(c.config)
	c.SysApi = NewSysApiClient(c.config)
	c.SysColumns = NewSysColumnsClient(c.config)
	c.SysConfig = NewSysConfigClient(c.config)
	c.SysDept = NewSysDeptClient(c.config)
	c.SysDictData = NewSysDictDataClient(c.config)
	c.SysDictType = NewSysDictTypeClient(c.config)
	c.SysJob = NewSysJobClient(c.config)
	c.SysJobLog = NewSysJobLogClient(c.config)
	c.SysLoginLog = NewSysLoginLogClient(c.config)
	c.SysMenu = NewSysMenuClient(c.config)
	c.SysOperaLog = NewSysOperaLogClient(c.config)
	c.SysPost = NewSysPostClient(c.config)
	c.SysRole = NewSysRoleClient(c.config)
	c.SysTables = NewSysTablesClient(c.config)
	c.SysUser = NewSysUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		CasbinRule:  NewCasbinRuleClient(cfg),
		SysApi:      NewSysApiClient(cfg),
		SysColumns:  NewSysColumnsClient(cfg),
		SysConfig:   NewSysConfigClient(cfg),
		SysDept:     NewSysDeptClient(cfg),
		SysDictData: NewSysDictDataClient(cfg),
		SysDictType: NewSysDictTypeClient(cfg),
		SysJob:      NewSysJobClient(cfg),
		SysJobLog:   NewSysJobLogClient(cfg),
		SysLoginLog: NewSysLoginLogClient(cfg),
		SysMenu:     NewSysMenuClient(cfg),
		SysOperaLog: NewSysOperaLogClient(cfg),
		SysPost:     NewSysPostClient(cfg),
		SysRole:     NewSysRoleClient(cfg),
		SysTables:   NewSysTablesClient(cfg),
		SysUser:     NewSysUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:      cfg,
		CasbinRule:  NewCasbinRuleClient(cfg),
		SysApi:      NewSysApiClient(cfg),
		SysColumns:  NewSysColumnsClient(cfg),
		SysConfig:   NewSysConfigClient(cfg),
		SysDept:     NewSysDeptClient(cfg),
		SysDictData: NewSysDictDataClient(cfg),
		SysDictType: NewSysDictTypeClient(cfg),
		SysJob:      NewSysJobClient(cfg),
		SysJobLog:   NewSysJobLogClient(cfg),
		SysLoginLog: NewSysLoginLogClient(cfg),
		SysMenu:     NewSysMenuClient(cfg),
		SysOperaLog: NewSysOperaLogClient(cfg),
		SysPost:     NewSysPostClient(cfg),
		SysRole:     NewSysRoleClient(cfg),
		SysTables:   NewSysTablesClient(cfg),
		SysUser:     NewSysUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CasbinRule.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CasbinRule.Use(hooks...)
	c.SysApi.Use(hooks...)
	c.SysColumns.Use(hooks...)
	c.SysConfig.Use(hooks...)
	c.SysDept.Use(hooks...)
	c.SysDictData.Use(hooks...)
	c.SysDictType.Use(hooks...)
	c.SysJob.Use(hooks...)
	c.SysJobLog.Use(hooks...)
	c.SysLoginLog.Use(hooks...)
	c.SysMenu.Use(hooks...)
	c.SysOperaLog.Use(hooks...)
	c.SysPost.Use(hooks...)
	c.SysRole.Use(hooks...)
	c.SysTables.Use(hooks...)
	c.SysUser.Use(hooks...)
}

// CasbinRuleClient is a client for the CasbinRule schema.
type CasbinRuleClient struct {
	config
}

// NewCasbinRuleClient returns a client for the CasbinRule from the given config.
func NewCasbinRuleClient(c config) *CasbinRuleClient {
	return &CasbinRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `casbinrule.Hooks(f(g(h())))`.
func (c *CasbinRuleClient) Use(hooks ...Hook) {
	c.hooks.CasbinRule = append(c.hooks.CasbinRule, hooks...)
}

// Create returns a create builder for CasbinRule.
func (c *CasbinRuleClient) Create() *CasbinRuleCreate {
	mutation := newCasbinRuleMutation(c.config, OpCreate)
	return &CasbinRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CasbinRule entities.
func (c *CasbinRuleClient) CreateBulk(builders ...*CasbinRuleCreate) *CasbinRuleCreateBulk {
	return &CasbinRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CasbinRule.
func (c *CasbinRuleClient) Update() *CasbinRuleUpdate {
	mutation := newCasbinRuleMutation(c.config, OpUpdate)
	return &CasbinRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CasbinRuleClient) UpdateOne(cr *CasbinRule) *CasbinRuleUpdateOne {
	mutation := newCasbinRuleMutation(c.config, OpUpdateOne, withCasbinRule(cr))
	return &CasbinRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CasbinRuleClient) UpdateOneID(id int64) *CasbinRuleUpdateOne {
	mutation := newCasbinRuleMutation(c.config, OpUpdateOne, withCasbinRuleID(id))
	return &CasbinRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CasbinRule.
func (c *CasbinRuleClient) Delete() *CasbinRuleDelete {
	mutation := newCasbinRuleMutation(c.config, OpDelete)
	return &CasbinRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CasbinRuleClient) DeleteOne(cr *CasbinRule) *CasbinRuleDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CasbinRuleClient) DeleteOneID(id int64) *CasbinRuleDeleteOne {
	builder := c.Delete().Where(casbinrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CasbinRuleDeleteOne{builder}
}

// Query returns a query builder for CasbinRule.
func (c *CasbinRuleClient) Query() *CasbinRuleQuery {
	return &CasbinRuleQuery{
		config: c.config,
	}
}

// Get returns a CasbinRule entity by its id.
func (c *CasbinRuleClient) Get(ctx context.Context, id int64) (*CasbinRule, error) {
	return c.Query().Where(casbinrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CasbinRuleClient) GetX(ctx context.Context, id int64) *CasbinRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CasbinRuleClient) Hooks() []Hook {
	return c.hooks.CasbinRule
}

// SysApiClient is a client for the SysApi schema.
type SysApiClient struct {
	config
}

// NewSysApiClient returns a client for the SysApi from the given config.
func NewSysApiClient(c config) *SysApiClient {
	return &SysApiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysapi.Hooks(f(g(h())))`.
func (c *SysApiClient) Use(hooks ...Hook) {
	c.hooks.SysApi = append(c.hooks.SysApi, hooks...)
}

// Create returns a create builder for SysApi.
func (c *SysApiClient) Create() *SysApiCreate {
	mutation := newSysApiMutation(c.config, OpCreate)
	return &SysApiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysApi entities.
func (c *SysApiClient) CreateBulk(builders ...*SysApiCreate) *SysApiCreateBulk {
	return &SysApiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysApi.
func (c *SysApiClient) Update() *SysApiUpdate {
	mutation := newSysApiMutation(c.config, OpUpdate)
	return &SysApiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysApiClient) UpdateOne(sa *SysApi) *SysApiUpdateOne {
	mutation := newSysApiMutation(c.config, OpUpdateOne, withSysApi(sa))
	return &SysApiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysApiClient) UpdateOneID(id int64) *SysApiUpdateOne {
	mutation := newSysApiMutation(c.config, OpUpdateOne, withSysApiID(id))
	return &SysApiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysApi.
func (c *SysApiClient) Delete() *SysApiDelete {
	mutation := newSysApiMutation(c.config, OpDelete)
	return &SysApiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysApiClient) DeleteOne(sa *SysApi) *SysApiDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysApiClient) DeleteOneID(id int64) *SysApiDeleteOne {
	builder := c.Delete().Where(sysapi.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysApiDeleteOne{builder}
}

// Query returns a query builder for SysApi.
func (c *SysApiClient) Query() *SysApiQuery {
	return &SysApiQuery{
		config: c.config,
	}
}

// Get returns a SysApi entity by its id.
func (c *SysApiClient) Get(ctx context.Context, id int64) (*SysApi, error) {
	return c.Query().Where(sysapi.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysApiClient) GetX(ctx context.Context, id int64) *SysApi {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysApiClient) Hooks() []Hook {
	return c.hooks.SysApi
}

// SysColumnsClient is a client for the SysColumns schema.
type SysColumnsClient struct {
	config
}

// NewSysColumnsClient returns a client for the SysColumns from the given config.
func NewSysColumnsClient(c config) *SysColumnsClient {
	return &SysColumnsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `syscolumns.Hooks(f(g(h())))`.
func (c *SysColumnsClient) Use(hooks ...Hook) {
	c.hooks.SysColumns = append(c.hooks.SysColumns, hooks...)
}

// Create returns a create builder for SysColumns.
func (c *SysColumnsClient) Create() *SysColumnsCreate {
	mutation := newSysColumnsMutation(c.config, OpCreate)
	return &SysColumnsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysColumns entities.
func (c *SysColumnsClient) CreateBulk(builders ...*SysColumnsCreate) *SysColumnsCreateBulk {
	return &SysColumnsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysColumns.
func (c *SysColumnsClient) Update() *SysColumnsUpdate {
	mutation := newSysColumnsMutation(c.config, OpUpdate)
	return &SysColumnsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysColumnsClient) UpdateOne(sc *SysColumns) *SysColumnsUpdateOne {
	mutation := newSysColumnsMutation(c.config, OpUpdateOne, withSysColumns(sc))
	return &SysColumnsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysColumnsClient) UpdateOneID(id int64) *SysColumnsUpdateOne {
	mutation := newSysColumnsMutation(c.config, OpUpdateOne, withSysColumnsID(id))
	return &SysColumnsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysColumns.
func (c *SysColumnsClient) Delete() *SysColumnsDelete {
	mutation := newSysColumnsMutation(c.config, OpDelete)
	return &SysColumnsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysColumnsClient) DeleteOne(sc *SysColumns) *SysColumnsDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysColumnsClient) DeleteOneID(id int64) *SysColumnsDeleteOne {
	builder := c.Delete().Where(syscolumns.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysColumnsDeleteOne{builder}
}

// Query returns a query builder for SysColumns.
func (c *SysColumnsClient) Query() *SysColumnsQuery {
	return &SysColumnsQuery{
		config: c.config,
	}
}

// Get returns a SysColumns entity by its id.
func (c *SysColumnsClient) Get(ctx context.Context, id int64) (*SysColumns, error) {
	return c.Query().Where(syscolumns.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysColumnsClient) GetX(ctx context.Context, id int64) *SysColumns {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysColumnsClient) Hooks() []Hook {
	return c.hooks.SysColumns
}

// SysConfigClient is a client for the SysConfig schema.
type SysConfigClient struct {
	config
}

// NewSysConfigClient returns a client for the SysConfig from the given config.
func NewSysConfigClient(c config) *SysConfigClient {
	return &SysConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysconfig.Hooks(f(g(h())))`.
func (c *SysConfigClient) Use(hooks ...Hook) {
	c.hooks.SysConfig = append(c.hooks.SysConfig, hooks...)
}

// Create returns a create builder for SysConfig.
func (c *SysConfigClient) Create() *SysConfigCreate {
	mutation := newSysConfigMutation(c.config, OpCreate)
	return &SysConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysConfig entities.
func (c *SysConfigClient) CreateBulk(builders ...*SysConfigCreate) *SysConfigCreateBulk {
	return &SysConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysConfig.
func (c *SysConfigClient) Update() *SysConfigUpdate {
	mutation := newSysConfigMutation(c.config, OpUpdate)
	return &SysConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysConfigClient) UpdateOne(sc *SysConfig) *SysConfigUpdateOne {
	mutation := newSysConfigMutation(c.config, OpUpdateOne, withSysConfig(sc))
	return &SysConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysConfigClient) UpdateOneID(id int64) *SysConfigUpdateOne {
	mutation := newSysConfigMutation(c.config, OpUpdateOne, withSysConfigID(id))
	return &SysConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysConfig.
func (c *SysConfigClient) Delete() *SysConfigDelete {
	mutation := newSysConfigMutation(c.config, OpDelete)
	return &SysConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysConfigClient) DeleteOne(sc *SysConfig) *SysConfigDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysConfigClient) DeleteOneID(id int64) *SysConfigDeleteOne {
	builder := c.Delete().Where(sysconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysConfigDeleteOne{builder}
}

// Query returns a query builder for SysConfig.
func (c *SysConfigClient) Query() *SysConfigQuery {
	return &SysConfigQuery{
		config: c.config,
	}
}

// Get returns a SysConfig entity by its id.
func (c *SysConfigClient) Get(ctx context.Context, id int64) (*SysConfig, error) {
	return c.Query().Where(sysconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysConfigClient) GetX(ctx context.Context, id int64) *SysConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysConfigClient) Hooks() []Hook {
	return c.hooks.SysConfig
}

// SysDeptClient is a client for the SysDept schema.
type SysDeptClient struct {
	config
}

// NewSysDeptClient returns a client for the SysDept from the given config.
func NewSysDeptClient(c config) *SysDeptClient {
	return &SysDeptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysdept.Hooks(f(g(h())))`.
func (c *SysDeptClient) Use(hooks ...Hook) {
	c.hooks.SysDept = append(c.hooks.SysDept, hooks...)
}

// Create returns a create builder for SysDept.
func (c *SysDeptClient) Create() *SysDeptCreate {
	mutation := newSysDeptMutation(c.config, OpCreate)
	return &SysDeptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysDept entities.
func (c *SysDeptClient) CreateBulk(builders ...*SysDeptCreate) *SysDeptCreateBulk {
	return &SysDeptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysDept.
func (c *SysDeptClient) Update() *SysDeptUpdate {
	mutation := newSysDeptMutation(c.config, OpUpdate)
	return &SysDeptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysDeptClient) UpdateOne(sd *SysDept) *SysDeptUpdateOne {
	mutation := newSysDeptMutation(c.config, OpUpdateOne, withSysDept(sd))
	return &SysDeptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysDeptClient) UpdateOneID(id int64) *SysDeptUpdateOne {
	mutation := newSysDeptMutation(c.config, OpUpdateOne, withSysDeptID(id))
	return &SysDeptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysDept.
func (c *SysDeptClient) Delete() *SysDeptDelete {
	mutation := newSysDeptMutation(c.config, OpDelete)
	return &SysDeptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysDeptClient) DeleteOne(sd *SysDept) *SysDeptDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysDeptClient) DeleteOneID(id int64) *SysDeptDeleteOne {
	builder := c.Delete().Where(sysdept.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysDeptDeleteOne{builder}
}

// Query returns a query builder for SysDept.
func (c *SysDeptClient) Query() *SysDeptQuery {
	return &SysDeptQuery{
		config: c.config,
	}
}

// Get returns a SysDept entity by its id.
func (c *SysDeptClient) Get(ctx context.Context, id int64) (*SysDept, error) {
	return c.Query().Where(sysdept.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysDeptClient) GetX(ctx context.Context, id int64) *SysDept {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a SysDept.
func (c *SysDeptClient) QueryParent(sd *SysDept) *SysDeptQuery {
	query := &SysDeptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdept.Table, sysdept.FieldID, id),
			sqlgraph.To(sysdept.Table, sysdept.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysdept.ParentTable, sysdept.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildes queries the childes edge of a SysDept.
func (c *SysDeptClient) QueryChildes(sd *SysDept) *SysDeptQuery {
	query := &SysDeptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdept.Table, sysdept.FieldID, id),
			sqlgraph.To(sysdept.Table, sysdept.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysdept.ChildesTable, sysdept.ChildesColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a SysDept.
func (c *SysDeptClient) QueryUsers(sd *SysDept) *SysUserQuery {
	query := &SysUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdept.Table, sysdept.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysdept.UsersTable, sysdept.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysDeptClient) Hooks() []Hook {
	return c.hooks.SysDept
}

// SysDictDataClient is a client for the SysDictData schema.
type SysDictDataClient struct {
	config
}

// NewSysDictDataClient returns a client for the SysDictData from the given config.
func NewSysDictDataClient(c config) *SysDictDataClient {
	return &SysDictDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysdictdata.Hooks(f(g(h())))`.
func (c *SysDictDataClient) Use(hooks ...Hook) {
	c.hooks.SysDictData = append(c.hooks.SysDictData, hooks...)
}

// Create returns a create builder for SysDictData.
func (c *SysDictDataClient) Create() *SysDictDataCreate {
	mutation := newSysDictDataMutation(c.config, OpCreate)
	return &SysDictDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysDictData entities.
func (c *SysDictDataClient) CreateBulk(builders ...*SysDictDataCreate) *SysDictDataCreateBulk {
	return &SysDictDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysDictData.
func (c *SysDictDataClient) Update() *SysDictDataUpdate {
	mutation := newSysDictDataMutation(c.config, OpUpdate)
	return &SysDictDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysDictDataClient) UpdateOne(sdd *SysDictData) *SysDictDataUpdateOne {
	mutation := newSysDictDataMutation(c.config, OpUpdateOne, withSysDictData(sdd))
	return &SysDictDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysDictDataClient) UpdateOneID(id int64) *SysDictDataUpdateOne {
	mutation := newSysDictDataMutation(c.config, OpUpdateOne, withSysDictDataID(id))
	return &SysDictDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysDictData.
func (c *SysDictDataClient) Delete() *SysDictDataDelete {
	mutation := newSysDictDataMutation(c.config, OpDelete)
	return &SysDictDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysDictDataClient) DeleteOne(sdd *SysDictData) *SysDictDataDeleteOne {
	return c.DeleteOneID(sdd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysDictDataClient) DeleteOneID(id int64) *SysDictDataDeleteOne {
	builder := c.Delete().Where(sysdictdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysDictDataDeleteOne{builder}
}

// Query returns a query builder for SysDictData.
func (c *SysDictDataClient) Query() *SysDictDataQuery {
	return &SysDictDataQuery{
		config: c.config,
	}
}

// Get returns a SysDictData entity by its id.
func (c *SysDictDataClient) Get(ctx context.Context, id int64) (*SysDictData, error) {
	return c.Query().Where(sysdictdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysDictDataClient) GetX(ctx context.Context, id int64) *SysDictData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDictType queries the dictType edge of a SysDictData.
func (c *SysDictDataClient) QueryDictType(sdd *SysDictData) *SysDictTypeQuery {
	query := &SysDictTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sdd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdictdata.Table, sysdictdata.FieldID, id),
			sqlgraph.To(sysdicttype.Table, sysdicttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysdictdata.DictTypeTable, sysdictdata.DictTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sdd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysDictDataClient) Hooks() []Hook {
	return c.hooks.SysDictData
}

// SysDictTypeClient is a client for the SysDictType schema.
type SysDictTypeClient struct {
	config
}

// NewSysDictTypeClient returns a client for the SysDictType from the given config.
func NewSysDictTypeClient(c config) *SysDictTypeClient {
	return &SysDictTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysdicttype.Hooks(f(g(h())))`.
func (c *SysDictTypeClient) Use(hooks ...Hook) {
	c.hooks.SysDictType = append(c.hooks.SysDictType, hooks...)
}

// Create returns a create builder for SysDictType.
func (c *SysDictTypeClient) Create() *SysDictTypeCreate {
	mutation := newSysDictTypeMutation(c.config, OpCreate)
	return &SysDictTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysDictType entities.
func (c *SysDictTypeClient) CreateBulk(builders ...*SysDictTypeCreate) *SysDictTypeCreateBulk {
	return &SysDictTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysDictType.
func (c *SysDictTypeClient) Update() *SysDictTypeUpdate {
	mutation := newSysDictTypeMutation(c.config, OpUpdate)
	return &SysDictTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysDictTypeClient) UpdateOne(sdt *SysDictType) *SysDictTypeUpdateOne {
	mutation := newSysDictTypeMutation(c.config, OpUpdateOne, withSysDictType(sdt))
	return &SysDictTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysDictTypeClient) UpdateOneID(id int64) *SysDictTypeUpdateOne {
	mutation := newSysDictTypeMutation(c.config, OpUpdateOne, withSysDictTypeID(id))
	return &SysDictTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysDictType.
func (c *SysDictTypeClient) Delete() *SysDictTypeDelete {
	mutation := newSysDictTypeMutation(c.config, OpDelete)
	return &SysDictTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysDictTypeClient) DeleteOne(sdt *SysDictType) *SysDictTypeDeleteOne {
	return c.DeleteOneID(sdt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysDictTypeClient) DeleteOneID(id int64) *SysDictTypeDeleteOne {
	builder := c.Delete().Where(sysdicttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysDictTypeDeleteOne{builder}
}

// Query returns a query builder for SysDictType.
func (c *SysDictTypeClient) Query() *SysDictTypeQuery {
	return &SysDictTypeQuery{
		config: c.config,
	}
}

// Get returns a SysDictType entity by its id.
func (c *SysDictTypeClient) Get(ctx context.Context, id int64) (*SysDictType, error) {
	return c.Query().Where(sysdicttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysDictTypeClient) GetX(ctx context.Context, id int64) *SysDictType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDataList queries the dataList edge of a SysDictType.
func (c *SysDictTypeClient) QueryDataList(sdt *SysDictType) *SysDictDataQuery {
	query := &SysDictDataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdicttype.Table, sysdicttype.FieldID, id),
			sqlgraph.To(sysdictdata.Table, sysdictdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysdicttype.DataListTable, sysdicttype.DataListColumn),
		)
		fromV = sqlgraph.Neighbors(sdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysDictTypeClient) Hooks() []Hook {
	return c.hooks.SysDictType
}

// SysJobClient is a client for the SysJob schema.
type SysJobClient struct {
	config
}

// NewSysJobClient returns a client for the SysJob from the given config.
func NewSysJobClient(c config) *SysJobClient {
	return &SysJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysjob.Hooks(f(g(h())))`.
func (c *SysJobClient) Use(hooks ...Hook) {
	c.hooks.SysJob = append(c.hooks.SysJob, hooks...)
}

// Create returns a create builder for SysJob.
func (c *SysJobClient) Create() *SysJobCreate {
	mutation := newSysJobMutation(c.config, OpCreate)
	return &SysJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysJob entities.
func (c *SysJobClient) CreateBulk(builders ...*SysJobCreate) *SysJobCreateBulk {
	return &SysJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysJob.
func (c *SysJobClient) Update() *SysJobUpdate {
	mutation := newSysJobMutation(c.config, OpUpdate)
	return &SysJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysJobClient) UpdateOne(sj *SysJob) *SysJobUpdateOne {
	mutation := newSysJobMutation(c.config, OpUpdateOne, withSysJob(sj))
	return &SysJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysJobClient) UpdateOneID(id int64) *SysJobUpdateOne {
	mutation := newSysJobMutation(c.config, OpUpdateOne, withSysJobID(id))
	return &SysJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysJob.
func (c *SysJobClient) Delete() *SysJobDelete {
	mutation := newSysJobMutation(c.config, OpDelete)
	return &SysJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysJobClient) DeleteOne(sj *SysJob) *SysJobDeleteOne {
	return c.DeleteOneID(sj.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysJobClient) DeleteOneID(id int64) *SysJobDeleteOne {
	builder := c.Delete().Where(sysjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysJobDeleteOne{builder}
}

// Query returns a query builder for SysJob.
func (c *SysJobClient) Query() *SysJobQuery {
	return &SysJobQuery{
		config: c.config,
	}
}

// Get returns a SysJob entity by its id.
func (c *SysJobClient) Get(ctx context.Context, id int64) (*SysJob, error) {
	return c.Query().Where(sysjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysJobClient) GetX(ctx context.Context, id int64) *SysJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLogs queries the logs edge of a SysJob.
func (c *SysJobClient) QueryLogs(sj *SysJob) *SysJobLogQuery {
	query := &SysJobLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysjob.Table, sysjob.FieldID, id),
			sqlgraph.To(sysjoblog.Table, sysjoblog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysjob.LogsTable, sysjob.LogsColumn),
		)
		fromV = sqlgraph.Neighbors(sj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysJobClient) Hooks() []Hook {
	return c.hooks.SysJob
}

// SysJobLogClient is a client for the SysJobLog schema.
type SysJobLogClient struct {
	config
}

// NewSysJobLogClient returns a client for the SysJobLog from the given config.
func NewSysJobLogClient(c config) *SysJobLogClient {
	return &SysJobLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysjoblog.Hooks(f(g(h())))`.
func (c *SysJobLogClient) Use(hooks ...Hook) {
	c.hooks.SysJobLog = append(c.hooks.SysJobLog, hooks...)
}

// Create returns a create builder for SysJobLog.
func (c *SysJobLogClient) Create() *SysJobLogCreate {
	mutation := newSysJobLogMutation(c.config, OpCreate)
	return &SysJobLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysJobLog entities.
func (c *SysJobLogClient) CreateBulk(builders ...*SysJobLogCreate) *SysJobLogCreateBulk {
	return &SysJobLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysJobLog.
func (c *SysJobLogClient) Update() *SysJobLogUpdate {
	mutation := newSysJobLogMutation(c.config, OpUpdate)
	return &SysJobLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysJobLogClient) UpdateOne(sjl *SysJobLog) *SysJobLogUpdateOne {
	mutation := newSysJobLogMutation(c.config, OpUpdateOne, withSysJobLog(sjl))
	return &SysJobLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysJobLogClient) UpdateOneID(id int64) *SysJobLogUpdateOne {
	mutation := newSysJobLogMutation(c.config, OpUpdateOne, withSysJobLogID(id))
	return &SysJobLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysJobLog.
func (c *SysJobLogClient) Delete() *SysJobLogDelete {
	mutation := newSysJobLogMutation(c.config, OpDelete)
	return &SysJobLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysJobLogClient) DeleteOne(sjl *SysJobLog) *SysJobLogDeleteOne {
	return c.DeleteOneID(sjl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysJobLogClient) DeleteOneID(id int64) *SysJobLogDeleteOne {
	builder := c.Delete().Where(sysjoblog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysJobLogDeleteOne{builder}
}

// Query returns a query builder for SysJobLog.
func (c *SysJobLogClient) Query() *SysJobLogQuery {
	return &SysJobLogQuery{
		config: c.config,
	}
}

// Get returns a SysJobLog entity by its id.
func (c *SysJobLogClient) Get(ctx context.Context, id int64) (*SysJobLog, error) {
	return c.Query().Where(sysjoblog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysJobLogClient) GetX(ctx context.Context, id int64) *SysJobLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a SysJobLog.
func (c *SysJobLogClient) QueryJob(sjl *SysJobLog) *SysJobQuery {
	query := &SysJobQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sjl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysjoblog.Table, sysjoblog.FieldID, id),
			sqlgraph.To(sysjob.Table, sysjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysjoblog.JobTable, sysjoblog.JobColumn),
		)
		fromV = sqlgraph.Neighbors(sjl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysJobLogClient) Hooks() []Hook {
	return c.hooks.SysJobLog
}

// SysLoginLogClient is a client for the SysLoginLog schema.
type SysLoginLogClient struct {
	config
}

// NewSysLoginLogClient returns a client for the SysLoginLog from the given config.
func NewSysLoginLogClient(c config) *SysLoginLogClient {
	return &SysLoginLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysloginlog.Hooks(f(g(h())))`.
func (c *SysLoginLogClient) Use(hooks ...Hook) {
	c.hooks.SysLoginLog = append(c.hooks.SysLoginLog, hooks...)
}

// Create returns a create builder for SysLoginLog.
func (c *SysLoginLogClient) Create() *SysLoginLogCreate {
	mutation := newSysLoginLogMutation(c.config, OpCreate)
	return &SysLoginLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysLoginLog entities.
func (c *SysLoginLogClient) CreateBulk(builders ...*SysLoginLogCreate) *SysLoginLogCreateBulk {
	return &SysLoginLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysLoginLog.
func (c *SysLoginLogClient) Update() *SysLoginLogUpdate {
	mutation := newSysLoginLogMutation(c.config, OpUpdate)
	return &SysLoginLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysLoginLogClient) UpdateOne(sll *SysLoginLog) *SysLoginLogUpdateOne {
	mutation := newSysLoginLogMutation(c.config, OpUpdateOne, withSysLoginLog(sll))
	return &SysLoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysLoginLogClient) UpdateOneID(id int64) *SysLoginLogUpdateOne {
	mutation := newSysLoginLogMutation(c.config, OpUpdateOne, withSysLoginLogID(id))
	return &SysLoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysLoginLog.
func (c *SysLoginLogClient) Delete() *SysLoginLogDelete {
	mutation := newSysLoginLogMutation(c.config, OpDelete)
	return &SysLoginLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysLoginLogClient) DeleteOne(sll *SysLoginLog) *SysLoginLogDeleteOne {
	return c.DeleteOneID(sll.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysLoginLogClient) DeleteOneID(id int64) *SysLoginLogDeleteOne {
	builder := c.Delete().Where(sysloginlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysLoginLogDeleteOne{builder}
}

// Query returns a query builder for SysLoginLog.
func (c *SysLoginLogClient) Query() *SysLoginLogQuery {
	return &SysLoginLogQuery{
		config: c.config,
	}
}

// Get returns a SysLoginLog entity by its id.
func (c *SysLoginLogClient) Get(ctx context.Context, id int64) (*SysLoginLog, error) {
	return c.Query().Where(sysloginlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysLoginLogClient) GetX(ctx context.Context, id int64) *SysLoginLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a SysLoginLog.
func (c *SysLoginLogClient) QueryUser(sll *SysLoginLog) *SysUserQuery {
	query := &SysUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sll.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysloginlog.Table, sysloginlog.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysloginlog.UserTable, sysloginlog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sll.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysLoginLogClient) Hooks() []Hook {
	return c.hooks.SysLoginLog
}

// SysMenuClient is a client for the SysMenu schema.
type SysMenuClient struct {
	config
}

// NewSysMenuClient returns a client for the SysMenu from the given config.
func NewSysMenuClient(c config) *SysMenuClient {
	return &SysMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysmenu.Hooks(f(g(h())))`.
func (c *SysMenuClient) Use(hooks ...Hook) {
	c.hooks.SysMenu = append(c.hooks.SysMenu, hooks...)
}

// Create returns a create builder for SysMenu.
func (c *SysMenuClient) Create() *SysMenuCreate {
	mutation := newSysMenuMutation(c.config, OpCreate)
	return &SysMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysMenu entities.
func (c *SysMenuClient) CreateBulk(builders ...*SysMenuCreate) *SysMenuCreateBulk {
	return &SysMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysMenu.
func (c *SysMenuClient) Update() *SysMenuUpdate {
	mutation := newSysMenuMutation(c.config, OpUpdate)
	return &SysMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysMenuClient) UpdateOne(sm *SysMenu) *SysMenuUpdateOne {
	mutation := newSysMenuMutation(c.config, OpUpdateOne, withSysMenu(sm))
	return &SysMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysMenuClient) UpdateOneID(id int64) *SysMenuUpdateOne {
	mutation := newSysMenuMutation(c.config, OpUpdateOne, withSysMenuID(id))
	return &SysMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysMenu.
func (c *SysMenuClient) Delete() *SysMenuDelete {
	mutation := newSysMenuMutation(c.config, OpDelete)
	return &SysMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysMenuClient) DeleteOne(sm *SysMenu) *SysMenuDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysMenuClient) DeleteOneID(id int64) *SysMenuDeleteOne {
	builder := c.Delete().Where(sysmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysMenuDeleteOne{builder}
}

// Query returns a query builder for SysMenu.
func (c *SysMenuClient) Query() *SysMenuQuery {
	return &SysMenuQuery{
		config: c.config,
	}
}

// Get returns a SysMenu entity by its id.
func (c *SysMenuClient) Get(ctx context.Context, id int64) (*SysMenu, error) {
	return c.Query().Where(sysmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysMenuClient) GetX(ctx context.Context, id int64) *SysMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a SysMenu.
func (c *SysMenuClient) QueryRole(sm *SysMenu) *SysRoleQuery {
	query := &SysRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysmenu.Table, sysmenu.FieldID, id),
			sqlgraph.To(sysrole.Table, sysrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, sysmenu.RoleTable, sysmenu.RolePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a SysMenu.
func (c *SysMenuClient) QueryParent(sm *SysMenu) *SysMenuQuery {
	query := &SysMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysmenu.Table, sysmenu.FieldID, id),
			sqlgraph.To(sysmenu.Table, sysmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysmenu.ParentTable, sysmenu.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildes queries the childes edge of a SysMenu.
func (c *SysMenuClient) QueryChildes(sm *SysMenu) *SysMenuQuery {
	query := &SysMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysmenu.Table, sysmenu.FieldID, id),
			sqlgraph.To(sysmenu.Table, sysmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysmenu.ChildesTable, sysmenu.ChildesColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysMenuClient) Hooks() []Hook {
	return c.hooks.SysMenu
}

// SysOperaLogClient is a client for the SysOperaLog schema.
type SysOperaLogClient struct {
	config
}

// NewSysOperaLogClient returns a client for the SysOperaLog from the given config.
func NewSysOperaLogClient(c config) *SysOperaLogClient {
	return &SysOperaLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysoperalog.Hooks(f(g(h())))`.
func (c *SysOperaLogClient) Use(hooks ...Hook) {
	c.hooks.SysOperaLog = append(c.hooks.SysOperaLog, hooks...)
}

// Create returns a create builder for SysOperaLog.
func (c *SysOperaLogClient) Create() *SysOperaLogCreate {
	mutation := newSysOperaLogMutation(c.config, OpCreate)
	return &SysOperaLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysOperaLog entities.
func (c *SysOperaLogClient) CreateBulk(builders ...*SysOperaLogCreate) *SysOperaLogCreateBulk {
	return &SysOperaLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysOperaLog.
func (c *SysOperaLogClient) Update() *SysOperaLogUpdate {
	mutation := newSysOperaLogMutation(c.config, OpUpdate)
	return &SysOperaLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysOperaLogClient) UpdateOne(sol *SysOperaLog) *SysOperaLogUpdateOne {
	mutation := newSysOperaLogMutation(c.config, OpUpdateOne, withSysOperaLog(sol))
	return &SysOperaLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysOperaLogClient) UpdateOneID(id int64) *SysOperaLogUpdateOne {
	mutation := newSysOperaLogMutation(c.config, OpUpdateOne, withSysOperaLogID(id))
	return &SysOperaLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysOperaLog.
func (c *SysOperaLogClient) Delete() *SysOperaLogDelete {
	mutation := newSysOperaLogMutation(c.config, OpDelete)
	return &SysOperaLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysOperaLogClient) DeleteOne(sol *SysOperaLog) *SysOperaLogDeleteOne {
	return c.DeleteOneID(sol.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysOperaLogClient) DeleteOneID(id int64) *SysOperaLogDeleteOne {
	builder := c.Delete().Where(sysoperalog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysOperaLogDeleteOne{builder}
}

// Query returns a query builder for SysOperaLog.
func (c *SysOperaLogClient) Query() *SysOperaLogQuery {
	return &SysOperaLogQuery{
		config: c.config,
	}
}

// Get returns a SysOperaLog entity by its id.
func (c *SysOperaLogClient) Get(ctx context.Context, id int64) (*SysOperaLog, error) {
	return c.Query().Where(sysoperalog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysOperaLogClient) GetX(ctx context.Context, id int64) *SysOperaLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a SysOperaLog.
func (c *SysOperaLogClient) QueryUser(sol *SysOperaLog) *SysUserQuery {
	query := &SysUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysoperalog.Table, sysoperalog.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysoperalog.UserTable, sysoperalog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysOperaLogClient) Hooks() []Hook {
	return c.hooks.SysOperaLog
}

// SysPostClient is a client for the SysPost schema.
type SysPostClient struct {
	config
}

// NewSysPostClient returns a client for the SysPost from the given config.
func NewSysPostClient(c config) *SysPostClient {
	return &SysPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `syspost.Hooks(f(g(h())))`.
func (c *SysPostClient) Use(hooks ...Hook) {
	c.hooks.SysPost = append(c.hooks.SysPost, hooks...)
}

// Create returns a create builder for SysPost.
func (c *SysPostClient) Create() *SysPostCreate {
	mutation := newSysPostMutation(c.config, OpCreate)
	return &SysPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysPost entities.
func (c *SysPostClient) CreateBulk(builders ...*SysPostCreate) *SysPostCreateBulk {
	return &SysPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysPost.
func (c *SysPostClient) Update() *SysPostUpdate {
	mutation := newSysPostMutation(c.config, OpUpdate)
	return &SysPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysPostClient) UpdateOne(sp *SysPost) *SysPostUpdateOne {
	mutation := newSysPostMutation(c.config, OpUpdateOne, withSysPost(sp))
	return &SysPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysPostClient) UpdateOneID(id int64) *SysPostUpdateOne {
	mutation := newSysPostMutation(c.config, OpUpdateOne, withSysPostID(id))
	return &SysPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysPost.
func (c *SysPostClient) Delete() *SysPostDelete {
	mutation := newSysPostMutation(c.config, OpDelete)
	return &SysPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysPostClient) DeleteOne(sp *SysPost) *SysPostDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysPostClient) DeleteOneID(id int64) *SysPostDeleteOne {
	builder := c.Delete().Where(syspost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysPostDeleteOne{builder}
}

// Query returns a query builder for SysPost.
func (c *SysPostClient) Query() *SysPostQuery {
	return &SysPostQuery{
		config: c.config,
	}
}

// Get returns a SysPost entity by its id.
func (c *SysPostClient) Get(ctx context.Context, id int64) (*SysPost, error) {
	return c.Query().Where(syspost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysPostClient) GetX(ctx context.Context, id int64) *SysPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a SysPost.
func (c *SysPostClient) QueryUsers(sp *SysPost) *SysUserQuery {
	query := &SysUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(syspost.Table, syspost.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, syspost.UsersTable, syspost.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysPostClient) Hooks() []Hook {
	return c.hooks.SysPost
}

// SysRoleClient is a client for the SysRole schema.
type SysRoleClient struct {
	config
}

// NewSysRoleClient returns a client for the SysRole from the given config.
func NewSysRoleClient(c config) *SysRoleClient {
	return &SysRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysrole.Hooks(f(g(h())))`.
func (c *SysRoleClient) Use(hooks ...Hook) {
	c.hooks.SysRole = append(c.hooks.SysRole, hooks...)
}

// Create returns a create builder for SysRole.
func (c *SysRoleClient) Create() *SysRoleCreate {
	mutation := newSysRoleMutation(c.config, OpCreate)
	return &SysRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysRole entities.
func (c *SysRoleClient) CreateBulk(builders ...*SysRoleCreate) *SysRoleCreateBulk {
	return &SysRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysRole.
func (c *SysRoleClient) Update() *SysRoleUpdate {
	mutation := newSysRoleMutation(c.config, OpUpdate)
	return &SysRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysRoleClient) UpdateOne(sr *SysRole) *SysRoleUpdateOne {
	mutation := newSysRoleMutation(c.config, OpUpdateOne, withSysRole(sr))
	return &SysRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysRoleClient) UpdateOneID(id int64) *SysRoleUpdateOne {
	mutation := newSysRoleMutation(c.config, OpUpdateOne, withSysRoleID(id))
	return &SysRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysRole.
func (c *SysRoleClient) Delete() *SysRoleDelete {
	mutation := newSysRoleMutation(c.config, OpDelete)
	return &SysRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysRoleClient) DeleteOne(sr *SysRole) *SysRoleDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysRoleClient) DeleteOneID(id int64) *SysRoleDeleteOne {
	builder := c.Delete().Where(sysrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysRoleDeleteOne{builder}
}

// Query returns a query builder for SysRole.
func (c *SysRoleClient) Query() *SysRoleQuery {
	return &SysRoleQuery{
		config: c.config,
	}
}

// Get returns a SysRole entity by its id.
func (c *SysRoleClient) Get(ctx context.Context, id int64) (*SysRole, error) {
	return c.Query().Where(sysrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysRoleClient) GetX(ctx context.Context, id int64) *SysRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMenus queries the menus edge of a SysRole.
func (c *SysRoleClient) QueryMenus(sr *SysRole) *SysMenuQuery {
	query := &SysMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysrole.Table, sysrole.FieldID, id),
			sqlgraph.To(sysmenu.Table, sysmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, sysrole.MenusTable, sysrole.MenusPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a SysRole.
func (c *SysRoleClient) QueryUsers(sr *SysRole) *SysUserQuery {
	query := &SysUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysrole.Table, sysrole.FieldID, id),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, sysrole.UsersTable, sysrole.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysRoleClient) Hooks() []Hook {
	return c.hooks.SysRole
}

// SysTablesClient is a client for the SysTables schema.
type SysTablesClient struct {
	config
}

// NewSysTablesClient returns a client for the SysTables from the given config.
func NewSysTablesClient(c config) *SysTablesClient {
	return &SysTablesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systables.Hooks(f(g(h())))`.
func (c *SysTablesClient) Use(hooks ...Hook) {
	c.hooks.SysTables = append(c.hooks.SysTables, hooks...)
}

// Create returns a create builder for SysTables.
func (c *SysTablesClient) Create() *SysTablesCreate {
	mutation := newSysTablesMutation(c.config, OpCreate)
	return &SysTablesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysTables entities.
func (c *SysTablesClient) CreateBulk(builders ...*SysTablesCreate) *SysTablesCreateBulk {
	return &SysTablesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysTables.
func (c *SysTablesClient) Update() *SysTablesUpdate {
	mutation := newSysTablesMutation(c.config, OpUpdate)
	return &SysTablesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysTablesClient) UpdateOne(st *SysTables) *SysTablesUpdateOne {
	mutation := newSysTablesMutation(c.config, OpUpdateOne, withSysTables(st))
	return &SysTablesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysTablesClient) UpdateOneID(id int64) *SysTablesUpdateOne {
	mutation := newSysTablesMutation(c.config, OpUpdateOne, withSysTablesID(id))
	return &SysTablesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysTables.
func (c *SysTablesClient) Delete() *SysTablesDelete {
	mutation := newSysTablesMutation(c.config, OpDelete)
	return &SysTablesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysTablesClient) DeleteOne(st *SysTables) *SysTablesDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysTablesClient) DeleteOneID(id int64) *SysTablesDeleteOne {
	builder := c.Delete().Where(systables.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysTablesDeleteOne{builder}
}

// Query returns a query builder for SysTables.
func (c *SysTablesClient) Query() *SysTablesQuery {
	return &SysTablesQuery{
		config: c.config,
	}
}

// Get returns a SysTables entity by its id.
func (c *SysTablesClient) Get(ctx context.Context, id int64) (*SysTables, error) {
	return c.Query().Where(systables.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysTablesClient) GetX(ctx context.Context, id int64) *SysTables {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysTablesClient) Hooks() []Hook {
	return c.hooks.SysTables
}

// SysUserClient is a client for the SysUser schema.
type SysUserClient struct {
	config
}

// NewSysUserClient returns a client for the SysUser from the given config.
func NewSysUserClient(c config) *SysUserClient {
	return &SysUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysuser.Hooks(f(g(h())))`.
func (c *SysUserClient) Use(hooks ...Hook) {
	c.hooks.SysUser = append(c.hooks.SysUser, hooks...)
}

// Create returns a create builder for SysUser.
func (c *SysUserClient) Create() *SysUserCreate {
	mutation := newSysUserMutation(c.config, OpCreate)
	return &SysUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysUser entities.
func (c *SysUserClient) CreateBulk(builders ...*SysUserCreate) *SysUserCreateBulk {
	return &SysUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysUser.
func (c *SysUserClient) Update() *SysUserUpdate {
	mutation := newSysUserMutation(c.config, OpUpdate)
	return &SysUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysUserClient) UpdateOne(su *SysUser) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUser(su))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysUserClient) UpdateOneID(id int64) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUserID(id))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysUser.
func (c *SysUserClient) Delete() *SysUserDelete {
	mutation := newSysUserMutation(c.config, OpDelete)
	return &SysUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SysUserClient) DeleteOne(su *SysUser) *SysUserDeleteOne {
	return c.DeleteOneID(su.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SysUserClient) DeleteOneID(id int64) *SysUserDeleteOne {
	builder := c.Delete().Where(sysuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysUserDeleteOne{builder}
}

// Query returns a query builder for SysUser.
func (c *SysUserClient) Query() *SysUserQuery {
	return &SysUserQuery{
		config: c.config,
	}
}

// Get returns a SysUser entity by its id.
func (c *SysUserClient) Get(ctx context.Context, id int64) (*SysUser, error) {
	return c.Query().Where(sysuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysUserClient) GetX(ctx context.Context, id int64) *SysUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDept queries the dept edge of a SysUser.
func (c *SysUserClient) QueryDept(su *SysUser) *SysDeptQuery {
	query := &SysDeptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(sysdept.Table, sysdept.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysuser.DeptTable, sysuser.DeptColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPost queries the post edge of a SysUser.
func (c *SysUserClient) QueryPost(su *SysUser) *SysPostQuery {
	query := &SysPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(syspost.Table, syspost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysuser.PostTable, sysuser.PostColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a SysUser.
func (c *SysUserClient) QueryRole(su *SysUser) *SysRoleQuery {
	query := &SysRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(sysrole.Table, sysrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, sysuser.RoleTable, sysuser.RolePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLoginLogs queries the loginLogs edge of a SysUser.
func (c *SysUserClient) QueryLoginLogs(su *SysUser) *SysLoginLogQuery {
	query := &SysLoginLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(sysloginlog.Table, sysloginlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysuser.LoginLogsTable, sysuser.LoginLogsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperaLogs queries the operaLogs edge of a SysUser.
func (c *SysUserClient) QueryOperaLogs(su *SysUser) *SysOperaLogQuery {
	query := &SysOperaLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysuser.Table, sysuser.FieldID, id),
			sqlgraph.To(sysoperalog.Table, sysoperalog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysuser.OperaLogsTable, sysuser.OperaLogsColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysUserClient) Hooks() []Hook {
	return c.hooks.SysUser
}
