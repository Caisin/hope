// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type PageConfigHTTPServer interface {
	BatchDeletePageConfig(context.Context, *PageConfigBatchDeleteReq) (*PageConfigDeleteReply, error)
	CreatePageConfig(context.Context, *PageConfigCreateReq) (*PageConfigCreateReply, error)
	DeletePageConfig(context.Context, *PageConfigDeleteReq) (*PageConfigDeleteReply, error)
	GetPageConfig(context.Context, *PageConfigReq) (*PageConfigReply, error)
	GetPagePageConfig(context.Context, *PageConfigPageReq) (*PageConfigPageReply, error)
	UpdatePageConfig(context.Context, *PageConfigUpdateReq) (*PageConfigUpdateReply, error)
}

func RegisterPageConfigHTTPServer(s *http.Server, srv PageConfigHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/pageconfig/page", _PageConfig_GetPagePageConfig0_HTTP_Handler(srv))
	r.GET("/v1/pageconfig/{id}", _PageConfig_GetPageConfig0_HTTP_Handler(srv))
	r.PUT("/v1/pageconfig/{id}", _PageConfig_UpdatePageConfig0_HTTP_Handler(srv))
	r.POST("/v1/pageconfig", _PageConfig_CreatePageConfig0_HTTP_Handler(srv))
	r.DELETE("/v1/pageconfig/{id}", _PageConfig_DeletePageConfig0_HTTP_Handler(srv))
	r.DELETE("/v1/pageconfig", _PageConfig_BatchDeletePageConfig0_HTTP_Handler(srv))
}

func _PageConfig_GetPagePageConfig0_HTTP_Handler(srv PageConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageConfigPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pageconfig.v1.PageConfig/GetPagePageConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPagePageConfig(ctx, req.(*PageConfigPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageConfigPageReply)
		return ctx.Result(200, reply)
	}
}

func _PageConfig_GetPageConfig0_HTTP_Handler(srv PageConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageConfigReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pageconfig.v1.PageConfig/GetPageConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageConfig(ctx, req.(*PageConfigReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageConfigReply)
		return ctx.Result(200, reply)
	}
}

func _PageConfig_UpdatePageConfig0_HTTP_Handler(srv PageConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageConfigUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pageconfig.v1.PageConfig/UpdatePageConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePageConfig(ctx, req.(*PageConfigUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageConfigUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _PageConfig_CreatePageConfig0_HTTP_Handler(srv PageConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageConfigCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pageconfig.v1.PageConfig/CreatePageConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePageConfig(ctx, req.(*PageConfigCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageConfigCreateReply)
		return ctx.Result(200, reply)
	}
}

func _PageConfig_DeletePageConfig0_HTTP_Handler(srv PageConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageConfigDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pageconfig.v1.PageConfig/DeletePageConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePageConfig(ctx, req.(*PageConfigDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageConfigDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _PageConfig_BatchDeletePageConfig0_HTTP_Handler(srv PageConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageConfigBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pageconfig.v1.PageConfig/BatchDeletePageConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeletePageConfig(ctx, req.(*PageConfigBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageConfigDeleteReply)
		return ctx.Result(200, reply)
	}
}

type PageConfigHTTPClient interface {
	BatchDeletePageConfig(ctx context.Context, req *PageConfigBatchDeleteReq, opts ...http.CallOption) (rsp *PageConfigDeleteReply, err error)
	CreatePageConfig(ctx context.Context, req *PageConfigCreateReq, opts ...http.CallOption) (rsp *PageConfigCreateReply, err error)
	DeletePageConfig(ctx context.Context, req *PageConfigDeleteReq, opts ...http.CallOption) (rsp *PageConfigDeleteReply, err error)
	GetPageConfig(ctx context.Context, req *PageConfigReq, opts ...http.CallOption) (rsp *PageConfigReply, err error)
	GetPagePageConfig(ctx context.Context, req *PageConfigPageReq, opts ...http.CallOption) (rsp *PageConfigPageReply, err error)
	UpdatePageConfig(ctx context.Context, req *PageConfigUpdateReq, opts ...http.CallOption) (rsp *PageConfigUpdateReply, err error)
}

type PageConfigHTTPClientImpl struct {
	cc *http.Client
}

func NewPageConfigHTTPClient(client *http.Client) PageConfigHTTPClient {
	return &PageConfigHTTPClientImpl{client}
}

func (c *PageConfigHTTPClientImpl) BatchDeletePageConfig(ctx context.Context, in *PageConfigBatchDeleteReq, opts ...http.CallOption) (*PageConfigDeleteReply, error) {
	var out PageConfigDeleteReply
	pattern := "/v1/pageconfig"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/pageconfig.v1.PageConfig/BatchDeletePageConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PageConfigHTTPClientImpl) CreatePageConfig(ctx context.Context, in *PageConfigCreateReq, opts ...http.CallOption) (*PageConfigCreateReply, error) {
	var out PageConfigCreateReply
	pattern := "/v1/pageconfig"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/pageconfig.v1.PageConfig/CreatePageConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PageConfigHTTPClientImpl) DeletePageConfig(ctx context.Context, in *PageConfigDeleteReq, opts ...http.CallOption) (*PageConfigDeleteReply, error) {
	var out PageConfigDeleteReply
	pattern := "/v1/pageconfig/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/pageconfig.v1.PageConfig/DeletePageConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PageConfigHTTPClientImpl) GetPageConfig(ctx context.Context, in *PageConfigReq, opts ...http.CallOption) (*PageConfigReply, error) {
	var out PageConfigReply
	pattern := "/v1/pageconfig/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/pageconfig.v1.PageConfig/GetPageConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PageConfigHTTPClientImpl) GetPagePageConfig(ctx context.Context, in *PageConfigPageReq, opts ...http.CallOption) (*PageConfigPageReply, error) {
	var out PageConfigPageReply
	pattern := "/v1/pageconfig/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/pageconfig.v1.PageConfig/GetPagePageConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PageConfigHTTPClientImpl) UpdatePageConfig(ctx context.Context, in *PageConfigUpdateReq, opts ...http.CallOption) (*PageConfigUpdateReply, error) {
	var out PageConfigUpdateReply
	pattern := "/v1/pageconfig/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/pageconfig.v1.PageConfig/UpdatePageConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
