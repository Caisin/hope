// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/novel"
	"hope/apps/novel/internal/data/ent/novelclassify"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NovelClassifyUpdate is the builder for updating NovelClassify entities.
type NovelClassifyUpdate struct {
	config
	hooks    []Hook
	mutation *NovelClassifyMutation
}

// Where appends a list predicates to the NovelClassifyUpdate builder.
func (ncu *NovelClassifyUpdate) Where(ps ...predicate.NovelClassify) *NovelClassifyUpdate {
	ncu.mutation.Where(ps...)
	return ncu
}

// SetPid sets the "pid" field.
func (ncu *NovelClassifyUpdate) SetPid(i int64) *NovelClassifyUpdate {
	ncu.mutation.ResetPid()
	ncu.mutation.SetPid(i)
	return ncu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (ncu *NovelClassifyUpdate) SetNillablePid(i *int64) *NovelClassifyUpdate {
	if i != nil {
		ncu.SetPid(*i)
	}
	return ncu
}

// AddPid adds i to the "pid" field.
func (ncu *NovelClassifyUpdate) AddPid(i int64) *NovelClassifyUpdate {
	ncu.mutation.AddPid(i)
	return ncu
}

// ClearPid clears the value of the "pid" field.
func (ncu *NovelClassifyUpdate) ClearPid() *NovelClassifyUpdate {
	ncu.mutation.ClearPid()
	return ncu
}

// SetClassifyName sets the "classifyName" field.
func (ncu *NovelClassifyUpdate) SetClassifyName(s string) *NovelClassifyUpdate {
	ncu.mutation.SetClassifyName(s)
	return ncu
}

// SetNillableClassifyName sets the "classifyName" field if the given value is not nil.
func (ncu *NovelClassifyUpdate) SetNillableClassifyName(s *string) *NovelClassifyUpdate {
	if s != nil {
		ncu.SetClassifyName(*s)
	}
	return ncu
}

// ClearClassifyName clears the value of the "classifyName" field.
func (ncu *NovelClassifyUpdate) ClearClassifyName() *NovelClassifyUpdate {
	ncu.mutation.ClearClassifyName()
	return ncu
}

// SetStatus sets the "status" field.
func (ncu *NovelClassifyUpdate) SetStatus(i int32) *NovelClassifyUpdate {
	ncu.mutation.ResetStatus()
	ncu.mutation.SetStatus(i)
	return ncu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ncu *NovelClassifyUpdate) SetNillableStatus(i *int32) *NovelClassifyUpdate {
	if i != nil {
		ncu.SetStatus(*i)
	}
	return ncu
}

// AddStatus adds i to the "status" field.
func (ncu *NovelClassifyUpdate) AddStatus(i int32) *NovelClassifyUpdate {
	ncu.mutation.AddStatus(i)
	return ncu
}

// ClearStatus clears the value of the "status" field.
func (ncu *NovelClassifyUpdate) ClearStatus() *NovelClassifyUpdate {
	ncu.mutation.ClearStatus()
	return ncu
}

// SetOrderNum sets the "orderNum" field.
func (ncu *NovelClassifyUpdate) SetOrderNum(i int32) *NovelClassifyUpdate {
	ncu.mutation.ResetOrderNum()
	ncu.mutation.SetOrderNum(i)
	return ncu
}

// SetNillableOrderNum sets the "orderNum" field if the given value is not nil.
func (ncu *NovelClassifyUpdate) SetNillableOrderNum(i *int32) *NovelClassifyUpdate {
	if i != nil {
		ncu.SetOrderNum(*i)
	}
	return ncu
}

// AddOrderNum adds i to the "orderNum" field.
func (ncu *NovelClassifyUpdate) AddOrderNum(i int32) *NovelClassifyUpdate {
	ncu.mutation.AddOrderNum(i)
	return ncu
}

// ClearOrderNum clears the value of the "orderNum" field.
func (ncu *NovelClassifyUpdate) ClearOrderNum() *NovelClassifyUpdate {
	ncu.mutation.ClearOrderNum()
	return ncu
}

// SetRemark sets the "remark" field.
func (ncu *NovelClassifyUpdate) SetRemark(s string) *NovelClassifyUpdate {
	ncu.mutation.SetRemark(s)
	return ncu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ncu *NovelClassifyUpdate) SetNillableRemark(s *string) *NovelClassifyUpdate {
	if s != nil {
		ncu.SetRemark(*s)
	}
	return ncu
}

// ClearRemark clears the value of the "remark" field.
func (ncu *NovelClassifyUpdate) ClearRemark() *NovelClassifyUpdate {
	ncu.mutation.ClearRemark()
	return ncu
}

// SetUpdatedAt sets the "updatedAt" field.
func (ncu *NovelClassifyUpdate) SetUpdatedAt(t time.Time) *NovelClassifyUpdate {
	ncu.mutation.SetUpdatedAt(t)
	return ncu
}

// SetCreateBy sets the "createBy" field.
func (ncu *NovelClassifyUpdate) SetCreateBy(i int64) *NovelClassifyUpdate {
	ncu.mutation.ResetCreateBy()
	ncu.mutation.SetCreateBy(i)
	return ncu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ncu *NovelClassifyUpdate) SetNillableCreateBy(i *int64) *NovelClassifyUpdate {
	if i != nil {
		ncu.SetCreateBy(*i)
	}
	return ncu
}

// AddCreateBy adds i to the "createBy" field.
func (ncu *NovelClassifyUpdate) AddCreateBy(i int64) *NovelClassifyUpdate {
	ncu.mutation.AddCreateBy(i)
	return ncu
}

// SetUpdateBy sets the "updateBy" field.
func (ncu *NovelClassifyUpdate) SetUpdateBy(i int64) *NovelClassifyUpdate {
	ncu.mutation.ResetUpdateBy()
	ncu.mutation.SetUpdateBy(i)
	return ncu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ncu *NovelClassifyUpdate) SetNillableUpdateBy(i *int64) *NovelClassifyUpdate {
	if i != nil {
		ncu.SetUpdateBy(*i)
	}
	return ncu
}

// AddUpdateBy adds i to the "updateBy" field.
func (ncu *NovelClassifyUpdate) AddUpdateBy(i int64) *NovelClassifyUpdate {
	ncu.mutation.AddUpdateBy(i)
	return ncu
}

// SetTenantId sets the "tenantId" field.
func (ncu *NovelClassifyUpdate) SetTenantId(i int64) *NovelClassifyUpdate {
	ncu.mutation.ResetTenantId()
	ncu.mutation.SetTenantId(i)
	return ncu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ncu *NovelClassifyUpdate) SetNillableTenantId(i *int64) *NovelClassifyUpdate {
	if i != nil {
		ncu.SetTenantId(*i)
	}
	return ncu
}

// AddTenantId adds i to the "tenantId" field.
func (ncu *NovelClassifyUpdate) AddTenantId(i int64) *NovelClassifyUpdate {
	ncu.mutation.AddTenantId(i)
	return ncu
}

// AddNovelIDs adds the "novels" edge to the Novel entity by IDs.
func (ncu *NovelClassifyUpdate) AddNovelIDs(ids ...int64) *NovelClassifyUpdate {
	ncu.mutation.AddNovelIDs(ids...)
	return ncu
}

// AddNovels adds the "novels" edges to the Novel entity.
func (ncu *NovelClassifyUpdate) AddNovels(n ...*Novel) *NovelClassifyUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncu.AddNovelIDs(ids...)
}

// Mutation returns the NovelClassifyMutation object of the builder.
func (ncu *NovelClassifyUpdate) Mutation() *NovelClassifyMutation {
	return ncu.mutation
}

// ClearNovels clears all "novels" edges to the Novel entity.
func (ncu *NovelClassifyUpdate) ClearNovels() *NovelClassifyUpdate {
	ncu.mutation.ClearNovels()
	return ncu
}

// RemoveNovelIDs removes the "novels" edge to Novel entities by IDs.
func (ncu *NovelClassifyUpdate) RemoveNovelIDs(ids ...int64) *NovelClassifyUpdate {
	ncu.mutation.RemoveNovelIDs(ids...)
	return ncu
}

// RemoveNovels removes "novels" edges to Novel entities.
func (ncu *NovelClassifyUpdate) RemoveNovels(n ...*Novel) *NovelClassifyUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncu.RemoveNovelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ncu *NovelClassifyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ncu.defaults()
	if len(ncu.hooks) == 0 {
		affected, err = ncu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelClassifyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ncu.mutation = mutation
			affected, err = ncu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ncu.hooks) - 1; i >= 0; i-- {
			if ncu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ncu *NovelClassifyUpdate) SaveX(ctx context.Context) int {
	affected, err := ncu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ncu *NovelClassifyUpdate) Exec(ctx context.Context) error {
	_, err := ncu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncu *NovelClassifyUpdate) ExecX(ctx context.Context) {
	if err := ncu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncu *NovelClassifyUpdate) defaults() {
	if _, ok := ncu.mutation.UpdatedAt(); !ok {
		v := novelclassify.UpdateDefaultUpdatedAt()
		ncu.mutation.SetUpdatedAt(v)
	}
}

func (ncu *NovelClassifyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelclassify.Table,
			Columns: novelclassify.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelclassify.FieldID,
			},
		},
	}
	if ps := ncu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncu.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldPid,
		})
	}
	if value, ok := ncu.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldPid,
		})
	}
	if ncu.mutation.PidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelclassify.FieldPid,
		})
	}
	if value, ok := ncu.mutation.ClassifyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclassify.FieldClassifyName,
		})
	}
	if ncu.mutation.ClassifyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelclassify.FieldClassifyName,
		})
	}
	if value, ok := ncu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldStatus,
		})
	}
	if value, ok := ncu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldStatus,
		})
	}
	if ncu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelclassify.FieldStatus,
		})
	}
	if value, ok := ncu.mutation.OrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldOrderNum,
		})
	}
	if value, ok := ncu.mutation.AddedOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldOrderNum,
		})
	}
	if ncu.mutation.OrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelclassify.FieldOrderNum,
		})
	}
	if value, ok := ncu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclassify.FieldRemark,
		})
	}
	if ncu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelclassify.FieldRemark,
		})
	}
	if value, ok := ncu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelclassify.FieldUpdatedAt,
		})
	}
	if value, ok := ncu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldCreateBy,
		})
	}
	if value, ok := ncu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldCreateBy,
		})
	}
	if value, ok := ncu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldUpdateBy,
		})
	}
	if value, ok := ncu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldUpdateBy,
		})
	}
	if value, ok := ncu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldTenantId,
		})
	}
	if value, ok := ncu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldTenantId,
		})
	}
	if ncu.mutation.NovelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelclassify.NovelsTable,
			Columns: []string{novelclassify.NovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.RemovedNovelsIDs(); len(nodes) > 0 && !ncu.mutation.NovelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelclassify.NovelsTable,
			Columns: []string{novelclassify.NovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncu.mutation.NovelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelclassify.NovelsTable,
			Columns: []string{novelclassify.NovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ncu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelclassify.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NovelClassifyUpdateOne is the builder for updating a single NovelClassify entity.
type NovelClassifyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NovelClassifyMutation
}

// SetPid sets the "pid" field.
func (ncuo *NovelClassifyUpdateOne) SetPid(i int64) *NovelClassifyUpdateOne {
	ncuo.mutation.ResetPid()
	ncuo.mutation.SetPid(i)
	return ncuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (ncuo *NovelClassifyUpdateOne) SetNillablePid(i *int64) *NovelClassifyUpdateOne {
	if i != nil {
		ncuo.SetPid(*i)
	}
	return ncuo
}

// AddPid adds i to the "pid" field.
func (ncuo *NovelClassifyUpdateOne) AddPid(i int64) *NovelClassifyUpdateOne {
	ncuo.mutation.AddPid(i)
	return ncuo
}

// ClearPid clears the value of the "pid" field.
func (ncuo *NovelClassifyUpdateOne) ClearPid() *NovelClassifyUpdateOne {
	ncuo.mutation.ClearPid()
	return ncuo
}

// SetClassifyName sets the "classifyName" field.
func (ncuo *NovelClassifyUpdateOne) SetClassifyName(s string) *NovelClassifyUpdateOne {
	ncuo.mutation.SetClassifyName(s)
	return ncuo
}

// SetNillableClassifyName sets the "classifyName" field if the given value is not nil.
func (ncuo *NovelClassifyUpdateOne) SetNillableClassifyName(s *string) *NovelClassifyUpdateOne {
	if s != nil {
		ncuo.SetClassifyName(*s)
	}
	return ncuo
}

// ClearClassifyName clears the value of the "classifyName" field.
func (ncuo *NovelClassifyUpdateOne) ClearClassifyName() *NovelClassifyUpdateOne {
	ncuo.mutation.ClearClassifyName()
	return ncuo
}

// SetStatus sets the "status" field.
func (ncuo *NovelClassifyUpdateOne) SetStatus(i int32) *NovelClassifyUpdateOne {
	ncuo.mutation.ResetStatus()
	ncuo.mutation.SetStatus(i)
	return ncuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ncuo *NovelClassifyUpdateOne) SetNillableStatus(i *int32) *NovelClassifyUpdateOne {
	if i != nil {
		ncuo.SetStatus(*i)
	}
	return ncuo
}

// AddStatus adds i to the "status" field.
func (ncuo *NovelClassifyUpdateOne) AddStatus(i int32) *NovelClassifyUpdateOne {
	ncuo.mutation.AddStatus(i)
	return ncuo
}

// ClearStatus clears the value of the "status" field.
func (ncuo *NovelClassifyUpdateOne) ClearStatus() *NovelClassifyUpdateOne {
	ncuo.mutation.ClearStatus()
	return ncuo
}

// SetOrderNum sets the "orderNum" field.
func (ncuo *NovelClassifyUpdateOne) SetOrderNum(i int32) *NovelClassifyUpdateOne {
	ncuo.mutation.ResetOrderNum()
	ncuo.mutation.SetOrderNum(i)
	return ncuo
}

// SetNillableOrderNum sets the "orderNum" field if the given value is not nil.
func (ncuo *NovelClassifyUpdateOne) SetNillableOrderNum(i *int32) *NovelClassifyUpdateOne {
	if i != nil {
		ncuo.SetOrderNum(*i)
	}
	return ncuo
}

// AddOrderNum adds i to the "orderNum" field.
func (ncuo *NovelClassifyUpdateOne) AddOrderNum(i int32) *NovelClassifyUpdateOne {
	ncuo.mutation.AddOrderNum(i)
	return ncuo
}

// ClearOrderNum clears the value of the "orderNum" field.
func (ncuo *NovelClassifyUpdateOne) ClearOrderNum() *NovelClassifyUpdateOne {
	ncuo.mutation.ClearOrderNum()
	return ncuo
}

// SetRemark sets the "remark" field.
func (ncuo *NovelClassifyUpdateOne) SetRemark(s string) *NovelClassifyUpdateOne {
	ncuo.mutation.SetRemark(s)
	return ncuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ncuo *NovelClassifyUpdateOne) SetNillableRemark(s *string) *NovelClassifyUpdateOne {
	if s != nil {
		ncuo.SetRemark(*s)
	}
	return ncuo
}

// ClearRemark clears the value of the "remark" field.
func (ncuo *NovelClassifyUpdateOne) ClearRemark() *NovelClassifyUpdateOne {
	ncuo.mutation.ClearRemark()
	return ncuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ncuo *NovelClassifyUpdateOne) SetUpdatedAt(t time.Time) *NovelClassifyUpdateOne {
	ncuo.mutation.SetUpdatedAt(t)
	return ncuo
}

// SetCreateBy sets the "createBy" field.
func (ncuo *NovelClassifyUpdateOne) SetCreateBy(i int64) *NovelClassifyUpdateOne {
	ncuo.mutation.ResetCreateBy()
	ncuo.mutation.SetCreateBy(i)
	return ncuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (ncuo *NovelClassifyUpdateOne) SetNillableCreateBy(i *int64) *NovelClassifyUpdateOne {
	if i != nil {
		ncuo.SetCreateBy(*i)
	}
	return ncuo
}

// AddCreateBy adds i to the "createBy" field.
func (ncuo *NovelClassifyUpdateOne) AddCreateBy(i int64) *NovelClassifyUpdateOne {
	ncuo.mutation.AddCreateBy(i)
	return ncuo
}

// SetUpdateBy sets the "updateBy" field.
func (ncuo *NovelClassifyUpdateOne) SetUpdateBy(i int64) *NovelClassifyUpdateOne {
	ncuo.mutation.ResetUpdateBy()
	ncuo.mutation.SetUpdateBy(i)
	return ncuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (ncuo *NovelClassifyUpdateOne) SetNillableUpdateBy(i *int64) *NovelClassifyUpdateOne {
	if i != nil {
		ncuo.SetUpdateBy(*i)
	}
	return ncuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (ncuo *NovelClassifyUpdateOne) AddUpdateBy(i int64) *NovelClassifyUpdateOne {
	ncuo.mutation.AddUpdateBy(i)
	return ncuo
}

// SetTenantId sets the "tenantId" field.
func (ncuo *NovelClassifyUpdateOne) SetTenantId(i int64) *NovelClassifyUpdateOne {
	ncuo.mutation.ResetTenantId()
	ncuo.mutation.SetTenantId(i)
	return ncuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (ncuo *NovelClassifyUpdateOne) SetNillableTenantId(i *int64) *NovelClassifyUpdateOne {
	if i != nil {
		ncuo.SetTenantId(*i)
	}
	return ncuo
}

// AddTenantId adds i to the "tenantId" field.
func (ncuo *NovelClassifyUpdateOne) AddTenantId(i int64) *NovelClassifyUpdateOne {
	ncuo.mutation.AddTenantId(i)
	return ncuo
}

// AddNovelIDs adds the "novels" edge to the Novel entity by IDs.
func (ncuo *NovelClassifyUpdateOne) AddNovelIDs(ids ...int64) *NovelClassifyUpdateOne {
	ncuo.mutation.AddNovelIDs(ids...)
	return ncuo
}

// AddNovels adds the "novels" edges to the Novel entity.
func (ncuo *NovelClassifyUpdateOne) AddNovels(n ...*Novel) *NovelClassifyUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncuo.AddNovelIDs(ids...)
}

// Mutation returns the NovelClassifyMutation object of the builder.
func (ncuo *NovelClassifyUpdateOne) Mutation() *NovelClassifyMutation {
	return ncuo.mutation
}

// ClearNovels clears all "novels" edges to the Novel entity.
func (ncuo *NovelClassifyUpdateOne) ClearNovels() *NovelClassifyUpdateOne {
	ncuo.mutation.ClearNovels()
	return ncuo
}

// RemoveNovelIDs removes the "novels" edge to Novel entities by IDs.
func (ncuo *NovelClassifyUpdateOne) RemoveNovelIDs(ids ...int64) *NovelClassifyUpdateOne {
	ncuo.mutation.RemoveNovelIDs(ids...)
	return ncuo
}

// RemoveNovels removes "novels" edges to Novel entities.
func (ncuo *NovelClassifyUpdateOne) RemoveNovels(n ...*Novel) *NovelClassifyUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncuo.RemoveNovelIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ncuo *NovelClassifyUpdateOne) Select(field string, fields ...string) *NovelClassifyUpdateOne {
	ncuo.fields = append([]string{field}, fields...)
	return ncuo
}

// Save executes the query and returns the updated NovelClassify entity.
func (ncuo *NovelClassifyUpdateOne) Save(ctx context.Context) (*NovelClassify, error) {
	var (
		err  error
		node *NovelClassify
	)
	ncuo.defaults()
	if len(ncuo.hooks) == 0 {
		node, err = ncuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NovelClassifyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ncuo.mutation = mutation
			node, err = ncuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ncuo.hooks) - 1; i >= 0; i-- {
			if ncuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ncuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ncuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ncuo *NovelClassifyUpdateOne) SaveX(ctx context.Context) *NovelClassify {
	node, err := ncuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ncuo *NovelClassifyUpdateOne) Exec(ctx context.Context) error {
	_, err := ncuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncuo *NovelClassifyUpdateOne) ExecX(ctx context.Context) {
	if err := ncuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ncuo *NovelClassifyUpdateOne) defaults() {
	if _, ok := ncuo.mutation.UpdatedAt(); !ok {
		v := novelclassify.UpdateDefaultUpdatedAt()
		ncuo.mutation.SetUpdatedAt(v)
	}
}

func (ncuo *NovelClassifyUpdateOne) sqlSave(ctx context.Context) (_node *NovelClassify, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   novelclassify.Table,
			Columns: novelclassify.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: novelclassify.FieldID,
			},
		},
	}
	id, ok := ncuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NovelClassify.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ncuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, novelclassify.FieldID)
		for _, f := range fields {
			if !novelclassify.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != novelclassify.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ncuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ncuo.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldPid,
		})
	}
	if value, ok := ncuo.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldPid,
		})
	}
	if ncuo.mutation.PidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: novelclassify.FieldPid,
		})
	}
	if value, ok := ncuo.mutation.ClassifyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclassify.FieldClassifyName,
		})
	}
	if ncuo.mutation.ClassifyNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelclassify.FieldClassifyName,
		})
	}
	if value, ok := ncuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldStatus,
		})
	}
	if value, ok := ncuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldStatus,
		})
	}
	if ncuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelclassify.FieldStatus,
		})
	}
	if value, ok := ncuo.mutation.OrderNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldOrderNum,
		})
	}
	if value, ok := ncuo.mutation.AddedOrderNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: novelclassify.FieldOrderNum,
		})
	}
	if ncuo.mutation.OrderNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: novelclassify.FieldOrderNum,
		})
	}
	if value, ok := ncuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: novelclassify.FieldRemark,
		})
	}
	if ncuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: novelclassify.FieldRemark,
		})
	}
	if value, ok := ncuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: novelclassify.FieldUpdatedAt,
		})
	}
	if value, ok := ncuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldCreateBy,
		})
	}
	if value, ok := ncuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldCreateBy,
		})
	}
	if value, ok := ncuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldUpdateBy,
		})
	}
	if value, ok := ncuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldUpdateBy,
		})
	}
	if value, ok := ncuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldTenantId,
		})
	}
	if value, ok := ncuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: novelclassify.FieldTenantId,
		})
	}
	if ncuo.mutation.NovelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelclassify.NovelsTable,
			Columns: []string{novelclassify.NovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.RemovedNovelsIDs(); len(nodes) > 0 && !ncuo.mutation.NovelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelclassify.NovelsTable,
			Columns: []string{novelclassify.NovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ncuo.mutation.NovelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   novelclassify.NovelsTable,
			Columns: []string{novelclassify.NovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NovelClassify{config: ncuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ncuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{novelclassify.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
