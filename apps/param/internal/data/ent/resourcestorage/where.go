// Code generated by entc, DO NOT EDIT.

package resourcestorage

import (
	"hope/apps/param/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GroupId applies equality check predicate on the "groupId" field. It's identical to GroupIdEQ.
func GroupId(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupId), v))
	})
}

// StorageType applies equality check predicate on the "storageType" field. It's identical to StorageTypeEQ.
func StorageType(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorageType), v))
	})
}

// RealName applies equality check predicate on the "realName" field. It's identical to RealNameEQ.
func RealName(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealName), v))
	})
}

// Bucket applies equality check predicate on the "bucket" field. It's identical to BucketEQ.
func Bucket(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBucket), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Suffix applies equality check predicate on the "suffix" field. It's identical to SuffixEQ.
func Suffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffix), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// DeleteUrl applies equality check predicate on the "deleteUrl" field. It's identical to DeleteUrlEQ.
func DeleteUrl(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteUrl), v))
	})
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKey), v))
	})
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// Md5code applies equality check predicate on the "md5code" field. It's identical to Md5codeEQ.
func Md5code(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMd5code), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// GroupIdEQ applies the EQ predicate on the "groupId" field.
func GroupIdEQ(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupId), v))
	})
}

// GroupIdNEQ applies the NEQ predicate on the "groupId" field.
func GroupIdNEQ(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupId), v))
	})
}

// GroupIdIn applies the In predicate on the "groupId" field.
func GroupIdIn(vs ...int32) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupId), v...))
	})
}

// GroupIdNotIn applies the NotIn predicate on the "groupId" field.
func GroupIdNotIn(vs ...int32) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupId), v...))
	})
}

// GroupIdGT applies the GT predicate on the "groupId" field.
func GroupIdGT(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupId), v))
	})
}

// GroupIdGTE applies the GTE predicate on the "groupId" field.
func GroupIdGTE(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupId), v))
	})
}

// GroupIdLT applies the LT predicate on the "groupId" field.
func GroupIdLT(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupId), v))
	})
}

// GroupIdLTE applies the LTE predicate on the "groupId" field.
func GroupIdLTE(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupId), v))
	})
}

// GroupIdIsNil applies the IsNil predicate on the "groupId" field.
func GroupIdIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupId)))
	})
}

// GroupIdNotNil applies the NotNil predicate on the "groupId" field.
func GroupIdNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupId)))
	})
}

// StorageTypeEQ applies the EQ predicate on the "storageType" field.
func StorageTypeEQ(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStorageType), v))
	})
}

// StorageTypeNEQ applies the NEQ predicate on the "storageType" field.
func StorageTypeNEQ(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStorageType), v))
	})
}

// StorageTypeIn applies the In predicate on the "storageType" field.
func StorageTypeIn(vs ...int32) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStorageType), v...))
	})
}

// StorageTypeNotIn applies the NotIn predicate on the "storageType" field.
func StorageTypeNotIn(vs ...int32) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStorageType), v...))
	})
}

// StorageTypeGT applies the GT predicate on the "storageType" field.
func StorageTypeGT(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStorageType), v))
	})
}

// StorageTypeGTE applies the GTE predicate on the "storageType" field.
func StorageTypeGTE(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStorageType), v))
	})
}

// StorageTypeLT applies the LT predicate on the "storageType" field.
func StorageTypeLT(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStorageType), v))
	})
}

// StorageTypeLTE applies the LTE predicate on the "storageType" field.
func StorageTypeLTE(v int32) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStorageType), v))
	})
}

// StorageTypeIsNil applies the IsNil predicate on the "storageType" field.
func StorageTypeIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStorageType)))
	})
}

// StorageTypeNotNil applies the NotNil predicate on the "storageType" field.
func StorageTypeNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStorageType)))
	})
}

// RealNameEQ applies the EQ predicate on the "realName" field.
func RealNameEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealName), v))
	})
}

// RealNameNEQ applies the NEQ predicate on the "realName" field.
func RealNameNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRealName), v))
	})
}

// RealNameIn applies the In predicate on the "realName" field.
func RealNameIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRealName), v...))
	})
}

// RealNameNotIn applies the NotIn predicate on the "realName" field.
func RealNameNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRealName), v...))
	})
}

// RealNameGT applies the GT predicate on the "realName" field.
func RealNameGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRealName), v))
	})
}

// RealNameGTE applies the GTE predicate on the "realName" field.
func RealNameGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRealName), v))
	})
}

// RealNameLT applies the LT predicate on the "realName" field.
func RealNameLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRealName), v))
	})
}

// RealNameLTE applies the LTE predicate on the "realName" field.
func RealNameLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRealName), v))
	})
}

// RealNameContains applies the Contains predicate on the "realName" field.
func RealNameContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRealName), v))
	})
}

// RealNameHasPrefix applies the HasPrefix predicate on the "realName" field.
func RealNameHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRealName), v))
	})
}

// RealNameHasSuffix applies the HasSuffix predicate on the "realName" field.
func RealNameHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRealName), v))
	})
}

// RealNameIsNil applies the IsNil predicate on the "realName" field.
func RealNameIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRealName)))
	})
}

// RealNameNotNil applies the NotNil predicate on the "realName" field.
func RealNameNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRealName)))
	})
}

// RealNameEqualFold applies the EqualFold predicate on the "realName" field.
func RealNameEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRealName), v))
	})
}

// RealNameContainsFold applies the ContainsFold predicate on the "realName" field.
func RealNameContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRealName), v))
	})
}

// BucketEQ applies the EQ predicate on the "bucket" field.
func BucketEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBucket), v))
	})
}

// BucketNEQ applies the NEQ predicate on the "bucket" field.
func BucketNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBucket), v))
	})
}

// BucketIn applies the In predicate on the "bucket" field.
func BucketIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBucket), v...))
	})
}

// BucketNotIn applies the NotIn predicate on the "bucket" field.
func BucketNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBucket), v...))
	})
}

// BucketGT applies the GT predicate on the "bucket" field.
func BucketGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBucket), v))
	})
}

// BucketGTE applies the GTE predicate on the "bucket" field.
func BucketGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBucket), v))
	})
}

// BucketLT applies the LT predicate on the "bucket" field.
func BucketLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBucket), v))
	})
}

// BucketLTE applies the LTE predicate on the "bucket" field.
func BucketLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBucket), v))
	})
}

// BucketContains applies the Contains predicate on the "bucket" field.
func BucketContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBucket), v))
	})
}

// BucketHasPrefix applies the HasPrefix predicate on the "bucket" field.
func BucketHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBucket), v))
	})
}

// BucketHasSuffix applies the HasSuffix predicate on the "bucket" field.
func BucketHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBucket), v))
	})
}

// BucketIsNil applies the IsNil predicate on the "bucket" field.
func BucketIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBucket)))
	})
}

// BucketNotNil applies the NotNil predicate on the "bucket" field.
func BucketNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBucket)))
	})
}

// BucketEqualFold applies the EqualFold predicate on the "bucket" field.
func BucketEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBucket), v))
	})
}

// BucketContainsFold applies the ContainsFold predicate on the "bucket" field.
func BucketContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBucket), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SuffixEQ applies the EQ predicate on the "suffix" field.
func SuffixEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffix), v))
	})
}

// SuffixNEQ applies the NEQ predicate on the "suffix" field.
func SuffixNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuffix), v))
	})
}

// SuffixIn applies the In predicate on the "suffix" field.
func SuffixIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSuffix), v...))
	})
}

// SuffixNotIn applies the NotIn predicate on the "suffix" field.
func SuffixNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSuffix), v...))
	})
}

// SuffixGT applies the GT predicate on the "suffix" field.
func SuffixGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuffix), v))
	})
}

// SuffixGTE applies the GTE predicate on the "suffix" field.
func SuffixGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuffix), v))
	})
}

// SuffixLT applies the LT predicate on the "suffix" field.
func SuffixLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuffix), v))
	})
}

// SuffixLTE applies the LTE predicate on the "suffix" field.
func SuffixLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuffix), v))
	})
}

// SuffixContains applies the Contains predicate on the "suffix" field.
func SuffixContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSuffix), v))
	})
}

// SuffixHasPrefix applies the HasPrefix predicate on the "suffix" field.
func SuffixHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSuffix), v))
	})
}

// SuffixHasSuffix applies the HasSuffix predicate on the "suffix" field.
func SuffixHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSuffix), v))
	})
}

// SuffixIsNil applies the IsNil predicate on the "suffix" field.
func SuffixIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSuffix)))
	})
}

// SuffixNotNil applies the NotNil predicate on the "suffix" field.
func SuffixNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSuffix)))
	})
}

// SuffixEqualFold applies the EqualFold predicate on the "suffix" field.
func SuffixEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSuffix), v))
	})
}

// SuffixContainsFold applies the ContainsFold predicate on the "suffix" field.
func SuffixContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSuffix), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPath)))
	})
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPath)))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSize), v))
	})
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSize), v...))
	})
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSize), v...))
	})
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSize), v))
	})
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSize), v))
	})
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSize), v))
	})
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSize), v))
	})
}

// SizeContains applies the Contains predicate on the "size" field.
func SizeContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSize), v))
	})
}

// SizeHasPrefix applies the HasPrefix predicate on the "size" field.
func SizeHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSize), v))
	})
}

// SizeHasSuffix applies the HasSuffix predicate on the "size" field.
func SizeHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSize), v))
	})
}

// SizeIsNil applies the IsNil predicate on the "size" field.
func SizeIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSize)))
	})
}

// SizeNotNil applies the NotNil predicate on the "size" field.
func SizeNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSize)))
	})
}

// SizeEqualFold applies the EqualFold predicate on the "size" field.
func SizeEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSize), v))
	})
}

// SizeContainsFold applies the ContainsFold predicate on the "size" field.
func SizeContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSize), v))
	})
}

// DeleteUrlEQ applies the EQ predicate on the "deleteUrl" field.
func DeleteUrlEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlNEQ applies the NEQ predicate on the "deleteUrl" field.
func DeleteUrlNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlIn applies the In predicate on the "deleteUrl" field.
func DeleteUrlIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteUrl), v...))
	})
}

// DeleteUrlNotIn applies the NotIn predicate on the "deleteUrl" field.
func DeleteUrlNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteUrl), v...))
	})
}

// DeleteUrlGT applies the GT predicate on the "deleteUrl" field.
func DeleteUrlGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlGTE applies the GTE predicate on the "deleteUrl" field.
func DeleteUrlGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlLT applies the LT predicate on the "deleteUrl" field.
func DeleteUrlLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlLTE applies the LTE predicate on the "deleteUrl" field.
func DeleteUrlLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlContains applies the Contains predicate on the "deleteUrl" field.
func DeleteUrlContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlHasPrefix applies the HasPrefix predicate on the "deleteUrl" field.
func DeleteUrlHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlHasSuffix applies the HasSuffix predicate on the "deleteUrl" field.
func DeleteUrlHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlIsNil applies the IsNil predicate on the "deleteUrl" field.
func DeleteUrlIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeleteUrl)))
	})
}

// DeleteUrlNotNil applies the NotNil predicate on the "deleteUrl" field.
func DeleteUrlNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeleteUrl)))
	})
}

// DeleteUrlEqualFold applies the EqualFold predicate on the "deleteUrl" field.
func DeleteUrlEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeleteUrl), v))
	})
}

// DeleteUrlContainsFold applies the ContainsFold predicate on the "deleteUrl" field.
func DeleteUrlContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeleteUrl), v))
	})
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilename), v))
	})
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilename), v...))
	})
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilename), v...))
	})
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilename), v))
	})
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilename), v))
	})
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilename), v))
	})
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilename), v))
	})
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilename), v))
	})
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilename), v))
	})
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilename), v))
	})
}

// FilenameIsNil applies the IsNil predicate on the "filename" field.
func FilenameIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFilename)))
	})
}

// FilenameNotNil applies the NotNil predicate on the "filename" field.
func FilenameNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFilename)))
	})
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilename), v))
	})
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilename), v))
	})
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKey), v))
	})
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKey), v))
	})
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKey), v...))
	})
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKey), v...))
	})
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKey), v))
	})
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKey), v))
	})
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKey), v))
	})
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKey), v))
	})
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKey), v))
	})
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKey), v))
	})
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKey), v))
	})
}

// KeyIsNil applies the IsNil predicate on the "key" field.
func KeyIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKey)))
	})
}

// KeyNotNil applies the NotNil predicate on the "key" field.
func KeyNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKey)))
	})
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKey), v))
	})
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKey), v))
	})
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeight), v))
	})
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeight), v))
	})
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHeight), v...))
	})
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHeight), v...))
	})
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeight), v))
	})
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeight), v))
	})
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeight), v))
	})
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeight), v))
	})
}

// HeightContains applies the Contains predicate on the "height" field.
func HeightContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHeight), v))
	})
}

// HeightHasPrefix applies the HasPrefix predicate on the "height" field.
func HeightHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHeight), v))
	})
}

// HeightHasSuffix applies the HasSuffix predicate on the "height" field.
func HeightHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHeight), v))
	})
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeight)))
	})
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeight)))
	})
}

// HeightEqualFold applies the EqualFold predicate on the "height" field.
func HeightEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHeight), v))
	})
}

// HeightContainsFold applies the ContainsFold predicate on the "height" field.
func HeightContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHeight), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldURL)))
	})
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldURL)))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsername)))
	})
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsername)))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWidth), v))
	})
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWidth), v))
	})
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWidth), v...))
	})
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWidth), v...))
	})
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWidth), v))
	})
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWidth), v))
	})
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWidth), v))
	})
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWidth), v))
	})
}

// WidthContains applies the Contains predicate on the "width" field.
func WidthContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWidth), v))
	})
}

// WidthHasPrefix applies the HasPrefix predicate on the "width" field.
func WidthHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWidth), v))
	})
}

// WidthHasSuffix applies the HasSuffix predicate on the "width" field.
func WidthHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWidth), v))
	})
}

// WidthIsNil applies the IsNil predicate on the "width" field.
func WidthIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWidth)))
	})
}

// WidthNotNil applies the NotNil predicate on the "width" field.
func WidthNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWidth)))
	})
}

// WidthEqualFold applies the EqualFold predicate on the "width" field.
func WidthEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWidth), v))
	})
}

// WidthContainsFold applies the ContainsFold predicate on the "width" field.
func WidthContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWidth), v))
	})
}

// Md5codeEQ applies the EQ predicate on the "md5code" field.
func Md5codeEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMd5code), v))
	})
}

// Md5codeNEQ applies the NEQ predicate on the "md5code" field.
func Md5codeNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMd5code), v))
	})
}

// Md5codeIn applies the In predicate on the "md5code" field.
func Md5codeIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMd5code), v...))
	})
}

// Md5codeNotIn applies the NotIn predicate on the "md5code" field.
func Md5codeNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMd5code), v...))
	})
}

// Md5codeGT applies the GT predicate on the "md5code" field.
func Md5codeGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMd5code), v))
	})
}

// Md5codeGTE applies the GTE predicate on the "md5code" field.
func Md5codeGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMd5code), v))
	})
}

// Md5codeLT applies the LT predicate on the "md5code" field.
func Md5codeLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMd5code), v))
	})
}

// Md5codeLTE applies the LTE predicate on the "md5code" field.
func Md5codeLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMd5code), v))
	})
}

// Md5codeContains applies the Contains predicate on the "md5code" field.
func Md5codeContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMd5code), v))
	})
}

// Md5codeHasPrefix applies the HasPrefix predicate on the "md5code" field.
func Md5codeHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMd5code), v))
	})
}

// Md5codeHasSuffix applies the HasSuffix predicate on the "md5code" field.
func Md5codeHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMd5code), v))
	})
}

// Md5codeIsNil applies the IsNil predicate on the "md5code" field.
func Md5codeIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMd5code)))
	})
}

// Md5codeNotNil applies the NotNil predicate on the "md5code" field.
func Md5codeNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMd5code)))
	})
}

// Md5codeEqualFold applies the EqualFold predicate on the "md5code" field.
func Md5codeEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMd5code), v))
	})
}

// Md5codeContainsFold applies the ContainsFold predicate on the "md5code" field.
func Md5codeContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMd5code), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.ResourceStorage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ResourceStorage(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResourceStorage) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResourceStorage) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResourceStorage) predicate.ResourceStorage {
	return predicate.ResourceStorage(func(s *sql.Selector) {
		p(s.Not())
	})
}
