// Code generated by entc, DO NOT EDIT.

package vipuser

import (
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// VipType applies equality check predicate on the "vipType" field. It's identical to VipTypeEQ.
func VipType(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipType), v))
	})
}

// SvipType applies equality check predicate on the "svipType" field. It's identical to SvipTypeEQ.
func SvipType(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSvipType), v))
	})
}

// SvipEffectTime applies equality check predicate on the "svipEffectTime" field. It's identical to SvipEffectTimeEQ.
func SvipEffectTime(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSvipEffectTime), v))
	})
}

// SvipExpiredTime applies equality check predicate on the "svipExpiredTime" field. It's identical to SvipExpiredTimeEQ.
func SvipExpiredTime(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSvipExpiredTime), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// EffectTime applies equality check predicate on the "effectTime" field. It's identical to EffectTimeEQ.
func EffectTime(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// ExpiredTime applies equality check predicate on the "expiredTime" field. It's identical to ExpiredTimeEQ.
func ExpiredTime(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserId), v))
	})
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserId), v))
	})
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserId), v...))
	})
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserId), v...))
	})
}

// VipTypeEQ applies the EQ predicate on the "vipType" field.
func VipTypeEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVipType), v))
	})
}

// VipTypeNEQ applies the NEQ predicate on the "vipType" field.
func VipTypeNEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVipType), v))
	})
}

// VipTypeIn applies the In predicate on the "vipType" field.
func VipTypeIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVipType), v...))
	})
}

// VipTypeNotIn applies the NotIn predicate on the "vipType" field.
func VipTypeNotIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVipType), v...))
	})
}

// VipTypeGT applies the GT predicate on the "vipType" field.
func VipTypeGT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVipType), v))
	})
}

// VipTypeGTE applies the GTE predicate on the "vipType" field.
func VipTypeGTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVipType), v))
	})
}

// VipTypeLT applies the LT predicate on the "vipType" field.
func VipTypeLT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVipType), v))
	})
}

// VipTypeLTE applies the LTE predicate on the "vipType" field.
func VipTypeLTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVipType), v))
	})
}

// VipTypeIsNil applies the IsNil predicate on the "vipType" field.
func VipTypeIsNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVipType)))
	})
}

// VipTypeNotNil applies the NotNil predicate on the "vipType" field.
func VipTypeNotNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVipType)))
	})
}

// SvipTypeEQ applies the EQ predicate on the "svipType" field.
func SvipTypeEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSvipType), v))
	})
}

// SvipTypeNEQ applies the NEQ predicate on the "svipType" field.
func SvipTypeNEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSvipType), v))
	})
}

// SvipTypeIn applies the In predicate on the "svipType" field.
func SvipTypeIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSvipType), v...))
	})
}

// SvipTypeNotIn applies the NotIn predicate on the "svipType" field.
func SvipTypeNotIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSvipType), v...))
	})
}

// SvipTypeGT applies the GT predicate on the "svipType" field.
func SvipTypeGT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSvipType), v))
	})
}

// SvipTypeGTE applies the GTE predicate on the "svipType" field.
func SvipTypeGTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSvipType), v))
	})
}

// SvipTypeLT applies the LT predicate on the "svipType" field.
func SvipTypeLT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSvipType), v))
	})
}

// SvipTypeLTE applies the LTE predicate on the "svipType" field.
func SvipTypeLTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSvipType), v))
	})
}

// SvipTypeIsNil applies the IsNil predicate on the "svipType" field.
func SvipTypeIsNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSvipType)))
	})
}

// SvipTypeNotNil applies the NotNil predicate on the "svipType" field.
func SvipTypeNotNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSvipType)))
	})
}

// SvipEffectTimeEQ applies the EQ predicate on the "svipEffectTime" field.
func SvipEffectTimeEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSvipEffectTime), v))
	})
}

// SvipEffectTimeNEQ applies the NEQ predicate on the "svipEffectTime" field.
func SvipEffectTimeNEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSvipEffectTime), v))
	})
}

// SvipEffectTimeIn applies the In predicate on the "svipEffectTime" field.
func SvipEffectTimeIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSvipEffectTime), v...))
	})
}

// SvipEffectTimeNotIn applies the NotIn predicate on the "svipEffectTime" field.
func SvipEffectTimeNotIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSvipEffectTime), v...))
	})
}

// SvipEffectTimeGT applies the GT predicate on the "svipEffectTime" field.
func SvipEffectTimeGT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSvipEffectTime), v))
	})
}

// SvipEffectTimeGTE applies the GTE predicate on the "svipEffectTime" field.
func SvipEffectTimeGTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSvipEffectTime), v))
	})
}

// SvipEffectTimeLT applies the LT predicate on the "svipEffectTime" field.
func SvipEffectTimeLT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSvipEffectTime), v))
	})
}

// SvipEffectTimeLTE applies the LTE predicate on the "svipEffectTime" field.
func SvipEffectTimeLTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSvipEffectTime), v))
	})
}

// SvipEffectTimeIsNil applies the IsNil predicate on the "svipEffectTime" field.
func SvipEffectTimeIsNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSvipEffectTime)))
	})
}

// SvipEffectTimeNotNil applies the NotNil predicate on the "svipEffectTime" field.
func SvipEffectTimeNotNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSvipEffectTime)))
	})
}

// SvipExpiredTimeEQ applies the EQ predicate on the "svipExpiredTime" field.
func SvipExpiredTimeEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSvipExpiredTime), v))
	})
}

// SvipExpiredTimeNEQ applies the NEQ predicate on the "svipExpiredTime" field.
func SvipExpiredTimeNEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSvipExpiredTime), v))
	})
}

// SvipExpiredTimeIn applies the In predicate on the "svipExpiredTime" field.
func SvipExpiredTimeIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSvipExpiredTime), v...))
	})
}

// SvipExpiredTimeNotIn applies the NotIn predicate on the "svipExpiredTime" field.
func SvipExpiredTimeNotIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSvipExpiredTime), v...))
	})
}

// SvipExpiredTimeGT applies the GT predicate on the "svipExpiredTime" field.
func SvipExpiredTimeGT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSvipExpiredTime), v))
	})
}

// SvipExpiredTimeGTE applies the GTE predicate on the "svipExpiredTime" field.
func SvipExpiredTimeGTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSvipExpiredTime), v))
	})
}

// SvipExpiredTimeLT applies the LT predicate on the "svipExpiredTime" field.
func SvipExpiredTimeLT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSvipExpiredTime), v))
	})
}

// SvipExpiredTimeLTE applies the LTE predicate on the "svipExpiredTime" field.
func SvipExpiredTimeLTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSvipExpiredTime), v))
	})
}

// SvipExpiredTimeIsNil applies the IsNil predicate on the "svipExpiredTime" field.
func SvipExpiredTimeIsNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSvipExpiredTime)))
	})
}

// SvipExpiredTimeNotNil applies the NotNil predicate on the "svipExpiredTime" field.
func SvipExpiredTimeNotNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSvipExpiredTime)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// EffectTimeEQ applies the EQ predicate on the "effectTime" field.
func EffectTimeEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeNEQ applies the NEQ predicate on the "effectTime" field.
func EffectTimeNEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEffectTime), v))
	})
}

// EffectTimeIn applies the In predicate on the "effectTime" field.
func EffectTimeIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeNotIn applies the NotIn predicate on the "effectTime" field.
func EffectTimeNotIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEffectTime), v...))
	})
}

// EffectTimeGT applies the GT predicate on the "effectTime" field.
func EffectTimeGT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeGTE applies the GTE predicate on the "effectTime" field.
func EffectTimeGTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLT applies the LT predicate on the "effectTime" field.
func EffectTimeLT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEffectTime), v))
	})
}

// EffectTimeLTE applies the LTE predicate on the "effectTime" field.
func EffectTimeLTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEffectTime), v))
	})
}

// ExpiredTimeEQ applies the EQ predicate on the "expiredTime" field.
func ExpiredTimeEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeNEQ applies the NEQ predicate on the "expiredTime" field.
func ExpiredTimeNEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeIn applies the In predicate on the "expiredTime" field.
func ExpiredTimeIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeNotIn applies the NotIn predicate on the "expiredTime" field.
func ExpiredTimeNotIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiredTime), v...))
	})
}

// ExpiredTimeGT applies the GT predicate on the "expiredTime" field.
func ExpiredTimeGT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeGTE applies the GTE predicate on the "expiredTime" field.
func ExpiredTimeGTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLT applies the LT predicate on the "expiredTime" field.
func ExpiredTimeLT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiredTime), v))
	})
}

// ExpiredTimeLTE applies the LTE predicate on the "expiredTime" field.
func ExpiredTimeLTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiredTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.VipUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VipUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.SocialUser) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VipUser) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VipUser) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VipUser) predicate.VipUser {
	return predicate.VipUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
