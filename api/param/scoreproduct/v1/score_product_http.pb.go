// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ScoreProductHTTPServer interface {
	BatchDeleteScoreProduct(context.Context, *ScoreProductBatchDeleteReq) (*ScoreProductDeleteReply, error)
	CreateScoreProduct(context.Context, *ScoreProductCreateReq) (*ScoreProductCreateReply, error)
	DeleteScoreProduct(context.Context, *ScoreProductDeleteReq) (*ScoreProductDeleteReply, error)
	GetPageScoreProduct(context.Context, *ScoreProductPageReq) (*ScoreProductPageReply, error)
	GetScoreProduct(context.Context, *ScoreProductReq) (*ScoreProductReply, error)
	UpdateScoreProduct(context.Context, *ScoreProductUpdateReq) (*ScoreProductUpdateReply, error)
}

func RegisterScoreProductHTTPServer(s *http.Server, srv ScoreProductHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/scoreproduct/page", _ScoreProduct_GetPageScoreProduct0_HTTP_Handler(srv))
	r.GET("/v1/scoreproduct/{id}", _ScoreProduct_GetScoreProduct0_HTTP_Handler(srv))
	r.PUT("/v1/scoreproduct/{id}", _ScoreProduct_UpdateScoreProduct0_HTTP_Handler(srv))
	r.POST("/v1/scoreproduct", _ScoreProduct_CreateScoreProduct0_HTTP_Handler(srv))
	r.DELETE("/v1/scoreproduct/{id}", _ScoreProduct_DeleteScoreProduct0_HTTP_Handler(srv))
	r.DELETE("/v1/scoreproduct", _ScoreProduct_BatchDeleteScoreProduct0_HTTP_Handler(srv))
}

func _ScoreProduct_GetPageScoreProduct0_HTTP_Handler(srv ScoreProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScoreProductPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/scoreproduct.v1.ScoreProduct/GetPageScoreProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageScoreProduct(ctx, req.(*ScoreProductPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScoreProductPageReply)
		return ctx.Result(200, reply)
	}
}

func _ScoreProduct_GetScoreProduct0_HTTP_Handler(srv ScoreProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScoreProductReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/scoreproduct.v1.ScoreProduct/GetScoreProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetScoreProduct(ctx, req.(*ScoreProductReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScoreProductReply)
		return ctx.Result(200, reply)
	}
}

func _ScoreProduct_UpdateScoreProduct0_HTTP_Handler(srv ScoreProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScoreProductUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/scoreproduct.v1.ScoreProduct/UpdateScoreProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateScoreProduct(ctx, req.(*ScoreProductUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScoreProductUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _ScoreProduct_CreateScoreProduct0_HTTP_Handler(srv ScoreProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScoreProductCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/scoreproduct.v1.ScoreProduct/CreateScoreProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateScoreProduct(ctx, req.(*ScoreProductCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScoreProductCreateReply)
		return ctx.Result(200, reply)
	}
}

func _ScoreProduct_DeleteScoreProduct0_HTTP_Handler(srv ScoreProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScoreProductDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/scoreproduct.v1.ScoreProduct/DeleteScoreProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteScoreProduct(ctx, req.(*ScoreProductDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScoreProductDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _ScoreProduct_BatchDeleteScoreProduct0_HTTP_Handler(srv ScoreProductHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScoreProductBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/scoreproduct.v1.ScoreProduct/BatchDeleteScoreProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteScoreProduct(ctx, req.(*ScoreProductBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScoreProductDeleteReply)
		return ctx.Result(200, reply)
	}
}

type ScoreProductHTTPClient interface {
	BatchDeleteScoreProduct(ctx context.Context, req *ScoreProductBatchDeleteReq, opts ...http.CallOption) (rsp *ScoreProductDeleteReply, err error)
	CreateScoreProduct(ctx context.Context, req *ScoreProductCreateReq, opts ...http.CallOption) (rsp *ScoreProductCreateReply, err error)
	DeleteScoreProduct(ctx context.Context, req *ScoreProductDeleteReq, opts ...http.CallOption) (rsp *ScoreProductDeleteReply, err error)
	GetPageScoreProduct(ctx context.Context, req *ScoreProductPageReq, opts ...http.CallOption) (rsp *ScoreProductPageReply, err error)
	GetScoreProduct(ctx context.Context, req *ScoreProductReq, opts ...http.CallOption) (rsp *ScoreProductReply, err error)
	UpdateScoreProduct(ctx context.Context, req *ScoreProductUpdateReq, opts ...http.CallOption) (rsp *ScoreProductUpdateReply, err error)
}

type ScoreProductHTTPClientImpl struct {
	cc *http.Client
}

func NewScoreProductHTTPClient(client *http.Client) ScoreProductHTTPClient {
	return &ScoreProductHTTPClientImpl{client}
}

func (c *ScoreProductHTTPClientImpl) BatchDeleteScoreProduct(ctx context.Context, in *ScoreProductBatchDeleteReq, opts ...http.CallOption) (*ScoreProductDeleteReply, error) {
	var out ScoreProductDeleteReply
	pattern := "/v1/scoreproduct"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/scoreproduct.v1.ScoreProduct/BatchDeleteScoreProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ScoreProductHTTPClientImpl) CreateScoreProduct(ctx context.Context, in *ScoreProductCreateReq, opts ...http.CallOption) (*ScoreProductCreateReply, error) {
	var out ScoreProductCreateReply
	pattern := "/v1/scoreproduct"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/scoreproduct.v1.ScoreProduct/CreateScoreProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ScoreProductHTTPClientImpl) DeleteScoreProduct(ctx context.Context, in *ScoreProductDeleteReq, opts ...http.CallOption) (*ScoreProductDeleteReply, error) {
	var out ScoreProductDeleteReply
	pattern := "/v1/scoreproduct/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/scoreproduct.v1.ScoreProduct/DeleteScoreProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ScoreProductHTTPClientImpl) GetPageScoreProduct(ctx context.Context, in *ScoreProductPageReq, opts ...http.CallOption) (*ScoreProductPageReply, error) {
	var out ScoreProductPageReply
	pattern := "/v1/scoreproduct/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/scoreproduct.v1.ScoreProduct/GetPageScoreProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ScoreProductHTTPClientImpl) GetScoreProduct(ctx context.Context, in *ScoreProductReq, opts ...http.CallOption) (*ScoreProductReply, error) {
	var out ScoreProductReply
	pattern := "/v1/scoreproduct/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/scoreproduct.v1.ScoreProduct/GetScoreProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ScoreProductHTTPClientImpl) UpdateScoreProduct(ctx context.Context, in *ScoreProductUpdateReq, opts ...http.CallOption) (*ScoreProductUpdateReply, error) {
	var out ScoreProductUpdateReply
	pattern := "/v1/scoreproduct/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/scoreproduct.v1.ScoreProduct/UpdateScoreProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
