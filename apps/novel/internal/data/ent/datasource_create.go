// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/datasource"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DataSourceCreate is the builder for creating a DataSource entity.
type DataSourceCreate struct {
	config
	mutation *DataSourceMutation
	hooks    []Hook
}

// SetDbName sets the "dbName" field.
func (dsc *DataSourceCreate) SetDbName(s string) *DataSourceCreate {
	dsc.mutation.SetDbName(s)
	return dsc
}

// SetNillableDbName sets the "dbName" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableDbName(s *string) *DataSourceCreate {
	if s != nil {
		dsc.SetDbName(*s)
	}
	return dsc
}

// SetHost sets the "host" field.
func (dsc *DataSourceCreate) SetHost(s string) *DataSourceCreate {
	dsc.mutation.SetHost(s)
	return dsc
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableHost(s *string) *DataSourceCreate {
	if s != nil {
		dsc.SetHost(*s)
	}
	return dsc
}

// SetPort sets the "port" field.
func (dsc *DataSourceCreate) SetPort(i int32) *DataSourceCreate {
	dsc.mutation.SetPort(i)
	return dsc
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillablePort(i *int32) *DataSourceCreate {
	if i != nil {
		dsc.SetPort(*i)
	}
	return dsc
}

// SetDatabase sets the "database" field.
func (dsc *DataSourceCreate) SetDatabase(s string) *DataSourceCreate {
	dsc.mutation.SetDatabase(s)
	return dsc
}

// SetNillableDatabase sets the "database" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableDatabase(s *string) *DataSourceCreate {
	if s != nil {
		dsc.SetDatabase(*s)
	}
	return dsc
}

// SetUserName sets the "userName" field.
func (dsc *DataSourceCreate) SetUserName(s string) *DataSourceCreate {
	dsc.mutation.SetUserName(s)
	return dsc
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableUserName(s *string) *DataSourceCreate {
	if s != nil {
		dsc.SetUserName(*s)
	}
	return dsc
}

// SetPwd sets the "pwd" field.
func (dsc *DataSourceCreate) SetPwd(s string) *DataSourceCreate {
	dsc.mutation.SetPwd(s)
	return dsc
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillablePwd(s *string) *DataSourceCreate {
	if s != nil {
		dsc.SetPwd(*s)
	}
	return dsc
}

// SetStatus sets the "status" field.
func (dsc *DataSourceCreate) SetStatus(b bool) *DataSourceCreate {
	dsc.mutation.SetStatus(b)
	return dsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableStatus(b *bool) *DataSourceCreate {
	if b != nil {
		dsc.SetStatus(*b)
	}
	return dsc
}

// SetDbType sets the "dbType" field.
func (dsc *DataSourceCreate) SetDbType(dt datasource.DbType) *DataSourceCreate {
	dsc.mutation.SetDbType(dt)
	return dsc
}

// SetNillableDbType sets the "dbType" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableDbType(dt *datasource.DbType) *DataSourceCreate {
	if dt != nil {
		dsc.SetDbType(*dt)
	}
	return dsc
}

// SetConnMaxIdleTime sets the "connMaxIdleTime" field.
func (dsc *DataSourceCreate) SetConnMaxIdleTime(i int32) *DataSourceCreate {
	dsc.mutation.SetConnMaxIdleTime(i)
	return dsc
}

// SetNillableConnMaxIdleTime sets the "connMaxIdleTime" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableConnMaxIdleTime(i *int32) *DataSourceCreate {
	if i != nil {
		dsc.SetConnMaxIdleTime(*i)
	}
	return dsc
}

// SetConnMaxLifeTime sets the "connMaxLifeTime" field.
func (dsc *DataSourceCreate) SetConnMaxLifeTime(i int32) *DataSourceCreate {
	dsc.mutation.SetConnMaxLifeTime(i)
	return dsc
}

// SetNillableConnMaxLifeTime sets the "connMaxLifeTime" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableConnMaxLifeTime(i *int32) *DataSourceCreate {
	if i != nil {
		dsc.SetConnMaxLifeTime(*i)
	}
	return dsc
}

// SetMaxIdleConns sets the "maxIdleConns" field.
func (dsc *DataSourceCreate) SetMaxIdleConns(i int32) *DataSourceCreate {
	dsc.mutation.SetMaxIdleConns(i)
	return dsc
}

// SetNillableMaxIdleConns sets the "maxIdleConns" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableMaxIdleConns(i *int32) *DataSourceCreate {
	if i != nil {
		dsc.SetMaxIdleConns(*i)
	}
	return dsc
}

// SetMaxOpenConns sets the "maxOpenConns" field.
func (dsc *DataSourceCreate) SetMaxOpenConns(i int32) *DataSourceCreate {
	dsc.mutation.SetMaxOpenConns(i)
	return dsc
}

// SetNillableMaxOpenConns sets the "maxOpenConns" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableMaxOpenConns(i *int32) *DataSourceCreate {
	if i != nil {
		dsc.SetMaxOpenConns(*i)
	}
	return dsc
}

// SetRemark sets the "remark" field.
func (dsc *DataSourceCreate) SetRemark(s string) *DataSourceCreate {
	dsc.mutation.SetRemark(s)
	return dsc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableRemark(s *string) *DataSourceCreate {
	if s != nil {
		dsc.SetRemark(*s)
	}
	return dsc
}

// SetCreatedAt sets the "createdAt" field.
func (dsc *DataSourceCreate) SetCreatedAt(t time.Time) *DataSourceCreate {
	dsc.mutation.SetCreatedAt(t)
	return dsc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableCreatedAt(t *time.Time) *DataSourceCreate {
	if t != nil {
		dsc.SetCreatedAt(*t)
	}
	return dsc
}

// SetUpdatedAt sets the "updatedAt" field.
func (dsc *DataSourceCreate) SetUpdatedAt(t time.Time) *DataSourceCreate {
	dsc.mutation.SetUpdatedAt(t)
	return dsc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableUpdatedAt(t *time.Time) *DataSourceCreate {
	if t != nil {
		dsc.SetUpdatedAt(*t)
	}
	return dsc
}

// SetCreateBy sets the "createBy" field.
func (dsc *DataSourceCreate) SetCreateBy(i int64) *DataSourceCreate {
	dsc.mutation.SetCreateBy(i)
	return dsc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableCreateBy(i *int64) *DataSourceCreate {
	if i != nil {
		dsc.SetCreateBy(*i)
	}
	return dsc
}

// SetUpdateBy sets the "updateBy" field.
func (dsc *DataSourceCreate) SetUpdateBy(i int64) *DataSourceCreate {
	dsc.mutation.SetUpdateBy(i)
	return dsc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableUpdateBy(i *int64) *DataSourceCreate {
	if i != nil {
		dsc.SetUpdateBy(*i)
	}
	return dsc
}

// SetTenantId sets the "tenantId" field.
func (dsc *DataSourceCreate) SetTenantId(i int64) *DataSourceCreate {
	dsc.mutation.SetTenantId(i)
	return dsc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableTenantId(i *int64) *DataSourceCreate {
	if i != nil {
		dsc.SetTenantId(*i)
	}
	return dsc
}

// Mutation returns the DataSourceMutation object of the builder.
func (dsc *DataSourceCreate) Mutation() *DataSourceMutation {
	return dsc.mutation
}

// Save creates the DataSource in the database.
func (dsc *DataSourceCreate) Save(ctx context.Context) (*DataSource, error) {
	var (
		err  error
		node *DataSource
	)
	dsc.defaults()
	if len(dsc.hooks) == 0 {
		if err = dsc.check(); err != nil {
			return nil, err
		}
		node, err = dsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsc.check(); err != nil {
				return nil, err
			}
			dsc.mutation = mutation
			if node, err = dsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dsc.hooks) - 1; i >= 0; i-- {
			if dsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DataSourceCreate) SaveX(ctx context.Context) *DataSource {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DataSourceCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DataSourceCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DataSourceCreate) defaults() {
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		v := datasource.DefaultCreatedAt()
		dsc.mutation.SetCreatedAt(v)
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		v := datasource.DefaultUpdatedAt()
		dsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dsc.mutation.CreateBy(); !ok {
		v := datasource.DefaultCreateBy
		dsc.mutation.SetCreateBy(v)
	}
	if _, ok := dsc.mutation.UpdateBy(); !ok {
		v := datasource.DefaultUpdateBy
		dsc.mutation.SetUpdateBy(v)
	}
	if _, ok := dsc.mutation.TenantId(); !ok {
		v := datasource.DefaultTenantId
		dsc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DataSourceCreate) check() error {
	if v, ok := dsc.mutation.DbType(); ok {
		if err := datasource.DbTypeValidator(v); err != nil {
			return &ValidationError{Name: "dbType", err: fmt.Errorf(`ent: validator failed for field "dbType": %w`, err)}
		}
	}
	if _, ok := dsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := dsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := dsc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := dsc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := dsc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (dsc *DataSourceCreate) sqlSave(ctx context.Context) (*DataSource, error) {
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (dsc *DataSourceCreate) createSpec() (*DataSource, *sqlgraph.CreateSpec) {
	var (
		_node = &DataSource{config: dsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: datasource.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: datasource.FieldID,
			},
		}
	)
	if value, ok := dsc.mutation.DbName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldDbName,
		})
		_node.DbName = value
	}
	if value, ok := dsc.mutation.Host(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldHost,
		})
		_node.Host = value
	}
	if value, ok := dsc.mutation.Port(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldPort,
		})
		_node.Port = value
	}
	if value, ok := dsc.mutation.Database(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldDatabase,
		})
		_node.Database = value
	}
	if value, ok := dsc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := dsc.mutation.Pwd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldPwd,
		})
		_node.Pwd = value
	}
	if value, ok := dsc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: datasource.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := dsc.mutation.DbType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: datasource.FieldDbType,
		})
		_node.DbType = value
	}
	if value, ok := dsc.mutation.ConnMaxIdleTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxIdleTime,
		})
		_node.ConnMaxIdleTime = value
	}
	if value, ok := dsc.mutation.ConnMaxLifeTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldConnMaxLifeTime,
		})
		_node.ConnMaxLifeTime = value
	}
	if value, ok := dsc.mutation.MaxIdleConns(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxIdleConns,
		})
		_node.MaxIdleConns = value
	}
	if value, ok := dsc.mutation.MaxOpenConns(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: datasource.FieldMaxOpenConns,
		})
		_node.MaxOpenConns = value
	}
	if value, ok := dsc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := dsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: datasource.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dsc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: datasource.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dsc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := dsc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := dsc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: datasource.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// DataSourceCreateBulk is the builder for creating many DataSource entities in bulk.
type DataSourceCreateBulk struct {
	config
	builders []*DataSourceCreate
}

// Save creates the DataSource entities in the database.
func (dscb *DataSourceCreateBulk) Save(ctx context.Context) ([]*DataSource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DataSource, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DataSourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DataSourceCreateBulk) SaveX(ctx context.Context) []*DataSource {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DataSourceCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DataSourceCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}
