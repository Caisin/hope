// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/novelbuyrecord"
	"hope/apps/novel/internal/data/ent/socialuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// NovelBuyRecord is the model entity for the NovelBuyRecord schema.
type NovelBuyRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	// 用户ID
	UserId int64 `json:"userId,omitempty"`
	// UserName holds the value of the "userName" field.
	// 用户名称
	UserName string `json:"userName,omitempty"`
	// NovelId holds the value of the "novelId" field.
	// 书号
	NovelId int64 `json:"novelId,omitempty"`
	// NovelName holds the value of the "novelName" field.
	// 书名
	NovelName string `json:"novelName,omitempty"`
	// PackageId holds the value of the "packageId" field.
	// 书籍打包ID
	PackageId int64 `json:"packageId,omitempty"`
	// Cover holds the value of the "cover" field.
	// 书封面
	Cover string `json:"cover,omitempty"`
	// Coin holds the value of the "coin" field.
	// 花费书币
	Coin int64 `json:"coin,omitempty"`
	// Coupon holds the value of the "coupon" field.
	// 花费书券
	Coupon int64 `json:"coupon,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NovelBuyRecordQuery when eager-loading is set.
	Edges NovelBuyRecordEdges `json:"edges"`
}

// NovelBuyRecordEdges holds the relations/edges for other nodes in the graph.
type NovelBuyRecordEdges struct {
	// User holds the value of the user edge.
	User *SocialUser `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NovelBuyRecordEdges) UserOrErr() (*SocialUser, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: socialuser.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NovelBuyRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case novelbuyrecord.FieldID, novelbuyrecord.FieldUserId, novelbuyrecord.FieldNovelId, novelbuyrecord.FieldPackageId, novelbuyrecord.FieldCoin, novelbuyrecord.FieldCoupon, novelbuyrecord.FieldCreateBy, novelbuyrecord.FieldUpdateBy, novelbuyrecord.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case novelbuyrecord.FieldUserName, novelbuyrecord.FieldNovelName, novelbuyrecord.FieldCover, novelbuyrecord.FieldRemark:
			values[i] = new(sql.NullString)
		case novelbuyrecord.FieldCreatedAt, novelbuyrecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NovelBuyRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NovelBuyRecord fields.
func (nbr *NovelBuyRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case novelbuyrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nbr.ID = int64(value.Int64)
		case novelbuyrecord.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				nbr.UserId = value.Int64
			}
		case novelbuyrecord.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				nbr.UserName = value.String
			}
		case novelbuyrecord.FieldNovelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field novelId", values[i])
			} else if value.Valid {
				nbr.NovelId = value.Int64
			}
		case novelbuyrecord.FieldNovelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field novelName", values[i])
			} else if value.Valid {
				nbr.NovelName = value.String
			}
		case novelbuyrecord.FieldPackageId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field packageId", values[i])
			} else if value.Valid {
				nbr.PackageId = value.Int64
			}
		case novelbuyrecord.FieldCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover", values[i])
			} else if value.Valid {
				nbr.Cover = value.String
			}
		case novelbuyrecord.FieldCoin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coin", values[i])
			} else if value.Valid {
				nbr.Coin = value.Int64
			}
		case novelbuyrecord.FieldCoupon:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coupon", values[i])
			} else if value.Valid {
				nbr.Coupon = value.Int64
			}
		case novelbuyrecord.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				nbr.Remark = value.String
			}
		case novelbuyrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				nbr.CreatedAt = value.Time
			}
		case novelbuyrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				nbr.UpdatedAt = value.Time
			}
		case novelbuyrecord.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				nbr.CreateBy = value.Int64
			}
		case novelbuyrecord.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				nbr.UpdateBy = value.Int64
			}
		case novelbuyrecord.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				nbr.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the NovelBuyRecord entity.
func (nbr *NovelBuyRecord) QueryUser() *SocialUserQuery {
	return (&NovelBuyRecordClient{config: nbr.config}).QueryUser(nbr)
}

// Update returns a builder for updating this NovelBuyRecord.
// Note that you need to call NovelBuyRecord.Unwrap() before calling this method if this NovelBuyRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (nbr *NovelBuyRecord) Update() *NovelBuyRecordUpdateOne {
	return (&NovelBuyRecordClient{config: nbr.config}).UpdateOne(nbr)
}

// Unwrap unwraps the NovelBuyRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nbr *NovelBuyRecord) Unwrap() *NovelBuyRecord {
	tx, ok := nbr.config.driver.(*txDriver)
	if !ok {
		panic("ent: NovelBuyRecord is not a transactional entity")
	}
	nbr.config.driver = tx.drv
	return nbr
}

// String implements the fmt.Stringer.
func (nbr *NovelBuyRecord) String() string {
	var builder strings.Builder
	builder.WriteString("NovelBuyRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", nbr.ID))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", nbr.UserId))
	builder.WriteString(", userName=")
	builder.WriteString(nbr.UserName)
	builder.WriteString(", novelId=")
	builder.WriteString(fmt.Sprintf("%v", nbr.NovelId))
	builder.WriteString(", novelName=")
	builder.WriteString(nbr.NovelName)
	builder.WriteString(", packageId=")
	builder.WriteString(fmt.Sprintf("%v", nbr.PackageId))
	builder.WriteString(", cover=")
	builder.WriteString(nbr.Cover)
	builder.WriteString(", coin=")
	builder.WriteString(fmt.Sprintf("%v", nbr.Coin))
	builder.WriteString(", coupon=")
	builder.WriteString(fmt.Sprintf("%v", nbr.Coupon))
	builder.WriteString(", remark=")
	builder.WriteString(nbr.Remark)
	builder.WriteString(", createdAt=")
	builder.WriteString(nbr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(nbr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", nbr.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", nbr.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", nbr.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NovelBuyRecords is a parsable slice of NovelBuyRecord.
type NovelBuyRecords []*NovelBuyRecord

func (nbr NovelBuyRecords) config(cfg config) {
	for _i := range nbr {
		nbr[_i].config = cfg
	}
}
