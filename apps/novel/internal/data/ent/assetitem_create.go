// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/assetitem"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AssetItemCreate is the builder for creating a AssetItem entity.
type AssetItemCreate struct {
	config
	mutation *AssetItemMutation
	hooks    []Hook
}

// SetAssetItemId sets the "assetItemId" field.
func (aic *AssetItemCreate) SetAssetItemId(i int32) *AssetItemCreate {
	aic.mutation.SetAssetItemId(i)
	return aic
}

// SetAssetName sets the "assetName" field.
func (aic *AssetItemCreate) SetAssetName(s string) *AssetItemCreate {
	aic.mutation.SetAssetName(s)
	return aic
}

// SetNillableAssetName sets the "assetName" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableAssetName(s *string) *AssetItemCreate {
	if s != nil {
		aic.SetAssetName(*s)
	}
	return aic
}

// SetCashTag sets the "cashTag" field.
func (aic *AssetItemCreate) SetCashTag(i int32) *AssetItemCreate {
	aic.mutation.SetCashTag(i)
	return aic
}

// SetNillableCashTag sets the "cashTag" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableCashTag(i *int32) *AssetItemCreate {
	if i != nil {
		aic.SetCashTag(*i)
	}
	return aic
}

// SetValidDays sets the "validDays" field.
func (aic *AssetItemCreate) SetValidDays(i int32) *AssetItemCreate {
	aic.mutation.SetValidDays(i)
	return aic
}

// SetNillableValidDays sets the "validDays" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableValidDays(i *int32) *AssetItemCreate {
	if i != nil {
		aic.SetValidDays(*i)
	}
	return aic
}

// SetEffectTime sets the "effectTime" field.
func (aic *AssetItemCreate) SetEffectTime(t time.Time) *AssetItemCreate {
	aic.mutation.SetEffectTime(t)
	return aic
}

// SetNillableEffectTime sets the "effectTime" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableEffectTime(t *time.Time) *AssetItemCreate {
	if t != nil {
		aic.SetEffectTime(*t)
	}
	return aic
}

// SetExpiredTime sets the "expiredTime" field.
func (aic *AssetItemCreate) SetExpiredTime(t time.Time) *AssetItemCreate {
	aic.mutation.SetExpiredTime(t)
	return aic
}

// SetNillableExpiredTime sets the "expiredTime" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableExpiredTime(t *time.Time) *AssetItemCreate {
	if t != nil {
		aic.SetExpiredTime(*t)
	}
	return aic
}

// SetCreatedAt sets the "createdAt" field.
func (aic *AssetItemCreate) SetCreatedAt(t time.Time) *AssetItemCreate {
	aic.mutation.SetCreatedAt(t)
	return aic
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableCreatedAt(t *time.Time) *AssetItemCreate {
	if t != nil {
		aic.SetCreatedAt(*t)
	}
	return aic
}

// SetUpdatedAt sets the "updatedAt" field.
func (aic *AssetItemCreate) SetUpdatedAt(t time.Time) *AssetItemCreate {
	aic.mutation.SetUpdatedAt(t)
	return aic
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableUpdatedAt(t *time.Time) *AssetItemCreate {
	if t != nil {
		aic.SetUpdatedAt(*t)
	}
	return aic
}

// SetCreateBy sets the "createBy" field.
func (aic *AssetItemCreate) SetCreateBy(i int64) *AssetItemCreate {
	aic.mutation.SetCreateBy(i)
	return aic
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableCreateBy(i *int64) *AssetItemCreate {
	if i != nil {
		aic.SetCreateBy(*i)
	}
	return aic
}

// SetUpdateBy sets the "updateBy" field.
func (aic *AssetItemCreate) SetUpdateBy(i int64) *AssetItemCreate {
	aic.mutation.SetUpdateBy(i)
	return aic
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableUpdateBy(i *int64) *AssetItemCreate {
	if i != nil {
		aic.SetUpdateBy(*i)
	}
	return aic
}

// SetTenantId sets the "tenantId" field.
func (aic *AssetItemCreate) SetTenantId(i int64) *AssetItemCreate {
	aic.mutation.SetTenantId(i)
	return aic
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (aic *AssetItemCreate) SetNillableTenantId(i *int64) *AssetItemCreate {
	if i != nil {
		aic.SetTenantId(*i)
	}
	return aic
}

// Mutation returns the AssetItemMutation object of the builder.
func (aic *AssetItemCreate) Mutation() *AssetItemMutation {
	return aic.mutation
}

// Save creates the AssetItem in the database.
func (aic *AssetItemCreate) Save(ctx context.Context) (*AssetItem, error) {
	var (
		err  error
		node *AssetItem
	)
	aic.defaults()
	if len(aic.hooks) == 0 {
		if err = aic.check(); err != nil {
			return nil, err
		}
		node, err = aic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssetItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aic.check(); err != nil {
				return nil, err
			}
			aic.mutation = mutation
			if node, err = aic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aic.hooks) - 1; i >= 0; i-- {
			if aic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aic *AssetItemCreate) SaveX(ctx context.Context) *AssetItem {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *AssetItemCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *AssetItemCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aic *AssetItemCreate) defaults() {
	if _, ok := aic.mutation.EffectTime(); !ok {
		v := assetitem.DefaultEffectTime()
		aic.mutation.SetEffectTime(v)
	}
	if _, ok := aic.mutation.ExpiredTime(); !ok {
		v := assetitem.DefaultExpiredTime()
		aic.mutation.SetExpiredTime(v)
	}
	if _, ok := aic.mutation.CreatedAt(); !ok {
		v := assetitem.DefaultCreatedAt()
		aic.mutation.SetCreatedAt(v)
	}
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		v := assetitem.DefaultUpdatedAt()
		aic.mutation.SetUpdatedAt(v)
	}
	if _, ok := aic.mutation.CreateBy(); !ok {
		v := assetitem.DefaultCreateBy
		aic.mutation.SetCreateBy(v)
	}
	if _, ok := aic.mutation.UpdateBy(); !ok {
		v := assetitem.DefaultUpdateBy
		aic.mutation.SetUpdateBy(v)
	}
	if _, ok := aic.mutation.TenantId(); !ok {
		v := assetitem.DefaultTenantId
		aic.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *AssetItemCreate) check() error {
	if _, ok := aic.mutation.AssetItemId(); !ok {
		return &ValidationError{Name: "assetItemId", err: errors.New(`ent: missing required field "AssetItem.assetItemId"`)}
	}
	if _, ok := aic.mutation.EffectTime(); !ok {
		return &ValidationError{Name: "effectTime", err: errors.New(`ent: missing required field "AssetItem.effectTime"`)}
	}
	if _, ok := aic.mutation.ExpiredTime(); !ok {
		return &ValidationError{Name: "expiredTime", err: errors.New(`ent: missing required field "AssetItem.expiredTime"`)}
	}
	if _, ok := aic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "AssetItem.createdAt"`)}
	}
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "AssetItem.updatedAt"`)}
	}
	if _, ok := aic.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "AssetItem.createBy"`)}
	}
	if _, ok := aic.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "AssetItem.updateBy"`)}
	}
	if _, ok := aic.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "AssetItem.tenantId"`)}
	}
	return nil
}

func (aic *AssetItemCreate) sqlSave(ctx context.Context) (*AssetItem, error) {
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (aic *AssetItemCreate) createSpec() (*AssetItem, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetItem{config: aic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: assetitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: assetitem.FieldID,
			},
		}
	)
	if value, ok := aic.mutation.AssetItemId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: assetitem.FieldAssetItemId,
		})
		_node.AssetItemId = value
	}
	if value, ok := aic.mutation.AssetName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assetitem.FieldAssetName,
		})
		_node.AssetName = value
	}
	if value, ok := aic.mutation.CashTag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: assetitem.FieldCashTag,
		})
		_node.CashTag = value
	}
	if value, ok := aic.mutation.ValidDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: assetitem.FieldValidDays,
		})
		_node.ValidDays = value
	}
	if value, ok := aic.mutation.EffectTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assetitem.FieldEffectTime,
		})
		_node.EffectTime = value
	}
	if value, ok := aic.mutation.ExpiredTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assetitem.FieldExpiredTime,
		})
		_node.ExpiredTime = value
	}
	if value, ok := aic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assetitem.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := aic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assetitem.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := aic.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetitem.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := aic.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetitem.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := aic.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: assetitem.FieldTenantId,
		})
		_node.TenantId = value
	}
	return _node, _spec
}

// AssetItemCreateBulk is the builder for creating many AssetItem entities in bulk.
type AssetItemCreateBulk struct {
	config
	builders []*AssetItemCreate
}

// Save creates the AssetItem entities in the database.
func (aicb *AssetItemCreateBulk) Save(ctx context.Context) ([]*AssetItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*AssetItem, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *AssetItemCreateBulk) SaveX(ctx context.Context) []*AssetItem {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *AssetItemCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *AssetItemCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}
