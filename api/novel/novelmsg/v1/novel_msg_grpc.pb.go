// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/novel/novelmsg/v1/novel_msg.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NovelMsgClient is the client API for NovelMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelMsgClient interface {
	// 分页查询NovelMsg
	GetPageNovelMsg(ctx context.Context, in *NovelMsgPageReq, opts ...grpc.CallOption) (*NovelMsgPageReply, error)
	// 获取NovelMsg
	GetNovelMsg(ctx context.Context, in *NovelMsgReq, opts ...grpc.CallOption) (*NovelMsgReply, error)
	// 更新NovelMsg
	UpdateNovelMsg(ctx context.Context, in *NovelMsgUpdateReq, opts ...grpc.CallOption) (*NovelMsgUpdateReply, error)
	// 创建NovelMsg
	CreateNovelMsg(ctx context.Context, in *NovelMsgCreateReq, opts ...grpc.CallOption) (*NovelMsgCreateReply, error)
	// 删除NovelMsg
	DeleteNovelMsg(ctx context.Context, in *NovelMsgDeleteReq, opts ...grpc.CallOption) (*NovelMsgDeleteReply, error)
	// 批量删除NovelMsg
	BatchDeleteNovelMsg(ctx context.Context, in *NovelMsgBatchDeleteReq, opts ...grpc.CallOption) (*NovelMsgDeleteReply, error)
}

type novelMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelMsgClient(cc grpc.ClientConnInterface) NovelMsgClient {
	return &novelMsgClient{cc}
}

func (c *novelMsgClient) GetPageNovelMsg(ctx context.Context, in *NovelMsgPageReq, opts ...grpc.CallOption) (*NovelMsgPageReply, error) {
	out := new(NovelMsgPageReply)
	err := c.cc.Invoke(ctx, "/novelmsg.v1.NovelMsg/GetPageNovelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelMsgClient) GetNovelMsg(ctx context.Context, in *NovelMsgReq, opts ...grpc.CallOption) (*NovelMsgReply, error) {
	out := new(NovelMsgReply)
	err := c.cc.Invoke(ctx, "/novelmsg.v1.NovelMsg/GetNovelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelMsgClient) UpdateNovelMsg(ctx context.Context, in *NovelMsgUpdateReq, opts ...grpc.CallOption) (*NovelMsgUpdateReply, error) {
	out := new(NovelMsgUpdateReply)
	err := c.cc.Invoke(ctx, "/novelmsg.v1.NovelMsg/UpdateNovelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelMsgClient) CreateNovelMsg(ctx context.Context, in *NovelMsgCreateReq, opts ...grpc.CallOption) (*NovelMsgCreateReply, error) {
	out := new(NovelMsgCreateReply)
	err := c.cc.Invoke(ctx, "/novelmsg.v1.NovelMsg/CreateNovelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelMsgClient) DeleteNovelMsg(ctx context.Context, in *NovelMsgDeleteReq, opts ...grpc.CallOption) (*NovelMsgDeleteReply, error) {
	out := new(NovelMsgDeleteReply)
	err := c.cc.Invoke(ctx, "/novelmsg.v1.NovelMsg/DeleteNovelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *novelMsgClient) BatchDeleteNovelMsg(ctx context.Context, in *NovelMsgBatchDeleteReq, opts ...grpc.CallOption) (*NovelMsgDeleteReply, error) {
	out := new(NovelMsgDeleteReply)
	err := c.cc.Invoke(ctx, "/novelmsg.v1.NovelMsg/BatchDeleteNovelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelMsgServer is the server API for NovelMsg service.
// All implementations must embed UnimplementedNovelMsgServer
// for forward compatibility
type NovelMsgServer interface {
	// 分页查询NovelMsg
	GetPageNovelMsg(context.Context, *NovelMsgPageReq) (*NovelMsgPageReply, error)
	// 获取NovelMsg
	GetNovelMsg(context.Context, *NovelMsgReq) (*NovelMsgReply, error)
	// 更新NovelMsg
	UpdateNovelMsg(context.Context, *NovelMsgUpdateReq) (*NovelMsgUpdateReply, error)
	// 创建NovelMsg
	CreateNovelMsg(context.Context, *NovelMsgCreateReq) (*NovelMsgCreateReply, error)
	// 删除NovelMsg
	DeleteNovelMsg(context.Context, *NovelMsgDeleteReq) (*NovelMsgDeleteReply, error)
	// 批量删除NovelMsg
	BatchDeleteNovelMsg(context.Context, *NovelMsgBatchDeleteReq) (*NovelMsgDeleteReply, error)
	mustEmbedUnimplementedNovelMsgServer()
}

// UnimplementedNovelMsgServer must be embedded to have forward compatible implementations.
type UnimplementedNovelMsgServer struct {
}

func (UnimplementedNovelMsgServer) GetPageNovelMsg(context.Context, *NovelMsgPageReq) (*NovelMsgPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageNovelMsg not implemented")
}
func (UnimplementedNovelMsgServer) GetNovelMsg(context.Context, *NovelMsgReq) (*NovelMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNovelMsg not implemented")
}
func (UnimplementedNovelMsgServer) UpdateNovelMsg(context.Context, *NovelMsgUpdateReq) (*NovelMsgUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNovelMsg not implemented")
}
func (UnimplementedNovelMsgServer) CreateNovelMsg(context.Context, *NovelMsgCreateReq) (*NovelMsgCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNovelMsg not implemented")
}
func (UnimplementedNovelMsgServer) DeleteNovelMsg(context.Context, *NovelMsgDeleteReq) (*NovelMsgDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNovelMsg not implemented")
}
func (UnimplementedNovelMsgServer) BatchDeleteNovelMsg(context.Context, *NovelMsgBatchDeleteReq) (*NovelMsgDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteNovelMsg not implemented")
}
func (UnimplementedNovelMsgServer) mustEmbedUnimplementedNovelMsgServer() {}

// UnsafeNovelMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelMsgServer will
// result in compilation errors.
type UnsafeNovelMsgServer interface {
	mustEmbedUnimplementedNovelMsgServer()
}

func RegisterNovelMsgServer(s grpc.ServiceRegistrar, srv NovelMsgServer) {
	s.RegisterService(&NovelMsg_ServiceDesc, srv)
}

func _NovelMsg_GetPageNovelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelMsgPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelMsgServer).GetPageNovelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelmsg.v1.NovelMsg/GetPageNovelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelMsgServer).GetPageNovelMsg(ctx, req.(*NovelMsgPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelMsg_GetNovelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelMsgServer).GetNovelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelmsg.v1.NovelMsg/GetNovelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelMsgServer).GetNovelMsg(ctx, req.(*NovelMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelMsg_UpdateNovelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelMsgUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelMsgServer).UpdateNovelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelmsg.v1.NovelMsg/UpdateNovelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelMsgServer).UpdateNovelMsg(ctx, req.(*NovelMsgUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelMsg_CreateNovelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelMsgCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelMsgServer).CreateNovelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelmsg.v1.NovelMsg/CreateNovelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelMsgServer).CreateNovelMsg(ctx, req.(*NovelMsgCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelMsg_DeleteNovelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelMsgDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelMsgServer).DeleteNovelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelmsg.v1.NovelMsg/DeleteNovelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelMsgServer).DeleteNovelMsg(ctx, req.(*NovelMsgDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NovelMsg_BatchDeleteNovelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NovelMsgBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelMsgServer).BatchDeleteNovelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novelmsg.v1.NovelMsg/BatchDeleteNovelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelMsgServer).BatchDeleteNovelMsg(ctx, req.(*NovelMsgBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NovelMsg_ServiceDesc is the grpc.ServiceDesc for NovelMsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NovelMsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "novelmsg.v1.NovelMsg",
	HandlerType: (*NovelMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageNovelMsg",
			Handler:    _NovelMsg_GetPageNovelMsg_Handler,
		},
		{
			MethodName: "GetNovelMsg",
			Handler:    _NovelMsg_GetNovelMsg_Handler,
		},
		{
			MethodName: "UpdateNovelMsg",
			Handler:    _NovelMsg_UpdateNovelMsg_Handler,
		},
		{
			MethodName: "CreateNovelMsg",
			Handler:    _NovelMsg_CreateNovelMsg_Handler,
		},
		{
			MethodName: "DeleteNovelMsg",
			Handler:    _NovelMsg_DeleteNovelMsg_Handler,
		},
		{
			MethodName: "BatchDeleteNovelMsg",
			Handler:    _NovelMsg_BatchDeleteNovelMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/novel/novelmsg/v1/novel_msg.proto",
}
