// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/usermsg"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserMsgCreate is the builder for creating a UserMsg entity.
type UserMsgCreate struct {
	config
	mutation *UserMsgMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (umc *UserMsgCreate) SetUserId(i int64) *UserMsgCreate {
	umc.mutation.SetUserId(i)
	return umc
}

// SetMsgId sets the "msgId" field.
func (umc *UserMsgCreate) SetMsgId(i int64) *UserMsgCreate {
	umc.mutation.SetMsgId(i)
	return umc
}

// SetNillableMsgId sets the "msgId" field if the given value is not nil.
func (umc *UserMsgCreate) SetNillableMsgId(i *int64) *UserMsgCreate {
	if i != nil {
		umc.SetMsgId(*i)
	}
	return umc
}

// SetIsRead sets the "isRead" field.
func (umc *UserMsgCreate) SetIsRead(b bool) *UserMsgCreate {
	umc.mutation.SetIsRead(b)
	return umc
}

// SetNillableIsRead sets the "isRead" field if the given value is not nil.
func (umc *UserMsgCreate) SetNillableIsRead(b *bool) *UserMsgCreate {
	if b != nil {
		umc.SetIsRead(*b)
	}
	return umc
}

// SetCreatedAt sets the "createdAt" field.
func (umc *UserMsgCreate) SetCreatedAt(t time.Time) *UserMsgCreate {
	umc.mutation.SetCreatedAt(t)
	return umc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (umc *UserMsgCreate) SetNillableCreatedAt(t *time.Time) *UserMsgCreate {
	if t != nil {
		umc.SetCreatedAt(*t)
	}
	return umc
}

// SetUpdatedAt sets the "updatedAt" field.
func (umc *UserMsgCreate) SetUpdatedAt(t time.Time) *UserMsgCreate {
	umc.mutation.SetUpdatedAt(t)
	return umc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (umc *UserMsgCreate) SetNillableUpdatedAt(t *time.Time) *UserMsgCreate {
	if t != nil {
		umc.SetUpdatedAt(*t)
	}
	return umc
}

// SetCreateBy sets the "createBy" field.
func (umc *UserMsgCreate) SetCreateBy(i int64) *UserMsgCreate {
	umc.mutation.SetCreateBy(i)
	return umc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (umc *UserMsgCreate) SetNillableCreateBy(i *int64) *UserMsgCreate {
	if i != nil {
		umc.SetCreateBy(*i)
	}
	return umc
}

// SetUpdateBy sets the "updateBy" field.
func (umc *UserMsgCreate) SetUpdateBy(i int64) *UserMsgCreate {
	umc.mutation.SetUpdateBy(i)
	return umc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (umc *UserMsgCreate) SetNillableUpdateBy(i *int64) *UserMsgCreate {
	if i != nil {
		umc.SetUpdateBy(*i)
	}
	return umc
}

// SetTenantId sets the "tenantId" field.
func (umc *UserMsgCreate) SetTenantId(i int64) *UserMsgCreate {
	umc.mutation.SetTenantId(i)
	return umc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (umc *UserMsgCreate) SetNillableTenantId(i *int64) *UserMsgCreate {
	if i != nil {
		umc.SetTenantId(*i)
	}
	return umc
}

// SetUserID sets the "user" edge to the SocialUser entity by ID.
func (umc *UserMsgCreate) SetUserID(id int64) *UserMsgCreate {
	umc.mutation.SetUserID(id)
	return umc
}

// SetUser sets the "user" edge to the SocialUser entity.
func (umc *UserMsgCreate) SetUser(s *SocialUser) *UserMsgCreate {
	return umc.SetUserID(s.ID)
}

// Mutation returns the UserMsgMutation object of the builder.
func (umc *UserMsgCreate) Mutation() *UserMsgMutation {
	return umc.mutation
}

// Save creates the UserMsg in the database.
func (umc *UserMsgCreate) Save(ctx context.Context) (*UserMsg, error) {
	var (
		err  error
		node *UserMsg
	)
	umc.defaults()
	if len(umc.hooks) == 0 {
		if err = umc.check(); err != nil {
			return nil, err
		}
		node, err = umc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMsgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = umc.check(); err != nil {
				return nil, err
			}
			umc.mutation = mutation
			if node, err = umc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(umc.hooks) - 1; i >= 0; i-- {
			if umc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UserMsgCreate) SaveX(ctx context.Context) *UserMsg {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umc *UserMsgCreate) Exec(ctx context.Context) error {
	_, err := umc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umc *UserMsgCreate) ExecX(ctx context.Context) {
	if err := umc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umc *UserMsgCreate) defaults() {
	if _, ok := umc.mutation.CreatedAt(); !ok {
		v := usermsg.DefaultCreatedAt()
		umc.mutation.SetCreatedAt(v)
	}
	if _, ok := umc.mutation.UpdatedAt(); !ok {
		v := usermsg.DefaultUpdatedAt()
		umc.mutation.SetUpdatedAt(v)
	}
	if _, ok := umc.mutation.CreateBy(); !ok {
		v := usermsg.DefaultCreateBy
		umc.mutation.SetCreateBy(v)
	}
	if _, ok := umc.mutation.UpdateBy(); !ok {
		v := usermsg.DefaultUpdateBy
		umc.mutation.SetUpdateBy(v)
	}
	if _, ok := umc.mutation.TenantId(); !ok {
		v := usermsg.DefaultTenantId
		umc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umc *UserMsgCreate) check() error {
	if _, ok := umc.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "UserMsg.userId"`)}
	}
	if _, ok := umc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "UserMsg.createdAt"`)}
	}
	if _, ok := umc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "UserMsg.updatedAt"`)}
	}
	if _, ok := umc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "UserMsg.createBy"`)}
	}
	if _, ok := umc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "UserMsg.updateBy"`)}
	}
	if _, ok := umc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "UserMsg.tenantId"`)}
	}
	if _, ok := umc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserMsg.user"`)}
	}
	return nil
}

func (umc *UserMsgCreate) sqlSave(ctx context.Context) (*UserMsg, error) {
	_node, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (umc *UserMsgCreate) createSpec() (*UserMsg, *sqlgraph.CreateSpec) {
	var (
		_node = &UserMsg{config: umc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usermsg.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: usermsg.FieldID,
			},
		}
	)
	if value, ok := umc.mutation.MsgId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldMsgId,
		})
		_node.MsgId = value
	}
	if value, ok := umc.mutation.IsRead(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: usermsg.FieldIsRead,
		})
		_node.IsRead = value
	}
	if value, ok := umc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermsg.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := umc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermsg.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := umc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := umc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := umc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usermsg.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := umc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermsg.UserTable,
			Columns: []string{usermsg.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserMsgCreateBulk is the builder for creating many UserMsg entities in bulk.
type UserMsgCreateBulk struct {
	config
	builders []*UserMsgCreate
}

// Save creates the UserMsg entities in the database.
func (umcb *UserMsgCreateBulk) Save(ctx context.Context) ([]*UserMsg, error) {
	specs := make([]*sqlgraph.CreateSpec, len(umcb.builders))
	nodes := make([]*UserMsg, len(umcb.builders))
	mutators := make([]Mutator, len(umcb.builders))
	for i := range umcb.builders {
		func(i int, root context.Context) {
			builder := umcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMsgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, umcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, umcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, umcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (umcb *UserMsgCreateBulk) SaveX(ctx context.Context) []*UserMsg {
	v, err := umcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umcb *UserMsgCreateBulk) Exec(ctx context.Context) error {
	_, err := umcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umcb *UserMsgCreateBulk) ExecX(ctx context.Context) {
	if err := umcb.Exec(ctx); err != nil {
		panic(err)
	}
}
