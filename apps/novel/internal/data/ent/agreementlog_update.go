// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/agreementlog"
	"hope/apps/novel/internal/data/ent/payorder"
	"hope/apps/novel/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AgreementLogUpdate is the builder for updating AgreementLog entities.
type AgreementLogUpdate struct {
	config
	hooks    []Hook
	mutation *AgreementLogMutation
}

// Where appends a list predicates to the AgreementLogUpdate builder.
func (alu *AgreementLogUpdate) Where(ps ...predicate.AgreementLog) *AgreementLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetOuterAgreementNo sets the "outerAgreementNo" field.
func (alu *AgreementLogUpdate) SetOuterAgreementNo(s string) *AgreementLogUpdate {
	alu.mutation.SetOuterAgreementNo(s)
	return alu
}

// SetNillableOuterAgreementNo sets the "outerAgreementNo" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableOuterAgreementNo(s *string) *AgreementLogUpdate {
	if s != nil {
		alu.SetOuterAgreementNo(*s)
	}
	return alu
}

// ClearOuterAgreementNo clears the value of the "outerAgreementNo" field.
func (alu *AgreementLogUpdate) ClearOuterAgreementNo() *AgreementLogUpdate {
	alu.mutation.ClearOuterAgreementNo()
	return alu
}

// SetOrderId sets the "orderId" field.
func (alu *AgreementLogUpdate) SetOrderId(s string) *AgreementLogUpdate {
	alu.mutation.SetOrderId(s)
	return alu
}

// SetNillableOrderId sets the "orderId" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableOrderId(s *string) *AgreementLogUpdate {
	if s != nil {
		alu.SetOrderId(*s)
	}
	return alu
}

// ClearOrderId clears the value of the "orderId" field.
func (alu *AgreementLogUpdate) ClearOrderId() *AgreementLogUpdate {
	alu.mutation.ClearOrderId()
	return alu
}

// SetUserId sets the "userId" field.
func (alu *AgreementLogUpdate) SetUserId(i int64) *AgreementLogUpdate {
	alu.mutation.ResetUserId()
	alu.mutation.SetUserId(i)
	return alu
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableUserId(i *int64) *AgreementLogUpdate {
	if i != nil {
		alu.SetUserId(*i)
	}
	return alu
}

// AddUserId adds i to the "userId" field.
func (alu *AgreementLogUpdate) AddUserId(i int64) *AgreementLogUpdate {
	alu.mutation.AddUserId(i)
	return alu
}

// ClearUserId clears the value of the "userId" field.
func (alu *AgreementLogUpdate) ClearUserId() *AgreementLogUpdate {
	alu.mutation.ClearUserId()
	return alu
}

// SetChId sets the "chId" field.
func (alu *AgreementLogUpdate) SetChId(i int64) *AgreementLogUpdate {
	alu.mutation.ResetChId()
	alu.mutation.SetChId(i)
	return alu
}

// SetNillableChId sets the "chId" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableChId(i *int64) *AgreementLogUpdate {
	if i != nil {
		alu.SetChId(*i)
	}
	return alu
}

// AddChId adds i to the "chId" field.
func (alu *AgreementLogUpdate) AddChId(i int64) *AgreementLogUpdate {
	alu.mutation.AddChId(i)
	return alu
}

// ClearChId clears the value of the "chId" field.
func (alu *AgreementLogUpdate) ClearChId() *AgreementLogUpdate {
	alu.mutation.ClearChId()
	return alu
}

// SetUserName sets the "userName" field.
func (alu *AgreementLogUpdate) SetUserName(s string) *AgreementLogUpdate {
	alu.mutation.SetUserName(s)
	return alu
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableUserName(s *string) *AgreementLogUpdate {
	if s != nil {
		alu.SetUserName(*s)
	}
	return alu
}

// ClearUserName clears the value of the "userName" field.
func (alu *AgreementLogUpdate) ClearUserName() *AgreementLogUpdate {
	alu.mutation.ClearUserName()
	return alu
}

// SetPaymentName sets the "paymentName" field.
func (alu *AgreementLogUpdate) SetPaymentName(s string) *AgreementLogUpdate {
	alu.mutation.SetPaymentName(s)
	return alu
}

// SetNillablePaymentName sets the "paymentName" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillablePaymentName(s *string) *AgreementLogUpdate {
	if s != nil {
		alu.SetPaymentName(*s)
	}
	return alu
}

// ClearPaymentName clears the value of the "paymentName" field.
func (alu *AgreementLogUpdate) ClearPaymentName() *AgreementLogUpdate {
	alu.mutation.ClearPaymentName()
	return alu
}

// SetPaymentId sets the "paymentId" field.
func (alu *AgreementLogUpdate) SetPaymentId(i int64) *AgreementLogUpdate {
	alu.mutation.ResetPaymentId()
	alu.mutation.SetPaymentId(i)
	return alu
}

// SetNillablePaymentId sets the "paymentId" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillablePaymentId(i *int64) *AgreementLogUpdate {
	if i != nil {
		alu.SetPaymentId(*i)
	}
	return alu
}

// AddPaymentId adds i to the "paymentId" field.
func (alu *AgreementLogUpdate) AddPaymentId(i int64) *AgreementLogUpdate {
	alu.mutation.AddPaymentId(i)
	return alu
}

// ClearPaymentId clears the value of the "paymentId" field.
func (alu *AgreementLogUpdate) ClearPaymentId() *AgreementLogUpdate {
	alu.mutation.ClearPaymentId()
	return alu
}

// SetState sets the "state" field.
func (alu *AgreementLogUpdate) SetState(i int32) *AgreementLogUpdate {
	alu.mutation.ResetState()
	alu.mutation.SetState(i)
	return alu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableState(i *int32) *AgreementLogUpdate {
	if i != nil {
		alu.SetState(*i)
	}
	return alu
}

// AddState adds i to the "state" field.
func (alu *AgreementLogUpdate) AddState(i int32) *AgreementLogUpdate {
	alu.mutation.AddState(i)
	return alu
}

// ClearState clears the value of the "state" field.
func (alu *AgreementLogUpdate) ClearState() *AgreementLogUpdate {
	alu.mutation.ClearState()
	return alu
}

// SetPayment sets the "payment" field.
func (alu *AgreementLogUpdate) SetPayment(i int64) *AgreementLogUpdate {
	alu.mutation.ResetPayment()
	alu.mutation.SetPayment(i)
	return alu
}

// SetNillablePayment sets the "payment" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillablePayment(i *int64) *AgreementLogUpdate {
	if i != nil {
		alu.SetPayment(*i)
	}
	return alu
}

// AddPayment adds i to the "payment" field.
func (alu *AgreementLogUpdate) AddPayment(i int64) *AgreementLogUpdate {
	alu.mutation.AddPayment(i)
	return alu
}

// ClearPayment clears the value of the "payment" field.
func (alu *AgreementLogUpdate) ClearPayment() *AgreementLogUpdate {
	alu.mutation.ClearPayment()
	return alu
}

// SetAgreementType sets the "agreementType" field.
func (alu *AgreementLogUpdate) SetAgreementType(at agreementlog.AgreementType) *AgreementLogUpdate {
	alu.mutation.SetAgreementType(at)
	return alu
}

// SetNillableAgreementType sets the "agreementType" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableAgreementType(at *agreementlog.AgreementType) *AgreementLogUpdate {
	if at != nil {
		alu.SetAgreementType(*at)
	}
	return alu
}

// ClearAgreementType clears the value of the "agreementType" field.
func (alu *AgreementLogUpdate) ClearAgreementType() *AgreementLogUpdate {
	alu.mutation.ClearAgreementType()
	return alu
}

// SetVipType sets the "vipType" field.
func (alu *AgreementLogUpdate) SetVipType(i int64) *AgreementLogUpdate {
	alu.mutation.ResetVipType()
	alu.mutation.SetVipType(i)
	return alu
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableVipType(i *int64) *AgreementLogUpdate {
	if i != nil {
		alu.SetVipType(*i)
	}
	return alu
}

// AddVipType adds i to the "vipType" field.
func (alu *AgreementLogUpdate) AddVipType(i int64) *AgreementLogUpdate {
	alu.mutation.AddVipType(i)
	return alu
}

// ClearVipType clears the value of the "vipType" field.
func (alu *AgreementLogUpdate) ClearVipType() *AgreementLogUpdate {
	alu.mutation.ClearVipType()
	return alu
}

// SetTimes sets the "times" field.
func (alu *AgreementLogUpdate) SetTimes(i int64) *AgreementLogUpdate {
	alu.mutation.ResetTimes()
	alu.mutation.SetTimes(i)
	return alu
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableTimes(i *int64) *AgreementLogUpdate {
	if i != nil {
		alu.SetTimes(*i)
	}
	return alu
}

// AddTimes adds i to the "times" field.
func (alu *AgreementLogUpdate) AddTimes(i int64) *AgreementLogUpdate {
	alu.mutation.AddTimes(i)
	return alu
}

// ClearTimes clears the value of the "times" field.
func (alu *AgreementLogUpdate) ClearTimes() *AgreementLogUpdate {
	alu.mutation.ClearTimes()
	return alu
}

// SetCycleDays sets the "cycleDays" field.
func (alu *AgreementLogUpdate) SetCycleDays(i int32) *AgreementLogUpdate {
	alu.mutation.ResetCycleDays()
	alu.mutation.SetCycleDays(i)
	return alu
}

// SetNillableCycleDays sets the "cycleDays" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableCycleDays(i *int32) *AgreementLogUpdate {
	if i != nil {
		alu.SetCycleDays(*i)
	}
	return alu
}

// AddCycleDays adds i to the "cycleDays" field.
func (alu *AgreementLogUpdate) AddCycleDays(i int32) *AgreementLogUpdate {
	alu.mutation.AddCycleDays(i)
	return alu
}

// ClearCycleDays clears the value of the "cycleDays" field.
func (alu *AgreementLogUpdate) ClearCycleDays() *AgreementLogUpdate {
	alu.mutation.ClearCycleDays()
	return alu
}

// SetNextExecTime sets the "nextExecTime" field.
func (alu *AgreementLogUpdate) SetNextExecTime(t time.Time) *AgreementLogUpdate {
	alu.mutation.SetNextExecTime(t)
	return alu
}

// SetNillableNextExecTime sets the "nextExecTime" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableNextExecTime(t *time.Time) *AgreementLogUpdate {
	if t != nil {
		alu.SetNextExecTime(*t)
	}
	return alu
}

// ClearNextExecTime clears the value of the "nextExecTime" field.
func (alu *AgreementLogUpdate) ClearNextExecTime() *AgreementLogUpdate {
	alu.mutation.ClearNextExecTime()
	return alu
}

// SetRemark sets the "remark" field.
func (alu *AgreementLogUpdate) SetRemark(s string) *AgreementLogUpdate {
	alu.mutation.SetRemark(s)
	return alu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableRemark(s *string) *AgreementLogUpdate {
	if s != nil {
		alu.SetRemark(*s)
	}
	return alu
}

// ClearRemark clears the value of the "remark" field.
func (alu *AgreementLogUpdate) ClearRemark() *AgreementLogUpdate {
	alu.mutation.ClearRemark()
	return alu
}

// SetUpdatedAt sets the "updatedAt" field.
func (alu *AgreementLogUpdate) SetUpdatedAt(t time.Time) *AgreementLogUpdate {
	alu.mutation.SetUpdatedAt(t)
	return alu
}

// SetCreateBy sets the "createBy" field.
func (alu *AgreementLogUpdate) SetCreateBy(i int64) *AgreementLogUpdate {
	alu.mutation.ResetCreateBy()
	alu.mutation.SetCreateBy(i)
	return alu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableCreateBy(i *int64) *AgreementLogUpdate {
	if i != nil {
		alu.SetCreateBy(*i)
	}
	return alu
}

// AddCreateBy adds i to the "createBy" field.
func (alu *AgreementLogUpdate) AddCreateBy(i int64) *AgreementLogUpdate {
	alu.mutation.AddCreateBy(i)
	return alu
}

// SetUpdateBy sets the "updateBy" field.
func (alu *AgreementLogUpdate) SetUpdateBy(i int64) *AgreementLogUpdate {
	alu.mutation.ResetUpdateBy()
	alu.mutation.SetUpdateBy(i)
	return alu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableUpdateBy(i *int64) *AgreementLogUpdate {
	if i != nil {
		alu.SetUpdateBy(*i)
	}
	return alu
}

// AddUpdateBy adds i to the "updateBy" field.
func (alu *AgreementLogUpdate) AddUpdateBy(i int64) *AgreementLogUpdate {
	alu.mutation.AddUpdateBy(i)
	return alu
}

// SetTenantId sets the "tenantId" field.
func (alu *AgreementLogUpdate) SetTenantId(i int64) *AgreementLogUpdate {
	alu.mutation.ResetTenantId()
	alu.mutation.SetTenantId(i)
	return alu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (alu *AgreementLogUpdate) SetNillableTenantId(i *int64) *AgreementLogUpdate {
	if i != nil {
		alu.SetTenantId(*i)
	}
	return alu
}

// AddTenantId adds i to the "tenantId" field.
func (alu *AgreementLogUpdate) AddTenantId(i int64) *AgreementLogUpdate {
	alu.mutation.AddTenantId(i)
	return alu
}

// AddOrderIDs adds the "orders" edge to the PayOrder entity by IDs.
func (alu *AgreementLogUpdate) AddOrderIDs(ids ...int64) *AgreementLogUpdate {
	alu.mutation.AddOrderIDs(ids...)
	return alu
}

// AddOrders adds the "orders" edges to the PayOrder entity.
func (alu *AgreementLogUpdate) AddOrders(p ...*PayOrder) *AgreementLogUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return alu.AddOrderIDs(ids...)
}

// Mutation returns the AgreementLogMutation object of the builder.
func (alu *AgreementLogUpdate) Mutation() *AgreementLogMutation {
	return alu.mutation
}

// ClearOrders clears all "orders" edges to the PayOrder entity.
func (alu *AgreementLogUpdate) ClearOrders() *AgreementLogUpdate {
	alu.mutation.ClearOrders()
	return alu
}

// RemoveOrderIDs removes the "orders" edge to PayOrder entities by IDs.
func (alu *AgreementLogUpdate) RemoveOrderIDs(ids ...int64) *AgreementLogUpdate {
	alu.mutation.RemoveOrderIDs(ids...)
	return alu
}

// RemoveOrders removes "orders" edges to PayOrder entities.
func (alu *AgreementLogUpdate) RemoveOrders(p ...*PayOrder) *AgreementLogUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return alu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AgreementLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	alu.defaults()
	if len(alu.hooks) == 0 {
		if err = alu.check(); err != nil {
			return 0, err
		}
		affected, err = alu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgreementLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = alu.check(); err != nil {
				return 0, err
			}
			alu.mutation = mutation
			affected, err = alu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(alu.hooks) - 1; i >= 0; i-- {
			if alu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = alu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, alu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AgreementLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AgreementLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AgreementLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alu *AgreementLogUpdate) defaults() {
	if _, ok := alu.mutation.UpdatedAt(); !ok {
		v := agreementlog.UpdateDefaultUpdatedAt()
		alu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *AgreementLogUpdate) check() error {
	if v, ok := alu.mutation.AgreementType(); ok {
		if err := agreementlog.AgreementTypeValidator(v); err != nil {
			return &ValidationError{Name: "agreementType", err: fmt.Errorf("ent: validator failed for field \"agreementType\": %w", err)}
		}
	}
	return nil
}

func (alu *AgreementLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agreementlog.Table,
			Columns: agreementlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: agreementlog.FieldID,
			},
		},
	}
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.OuterAgreementNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldOuterAgreementNo,
		})
	}
	if alu.mutation.OuterAgreementNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldOuterAgreementNo,
		})
	}
	if value, ok := alu.mutation.OrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldOrderId,
		})
	}
	if alu.mutation.OrderIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldOrderId,
		})
	}
	if value, ok := alu.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldUserId,
		})
	}
	if value, ok := alu.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldUserId,
		})
	}
	if alu.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldUserId,
		})
	}
	if value, ok := alu.mutation.ChId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldChId,
		})
	}
	if value, ok := alu.mutation.AddedChId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldChId,
		})
	}
	if alu.mutation.ChIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldChId,
		})
	}
	if value, ok := alu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldUserName,
		})
	}
	if alu.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldUserName,
		})
	}
	if value, ok := alu.mutation.PaymentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldPaymentName,
		})
	}
	if alu.mutation.PaymentNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldPaymentName,
		})
	}
	if value, ok := alu.mutation.PaymentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldPaymentId,
		})
	}
	if value, ok := alu.mutation.AddedPaymentId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldPaymentId,
		})
	}
	if alu.mutation.PaymentIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldPaymentId,
		})
	}
	if value, ok := alu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agreementlog.FieldState,
		})
	}
	if value, ok := alu.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agreementlog.FieldState,
		})
	}
	if alu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: agreementlog.FieldState,
		})
	}
	if value, ok := alu.mutation.Payment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldPayment,
		})
	}
	if value, ok := alu.mutation.AddedPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldPayment,
		})
	}
	if alu.mutation.PaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldPayment,
		})
	}
	if value, ok := alu.mutation.AgreementType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: agreementlog.FieldAgreementType,
		})
	}
	if alu.mutation.AgreementTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: agreementlog.FieldAgreementType,
		})
	}
	if value, ok := alu.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldVipType,
		})
	}
	if value, ok := alu.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldVipType,
		})
	}
	if alu.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldVipType,
		})
	}
	if value, ok := alu.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldTimes,
		})
	}
	if value, ok := alu.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldTimes,
		})
	}
	if alu.mutation.TimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldTimes,
		})
	}
	if value, ok := alu.mutation.CycleDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agreementlog.FieldCycleDays,
		})
	}
	if value, ok := alu.mutation.AddedCycleDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agreementlog.FieldCycleDays,
		})
	}
	if alu.mutation.CycleDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: agreementlog.FieldCycleDays,
		})
	}
	if value, ok := alu.mutation.NextExecTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agreementlog.FieldNextExecTime,
		})
	}
	if alu.mutation.NextExecTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: agreementlog.FieldNextExecTime,
		})
	}
	if value, ok := alu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldRemark,
		})
	}
	if alu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldRemark,
		})
	}
	if value, ok := alu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agreementlog.FieldUpdatedAt,
		})
	}
	if value, ok := alu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldCreateBy,
		})
	}
	if value, ok := alu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldCreateBy,
		})
	}
	if value, ok := alu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldUpdateBy,
		})
	}
	if value, ok := alu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldUpdateBy,
		})
	}
	if value, ok := alu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldTenantId,
		})
	}
	if value, ok := alu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldTenantId,
		})
	}
	if alu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agreementlog.OrdersTable,
			Columns: []string{agreementlog.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !alu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agreementlog.OrdersTable,
			Columns: []string{agreementlog.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agreementlog.OrdersTable,
			Columns: []string{agreementlog.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agreementlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AgreementLogUpdateOne is the builder for updating a single AgreementLog entity.
type AgreementLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgreementLogMutation
}

// SetOuterAgreementNo sets the "outerAgreementNo" field.
func (aluo *AgreementLogUpdateOne) SetOuterAgreementNo(s string) *AgreementLogUpdateOne {
	aluo.mutation.SetOuterAgreementNo(s)
	return aluo
}

// SetNillableOuterAgreementNo sets the "outerAgreementNo" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableOuterAgreementNo(s *string) *AgreementLogUpdateOne {
	if s != nil {
		aluo.SetOuterAgreementNo(*s)
	}
	return aluo
}

// ClearOuterAgreementNo clears the value of the "outerAgreementNo" field.
func (aluo *AgreementLogUpdateOne) ClearOuterAgreementNo() *AgreementLogUpdateOne {
	aluo.mutation.ClearOuterAgreementNo()
	return aluo
}

// SetOrderId sets the "orderId" field.
func (aluo *AgreementLogUpdateOne) SetOrderId(s string) *AgreementLogUpdateOne {
	aluo.mutation.SetOrderId(s)
	return aluo
}

// SetNillableOrderId sets the "orderId" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableOrderId(s *string) *AgreementLogUpdateOne {
	if s != nil {
		aluo.SetOrderId(*s)
	}
	return aluo
}

// ClearOrderId clears the value of the "orderId" field.
func (aluo *AgreementLogUpdateOne) ClearOrderId() *AgreementLogUpdateOne {
	aluo.mutation.ClearOrderId()
	return aluo
}

// SetUserId sets the "userId" field.
func (aluo *AgreementLogUpdateOne) SetUserId(i int64) *AgreementLogUpdateOne {
	aluo.mutation.ResetUserId()
	aluo.mutation.SetUserId(i)
	return aluo
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableUserId(i *int64) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetUserId(*i)
	}
	return aluo
}

// AddUserId adds i to the "userId" field.
func (aluo *AgreementLogUpdateOne) AddUserId(i int64) *AgreementLogUpdateOne {
	aluo.mutation.AddUserId(i)
	return aluo
}

// ClearUserId clears the value of the "userId" field.
func (aluo *AgreementLogUpdateOne) ClearUserId() *AgreementLogUpdateOne {
	aluo.mutation.ClearUserId()
	return aluo
}

// SetChId sets the "chId" field.
func (aluo *AgreementLogUpdateOne) SetChId(i int64) *AgreementLogUpdateOne {
	aluo.mutation.ResetChId()
	aluo.mutation.SetChId(i)
	return aluo
}

// SetNillableChId sets the "chId" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableChId(i *int64) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetChId(*i)
	}
	return aluo
}

// AddChId adds i to the "chId" field.
func (aluo *AgreementLogUpdateOne) AddChId(i int64) *AgreementLogUpdateOne {
	aluo.mutation.AddChId(i)
	return aluo
}

// ClearChId clears the value of the "chId" field.
func (aluo *AgreementLogUpdateOne) ClearChId() *AgreementLogUpdateOne {
	aluo.mutation.ClearChId()
	return aluo
}

// SetUserName sets the "userName" field.
func (aluo *AgreementLogUpdateOne) SetUserName(s string) *AgreementLogUpdateOne {
	aluo.mutation.SetUserName(s)
	return aluo
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableUserName(s *string) *AgreementLogUpdateOne {
	if s != nil {
		aluo.SetUserName(*s)
	}
	return aluo
}

// ClearUserName clears the value of the "userName" field.
func (aluo *AgreementLogUpdateOne) ClearUserName() *AgreementLogUpdateOne {
	aluo.mutation.ClearUserName()
	return aluo
}

// SetPaymentName sets the "paymentName" field.
func (aluo *AgreementLogUpdateOne) SetPaymentName(s string) *AgreementLogUpdateOne {
	aluo.mutation.SetPaymentName(s)
	return aluo
}

// SetNillablePaymentName sets the "paymentName" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillablePaymentName(s *string) *AgreementLogUpdateOne {
	if s != nil {
		aluo.SetPaymentName(*s)
	}
	return aluo
}

// ClearPaymentName clears the value of the "paymentName" field.
func (aluo *AgreementLogUpdateOne) ClearPaymentName() *AgreementLogUpdateOne {
	aluo.mutation.ClearPaymentName()
	return aluo
}

// SetPaymentId sets the "paymentId" field.
func (aluo *AgreementLogUpdateOne) SetPaymentId(i int64) *AgreementLogUpdateOne {
	aluo.mutation.ResetPaymentId()
	aluo.mutation.SetPaymentId(i)
	return aluo
}

// SetNillablePaymentId sets the "paymentId" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillablePaymentId(i *int64) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetPaymentId(*i)
	}
	return aluo
}

// AddPaymentId adds i to the "paymentId" field.
func (aluo *AgreementLogUpdateOne) AddPaymentId(i int64) *AgreementLogUpdateOne {
	aluo.mutation.AddPaymentId(i)
	return aluo
}

// ClearPaymentId clears the value of the "paymentId" field.
func (aluo *AgreementLogUpdateOne) ClearPaymentId() *AgreementLogUpdateOne {
	aluo.mutation.ClearPaymentId()
	return aluo
}

// SetState sets the "state" field.
func (aluo *AgreementLogUpdateOne) SetState(i int32) *AgreementLogUpdateOne {
	aluo.mutation.ResetState()
	aluo.mutation.SetState(i)
	return aluo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableState(i *int32) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetState(*i)
	}
	return aluo
}

// AddState adds i to the "state" field.
func (aluo *AgreementLogUpdateOne) AddState(i int32) *AgreementLogUpdateOne {
	aluo.mutation.AddState(i)
	return aluo
}

// ClearState clears the value of the "state" field.
func (aluo *AgreementLogUpdateOne) ClearState() *AgreementLogUpdateOne {
	aluo.mutation.ClearState()
	return aluo
}

// SetPayment sets the "payment" field.
func (aluo *AgreementLogUpdateOne) SetPayment(i int64) *AgreementLogUpdateOne {
	aluo.mutation.ResetPayment()
	aluo.mutation.SetPayment(i)
	return aluo
}

// SetNillablePayment sets the "payment" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillablePayment(i *int64) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetPayment(*i)
	}
	return aluo
}

// AddPayment adds i to the "payment" field.
func (aluo *AgreementLogUpdateOne) AddPayment(i int64) *AgreementLogUpdateOne {
	aluo.mutation.AddPayment(i)
	return aluo
}

// ClearPayment clears the value of the "payment" field.
func (aluo *AgreementLogUpdateOne) ClearPayment() *AgreementLogUpdateOne {
	aluo.mutation.ClearPayment()
	return aluo
}

// SetAgreementType sets the "agreementType" field.
func (aluo *AgreementLogUpdateOne) SetAgreementType(at agreementlog.AgreementType) *AgreementLogUpdateOne {
	aluo.mutation.SetAgreementType(at)
	return aluo
}

// SetNillableAgreementType sets the "agreementType" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableAgreementType(at *agreementlog.AgreementType) *AgreementLogUpdateOne {
	if at != nil {
		aluo.SetAgreementType(*at)
	}
	return aluo
}

// ClearAgreementType clears the value of the "agreementType" field.
func (aluo *AgreementLogUpdateOne) ClearAgreementType() *AgreementLogUpdateOne {
	aluo.mutation.ClearAgreementType()
	return aluo
}

// SetVipType sets the "vipType" field.
func (aluo *AgreementLogUpdateOne) SetVipType(i int64) *AgreementLogUpdateOne {
	aluo.mutation.ResetVipType()
	aluo.mutation.SetVipType(i)
	return aluo
}

// SetNillableVipType sets the "vipType" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableVipType(i *int64) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetVipType(*i)
	}
	return aluo
}

// AddVipType adds i to the "vipType" field.
func (aluo *AgreementLogUpdateOne) AddVipType(i int64) *AgreementLogUpdateOne {
	aluo.mutation.AddVipType(i)
	return aluo
}

// ClearVipType clears the value of the "vipType" field.
func (aluo *AgreementLogUpdateOne) ClearVipType() *AgreementLogUpdateOne {
	aluo.mutation.ClearVipType()
	return aluo
}

// SetTimes sets the "times" field.
func (aluo *AgreementLogUpdateOne) SetTimes(i int64) *AgreementLogUpdateOne {
	aluo.mutation.ResetTimes()
	aluo.mutation.SetTimes(i)
	return aluo
}

// SetNillableTimes sets the "times" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableTimes(i *int64) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetTimes(*i)
	}
	return aluo
}

// AddTimes adds i to the "times" field.
func (aluo *AgreementLogUpdateOne) AddTimes(i int64) *AgreementLogUpdateOne {
	aluo.mutation.AddTimes(i)
	return aluo
}

// ClearTimes clears the value of the "times" field.
func (aluo *AgreementLogUpdateOne) ClearTimes() *AgreementLogUpdateOne {
	aluo.mutation.ClearTimes()
	return aluo
}

// SetCycleDays sets the "cycleDays" field.
func (aluo *AgreementLogUpdateOne) SetCycleDays(i int32) *AgreementLogUpdateOne {
	aluo.mutation.ResetCycleDays()
	aluo.mutation.SetCycleDays(i)
	return aluo
}

// SetNillableCycleDays sets the "cycleDays" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableCycleDays(i *int32) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetCycleDays(*i)
	}
	return aluo
}

// AddCycleDays adds i to the "cycleDays" field.
func (aluo *AgreementLogUpdateOne) AddCycleDays(i int32) *AgreementLogUpdateOne {
	aluo.mutation.AddCycleDays(i)
	return aluo
}

// ClearCycleDays clears the value of the "cycleDays" field.
func (aluo *AgreementLogUpdateOne) ClearCycleDays() *AgreementLogUpdateOne {
	aluo.mutation.ClearCycleDays()
	return aluo
}

// SetNextExecTime sets the "nextExecTime" field.
func (aluo *AgreementLogUpdateOne) SetNextExecTime(t time.Time) *AgreementLogUpdateOne {
	aluo.mutation.SetNextExecTime(t)
	return aluo
}

// SetNillableNextExecTime sets the "nextExecTime" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableNextExecTime(t *time.Time) *AgreementLogUpdateOne {
	if t != nil {
		aluo.SetNextExecTime(*t)
	}
	return aluo
}

// ClearNextExecTime clears the value of the "nextExecTime" field.
func (aluo *AgreementLogUpdateOne) ClearNextExecTime() *AgreementLogUpdateOne {
	aluo.mutation.ClearNextExecTime()
	return aluo
}

// SetRemark sets the "remark" field.
func (aluo *AgreementLogUpdateOne) SetRemark(s string) *AgreementLogUpdateOne {
	aluo.mutation.SetRemark(s)
	return aluo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableRemark(s *string) *AgreementLogUpdateOne {
	if s != nil {
		aluo.SetRemark(*s)
	}
	return aluo
}

// ClearRemark clears the value of the "remark" field.
func (aluo *AgreementLogUpdateOne) ClearRemark() *AgreementLogUpdateOne {
	aluo.mutation.ClearRemark()
	return aluo
}

// SetUpdatedAt sets the "updatedAt" field.
func (aluo *AgreementLogUpdateOne) SetUpdatedAt(t time.Time) *AgreementLogUpdateOne {
	aluo.mutation.SetUpdatedAt(t)
	return aluo
}

// SetCreateBy sets the "createBy" field.
func (aluo *AgreementLogUpdateOne) SetCreateBy(i int64) *AgreementLogUpdateOne {
	aluo.mutation.ResetCreateBy()
	aluo.mutation.SetCreateBy(i)
	return aluo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableCreateBy(i *int64) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetCreateBy(*i)
	}
	return aluo
}

// AddCreateBy adds i to the "createBy" field.
func (aluo *AgreementLogUpdateOne) AddCreateBy(i int64) *AgreementLogUpdateOne {
	aluo.mutation.AddCreateBy(i)
	return aluo
}

// SetUpdateBy sets the "updateBy" field.
func (aluo *AgreementLogUpdateOne) SetUpdateBy(i int64) *AgreementLogUpdateOne {
	aluo.mutation.ResetUpdateBy()
	aluo.mutation.SetUpdateBy(i)
	return aluo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableUpdateBy(i *int64) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetUpdateBy(*i)
	}
	return aluo
}

// AddUpdateBy adds i to the "updateBy" field.
func (aluo *AgreementLogUpdateOne) AddUpdateBy(i int64) *AgreementLogUpdateOne {
	aluo.mutation.AddUpdateBy(i)
	return aluo
}

// SetTenantId sets the "tenantId" field.
func (aluo *AgreementLogUpdateOne) SetTenantId(i int64) *AgreementLogUpdateOne {
	aluo.mutation.ResetTenantId()
	aluo.mutation.SetTenantId(i)
	return aluo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (aluo *AgreementLogUpdateOne) SetNillableTenantId(i *int64) *AgreementLogUpdateOne {
	if i != nil {
		aluo.SetTenantId(*i)
	}
	return aluo
}

// AddTenantId adds i to the "tenantId" field.
func (aluo *AgreementLogUpdateOne) AddTenantId(i int64) *AgreementLogUpdateOne {
	aluo.mutation.AddTenantId(i)
	return aluo
}

// AddOrderIDs adds the "orders" edge to the PayOrder entity by IDs.
func (aluo *AgreementLogUpdateOne) AddOrderIDs(ids ...int64) *AgreementLogUpdateOne {
	aluo.mutation.AddOrderIDs(ids...)
	return aluo
}

// AddOrders adds the "orders" edges to the PayOrder entity.
func (aluo *AgreementLogUpdateOne) AddOrders(p ...*PayOrder) *AgreementLogUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return aluo.AddOrderIDs(ids...)
}

// Mutation returns the AgreementLogMutation object of the builder.
func (aluo *AgreementLogUpdateOne) Mutation() *AgreementLogMutation {
	return aluo.mutation
}

// ClearOrders clears all "orders" edges to the PayOrder entity.
func (aluo *AgreementLogUpdateOne) ClearOrders() *AgreementLogUpdateOne {
	aluo.mutation.ClearOrders()
	return aluo
}

// RemoveOrderIDs removes the "orders" edge to PayOrder entities by IDs.
func (aluo *AgreementLogUpdateOne) RemoveOrderIDs(ids ...int64) *AgreementLogUpdateOne {
	aluo.mutation.RemoveOrderIDs(ids...)
	return aluo
}

// RemoveOrders removes "orders" edges to PayOrder entities.
func (aluo *AgreementLogUpdateOne) RemoveOrders(p ...*PayOrder) *AgreementLogUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return aluo.RemoveOrderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AgreementLogUpdateOne) Select(field string, fields ...string) *AgreementLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AgreementLog entity.
func (aluo *AgreementLogUpdateOne) Save(ctx context.Context) (*AgreementLog, error) {
	var (
		err  error
		node *AgreementLog
	)
	aluo.defaults()
	if len(aluo.hooks) == 0 {
		if err = aluo.check(); err != nil {
			return nil, err
		}
		node, err = aluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AgreementLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aluo.check(); err != nil {
				return nil, err
			}
			aluo.mutation = mutation
			node, err = aluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aluo.hooks) - 1; i >= 0; i-- {
			if aluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AgreementLogUpdateOne) SaveX(ctx context.Context) *AgreementLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AgreementLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AgreementLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aluo *AgreementLogUpdateOne) defaults() {
	if _, ok := aluo.mutation.UpdatedAt(); !ok {
		v := agreementlog.UpdateDefaultUpdatedAt()
		aluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *AgreementLogUpdateOne) check() error {
	if v, ok := aluo.mutation.AgreementType(); ok {
		if err := agreementlog.AgreementTypeValidator(v); err != nil {
			return &ValidationError{Name: "agreementType", err: fmt.Errorf("ent: validator failed for field \"agreementType\": %w", err)}
		}
	}
	return nil
}

func (aluo *AgreementLogUpdateOne) sqlSave(ctx context.Context) (_node *AgreementLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   agreementlog.Table,
			Columns: agreementlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: agreementlog.FieldID,
			},
		},
	}
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AgreementLog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agreementlog.FieldID)
		for _, f := range fields {
			if !agreementlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agreementlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.OuterAgreementNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldOuterAgreementNo,
		})
	}
	if aluo.mutation.OuterAgreementNoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldOuterAgreementNo,
		})
	}
	if value, ok := aluo.mutation.OrderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldOrderId,
		})
	}
	if aluo.mutation.OrderIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldOrderId,
		})
	}
	if value, ok := aluo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldUserId,
		})
	}
	if value, ok := aluo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldUserId,
		})
	}
	if aluo.mutation.UserIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldUserId,
		})
	}
	if value, ok := aluo.mutation.ChId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldChId,
		})
	}
	if value, ok := aluo.mutation.AddedChId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldChId,
		})
	}
	if aluo.mutation.ChIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldChId,
		})
	}
	if value, ok := aluo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldUserName,
		})
	}
	if aluo.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldUserName,
		})
	}
	if value, ok := aluo.mutation.PaymentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldPaymentName,
		})
	}
	if aluo.mutation.PaymentNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldPaymentName,
		})
	}
	if value, ok := aluo.mutation.PaymentId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldPaymentId,
		})
	}
	if value, ok := aluo.mutation.AddedPaymentId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldPaymentId,
		})
	}
	if aluo.mutation.PaymentIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldPaymentId,
		})
	}
	if value, ok := aluo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agreementlog.FieldState,
		})
	}
	if value, ok := aluo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agreementlog.FieldState,
		})
	}
	if aluo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: agreementlog.FieldState,
		})
	}
	if value, ok := aluo.mutation.Payment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldPayment,
		})
	}
	if value, ok := aluo.mutation.AddedPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldPayment,
		})
	}
	if aluo.mutation.PaymentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldPayment,
		})
	}
	if value, ok := aluo.mutation.AgreementType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: agreementlog.FieldAgreementType,
		})
	}
	if aluo.mutation.AgreementTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: agreementlog.FieldAgreementType,
		})
	}
	if value, ok := aluo.mutation.VipType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldVipType,
		})
	}
	if value, ok := aluo.mutation.AddedVipType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldVipType,
		})
	}
	if aluo.mutation.VipTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldVipType,
		})
	}
	if value, ok := aluo.mutation.Times(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldTimes,
		})
	}
	if value, ok := aluo.mutation.AddedTimes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldTimes,
		})
	}
	if aluo.mutation.TimesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: agreementlog.FieldTimes,
		})
	}
	if value, ok := aluo.mutation.CycleDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agreementlog.FieldCycleDays,
		})
	}
	if value, ok := aluo.mutation.AddedCycleDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: agreementlog.FieldCycleDays,
		})
	}
	if aluo.mutation.CycleDaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: agreementlog.FieldCycleDays,
		})
	}
	if value, ok := aluo.mutation.NextExecTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agreementlog.FieldNextExecTime,
		})
	}
	if aluo.mutation.NextExecTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: agreementlog.FieldNextExecTime,
		})
	}
	if value, ok := aluo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: agreementlog.FieldRemark,
		})
	}
	if aluo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: agreementlog.FieldRemark,
		})
	}
	if value, ok := aluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: agreementlog.FieldUpdatedAt,
		})
	}
	if value, ok := aluo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldCreateBy,
		})
	}
	if value, ok := aluo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldCreateBy,
		})
	}
	if value, ok := aluo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldUpdateBy,
		})
	}
	if value, ok := aluo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldUpdateBy,
		})
	}
	if value, ok := aluo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldTenantId,
		})
	}
	if value, ok := aluo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: agreementlog.FieldTenantId,
		})
	}
	if aluo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agreementlog.OrdersTable,
			Columns: []string{agreementlog.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !aluo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agreementlog.OrdersTable,
			Columns: []string{agreementlog.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agreementlog.OrdersTable,
			Columns: []string{agreementlog.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AgreementLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agreementlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
