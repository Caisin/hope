// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/sysuser/v1/sys_user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysUserClient is the client API for SysUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysUserClient interface {
	// 分页查询SysUser
	GetPageSysUser(ctx context.Context, in *SysUserPageReq, opts ...grpc.CallOption) (*SysUserPageReply, error)
	// 获取SysUser
	GetSysUser(ctx context.Context, in *SysUserReq, opts ...grpc.CallOption) (*SysUserReply, error)
	// 更新SysUser
	UpdateSysUser(ctx context.Context, in *SysUserUpdateReq, opts ...grpc.CallOption) (*SysUserUpdateReply, error)
	// 创建SysUser
	CreateSysUser(ctx context.Context, in *SysUserCreateReq, opts ...grpc.CallOption) (*SysUserCreateReply, error)
	// 删除SysUser
	DeleteSysUser(ctx context.Context, in *SysUserDeleteReq, opts ...grpc.CallOption) (*SysUserDeleteReply, error)
	// 批量删除SysUser
	BatchDeleteSysUser(ctx context.Context, in *SysUserBatchDeleteReq, opts ...grpc.CallOption) (*SysUserDeleteReply, error)
}

type sysUserClient struct {
	cc grpc.ClientConnInterface
}

func NewSysUserClient(cc grpc.ClientConnInterface) SysUserClient {
	return &sysUserClient{cc}
}

func (c *sysUserClient) GetPageSysUser(ctx context.Context, in *SysUserPageReq, opts ...grpc.CallOption) (*SysUserPageReply, error) {
	out := new(SysUserPageReply)
	err := c.cc.Invoke(ctx, "/sysuser.v1.SysUser/GetPageSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) GetSysUser(ctx context.Context, in *SysUserReq, opts ...grpc.CallOption) (*SysUserReply, error) {
	out := new(SysUserReply)
	err := c.cc.Invoke(ctx, "/sysuser.v1.SysUser/GetSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) UpdateSysUser(ctx context.Context, in *SysUserUpdateReq, opts ...grpc.CallOption) (*SysUserUpdateReply, error) {
	out := new(SysUserUpdateReply)
	err := c.cc.Invoke(ctx, "/sysuser.v1.SysUser/UpdateSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) CreateSysUser(ctx context.Context, in *SysUserCreateReq, opts ...grpc.CallOption) (*SysUserCreateReply, error) {
	out := new(SysUserCreateReply)
	err := c.cc.Invoke(ctx, "/sysuser.v1.SysUser/CreateSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) DeleteSysUser(ctx context.Context, in *SysUserDeleteReq, opts ...grpc.CallOption) (*SysUserDeleteReply, error) {
	out := new(SysUserDeleteReply)
	err := c.cc.Invoke(ctx, "/sysuser.v1.SysUser/DeleteSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) BatchDeleteSysUser(ctx context.Context, in *SysUserBatchDeleteReq, opts ...grpc.CallOption) (*SysUserDeleteReply, error) {
	out := new(SysUserDeleteReply)
	err := c.cc.Invoke(ctx, "/sysuser.v1.SysUser/BatchDeleteSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysUserServer is the server API for SysUser service.
// All implementations must embed UnimplementedSysUserServer
// for forward compatibility
type SysUserServer interface {
	// 分页查询SysUser
	GetPageSysUser(context.Context, *SysUserPageReq) (*SysUserPageReply, error)
	// 获取SysUser
	GetSysUser(context.Context, *SysUserReq) (*SysUserReply, error)
	// 更新SysUser
	UpdateSysUser(context.Context, *SysUserUpdateReq) (*SysUserUpdateReply, error)
	// 创建SysUser
	CreateSysUser(context.Context, *SysUserCreateReq) (*SysUserCreateReply, error)
	// 删除SysUser
	DeleteSysUser(context.Context, *SysUserDeleteReq) (*SysUserDeleteReply, error)
	// 批量删除SysUser
	BatchDeleteSysUser(context.Context, *SysUserBatchDeleteReq) (*SysUserDeleteReply, error)
	mustEmbedUnimplementedSysUserServer()
}

// UnimplementedSysUserServer must be embedded to have forward compatible implementations.
type UnimplementedSysUserServer struct {
}

func (UnimplementedSysUserServer) GetPageSysUser(context.Context, *SysUserPageReq) (*SysUserPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageSysUser not implemented")
}
func (UnimplementedSysUserServer) GetSysUser(context.Context, *SysUserReq) (*SysUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysUser not implemented")
}
func (UnimplementedSysUserServer) UpdateSysUser(context.Context, *SysUserUpdateReq) (*SysUserUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysUser not implemented")
}
func (UnimplementedSysUserServer) CreateSysUser(context.Context, *SysUserCreateReq) (*SysUserCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysUser not implemented")
}
func (UnimplementedSysUserServer) DeleteSysUser(context.Context, *SysUserDeleteReq) (*SysUserDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysUser not implemented")
}
func (UnimplementedSysUserServer) BatchDeleteSysUser(context.Context, *SysUserBatchDeleteReq) (*SysUserDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysUser not implemented")
}
func (UnimplementedSysUserServer) mustEmbedUnimplementedSysUserServer() {}

// UnsafeSysUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysUserServer will
// result in compilation errors.
type UnsafeSysUserServer interface {
	mustEmbedUnimplementedSysUserServer()
}

func RegisterSysUserServer(s grpc.ServiceRegistrar, srv SysUserServer) {
	s.RegisterService(&SysUser_ServiceDesc, srv)
}

func _SysUser_GetPageSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).GetPageSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysuser.v1.SysUser/GetPageSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).GetPageSysUser(ctx, req.(*SysUserPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_GetSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).GetSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysuser.v1.SysUser/GetSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).GetSysUser(ctx, req.(*SysUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_UpdateSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).UpdateSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysuser.v1.SysUser/UpdateSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).UpdateSysUser(ctx, req.(*SysUserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_CreateSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).CreateSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysuser.v1.SysUser/CreateSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).CreateSysUser(ctx, req.(*SysUserCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_DeleteSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).DeleteSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysuser.v1.SysUser/DeleteSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).DeleteSysUser(ctx, req.(*SysUserDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_BatchDeleteSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).BatchDeleteSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysuser.v1.SysUser/BatchDeleteSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).BatchDeleteSysUser(ctx, req.(*SysUserBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysUser_ServiceDesc is the grpc.ServiceDesc for SysUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysuser.v1.SysUser",
	HandlerType: (*SysUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageSysUser",
			Handler:    _SysUser_GetPageSysUser_Handler,
		},
		{
			MethodName: "GetSysUser",
			Handler:    _SysUser_GetSysUser_Handler,
		},
		{
			MethodName: "UpdateSysUser",
			Handler:    _SysUser_UpdateSysUser_Handler,
		},
		{
			MethodName: "CreateSysUser",
			Handler:    _SysUser_CreateSysUser_Handler,
		},
		{
			MethodName: "DeleteSysUser",
			Handler:    _SysUser_DeleteSysUser_Handler,
		},
		{
			MethodName: "BatchDeleteSysUser",
			Handler:    _SysUser_BatchDeleteSysUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/sysuser/v1/sys_user.proto",
}
