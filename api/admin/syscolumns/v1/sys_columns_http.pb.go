// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SysColumnsHTTPServer interface {
	BatchDeleteSysColumns(context.Context, *SysColumnsBatchDeleteReq) (*SysColumnsDeleteReply, error)
	CreateSysColumns(context.Context, *SysColumnsCreateReq) (*SysColumnsCreateReply, error)
	DeleteSysColumns(context.Context, *SysColumnsDeleteReq) (*SysColumnsDeleteReply, error)
	GetPageSysColumns(context.Context, *SysColumnsPageReq) (*SysColumnsPageReply, error)
	GetSysColumns(context.Context, *SysColumnsReq) (*SysColumnsReply, error)
	UpdateSysColumns(context.Context, *SysColumnsUpdateReq) (*SysColumnsUpdateReply, error)
}

func RegisterSysColumnsHTTPServer(s *http.Server, srv SysColumnsHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/sys/columns/page", _SysColumns_GetPageSysColumns0_HTTP_Handler(srv))
	r.GET("/v1/sys/columns/{id}", _SysColumns_GetSysColumns0_HTTP_Handler(srv))
	r.PUT("/v1/sys/columns/{id}", _SysColumns_UpdateSysColumns0_HTTP_Handler(srv))
	r.POST("/v1/sys/columns", _SysColumns_CreateSysColumns0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/columns/{id}", _SysColumns_DeleteSysColumns0_HTTP_Handler(srv))
	r.DELETE("/v1/sys/columns", _SysColumns_BatchDeleteSysColumns0_HTTP_Handler(srv))
}

func _SysColumns_GetPageSysColumns0_HTTP_Handler(srv SysColumnsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysColumnsPageReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syscolumns.v1.SysColumns/GetPageSysColumns")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPageSysColumns(ctx, req.(*SysColumnsPageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysColumnsPageReply)
		return ctx.Result(200, reply)
	}
}

func _SysColumns_GetSysColumns0_HTTP_Handler(srv SysColumnsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysColumnsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syscolumns.v1.SysColumns/GetSysColumns")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysColumns(ctx, req.(*SysColumnsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysColumnsReply)
		return ctx.Result(200, reply)
	}
}

func _SysColumns_UpdateSysColumns0_HTTP_Handler(srv SysColumnsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysColumnsUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syscolumns.v1.SysColumns/UpdateSysColumns")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysColumns(ctx, req.(*SysColumnsUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysColumnsUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _SysColumns_CreateSysColumns0_HTTP_Handler(srv SysColumnsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysColumnsCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syscolumns.v1.SysColumns/CreateSysColumns")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysColumns(ctx, req.(*SysColumnsCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysColumnsCreateReply)
		return ctx.Result(200, reply)
	}
}

func _SysColumns_DeleteSysColumns0_HTTP_Handler(srv SysColumnsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysColumnsDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syscolumns.v1.SysColumns/DeleteSysColumns")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysColumns(ctx, req.(*SysColumnsDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysColumnsDeleteReply)
		return ctx.Result(200, reply)
	}
}

func _SysColumns_BatchDeleteSysColumns0_HTTP_Handler(srv SysColumnsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysColumnsBatchDeleteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/syscolumns.v1.SysColumns/BatchDeleteSysColumns")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteSysColumns(ctx, req.(*SysColumnsBatchDeleteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SysColumnsDeleteReply)
		return ctx.Result(200, reply)
	}
}

type SysColumnsHTTPClient interface {
	BatchDeleteSysColumns(ctx context.Context, req *SysColumnsBatchDeleteReq, opts ...http.CallOption) (rsp *SysColumnsDeleteReply, err error)
	CreateSysColumns(ctx context.Context, req *SysColumnsCreateReq, opts ...http.CallOption) (rsp *SysColumnsCreateReply, err error)
	DeleteSysColumns(ctx context.Context, req *SysColumnsDeleteReq, opts ...http.CallOption) (rsp *SysColumnsDeleteReply, err error)
	GetPageSysColumns(ctx context.Context, req *SysColumnsPageReq, opts ...http.CallOption) (rsp *SysColumnsPageReply, err error)
	GetSysColumns(ctx context.Context, req *SysColumnsReq, opts ...http.CallOption) (rsp *SysColumnsReply, err error)
	UpdateSysColumns(ctx context.Context, req *SysColumnsUpdateReq, opts ...http.CallOption) (rsp *SysColumnsUpdateReply, err error)
}

type SysColumnsHTTPClientImpl struct {
	cc *http.Client
}

func NewSysColumnsHTTPClient(client *http.Client) SysColumnsHTTPClient {
	return &SysColumnsHTTPClientImpl{client}
}

func (c *SysColumnsHTTPClientImpl) BatchDeleteSysColumns(ctx context.Context, in *SysColumnsBatchDeleteReq, opts ...http.CallOption) (*SysColumnsDeleteReply, error) {
	var out SysColumnsDeleteReply
	pattern := "/v1/sys/columns"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/syscolumns.v1.SysColumns/BatchDeleteSysColumns"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysColumnsHTTPClientImpl) CreateSysColumns(ctx context.Context, in *SysColumnsCreateReq, opts ...http.CallOption) (*SysColumnsCreateReply, error) {
	var out SysColumnsCreateReply
	pattern := "/v1/sys/columns"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/syscolumns.v1.SysColumns/CreateSysColumns"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysColumnsHTTPClientImpl) DeleteSysColumns(ctx context.Context, in *SysColumnsDeleteReq, opts ...http.CallOption) (*SysColumnsDeleteReply, error) {
	var out SysColumnsDeleteReply
	pattern := "/v1/sys/columns/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/syscolumns.v1.SysColumns/DeleteSysColumns"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysColumnsHTTPClientImpl) GetPageSysColumns(ctx context.Context, in *SysColumnsPageReq, opts ...http.CallOption) (*SysColumnsPageReply, error) {
	var out SysColumnsPageReply
	pattern := "/v1/sys/columns/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/syscolumns.v1.SysColumns/GetPageSysColumns"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysColumnsHTTPClientImpl) GetSysColumns(ctx context.Context, in *SysColumnsReq, opts ...http.CallOption) (*SysColumnsReply, error) {
	var out SysColumnsReply
	pattern := "/v1/sys/columns/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/syscolumns.v1.SysColumns/GetSysColumns"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SysColumnsHTTPClientImpl) UpdateSysColumns(ctx context.Context, in *SysColumnsUpdateReq, opts ...http.CallOption) (*SysColumnsUpdateReply, error) {
	var out SysColumnsUpdateReply
	pattern := "/v1/sys/columns/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/syscolumns.v1.SysColumns/UpdateSysColumns"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
