// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/admin/syscolumns/v1/sys_columns.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysColumnsClient is the client API for SysColumns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysColumnsClient interface {
	// 分页查询SysColumns
	GetPageSysColumns(ctx context.Context, in *SysColumnsPageReq, opts ...grpc.CallOption) (*SysColumnsPageReply, error)
	// 获取SysColumns
	GetSysColumns(ctx context.Context, in *SysColumnsReq, opts ...grpc.CallOption) (*SysColumnsReply, error)
	// 更新SysColumns
	UpdateSysColumns(ctx context.Context, in *SysColumnsUpdateReq, opts ...grpc.CallOption) (*SysColumnsUpdateReply, error)
	// 创建SysColumns
	CreateSysColumns(ctx context.Context, in *SysColumnsCreateReq, opts ...grpc.CallOption) (*SysColumnsCreateReply, error)
	// 删除SysColumns
	DeleteSysColumns(ctx context.Context, in *SysColumnsDeleteReq, opts ...grpc.CallOption) (*SysColumnsDeleteReply, error)
	// 批量删除SysColumns
	BatchDeleteSysColumns(ctx context.Context, in *SysColumnsBatchDeleteReq, opts ...grpc.CallOption) (*SysColumnsDeleteReply, error)
}

type sysColumnsClient struct {
	cc grpc.ClientConnInterface
}

func NewSysColumnsClient(cc grpc.ClientConnInterface) SysColumnsClient {
	return &sysColumnsClient{cc}
}

func (c *sysColumnsClient) GetPageSysColumns(ctx context.Context, in *SysColumnsPageReq, opts ...grpc.CallOption) (*SysColumnsPageReply, error) {
	out := new(SysColumnsPageReply)
	err := c.cc.Invoke(ctx, "/syscolumns.v1.SysColumns/GetPageSysColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysColumnsClient) GetSysColumns(ctx context.Context, in *SysColumnsReq, opts ...grpc.CallOption) (*SysColumnsReply, error) {
	out := new(SysColumnsReply)
	err := c.cc.Invoke(ctx, "/syscolumns.v1.SysColumns/GetSysColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysColumnsClient) UpdateSysColumns(ctx context.Context, in *SysColumnsUpdateReq, opts ...grpc.CallOption) (*SysColumnsUpdateReply, error) {
	out := new(SysColumnsUpdateReply)
	err := c.cc.Invoke(ctx, "/syscolumns.v1.SysColumns/UpdateSysColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysColumnsClient) CreateSysColumns(ctx context.Context, in *SysColumnsCreateReq, opts ...grpc.CallOption) (*SysColumnsCreateReply, error) {
	out := new(SysColumnsCreateReply)
	err := c.cc.Invoke(ctx, "/syscolumns.v1.SysColumns/CreateSysColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysColumnsClient) DeleteSysColumns(ctx context.Context, in *SysColumnsDeleteReq, opts ...grpc.CallOption) (*SysColumnsDeleteReply, error) {
	out := new(SysColumnsDeleteReply)
	err := c.cc.Invoke(ctx, "/syscolumns.v1.SysColumns/DeleteSysColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysColumnsClient) BatchDeleteSysColumns(ctx context.Context, in *SysColumnsBatchDeleteReq, opts ...grpc.CallOption) (*SysColumnsDeleteReply, error) {
	out := new(SysColumnsDeleteReply)
	err := c.cc.Invoke(ctx, "/syscolumns.v1.SysColumns/BatchDeleteSysColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysColumnsServer is the server API for SysColumns service.
// All implementations must embed UnimplementedSysColumnsServer
// for forward compatibility
type SysColumnsServer interface {
	// 分页查询SysColumns
	GetPageSysColumns(context.Context, *SysColumnsPageReq) (*SysColumnsPageReply, error)
	// 获取SysColumns
	GetSysColumns(context.Context, *SysColumnsReq) (*SysColumnsReply, error)
	// 更新SysColumns
	UpdateSysColumns(context.Context, *SysColumnsUpdateReq) (*SysColumnsUpdateReply, error)
	// 创建SysColumns
	CreateSysColumns(context.Context, *SysColumnsCreateReq) (*SysColumnsCreateReply, error)
	// 删除SysColumns
	DeleteSysColumns(context.Context, *SysColumnsDeleteReq) (*SysColumnsDeleteReply, error)
	// 批量删除SysColumns
	BatchDeleteSysColumns(context.Context, *SysColumnsBatchDeleteReq) (*SysColumnsDeleteReply, error)
	mustEmbedUnimplementedSysColumnsServer()
}

// UnimplementedSysColumnsServer must be embedded to have forward compatible implementations.
type UnimplementedSysColumnsServer struct {
}

func (UnimplementedSysColumnsServer) GetPageSysColumns(context.Context, *SysColumnsPageReq) (*SysColumnsPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageSysColumns not implemented")
}
func (UnimplementedSysColumnsServer) GetSysColumns(context.Context, *SysColumnsReq) (*SysColumnsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysColumns not implemented")
}
func (UnimplementedSysColumnsServer) UpdateSysColumns(context.Context, *SysColumnsUpdateReq) (*SysColumnsUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysColumns not implemented")
}
func (UnimplementedSysColumnsServer) CreateSysColumns(context.Context, *SysColumnsCreateReq) (*SysColumnsCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysColumns not implemented")
}
func (UnimplementedSysColumnsServer) DeleteSysColumns(context.Context, *SysColumnsDeleteReq) (*SysColumnsDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysColumns not implemented")
}
func (UnimplementedSysColumnsServer) BatchDeleteSysColumns(context.Context, *SysColumnsBatchDeleteReq) (*SysColumnsDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteSysColumns not implemented")
}
func (UnimplementedSysColumnsServer) mustEmbedUnimplementedSysColumnsServer() {}

// UnsafeSysColumnsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysColumnsServer will
// result in compilation errors.
type UnsafeSysColumnsServer interface {
	mustEmbedUnimplementedSysColumnsServer()
}

func RegisterSysColumnsServer(s grpc.ServiceRegistrar, srv SysColumnsServer) {
	s.RegisterService(&SysColumns_ServiceDesc, srv)
}

func _SysColumns_GetPageSysColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysColumnsPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysColumnsServer).GetPageSysColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syscolumns.v1.SysColumns/GetPageSysColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysColumnsServer).GetPageSysColumns(ctx, req.(*SysColumnsPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysColumns_GetSysColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysColumnsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysColumnsServer).GetSysColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syscolumns.v1.SysColumns/GetSysColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysColumnsServer).GetSysColumns(ctx, req.(*SysColumnsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysColumns_UpdateSysColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysColumnsUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysColumnsServer).UpdateSysColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syscolumns.v1.SysColumns/UpdateSysColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysColumnsServer).UpdateSysColumns(ctx, req.(*SysColumnsUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysColumns_CreateSysColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysColumnsCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysColumnsServer).CreateSysColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syscolumns.v1.SysColumns/CreateSysColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysColumnsServer).CreateSysColumns(ctx, req.(*SysColumnsCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysColumns_DeleteSysColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysColumnsDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysColumnsServer).DeleteSysColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syscolumns.v1.SysColumns/DeleteSysColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysColumnsServer).DeleteSysColumns(ctx, req.(*SysColumnsDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysColumns_BatchDeleteSysColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysColumnsBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysColumnsServer).BatchDeleteSysColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syscolumns.v1.SysColumns/BatchDeleteSysColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysColumnsServer).BatchDeleteSysColumns(ctx, req.(*SysColumnsBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysColumns_ServiceDesc is the grpc.ServiceDesc for SysColumns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysColumns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syscolumns.v1.SysColumns",
	HandlerType: (*SysColumnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageSysColumns",
			Handler:    _SysColumns_GetPageSysColumns_Handler,
		},
		{
			MethodName: "GetSysColumns",
			Handler:    _SysColumns_GetSysColumns_Handler,
		},
		{
			MethodName: "UpdateSysColumns",
			Handler:    _SysColumns_UpdateSysColumns_Handler,
		},
		{
			MethodName: "CreateSysColumns",
			Handler:    _SysColumns_CreateSysColumns_Handler,
		},
		{
			MethodName: "DeleteSysColumns",
			Handler:    _SysColumns_DeleteSysColumns_Handler,
		},
		{
			MethodName: "BatchDeleteSysColumns",
			Handler:    _SysColumns_BatchDeleteSysColumns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/syscolumns/v1/sys_columns.proto",
}
