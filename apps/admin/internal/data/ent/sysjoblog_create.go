// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hope/apps/admin/internal/data/ent/sysjob"
	"hope/apps/admin/internal/data/ent/sysjoblog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysJobLogCreate is the builder for creating a SysJobLog entity.
type SysJobLogCreate struct {
	config
	mutation *SysJobLogMutation
	hooks    []Hook
}

// SetJobId sets the "jobId" field.
func (sjlc *SysJobLogCreate) SetJobId(i int32) *SysJobLogCreate {
	sjlc.mutation.SetJobId(i)
	return sjlc
}

// SetNillableJobId sets the "jobId" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableJobId(i *int32) *SysJobLogCreate {
	if i != nil {
		sjlc.SetJobId(*i)
	}
	return sjlc
}

// SetJobName sets the "jobName" field.
func (sjlc *SysJobLogCreate) SetJobName(s string) *SysJobLogCreate {
	sjlc.mutation.SetJobName(s)
	return sjlc
}

// SetNillableJobName sets the "jobName" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableJobName(s *string) *SysJobLogCreate {
	if s != nil {
		sjlc.SetJobName(*s)
	}
	return sjlc
}

// SetEntryId sets the "entryId" field.
func (sjlc *SysJobLogCreate) SetEntryId(i int32) *SysJobLogCreate {
	sjlc.mutation.SetEntryId(i)
	return sjlc
}

// SetNillableEntryId sets the "entryId" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableEntryId(i *int32) *SysJobLogCreate {
	if i != nil {
		sjlc.SetEntryId(*i)
	}
	return sjlc
}

// SetStatus sets the "status" field.
func (sjlc *SysJobLogCreate) SetStatus(b bool) *SysJobLogCreate {
	sjlc.mutation.SetStatus(b)
	return sjlc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableStatus(b *bool) *SysJobLogCreate {
	if b != nil {
		sjlc.SetStatus(*b)
	}
	return sjlc
}

// SetDuration sets the "duration" field.
func (sjlc *SysJobLogCreate) SetDuration(t time.Duration) *SysJobLogCreate {
	sjlc.mutation.SetDuration(t)
	return sjlc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableDuration(t *time.Duration) *SysJobLogCreate {
	if t != nil {
		sjlc.SetDuration(*t)
	}
	return sjlc
}

// SetInfo sets the "info" field.
func (sjlc *SysJobLogCreate) SetInfo(s string) *SysJobLogCreate {
	sjlc.mutation.SetInfo(s)
	return sjlc
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableInfo(s *string) *SysJobLogCreate {
	if s != nil {
		sjlc.SetInfo(*s)
	}
	return sjlc
}

// SetCreatedAt sets the "createdAt" field.
func (sjlc *SysJobLogCreate) SetCreatedAt(t time.Time) *SysJobLogCreate {
	sjlc.mutation.SetCreatedAt(t)
	return sjlc
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableCreatedAt(t *time.Time) *SysJobLogCreate {
	if t != nil {
		sjlc.SetCreatedAt(*t)
	}
	return sjlc
}

// SetUpdatedAt sets the "updatedAt" field.
func (sjlc *SysJobLogCreate) SetUpdatedAt(t time.Time) *SysJobLogCreate {
	sjlc.mutation.SetUpdatedAt(t)
	return sjlc
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableUpdatedAt(t *time.Time) *SysJobLogCreate {
	if t != nil {
		sjlc.SetUpdatedAt(*t)
	}
	return sjlc
}

// SetCreateBy sets the "createBy" field.
func (sjlc *SysJobLogCreate) SetCreateBy(i int64) *SysJobLogCreate {
	sjlc.mutation.SetCreateBy(i)
	return sjlc
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableCreateBy(i *int64) *SysJobLogCreate {
	if i != nil {
		sjlc.SetCreateBy(*i)
	}
	return sjlc
}

// SetUpdateBy sets the "updateBy" field.
func (sjlc *SysJobLogCreate) SetUpdateBy(i int64) *SysJobLogCreate {
	sjlc.mutation.SetUpdateBy(i)
	return sjlc
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableUpdateBy(i *int64) *SysJobLogCreate {
	if i != nil {
		sjlc.SetUpdateBy(*i)
	}
	return sjlc
}

// SetTenantId sets the "tenantId" field.
func (sjlc *SysJobLogCreate) SetTenantId(i int64) *SysJobLogCreate {
	sjlc.mutation.SetTenantId(i)
	return sjlc
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableTenantId(i *int64) *SysJobLogCreate {
	if i != nil {
		sjlc.SetTenantId(*i)
	}
	return sjlc
}

// SetJobID sets the "job" edge to the SysJob entity by ID.
func (sjlc *SysJobLogCreate) SetJobID(id int64) *SysJobLogCreate {
	sjlc.mutation.SetJobID(id)
	return sjlc
}

// SetNillableJobID sets the "job" edge to the SysJob entity by ID if the given value is not nil.
func (sjlc *SysJobLogCreate) SetNillableJobID(id *int64) *SysJobLogCreate {
	if id != nil {
		sjlc = sjlc.SetJobID(*id)
	}
	return sjlc
}

// SetJob sets the "job" edge to the SysJob entity.
func (sjlc *SysJobLogCreate) SetJob(s *SysJob) *SysJobLogCreate {
	return sjlc.SetJobID(s.ID)
}

// Mutation returns the SysJobLogMutation object of the builder.
func (sjlc *SysJobLogCreate) Mutation() *SysJobLogMutation {
	return sjlc.mutation
}

// Save creates the SysJobLog in the database.
func (sjlc *SysJobLogCreate) Save(ctx context.Context) (*SysJobLog, error) {
	var (
		err  error
		node *SysJobLog
	)
	sjlc.defaults()
	if len(sjlc.hooks) == 0 {
		if err = sjlc.check(); err != nil {
			return nil, err
		}
		node, err = sjlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysJobLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sjlc.check(); err != nil {
				return nil, err
			}
			sjlc.mutation = mutation
			if node, err = sjlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sjlc.hooks) - 1; i >= 0; i-- {
			if sjlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sjlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sjlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sjlc *SysJobLogCreate) SaveX(ctx context.Context) *SysJobLog {
	v, err := sjlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjlc *SysJobLogCreate) Exec(ctx context.Context) error {
	_, err := sjlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjlc *SysJobLogCreate) ExecX(ctx context.Context) {
	if err := sjlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjlc *SysJobLogCreate) defaults() {
	if _, ok := sjlc.mutation.CreatedAt(); !ok {
		v := sysjoblog.DefaultCreatedAt()
		sjlc.mutation.SetCreatedAt(v)
	}
	if _, ok := sjlc.mutation.UpdatedAt(); !ok {
		v := sysjoblog.DefaultUpdatedAt()
		sjlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sjlc.mutation.CreateBy(); !ok {
		v := sysjoblog.DefaultCreateBy
		sjlc.mutation.SetCreateBy(v)
	}
	if _, ok := sjlc.mutation.UpdateBy(); !ok {
		v := sysjoblog.DefaultUpdateBy
		sjlc.mutation.SetUpdateBy(v)
	}
	if _, ok := sjlc.mutation.TenantId(); !ok {
		v := sysjoblog.DefaultTenantId
		sjlc.mutation.SetTenantId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjlc *SysJobLogCreate) check() error {
	if _, ok := sjlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "createdAt"`)}
	}
	if _, ok := sjlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "updatedAt"`)}
	}
	if _, ok := sjlc.mutation.CreateBy(); !ok {
		return &ValidationError{Name: "createBy", err: errors.New(`ent: missing required field "createBy"`)}
	}
	if _, ok := sjlc.mutation.UpdateBy(); !ok {
		return &ValidationError{Name: "updateBy", err: errors.New(`ent: missing required field "updateBy"`)}
	}
	if _, ok := sjlc.mutation.TenantId(); !ok {
		return &ValidationError{Name: "tenantId", err: errors.New(`ent: missing required field "tenantId"`)}
	}
	return nil
}

func (sjlc *SysJobLogCreate) sqlSave(ctx context.Context) (*SysJobLog, error) {
	_node, _spec := sjlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sjlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int64(id)
	return _node, nil
}

func (sjlc *SysJobLogCreate) createSpec() (*SysJobLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SysJobLog{config: sjlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sysjoblog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: sysjoblog.FieldID,
			},
		}
	)
	if value, ok := sjlc.mutation.JobId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldJobId,
		})
		_node.JobId = value
	}
	if value, ok := sjlc.mutation.JobName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysjoblog.FieldJobName,
		})
		_node.JobName = value
	}
	if value, ok := sjlc.mutation.EntryId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysjoblog.FieldEntryId,
		})
		_node.EntryId = value
	}
	if value, ok := sjlc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysjoblog.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sjlc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := sjlc.mutation.Info(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysjoblog.FieldInfo,
		})
		_node.Info = value
	}
	if value, ok := sjlc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysjoblog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sjlc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysjoblog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sjlc.mutation.CreateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldCreateBy,
		})
		_node.CreateBy = value
	}
	if value, ok := sjlc.mutation.UpdateBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldUpdateBy,
		})
		_node.UpdateBy = value
	}
	if value, ok := sjlc.mutation.TenantId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: sysjoblog.FieldTenantId,
		})
		_node.TenantId = value
	}
	if nodes := sjlc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysjoblog.JobTable,
			Columns: []string{sysjoblog.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: sysjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sys_job_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SysJobLogCreateBulk is the builder for creating many SysJobLog entities in bulk.
type SysJobLogCreateBulk struct {
	config
	builders []*SysJobLogCreate
}

// Save creates the SysJobLog entities in the database.
func (sjlcb *SysJobLogCreateBulk) Save(ctx context.Context) ([]*SysJobLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sjlcb.builders))
	nodes := make([]*SysJobLog, len(sjlcb.builders))
	mutators := make([]Mutator, len(sjlcb.builders))
	for i := range sjlcb.builders {
		func(i int, root context.Context) {
			builder := sjlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysJobLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sjlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sjlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sjlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sjlcb *SysJobLogCreateBulk) SaveX(ctx context.Context) []*SysJobLog {
	v, err := sjlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjlcb *SysJobLogCreateBulk) Exec(ctx context.Context) error {
	_, err := sjlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjlcb *SysJobLogCreateBulk) ExecX(ctx context.Context) {
	if err := sjlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
