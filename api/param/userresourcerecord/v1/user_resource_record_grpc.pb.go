// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/param/userresourcerecord/v1/user_resource_record.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserResourceRecordClient is the client API for UserResourceRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserResourceRecordClient interface {
	// 分页查询UserResourceRecord
	GetPageUserResourceRecord(ctx context.Context, in *UserResourceRecordPageReq, opts ...grpc.CallOption) (*UserResourceRecordPageReply, error)
	// 获取UserResourceRecord
	GetUserResourceRecord(ctx context.Context, in *UserResourceRecordReq, opts ...grpc.CallOption) (*UserResourceRecordReply, error)
	// 更新UserResourceRecord
	UpdateUserResourceRecord(ctx context.Context, in *UserResourceRecordUpdateReq, opts ...grpc.CallOption) (*UserResourceRecordUpdateReply, error)
	// 创建UserResourceRecord
	CreateUserResourceRecord(ctx context.Context, in *UserResourceRecordCreateReq, opts ...grpc.CallOption) (*UserResourceRecordCreateReply, error)
	// 删除UserResourceRecord
	DeleteUserResourceRecord(ctx context.Context, in *UserResourceRecordDeleteReq, opts ...grpc.CallOption) (*UserResourceRecordDeleteReply, error)
	// 批量删除UserResourceRecord
	BatchDeleteUserResourceRecord(ctx context.Context, in *UserResourceRecordBatchDeleteReq, opts ...grpc.CallOption) (*UserResourceRecordDeleteReply, error)
}

type userResourceRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewUserResourceRecordClient(cc grpc.ClientConnInterface) UserResourceRecordClient {
	return &userResourceRecordClient{cc}
}

func (c *userResourceRecordClient) GetPageUserResourceRecord(ctx context.Context, in *UserResourceRecordPageReq, opts ...grpc.CallOption) (*UserResourceRecordPageReply, error) {
	out := new(UserResourceRecordPageReply)
	err := c.cc.Invoke(ctx, "/userresourcerecord.v1.UserResourceRecord/GetPageUserResourceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceRecordClient) GetUserResourceRecord(ctx context.Context, in *UserResourceRecordReq, opts ...grpc.CallOption) (*UserResourceRecordReply, error) {
	out := new(UserResourceRecordReply)
	err := c.cc.Invoke(ctx, "/userresourcerecord.v1.UserResourceRecord/GetUserResourceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceRecordClient) UpdateUserResourceRecord(ctx context.Context, in *UserResourceRecordUpdateReq, opts ...grpc.CallOption) (*UserResourceRecordUpdateReply, error) {
	out := new(UserResourceRecordUpdateReply)
	err := c.cc.Invoke(ctx, "/userresourcerecord.v1.UserResourceRecord/UpdateUserResourceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceRecordClient) CreateUserResourceRecord(ctx context.Context, in *UserResourceRecordCreateReq, opts ...grpc.CallOption) (*UserResourceRecordCreateReply, error) {
	out := new(UserResourceRecordCreateReply)
	err := c.cc.Invoke(ctx, "/userresourcerecord.v1.UserResourceRecord/CreateUserResourceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceRecordClient) DeleteUserResourceRecord(ctx context.Context, in *UserResourceRecordDeleteReq, opts ...grpc.CallOption) (*UserResourceRecordDeleteReply, error) {
	out := new(UserResourceRecordDeleteReply)
	err := c.cc.Invoke(ctx, "/userresourcerecord.v1.UserResourceRecord/DeleteUserResourceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResourceRecordClient) BatchDeleteUserResourceRecord(ctx context.Context, in *UserResourceRecordBatchDeleteReq, opts ...grpc.CallOption) (*UserResourceRecordDeleteReply, error) {
	out := new(UserResourceRecordDeleteReply)
	err := c.cc.Invoke(ctx, "/userresourcerecord.v1.UserResourceRecord/BatchDeleteUserResourceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserResourceRecordServer is the server API for UserResourceRecord service.
// All implementations must embed UnimplementedUserResourceRecordServer
// for forward compatibility
type UserResourceRecordServer interface {
	// 分页查询UserResourceRecord
	GetPageUserResourceRecord(context.Context, *UserResourceRecordPageReq) (*UserResourceRecordPageReply, error)
	// 获取UserResourceRecord
	GetUserResourceRecord(context.Context, *UserResourceRecordReq) (*UserResourceRecordReply, error)
	// 更新UserResourceRecord
	UpdateUserResourceRecord(context.Context, *UserResourceRecordUpdateReq) (*UserResourceRecordUpdateReply, error)
	// 创建UserResourceRecord
	CreateUserResourceRecord(context.Context, *UserResourceRecordCreateReq) (*UserResourceRecordCreateReply, error)
	// 删除UserResourceRecord
	DeleteUserResourceRecord(context.Context, *UserResourceRecordDeleteReq) (*UserResourceRecordDeleteReply, error)
	// 批量删除UserResourceRecord
	BatchDeleteUserResourceRecord(context.Context, *UserResourceRecordBatchDeleteReq) (*UserResourceRecordDeleteReply, error)
	mustEmbedUnimplementedUserResourceRecordServer()
}

// UnimplementedUserResourceRecordServer must be embedded to have forward compatible implementations.
type UnimplementedUserResourceRecordServer struct {
}

func (UnimplementedUserResourceRecordServer) GetPageUserResourceRecord(context.Context, *UserResourceRecordPageReq) (*UserResourceRecordPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageUserResourceRecord not implemented")
}
func (UnimplementedUserResourceRecordServer) GetUserResourceRecord(context.Context, *UserResourceRecordReq) (*UserResourceRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserResourceRecord not implemented")
}
func (UnimplementedUserResourceRecordServer) UpdateUserResourceRecord(context.Context, *UserResourceRecordUpdateReq) (*UserResourceRecordUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserResourceRecord not implemented")
}
func (UnimplementedUserResourceRecordServer) CreateUserResourceRecord(context.Context, *UserResourceRecordCreateReq) (*UserResourceRecordCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserResourceRecord not implemented")
}
func (UnimplementedUserResourceRecordServer) DeleteUserResourceRecord(context.Context, *UserResourceRecordDeleteReq) (*UserResourceRecordDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserResourceRecord not implemented")
}
func (UnimplementedUserResourceRecordServer) BatchDeleteUserResourceRecord(context.Context, *UserResourceRecordBatchDeleteReq) (*UserResourceRecordDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteUserResourceRecord not implemented")
}
func (UnimplementedUserResourceRecordServer) mustEmbedUnimplementedUserResourceRecordServer() {}

// UnsafeUserResourceRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserResourceRecordServer will
// result in compilation errors.
type UnsafeUserResourceRecordServer interface {
	mustEmbedUnimplementedUserResourceRecordServer()
}

func RegisterUserResourceRecordServer(s grpc.ServiceRegistrar, srv UserResourceRecordServer) {
	s.RegisterService(&UserResourceRecord_ServiceDesc, srv)
}

func _UserResourceRecord_GetPageUserResourceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceRecordPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceRecordServer).GetPageUserResourceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresourcerecord.v1.UserResourceRecord/GetPageUserResourceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceRecordServer).GetPageUserResourceRecord(ctx, req.(*UserResourceRecordPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResourceRecord_GetUserResourceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceRecordServer).GetUserResourceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresourcerecord.v1.UserResourceRecord/GetUserResourceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceRecordServer).GetUserResourceRecord(ctx, req.(*UserResourceRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResourceRecord_UpdateUserResourceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceRecordUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceRecordServer).UpdateUserResourceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresourcerecord.v1.UserResourceRecord/UpdateUserResourceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceRecordServer).UpdateUserResourceRecord(ctx, req.(*UserResourceRecordUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResourceRecord_CreateUserResourceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceRecordCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceRecordServer).CreateUserResourceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresourcerecord.v1.UserResourceRecord/CreateUserResourceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceRecordServer).CreateUserResourceRecord(ctx, req.(*UserResourceRecordCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResourceRecord_DeleteUserResourceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceRecordDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceRecordServer).DeleteUserResourceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresourcerecord.v1.UserResourceRecord/DeleteUserResourceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceRecordServer).DeleteUserResourceRecord(ctx, req.(*UserResourceRecordDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResourceRecord_BatchDeleteUserResourceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceRecordBatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResourceRecordServer).BatchDeleteUserResourceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userresourcerecord.v1.UserResourceRecord/BatchDeleteUserResourceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResourceRecordServer).BatchDeleteUserResourceRecord(ctx, req.(*UserResourceRecordBatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserResourceRecord_ServiceDesc is the grpc.ServiceDesc for UserResourceRecord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserResourceRecord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userresourcerecord.v1.UserResourceRecord",
	HandlerType: (*UserResourceRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageUserResourceRecord",
			Handler:    _UserResourceRecord_GetPageUserResourceRecord_Handler,
		},
		{
			MethodName: "GetUserResourceRecord",
			Handler:    _UserResourceRecord_GetUserResourceRecord_Handler,
		},
		{
			MethodName: "UpdateUserResourceRecord",
			Handler:    _UserResourceRecord_UpdateUserResourceRecord_Handler,
		},
		{
			MethodName: "CreateUserResourceRecord",
			Handler:    _UserResourceRecord_CreateUserResourceRecord_Handler,
		},
		{
			MethodName: "DeleteUserResourceRecord",
			Handler:    _UserResourceRecord_DeleteUserResourceRecord_Handler,
		},
		{
			MethodName: "BatchDeleteUserResourceRecord",
			Handler:    _UserResourceRecord_BatchDeleteUserResourceRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/param/userresourcerecord/v1/user_resource_record.proto",
}
