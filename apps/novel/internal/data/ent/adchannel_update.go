// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/adchannel"
	"hope/apps/novel/internal/data/ent/payorder"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdChannelUpdate is the builder for updating AdChannel entities.
type AdChannelUpdate struct {
	config
	hooks    []Hook
	mutation *AdChannelMutation
}

// Where appends a list predicates to the AdChannelUpdate builder.
func (acu *AdChannelUpdate) Where(ps ...predicate.AdChannel) *AdChannelUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetChannelName sets the "channelName" field.
func (acu *AdChannelUpdate) SetChannelName(s string) *AdChannelUpdate {
	acu.mutation.SetChannelName(s)
	return acu
}

// SetNillableChannelName sets the "channelName" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableChannelName(s *string) *AdChannelUpdate {
	if s != nil {
		acu.SetChannelName(*s)
	}
	return acu
}

// ClearChannelName clears the value of the "channelName" field.
func (acu *AdChannelUpdate) ClearChannelName() *AdChannelUpdate {
	acu.mutation.ClearChannelName()
	return acu
}

// SetNovelId sets the "novelId" field.
func (acu *AdChannelUpdate) SetNovelId(i int64) *AdChannelUpdate {
	acu.mutation.ResetNovelId()
	acu.mutation.SetNovelId(i)
	return acu
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableNovelId(i *int64) *AdChannelUpdate {
	if i != nil {
		acu.SetNovelId(*i)
	}
	return acu
}

// AddNovelId adds i to the "novelId" field.
func (acu *AdChannelUpdate) AddNovelId(i int64) *AdChannelUpdate {
	acu.mutation.AddNovelId(i)
	return acu
}

// ClearNovelId clears the value of the "novelId" field.
func (acu *AdChannelUpdate) ClearNovelId() *AdChannelUpdate {
	acu.mutation.ClearNovelId()
	return acu
}

// SetReg sets the "reg" field.
func (acu *AdChannelUpdate) SetReg(i int64) *AdChannelUpdate {
	acu.mutation.ResetReg()
	acu.mutation.SetReg(i)
	return acu
}

// SetNillableReg sets the "reg" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableReg(i *int64) *AdChannelUpdate {
	if i != nil {
		acu.SetReg(*i)
	}
	return acu
}

// AddReg adds i to the "reg" field.
func (acu *AdChannelUpdate) AddReg(i int64) *AdChannelUpdate {
	acu.mutation.AddReg(i)
	return acu
}

// ClearReg clears the value of the "reg" field.
func (acu *AdChannelUpdate) ClearReg() *AdChannelUpdate {
	acu.mutation.ClearReg()
	return acu
}

// SetPay sets the "pay" field.
func (acu *AdChannelUpdate) SetPay(i int64) *AdChannelUpdate {
	acu.mutation.ResetPay()
	acu.mutation.SetPay(i)
	return acu
}

// SetNillablePay sets the "pay" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillablePay(i *int64) *AdChannelUpdate {
	if i != nil {
		acu.SetPay(*i)
	}
	return acu
}

// AddPay adds i to the "pay" field.
func (acu *AdChannelUpdate) AddPay(i int64) *AdChannelUpdate {
	acu.mutation.AddPay(i)
	return acu
}

// ClearPay clears the value of the "pay" field.
func (acu *AdChannelUpdate) ClearPay() *AdChannelUpdate {
	acu.mutation.ClearPay()
	return acu
}

// SetNovelName sets the "novelName" field.
func (acu *AdChannelUpdate) SetNovelName(s string) *AdChannelUpdate {
	acu.mutation.SetNovelName(s)
	return acu
}

// SetNillableNovelName sets the "novelName" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableNovelName(s *string) *AdChannelUpdate {
	if s != nil {
		acu.SetNovelName(*s)
	}
	return acu
}

// ClearNovelName clears the value of the "novelName" field.
func (acu *AdChannelUpdate) ClearNovelName() *AdChannelUpdate {
	acu.mutation.ClearNovelName()
	return acu
}

// SetChapterId sets the "chapterId" field.
func (acu *AdChannelUpdate) SetChapterId(i int64) *AdChannelUpdate {
	acu.mutation.ResetChapterId()
	acu.mutation.SetChapterId(i)
	return acu
}

// SetNillableChapterId sets the "chapterId" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableChapterId(i *int64) *AdChannelUpdate {
	if i != nil {
		acu.SetChapterId(*i)
	}
	return acu
}

// AddChapterId adds i to the "chapterId" field.
func (acu *AdChannelUpdate) AddChapterId(i int64) *AdChannelUpdate {
	acu.mutation.AddChapterId(i)
	return acu
}

// ClearChapterId clears the value of the "chapterId" field.
func (acu *AdChannelUpdate) ClearChapterId() *AdChannelUpdate {
	acu.mutation.ClearChapterId()
	return acu
}

// SetChapterNum sets the "chapterNum" field.
func (acu *AdChannelUpdate) SetChapterNum(i int32) *AdChannelUpdate {
	acu.mutation.ResetChapterNum()
	acu.mutation.SetChapterNum(i)
	return acu
}

// SetNillableChapterNum sets the "chapterNum" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableChapterNum(i *int32) *AdChannelUpdate {
	if i != nil {
		acu.SetChapterNum(*i)
	}
	return acu
}

// AddChapterNum adds i to the "chapterNum" field.
func (acu *AdChannelUpdate) AddChapterNum(i int32) *AdChannelUpdate {
	acu.mutation.AddChapterNum(i)
	return acu
}

// ClearChapterNum clears the value of the "chapterNum" field.
func (acu *AdChannelUpdate) ClearChapterNum() *AdChannelUpdate {
	acu.mutation.ClearChapterNum()
	return acu
}

// SetAdType sets the "adType" field.
func (acu *AdChannelUpdate) SetAdType(s string) *AdChannelUpdate {
	acu.mutation.SetAdType(s)
	return acu
}

// SetNillableAdType sets the "adType" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableAdType(s *string) *AdChannelUpdate {
	if s != nil {
		acu.SetAdType(*s)
	}
	return acu
}

// ClearAdType clears the value of the "adType" field.
func (acu *AdChannelUpdate) ClearAdType() *AdChannelUpdate {
	acu.mutation.ClearAdType()
	return acu
}

// SetImg sets the "img" field.
func (acu *AdChannelUpdate) SetImg(s string) *AdChannelUpdate {
	acu.mutation.SetImg(s)
	return acu
}

// SetNillableImg sets the "img" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableImg(s *string) *AdChannelUpdate {
	if s != nil {
		acu.SetImg(*s)
	}
	return acu
}

// ClearImg clears the value of the "img" field.
func (acu *AdChannelUpdate) ClearImg() *AdChannelUpdate {
	acu.mutation.ClearImg()
	return acu
}

// SetUpdatedAt sets the "updatedAt" field.
func (acu *AdChannelUpdate) SetUpdatedAt(t time.Time) *AdChannelUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetCreateBy sets the "createBy" field.
func (acu *AdChannelUpdate) SetCreateBy(i int64) *AdChannelUpdate {
	acu.mutation.ResetCreateBy()
	acu.mutation.SetCreateBy(i)
	return acu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableCreateBy(i *int64) *AdChannelUpdate {
	if i != nil {
		acu.SetCreateBy(*i)
	}
	return acu
}

// AddCreateBy adds i to the "createBy" field.
func (acu *AdChannelUpdate) AddCreateBy(i int64) *AdChannelUpdate {
	acu.mutation.AddCreateBy(i)
	return acu
}

// SetUpdateBy sets the "updateBy" field.
func (acu *AdChannelUpdate) SetUpdateBy(i int64) *AdChannelUpdate {
	acu.mutation.ResetUpdateBy()
	acu.mutation.SetUpdateBy(i)
	return acu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableUpdateBy(i *int64) *AdChannelUpdate {
	if i != nil {
		acu.SetUpdateBy(*i)
	}
	return acu
}

// AddUpdateBy adds i to the "updateBy" field.
func (acu *AdChannelUpdate) AddUpdateBy(i int64) *AdChannelUpdate {
	acu.mutation.AddUpdateBy(i)
	return acu
}

// SetTenantId sets the "tenantId" field.
func (acu *AdChannelUpdate) SetTenantId(i int64) *AdChannelUpdate {
	acu.mutation.ResetTenantId()
	acu.mutation.SetTenantId(i)
	return acu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (acu *AdChannelUpdate) SetNillableTenantId(i *int64) *AdChannelUpdate {
	if i != nil {
		acu.SetTenantId(*i)
	}
	return acu
}

// AddTenantId adds i to the "tenantId" field.
func (acu *AdChannelUpdate) AddTenantId(i int64) *AdChannelUpdate {
	acu.mutation.AddTenantId(i)
	return acu
}

// AddUserIDs adds the "users" edge to the SocialUser entity by IDs.
func (acu *AdChannelUpdate) AddUserIDs(ids ...int64) *AdChannelUpdate {
	acu.mutation.AddUserIDs(ids...)
	return acu
}

// AddUsers adds the "users" edges to the SocialUser entity.
func (acu *AdChannelUpdate) AddUsers(s ...*SocialUser) *AdChannelUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return acu.AddUserIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the PayOrder entity by IDs.
func (acu *AdChannelUpdate) AddOrderIDs(ids ...int64) *AdChannelUpdate {
	acu.mutation.AddOrderIDs(ids...)
	return acu
}

// AddOrders adds the "orders" edges to the PayOrder entity.
func (acu *AdChannelUpdate) AddOrders(p ...*PayOrder) *AdChannelUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return acu.AddOrderIDs(ids...)
}

// Mutation returns the AdChannelMutation object of the builder.
func (acu *AdChannelUpdate) Mutation() *AdChannelMutation {
	return acu.mutation
}

// ClearUsers clears all "users" edges to the SocialUser entity.
func (acu *AdChannelUpdate) ClearUsers() *AdChannelUpdate {
	acu.mutation.ClearUsers()
	return acu
}

// RemoveUserIDs removes the "users" edge to SocialUser entities by IDs.
func (acu *AdChannelUpdate) RemoveUserIDs(ids ...int64) *AdChannelUpdate {
	acu.mutation.RemoveUserIDs(ids...)
	return acu
}

// RemoveUsers removes "users" edges to SocialUser entities.
func (acu *AdChannelUpdate) RemoveUsers(s ...*SocialUser) *AdChannelUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return acu.RemoveUserIDs(ids...)
}

// ClearOrders clears all "orders" edges to the PayOrder entity.
func (acu *AdChannelUpdate) ClearOrders() *AdChannelUpdate {
	acu.mutation.ClearOrders()
	return acu
}

// RemoveOrderIDs removes the "orders" edge to PayOrder entities by IDs.
func (acu *AdChannelUpdate) RemoveOrderIDs(ids ...int64) *AdChannelUpdate {
	acu.mutation.RemoveOrderIDs(ids...)
	return acu
}

// RemoveOrders removes "orders" edges to PayOrder entities.
func (acu *AdChannelUpdate) RemoveOrders(p ...*PayOrder) *AdChannelUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return acu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AdChannelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	acu.defaults()
	if len(acu.hooks) == 0 {
		affected, err = acu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdChannelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acu.mutation = mutation
			affected, err = acu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(acu.hooks) - 1; i >= 0; i-- {
			if acu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AdChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AdChannelUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AdChannelUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AdChannelUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := adchannel.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

func (acu *AdChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adchannel.Table,
			Columns: adchannel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: adchannel.FieldID,
			},
		},
	}
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.ChannelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchannel.FieldChannelName,
		})
	}
	if acu.mutation.ChannelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adchannel.FieldChannelName,
		})
	}
	if value, ok := acu.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldNovelId,
		})
	}
	if value, ok := acu.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldNovelId,
		})
	}
	if acu.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: adchannel.FieldNovelId,
		})
	}
	if value, ok := acu.mutation.Reg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldReg,
		})
	}
	if value, ok := acu.mutation.AddedReg(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldReg,
		})
	}
	if acu.mutation.RegCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: adchannel.FieldReg,
		})
	}
	if value, ok := acu.mutation.Pay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldPay,
		})
	}
	if value, ok := acu.mutation.AddedPay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldPay,
		})
	}
	if acu.mutation.PayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: adchannel.FieldPay,
		})
	}
	if value, ok := acu.mutation.NovelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchannel.FieldNovelName,
		})
	}
	if acu.mutation.NovelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adchannel.FieldNovelName,
		})
	}
	if value, ok := acu.mutation.ChapterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldChapterId,
		})
	}
	if value, ok := acu.mutation.AddedChapterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldChapterId,
		})
	}
	if acu.mutation.ChapterIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: adchannel.FieldChapterId,
		})
	}
	if value, ok := acu.mutation.ChapterNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: adchannel.FieldChapterNum,
		})
	}
	if value, ok := acu.mutation.AddedChapterNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: adchannel.FieldChapterNum,
		})
	}
	if acu.mutation.ChapterNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: adchannel.FieldChapterNum,
		})
	}
	if value, ok := acu.mutation.AdType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchannel.FieldAdType,
		})
	}
	if acu.mutation.AdTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adchannel.FieldAdType,
		})
	}
	if value, ok := acu.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchannel.FieldImg,
		})
	}
	if acu.mutation.ImgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adchannel.FieldImg,
		})
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adchannel.FieldUpdatedAt,
		})
	}
	if value, ok := acu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldCreateBy,
		})
	}
	if value, ok := acu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldCreateBy,
		})
	}
	if value, ok := acu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldUpdateBy,
		})
	}
	if value, ok := acu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldUpdateBy,
		})
	}
	if value, ok := acu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldTenantId,
		})
	}
	if value, ok := acu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldTenantId,
		})
	}
	if acu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.UsersTable,
			Columns: []string{adchannel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !acu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.UsersTable,
			Columns: []string{adchannel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.UsersTable,
			Columns: []string{adchannel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.OrdersTable,
			Columns: []string{adchannel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !acu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.OrdersTable,
			Columns: []string{adchannel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.OrdersTable,
			Columns: []string{adchannel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AdChannelUpdateOne is the builder for updating a single AdChannel entity.
type AdChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdChannelMutation
}

// SetChannelName sets the "channelName" field.
func (acuo *AdChannelUpdateOne) SetChannelName(s string) *AdChannelUpdateOne {
	acuo.mutation.SetChannelName(s)
	return acuo
}

// SetNillableChannelName sets the "channelName" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableChannelName(s *string) *AdChannelUpdateOne {
	if s != nil {
		acuo.SetChannelName(*s)
	}
	return acuo
}

// ClearChannelName clears the value of the "channelName" field.
func (acuo *AdChannelUpdateOne) ClearChannelName() *AdChannelUpdateOne {
	acuo.mutation.ClearChannelName()
	return acuo
}

// SetNovelId sets the "novelId" field.
func (acuo *AdChannelUpdateOne) SetNovelId(i int64) *AdChannelUpdateOne {
	acuo.mutation.ResetNovelId()
	acuo.mutation.SetNovelId(i)
	return acuo
}

// SetNillableNovelId sets the "novelId" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableNovelId(i *int64) *AdChannelUpdateOne {
	if i != nil {
		acuo.SetNovelId(*i)
	}
	return acuo
}

// AddNovelId adds i to the "novelId" field.
func (acuo *AdChannelUpdateOne) AddNovelId(i int64) *AdChannelUpdateOne {
	acuo.mutation.AddNovelId(i)
	return acuo
}

// ClearNovelId clears the value of the "novelId" field.
func (acuo *AdChannelUpdateOne) ClearNovelId() *AdChannelUpdateOne {
	acuo.mutation.ClearNovelId()
	return acuo
}

// SetReg sets the "reg" field.
func (acuo *AdChannelUpdateOne) SetReg(i int64) *AdChannelUpdateOne {
	acuo.mutation.ResetReg()
	acuo.mutation.SetReg(i)
	return acuo
}

// SetNillableReg sets the "reg" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableReg(i *int64) *AdChannelUpdateOne {
	if i != nil {
		acuo.SetReg(*i)
	}
	return acuo
}

// AddReg adds i to the "reg" field.
func (acuo *AdChannelUpdateOne) AddReg(i int64) *AdChannelUpdateOne {
	acuo.mutation.AddReg(i)
	return acuo
}

// ClearReg clears the value of the "reg" field.
func (acuo *AdChannelUpdateOne) ClearReg() *AdChannelUpdateOne {
	acuo.mutation.ClearReg()
	return acuo
}

// SetPay sets the "pay" field.
func (acuo *AdChannelUpdateOne) SetPay(i int64) *AdChannelUpdateOne {
	acuo.mutation.ResetPay()
	acuo.mutation.SetPay(i)
	return acuo
}

// SetNillablePay sets the "pay" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillablePay(i *int64) *AdChannelUpdateOne {
	if i != nil {
		acuo.SetPay(*i)
	}
	return acuo
}

// AddPay adds i to the "pay" field.
func (acuo *AdChannelUpdateOne) AddPay(i int64) *AdChannelUpdateOne {
	acuo.mutation.AddPay(i)
	return acuo
}

// ClearPay clears the value of the "pay" field.
func (acuo *AdChannelUpdateOne) ClearPay() *AdChannelUpdateOne {
	acuo.mutation.ClearPay()
	return acuo
}

// SetNovelName sets the "novelName" field.
func (acuo *AdChannelUpdateOne) SetNovelName(s string) *AdChannelUpdateOne {
	acuo.mutation.SetNovelName(s)
	return acuo
}

// SetNillableNovelName sets the "novelName" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableNovelName(s *string) *AdChannelUpdateOne {
	if s != nil {
		acuo.SetNovelName(*s)
	}
	return acuo
}

// ClearNovelName clears the value of the "novelName" field.
func (acuo *AdChannelUpdateOne) ClearNovelName() *AdChannelUpdateOne {
	acuo.mutation.ClearNovelName()
	return acuo
}

// SetChapterId sets the "chapterId" field.
func (acuo *AdChannelUpdateOne) SetChapterId(i int64) *AdChannelUpdateOne {
	acuo.mutation.ResetChapterId()
	acuo.mutation.SetChapterId(i)
	return acuo
}

// SetNillableChapterId sets the "chapterId" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableChapterId(i *int64) *AdChannelUpdateOne {
	if i != nil {
		acuo.SetChapterId(*i)
	}
	return acuo
}

// AddChapterId adds i to the "chapterId" field.
func (acuo *AdChannelUpdateOne) AddChapterId(i int64) *AdChannelUpdateOne {
	acuo.mutation.AddChapterId(i)
	return acuo
}

// ClearChapterId clears the value of the "chapterId" field.
func (acuo *AdChannelUpdateOne) ClearChapterId() *AdChannelUpdateOne {
	acuo.mutation.ClearChapterId()
	return acuo
}

// SetChapterNum sets the "chapterNum" field.
func (acuo *AdChannelUpdateOne) SetChapterNum(i int32) *AdChannelUpdateOne {
	acuo.mutation.ResetChapterNum()
	acuo.mutation.SetChapterNum(i)
	return acuo
}

// SetNillableChapterNum sets the "chapterNum" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableChapterNum(i *int32) *AdChannelUpdateOne {
	if i != nil {
		acuo.SetChapterNum(*i)
	}
	return acuo
}

// AddChapterNum adds i to the "chapterNum" field.
func (acuo *AdChannelUpdateOne) AddChapterNum(i int32) *AdChannelUpdateOne {
	acuo.mutation.AddChapterNum(i)
	return acuo
}

// ClearChapterNum clears the value of the "chapterNum" field.
func (acuo *AdChannelUpdateOne) ClearChapterNum() *AdChannelUpdateOne {
	acuo.mutation.ClearChapterNum()
	return acuo
}

// SetAdType sets the "adType" field.
func (acuo *AdChannelUpdateOne) SetAdType(s string) *AdChannelUpdateOne {
	acuo.mutation.SetAdType(s)
	return acuo
}

// SetNillableAdType sets the "adType" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableAdType(s *string) *AdChannelUpdateOne {
	if s != nil {
		acuo.SetAdType(*s)
	}
	return acuo
}

// ClearAdType clears the value of the "adType" field.
func (acuo *AdChannelUpdateOne) ClearAdType() *AdChannelUpdateOne {
	acuo.mutation.ClearAdType()
	return acuo
}

// SetImg sets the "img" field.
func (acuo *AdChannelUpdateOne) SetImg(s string) *AdChannelUpdateOne {
	acuo.mutation.SetImg(s)
	return acuo
}

// SetNillableImg sets the "img" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableImg(s *string) *AdChannelUpdateOne {
	if s != nil {
		acuo.SetImg(*s)
	}
	return acuo
}

// ClearImg clears the value of the "img" field.
func (acuo *AdChannelUpdateOne) ClearImg() *AdChannelUpdateOne {
	acuo.mutation.ClearImg()
	return acuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (acuo *AdChannelUpdateOne) SetUpdatedAt(t time.Time) *AdChannelUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetCreateBy sets the "createBy" field.
func (acuo *AdChannelUpdateOne) SetCreateBy(i int64) *AdChannelUpdateOne {
	acuo.mutation.ResetCreateBy()
	acuo.mutation.SetCreateBy(i)
	return acuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableCreateBy(i *int64) *AdChannelUpdateOne {
	if i != nil {
		acuo.SetCreateBy(*i)
	}
	return acuo
}

// AddCreateBy adds i to the "createBy" field.
func (acuo *AdChannelUpdateOne) AddCreateBy(i int64) *AdChannelUpdateOne {
	acuo.mutation.AddCreateBy(i)
	return acuo
}

// SetUpdateBy sets the "updateBy" field.
func (acuo *AdChannelUpdateOne) SetUpdateBy(i int64) *AdChannelUpdateOne {
	acuo.mutation.ResetUpdateBy()
	acuo.mutation.SetUpdateBy(i)
	return acuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableUpdateBy(i *int64) *AdChannelUpdateOne {
	if i != nil {
		acuo.SetUpdateBy(*i)
	}
	return acuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (acuo *AdChannelUpdateOne) AddUpdateBy(i int64) *AdChannelUpdateOne {
	acuo.mutation.AddUpdateBy(i)
	return acuo
}

// SetTenantId sets the "tenantId" field.
func (acuo *AdChannelUpdateOne) SetTenantId(i int64) *AdChannelUpdateOne {
	acuo.mutation.ResetTenantId()
	acuo.mutation.SetTenantId(i)
	return acuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (acuo *AdChannelUpdateOne) SetNillableTenantId(i *int64) *AdChannelUpdateOne {
	if i != nil {
		acuo.SetTenantId(*i)
	}
	return acuo
}

// AddTenantId adds i to the "tenantId" field.
func (acuo *AdChannelUpdateOne) AddTenantId(i int64) *AdChannelUpdateOne {
	acuo.mutation.AddTenantId(i)
	return acuo
}

// AddUserIDs adds the "users" edge to the SocialUser entity by IDs.
func (acuo *AdChannelUpdateOne) AddUserIDs(ids ...int64) *AdChannelUpdateOne {
	acuo.mutation.AddUserIDs(ids...)
	return acuo
}

// AddUsers adds the "users" edges to the SocialUser entity.
func (acuo *AdChannelUpdateOne) AddUsers(s ...*SocialUser) *AdChannelUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return acuo.AddUserIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the PayOrder entity by IDs.
func (acuo *AdChannelUpdateOne) AddOrderIDs(ids ...int64) *AdChannelUpdateOne {
	acuo.mutation.AddOrderIDs(ids...)
	return acuo
}

// AddOrders adds the "orders" edges to the PayOrder entity.
func (acuo *AdChannelUpdateOne) AddOrders(p ...*PayOrder) *AdChannelUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return acuo.AddOrderIDs(ids...)
}

// Mutation returns the AdChannelMutation object of the builder.
func (acuo *AdChannelUpdateOne) Mutation() *AdChannelMutation {
	return acuo.mutation
}

// ClearUsers clears all "users" edges to the SocialUser entity.
func (acuo *AdChannelUpdateOne) ClearUsers() *AdChannelUpdateOne {
	acuo.mutation.ClearUsers()
	return acuo
}

// RemoveUserIDs removes the "users" edge to SocialUser entities by IDs.
func (acuo *AdChannelUpdateOne) RemoveUserIDs(ids ...int64) *AdChannelUpdateOne {
	acuo.mutation.RemoveUserIDs(ids...)
	return acuo
}

// RemoveUsers removes "users" edges to SocialUser entities.
func (acuo *AdChannelUpdateOne) RemoveUsers(s ...*SocialUser) *AdChannelUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return acuo.RemoveUserIDs(ids...)
}

// ClearOrders clears all "orders" edges to the PayOrder entity.
func (acuo *AdChannelUpdateOne) ClearOrders() *AdChannelUpdateOne {
	acuo.mutation.ClearOrders()
	return acuo
}

// RemoveOrderIDs removes the "orders" edge to PayOrder entities by IDs.
func (acuo *AdChannelUpdateOne) RemoveOrderIDs(ids ...int64) *AdChannelUpdateOne {
	acuo.mutation.RemoveOrderIDs(ids...)
	return acuo
}

// RemoveOrders removes "orders" edges to PayOrder entities.
func (acuo *AdChannelUpdateOne) RemoveOrders(p ...*PayOrder) *AdChannelUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return acuo.RemoveOrderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AdChannelUpdateOne) Select(field string, fields ...string) *AdChannelUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AdChannel entity.
func (acuo *AdChannelUpdateOne) Save(ctx context.Context) (*AdChannel, error) {
	var (
		err  error
		node *AdChannel
	)
	acuo.defaults()
	if len(acuo.hooks) == 0 {
		node, err = acuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdChannelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			acuo.mutation = mutation
			node, err = acuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acuo.hooks) - 1; i >= 0; i-- {
			if acuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AdChannelUpdateOne) SaveX(ctx context.Context) *AdChannel {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AdChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AdChannelUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AdChannelUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := adchannel.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

func (acuo *AdChannelUpdateOne) sqlSave(ctx context.Context) (_node *AdChannel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adchannel.Table,
			Columns: adchannel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: adchannel.FieldID,
			},
		},
	}
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AdChannel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adchannel.FieldID)
		for _, f := range fields {
			if !adchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.ChannelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchannel.FieldChannelName,
		})
	}
	if acuo.mutation.ChannelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adchannel.FieldChannelName,
		})
	}
	if value, ok := acuo.mutation.NovelId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldNovelId,
		})
	}
	if value, ok := acuo.mutation.AddedNovelId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldNovelId,
		})
	}
	if acuo.mutation.NovelIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: adchannel.FieldNovelId,
		})
	}
	if value, ok := acuo.mutation.Reg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldReg,
		})
	}
	if value, ok := acuo.mutation.AddedReg(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldReg,
		})
	}
	if acuo.mutation.RegCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: adchannel.FieldReg,
		})
	}
	if value, ok := acuo.mutation.Pay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldPay,
		})
	}
	if value, ok := acuo.mutation.AddedPay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldPay,
		})
	}
	if acuo.mutation.PayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: adchannel.FieldPay,
		})
	}
	if value, ok := acuo.mutation.NovelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchannel.FieldNovelName,
		})
	}
	if acuo.mutation.NovelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adchannel.FieldNovelName,
		})
	}
	if value, ok := acuo.mutation.ChapterId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldChapterId,
		})
	}
	if value, ok := acuo.mutation.AddedChapterId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldChapterId,
		})
	}
	if acuo.mutation.ChapterIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: adchannel.FieldChapterId,
		})
	}
	if value, ok := acuo.mutation.ChapterNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: adchannel.FieldChapterNum,
		})
	}
	if value, ok := acuo.mutation.AddedChapterNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: adchannel.FieldChapterNum,
		})
	}
	if acuo.mutation.ChapterNumCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: adchannel.FieldChapterNum,
		})
	}
	if value, ok := acuo.mutation.AdType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchannel.FieldAdType,
		})
	}
	if acuo.mutation.AdTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adchannel.FieldAdType,
		})
	}
	if value, ok := acuo.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adchannel.FieldImg,
		})
	}
	if acuo.mutation.ImgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: adchannel.FieldImg,
		})
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adchannel.FieldUpdatedAt,
		})
	}
	if value, ok := acuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldCreateBy,
		})
	}
	if value, ok := acuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldCreateBy,
		})
	}
	if value, ok := acuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldUpdateBy,
		})
	}
	if value, ok := acuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldUpdateBy,
		})
	}
	if value, ok := acuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldTenantId,
		})
	}
	if value, ok := acuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: adchannel.FieldTenantId,
		})
	}
	if acuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.UsersTable,
			Columns: []string{adchannel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !acuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.UsersTable,
			Columns: []string{adchannel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.UsersTable,
			Columns: []string{adchannel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: socialuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.OrdersTable,
			Columns: []string{adchannel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !acuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.OrdersTable,
			Columns: []string{adchannel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   adchannel.OrdersTable,
			Columns: []string{adchannel.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdChannel{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
