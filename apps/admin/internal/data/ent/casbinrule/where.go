// Code generated by entc, DO NOT EDIT.

package casbinrule

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PType applies equality check predicate on the "p_type" field. It's identical to PTypeEQ.
func PType(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPType), v))
	})
}

// V0 applies equality check predicate on the "v0" field. It's identical to V0EQ.
func V0(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV0), v))
	})
}

// V1 applies equality check predicate on the "v1" field. It's identical to V1EQ.
func V1(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV1), v))
	})
}

// V2 applies equality check predicate on the "v2" field. It's identical to V2EQ.
func V2(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV2), v))
	})
}

// V3 applies equality check predicate on the "v3" field. It's identical to V3EQ.
func V3(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV3), v))
	})
}

// V4 applies equality check predicate on the "v4" field. It's identical to V4EQ.
func V4(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV4), v))
	})
}

// V5 applies equality check predicate on the "v5" field. It's identical to V5EQ.
func V5(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV5), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// PTypeEQ applies the EQ predicate on the "p_type" field.
func PTypeEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPType), v))
	})
}

// PTypeNEQ applies the NEQ predicate on the "p_type" field.
func PTypeNEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPType), v))
	})
}

// PTypeIn applies the In predicate on the "p_type" field.
func PTypeIn(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPType), v...))
	})
}

// PTypeNotIn applies the NotIn predicate on the "p_type" field.
func PTypeNotIn(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPType), v...))
	})
}

// PTypeGT applies the GT predicate on the "p_type" field.
func PTypeGT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPType), v))
	})
}

// PTypeGTE applies the GTE predicate on the "p_type" field.
func PTypeGTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPType), v))
	})
}

// PTypeLT applies the LT predicate on the "p_type" field.
func PTypeLT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPType), v))
	})
}

// PTypeLTE applies the LTE predicate on the "p_type" field.
func PTypeLTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPType), v))
	})
}

// PTypeContains applies the Contains predicate on the "p_type" field.
func PTypeContains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPType), v))
	})
}

// PTypeHasPrefix applies the HasPrefix predicate on the "p_type" field.
func PTypeHasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPType), v))
	})
}

// PTypeHasSuffix applies the HasSuffix predicate on the "p_type" field.
func PTypeHasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPType), v))
	})
}

// PTypeIsNil applies the IsNil predicate on the "p_type" field.
func PTypeIsNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPType)))
	})
}

// PTypeNotNil applies the NotNil predicate on the "p_type" field.
func PTypeNotNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPType)))
	})
}

// PTypeEqualFold applies the EqualFold predicate on the "p_type" field.
func PTypeEqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPType), v))
	})
}

// PTypeContainsFold applies the ContainsFold predicate on the "p_type" field.
func PTypeContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPType), v))
	})
}

// V0EQ applies the EQ predicate on the "v0" field.
func V0EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV0), v))
	})
}

// V0NEQ applies the NEQ predicate on the "v0" field.
func V0NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldV0), v))
	})
}

// V0In applies the In predicate on the "v0" field.
func V0In(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldV0), v...))
	})
}

// V0NotIn applies the NotIn predicate on the "v0" field.
func V0NotIn(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldV0), v...))
	})
}

// V0GT applies the GT predicate on the "v0" field.
func V0GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldV0), v))
	})
}

// V0GTE applies the GTE predicate on the "v0" field.
func V0GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldV0), v))
	})
}

// V0LT applies the LT predicate on the "v0" field.
func V0LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldV0), v))
	})
}

// V0LTE applies the LTE predicate on the "v0" field.
func V0LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldV0), v))
	})
}

// V0Contains applies the Contains predicate on the "v0" field.
func V0Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldV0), v))
	})
}

// V0HasPrefix applies the HasPrefix predicate on the "v0" field.
func V0HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldV0), v))
	})
}

// V0HasSuffix applies the HasSuffix predicate on the "v0" field.
func V0HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldV0), v))
	})
}

// V0IsNil applies the IsNil predicate on the "v0" field.
func V0IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldV0)))
	})
}

// V0NotNil applies the NotNil predicate on the "v0" field.
func V0NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldV0)))
	})
}

// V0EqualFold applies the EqualFold predicate on the "v0" field.
func V0EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldV0), v))
	})
}

// V0ContainsFold applies the ContainsFold predicate on the "v0" field.
func V0ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldV0), v))
	})
}

// V1EQ applies the EQ predicate on the "v1" field.
func V1EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV1), v))
	})
}

// V1NEQ applies the NEQ predicate on the "v1" field.
func V1NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldV1), v))
	})
}

// V1In applies the In predicate on the "v1" field.
func V1In(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldV1), v...))
	})
}

// V1NotIn applies the NotIn predicate on the "v1" field.
func V1NotIn(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldV1), v...))
	})
}

// V1GT applies the GT predicate on the "v1" field.
func V1GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldV1), v))
	})
}

// V1GTE applies the GTE predicate on the "v1" field.
func V1GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldV1), v))
	})
}

// V1LT applies the LT predicate on the "v1" field.
func V1LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldV1), v))
	})
}

// V1LTE applies the LTE predicate on the "v1" field.
func V1LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldV1), v))
	})
}

// V1Contains applies the Contains predicate on the "v1" field.
func V1Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldV1), v))
	})
}

// V1HasPrefix applies the HasPrefix predicate on the "v1" field.
func V1HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldV1), v))
	})
}

// V1HasSuffix applies the HasSuffix predicate on the "v1" field.
func V1HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldV1), v))
	})
}

// V1IsNil applies the IsNil predicate on the "v1" field.
func V1IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldV1)))
	})
}

// V1NotNil applies the NotNil predicate on the "v1" field.
func V1NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldV1)))
	})
}

// V1EqualFold applies the EqualFold predicate on the "v1" field.
func V1EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldV1), v))
	})
}

// V1ContainsFold applies the ContainsFold predicate on the "v1" field.
func V1ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldV1), v))
	})
}

// V2EQ applies the EQ predicate on the "v2" field.
func V2EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV2), v))
	})
}

// V2NEQ applies the NEQ predicate on the "v2" field.
func V2NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldV2), v))
	})
}

// V2In applies the In predicate on the "v2" field.
func V2In(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldV2), v...))
	})
}

// V2NotIn applies the NotIn predicate on the "v2" field.
func V2NotIn(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldV2), v...))
	})
}

// V2GT applies the GT predicate on the "v2" field.
func V2GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldV2), v))
	})
}

// V2GTE applies the GTE predicate on the "v2" field.
func V2GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldV2), v))
	})
}

// V2LT applies the LT predicate on the "v2" field.
func V2LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldV2), v))
	})
}

// V2LTE applies the LTE predicate on the "v2" field.
func V2LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldV2), v))
	})
}

// V2Contains applies the Contains predicate on the "v2" field.
func V2Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldV2), v))
	})
}

// V2HasPrefix applies the HasPrefix predicate on the "v2" field.
func V2HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldV2), v))
	})
}

// V2HasSuffix applies the HasSuffix predicate on the "v2" field.
func V2HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldV2), v))
	})
}

// V2IsNil applies the IsNil predicate on the "v2" field.
func V2IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldV2)))
	})
}

// V2NotNil applies the NotNil predicate on the "v2" field.
func V2NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldV2)))
	})
}

// V2EqualFold applies the EqualFold predicate on the "v2" field.
func V2EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldV2), v))
	})
}

// V2ContainsFold applies the ContainsFold predicate on the "v2" field.
func V2ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldV2), v))
	})
}

// V3EQ applies the EQ predicate on the "v3" field.
func V3EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV3), v))
	})
}

// V3NEQ applies the NEQ predicate on the "v3" field.
func V3NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldV3), v))
	})
}

// V3In applies the In predicate on the "v3" field.
func V3In(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldV3), v...))
	})
}

// V3NotIn applies the NotIn predicate on the "v3" field.
func V3NotIn(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldV3), v...))
	})
}

// V3GT applies the GT predicate on the "v3" field.
func V3GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldV3), v))
	})
}

// V3GTE applies the GTE predicate on the "v3" field.
func V3GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldV3), v))
	})
}

// V3LT applies the LT predicate on the "v3" field.
func V3LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldV3), v))
	})
}

// V3LTE applies the LTE predicate on the "v3" field.
func V3LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldV3), v))
	})
}

// V3Contains applies the Contains predicate on the "v3" field.
func V3Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldV3), v))
	})
}

// V3HasPrefix applies the HasPrefix predicate on the "v3" field.
func V3HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldV3), v))
	})
}

// V3HasSuffix applies the HasSuffix predicate on the "v3" field.
func V3HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldV3), v))
	})
}

// V3IsNil applies the IsNil predicate on the "v3" field.
func V3IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldV3)))
	})
}

// V3NotNil applies the NotNil predicate on the "v3" field.
func V3NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldV3)))
	})
}

// V3EqualFold applies the EqualFold predicate on the "v3" field.
func V3EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldV3), v))
	})
}

// V3ContainsFold applies the ContainsFold predicate on the "v3" field.
func V3ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldV3), v))
	})
}

// V4EQ applies the EQ predicate on the "v4" field.
func V4EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV4), v))
	})
}

// V4NEQ applies the NEQ predicate on the "v4" field.
func V4NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldV4), v))
	})
}

// V4In applies the In predicate on the "v4" field.
func V4In(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldV4), v...))
	})
}

// V4NotIn applies the NotIn predicate on the "v4" field.
func V4NotIn(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldV4), v...))
	})
}

// V4GT applies the GT predicate on the "v4" field.
func V4GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldV4), v))
	})
}

// V4GTE applies the GTE predicate on the "v4" field.
func V4GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldV4), v))
	})
}

// V4LT applies the LT predicate on the "v4" field.
func V4LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldV4), v))
	})
}

// V4LTE applies the LTE predicate on the "v4" field.
func V4LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldV4), v))
	})
}

// V4Contains applies the Contains predicate on the "v4" field.
func V4Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldV4), v))
	})
}

// V4HasPrefix applies the HasPrefix predicate on the "v4" field.
func V4HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldV4), v))
	})
}

// V4HasSuffix applies the HasSuffix predicate on the "v4" field.
func V4HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldV4), v))
	})
}

// V4IsNil applies the IsNil predicate on the "v4" field.
func V4IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldV4)))
	})
}

// V4NotNil applies the NotNil predicate on the "v4" field.
func V4NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldV4)))
	})
}

// V4EqualFold applies the EqualFold predicate on the "v4" field.
func V4EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldV4), v))
	})
}

// V4ContainsFold applies the ContainsFold predicate on the "v4" field.
func V4ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldV4), v))
	})
}

// V5EQ applies the EQ predicate on the "v5" field.
func V5EQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldV5), v))
	})
}

// V5NEQ applies the NEQ predicate on the "v5" field.
func V5NEQ(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldV5), v))
	})
}

// V5In applies the In predicate on the "v5" field.
func V5In(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldV5), v...))
	})
}

// V5NotIn applies the NotIn predicate on the "v5" field.
func V5NotIn(vs ...string) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldV5), v...))
	})
}

// V5GT applies the GT predicate on the "v5" field.
func V5GT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldV5), v))
	})
}

// V5GTE applies the GTE predicate on the "v5" field.
func V5GTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldV5), v))
	})
}

// V5LT applies the LT predicate on the "v5" field.
func V5LT(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldV5), v))
	})
}

// V5LTE applies the LTE predicate on the "v5" field.
func V5LTE(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldV5), v))
	})
}

// V5Contains applies the Contains predicate on the "v5" field.
func V5Contains(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldV5), v))
	})
}

// V5HasPrefix applies the HasPrefix predicate on the "v5" field.
func V5HasPrefix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldV5), v))
	})
}

// V5HasSuffix applies the HasSuffix predicate on the "v5" field.
func V5HasSuffix(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldV5), v))
	})
}

// V5IsNil applies the IsNil predicate on the "v5" field.
func V5IsNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldV5)))
	})
}

// V5NotNil applies the NotNil predicate on the "v5" field.
func V5NotNil() predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldV5)))
	})
}

// V5EqualFold applies the EqualFold predicate on the "v5" field.
func V5EqualFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldV5), v))
	})
}

// V5ContainsFold applies the ContainsFold predicate on the "v5" field.
func V5ContainsFold(v string) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldV5), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.CasbinRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CasbinRule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CasbinRule) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CasbinRule) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CasbinRule) predicate.CasbinRule {
	return predicate.CasbinRule(func(s *sql.Selector) {
		p(s.Not())
	})
}
