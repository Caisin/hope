// Code generated by entc, DO NOT EDIT.

package sysjob

import (
	"hope/apps/admin/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// JobName applies equality check predicate on the "jobName" field. It's identical to JobNameEQ.
func JobName(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobName), v))
	})
}

// JobGroup applies equality check predicate on the "jobGroup" field. It's identical to JobGroupEQ.
func JobGroup(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobGroup), v))
	})
}

// JobType applies equality check predicate on the "jobType" field. It's identical to JobTypeEQ.
func JobType(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobType), v))
	})
}

// CronExpression applies equality check predicate on the "cronExpression" field. It's identical to CronExpressionEQ.
func CronExpression(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCronExpression), v))
	})
}

// InvokeTarget applies equality check predicate on the "invokeTarget" field. It's identical to InvokeTargetEQ.
func InvokeTarget(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInvokeTarget), v))
	})
}

// Args applies equality check predicate on the "args" field. It's identical to ArgsEQ.
func Args(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArgs), v))
	})
}

// ExecPolicy applies equality check predicate on the "execPolicy" field. It's identical to ExecPolicyEQ.
func ExecPolicy(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExecPolicy), v))
	})
}

// Concurrent applies equality check predicate on the "concurrent" field. It's identical to ConcurrentEQ.
func Concurrent(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConcurrent), v))
	})
}

// EntryId applies equality check predicate on the "entryId" field. It's identical to EntryIdEQ.
func EntryId(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryId), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreateBy applies equality check predicate on the "createBy" field. It's identical to CreateByEQ.
func CreateBy(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// UpdateBy applies equality check predicate on the "updateBy" field. It's identical to UpdateByEQ.
func UpdateBy(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// TenantId applies equality check predicate on the "tenantId" field. It's identical to TenantIdEQ.
func TenantId(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// JobNameEQ applies the EQ predicate on the "jobName" field.
func JobNameEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobName), v))
	})
}

// JobNameNEQ applies the NEQ predicate on the "jobName" field.
func JobNameNEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJobName), v))
	})
}

// JobNameIn applies the In predicate on the "jobName" field.
func JobNameIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJobName), v...))
	})
}

// JobNameNotIn applies the NotIn predicate on the "jobName" field.
func JobNameNotIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJobName), v...))
	})
}

// JobNameGT applies the GT predicate on the "jobName" field.
func JobNameGT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJobName), v))
	})
}

// JobNameGTE applies the GTE predicate on the "jobName" field.
func JobNameGTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJobName), v))
	})
}

// JobNameLT applies the LT predicate on the "jobName" field.
func JobNameLT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJobName), v))
	})
}

// JobNameLTE applies the LTE predicate on the "jobName" field.
func JobNameLTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJobName), v))
	})
}

// JobNameContains applies the Contains predicate on the "jobName" field.
func JobNameContains(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJobName), v))
	})
}

// JobNameHasPrefix applies the HasPrefix predicate on the "jobName" field.
func JobNameHasPrefix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJobName), v))
	})
}

// JobNameHasSuffix applies the HasSuffix predicate on the "jobName" field.
func JobNameHasSuffix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJobName), v))
	})
}

// JobNameIsNil applies the IsNil predicate on the "jobName" field.
func JobNameIsNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJobName)))
	})
}

// JobNameNotNil applies the NotNil predicate on the "jobName" field.
func JobNameNotNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJobName)))
	})
}

// JobNameEqualFold applies the EqualFold predicate on the "jobName" field.
func JobNameEqualFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJobName), v))
	})
}

// JobNameContainsFold applies the ContainsFold predicate on the "jobName" field.
func JobNameContainsFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJobName), v))
	})
}

// JobGroupEQ applies the EQ predicate on the "jobGroup" field.
func JobGroupEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobGroup), v))
	})
}

// JobGroupNEQ applies the NEQ predicate on the "jobGroup" field.
func JobGroupNEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJobGroup), v))
	})
}

// JobGroupIn applies the In predicate on the "jobGroup" field.
func JobGroupIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJobGroup), v...))
	})
}

// JobGroupNotIn applies the NotIn predicate on the "jobGroup" field.
func JobGroupNotIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJobGroup), v...))
	})
}

// JobGroupGT applies the GT predicate on the "jobGroup" field.
func JobGroupGT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJobGroup), v))
	})
}

// JobGroupGTE applies the GTE predicate on the "jobGroup" field.
func JobGroupGTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJobGroup), v))
	})
}

// JobGroupLT applies the LT predicate on the "jobGroup" field.
func JobGroupLT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJobGroup), v))
	})
}

// JobGroupLTE applies the LTE predicate on the "jobGroup" field.
func JobGroupLTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJobGroup), v))
	})
}

// JobGroupContains applies the Contains predicate on the "jobGroup" field.
func JobGroupContains(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJobGroup), v))
	})
}

// JobGroupHasPrefix applies the HasPrefix predicate on the "jobGroup" field.
func JobGroupHasPrefix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJobGroup), v))
	})
}

// JobGroupHasSuffix applies the HasSuffix predicate on the "jobGroup" field.
func JobGroupHasSuffix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJobGroup), v))
	})
}

// JobGroupIsNil applies the IsNil predicate on the "jobGroup" field.
func JobGroupIsNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJobGroup)))
	})
}

// JobGroupNotNil applies the NotNil predicate on the "jobGroup" field.
func JobGroupNotNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJobGroup)))
	})
}

// JobGroupEqualFold applies the EqualFold predicate on the "jobGroup" field.
func JobGroupEqualFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJobGroup), v))
	})
}

// JobGroupContainsFold applies the ContainsFold predicate on the "jobGroup" field.
func JobGroupContainsFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJobGroup), v))
	})
}

// JobTypeEQ applies the EQ predicate on the "jobType" field.
func JobTypeEQ(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJobType), v))
	})
}

// JobTypeNEQ applies the NEQ predicate on the "jobType" field.
func JobTypeNEQ(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJobType), v))
	})
}

// JobTypeIn applies the In predicate on the "jobType" field.
func JobTypeIn(vs ...int32) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJobType), v...))
	})
}

// JobTypeNotIn applies the NotIn predicate on the "jobType" field.
func JobTypeNotIn(vs ...int32) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJobType), v...))
	})
}

// JobTypeGT applies the GT predicate on the "jobType" field.
func JobTypeGT(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJobType), v))
	})
}

// JobTypeGTE applies the GTE predicate on the "jobType" field.
func JobTypeGTE(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJobType), v))
	})
}

// JobTypeLT applies the LT predicate on the "jobType" field.
func JobTypeLT(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJobType), v))
	})
}

// JobTypeLTE applies the LTE predicate on the "jobType" field.
func JobTypeLTE(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJobType), v))
	})
}

// JobTypeIsNil applies the IsNil predicate on the "jobType" field.
func JobTypeIsNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJobType)))
	})
}

// JobTypeNotNil applies the NotNil predicate on the "jobType" field.
func JobTypeNotNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJobType)))
	})
}

// CronExpressionEQ applies the EQ predicate on the "cronExpression" field.
func CronExpressionEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCronExpression), v))
	})
}

// CronExpressionNEQ applies the NEQ predicate on the "cronExpression" field.
func CronExpressionNEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCronExpression), v))
	})
}

// CronExpressionIn applies the In predicate on the "cronExpression" field.
func CronExpressionIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCronExpression), v...))
	})
}

// CronExpressionNotIn applies the NotIn predicate on the "cronExpression" field.
func CronExpressionNotIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCronExpression), v...))
	})
}

// CronExpressionGT applies the GT predicate on the "cronExpression" field.
func CronExpressionGT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCronExpression), v))
	})
}

// CronExpressionGTE applies the GTE predicate on the "cronExpression" field.
func CronExpressionGTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCronExpression), v))
	})
}

// CronExpressionLT applies the LT predicate on the "cronExpression" field.
func CronExpressionLT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCronExpression), v))
	})
}

// CronExpressionLTE applies the LTE predicate on the "cronExpression" field.
func CronExpressionLTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCronExpression), v))
	})
}

// CronExpressionContains applies the Contains predicate on the "cronExpression" field.
func CronExpressionContains(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCronExpression), v))
	})
}

// CronExpressionHasPrefix applies the HasPrefix predicate on the "cronExpression" field.
func CronExpressionHasPrefix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCronExpression), v))
	})
}

// CronExpressionHasSuffix applies the HasSuffix predicate on the "cronExpression" field.
func CronExpressionHasSuffix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCronExpression), v))
	})
}

// CronExpressionIsNil applies the IsNil predicate on the "cronExpression" field.
func CronExpressionIsNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCronExpression)))
	})
}

// CronExpressionNotNil applies the NotNil predicate on the "cronExpression" field.
func CronExpressionNotNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCronExpression)))
	})
}

// CronExpressionEqualFold applies the EqualFold predicate on the "cronExpression" field.
func CronExpressionEqualFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCronExpression), v))
	})
}

// CronExpressionContainsFold applies the ContainsFold predicate on the "cronExpression" field.
func CronExpressionContainsFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCronExpression), v))
	})
}

// InvokeTargetEQ applies the EQ predicate on the "invokeTarget" field.
func InvokeTargetEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetNEQ applies the NEQ predicate on the "invokeTarget" field.
func InvokeTargetNEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetIn applies the In predicate on the "invokeTarget" field.
func InvokeTargetIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInvokeTarget), v...))
	})
}

// InvokeTargetNotIn applies the NotIn predicate on the "invokeTarget" field.
func InvokeTargetNotIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInvokeTarget), v...))
	})
}

// InvokeTargetGT applies the GT predicate on the "invokeTarget" field.
func InvokeTargetGT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetGTE applies the GTE predicate on the "invokeTarget" field.
func InvokeTargetGTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetLT applies the LT predicate on the "invokeTarget" field.
func InvokeTargetLT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetLTE applies the LTE predicate on the "invokeTarget" field.
func InvokeTargetLTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetContains applies the Contains predicate on the "invokeTarget" field.
func InvokeTargetContains(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetHasPrefix applies the HasPrefix predicate on the "invokeTarget" field.
func InvokeTargetHasPrefix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetHasSuffix applies the HasSuffix predicate on the "invokeTarget" field.
func InvokeTargetHasSuffix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetIsNil applies the IsNil predicate on the "invokeTarget" field.
func InvokeTargetIsNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInvokeTarget)))
	})
}

// InvokeTargetNotNil applies the NotNil predicate on the "invokeTarget" field.
func InvokeTargetNotNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInvokeTarget)))
	})
}

// InvokeTargetEqualFold applies the EqualFold predicate on the "invokeTarget" field.
func InvokeTargetEqualFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInvokeTarget), v))
	})
}

// InvokeTargetContainsFold applies the ContainsFold predicate on the "invokeTarget" field.
func InvokeTargetContainsFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInvokeTarget), v))
	})
}

// ArgsEQ applies the EQ predicate on the "args" field.
func ArgsEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArgs), v))
	})
}

// ArgsNEQ applies the NEQ predicate on the "args" field.
func ArgsNEQ(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArgs), v))
	})
}

// ArgsIn applies the In predicate on the "args" field.
func ArgsIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArgs), v...))
	})
}

// ArgsNotIn applies the NotIn predicate on the "args" field.
func ArgsNotIn(vs ...string) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArgs), v...))
	})
}

// ArgsGT applies the GT predicate on the "args" field.
func ArgsGT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArgs), v))
	})
}

// ArgsGTE applies the GTE predicate on the "args" field.
func ArgsGTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArgs), v))
	})
}

// ArgsLT applies the LT predicate on the "args" field.
func ArgsLT(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArgs), v))
	})
}

// ArgsLTE applies the LTE predicate on the "args" field.
func ArgsLTE(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArgs), v))
	})
}

// ArgsContains applies the Contains predicate on the "args" field.
func ArgsContains(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArgs), v))
	})
}

// ArgsHasPrefix applies the HasPrefix predicate on the "args" field.
func ArgsHasPrefix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArgs), v))
	})
}

// ArgsHasSuffix applies the HasSuffix predicate on the "args" field.
func ArgsHasSuffix(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArgs), v))
	})
}

// ArgsIsNil applies the IsNil predicate on the "args" field.
func ArgsIsNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArgs)))
	})
}

// ArgsNotNil applies the NotNil predicate on the "args" field.
func ArgsNotNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArgs)))
	})
}

// ArgsEqualFold applies the EqualFold predicate on the "args" field.
func ArgsEqualFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArgs), v))
	})
}

// ArgsContainsFold applies the ContainsFold predicate on the "args" field.
func ArgsContainsFold(v string) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArgs), v))
	})
}

// ExecPolicyEQ applies the EQ predicate on the "execPolicy" field.
func ExecPolicyEQ(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExecPolicy), v))
	})
}

// ExecPolicyNEQ applies the NEQ predicate on the "execPolicy" field.
func ExecPolicyNEQ(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExecPolicy), v))
	})
}

// ExecPolicyIn applies the In predicate on the "execPolicy" field.
func ExecPolicyIn(vs ...int32) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExecPolicy), v...))
	})
}

// ExecPolicyNotIn applies the NotIn predicate on the "execPolicy" field.
func ExecPolicyNotIn(vs ...int32) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExecPolicy), v...))
	})
}

// ExecPolicyGT applies the GT predicate on the "execPolicy" field.
func ExecPolicyGT(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExecPolicy), v))
	})
}

// ExecPolicyGTE applies the GTE predicate on the "execPolicy" field.
func ExecPolicyGTE(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExecPolicy), v))
	})
}

// ExecPolicyLT applies the LT predicate on the "execPolicy" field.
func ExecPolicyLT(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExecPolicy), v))
	})
}

// ExecPolicyLTE applies the LTE predicate on the "execPolicy" field.
func ExecPolicyLTE(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExecPolicy), v))
	})
}

// ExecPolicyIsNil applies the IsNil predicate on the "execPolicy" field.
func ExecPolicyIsNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExecPolicy)))
	})
}

// ExecPolicyNotNil applies the NotNil predicate on the "execPolicy" field.
func ExecPolicyNotNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExecPolicy)))
	})
}

// ConcurrentEQ applies the EQ predicate on the "concurrent" field.
func ConcurrentEQ(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConcurrent), v))
	})
}

// ConcurrentNEQ applies the NEQ predicate on the "concurrent" field.
func ConcurrentNEQ(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConcurrent), v))
	})
}

// ConcurrentIn applies the In predicate on the "concurrent" field.
func ConcurrentIn(vs ...int32) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConcurrent), v...))
	})
}

// ConcurrentNotIn applies the NotIn predicate on the "concurrent" field.
func ConcurrentNotIn(vs ...int32) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConcurrent), v...))
	})
}

// ConcurrentGT applies the GT predicate on the "concurrent" field.
func ConcurrentGT(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConcurrent), v))
	})
}

// ConcurrentGTE applies the GTE predicate on the "concurrent" field.
func ConcurrentGTE(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConcurrent), v))
	})
}

// ConcurrentLT applies the LT predicate on the "concurrent" field.
func ConcurrentLT(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConcurrent), v))
	})
}

// ConcurrentLTE applies the LTE predicate on the "concurrent" field.
func ConcurrentLTE(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConcurrent), v))
	})
}

// ConcurrentIsNil applies the IsNil predicate on the "concurrent" field.
func ConcurrentIsNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConcurrent)))
	})
}

// ConcurrentNotNil applies the NotNil predicate on the "concurrent" field.
func ConcurrentNotNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConcurrent)))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// EntryIdEQ applies the EQ predicate on the "entryId" field.
func EntryIdEQ(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryId), v))
	})
}

// EntryIdNEQ applies the NEQ predicate on the "entryId" field.
func EntryIdNEQ(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntryId), v))
	})
}

// EntryIdIn applies the In predicate on the "entryId" field.
func EntryIdIn(vs ...int32) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEntryId), v...))
	})
}

// EntryIdNotIn applies the NotIn predicate on the "entryId" field.
func EntryIdNotIn(vs ...int32) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEntryId), v...))
	})
}

// EntryIdGT applies the GT predicate on the "entryId" field.
func EntryIdGT(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntryId), v))
	})
}

// EntryIdGTE applies the GTE predicate on the "entryId" field.
func EntryIdGTE(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntryId), v))
	})
}

// EntryIdLT applies the LT predicate on the "entryId" field.
func EntryIdLT(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntryId), v))
	})
}

// EntryIdLTE applies the LTE predicate on the "entryId" field.
func EntryIdLTE(v int32) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntryId), v))
	})
}

// EntryIdIsNil applies the IsNil predicate on the "entryId" field.
func EntryIdIsNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEntryId)))
	})
}

// EntryIdNotNil applies the NotNil predicate on the "entryId" field.
func EntryIdNotNil() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEntryId)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreateByEQ applies the EQ predicate on the "createBy" field.
func CreateByEQ(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateBy), v))
	})
}

// CreateByNEQ applies the NEQ predicate on the "createBy" field.
func CreateByNEQ(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateBy), v))
	})
}

// CreateByIn applies the In predicate on the "createBy" field.
func CreateByIn(vs ...int64) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateBy), v...))
	})
}

// CreateByNotIn applies the NotIn predicate on the "createBy" field.
func CreateByNotIn(vs ...int64) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateBy), v...))
	})
}

// CreateByGT applies the GT predicate on the "createBy" field.
func CreateByGT(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateBy), v))
	})
}

// CreateByGTE applies the GTE predicate on the "createBy" field.
func CreateByGTE(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateBy), v))
	})
}

// CreateByLT applies the LT predicate on the "createBy" field.
func CreateByLT(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateBy), v))
	})
}

// CreateByLTE applies the LTE predicate on the "createBy" field.
func CreateByLTE(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateBy), v))
	})
}

// UpdateByEQ applies the EQ predicate on the "updateBy" field.
func UpdateByEQ(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByNEQ applies the NEQ predicate on the "updateBy" field.
func UpdateByNEQ(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateBy), v))
	})
}

// UpdateByIn applies the In predicate on the "updateBy" field.
func UpdateByIn(vs ...int64) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByNotIn applies the NotIn predicate on the "updateBy" field.
func UpdateByNotIn(vs ...int64) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateBy), v...))
	})
}

// UpdateByGT applies the GT predicate on the "updateBy" field.
func UpdateByGT(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByGTE applies the GTE predicate on the "updateBy" field.
func UpdateByGTE(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLT applies the LT predicate on the "updateBy" field.
func UpdateByLT(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateBy), v))
	})
}

// UpdateByLTE applies the LTE predicate on the "updateBy" field.
func UpdateByLTE(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateBy), v))
	})
}

// TenantIdEQ applies the EQ predicate on the "tenantId" field.
func TenantIdEQ(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantId), v))
	})
}

// TenantIdNEQ applies the NEQ predicate on the "tenantId" field.
func TenantIdNEQ(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantId), v))
	})
}

// TenantIdIn applies the In predicate on the "tenantId" field.
func TenantIdIn(vs ...int64) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantId), v...))
	})
}

// TenantIdNotIn applies the NotIn predicate on the "tenantId" field.
func TenantIdNotIn(vs ...int64) predicate.SysJob {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysJob(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantId), v...))
	})
}

// TenantIdGT applies the GT predicate on the "tenantId" field.
func TenantIdGT(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantId), v))
	})
}

// TenantIdGTE applies the GTE predicate on the "tenantId" field.
func TenantIdGTE(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantId), v))
	})
}

// TenantIdLT applies the LT predicate on the "tenantId" field.
func TenantIdLT(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantId), v))
	})
}

// TenantIdLTE applies the LTE predicate on the "tenantId" field.
func TenantIdLTE(v int64) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantId), v))
	})
}

// HasLogs applies the HasEdge predicate on the "logs" edge.
func HasLogs() predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LogsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogsWith applies the HasEdge predicate on the "logs" edge with a given conditions (other predicates).
func HasLogsWith(preds ...predicate.SysJobLog) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LogsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysJob) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysJob) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysJob) predicate.SysJob {
	return predicate.SysJob(func(s *sql.Selector) {
		p(s.Not())
	})
}
