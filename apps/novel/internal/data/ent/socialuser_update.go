// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"hope/apps/novel/internal/data/ent/adchangelog"
	"hope/apps/novel/internal/data/ent/adchannel"
	"hope/apps/novel/internal/data/ent/ambalance"
	"hope/apps/novel/internal/data/ent/assetchangelog"
	"hope/apps/novel/internal/data/ent/listenrecord"
	"hope/apps/novel/internal/data/ent/novelautobuy"
	"hope/apps/novel/internal/data/ent/novelbookshelf"
	"hope/apps/novel/internal/data/ent/novelbuychapterrecord"
	"hope/apps/novel/internal/data/ent/novelbuyrecord"
	"hope/apps/novel/internal/data/ent/novelcomment"
	"hope/apps/novel/internal/data/ent/payorder"
	"hope/apps/novel/internal/data/ent/predicate"
	"hope/apps/novel/internal/data/ent/socialuser"
	"hope/apps/novel/internal/data/ent/tasklog"
	"hope/apps/novel/internal/data/ent/usermsg"
	"hope/apps/novel/internal/data/ent/vipuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SocialUserUpdate is the builder for updating SocialUser entities.
type SocialUserUpdate struct {
	config
	hooks    []Hook
	mutation *SocialUserMutation
}

// Where appends a list predicates to the SocialUserUpdate builder.
func (suu *SocialUserUpdate) Where(ps ...predicate.SocialUser) *SocialUserUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetUserId sets the "userId" field.
func (suu *SocialUserUpdate) SetUserId(i int64) *SocialUserUpdate {
	suu.mutation.ResetUserId()
	suu.mutation.SetUserId(i)
	return suu
}

// AddUserId adds i to the "userId" field.
func (suu *SocialUserUpdate) AddUserId(i int64) *SocialUserUpdate {
	suu.mutation.AddUserId(i)
	return suu
}

// SetUnionid sets the "unionid" field.
func (suu *SocialUserUpdate) SetUnionid(s string) *SocialUserUpdate {
	suu.mutation.SetUnionid(s)
	return suu
}

// SetNillableUnionid sets the "unionid" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableUnionid(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetUnionid(*s)
	}
	return suu
}

// ClearUnionid clears the value of the "unionid" field.
func (suu *SocialUserUpdate) ClearUnionid() *SocialUserUpdate {
	suu.mutation.ClearUnionid()
	return suu
}

// SetToken sets the "token" field.
func (suu *SocialUserUpdate) SetToken(s string) *SocialUserUpdate {
	suu.mutation.SetToken(s)
	return suu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableToken(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetToken(*s)
	}
	return suu
}

// ClearToken clears the value of the "token" field.
func (suu *SocialUserUpdate) ClearToken() *SocialUserUpdate {
	suu.mutation.ClearToken()
	return suu
}

// SetOpenid sets the "openid" field.
func (suu *SocialUserUpdate) SetOpenid(s string) *SocialUserUpdate {
	suu.mutation.SetOpenid(s)
	return suu
}

// SetNillableOpenid sets the "openid" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableOpenid(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetOpenid(*s)
	}
	return suu
}

// ClearOpenid clears the value of the "openid" field.
func (suu *SocialUserUpdate) ClearOpenid() *SocialUserUpdate {
	suu.mutation.ClearOpenid()
	return suu
}

// SetRoutineOpenid sets the "routineOpenid" field.
func (suu *SocialUserUpdate) SetRoutineOpenid(s string) *SocialUserUpdate {
	suu.mutation.SetRoutineOpenid(s)
	return suu
}

// SetNillableRoutineOpenid sets the "routineOpenid" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableRoutineOpenid(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetRoutineOpenid(*s)
	}
	return suu
}

// ClearRoutineOpenid clears the value of the "routineOpenid" field.
func (suu *SocialUserUpdate) ClearRoutineOpenid() *SocialUserUpdate {
	suu.mutation.ClearRoutineOpenid()
	return suu
}

// SetUserName sets the "userName" field.
func (suu *SocialUserUpdate) SetUserName(s string) *SocialUserUpdate {
	suu.mutation.SetUserName(s)
	return suu
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableUserName(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetUserName(*s)
	}
	return suu
}

// ClearUserName clears the value of the "userName" field.
func (suu *SocialUserUpdate) ClearUserName() *SocialUserUpdate {
	suu.mutation.ClearUserName()
	return suu
}

// SetNickName sets the "nickName" field.
func (suu *SocialUserUpdate) SetNickName(s string) *SocialUserUpdate {
	suu.mutation.SetNickName(s)
	return suu
}

// SetNillableNickName sets the "nickName" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableNickName(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetNickName(*s)
	}
	return suu
}

// ClearNickName clears the value of the "nickName" field.
func (suu *SocialUserUpdate) ClearNickName() *SocialUserUpdate {
	suu.mutation.ClearNickName()
	return suu
}

// SetBirthday sets the "birthday" field.
func (suu *SocialUserUpdate) SetBirthday(t time.Time) *SocialUserUpdate {
	suu.mutation.SetBirthday(t)
	return suu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableBirthday(t *time.Time) *SocialUserUpdate {
	if t != nil {
		suu.SetBirthday(*t)
	}
	return suu
}

// ClearBirthday clears the value of the "birthday" field.
func (suu *SocialUserUpdate) ClearBirthday() *SocialUserUpdate {
	suu.mutation.ClearBirthday()
	return suu
}

// SetPhone sets the "phone" field.
func (suu *SocialUserUpdate) SetPhone(s string) *SocialUserUpdate {
	suu.mutation.SetPhone(s)
	return suu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillablePhone(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetPhone(*s)
	}
	return suu
}

// ClearPhone clears the value of the "phone" field.
func (suu *SocialUserUpdate) ClearPhone() *SocialUserUpdate {
	suu.mutation.ClearPhone()
	return suu
}

// SetEmail sets the "email" field.
func (suu *SocialUserUpdate) SetEmail(s string) *SocialUserUpdate {
	suu.mutation.SetEmail(s)
	return suu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableEmail(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetEmail(*s)
	}
	return suu
}

// ClearEmail clears the value of the "email" field.
func (suu *SocialUserUpdate) ClearEmail() *SocialUserUpdate {
	suu.mutation.ClearEmail()
	return suu
}

// SetPassword sets the "password" field.
func (suu *SocialUserUpdate) SetPassword(s string) *SocialUserUpdate {
	suu.mutation.SetPassword(s)
	return suu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillablePassword(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetPassword(*s)
	}
	return suu
}

// ClearPassword clears the value of the "password" field.
func (suu *SocialUserUpdate) ClearPassword() *SocialUserUpdate {
	suu.mutation.ClearPassword()
	return suu
}

// SetAvatar sets the "avatar" field.
func (suu *SocialUserUpdate) SetAvatar(s string) *SocialUserUpdate {
	suu.mutation.SetAvatar(s)
	return suu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableAvatar(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetAvatar(*s)
	}
	return suu
}

// ClearAvatar clears the value of the "avatar" field.
func (suu *SocialUserUpdate) ClearAvatar() *SocialUserUpdate {
	suu.mutation.ClearAvatar()
	return suu
}

// SetSex sets the "sex" field.
func (suu *SocialUserUpdate) SetSex(i int32) *SocialUserUpdate {
	suu.mutation.ResetSex()
	suu.mutation.SetSex(i)
	return suu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableSex(i *int32) *SocialUserUpdate {
	if i != nil {
		suu.SetSex(*i)
	}
	return suu
}

// AddSex adds i to the "sex" field.
func (suu *SocialUserUpdate) AddSex(i int32) *SocialUserUpdate {
	suu.mutation.AddSex(i)
	return suu
}

// ClearSex clears the value of the "sex" field.
func (suu *SocialUserUpdate) ClearSex() *SocialUserUpdate {
	suu.mutation.ClearSex()
	return suu
}

// SetRegion sets the "region" field.
func (suu *SocialUserUpdate) SetRegion(s string) *SocialUserUpdate {
	suu.mutation.SetRegion(s)
	return suu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableRegion(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetRegion(*s)
	}
	return suu
}

// ClearRegion clears the value of the "region" field.
func (suu *SocialUserUpdate) ClearRegion() *SocialUserUpdate {
	suu.mutation.ClearRegion()
	return suu
}

// SetCity sets the "city" field.
func (suu *SocialUserUpdate) SetCity(s string) *SocialUserUpdate {
	suu.mutation.SetCity(s)
	return suu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableCity(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetCity(*s)
	}
	return suu
}

// ClearCity clears the value of the "city" field.
func (suu *SocialUserUpdate) ClearCity() *SocialUserUpdate {
	suu.mutation.ClearCity()
	return suu
}

// SetLanguage sets the "language" field.
func (suu *SocialUserUpdate) SetLanguage(s string) *SocialUserUpdate {
	suu.mutation.SetLanguage(s)
	return suu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableLanguage(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetLanguage(*s)
	}
	return suu
}

// ClearLanguage clears the value of the "language" field.
func (suu *SocialUserUpdate) ClearLanguage() *SocialUserUpdate {
	suu.mutation.ClearLanguage()
	return suu
}

// SetProvince sets the "province" field.
func (suu *SocialUserUpdate) SetProvince(s string) *SocialUserUpdate {
	suu.mutation.SetProvince(s)
	return suu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableProvince(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetProvince(*s)
	}
	return suu
}

// ClearProvince clears the value of the "province" field.
func (suu *SocialUserUpdate) ClearProvince() *SocialUserUpdate {
	suu.mutation.ClearProvince()
	return suu
}

// SetCountry sets the "country" field.
func (suu *SocialUserUpdate) SetCountry(s string) *SocialUserUpdate {
	suu.mutation.SetCountry(s)
	return suu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableCountry(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetCountry(*s)
	}
	return suu
}

// ClearCountry clears the value of the "country" field.
func (suu *SocialUserUpdate) ClearCountry() *SocialUserUpdate {
	suu.mutation.ClearCountry()
	return suu
}

// SetSignature sets the "signature" field.
func (suu *SocialUserUpdate) SetSignature(s string) *SocialUserUpdate {
	suu.mutation.SetSignature(s)
	return suu
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableSignature(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetSignature(*s)
	}
	return suu
}

// ClearSignature clears the value of the "signature" field.
func (suu *SocialUserUpdate) ClearSignature() *SocialUserUpdate {
	suu.mutation.ClearSignature()
	return suu
}

// SetRemark sets the "remark" field.
func (suu *SocialUserUpdate) SetRemark(s string) *SocialUserUpdate {
	suu.mutation.SetRemark(s)
	return suu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableRemark(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetRemark(*s)
	}
	return suu
}

// ClearRemark clears the value of the "remark" field.
func (suu *SocialUserUpdate) ClearRemark() *SocialUserUpdate {
	suu.mutation.ClearRemark()
	return suu
}

// SetGroupid sets the "groupid" field.
func (suu *SocialUserUpdate) SetGroupid(i int32) *SocialUserUpdate {
	suu.mutation.ResetGroupid()
	suu.mutation.SetGroupid(i)
	return suu
}

// SetNillableGroupid sets the "groupid" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableGroupid(i *int32) *SocialUserUpdate {
	if i != nil {
		suu.SetGroupid(*i)
	}
	return suu
}

// AddGroupid adds i to the "groupid" field.
func (suu *SocialUserUpdate) AddGroupid(i int32) *SocialUserUpdate {
	suu.mutation.AddGroupid(i)
	return suu
}

// ClearGroupid clears the value of the "groupid" field.
func (suu *SocialUserUpdate) ClearGroupid() *SocialUserUpdate {
	suu.mutation.ClearGroupid()
	return suu
}

// SetTagidList sets the "tagidList" field.
func (suu *SocialUserUpdate) SetTagidList(s string) *SocialUserUpdate {
	suu.mutation.SetTagidList(s)
	return suu
}

// SetNillableTagidList sets the "tagidList" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableTagidList(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetTagidList(*s)
	}
	return suu
}

// ClearTagidList clears the value of the "tagidList" field.
func (suu *SocialUserUpdate) ClearTagidList() *SocialUserUpdate {
	suu.mutation.ClearTagidList()
	return suu
}

// SetSubscribe sets the "subscribe" field.
func (suu *SocialUserUpdate) SetSubscribe(i int32) *SocialUserUpdate {
	suu.mutation.ResetSubscribe()
	suu.mutation.SetSubscribe(i)
	return suu
}

// SetNillableSubscribe sets the "subscribe" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableSubscribe(i *int32) *SocialUserUpdate {
	if i != nil {
		suu.SetSubscribe(*i)
	}
	return suu
}

// AddSubscribe adds i to the "subscribe" field.
func (suu *SocialUserUpdate) AddSubscribe(i int32) *SocialUserUpdate {
	suu.mutation.AddSubscribe(i)
	return suu
}

// ClearSubscribe clears the value of the "subscribe" field.
func (suu *SocialUserUpdate) ClearSubscribe() *SocialUserUpdate {
	suu.mutation.ClearSubscribe()
	return suu
}

// SetSubscribeTime sets the "subscribeTime" field.
func (suu *SocialUserUpdate) SetSubscribeTime(i int32) *SocialUserUpdate {
	suu.mutation.ResetSubscribeTime()
	suu.mutation.SetSubscribeTime(i)
	return suu
}

// SetNillableSubscribeTime sets the "subscribeTime" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableSubscribeTime(i *int32) *SocialUserUpdate {
	if i != nil {
		suu.SetSubscribeTime(*i)
	}
	return suu
}

// AddSubscribeTime adds i to the "subscribeTime" field.
func (suu *SocialUserUpdate) AddSubscribeTime(i int32) *SocialUserUpdate {
	suu.mutation.AddSubscribeTime(i)
	return suu
}

// ClearSubscribeTime clears the value of the "subscribeTime" field.
func (suu *SocialUserUpdate) ClearSubscribeTime() *SocialUserUpdate {
	suu.mutation.ClearSubscribeTime()
	return suu
}

// SetSessionKey sets the "sessionKey" field.
func (suu *SocialUserUpdate) SetSessionKey(s string) *SocialUserUpdate {
	suu.mutation.SetSessionKey(s)
	return suu
}

// SetNillableSessionKey sets the "sessionKey" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableSessionKey(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetSessionKey(*s)
	}
	return suu
}

// ClearSessionKey clears the value of the "sessionKey" field.
func (suu *SocialUserUpdate) ClearSessionKey() *SocialUserUpdate {
	suu.mutation.ClearSessionKey()
	return suu
}

// SetUserType sets the "userType" field.
func (suu *SocialUserUpdate) SetUserType(s string) *SocialUserUpdate {
	suu.mutation.SetUserType(s)
	return suu
}

// SetNillableUserType sets the "userType" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableUserType(s *string) *SocialUserUpdate {
	if s != nil {
		suu.SetUserType(*s)
	}
	return suu
}

// ClearUserType clears the value of the "userType" field.
func (suu *SocialUserUpdate) ClearUserType() *SocialUserUpdate {
	suu.mutation.ClearUserType()
	return suu
}

// SetUpdatedAt sets the "updatedAt" field.
func (suu *SocialUserUpdate) SetUpdatedAt(t time.Time) *SocialUserUpdate {
	suu.mutation.SetUpdatedAt(t)
	return suu
}

// SetCreateBy sets the "createBy" field.
func (suu *SocialUserUpdate) SetCreateBy(i int64) *SocialUserUpdate {
	suu.mutation.ResetCreateBy()
	suu.mutation.SetCreateBy(i)
	return suu
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableCreateBy(i *int64) *SocialUserUpdate {
	if i != nil {
		suu.SetCreateBy(*i)
	}
	return suu
}

// AddCreateBy adds i to the "createBy" field.
func (suu *SocialUserUpdate) AddCreateBy(i int64) *SocialUserUpdate {
	suu.mutation.AddCreateBy(i)
	return suu
}

// SetUpdateBy sets the "updateBy" field.
func (suu *SocialUserUpdate) SetUpdateBy(i int64) *SocialUserUpdate {
	suu.mutation.ResetUpdateBy()
	suu.mutation.SetUpdateBy(i)
	return suu
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableUpdateBy(i *int64) *SocialUserUpdate {
	if i != nil {
		suu.SetUpdateBy(*i)
	}
	return suu
}

// AddUpdateBy adds i to the "updateBy" field.
func (suu *SocialUserUpdate) AddUpdateBy(i int64) *SocialUserUpdate {
	suu.mutation.AddUpdateBy(i)
	return suu
}

// SetTenantId sets the "tenantId" field.
func (suu *SocialUserUpdate) SetTenantId(i int64) *SocialUserUpdate {
	suu.mutation.ResetTenantId()
	suu.mutation.SetTenantId(i)
	return suu
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableTenantId(i *int64) *SocialUserUpdate {
	if i != nil {
		suu.SetTenantId(*i)
	}
	return suu
}

// AddTenantId adds i to the "tenantId" field.
func (suu *SocialUserUpdate) AddTenantId(i int64) *SocialUserUpdate {
	suu.mutation.AddTenantId(i)
	return suu
}

// AddTaskIDs adds the "tasks" edge to the TaskLog entity by IDs.
func (suu *SocialUserUpdate) AddTaskIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddTaskIDs(ids...)
	return suu
}

// AddTasks adds the "tasks" edges to the TaskLog entity.
func (suu *SocialUserUpdate) AddTasks(t ...*TaskLog) *SocialUserUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suu.AddTaskIDs(ids...)
}

// AddListenRecordIDs adds the "listenRecords" edge to the ListenRecord entity by IDs.
func (suu *SocialUserUpdate) AddListenRecordIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddListenRecordIDs(ids...)
	return suu
}

// AddListenRecords adds the "listenRecords" edges to the ListenRecord entity.
func (suu *SocialUserUpdate) AddListenRecords(l ...*ListenRecord) *SocialUserUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suu.AddListenRecordIDs(ids...)
}

// AddAdIDs adds the "ads" edge to the AdChangeLog entity by IDs.
func (suu *SocialUserUpdate) AddAdIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddAdIDs(ids...)
	return suu
}

// AddAds adds the "ads" edges to the AdChangeLog entity.
func (suu *SocialUserUpdate) AddAds(a ...*AdChangeLog) *SocialUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suu.AddAdIDs(ids...)
}

// AddBookshelfIDs adds the "bookshelves" edge to the NovelBookshelf entity by IDs.
func (suu *SocialUserUpdate) AddBookshelfIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddBookshelfIDs(ids...)
	return suu
}

// AddBookshelves adds the "bookshelves" edges to the NovelBookshelf entity.
func (suu *SocialUserUpdate) AddBookshelves(n ...*NovelBookshelf) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.AddBookshelfIDs(ids...)
}

// AddAutoBuyNovelIDs adds the "autoBuyNovels" edge to the NovelAutoBuy entity by IDs.
func (suu *SocialUserUpdate) AddAutoBuyNovelIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddAutoBuyNovelIDs(ids...)
	return suu
}

// AddAutoBuyNovels adds the "autoBuyNovels" edges to the NovelAutoBuy entity.
func (suu *SocialUserUpdate) AddAutoBuyNovels(n ...*NovelAutoBuy) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.AddAutoBuyNovelIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the NovelComment entity by IDs.
func (suu *SocialUserUpdate) AddCommentIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddCommentIDs(ids...)
	return suu
}

// AddComments adds the "comments" edges to the NovelComment entity.
func (suu *SocialUserUpdate) AddComments(n ...*NovelComment) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.AddCommentIDs(ids...)
}

// AddMsgIDs adds the "msgs" edge to the UserMsg entity by IDs.
func (suu *SocialUserUpdate) AddMsgIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddMsgIDs(ids...)
	return suu
}

// AddMsgs adds the "msgs" edges to the UserMsg entity.
func (suu *SocialUserUpdate) AddMsgs(u ...*UserMsg) *SocialUserUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suu.AddMsgIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the PayOrder entity by IDs.
func (suu *SocialUserUpdate) AddOrderIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddOrderIDs(ids...)
	return suu
}

// AddOrders adds the "orders" edges to the PayOrder entity.
func (suu *SocialUserUpdate) AddOrders(p ...*PayOrder) *SocialUserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suu.AddOrderIDs(ids...)
}

// AddVipIDs adds the "vips" edge to the VipUser entity by IDs.
func (suu *SocialUserUpdate) AddVipIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddVipIDs(ids...)
	return suu
}

// AddVips adds the "vips" edges to the VipUser entity.
func (suu *SocialUserUpdate) AddVips(v ...*VipUser) *SocialUserUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return suu.AddVipIDs(ids...)
}

// AddBalanceIDs adds the "balances" edge to the AmBalance entity by IDs.
func (suu *SocialUserUpdate) AddBalanceIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddBalanceIDs(ids...)
	return suu
}

// AddBalances adds the "balances" edges to the AmBalance entity.
func (suu *SocialUserUpdate) AddBalances(a ...*AmBalance) *SocialUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suu.AddBalanceIDs(ids...)
}

// AddAssetLogIDs adds the "assetLogs" edge to the AssetChangeLog entity by IDs.
func (suu *SocialUserUpdate) AddAssetLogIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddAssetLogIDs(ids...)
	return suu
}

// AddAssetLogs adds the "assetLogs" edges to the AssetChangeLog entity.
func (suu *SocialUserUpdate) AddAssetLogs(a ...*AssetChangeLog) *SocialUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suu.AddAssetLogIDs(ids...)
}

// AddBuyChapterRecordIDs adds the "buyChapterRecords" edge to the NovelBuyChapterRecord entity by IDs.
func (suu *SocialUserUpdate) AddBuyChapterRecordIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddBuyChapterRecordIDs(ids...)
	return suu
}

// AddBuyChapterRecords adds the "buyChapterRecords" edges to the NovelBuyChapterRecord entity.
func (suu *SocialUserUpdate) AddBuyChapterRecords(n ...*NovelBuyChapterRecord) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.AddBuyChapterRecordIDs(ids...)
}

// AddBuyNovelRecordIDs adds the "buyNovelRecords" edge to the NovelBuyRecord entity by IDs.
func (suu *SocialUserUpdate) AddBuyNovelRecordIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.AddBuyNovelRecordIDs(ids...)
	return suu
}

// AddBuyNovelRecords adds the "buyNovelRecords" edges to the NovelBuyRecord entity.
func (suu *SocialUserUpdate) AddBuyNovelRecords(n ...*NovelBuyRecord) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.AddBuyNovelRecordIDs(ids...)
}

// SetChannelID sets the "channel" edge to the AdChannel entity by ID.
func (suu *SocialUserUpdate) SetChannelID(id int64) *SocialUserUpdate {
	suu.mutation.SetChannelID(id)
	return suu
}

// SetNillableChannelID sets the "channel" edge to the AdChannel entity by ID if the given value is not nil.
func (suu *SocialUserUpdate) SetNillableChannelID(id *int64) *SocialUserUpdate {
	if id != nil {
		suu = suu.SetChannelID(*id)
	}
	return suu
}

// SetChannel sets the "channel" edge to the AdChannel entity.
func (suu *SocialUserUpdate) SetChannel(a *AdChannel) *SocialUserUpdate {
	return suu.SetChannelID(a.ID)
}

// Mutation returns the SocialUserMutation object of the builder.
func (suu *SocialUserUpdate) Mutation() *SocialUserMutation {
	return suu.mutation
}

// ClearTasks clears all "tasks" edges to the TaskLog entity.
func (suu *SocialUserUpdate) ClearTasks() *SocialUserUpdate {
	suu.mutation.ClearTasks()
	return suu
}

// RemoveTaskIDs removes the "tasks" edge to TaskLog entities by IDs.
func (suu *SocialUserUpdate) RemoveTaskIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveTaskIDs(ids...)
	return suu
}

// RemoveTasks removes "tasks" edges to TaskLog entities.
func (suu *SocialUserUpdate) RemoveTasks(t ...*TaskLog) *SocialUserUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suu.RemoveTaskIDs(ids...)
}

// ClearListenRecords clears all "listenRecords" edges to the ListenRecord entity.
func (suu *SocialUserUpdate) ClearListenRecords() *SocialUserUpdate {
	suu.mutation.ClearListenRecords()
	return suu
}

// RemoveListenRecordIDs removes the "listenRecords" edge to ListenRecord entities by IDs.
func (suu *SocialUserUpdate) RemoveListenRecordIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveListenRecordIDs(ids...)
	return suu
}

// RemoveListenRecords removes "listenRecords" edges to ListenRecord entities.
func (suu *SocialUserUpdate) RemoveListenRecords(l ...*ListenRecord) *SocialUserUpdate {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suu.RemoveListenRecordIDs(ids...)
}

// ClearAds clears all "ads" edges to the AdChangeLog entity.
func (suu *SocialUserUpdate) ClearAds() *SocialUserUpdate {
	suu.mutation.ClearAds()
	return suu
}

// RemoveAdIDs removes the "ads" edge to AdChangeLog entities by IDs.
func (suu *SocialUserUpdate) RemoveAdIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveAdIDs(ids...)
	return suu
}

// RemoveAds removes "ads" edges to AdChangeLog entities.
func (suu *SocialUserUpdate) RemoveAds(a ...*AdChangeLog) *SocialUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suu.RemoveAdIDs(ids...)
}

// ClearBookshelves clears all "bookshelves" edges to the NovelBookshelf entity.
func (suu *SocialUserUpdate) ClearBookshelves() *SocialUserUpdate {
	suu.mutation.ClearBookshelves()
	return suu
}

// RemoveBookshelfIDs removes the "bookshelves" edge to NovelBookshelf entities by IDs.
func (suu *SocialUserUpdate) RemoveBookshelfIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveBookshelfIDs(ids...)
	return suu
}

// RemoveBookshelves removes "bookshelves" edges to NovelBookshelf entities.
func (suu *SocialUserUpdate) RemoveBookshelves(n ...*NovelBookshelf) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.RemoveBookshelfIDs(ids...)
}

// ClearAutoBuyNovels clears all "autoBuyNovels" edges to the NovelAutoBuy entity.
func (suu *SocialUserUpdate) ClearAutoBuyNovels() *SocialUserUpdate {
	suu.mutation.ClearAutoBuyNovels()
	return suu
}

// RemoveAutoBuyNovelIDs removes the "autoBuyNovels" edge to NovelAutoBuy entities by IDs.
func (suu *SocialUserUpdate) RemoveAutoBuyNovelIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveAutoBuyNovelIDs(ids...)
	return suu
}

// RemoveAutoBuyNovels removes "autoBuyNovels" edges to NovelAutoBuy entities.
func (suu *SocialUserUpdate) RemoveAutoBuyNovels(n ...*NovelAutoBuy) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.RemoveAutoBuyNovelIDs(ids...)
}

// ClearComments clears all "comments" edges to the NovelComment entity.
func (suu *SocialUserUpdate) ClearComments() *SocialUserUpdate {
	suu.mutation.ClearComments()
	return suu
}

// RemoveCommentIDs removes the "comments" edge to NovelComment entities by IDs.
func (suu *SocialUserUpdate) RemoveCommentIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveCommentIDs(ids...)
	return suu
}

// RemoveComments removes "comments" edges to NovelComment entities.
func (suu *SocialUserUpdate) RemoveComments(n ...*NovelComment) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.RemoveCommentIDs(ids...)
}

// ClearMsgs clears all "msgs" edges to the UserMsg entity.
func (suu *SocialUserUpdate) ClearMsgs() *SocialUserUpdate {
	suu.mutation.ClearMsgs()
	return suu
}

// RemoveMsgIDs removes the "msgs" edge to UserMsg entities by IDs.
func (suu *SocialUserUpdate) RemoveMsgIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveMsgIDs(ids...)
	return suu
}

// RemoveMsgs removes "msgs" edges to UserMsg entities.
func (suu *SocialUserUpdate) RemoveMsgs(u ...*UserMsg) *SocialUserUpdate {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suu.RemoveMsgIDs(ids...)
}

// ClearOrders clears all "orders" edges to the PayOrder entity.
func (suu *SocialUserUpdate) ClearOrders() *SocialUserUpdate {
	suu.mutation.ClearOrders()
	return suu
}

// RemoveOrderIDs removes the "orders" edge to PayOrder entities by IDs.
func (suu *SocialUserUpdate) RemoveOrderIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveOrderIDs(ids...)
	return suu
}

// RemoveOrders removes "orders" edges to PayOrder entities.
func (suu *SocialUserUpdate) RemoveOrders(p ...*PayOrder) *SocialUserUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suu.RemoveOrderIDs(ids...)
}

// ClearVips clears all "vips" edges to the VipUser entity.
func (suu *SocialUserUpdate) ClearVips() *SocialUserUpdate {
	suu.mutation.ClearVips()
	return suu
}

// RemoveVipIDs removes the "vips" edge to VipUser entities by IDs.
func (suu *SocialUserUpdate) RemoveVipIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveVipIDs(ids...)
	return suu
}

// RemoveVips removes "vips" edges to VipUser entities.
func (suu *SocialUserUpdate) RemoveVips(v ...*VipUser) *SocialUserUpdate {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return suu.RemoveVipIDs(ids...)
}

// ClearBalances clears all "balances" edges to the AmBalance entity.
func (suu *SocialUserUpdate) ClearBalances() *SocialUserUpdate {
	suu.mutation.ClearBalances()
	return suu
}

// RemoveBalanceIDs removes the "balances" edge to AmBalance entities by IDs.
func (suu *SocialUserUpdate) RemoveBalanceIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveBalanceIDs(ids...)
	return suu
}

// RemoveBalances removes "balances" edges to AmBalance entities.
func (suu *SocialUserUpdate) RemoveBalances(a ...*AmBalance) *SocialUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suu.RemoveBalanceIDs(ids...)
}

// ClearAssetLogs clears all "assetLogs" edges to the AssetChangeLog entity.
func (suu *SocialUserUpdate) ClearAssetLogs() *SocialUserUpdate {
	suu.mutation.ClearAssetLogs()
	return suu
}

// RemoveAssetLogIDs removes the "assetLogs" edge to AssetChangeLog entities by IDs.
func (suu *SocialUserUpdate) RemoveAssetLogIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveAssetLogIDs(ids...)
	return suu
}

// RemoveAssetLogs removes "assetLogs" edges to AssetChangeLog entities.
func (suu *SocialUserUpdate) RemoveAssetLogs(a ...*AssetChangeLog) *SocialUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suu.RemoveAssetLogIDs(ids...)
}

// ClearBuyChapterRecords clears all "buyChapterRecords" edges to the NovelBuyChapterRecord entity.
func (suu *SocialUserUpdate) ClearBuyChapterRecords() *SocialUserUpdate {
	suu.mutation.ClearBuyChapterRecords()
	return suu
}

// RemoveBuyChapterRecordIDs removes the "buyChapterRecords" edge to NovelBuyChapterRecord entities by IDs.
func (suu *SocialUserUpdate) RemoveBuyChapterRecordIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveBuyChapterRecordIDs(ids...)
	return suu
}

// RemoveBuyChapterRecords removes "buyChapterRecords" edges to NovelBuyChapterRecord entities.
func (suu *SocialUserUpdate) RemoveBuyChapterRecords(n ...*NovelBuyChapterRecord) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.RemoveBuyChapterRecordIDs(ids...)
}

// ClearBuyNovelRecords clears all "buyNovelRecords" edges to the NovelBuyRecord entity.
func (suu *SocialUserUpdate) ClearBuyNovelRecords() *SocialUserUpdate {
	suu.mutation.ClearBuyNovelRecords()
	return suu
}

// RemoveBuyNovelRecordIDs removes the "buyNovelRecords" edge to NovelBuyRecord entities by IDs.
func (suu *SocialUserUpdate) RemoveBuyNovelRecordIDs(ids ...int64) *SocialUserUpdate {
	suu.mutation.RemoveBuyNovelRecordIDs(ids...)
	return suu
}

// RemoveBuyNovelRecords removes "buyNovelRecords" edges to NovelBuyRecord entities.
func (suu *SocialUserUpdate) RemoveBuyNovelRecords(n ...*NovelBuyRecord) *SocialUserUpdate {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suu.RemoveBuyNovelRecordIDs(ids...)
}

// ClearChannel clears the "channel" edge to the AdChannel entity.
func (suu *SocialUserUpdate) ClearChannel() *SocialUserUpdate {
	suu.mutation.ClearChannel()
	return suu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *SocialUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	suu.defaults()
	if len(suu.hooks) == 0 {
		affected, err = suu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SocialUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suu.mutation = mutation
			affected, err = suu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(suu.hooks) - 1; i >= 0; i-- {
			if suu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (suu *SocialUserUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *SocialUserUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *SocialUserUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suu *SocialUserUpdate) defaults() {
	if _, ok := suu.mutation.UpdatedAt(); !ok {
		v := socialuser.UpdateDefaultUpdatedAt()
		suu.mutation.SetUpdatedAt(v)
	}
}

func (suu *SocialUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   socialuser.Table,
			Columns: socialuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: socialuser.FieldID,
			},
		},
	}
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldUserId,
		})
	}
	if value, ok := suu.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldUserId,
		})
	}
	if value, ok := suu.mutation.Unionid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldUnionid,
		})
	}
	if suu.mutation.UnionidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldUnionid,
		})
	}
	if value, ok := suu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldToken,
		})
	}
	if suu.mutation.TokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldToken,
		})
	}
	if value, ok := suu.mutation.Openid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldOpenid,
		})
	}
	if suu.mutation.OpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldOpenid,
		})
	}
	if value, ok := suu.mutation.RoutineOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldRoutineOpenid,
		})
	}
	if suu.mutation.RoutineOpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldRoutineOpenid,
		})
	}
	if value, ok := suu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldUserName,
		})
	}
	if suu.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldUserName,
		})
	}
	if value, ok := suu.mutation.NickName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldNickName,
		})
	}
	if suu.mutation.NickNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldNickName,
		})
	}
	if value, ok := suu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: socialuser.FieldBirthday,
		})
	}
	if suu.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: socialuser.FieldBirthday,
		})
	}
	if value, ok := suu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldPhone,
		})
	}
	if suu.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldPhone,
		})
	}
	if value, ok := suu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldEmail,
		})
	}
	if suu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldEmail,
		})
	}
	if value, ok := suu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldPassword,
		})
	}
	if suu.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldPassword,
		})
	}
	if value, ok := suu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldAvatar,
		})
	}
	if suu.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldAvatar,
		})
	}
	if value, ok := suu.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSex,
		})
	}
	if value, ok := suu.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSex,
		})
	}
	if suu.mutation.SexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: socialuser.FieldSex,
		})
	}
	if value, ok := suu.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldRegion,
		})
	}
	if suu.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldRegion,
		})
	}
	if value, ok := suu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldCity,
		})
	}
	if suu.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldCity,
		})
	}
	if value, ok := suu.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldLanguage,
		})
	}
	if suu.mutation.LanguageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldLanguage,
		})
	}
	if value, ok := suu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldProvince,
		})
	}
	if suu.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldProvince,
		})
	}
	if value, ok := suu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldCountry,
		})
	}
	if suu.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldCountry,
		})
	}
	if value, ok := suu.mutation.Signature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldSignature,
		})
	}
	if suu.mutation.SignatureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldSignature,
		})
	}
	if value, ok := suu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldRemark,
		})
	}
	if suu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldRemark,
		})
	}
	if value, ok := suu.mutation.Groupid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldGroupid,
		})
	}
	if value, ok := suu.mutation.AddedGroupid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldGroupid,
		})
	}
	if suu.mutation.GroupidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: socialuser.FieldGroupid,
		})
	}
	if value, ok := suu.mutation.TagidList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldTagidList,
		})
	}
	if suu.mutation.TagidListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldTagidList,
		})
	}
	if value, ok := suu.mutation.Subscribe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribe,
		})
	}
	if value, ok := suu.mutation.AddedSubscribe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribe,
		})
	}
	if suu.mutation.SubscribeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: socialuser.FieldSubscribe,
		})
	}
	if value, ok := suu.mutation.SubscribeTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribeTime,
		})
	}
	if value, ok := suu.mutation.AddedSubscribeTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribeTime,
		})
	}
	if suu.mutation.SubscribeTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: socialuser.FieldSubscribeTime,
		})
	}
	if value, ok := suu.mutation.SessionKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldSessionKey,
		})
	}
	if suu.mutation.SessionKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldSessionKey,
		})
	}
	if value, ok := suu.mutation.UserType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldUserType,
		})
	}
	if suu.mutation.UserTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldUserType,
		})
	}
	if value, ok := suu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: socialuser.FieldUpdatedAt,
		})
	}
	if value, ok := suu.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldCreateBy,
		})
	}
	if value, ok := suu.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldCreateBy,
		})
	}
	if value, ok := suu.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldUpdateBy,
		})
	}
	if value, ok := suu.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldUpdateBy,
		})
	}
	if value, ok := suu.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldTenantId,
		})
	}
	if value, ok := suu.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldTenantId,
		})
	}
	if suu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.TasksTable,
			Columns: []string{socialuser.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tasklog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !suu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.TasksTable,
			Columns: []string{socialuser.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tasklog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.TasksTable,
			Columns: []string{socialuser.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tasklog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.ListenRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.ListenRecordsTable,
			Columns: []string{socialuser.ListenRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: listenrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedListenRecordsIDs(); len(nodes) > 0 && !suu.mutation.ListenRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.ListenRecordsTable,
			Columns: []string{socialuser.ListenRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: listenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.ListenRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.ListenRecordsTable,
			Columns: []string{socialuser.ListenRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: listenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.AdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AdsTable,
			Columns: []string{socialuser.AdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchangelog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedAdsIDs(); len(nodes) > 0 && !suu.mutation.AdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AdsTable,
			Columns: []string{socialuser.AdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.AdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AdsTable,
			Columns: []string{socialuser.AdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.BookshelvesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BookshelvesTable,
			Columns: []string{socialuser.BookshelvesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbookshelf.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedBookshelvesIDs(); len(nodes) > 0 && !suu.mutation.BookshelvesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BookshelvesTable,
			Columns: []string{socialuser.BookshelvesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbookshelf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.BookshelvesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BookshelvesTable,
			Columns: []string{socialuser.BookshelvesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbookshelf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.AutoBuyNovelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AutoBuyNovelsTable,
			Columns: []string{socialuser.AutoBuyNovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelautobuy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedAutoBuyNovelsIDs(); len(nodes) > 0 && !suu.mutation.AutoBuyNovelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AutoBuyNovelsTable,
			Columns: []string{socialuser.AutoBuyNovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelautobuy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.AutoBuyNovelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AutoBuyNovelsTable,
			Columns: []string{socialuser.AutoBuyNovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelautobuy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.CommentsTable,
			Columns: []string{socialuser.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !suu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.CommentsTable,
			Columns: []string{socialuser.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.CommentsTable,
			Columns: []string{socialuser.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.MsgsTable,
			Columns: []string{socialuser.MsgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usermsg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedMsgsIDs(); len(nodes) > 0 && !suu.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.MsgsTable,
			Columns: []string{socialuser.MsgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usermsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.MsgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.MsgsTable,
			Columns: []string{socialuser.MsgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usermsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.OrdersTable,
			Columns: []string{socialuser.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !suu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.OrdersTable,
			Columns: []string{socialuser.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.OrdersTable,
			Columns: []string{socialuser.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.VipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   socialuser.VipsTable,
			Columns: socialuser.VipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: vipuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedVipsIDs(); len(nodes) > 0 && !suu.mutation.VipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   socialuser.VipsTable,
			Columns: socialuser.VipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: vipuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.VipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   socialuser.VipsTable,
			Columns: socialuser.VipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: vipuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.BalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BalancesTable,
			Columns: []string{socialuser.BalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ambalance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedBalancesIDs(); len(nodes) > 0 && !suu.mutation.BalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BalancesTable,
			Columns: []string{socialuser.BalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ambalance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.BalancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BalancesTable,
			Columns: []string{socialuser.BalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ambalance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.AssetLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AssetLogsTable,
			Columns: []string{socialuser.AssetLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: assetchangelog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedAssetLogsIDs(); len(nodes) > 0 && !suu.mutation.AssetLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AssetLogsTable,
			Columns: []string{socialuser.AssetLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: assetchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.AssetLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AssetLogsTable,
			Columns: []string{socialuser.AssetLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: assetchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.BuyChapterRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyChapterRecordsTable,
			Columns: []string{socialuser.BuyChapterRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuychapterrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedBuyChapterRecordsIDs(); len(nodes) > 0 && !suu.mutation.BuyChapterRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyChapterRecordsTable,
			Columns: []string{socialuser.BuyChapterRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuychapterrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.BuyChapterRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyChapterRecordsTable,
			Columns: []string{socialuser.BuyChapterRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuychapterrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.BuyNovelRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyNovelRecordsTable,
			Columns: []string{socialuser.BuyNovelRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuyrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.RemovedBuyNovelRecordsIDs(); len(nodes) > 0 && !suu.mutation.BuyNovelRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyNovelRecordsTable,
			Columns: []string{socialuser.BuyNovelRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.BuyNovelRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyNovelRecordsTable,
			Columns: []string{socialuser.BuyNovelRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   socialuser.ChannelTable,
			Columns: []string{socialuser.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   socialuser.ChannelTable,
			Columns: []string{socialuser.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{socialuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SocialUserUpdateOne is the builder for updating a single SocialUser entity.
type SocialUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SocialUserMutation
}

// SetUserId sets the "userId" field.
func (suuo *SocialUserUpdateOne) SetUserId(i int64) *SocialUserUpdateOne {
	suuo.mutation.ResetUserId()
	suuo.mutation.SetUserId(i)
	return suuo
}

// AddUserId adds i to the "userId" field.
func (suuo *SocialUserUpdateOne) AddUserId(i int64) *SocialUserUpdateOne {
	suuo.mutation.AddUserId(i)
	return suuo
}

// SetUnionid sets the "unionid" field.
func (suuo *SocialUserUpdateOne) SetUnionid(s string) *SocialUserUpdateOne {
	suuo.mutation.SetUnionid(s)
	return suuo
}

// SetNillableUnionid sets the "unionid" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableUnionid(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetUnionid(*s)
	}
	return suuo
}

// ClearUnionid clears the value of the "unionid" field.
func (suuo *SocialUserUpdateOne) ClearUnionid() *SocialUserUpdateOne {
	suuo.mutation.ClearUnionid()
	return suuo
}

// SetToken sets the "token" field.
func (suuo *SocialUserUpdateOne) SetToken(s string) *SocialUserUpdateOne {
	suuo.mutation.SetToken(s)
	return suuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableToken(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetToken(*s)
	}
	return suuo
}

// ClearToken clears the value of the "token" field.
func (suuo *SocialUserUpdateOne) ClearToken() *SocialUserUpdateOne {
	suuo.mutation.ClearToken()
	return suuo
}

// SetOpenid sets the "openid" field.
func (suuo *SocialUserUpdateOne) SetOpenid(s string) *SocialUserUpdateOne {
	suuo.mutation.SetOpenid(s)
	return suuo
}

// SetNillableOpenid sets the "openid" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableOpenid(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetOpenid(*s)
	}
	return suuo
}

// ClearOpenid clears the value of the "openid" field.
func (suuo *SocialUserUpdateOne) ClearOpenid() *SocialUserUpdateOne {
	suuo.mutation.ClearOpenid()
	return suuo
}

// SetRoutineOpenid sets the "routineOpenid" field.
func (suuo *SocialUserUpdateOne) SetRoutineOpenid(s string) *SocialUserUpdateOne {
	suuo.mutation.SetRoutineOpenid(s)
	return suuo
}

// SetNillableRoutineOpenid sets the "routineOpenid" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableRoutineOpenid(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetRoutineOpenid(*s)
	}
	return suuo
}

// ClearRoutineOpenid clears the value of the "routineOpenid" field.
func (suuo *SocialUserUpdateOne) ClearRoutineOpenid() *SocialUserUpdateOne {
	suuo.mutation.ClearRoutineOpenid()
	return suuo
}

// SetUserName sets the "userName" field.
func (suuo *SocialUserUpdateOne) SetUserName(s string) *SocialUserUpdateOne {
	suuo.mutation.SetUserName(s)
	return suuo
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableUserName(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetUserName(*s)
	}
	return suuo
}

// ClearUserName clears the value of the "userName" field.
func (suuo *SocialUserUpdateOne) ClearUserName() *SocialUserUpdateOne {
	suuo.mutation.ClearUserName()
	return suuo
}

// SetNickName sets the "nickName" field.
func (suuo *SocialUserUpdateOne) SetNickName(s string) *SocialUserUpdateOne {
	suuo.mutation.SetNickName(s)
	return suuo
}

// SetNillableNickName sets the "nickName" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableNickName(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetNickName(*s)
	}
	return suuo
}

// ClearNickName clears the value of the "nickName" field.
func (suuo *SocialUserUpdateOne) ClearNickName() *SocialUserUpdateOne {
	suuo.mutation.ClearNickName()
	return suuo
}

// SetBirthday sets the "birthday" field.
func (suuo *SocialUserUpdateOne) SetBirthday(t time.Time) *SocialUserUpdateOne {
	suuo.mutation.SetBirthday(t)
	return suuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableBirthday(t *time.Time) *SocialUserUpdateOne {
	if t != nil {
		suuo.SetBirthday(*t)
	}
	return suuo
}

// ClearBirthday clears the value of the "birthday" field.
func (suuo *SocialUserUpdateOne) ClearBirthday() *SocialUserUpdateOne {
	suuo.mutation.ClearBirthday()
	return suuo
}

// SetPhone sets the "phone" field.
func (suuo *SocialUserUpdateOne) SetPhone(s string) *SocialUserUpdateOne {
	suuo.mutation.SetPhone(s)
	return suuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillablePhone(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetPhone(*s)
	}
	return suuo
}

// ClearPhone clears the value of the "phone" field.
func (suuo *SocialUserUpdateOne) ClearPhone() *SocialUserUpdateOne {
	suuo.mutation.ClearPhone()
	return suuo
}

// SetEmail sets the "email" field.
func (suuo *SocialUserUpdateOne) SetEmail(s string) *SocialUserUpdateOne {
	suuo.mutation.SetEmail(s)
	return suuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableEmail(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetEmail(*s)
	}
	return suuo
}

// ClearEmail clears the value of the "email" field.
func (suuo *SocialUserUpdateOne) ClearEmail() *SocialUserUpdateOne {
	suuo.mutation.ClearEmail()
	return suuo
}

// SetPassword sets the "password" field.
func (suuo *SocialUserUpdateOne) SetPassword(s string) *SocialUserUpdateOne {
	suuo.mutation.SetPassword(s)
	return suuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillablePassword(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetPassword(*s)
	}
	return suuo
}

// ClearPassword clears the value of the "password" field.
func (suuo *SocialUserUpdateOne) ClearPassword() *SocialUserUpdateOne {
	suuo.mutation.ClearPassword()
	return suuo
}

// SetAvatar sets the "avatar" field.
func (suuo *SocialUserUpdateOne) SetAvatar(s string) *SocialUserUpdateOne {
	suuo.mutation.SetAvatar(s)
	return suuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableAvatar(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetAvatar(*s)
	}
	return suuo
}

// ClearAvatar clears the value of the "avatar" field.
func (suuo *SocialUserUpdateOne) ClearAvatar() *SocialUserUpdateOne {
	suuo.mutation.ClearAvatar()
	return suuo
}

// SetSex sets the "sex" field.
func (suuo *SocialUserUpdateOne) SetSex(i int32) *SocialUserUpdateOne {
	suuo.mutation.ResetSex()
	suuo.mutation.SetSex(i)
	return suuo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableSex(i *int32) *SocialUserUpdateOne {
	if i != nil {
		suuo.SetSex(*i)
	}
	return suuo
}

// AddSex adds i to the "sex" field.
func (suuo *SocialUserUpdateOne) AddSex(i int32) *SocialUserUpdateOne {
	suuo.mutation.AddSex(i)
	return suuo
}

// ClearSex clears the value of the "sex" field.
func (suuo *SocialUserUpdateOne) ClearSex() *SocialUserUpdateOne {
	suuo.mutation.ClearSex()
	return suuo
}

// SetRegion sets the "region" field.
func (suuo *SocialUserUpdateOne) SetRegion(s string) *SocialUserUpdateOne {
	suuo.mutation.SetRegion(s)
	return suuo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableRegion(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetRegion(*s)
	}
	return suuo
}

// ClearRegion clears the value of the "region" field.
func (suuo *SocialUserUpdateOne) ClearRegion() *SocialUserUpdateOne {
	suuo.mutation.ClearRegion()
	return suuo
}

// SetCity sets the "city" field.
func (suuo *SocialUserUpdateOne) SetCity(s string) *SocialUserUpdateOne {
	suuo.mutation.SetCity(s)
	return suuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableCity(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetCity(*s)
	}
	return suuo
}

// ClearCity clears the value of the "city" field.
func (suuo *SocialUserUpdateOne) ClearCity() *SocialUserUpdateOne {
	suuo.mutation.ClearCity()
	return suuo
}

// SetLanguage sets the "language" field.
func (suuo *SocialUserUpdateOne) SetLanguage(s string) *SocialUserUpdateOne {
	suuo.mutation.SetLanguage(s)
	return suuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableLanguage(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetLanguage(*s)
	}
	return suuo
}

// ClearLanguage clears the value of the "language" field.
func (suuo *SocialUserUpdateOne) ClearLanguage() *SocialUserUpdateOne {
	suuo.mutation.ClearLanguage()
	return suuo
}

// SetProvince sets the "province" field.
func (suuo *SocialUserUpdateOne) SetProvince(s string) *SocialUserUpdateOne {
	suuo.mutation.SetProvince(s)
	return suuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableProvince(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetProvince(*s)
	}
	return suuo
}

// ClearProvince clears the value of the "province" field.
func (suuo *SocialUserUpdateOne) ClearProvince() *SocialUserUpdateOne {
	suuo.mutation.ClearProvince()
	return suuo
}

// SetCountry sets the "country" field.
func (suuo *SocialUserUpdateOne) SetCountry(s string) *SocialUserUpdateOne {
	suuo.mutation.SetCountry(s)
	return suuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableCountry(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetCountry(*s)
	}
	return suuo
}

// ClearCountry clears the value of the "country" field.
func (suuo *SocialUserUpdateOne) ClearCountry() *SocialUserUpdateOne {
	suuo.mutation.ClearCountry()
	return suuo
}

// SetSignature sets the "signature" field.
func (suuo *SocialUserUpdateOne) SetSignature(s string) *SocialUserUpdateOne {
	suuo.mutation.SetSignature(s)
	return suuo
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableSignature(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetSignature(*s)
	}
	return suuo
}

// ClearSignature clears the value of the "signature" field.
func (suuo *SocialUserUpdateOne) ClearSignature() *SocialUserUpdateOne {
	suuo.mutation.ClearSignature()
	return suuo
}

// SetRemark sets the "remark" field.
func (suuo *SocialUserUpdateOne) SetRemark(s string) *SocialUserUpdateOne {
	suuo.mutation.SetRemark(s)
	return suuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableRemark(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetRemark(*s)
	}
	return suuo
}

// ClearRemark clears the value of the "remark" field.
func (suuo *SocialUserUpdateOne) ClearRemark() *SocialUserUpdateOne {
	suuo.mutation.ClearRemark()
	return suuo
}

// SetGroupid sets the "groupid" field.
func (suuo *SocialUserUpdateOne) SetGroupid(i int32) *SocialUserUpdateOne {
	suuo.mutation.ResetGroupid()
	suuo.mutation.SetGroupid(i)
	return suuo
}

// SetNillableGroupid sets the "groupid" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableGroupid(i *int32) *SocialUserUpdateOne {
	if i != nil {
		suuo.SetGroupid(*i)
	}
	return suuo
}

// AddGroupid adds i to the "groupid" field.
func (suuo *SocialUserUpdateOne) AddGroupid(i int32) *SocialUserUpdateOne {
	suuo.mutation.AddGroupid(i)
	return suuo
}

// ClearGroupid clears the value of the "groupid" field.
func (suuo *SocialUserUpdateOne) ClearGroupid() *SocialUserUpdateOne {
	suuo.mutation.ClearGroupid()
	return suuo
}

// SetTagidList sets the "tagidList" field.
func (suuo *SocialUserUpdateOne) SetTagidList(s string) *SocialUserUpdateOne {
	suuo.mutation.SetTagidList(s)
	return suuo
}

// SetNillableTagidList sets the "tagidList" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableTagidList(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetTagidList(*s)
	}
	return suuo
}

// ClearTagidList clears the value of the "tagidList" field.
func (suuo *SocialUserUpdateOne) ClearTagidList() *SocialUserUpdateOne {
	suuo.mutation.ClearTagidList()
	return suuo
}

// SetSubscribe sets the "subscribe" field.
func (suuo *SocialUserUpdateOne) SetSubscribe(i int32) *SocialUserUpdateOne {
	suuo.mutation.ResetSubscribe()
	suuo.mutation.SetSubscribe(i)
	return suuo
}

// SetNillableSubscribe sets the "subscribe" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableSubscribe(i *int32) *SocialUserUpdateOne {
	if i != nil {
		suuo.SetSubscribe(*i)
	}
	return suuo
}

// AddSubscribe adds i to the "subscribe" field.
func (suuo *SocialUserUpdateOne) AddSubscribe(i int32) *SocialUserUpdateOne {
	suuo.mutation.AddSubscribe(i)
	return suuo
}

// ClearSubscribe clears the value of the "subscribe" field.
func (suuo *SocialUserUpdateOne) ClearSubscribe() *SocialUserUpdateOne {
	suuo.mutation.ClearSubscribe()
	return suuo
}

// SetSubscribeTime sets the "subscribeTime" field.
func (suuo *SocialUserUpdateOne) SetSubscribeTime(i int32) *SocialUserUpdateOne {
	suuo.mutation.ResetSubscribeTime()
	suuo.mutation.SetSubscribeTime(i)
	return suuo
}

// SetNillableSubscribeTime sets the "subscribeTime" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableSubscribeTime(i *int32) *SocialUserUpdateOne {
	if i != nil {
		suuo.SetSubscribeTime(*i)
	}
	return suuo
}

// AddSubscribeTime adds i to the "subscribeTime" field.
func (suuo *SocialUserUpdateOne) AddSubscribeTime(i int32) *SocialUserUpdateOne {
	suuo.mutation.AddSubscribeTime(i)
	return suuo
}

// ClearSubscribeTime clears the value of the "subscribeTime" field.
func (suuo *SocialUserUpdateOne) ClearSubscribeTime() *SocialUserUpdateOne {
	suuo.mutation.ClearSubscribeTime()
	return suuo
}

// SetSessionKey sets the "sessionKey" field.
func (suuo *SocialUserUpdateOne) SetSessionKey(s string) *SocialUserUpdateOne {
	suuo.mutation.SetSessionKey(s)
	return suuo
}

// SetNillableSessionKey sets the "sessionKey" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableSessionKey(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetSessionKey(*s)
	}
	return suuo
}

// ClearSessionKey clears the value of the "sessionKey" field.
func (suuo *SocialUserUpdateOne) ClearSessionKey() *SocialUserUpdateOne {
	suuo.mutation.ClearSessionKey()
	return suuo
}

// SetUserType sets the "userType" field.
func (suuo *SocialUserUpdateOne) SetUserType(s string) *SocialUserUpdateOne {
	suuo.mutation.SetUserType(s)
	return suuo
}

// SetNillableUserType sets the "userType" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableUserType(s *string) *SocialUserUpdateOne {
	if s != nil {
		suuo.SetUserType(*s)
	}
	return suuo
}

// ClearUserType clears the value of the "userType" field.
func (suuo *SocialUserUpdateOne) ClearUserType() *SocialUserUpdateOne {
	suuo.mutation.ClearUserType()
	return suuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (suuo *SocialUserUpdateOne) SetUpdatedAt(t time.Time) *SocialUserUpdateOne {
	suuo.mutation.SetUpdatedAt(t)
	return suuo
}

// SetCreateBy sets the "createBy" field.
func (suuo *SocialUserUpdateOne) SetCreateBy(i int64) *SocialUserUpdateOne {
	suuo.mutation.ResetCreateBy()
	suuo.mutation.SetCreateBy(i)
	return suuo
}

// SetNillableCreateBy sets the "createBy" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableCreateBy(i *int64) *SocialUserUpdateOne {
	if i != nil {
		suuo.SetCreateBy(*i)
	}
	return suuo
}

// AddCreateBy adds i to the "createBy" field.
func (suuo *SocialUserUpdateOne) AddCreateBy(i int64) *SocialUserUpdateOne {
	suuo.mutation.AddCreateBy(i)
	return suuo
}

// SetUpdateBy sets the "updateBy" field.
func (suuo *SocialUserUpdateOne) SetUpdateBy(i int64) *SocialUserUpdateOne {
	suuo.mutation.ResetUpdateBy()
	suuo.mutation.SetUpdateBy(i)
	return suuo
}

// SetNillableUpdateBy sets the "updateBy" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableUpdateBy(i *int64) *SocialUserUpdateOne {
	if i != nil {
		suuo.SetUpdateBy(*i)
	}
	return suuo
}

// AddUpdateBy adds i to the "updateBy" field.
func (suuo *SocialUserUpdateOne) AddUpdateBy(i int64) *SocialUserUpdateOne {
	suuo.mutation.AddUpdateBy(i)
	return suuo
}

// SetTenantId sets the "tenantId" field.
func (suuo *SocialUserUpdateOne) SetTenantId(i int64) *SocialUserUpdateOne {
	suuo.mutation.ResetTenantId()
	suuo.mutation.SetTenantId(i)
	return suuo
}

// SetNillableTenantId sets the "tenantId" field if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableTenantId(i *int64) *SocialUserUpdateOne {
	if i != nil {
		suuo.SetTenantId(*i)
	}
	return suuo
}

// AddTenantId adds i to the "tenantId" field.
func (suuo *SocialUserUpdateOne) AddTenantId(i int64) *SocialUserUpdateOne {
	suuo.mutation.AddTenantId(i)
	return suuo
}

// AddTaskIDs adds the "tasks" edge to the TaskLog entity by IDs.
func (suuo *SocialUserUpdateOne) AddTaskIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddTaskIDs(ids...)
	return suuo
}

// AddTasks adds the "tasks" edges to the TaskLog entity.
func (suuo *SocialUserUpdateOne) AddTasks(t ...*TaskLog) *SocialUserUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suuo.AddTaskIDs(ids...)
}

// AddListenRecordIDs adds the "listenRecords" edge to the ListenRecord entity by IDs.
func (suuo *SocialUserUpdateOne) AddListenRecordIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddListenRecordIDs(ids...)
	return suuo
}

// AddListenRecords adds the "listenRecords" edges to the ListenRecord entity.
func (suuo *SocialUserUpdateOne) AddListenRecords(l ...*ListenRecord) *SocialUserUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suuo.AddListenRecordIDs(ids...)
}

// AddAdIDs adds the "ads" edge to the AdChangeLog entity by IDs.
func (suuo *SocialUserUpdateOne) AddAdIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddAdIDs(ids...)
	return suuo
}

// AddAds adds the "ads" edges to the AdChangeLog entity.
func (suuo *SocialUserUpdateOne) AddAds(a ...*AdChangeLog) *SocialUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suuo.AddAdIDs(ids...)
}

// AddBookshelfIDs adds the "bookshelves" edge to the NovelBookshelf entity by IDs.
func (suuo *SocialUserUpdateOne) AddBookshelfIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddBookshelfIDs(ids...)
	return suuo
}

// AddBookshelves adds the "bookshelves" edges to the NovelBookshelf entity.
func (suuo *SocialUserUpdateOne) AddBookshelves(n ...*NovelBookshelf) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.AddBookshelfIDs(ids...)
}

// AddAutoBuyNovelIDs adds the "autoBuyNovels" edge to the NovelAutoBuy entity by IDs.
func (suuo *SocialUserUpdateOne) AddAutoBuyNovelIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddAutoBuyNovelIDs(ids...)
	return suuo
}

// AddAutoBuyNovels adds the "autoBuyNovels" edges to the NovelAutoBuy entity.
func (suuo *SocialUserUpdateOne) AddAutoBuyNovels(n ...*NovelAutoBuy) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.AddAutoBuyNovelIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the NovelComment entity by IDs.
func (suuo *SocialUserUpdateOne) AddCommentIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddCommentIDs(ids...)
	return suuo
}

// AddComments adds the "comments" edges to the NovelComment entity.
func (suuo *SocialUserUpdateOne) AddComments(n ...*NovelComment) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.AddCommentIDs(ids...)
}

// AddMsgIDs adds the "msgs" edge to the UserMsg entity by IDs.
func (suuo *SocialUserUpdateOne) AddMsgIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddMsgIDs(ids...)
	return suuo
}

// AddMsgs adds the "msgs" edges to the UserMsg entity.
func (suuo *SocialUserUpdateOne) AddMsgs(u ...*UserMsg) *SocialUserUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suuo.AddMsgIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the PayOrder entity by IDs.
func (suuo *SocialUserUpdateOne) AddOrderIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddOrderIDs(ids...)
	return suuo
}

// AddOrders adds the "orders" edges to the PayOrder entity.
func (suuo *SocialUserUpdateOne) AddOrders(p ...*PayOrder) *SocialUserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suuo.AddOrderIDs(ids...)
}

// AddVipIDs adds the "vips" edge to the VipUser entity by IDs.
func (suuo *SocialUserUpdateOne) AddVipIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddVipIDs(ids...)
	return suuo
}

// AddVips adds the "vips" edges to the VipUser entity.
func (suuo *SocialUserUpdateOne) AddVips(v ...*VipUser) *SocialUserUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return suuo.AddVipIDs(ids...)
}

// AddBalanceIDs adds the "balances" edge to the AmBalance entity by IDs.
func (suuo *SocialUserUpdateOne) AddBalanceIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddBalanceIDs(ids...)
	return suuo
}

// AddBalances adds the "balances" edges to the AmBalance entity.
func (suuo *SocialUserUpdateOne) AddBalances(a ...*AmBalance) *SocialUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suuo.AddBalanceIDs(ids...)
}

// AddAssetLogIDs adds the "assetLogs" edge to the AssetChangeLog entity by IDs.
func (suuo *SocialUserUpdateOne) AddAssetLogIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddAssetLogIDs(ids...)
	return suuo
}

// AddAssetLogs adds the "assetLogs" edges to the AssetChangeLog entity.
func (suuo *SocialUserUpdateOne) AddAssetLogs(a ...*AssetChangeLog) *SocialUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suuo.AddAssetLogIDs(ids...)
}

// AddBuyChapterRecordIDs adds the "buyChapterRecords" edge to the NovelBuyChapterRecord entity by IDs.
func (suuo *SocialUserUpdateOne) AddBuyChapterRecordIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddBuyChapterRecordIDs(ids...)
	return suuo
}

// AddBuyChapterRecords adds the "buyChapterRecords" edges to the NovelBuyChapterRecord entity.
func (suuo *SocialUserUpdateOne) AddBuyChapterRecords(n ...*NovelBuyChapterRecord) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.AddBuyChapterRecordIDs(ids...)
}

// AddBuyNovelRecordIDs adds the "buyNovelRecords" edge to the NovelBuyRecord entity by IDs.
func (suuo *SocialUserUpdateOne) AddBuyNovelRecordIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.AddBuyNovelRecordIDs(ids...)
	return suuo
}

// AddBuyNovelRecords adds the "buyNovelRecords" edges to the NovelBuyRecord entity.
func (suuo *SocialUserUpdateOne) AddBuyNovelRecords(n ...*NovelBuyRecord) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.AddBuyNovelRecordIDs(ids...)
}

// SetChannelID sets the "channel" edge to the AdChannel entity by ID.
func (suuo *SocialUserUpdateOne) SetChannelID(id int64) *SocialUserUpdateOne {
	suuo.mutation.SetChannelID(id)
	return suuo
}

// SetNillableChannelID sets the "channel" edge to the AdChannel entity by ID if the given value is not nil.
func (suuo *SocialUserUpdateOne) SetNillableChannelID(id *int64) *SocialUserUpdateOne {
	if id != nil {
		suuo = suuo.SetChannelID(*id)
	}
	return suuo
}

// SetChannel sets the "channel" edge to the AdChannel entity.
func (suuo *SocialUserUpdateOne) SetChannel(a *AdChannel) *SocialUserUpdateOne {
	return suuo.SetChannelID(a.ID)
}

// Mutation returns the SocialUserMutation object of the builder.
func (suuo *SocialUserUpdateOne) Mutation() *SocialUserMutation {
	return suuo.mutation
}

// ClearTasks clears all "tasks" edges to the TaskLog entity.
func (suuo *SocialUserUpdateOne) ClearTasks() *SocialUserUpdateOne {
	suuo.mutation.ClearTasks()
	return suuo
}

// RemoveTaskIDs removes the "tasks" edge to TaskLog entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveTaskIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveTaskIDs(ids...)
	return suuo
}

// RemoveTasks removes "tasks" edges to TaskLog entities.
func (suuo *SocialUserUpdateOne) RemoveTasks(t ...*TaskLog) *SocialUserUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suuo.RemoveTaskIDs(ids...)
}

// ClearListenRecords clears all "listenRecords" edges to the ListenRecord entity.
func (suuo *SocialUserUpdateOne) ClearListenRecords() *SocialUserUpdateOne {
	suuo.mutation.ClearListenRecords()
	return suuo
}

// RemoveListenRecordIDs removes the "listenRecords" edge to ListenRecord entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveListenRecordIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveListenRecordIDs(ids...)
	return suuo
}

// RemoveListenRecords removes "listenRecords" edges to ListenRecord entities.
func (suuo *SocialUserUpdateOne) RemoveListenRecords(l ...*ListenRecord) *SocialUserUpdateOne {
	ids := make([]int64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suuo.RemoveListenRecordIDs(ids...)
}

// ClearAds clears all "ads" edges to the AdChangeLog entity.
func (suuo *SocialUserUpdateOne) ClearAds() *SocialUserUpdateOne {
	suuo.mutation.ClearAds()
	return suuo
}

// RemoveAdIDs removes the "ads" edge to AdChangeLog entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveAdIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveAdIDs(ids...)
	return suuo
}

// RemoveAds removes "ads" edges to AdChangeLog entities.
func (suuo *SocialUserUpdateOne) RemoveAds(a ...*AdChangeLog) *SocialUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suuo.RemoveAdIDs(ids...)
}

// ClearBookshelves clears all "bookshelves" edges to the NovelBookshelf entity.
func (suuo *SocialUserUpdateOne) ClearBookshelves() *SocialUserUpdateOne {
	suuo.mutation.ClearBookshelves()
	return suuo
}

// RemoveBookshelfIDs removes the "bookshelves" edge to NovelBookshelf entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveBookshelfIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveBookshelfIDs(ids...)
	return suuo
}

// RemoveBookshelves removes "bookshelves" edges to NovelBookshelf entities.
func (suuo *SocialUserUpdateOne) RemoveBookshelves(n ...*NovelBookshelf) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.RemoveBookshelfIDs(ids...)
}

// ClearAutoBuyNovels clears all "autoBuyNovels" edges to the NovelAutoBuy entity.
func (suuo *SocialUserUpdateOne) ClearAutoBuyNovels() *SocialUserUpdateOne {
	suuo.mutation.ClearAutoBuyNovels()
	return suuo
}

// RemoveAutoBuyNovelIDs removes the "autoBuyNovels" edge to NovelAutoBuy entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveAutoBuyNovelIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveAutoBuyNovelIDs(ids...)
	return suuo
}

// RemoveAutoBuyNovels removes "autoBuyNovels" edges to NovelAutoBuy entities.
func (suuo *SocialUserUpdateOne) RemoveAutoBuyNovels(n ...*NovelAutoBuy) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.RemoveAutoBuyNovelIDs(ids...)
}

// ClearComments clears all "comments" edges to the NovelComment entity.
func (suuo *SocialUserUpdateOne) ClearComments() *SocialUserUpdateOne {
	suuo.mutation.ClearComments()
	return suuo
}

// RemoveCommentIDs removes the "comments" edge to NovelComment entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveCommentIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveCommentIDs(ids...)
	return suuo
}

// RemoveComments removes "comments" edges to NovelComment entities.
func (suuo *SocialUserUpdateOne) RemoveComments(n ...*NovelComment) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.RemoveCommentIDs(ids...)
}

// ClearMsgs clears all "msgs" edges to the UserMsg entity.
func (suuo *SocialUserUpdateOne) ClearMsgs() *SocialUserUpdateOne {
	suuo.mutation.ClearMsgs()
	return suuo
}

// RemoveMsgIDs removes the "msgs" edge to UserMsg entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveMsgIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveMsgIDs(ids...)
	return suuo
}

// RemoveMsgs removes "msgs" edges to UserMsg entities.
func (suuo *SocialUserUpdateOne) RemoveMsgs(u ...*UserMsg) *SocialUserUpdateOne {
	ids := make([]int64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suuo.RemoveMsgIDs(ids...)
}

// ClearOrders clears all "orders" edges to the PayOrder entity.
func (suuo *SocialUserUpdateOne) ClearOrders() *SocialUserUpdateOne {
	suuo.mutation.ClearOrders()
	return suuo
}

// RemoveOrderIDs removes the "orders" edge to PayOrder entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveOrderIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveOrderIDs(ids...)
	return suuo
}

// RemoveOrders removes "orders" edges to PayOrder entities.
func (suuo *SocialUserUpdateOne) RemoveOrders(p ...*PayOrder) *SocialUserUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suuo.RemoveOrderIDs(ids...)
}

// ClearVips clears all "vips" edges to the VipUser entity.
func (suuo *SocialUserUpdateOne) ClearVips() *SocialUserUpdateOne {
	suuo.mutation.ClearVips()
	return suuo
}

// RemoveVipIDs removes the "vips" edge to VipUser entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveVipIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveVipIDs(ids...)
	return suuo
}

// RemoveVips removes "vips" edges to VipUser entities.
func (suuo *SocialUserUpdateOne) RemoveVips(v ...*VipUser) *SocialUserUpdateOne {
	ids := make([]int64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return suuo.RemoveVipIDs(ids...)
}

// ClearBalances clears all "balances" edges to the AmBalance entity.
func (suuo *SocialUserUpdateOne) ClearBalances() *SocialUserUpdateOne {
	suuo.mutation.ClearBalances()
	return suuo
}

// RemoveBalanceIDs removes the "balances" edge to AmBalance entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveBalanceIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveBalanceIDs(ids...)
	return suuo
}

// RemoveBalances removes "balances" edges to AmBalance entities.
func (suuo *SocialUserUpdateOne) RemoveBalances(a ...*AmBalance) *SocialUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suuo.RemoveBalanceIDs(ids...)
}

// ClearAssetLogs clears all "assetLogs" edges to the AssetChangeLog entity.
func (suuo *SocialUserUpdateOne) ClearAssetLogs() *SocialUserUpdateOne {
	suuo.mutation.ClearAssetLogs()
	return suuo
}

// RemoveAssetLogIDs removes the "assetLogs" edge to AssetChangeLog entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveAssetLogIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveAssetLogIDs(ids...)
	return suuo
}

// RemoveAssetLogs removes "assetLogs" edges to AssetChangeLog entities.
func (suuo *SocialUserUpdateOne) RemoveAssetLogs(a ...*AssetChangeLog) *SocialUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suuo.RemoveAssetLogIDs(ids...)
}

// ClearBuyChapterRecords clears all "buyChapterRecords" edges to the NovelBuyChapterRecord entity.
func (suuo *SocialUserUpdateOne) ClearBuyChapterRecords() *SocialUserUpdateOne {
	suuo.mutation.ClearBuyChapterRecords()
	return suuo
}

// RemoveBuyChapterRecordIDs removes the "buyChapterRecords" edge to NovelBuyChapterRecord entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveBuyChapterRecordIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveBuyChapterRecordIDs(ids...)
	return suuo
}

// RemoveBuyChapterRecords removes "buyChapterRecords" edges to NovelBuyChapterRecord entities.
func (suuo *SocialUserUpdateOne) RemoveBuyChapterRecords(n ...*NovelBuyChapterRecord) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.RemoveBuyChapterRecordIDs(ids...)
}

// ClearBuyNovelRecords clears all "buyNovelRecords" edges to the NovelBuyRecord entity.
func (suuo *SocialUserUpdateOne) ClearBuyNovelRecords() *SocialUserUpdateOne {
	suuo.mutation.ClearBuyNovelRecords()
	return suuo
}

// RemoveBuyNovelRecordIDs removes the "buyNovelRecords" edge to NovelBuyRecord entities by IDs.
func (suuo *SocialUserUpdateOne) RemoveBuyNovelRecordIDs(ids ...int64) *SocialUserUpdateOne {
	suuo.mutation.RemoveBuyNovelRecordIDs(ids...)
	return suuo
}

// RemoveBuyNovelRecords removes "buyNovelRecords" edges to NovelBuyRecord entities.
func (suuo *SocialUserUpdateOne) RemoveBuyNovelRecords(n ...*NovelBuyRecord) *SocialUserUpdateOne {
	ids := make([]int64, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suuo.RemoveBuyNovelRecordIDs(ids...)
}

// ClearChannel clears the "channel" edge to the AdChannel entity.
func (suuo *SocialUserUpdateOne) ClearChannel() *SocialUserUpdateOne {
	suuo.mutation.ClearChannel()
	return suuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *SocialUserUpdateOne) Select(field string, fields ...string) *SocialUserUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated SocialUser entity.
func (suuo *SocialUserUpdateOne) Save(ctx context.Context) (*SocialUser, error) {
	var (
		err  error
		node *SocialUser
	)
	suuo.defaults()
	if len(suuo.hooks) == 0 {
		node, err = suuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SocialUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suuo.mutation = mutation
			node, err = suuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suuo.hooks) - 1; i >= 0; i-- {
			if suuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *SocialUserUpdateOne) SaveX(ctx context.Context) *SocialUser {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *SocialUserUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *SocialUserUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suuo *SocialUserUpdateOne) defaults() {
	if _, ok := suuo.mutation.UpdatedAt(); !ok {
		v := socialuser.UpdateDefaultUpdatedAt()
		suuo.mutation.SetUpdatedAt(v)
	}
}

func (suuo *SocialUserUpdateOne) sqlSave(ctx context.Context) (_node *SocialUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   socialuser.Table,
			Columns: socialuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: socialuser.FieldID,
			},
		},
	}
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SocialUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, socialuser.FieldID)
		for _, f := range fields {
			if !socialuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != socialuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldUserId,
		})
	}
	if value, ok := suuo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldUserId,
		})
	}
	if value, ok := suuo.mutation.Unionid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldUnionid,
		})
	}
	if suuo.mutation.UnionidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldUnionid,
		})
	}
	if value, ok := suuo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldToken,
		})
	}
	if suuo.mutation.TokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldToken,
		})
	}
	if value, ok := suuo.mutation.Openid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldOpenid,
		})
	}
	if suuo.mutation.OpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldOpenid,
		})
	}
	if value, ok := suuo.mutation.RoutineOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldRoutineOpenid,
		})
	}
	if suuo.mutation.RoutineOpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldRoutineOpenid,
		})
	}
	if value, ok := suuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldUserName,
		})
	}
	if suuo.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldUserName,
		})
	}
	if value, ok := suuo.mutation.NickName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldNickName,
		})
	}
	if suuo.mutation.NickNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldNickName,
		})
	}
	if value, ok := suuo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: socialuser.FieldBirthday,
		})
	}
	if suuo.mutation.BirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: socialuser.FieldBirthday,
		})
	}
	if value, ok := suuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldPhone,
		})
	}
	if suuo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldPhone,
		})
	}
	if value, ok := suuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldEmail,
		})
	}
	if suuo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldEmail,
		})
	}
	if value, ok := suuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldPassword,
		})
	}
	if suuo.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldPassword,
		})
	}
	if value, ok := suuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldAvatar,
		})
	}
	if suuo.mutation.AvatarCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldAvatar,
		})
	}
	if value, ok := suuo.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSex,
		})
	}
	if value, ok := suuo.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSex,
		})
	}
	if suuo.mutation.SexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: socialuser.FieldSex,
		})
	}
	if value, ok := suuo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldRegion,
		})
	}
	if suuo.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldRegion,
		})
	}
	if value, ok := suuo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldCity,
		})
	}
	if suuo.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldCity,
		})
	}
	if value, ok := suuo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldLanguage,
		})
	}
	if suuo.mutation.LanguageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldLanguage,
		})
	}
	if value, ok := suuo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldProvince,
		})
	}
	if suuo.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldProvince,
		})
	}
	if value, ok := suuo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldCountry,
		})
	}
	if suuo.mutation.CountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldCountry,
		})
	}
	if value, ok := suuo.mutation.Signature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldSignature,
		})
	}
	if suuo.mutation.SignatureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldSignature,
		})
	}
	if value, ok := suuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldRemark,
		})
	}
	if suuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldRemark,
		})
	}
	if value, ok := suuo.mutation.Groupid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldGroupid,
		})
	}
	if value, ok := suuo.mutation.AddedGroupid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldGroupid,
		})
	}
	if suuo.mutation.GroupidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: socialuser.FieldGroupid,
		})
	}
	if value, ok := suuo.mutation.TagidList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldTagidList,
		})
	}
	if suuo.mutation.TagidListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldTagidList,
		})
	}
	if value, ok := suuo.mutation.Subscribe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribe,
		})
	}
	if value, ok := suuo.mutation.AddedSubscribe(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribe,
		})
	}
	if suuo.mutation.SubscribeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: socialuser.FieldSubscribe,
		})
	}
	if value, ok := suuo.mutation.SubscribeTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribeTime,
		})
	}
	if value, ok := suuo.mutation.AddedSubscribeTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: socialuser.FieldSubscribeTime,
		})
	}
	if suuo.mutation.SubscribeTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: socialuser.FieldSubscribeTime,
		})
	}
	if value, ok := suuo.mutation.SessionKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldSessionKey,
		})
	}
	if suuo.mutation.SessionKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldSessionKey,
		})
	}
	if value, ok := suuo.mutation.UserType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialuser.FieldUserType,
		})
	}
	if suuo.mutation.UserTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: socialuser.FieldUserType,
		})
	}
	if value, ok := suuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: socialuser.FieldUpdatedAt,
		})
	}
	if value, ok := suuo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldCreateBy,
		})
	}
	if value, ok := suuo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldCreateBy,
		})
	}
	if value, ok := suuo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldUpdateBy,
		})
	}
	if value, ok := suuo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldUpdateBy,
		})
	}
	if value, ok := suuo.mutation.TenantId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldTenantId,
		})
	}
	if value, ok := suuo.mutation.AddedTenantId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: socialuser.FieldTenantId,
		})
	}
	if suuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.TasksTable,
			Columns: []string{socialuser.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tasklog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !suuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.TasksTable,
			Columns: []string{socialuser.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tasklog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.TasksTable,
			Columns: []string{socialuser.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: tasklog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.ListenRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.ListenRecordsTable,
			Columns: []string{socialuser.ListenRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: listenrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedListenRecordsIDs(); len(nodes) > 0 && !suuo.mutation.ListenRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.ListenRecordsTable,
			Columns: []string{socialuser.ListenRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: listenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.ListenRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.ListenRecordsTable,
			Columns: []string{socialuser.ListenRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: listenrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.AdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AdsTable,
			Columns: []string{socialuser.AdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchangelog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedAdsIDs(); len(nodes) > 0 && !suuo.mutation.AdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AdsTable,
			Columns: []string{socialuser.AdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.AdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AdsTable,
			Columns: []string{socialuser.AdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.BookshelvesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BookshelvesTable,
			Columns: []string{socialuser.BookshelvesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbookshelf.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedBookshelvesIDs(); len(nodes) > 0 && !suuo.mutation.BookshelvesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BookshelvesTable,
			Columns: []string{socialuser.BookshelvesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbookshelf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.BookshelvesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BookshelvesTable,
			Columns: []string{socialuser.BookshelvesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbookshelf.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.AutoBuyNovelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AutoBuyNovelsTable,
			Columns: []string{socialuser.AutoBuyNovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelautobuy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedAutoBuyNovelsIDs(); len(nodes) > 0 && !suuo.mutation.AutoBuyNovelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AutoBuyNovelsTable,
			Columns: []string{socialuser.AutoBuyNovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelautobuy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.AutoBuyNovelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AutoBuyNovelsTable,
			Columns: []string{socialuser.AutoBuyNovelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelautobuy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.CommentsTable,
			Columns: []string{socialuser.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !suuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.CommentsTable,
			Columns: []string{socialuser.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.CommentsTable,
			Columns: []string{socialuser.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelcomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.MsgsTable,
			Columns: []string{socialuser.MsgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usermsg.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedMsgsIDs(); len(nodes) > 0 && !suuo.mutation.MsgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.MsgsTable,
			Columns: []string{socialuser.MsgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usermsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.MsgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.MsgsTable,
			Columns: []string{socialuser.MsgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: usermsg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.OrdersTable,
			Columns: []string{socialuser.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !suuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.OrdersTable,
			Columns: []string{socialuser.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.OrdersTable,
			Columns: []string{socialuser.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.VipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   socialuser.VipsTable,
			Columns: socialuser.VipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: vipuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedVipsIDs(); len(nodes) > 0 && !suuo.mutation.VipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   socialuser.VipsTable,
			Columns: socialuser.VipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: vipuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.VipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   socialuser.VipsTable,
			Columns: socialuser.VipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: vipuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.BalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BalancesTable,
			Columns: []string{socialuser.BalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ambalance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedBalancesIDs(); len(nodes) > 0 && !suuo.mutation.BalancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BalancesTable,
			Columns: []string{socialuser.BalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ambalance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.BalancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BalancesTable,
			Columns: []string{socialuser.BalancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: ambalance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.AssetLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AssetLogsTable,
			Columns: []string{socialuser.AssetLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: assetchangelog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedAssetLogsIDs(); len(nodes) > 0 && !suuo.mutation.AssetLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AssetLogsTable,
			Columns: []string{socialuser.AssetLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: assetchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.AssetLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.AssetLogsTable,
			Columns: []string{socialuser.AssetLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: assetchangelog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.BuyChapterRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyChapterRecordsTable,
			Columns: []string{socialuser.BuyChapterRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuychapterrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedBuyChapterRecordsIDs(); len(nodes) > 0 && !suuo.mutation.BuyChapterRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyChapterRecordsTable,
			Columns: []string{socialuser.BuyChapterRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuychapterrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.BuyChapterRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyChapterRecordsTable,
			Columns: []string{socialuser.BuyChapterRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuychapterrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.BuyNovelRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyNovelRecordsTable,
			Columns: []string{socialuser.BuyNovelRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuyrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.RemovedBuyNovelRecordsIDs(); len(nodes) > 0 && !suuo.mutation.BuyNovelRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyNovelRecordsTable,
			Columns: []string{socialuser.BuyNovelRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.BuyNovelRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   socialuser.BuyNovelRecordsTable,
			Columns: []string{socialuser.BuyNovelRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: novelbuyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   socialuser.ChannelTable,
			Columns: []string{socialuser.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   socialuser.ChannelTable,
			Columns: []string{socialuser.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: adchannel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SocialUser{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{socialuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
