// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hope/apps/novel/internal/data/ent/novelbookshelf"
	"hope/apps/novel/internal/data/ent/socialuser"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// NovelBookshelf is the model entity for the NovelBookshelf schema.
type NovelBookshelf struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	// 用户ID
	UserId int64 `json:"userId,omitempty"`
	// UserName holds the value of the "userName" field.
	// 用户名
	UserName string `json:"userName,omitempty"`
	// NovelId holds the value of the "novelId" field.
	// 小说编号
	NovelId int64 `json:"novelId,omitempty"`
	// LastReadTime holds the value of the "lastReadTime" field.
	// 最后阅读时间
	LastReadTime time.Time `json:"lastReadTime,omitempty"`
	// LastChapterOrder holds the value of the "lastChapterOrder" field.
	// 章节序号
	LastChapterOrder int32 `json:"lastChapterOrder,omitempty"`
	// LastChapterId holds the value of the "lastChapterId" field.
	// 章节ID
	LastChapterId int64 `json:"lastChapterId,omitempty"`
	// LastChapterName holds the value of the "lastChapterName" field.
	// 最后阅读章节名称
	LastChapterName string `json:"lastChapterName,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	// 创建时间
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	// 更新时间
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// CreateBy holds the value of the "createBy" field.
	// 创建者
	CreateBy int64 `json:"createBy,omitempty"`
	// UpdateBy holds the value of the "updateBy" field.
	// 更新者
	UpdateBy int64 `json:"updateBy,omitempty"`
	// TenantId holds the value of the "tenantId" field.
	// 租户
	TenantId int64 `json:"tenantId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NovelBookshelfQuery when eager-loading is set.
	Edges NovelBookshelfEdges `json:"edges"`
}

// NovelBookshelfEdges holds the relations/edges for other nodes in the graph.
type NovelBookshelfEdges struct {
	// User holds the value of the user edge.
	User *SocialUser `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NovelBookshelfEdges) UserOrErr() (*SocialUser, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: socialuser.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NovelBookshelf) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case novelbookshelf.FieldID, novelbookshelf.FieldUserId, novelbookshelf.FieldNovelId, novelbookshelf.FieldLastChapterOrder, novelbookshelf.FieldLastChapterId, novelbookshelf.FieldCreateBy, novelbookshelf.FieldUpdateBy, novelbookshelf.FieldTenantId:
			values[i] = new(sql.NullInt64)
		case novelbookshelf.FieldUserName, novelbookshelf.FieldLastChapterName, novelbookshelf.FieldRemark:
			values[i] = new(sql.NullString)
		case novelbookshelf.FieldLastReadTime, novelbookshelf.FieldCreatedAt, novelbookshelf.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NovelBookshelf", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NovelBookshelf fields.
func (nb *NovelBookshelf) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case novelbookshelf.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nb.ID = int64(value.Int64)
		case novelbookshelf.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				nb.UserId = value.Int64
			}
		case novelbookshelf.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userName", values[i])
			} else if value.Valid {
				nb.UserName = value.String
			}
		case novelbookshelf.FieldNovelId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field novelId", values[i])
			} else if value.Valid {
				nb.NovelId = value.Int64
			}
		case novelbookshelf.FieldLastReadTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastReadTime", values[i])
			} else if value.Valid {
				nb.LastReadTime = value.Time
			}
		case novelbookshelf.FieldLastChapterOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lastChapterOrder", values[i])
			} else if value.Valid {
				nb.LastChapterOrder = int32(value.Int64)
			}
		case novelbookshelf.FieldLastChapterId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lastChapterId", values[i])
			} else if value.Valid {
				nb.LastChapterId = value.Int64
			}
		case novelbookshelf.FieldLastChapterName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastChapterName", values[i])
			} else if value.Valid {
				nb.LastChapterName = value.String
			}
		case novelbookshelf.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				nb.Remark = value.String
			}
		case novelbookshelf.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				nb.CreatedAt = value.Time
			}
		case novelbookshelf.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				nb.UpdatedAt = value.Time
			}
		case novelbookshelf.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createBy", values[i])
			} else if value.Valid {
				nb.CreateBy = value.Int64
			}
		case novelbookshelf.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updateBy", values[i])
			} else if value.Valid {
				nb.UpdateBy = value.Int64
			}
		case novelbookshelf.FieldTenantId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenantId", values[i])
			} else if value.Valid {
				nb.TenantId = value.Int64
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the NovelBookshelf entity.
func (nb *NovelBookshelf) QueryUser() *SocialUserQuery {
	return (&NovelBookshelfClient{config: nb.config}).QueryUser(nb)
}

// Update returns a builder for updating this NovelBookshelf.
// Note that you need to call NovelBookshelf.Unwrap() before calling this method if this NovelBookshelf
// was returned from a transaction, and the transaction was committed or rolled back.
func (nb *NovelBookshelf) Update() *NovelBookshelfUpdateOne {
	return (&NovelBookshelfClient{config: nb.config}).UpdateOne(nb)
}

// Unwrap unwraps the NovelBookshelf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nb *NovelBookshelf) Unwrap() *NovelBookshelf {
	tx, ok := nb.config.driver.(*txDriver)
	if !ok {
		panic("ent: NovelBookshelf is not a transactional entity")
	}
	nb.config.driver = tx.drv
	return nb
}

// String implements the fmt.Stringer.
func (nb *NovelBookshelf) String() string {
	var builder strings.Builder
	builder.WriteString("NovelBookshelf(")
	builder.WriteString(fmt.Sprintf("id=%v", nb.ID))
	builder.WriteString(", userId=")
	builder.WriteString(fmt.Sprintf("%v", nb.UserId))
	builder.WriteString(", userName=")
	builder.WriteString(nb.UserName)
	builder.WriteString(", novelId=")
	builder.WriteString(fmt.Sprintf("%v", nb.NovelId))
	builder.WriteString(", lastReadTime=")
	builder.WriteString(nb.LastReadTime.Format(time.ANSIC))
	builder.WriteString(", lastChapterOrder=")
	builder.WriteString(fmt.Sprintf("%v", nb.LastChapterOrder))
	builder.WriteString(", lastChapterId=")
	builder.WriteString(fmt.Sprintf("%v", nb.LastChapterId))
	builder.WriteString(", lastChapterName=")
	builder.WriteString(nb.LastChapterName)
	builder.WriteString(", remark=")
	builder.WriteString(nb.Remark)
	builder.WriteString(", createdAt=")
	builder.WriteString(nb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(nb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", createBy=")
	builder.WriteString(fmt.Sprintf("%v", nb.CreateBy))
	builder.WriteString(", updateBy=")
	builder.WriteString(fmt.Sprintf("%v", nb.UpdateBy))
	builder.WriteString(", tenantId=")
	builder.WriteString(fmt.Sprintf("%v", nb.TenantId))
	builder.WriteByte(')')
	return builder.String()
}

// NovelBookshelves is a parsable slice of NovelBookshelf.
type NovelBookshelves []*NovelBookshelf

func (nb NovelBookshelves) config(cfg config) {
	for _i := range nb {
		nb[_i].config = cfg
	}
}
